
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x000128fc memsz 0x000128fc flags r-x
    LOAD off    0x0001391c vaddr 0x0801291c paddr 0x08014538 align 2**12
         filesz 0x00001c1c memsz 0x00001c1c flags rw-
    LOAD off    0x00016154 vaddr 0x08016154 paddr 0x08016154 align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011edc  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000081c  08012100  08012100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c1c  0801291c  08014538  0001391c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  08016154  08016154  00016154  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015538  2**0
                  CONTENTS
  7 .sdram        00000000  08016434  08016434  00015538  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00015538  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00001018  00000000  00000000  00015568  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004ceae  00000000  00000000  00016580  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f7e7  00000000  00000000  0006342e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000195f0  00000000  00000000  00072c15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027f8  00000000  00000000  0008c208  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000048c9  00000000  00000000  0008ea00  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c7bd  00000000  00000000  000932c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000afa88  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ca8  00000000  00000000  000afac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b504e  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b5051  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b505d  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b505e  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b505f  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b5063  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b5067  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b506b  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b5076  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b5081  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  000b508c  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000031  00000000  00000000  000b5095  2**0
                  CONTENTS, READONLY
 30 .jdi          00004f7e  00000000  00000000  000b50c6  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000857d6  00000000  00000000  000ba044  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
08012100 l    d  .rodata	00000000 .rodata
0801291c l    d  .rwdata	00000000 .rwdata
08016154 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08016434 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
080144ec l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
08016164 l     O .bss	00000004 usb_delay.2681
08016168 l     O .bss	00000001 tmp_addr.2682
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08005000 l     F .text	000000c0 __sbprintf
080123ee l     O .rodata	00000010 blanks.5226
080123de l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08005220 l     F .text	00000234 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08006dcc l     F .text	00000008 __fp_lock
08006de0 l     F .text	00000168 __sinit.part.0
08006f48 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801294c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08012410 l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a274 l     F .text	000000f4 __sprint_r.part.0
0800b6d4 l     F .text	000000c0 __sbprintf
08012544 l     O .rodata	00000010 blanks.5203
08012534 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f6f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f80c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800f838 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800f930 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800fa1c l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800fb08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800fce8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08014528 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
08010120 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
08010260 l     F .text	00000034 alt_dev_reg
0801348c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
08010554 l     F .text	00000204 altera_avalon_jtag_uart_irq
08010758 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_spi.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08010f90 l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08011328 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801177c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
080118cc l     F .text	0000003c alt_get_errno
08011908 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08016198 g     O .bss	00000004 alt_instruction_exception_handler
08002cd4 g     F .text	00000018 putchar
080097b0 g     F .text	00000074 _mprec_log10
08009890 g     F .text	00000074 __any_on
0800bdd0 g     F .text	00000058 _isatty_r
0801241c g     O .rodata	00000028 __mprec_tinytens
0800fc24 g     F .text	0000007c alt_main
080144f4 g     O .rwdata	00000008 ctrl_xfers
08002cec g     F .text	000000cc _puts_r
08016334 g     O .bss	00000100 alt_irq
0800beb8 g     F .text	00000064 _lseek_r
08002240 g     F .text	00000630 USB_Task
08014538 g       *ABS*	00000000 __flash_rwdata_start
0800e0bc g     F .text	00000080 .hidden __eqdf2
08016434 g       *ABS*	00000000 __alt_heap_start
08002c94 g     F .text	00000038 printf
0800c0a8 g     F .text	0000006c _wcrtomb_r
08001320 g     F .text	00000084 kbdPoll
0800a210 g     F .text	0000005c __sseek
080070d8 g     F .text	00000010 __sinit
0800b794 g     F .text	00000148 __swbuf_r
0800be28 g     F .text	00000070 _setlocale_r
08006f50 g     F .text	00000078 __sfmoreglue
0800fcc4 g     F .text	00000024 __malloc_unlock
08000260 g     F .text	000001e8 GetDriverandReport
08008734 g     F .text	0000012c memmove
080070c4 g     F .text	00000014 _cleanup
08008950 g     F .text	000000a4 _Balloc
08001484 g     F .text	000000d0 MAXreg_wr
0801291c g     O .rwdata	00000030 ClientDriverTable
0800e13c g     F .text	000000f0 .hidden __gtdf2
08011b44 g     F .text	00000024 altera_nios2_gen2_irq_init
08002870 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
08007b64 g     F .text	00000008 __localeconv_l
08001d44 g     F .text	000000ec XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801619c g     O .bss	00000010 hid_ep
0800bd70 g     F .text	00000060 _fstat_r
08016178 g     O .bss	00000004 errno
0800a188 g     F .text	00000008 __seofread
08016184 g     O .bss	00000004 alt_argv
0801c4ec g       *ABS*	00000000 _gp
080100f0 g     F .text	00000030 usleep
08001630 g     F .text	000000bc MAXreg_rd
0801330c g     O .rwdata	00000180 alt_fd_list
08001264 g     F .text	00000038 HID_init
08002ccc g     F .text	00000008 _putchar_r
08011b68 g     F .text	00000090 alt_find_dev
08008634 g     F .text	00000100 memcpy
08006dd4 g     F .text	0000000c _cleanup_r
0800f53c g     F .text	000000c8 .hidden __floatsidf
08011850 g     F .text	0000007c alt_io_redirect
0800e22c g     F .text	000000f0 .hidden __ltdf2
08012100 g       *ABS*	00000000 __DTOR_END__
080144f0 g     O .rwdata	00000004 SPI_MASTER_BASE
08002db8 g     F .text	00000010 puts
08011db8 g     F .text	00000098 alt_exception_cause_generated_bad_addr
0800970c g     F .text	000000a4 __ratio
0800b6bc g     F .text	00000018 __vfiprintf_internal
08010954 g     F .text	0000021c altera_avalon_jtag_uart_read
08002c64 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002b7c g     F .text	00000064 .hidden __udivsi3
0800f96c g     F .text	000000b0 isatty
0801246c g     O .rodata	000000c8 __mprec_tens
08016174 g     O .bss	00000004 __malloc_top_pad
080144fc g     O .rwdata	00000001 usb_task_state
08007b6c g     F .text	0000000c _localeconv_r
08008d78 g     F .text	00000034 __i2b
08007538 g     F .text	000004d4 __sfvwrite_r
0800a0dc g     F .text	00000058 _sbrk_r
0800bf6c g     F .text	00000064 _read_r
08001a00 g     F .text	00000094 MAX3421E_init
08000704 g     F .text	00000030 setKeycode
08014520 g     O .rwdata	00000004 alt_max_fd
0800ba78 g     F .text	000000f8 _fclose_r
08006da4 g     F .text	00000028 fflush
08016170 g     O .bss	00000004 __malloc_max_sbrked_mem
0800cdb8 g     F .text	000009a0 .hidden __adddf3
080094c0 g     F .text	00000104 __b2d
0800c7f0 g     F .text	000005c8 .hidden __umoddi3
0800fb44 g     F .text	000000e0 lseek
08014500 g     O .rwdata	00000004 _global_impure_ptr
08009ab0 g     F .text	0000062c _realloc_r
08016434 g       *ABS*	00000000 __bss_end
08011698 g     F .text	000000e4 alt_iic_isr_register
0800ffe8 g     F .text	00000108 alt_tick
0800c1d4 g     F .text	0000061c .hidden __udivdi3
0800bcd0 g     F .text	00000024 _fputwc_r
08012444 g     O .rodata	00000028 __mprec_bigtens
08008b54 g     F .text	00000110 __s2b
0800f604 g     F .text	0000009c .hidden __floatunsidf
08009250 g     F .text	00000058 __mcmp
080070f8 g     F .text	00000014 __fp_lock_all
0801164c g     F .text	0000004c alt_ic_irq_enabled
0800ff4c g     F .text	0000009c alt_alarm_stop
08016194 g     O .bss	00000004 alt_irq_active
08002940 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000c8 alt_irq_handler
080132e4 g     O .rwdata	00000028 alt_dev_null
0800129c g     F .text	00000084 mousePoll
08001854 g     F .text	00000024 Vbus_power
08011308 g     F .text	00000020 alt_dcache_flush_all
08008c64 g     F .text	00000064 __hi0bits
0800f4bc g     F .text	00000080 .hidden __fixdfsi
08014538 g       *ABS*	00000000 __ram_rwdata_end
08014518 g     O .rwdata	00000008 alt_dev_list
0801015c g     F .text	00000104 write
08009904 g     F .text	000000cc _putc_r
0801291c g       *ABS*	00000000 __ram_rodata_end
08016169 g     O .bss	00000001 usb_error
0800f874 g     F .text	000000bc fstat
0800e22c g     F .text	000000f0 .hidden __ledf2
08008fec g     F .text	00000128 __pow5mult
0800a380 g     F .text	0000133c ___vfiprintf_internal_r
08002be0 g     F .text	0000005c .hidden __umodsi3
08016434 g       *ABS*	00000000 end
08010494 g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
08001eb0 g     F .text	00000180 XferDispatchPkt
08012100 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08011008 g     F .text	0000007c alt_avalon_timer_sc_init
0800f6a0 g     F .text	00000054 .hidden __clzsi2
08010b70 g     F .text	00000224 altera_avalon_jtag_uart_write
080070e8 g     F .text	00000004 __sfp_lock_acquire
0800854c g     F .text	000000e8 memchr
08002e60 g     F .text	00002188 ___vfprintf_internal_r
08001bbc g     F .text	00000034 MaxGpxHandler
0800723c g     F .text	000002fc _free_r
08012665 g     O .rodata	00000180 _ctype_b
0800be98 g     F .text	0000000c __locale_mb_cur_max
08011fb4 g     F .text	00000118 __call_exitprocs
08014508 g     O .rwdata	00000004 __malloc_sbrk_base
08000224 g     F .text	0000003c _start
0801618c g     O .bss	00000004 _alt_tick_rate
080016ec g     F .text	000000d0 MAXbytes_rd
08009114 g     F .text	0000013c __lshift
08010d94 g     F .text	000001fc alt_avalon_spi_command
08016190 g     O .bss	00000004 _alt_nticks
0800fd24 g     F .text	00000108 read
080102cc g     F .text	00000064 alt_sys_init
080162ec g     O .bss	00000048 devtable
08011f24 g     F .text	00000090 __register_exitproc
08000e80 g     F .text	000003e4 HIDKProbe
080161ac g     O .bss	00000018 msd_ep
08008dac g     F .text	00000240 __multiply
080107f8 g     F .text	00000068 altera_avalon_jtag_uart_close
080021b8 g     F .text	00000088 USB_init
08002c3c g     F .text	00000028 .hidden __mulsi3
080161ec g     O .bss	00000100 bigbuf
0801291c g       *ABS*	00000000 __ram_rwdata_start
08012100 g       *ABS*	00000000 __ram_rodata_start
080161c4 g     O .bss	00000028 __malloc_current_mallinfo
08016160 g     O .bss	00000001 last_usb_task_state
080095c4 g     F .text	00000148 __d2b
08016158 g     O .bss	00000008 dev0ep
08000484 g     F .text	00000040 clearLED
08010330 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
08011d00 g     F .text	000000b8 alt_get_fd
080111b0 g     F .text	00000158 alt_busy_sleep
0800289c g     F .text	0000003c MSDEventHandler
0800b954 g     F .text	00000058 _close_r
08011e98 g     F .text	0000008c memcmp
080103f0 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08016434 g       *ABS*	00000000 __alt_stack_base
08010440 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080050c0 g     F .text	00000160 __swsetup_r
0800d758 g     F .text	00000964 .hidden __divdf3
08006fc8 g     F .text	000000fc __sfp
08009824 g     F .text	0000006c __copybits
08012d70 g     O .rwdata	00000408 __malloc_av_
080070f4 g     F .text	00000004 __sinit_lock_release
08002904 g     F .text	0000003c CDCEventHandler
0800e31c g     F .text	000007e0 .hidden __muldf3
0800296c g     F .text	0000003c DummyEventHandler
0800a134 g     F .text	00000054 __sread
08011bf8 g     F .text	00000108 alt_find_file
08011364 g     F .text	000000a4 alt_dev_llist_insert
0800fca0 g     F .text	00000024 __malloc_lock
0800fe9c g     F .text	000000b0 sbrk
08006d44 g     F .text	00000060 _fflush_r
0800b9ac g     F .text	000000cc _calloc_r
08016154 g       *ABS*	00000000 __bss_start
08001878 g     F .text	00000188 MAX_busprobe
08016154 g     O .bss	00000002 hid_device
08008860 g     F .text	000000f0 memset
08000734 g     F .text	00000368 main
08001a94 g     F .text	0000005c MAX3421E_Task
08016188 g     O .bss	00000004 alt_envp
0801616c g     O .bss	00000004 __malloc_max_total_mem
08010390 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800b8dc g     F .text	00000014 __swbuf
08002a00 g     F .text	00000084 ConvUTF8ToStr
0800a26c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800bb70 g     F .text	00000010 fclose
08005454 g     F .text	000016c8 _dtoa_r
08007d58 g     F .text	000007f4 _malloc_r
0800c1a4 g     F .text	00000030 __ascii_wctomb
08014524 g     O .rwdata	00000004 alt_errno
08007a0c g     F .text	000000a4 _fwalk
0800bf1c g     F .text	0000000c _mbtowc_r
080099d0 g     F .text	000000e0 putc
08002a84 g     F .text	00000080 .hidden __divsi3
08002030 g     F .text	00000188 XferInTransfer
080005d4 g     F .text	00000130 printSignedHex1
08007120 g     F .text	0000011c _malloc_trim_r
08012100 g       *ABS*	00000000 __CTOR_END__
080029c8 g     F .text	00000038 GetDevtable
0800bfd0 g     F .text	000000d8 strcmp
08012100 g       *ABS*	00000000 __flash_rodata_start
08012100 g       *ABS*	00000000 __DTOR_LIST__
08001e30 g     F .text	00000080 XferCtrlND
0800e0bc g     F .text	00000080 .hidden __nedf2
080017bc g     F .text	00000098 MAX3421E_reset
08010294 g     F .text	00000038 alt_irq_init
0800fe2c g     F .text	00000070 alt_release_fd
080127e5 g     O .rodata	00000100 .hidden __clz_tab
0801617c g     O .bss	00000004 _PathLocale
08011e50 g     F .text	00000014 atexit
0800b8f0 g     F .text	00000064 _write_r
0800bea4 g     F .text	00000014 setlocale
08014504 g     O .rwdata	00000004 _impure_ptr
08016180 g     O .bss	00000004 alt_argc
08006b1c g     F .text	00000228 __sflush_r
08011468 g     F .text	00000060 _do_dtors
08001554 g     F .text	000000dc MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
0800bf28 g     F .text	00000044 __ascii_mbtowc
08009464 g     F .text	0000005c __ulp
0800710c g     F .text	00000014 __fp_unlock_all
08014510 g     O .rwdata	00000008 alt_fs_list
080028d8 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007b78 g     F .text	0000000c localeconv
08000448 g     F .text	0000003c setLED
080029a8 g     F .text	00000020 GetUsbTaskState
08007b84 g     F .text	00000098 __swhatbuf_r
080114e8 g     F .text	00000050 alt_ic_isr_register
0801213c g     O .rodata	00000010 devclasses
08014538 g       *ABS*	00000000 _edata
080013e0 g     F .text	0000003c HIDKEventHandler
08016434 g       *ABS*	00000000 _end
08001af0 g     F .text	000000cc MaxIntHandler
0800bb80 g     F .text	00000150 __fputwc
08000224 g       *ABS*	00000000 __ram_exceptions_end
08010860 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0800141c g     F .text	00000040 SPI_init
080115c0 g     F .text	0000008c alt_ic_irq_disable
0800a190 g     F .text	00000080 __swrite
0801450c g     O .rwdata	00000004 __malloc_trim_threshold
08011e64 g     F .text	00000034 exit
08007ab0 g     F .text	000000b4 _fwalk_reent
080092a8 g     F .text	000001bc __mdiff
08002b04 g     F .text	00000078 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
080070ec g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08012564 g     O .rodata	00000101 _ctype_
0800f468 g     F .text	00000054 .hidden __unorddf2
080013a4 g     F .text	0000003c HIDMEventHandler
080120cc g     F .text	00000034 _exit
08011084 g     F .text	0000012c alt_alarm_start
080004c4 g     F .text	00000110 printSignedHex0
08007c1c g     F .text	0000013c __smakebuf_r
08002dc8 g     F .text	00000098 strlen
080119e4 g     F .text	00000160 open
0800e13c g     F .text	000000f0 .hidden __gedf2
0800a368 g     F .text	00000018 __sprint_r
080114c8 g     F .text	00000020 alt_icache_flush_all
08014534 g     O .rwdata	00000004 alt_priority_mask
08011538 g     F .text	00000088 alt_ic_irq_enable
08004fe8 g     F .text	00000018 __vfprintf_internal
08000a9c g     F .text	000003e4 HIDMProbe
0800c198 g     F .text	0000000c _wctomb_r
0800145c g     F .text	00000028 SPI_wr
0800eafc g     F .text	0000096c .hidden __subdf3
08008cc8 g     F .text	000000b0 __lo0bits
0801452c g     O .rwdata	00000008 alt_alarm_list
08011408 g     F .text	00000060 _do_ctors
0800c114 g     F .text	00000084 wcrtomb
0800f730 g     F .text	000000dc close
08013178 g     O .rwdata	0000016c __global_locale
0800fa84 g     F .text	00000084 alt_load
0800bcf4 g     F .text	0000007c fputwc
080070f0 g     F .text	00000004 __sinit_lock_acquire
08001bf0 g     F .text	00000154 XferCtrlReq
08008a18 g     F .text	0000013c __multadd
080089f4 g     F .text	00000024 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	00820074 	movhi	r2,2049
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10d8cd17 	ldw	r3,25396(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	00820074 	movhi	r2,2049
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	1098ce17 	ldw	r2,25400(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a72b17 	ldw	r2,-25428(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a72b17 	ldw	r2,-25428(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000230:	d6b13b14 	ori	gp,gp,50412
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000238:	10985514 	ori	r2,r2,24916

    movhi r3, %hi(__bss_end)
 800023c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000240:	18d90d14 	ori	r3,r3,25652

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	800fa840 	call	800fa84 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	800fc240 	call	800fc24 <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 8000260:	defff604 	addi	sp,sp,-40
 8000264:	dfc00915 	stw	ra,36(sp)
 8000268:	df000815 	stw	fp,32(sp)
 800026c:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 8000270:	00bfffc4 	movi	r2,-1
 8000274:	e0bfff85 	stb	r2,-2(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 8000278:	01020074 	movhi	r4,2049
 800027c:	21085304 	addi	r4,r4,8524
 8000280:	8002db80 	call	8002db8 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8000284:	00800044 	movi	r2,1
 8000288:	e0bfffc5 	stb	r2,-1(fp)
 800028c:	00001d06 	br	8000304 <GetDriverandReport+0xa4>
		tpl_ptr = GetDevtable(i);
 8000290:	e0bfffc3 	ldbu	r2,-1(fp)
 8000294:	1009883a 	mov	r4,r2
 8000298:	80029c80 	call	80029c8 <GetDevtable>
 800029c:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 80002a0:	e0bffe17 	ldw	r2,-8(fp)
 80002a4:	10800017 	ldw	r2,0(r2)
 80002a8:	10001326 	beq	r2,zero,80002f8 <GetDriverandReport+0x98>
			printf("Device: %d", i);
 80002ac:	e0bfffc3 	ldbu	r2,-1(fp)
 80002b0:	100b883a 	mov	r5,r2
 80002b4:	01020074 	movhi	r4,2049
 80002b8:	21085c04 	addi	r4,r4,8560
 80002bc:	8002c940 	call	8002c94 <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 80002c0:	e0bffe17 	ldw	r2,-8(fp)
 80002c4:	10800103 	ldbu	r2,4(r2)
 80002c8:	10803fcc 	andi	r2,r2,255
 80002cc:	100690ba 	slli	r3,r2,2
 80002d0:	00820074 	movhi	r2,2049
 80002d4:	1885883a 	add	r2,r3,r2
 80002d8:	10884f17 	ldw	r2,8508(r2)
 80002dc:	100b883a 	mov	r5,r2
 80002e0:	01020074 	movhi	r4,2049
 80002e4:	21085f04 	addi	r4,r4,8572
 80002e8:	8002c940 	call	8002c94 <printf>
			device = tpl_ptr->devclass;
 80002ec:	e0bffe17 	ldw	r2,-8(fp)
 80002f0:	10800103 	ldbu	r2,4(r2)
 80002f4:	e0bfff85 	stb	r2,-2(fp)
	for (i = 1; i < USB_NUMDEVICES; i++) {
 80002f8:	e0bfffc3 	ldbu	r2,-1(fp)
 80002fc:	10800044 	addi	r2,r2,1
 8000300:	e0bfffc5 	stb	r2,-1(fp)
 8000304:	e0bfffc3 	ldbu	r2,-1(fp)
 8000308:	10800230 	cmpltui	r2,r2,8
 800030c:	103fe01e 	bne	r2,zero,8000290 <GetDriverandReport+0x30>
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000310:	d0a00003 	ldbu	r2,-32768(gp)
 8000314:	11003fcc 	andi	r4,r2,255
 8000318:	d0a71a43 	ldbu	r2,-25495(gp)
 800031c:	10803fcc 	andi	r2,r2,255
 8000320:	e0fffd84 	addi	r3,fp,-10
 8000324:	d8c00415 	stw	r3,16(sp)
 8000328:	00c00044 	movi	r3,1
 800032c:	d8c00315 	stw	r3,12(sp)
 8000330:	d8800215 	stw	r2,8(sp)
 8000334:	d8000115 	stw	zero,4(sp)
 8000338:	d8000015 	stw	zero,0(sp)
 800033c:	01c00084 	movi	r7,2
 8000340:	01802844 	movi	r6,161
 8000344:	000b883a 	mov	r5,zero
 8000348:	8001bf00 	call	8001bf0 <XferCtrlReq>
 800034c:	e0bffdc5 	stb	r2,-9(fp)
	if (rcode) {   //error handling
 8000350:	e0bffdc3 	ldbu	r2,-9(fp)
 8000354:	10000926 	beq	r2,zero,800037c <GetDriverandReport+0x11c>
		printf("GetIdle Error. Error code: ");
 8000358:	01020074 	movhi	r4,2049
 800035c:	21086104 	addi	r4,r4,8580
 8000360:	8002c940 	call	8002c94 <printf>
		printf("%x \n", rcode);
 8000364:	e0bffdc3 	ldbu	r2,-9(fp)
 8000368:	100b883a 	mov	r5,r2
 800036c:	01020074 	movhi	r4,2049
 8000370:	21086804 	addi	r4,r4,8608
 8000374:	8002c940 	call	8002c94 <printf>
 8000378:	00000906 	br	80003a0 <GetDriverandReport+0x140>
	} else {
		printf("Update rate: ");
 800037c:	01020074 	movhi	r4,2049
 8000380:	21086a04 	addi	r4,r4,8616
 8000384:	8002c940 	call	8002c94 <printf>
		printf("%x \n", tmpbyte);
 8000388:	e0bffd83 	ldbu	r2,-10(fp)
 800038c:	10803fcc 	andi	r2,r2,255
 8000390:	100b883a 	mov	r5,r2
 8000394:	01020074 	movhi	r4,2049
 8000398:	21086804 	addi	r4,r4,8608
 800039c:	8002c940 	call	8002c94 <printf>
	}
	printf("Protocol: ");
 80003a0:	01020074 	movhi	r4,2049
 80003a4:	21086e04 	addi	r4,r4,8632
 80003a8:	8002c940 	call	8002c94 <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80003ac:	d0a00003 	ldbu	r2,-32768(gp)
 80003b0:	11003fcc 	andi	r4,r2,255
 80003b4:	d0a71a43 	ldbu	r2,-25495(gp)
 80003b8:	10803fcc 	andi	r2,r2,255
 80003bc:	e0fffd84 	addi	r3,fp,-10
 80003c0:	d8c00415 	stw	r3,16(sp)
 80003c4:	00c00044 	movi	r3,1
 80003c8:	d8c00315 	stw	r3,12(sp)
 80003cc:	d8800215 	stw	r2,8(sp)
 80003d0:	d8000115 	stw	zero,4(sp)
 80003d4:	d8000015 	stw	zero,0(sp)
 80003d8:	01c000c4 	movi	r7,3
 80003dc:	01802844 	movi	r6,161
 80003e0:	000b883a 	mov	r5,zero
 80003e4:	8001bf00 	call	8001bf0 <XferCtrlReq>
 80003e8:	e0bffdc5 	stb	r2,-9(fp)
	if (rcode) {   //error handling
 80003ec:	e0bffdc3 	ldbu	r2,-9(fp)
 80003f0:	10000926 	beq	r2,zero,8000418 <GetDriverandReport+0x1b8>
		printf("GetProto Error. Error code ");
 80003f4:	01020074 	movhi	r4,2049
 80003f8:	21087104 	addi	r4,r4,8644
 80003fc:	8002c940 	call	8002c94 <printf>
		printf("%x \n", rcode);
 8000400:	e0bffdc3 	ldbu	r2,-9(fp)
 8000404:	100b883a 	mov	r5,r2
 8000408:	01020074 	movhi	r4,2049
 800040c:	21086804 	addi	r4,r4,8608
 8000410:	8002c940 	call	8002c94 <printf>
 8000414:	00000606 	br	8000430 <GetDriverandReport+0x1d0>
	} else {
		printf("%d \n", tmpbyte);
 8000418:	e0bffd83 	ldbu	r2,-10(fp)
 800041c:	10803fcc 	andi	r2,r2,255
 8000420:	100b883a 	mov	r5,r2
 8000424:	01020074 	movhi	r4,2049
 8000428:	21087804 	addi	r4,r4,8672
 800042c:	8002c940 	call	8002c94 <printf>
	}
	return device;
 8000430:	e0bfff83 	ldbu	r2,-2(fp)
}
 8000434:	e037883a 	mov	sp,fp
 8000438:	dfc00117 	ldw	ra,4(sp)
 800043c:	df000017 	ldw	fp,0(sp)
 8000440:	dec00204 	addi	sp,sp,8
 8000444:	f800283a 	ret

08000448 <setLED>:

void setLED(int LED) {
 8000448:	defffe04 	addi	sp,sp,-8
 800044c:	df000115 	stw	fp,4(sp)
 8000450:	df000104 	addi	fp,sp,4
 8000454:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8000458:	00c05437 	ldwio	r3,336(zero)
 800045c:	01000044 	movi	r4,1
 8000460:	e0bfff17 	ldw	r2,-4(fp)
 8000464:	2084983a 	sll	r2,r4,r2
 8000468:	1884b03a 	or	r2,r3,r2
 800046c:	00805435 	stwio	r2,336(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 8000470:	0001883a 	nop
 8000474:	e037883a 	mov	sp,fp
 8000478:	df000017 	ldw	fp,0(sp)
 800047c:	dec00104 	addi	sp,sp,4
 8000480:	f800283a 	ret

08000484 <clearLED>:

void clearLED(int LED) {
 8000484:	defffe04 	addi	sp,sp,-8
 8000488:	df000115 	stw	fp,4(sp)
 800048c:	df000104 	addi	fp,sp,4
 8000490:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8000494:	00c05437 	ldwio	r3,336(zero)
 8000498:	01000044 	movi	r4,1
 800049c:	e0bfff17 	ldw	r2,-4(fp)
 80004a0:	2084983a 	sll	r2,r4,r2
 80004a4:	0084303a 	nor	r2,zero,r2
 80004a8:	1884703a 	and	r2,r3,r2
 80004ac:	00805435 	stwio	r2,336(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 80004b0:	0001883a 	nop
 80004b4:	e037883a 	mov	sp,fp
 80004b8:	df000017 	ldw	fp,0(sp)
 80004bc:	dec00104 	addi	sp,sp,4
 80004c0:	f800283a 	ret

080004c4 <printSignedHex0>:

void printSignedHex0(signed char value) {
 80004c4:	defffc04 	addi	sp,sp,-16
 80004c8:	dfc00315 	stw	ra,12(sp)
 80004cc:	df000215 	stw	fp,8(sp)
 80004d0:	df000204 	addi	fp,sp,8
 80004d4:	2005883a 	mov	r2,r4
 80004d8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tens = 0;
 80004dc:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 80004e0:	e03fff85 	stb	zero,-2(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80004e4:	00805837 	ldwio	r2,352(zero)
 80004e8:	e0bfff0d 	sth	r2,-4(fp)
	if (value < 0) {
 80004ec:	e0bffe07 	ldb	r2,-8(fp)
 80004f0:	1000060e 	bge	r2,zero,800050c <printSignedHex0+0x48>
		setLED(11);
 80004f4:	010002c4 	movi	r4,11
 80004f8:	80004480 	call	8000448 <setLED>
		value = -value;
 80004fc:	e0bffe03 	ldbu	r2,-8(fp)
 8000500:	0085c83a 	sub	r2,zero,r2
 8000504:	e0bffe05 	stb	r2,-8(fp)
 8000508:	00000206 	br	8000514 <printSignedHex0+0x50>
	} else {
		clearLED(11);
 800050c:	010002c4 	movi	r4,11
 8000510:	80004840 	call	8000484 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000514:	e0bffe03 	ldbu	r2,-8(fp)
 8000518:	108018c4 	addi	r2,r2,99
 800051c:	10803fcc 	andi	r2,r2,255
 8000520:	108031f0 	cmpltui	r2,r2,199
 8000524:	1000031e 	bne	r2,zero,8000534 <printSignedHex0+0x70>
		setLED(13);
 8000528:	01000344 	movi	r4,13
 800052c:	80004480 	call	8000448 <setLED>
 8000530:	00000206 	br	800053c <printSignedHex0+0x78>
	else
		clearLED(13);
 8000534:	01000344 	movi	r4,13
 8000538:	80004840 	call	8000484 <clearLED>

	value = value % 100;
 800053c:	e0bffe07 	ldb	r2,-8(fp)
 8000540:	01401904 	movi	r5,100
 8000544:	1009883a 	mov	r4,r2
 8000548:	8002b040 	call	8002b04 <__modsi3>
 800054c:	e0bffe05 	stb	r2,-8(fp)
	tens = value / 10;
 8000550:	e0bffe07 	ldb	r2,-8(fp)
 8000554:	01400284 	movi	r5,10
 8000558:	1009883a 	mov	r4,r2
 800055c:	8002a840 	call	8002a84 <__divsi3>
 8000560:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8000564:	e0bffe07 	ldb	r2,-8(fp)
 8000568:	01400284 	movi	r5,10
 800056c:	1009883a 	mov	r4,r2
 8000570:	8002b040 	call	8002b04 <__modsi3>
 8000574:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0x00FF;
 8000578:	e0bfff0b 	ldhu	r2,-4(fp)
 800057c:	10803fcc 	andi	r2,r2,255
 8000580:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (tens << 12);
 8000584:	e0bfffc3 	ldbu	r2,-1(fp)
 8000588:	1004933a 	slli	r2,r2,12
 800058c:	1007883a 	mov	r3,r2
 8000590:	e0bfff0b 	ldhu	r2,-4(fp)
 8000594:	1884b03a 	or	r2,r3,r2
 8000598:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (ones << 8);
 800059c:	e0bfff83 	ldbu	r2,-2(fp)
 80005a0:	1004923a 	slli	r2,r2,8
 80005a4:	1007883a 	mov	r3,r2
 80005a8:	e0bfff0b 	ldhu	r2,-4(fp)
 80005ac:	1884b03a 	or	r2,r3,r2
 80005b0:	e0bfff0d 	sth	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80005b4:	e0bfff0b 	ldhu	r2,-4(fp)
 80005b8:	00805835 	stwio	r2,352(zero)
}
 80005bc:	0001883a 	nop
 80005c0:	e037883a 	mov	sp,fp
 80005c4:	dfc00117 	ldw	ra,4(sp)
 80005c8:	df000017 	ldw	fp,0(sp)
 80005cc:	dec00204 	addi	sp,sp,8
 80005d0:	f800283a 	ret

080005d4 <printSignedHex1>:

void printSignedHex1(signed char value) {
 80005d4:	defffb04 	addi	sp,sp,-20
 80005d8:	dfc00415 	stw	ra,16(sp)
 80005dc:	df000315 	stw	fp,12(sp)
 80005e0:	df000304 	addi	fp,sp,12
 80005e4:	2005883a 	mov	r2,r4
 80005e8:	e0bffd05 	stb	r2,-12(fp)
	BYTE tens = 0;
 80005ec:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 80005f0:	e03fff85 	stb	zero,-2(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80005f4:	00805837 	ldwio	r2,352(zero)
 80005f8:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 80005fc:	e0bffd07 	ldb	r2,-12(fp)
 8000600:	1000060e 	bge	r2,zero,800061c <printSignedHex1+0x48>
		setLED(10);
 8000604:	01000284 	movi	r4,10
 8000608:	80004480 	call	8000448 <setLED>
		value = -value;
 800060c:	e0bffd03 	ldbu	r2,-12(fp)
 8000610:	0085c83a 	sub	r2,zero,r2
 8000614:	e0bffd05 	stb	r2,-12(fp)
 8000618:	00000206 	br	8000624 <printSignedHex1+0x50>
	} else {
		clearLED(10);
 800061c:	01000284 	movi	r4,10
 8000620:	80004840 	call	8000484 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000624:	e0bffd03 	ldbu	r2,-12(fp)
 8000628:	108018c4 	addi	r2,r2,99
 800062c:	10803fcc 	andi	r2,r2,255
 8000630:	108031f0 	cmpltui	r2,r2,199
 8000634:	1000031e 	bne	r2,zero,8000644 <printSignedHex1+0x70>
		setLED(12);
 8000638:	01000304 	movi	r4,12
 800063c:	80004480 	call	8000448 <setLED>
 8000640:	00000206 	br	800064c <printSignedHex1+0x78>
	else
		clearLED(12);
 8000644:	01000304 	movi	r4,12
 8000648:	80004840 	call	8000484 <clearLED>

	value = value % 100;
 800064c:	e0bffd07 	ldb	r2,-12(fp)
 8000650:	01401904 	movi	r5,100
 8000654:	1009883a 	mov	r4,r2
 8000658:	8002b040 	call	8002b04 <__modsi3>
 800065c:	e0bffd05 	stb	r2,-12(fp)
	tens = value / 10;
 8000660:	e0bffd07 	ldb	r2,-12(fp)
 8000664:	01400284 	movi	r5,10
 8000668:	1009883a 	mov	r4,r2
 800066c:	8002a840 	call	8002a84 <__divsi3>
 8000670:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8000674:	e0bffd07 	ldb	r2,-12(fp)
 8000678:	01400284 	movi	r5,10
 800067c:	1009883a 	mov	r4,r2
 8000680:	8002b040 	call	8002b04 <__modsi3>
 8000684:	e0bfff85 	stb	r2,-2(fp)
	tens = value / 10;
 8000688:	e0bffd07 	ldb	r2,-12(fp)
 800068c:	01400284 	movi	r5,10
 8000690:	1009883a 	mov	r4,r2
 8000694:	8002a840 	call	8002a84 <__divsi3>
 8000698:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 800069c:	e0bffd07 	ldb	r2,-12(fp)
 80006a0:	01400284 	movi	r5,10
 80006a4:	1009883a 	mov	r4,r2
 80006a8:	8002b040 	call	8002b04 <__modsi3>
 80006ac:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0xFF00;
 80006b0:	e0bffe17 	ldw	r2,-8(fp)
 80006b4:	10bfc00c 	andi	r2,r2,65280
 80006b8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 80006bc:	e0bfffc3 	ldbu	r2,-1(fp)
 80006c0:	1004913a 	slli	r2,r2,4
 80006c4:	1007883a 	mov	r3,r2
 80006c8:	e0bffe17 	ldw	r2,-8(fp)
 80006cc:	10c4b03a 	or	r2,r2,r3
 80006d0:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 80006d4:	e0bfff83 	ldbu	r2,-2(fp)
 80006d8:	e0fffe17 	ldw	r3,-8(fp)
 80006dc:	1884b03a 	or	r2,r3,r2
 80006e0:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80006e4:	e0bffe17 	ldw	r2,-8(fp)
 80006e8:	00805835 	stwio	r2,352(zero)
}
 80006ec:	0001883a 	nop
 80006f0:	e037883a 	mov	sp,fp
 80006f4:	dfc00117 	ldw	ra,4(sp)
 80006f8:	df000017 	ldw	fp,0(sp)
 80006fc:	dec00204 	addi	sp,sp,8
 8000700:	f800283a 	ret

08000704 <setKeycode>:

void setKeycode(WORD keycode)
{
 8000704:	defffe04 	addi	sp,sp,-8
 8000708:	df000115 	stw	fp,4(sp)
 800070c:	df000104 	addi	fp,sp,4
 8000710:	2005883a 	mov	r2,r4
 8000714:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(KEYCODE_BASE, keycode);
 8000718:	e0bfff0b 	ldhu	r2,-4(fp)
 800071c:	00806835 	stwio	r2,416(zero)
}
 8000720:	0001883a 	nop
 8000724:	e037883a 	mov	sp,fp
 8000728:	df000017 	ldw	fp,0(sp)
 800072c:	dec00104 	addi	sp,sp,4
 8000730:	f800283a 	ret

08000734 <main>:
int main() {
 8000734:	defff704 	addi	sp,sp,-36
 8000738:	dfc00815 	stw	ra,32(sp)
 800073c:	df000715 	stw	fp,28(sp)
 8000740:	df000704 	addi	fp,sp,28
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 8000744:	e03fffc5 	stb	zero,-1(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 8000748:	e03fff85 	stb	zero,-2(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 800074c:	01020074 	movhi	r4,2049
 8000750:	21087a04 	addi	r4,r4,8680
 8000754:	8002db80 	call	8002db8 <puts>
	MAX3421E_init();
 8000758:	8001a000 	call	8001a00 <MAX3421E_init>
	printf("initializing USB...\n");
 800075c:	01020074 	movhi	r4,2049
 8000760:	21088104 	addi	r4,r4,8708
 8000764:	8002db80 	call	8002db8 <puts>
	USB_init();
 8000768:	80021b80 	call	80021b8 <USB_init>
	while (1) {
		printf(".");
 800076c:	01000b84 	movi	r4,46
 8000770:	8002cd40 	call	8002cd4 <putchar>
		MAX3421E_Task();
 8000774:	8001a940 	call	8001a94 <MAX3421E_Task>
		USB_Task();
 8000778:	80022400 	call	8002240 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 800077c:	80029a80 	call	80029a8 <GetUsbTaskState>
 8000780:	10803fcc 	andi	r2,r2,255
 8000784:	10801018 	cmpnei	r2,r2,64
 8000788:	1000a01e 	bne	r2,zero,8000a0c <main+0x2d8>
			if (!runningdebugflag) {
 800078c:	e0bfffc3 	ldbu	r2,-1(fp)
 8000790:	1000071e 	bne	r2,zero,80007b0 <main+0x7c>
				runningdebugflag = 1;
 8000794:	00800044 	movi	r2,1
 8000798:	e0bfffc5 	stb	r2,-1(fp)
				setLED(9);
 800079c:	01000244 	movi	r4,9
 80007a0:	80004480 	call	8000448 <setLED>
				device = GetDriverandReport();
 80007a4:	80002600 	call	8000260 <GetDriverandReport>
 80007a8:	e0bfff45 	stb	r2,-3(fp)
 80007ac:	003fef06 	br	800076c <main+0x38>
			} else if (device == 1) {
 80007b0:	e0bfff43 	ldbu	r2,-3(fp)
 80007b4:	10800058 	cmpnei	r2,r2,1
 80007b8:	1000381e 	bne	r2,zero,800089c <main+0x168>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 80007bc:	e0bff9c4 	addi	r2,fp,-25
 80007c0:	1009883a 	mov	r4,r2
 80007c4:	80013200 	call	8001320 <kbdPoll>
 80007c8:	e0bffdc5 	stb	r2,-9(fp)
				if (rcode == hrNAK) {
 80007cc:	e0bffdc3 	ldbu	r2,-9(fp)
 80007d0:	10800118 	cmpnei	r2,r2,4
 80007d4:	1000ad26 	beq	r2,zero,8000a8c <main+0x358>
					continue; //NAK means no new data
				} else if (rcode) {
 80007d8:	e0bffdc3 	ldbu	r2,-9(fp)
 80007dc:	10000926 	beq	r2,zero,8000804 <main+0xd0>
					printf("Rcode: ");
 80007e0:	01020074 	movhi	r4,2049
 80007e4:	21088604 	addi	r4,r4,8728
 80007e8:	8002c940 	call	8002c94 <printf>
					printf("%x \n", rcode);
 80007ec:	e0bffdc3 	ldbu	r2,-9(fp)
 80007f0:	100b883a 	mov	r5,r2
 80007f4:	01020074 	movhi	r4,2049
 80007f8:	21086804 	addi	r4,r4,8608
 80007fc:	8002c940 	call	8002c94 <printf>
					continue;
 8000800:	0000a506 	br	8000a98 <main+0x364>
				}
				printf("keycodes: ");
 8000804:	01020074 	movhi	r4,2049
 8000808:	21088804 	addi	r4,r4,8736
 800080c:	8002c940 	call	8002c94 <printf>
				for (int i = 0; i < 6; i++) {
 8000810:	e03ffe15 	stw	zero,-8(fp)
 8000814:	00000b06 	br	8000844 <main+0x110>
					printf("%x ", kbdbuf.keycode[i]);
 8000818:	e0bffe17 	ldw	r2,-8(fp)
 800081c:	e085883a 	add	r2,fp,r2
 8000820:	10bffa43 	ldbu	r2,-23(r2)
 8000824:	10803fcc 	andi	r2,r2,255
 8000828:	100b883a 	mov	r5,r2
 800082c:	01020074 	movhi	r4,2049
 8000830:	21088b04 	addi	r4,r4,8748
 8000834:	8002c940 	call	8002c94 <printf>
				for (int i = 0; i < 6; i++) {
 8000838:	e0bffe17 	ldw	r2,-8(fp)
 800083c:	10800044 	addi	r2,r2,1
 8000840:	e0bffe15 	stw	r2,-8(fp)
 8000844:	e0bffe17 	ldw	r2,-8(fp)
 8000848:	10800190 	cmplti	r2,r2,6
 800084c:	103ff21e 	bne	r2,zero,8000818 <main+0xe4>
				}
				setKeycode(kbdbuf.keycode[0]);
 8000850:	e0bffa43 	ldbu	r2,-23(fp)
 8000854:	10803fcc 	andi	r2,r2,255
 8000858:	1009883a 	mov	r4,r2
 800085c:	80007040 	call	8000704 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
 8000860:	e0bffa43 	ldbu	r2,-23(fp)
 8000864:	10803fcc 	andi	r2,r2,255
 8000868:	1080201c 	xori	r2,r2,128
 800086c:	10bfe004 	addi	r2,r2,-128
 8000870:	1009883a 	mov	r4,r2
 8000874:	80004c40 	call	80004c4 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 8000878:	e0bffa83 	ldbu	r2,-22(fp)
 800087c:	10803fcc 	andi	r2,r2,255
 8000880:	1080201c 	xori	r2,r2,128
 8000884:	10bfe004 	addi	r2,r2,-128
 8000888:	1009883a 	mov	r4,r2
 800088c:	80005d40 	call	80005d4 <printSignedHex1>
				printf("\n");
 8000890:	01000284 	movi	r4,10
 8000894:	8002cd40 	call	8002cd4 <putchar>
 8000898:	003fb406 	br	800076c <main+0x38>
			}

			else if (device == 2) {
 800089c:	e0bfff43 	ldbu	r2,-3(fp)
 80008a0:	10800098 	cmpnei	r2,r2,2
 80008a4:	103fb11e 	bne	r2,zero,800076c <main+0x38>
				rcode = mousePoll(&buf);
 80008a8:	e0bffbc4 	addi	r2,fp,-17
 80008ac:	1009883a 	mov	r4,r2
 80008b0:	800129c0 	call	800129c <mousePoll>
 80008b4:	e0bffdc5 	stb	r2,-9(fp)
				if (rcode == hrNAK) {
 80008b8:	e0bffdc3 	ldbu	r2,-9(fp)
 80008bc:	10800118 	cmpnei	r2,r2,4
 80008c0:	10007426 	beq	r2,zero,8000a94 <main+0x360>
					//NAK means no new data
					continue;
				} else if (rcode) {
 80008c4:	e0bffdc3 	ldbu	r2,-9(fp)
 80008c8:	10000926 	beq	r2,zero,80008f0 <main+0x1bc>
					printf("Rcode: ");
 80008cc:	01020074 	movhi	r4,2049
 80008d0:	21088604 	addi	r4,r4,8728
 80008d4:	8002c940 	call	8002c94 <printf>
					printf("%x \n", rcode);
 80008d8:	e0bffdc3 	ldbu	r2,-9(fp)
 80008dc:	100b883a 	mov	r5,r2
 80008e0:	01020074 	movhi	r4,2049
 80008e4:	21086804 	addi	r4,r4,8608
 80008e8:	8002c940 	call	8002c94 <printf>
					continue;
 80008ec:	00006a06 	br	8000a98 <main+0x364>
				}
				printf("X displacement: ");
 80008f0:	01020074 	movhi	r4,2049
 80008f4:	21088c04 	addi	r4,r4,8752
 80008f8:	8002c940 	call	8002c94 <printf>
				printf("%d ", (signed char) buf.Xdispl);
 80008fc:	e0bffc03 	ldbu	r2,-16(fp)
 8000900:	10803fcc 	andi	r2,r2,255
 8000904:	1080201c 	xori	r2,r2,128
 8000908:	10bfe004 	addi	r2,r2,-128
 800090c:	100b883a 	mov	r5,r2
 8000910:	01020074 	movhi	r4,2049
 8000914:	21089104 	addi	r4,r4,8772
 8000918:	8002c940 	call	8002c94 <printf>
				printSignedHex0((signed char) buf.Xdispl);
 800091c:	e0bffc03 	ldbu	r2,-16(fp)
 8000920:	10803fcc 	andi	r2,r2,255
 8000924:	1080201c 	xori	r2,r2,128
 8000928:	10bfe004 	addi	r2,r2,-128
 800092c:	1009883a 	mov	r4,r2
 8000930:	80004c40 	call	80004c4 <printSignedHex0>
				printf("Y displacement: ");
 8000934:	01020074 	movhi	r4,2049
 8000938:	21089204 	addi	r4,r4,8776
 800093c:	8002c940 	call	8002c94 <printf>
				printf("%d ", (signed char) buf.Ydispl);
 8000940:	e0bffc43 	ldbu	r2,-15(fp)
 8000944:	10803fcc 	andi	r2,r2,255
 8000948:	1080201c 	xori	r2,r2,128
 800094c:	10bfe004 	addi	r2,r2,-128
 8000950:	100b883a 	mov	r5,r2
 8000954:	01020074 	movhi	r4,2049
 8000958:	21089104 	addi	r4,r4,8772
 800095c:	8002c940 	call	8002c94 <printf>
				printSignedHex1((signed char) buf.Ydispl);
 8000960:	e0bffc43 	ldbu	r2,-15(fp)
 8000964:	10803fcc 	andi	r2,r2,255
 8000968:	1080201c 	xori	r2,r2,128
 800096c:	10bfe004 	addi	r2,r2,-128
 8000970:	1009883a 	mov	r4,r2
 8000974:	80005d40 	call	80005d4 <printSignedHex1>
				printf("Buttons: ");
 8000978:	01020074 	movhi	r4,2049
 800097c:	21089704 	addi	r4,r4,8796
 8000980:	8002c940 	call	8002c94 <printf>
				printf("%x\n", buf.button);
 8000984:	e0bffbc3 	ldbu	r2,-17(fp)
 8000988:	10803fcc 	andi	r2,r2,255
 800098c:	100b883a 	mov	r5,r2
 8000990:	01020074 	movhi	r4,2049
 8000994:	21089a04 	addi	r4,r4,8808
 8000998:	8002c940 	call	8002c94 <printf>
				if (buf.button & 0x04)
 800099c:	e0bffbc3 	ldbu	r2,-17(fp)
 80009a0:	10803fcc 	andi	r2,r2,255
 80009a4:	1080010c 	andi	r2,r2,4
 80009a8:	10000326 	beq	r2,zero,80009b8 <main+0x284>
					setLED(2);
 80009ac:	01000084 	movi	r4,2
 80009b0:	80004480 	call	8000448 <setLED>
 80009b4:	00000206 	br	80009c0 <main+0x28c>
				else
					clearLED(2);
 80009b8:	01000084 	movi	r4,2
 80009bc:	80004840 	call	8000484 <clearLED>
				if (buf.button & 0x02)
 80009c0:	e0bffbc3 	ldbu	r2,-17(fp)
 80009c4:	10803fcc 	andi	r2,r2,255
 80009c8:	1080008c 	andi	r2,r2,2
 80009cc:	10000326 	beq	r2,zero,80009dc <main+0x2a8>
					setLED(1);
 80009d0:	01000044 	movi	r4,1
 80009d4:	80004480 	call	8000448 <setLED>
 80009d8:	00000206 	br	80009e4 <main+0x2b0>
				else
					clearLED(1);
 80009dc:	01000044 	movi	r4,1
 80009e0:	80004840 	call	8000484 <clearLED>
				if (buf.button & 0x01)
 80009e4:	e0bffbc3 	ldbu	r2,-17(fp)
 80009e8:	10803fcc 	andi	r2,r2,255
 80009ec:	1080004c 	andi	r2,r2,1
 80009f0:	10000326 	beq	r2,zero,8000a00 <main+0x2cc>
					setLED(0);
 80009f4:	0009883a 	mov	r4,zero
 80009f8:	80004480 	call	8000448 <setLED>
 80009fc:	003f5b06 	br	800076c <main+0x38>
				else
					clearLED(0);
 8000a00:	0009883a 	mov	r4,zero
 8000a04:	80004840 	call	8000484 <clearLED>
 8000a08:	003f5806 	br	800076c <main+0x38>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8000a0c:	80029a80 	call	80029a8 <GetUsbTaskState>
 8000a10:	10803fcc 	andi	r2,r2,255
 8000a14:	10803fd8 	cmpnei	r2,r2,255
 8000a18:	10000a1e 	bne	r2,zero,8000a44 <main+0x310>
			if (!errorflag) {
 8000a1c:	e0bfff83 	ldbu	r2,-2(fp)
 8000a20:	103f521e 	bne	r2,zero,800076c <main+0x38>
				errorflag = 1;
 8000a24:	00800044 	movi	r2,1
 8000a28:	e0bfff85 	stb	r2,-2(fp)
				clearLED(9);
 8000a2c:	01000244 	movi	r4,9
 8000a30:	80004840 	call	8000484 <clearLED>
				printf("USB Error State\n");
 8000a34:	01020074 	movhi	r4,2049
 8000a38:	21089b04 	addi	r4,r4,8812
 8000a3c:	8002db80 	call	8002db8 <puts>
 8000a40:	003f4a06 	br	800076c <main+0x38>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 8000a44:	01020074 	movhi	r4,2049
 8000a48:	21089f04 	addi	r4,r4,8828
 8000a4c:	8002c940 	call	8002c94 <printf>
			printf("%x\n", GetUsbTaskState());
 8000a50:	80029a80 	call	80029a8 <GetUsbTaskState>
 8000a54:	10803fcc 	andi	r2,r2,255
 8000a58:	100b883a 	mov	r5,r2
 8000a5c:	01020074 	movhi	r4,2049
 8000a60:	21089a04 	addi	r4,r4,8808
 8000a64:	8002c940 	call	8002c94 <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 8000a68:	e0bfffc3 	ldbu	r2,-1(fp)
 8000a6c:	10000326 	beq	r2,zero,8000a7c <main+0x348>
				runningdebugflag = 0;
 8000a70:	e03fffc5 	stb	zero,-1(fp)
				MAX3421E_init();
 8000a74:	8001a000 	call	8001a00 <MAX3421E_init>
				USB_init();
 8000a78:	80021b80 	call	80021b8 <USB_init>
			}
			errorflag = 0;
 8000a7c:	e03fff85 	stb	zero,-2(fp)
			clearLED(9);
 8000a80:	01000244 	movi	r4,9
 8000a84:	80004840 	call	8000484 <clearLED>
 8000a88:	003f3806 	br	800076c <main+0x38>
					continue; //NAK means no new data
 8000a8c:	0001883a 	nop
 8000a90:	003f3606 	br	800076c <main+0x38>
					continue;
 8000a94:	0001883a 	nop
		printf(".");
 8000a98:	003f3406 	br	800076c <main+0x38>

08000a9c <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 8000a9c:	defff204 	addi	sp,sp,-56
 8000aa0:	dfc00d15 	stw	ra,52(sp)
 8000aa4:	df000c15 	stw	fp,48(sp)
 8000aa8:	df000c04 	addi	fp,sp,48
 8000aac:	2005883a 	mov	r2,r4
 8000ab0:	e17ff915 	stw	r5,-28(fp)
 8000ab4:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000ab8:	00820074 	movhi	r2,2049
 8000abc:	10987b04 	addi	r2,r2,25068
 8000ac0:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 8000ac4:	00820074 	movhi	r2,2049
 8000ac8:	10987b04 	addi	r2,r2,25068
 8000acc:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000ad0:	e0fffa03 	ldbu	r3,-24(fp)
 8000ad4:	00820074 	movhi	r2,2049
 8000ad8:	10987b04 	addi	r2,r2,25068
 8000adc:	d8800415 	stw	r2,16(sp)
 8000ae0:	00800244 	movi	r2,9
 8000ae4:	d8800315 	stw	r2,12(sp)
 8000ae8:	d8000215 	stw	zero,8(sp)
 8000aec:	00800084 	movi	r2,2
 8000af0:	d8800115 	stw	r2,4(sp)
 8000af4:	d8000015 	stw	zero,0(sp)
 8000af8:	01c00184 	movi	r7,6
 8000afc:	01802004 	movi	r6,128
 8000b00:	000b883a 	mov	r5,zero
 8000b04:	1809883a 	mov	r4,r3
 8000b08:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8000b0c:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8000b10:	e0bffcc3 	ldbu	r2,-13(fp)
 8000b14:	10000226 	beq	r2,zero,8000b20 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 8000b18:	0005883a 	mov	r2,zero
 8000b1c:	0000d306 	br	8000e6c <HIDMProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000b20:	e0bffe17 	ldw	r2,-8(fp)
 8000b24:	1080008b 	ldhu	r2,2(r2)
 8000b28:	10bfffcc 	andi	r2,r2,65535
 8000b2c:	10804070 	cmpltui	r2,r2,257
 8000b30:	1000031e 	bne	r2,zero,8000b40 <HIDMProbe+0xa4>
		total_length = 256;
 8000b34:	00804004 	movi	r2,256
 8000b38:	e0bfff8d 	sth	r2,-2(fp)
 8000b3c:	00000306 	br	8000b4c <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000b40:	e0bffe17 	ldw	r2,-8(fp)
 8000b44:	1080008b 	ldhu	r2,2(r2)
 8000b48:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000b4c:	e13ffa03 	ldbu	r4,-24(fp)
 8000b50:	e0ffff8b 	ldhu	r3,-2(fp)
 8000b54:	00820074 	movhi	r2,2049
 8000b58:	10987b04 	addi	r2,r2,25068
 8000b5c:	d8800415 	stw	r2,16(sp)
 8000b60:	d8c00315 	stw	r3,12(sp)
 8000b64:	d8000215 	stw	zero,8(sp)
 8000b68:	00800084 	movi	r2,2
 8000b6c:	d8800115 	stw	r2,4(sp)
 8000b70:	d8000015 	stw	zero,0(sp)
 8000b74:	01c00184 	movi	r7,6
 8000b78:	01802004 	movi	r6,128
 8000b7c:	000b883a 	mov	r5,zero
 8000b80:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8000b84:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8000b88:	e0bffcc3 	ldbu	r2,-13(fp)
 8000b8c:	10000226 	beq	r2,zero,8000b98 <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8000b90:	0005883a 	mov	r2,zero
 8000b94:	0000b506 	br	8000e6c <HIDMProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 8000b98:	e0bffe17 	ldw	r2,-8(fp)
 8000b9c:	10800143 	ldbu	r2,5(r2)
 8000ba0:	e0bffc85 	stb	r2,-14(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000ba4:	0000aa06 	br	8000e50 <HIDMProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 8000ba8:	e0bffe17 	ldw	r2,-8(fp)
 8000bac:	10800043 	ldbu	r2,1(r2)
 8000bb0:	10803fcc 	andi	r2,r2,255
 8000bb4:	10800120 	cmpeqi	r2,r2,4
 8000bb8:	1000091e 	bne	r2,zero,8000be0 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000bbc:	e0bffe17 	ldw	r2,-8(fp)
 8000bc0:	10800003 	ldbu	r2,0(r2)
 8000bc4:	10803fcc 	andi	r2,r2,255
 8000bc8:	e0fffd17 	ldw	r3,-12(fp)
 8000bcc:	1885883a 	add	r2,r3,r2
 8000bd0:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000bd4:	e0bffd17 	ldw	r2,-12(fp)
 8000bd8:	e0bffe15 	stw	r2,-8(fp)
 8000bdc:	00009c06 	br	8000e50 <HIDMProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000be0:	e0bffe17 	ldw	r2,-8(fp)
 8000be4:	10800143 	ldbu	r2,5(r2)
 8000be8:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000bec:	e0bffe17 	ldw	r2,-8(fp)
 8000bf0:	10800183 	ldbu	r2,6(r2)
 8000bf4:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8000bf8:	e0bffe17 	ldw	r2,-8(fp)
 8000bfc:	108001c3 	ldbu	r2,7(r2)
 8000c00:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000c04:	e0bffc43 	ldbu	r2,-15(fp)
 8000c08:	108000d8 	cmpnei	r2,r2,3
 8000c0c:	10008e1e 	bne	r2,zero,8000e48 <HIDMProbe+0x3ac>
 8000c10:	e0bffc03 	ldbu	r2,-16(fp)
 8000c14:	10800058 	cmpnei	r2,r2,1
 8000c18:	10008b1e 	bne	r2,zero,8000e48 <HIDMProbe+0x3ac>
					&& protocol == HID_PROTOCOL_MOUSE) {
 8000c1c:	e0bffbc3 	ldbu	r2,-17(fp)
 8000c20:	10800098 	cmpnei	r2,r2,2
 8000c24:	1000881e 	bne	r2,zero,8000e48 <HIDMProbe+0x3ac>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 8000c28:	e0bffa03 	ldbu	r2,-24(fp)
 8000c2c:	100890fa 	slli	r4,r2,3
 8000c30:	00c00084 	movi	r3,2
 8000c34:	00820074 	movhi	r2,2049
 8000c38:	2085883a 	add	r2,r4,r2
 8000c3c:	10d8bc05 	stb	r3,25328(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8000c40:	e0bffa03 	ldbu	r2,-24(fp)
 8000c44:	100690fa 	slli	r3,r2,3
 8000c48:	00820074 	movhi	r2,2049
 8000c4c:	1885883a 	add	r2,r3,r2
 8000c50:	1098bb17 	ldw	r2,25324(r2)
 8000c54:	1080008b 	ldhu	r2,2(r2)
 8000c58:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8000c5c:	80012640 	call	8001264 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000c60:	e0bffa03 	ldbu	r2,-24(fp)
 8000c64:	100890fa 	slli	r4,r2,3
 8000c68:	00c20074 	movhi	r3,2049
 8000c6c:	18d86704 	addi	r3,r3,24988
 8000c70:	00820074 	movhi	r2,2049
 8000c74:	2085883a 	add	r2,r4,r2
 8000c78:	10d8bb15 	stw	r3,25324(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 8000c7c:	e0bffa03 	ldbu	r2,-24(fp)
 8000c80:	100690fa 	slli	r3,r2,3
 8000c84:	00820074 	movhi	r2,2049
 8000c88:	1885883a 	add	r2,r3,r2
 8000c8c:	1098bb17 	ldw	r2,25324(r2)
 8000c90:	e0fffb83 	ldbu	r3,-18(fp)
 8000c94:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 8000c98:	e0bffe17 	ldw	r2,-8(fp)
 8000c9c:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8000ca0:	d0a71a45 	stb	r2,-25495(gp)
				hid_device.addr = addr;
 8000ca4:	e0bffa03 	ldbu	r2,-24(fp)
 8000ca8:	d0a71a05 	stb	r2,-25496(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000cac:	e0bffe17 	ldw	r2,-8(fp)
 8000cb0:	10800003 	ldbu	r2,0(r2)
 8000cb4:	10803fcc 	andi	r2,r2,255
 8000cb8:	e0fffd17 	ldw	r3,-12(fp)
 8000cbc:	1885883a 	add	r2,r3,r2
 8000cc0:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8000cc4:	e0bffd17 	ldw	r2,-12(fp)
 8000cc8:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000ccc:	00005706 	br	8000e2c <HIDMProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 8000cd0:	e0bffe17 	ldw	r2,-8(fp)
 8000cd4:	10800043 	ldbu	r2,1(r2)
 8000cd8:	10803fcc 	andi	r2,r2,255
 8000cdc:	10800160 	cmpeqi	r2,r2,5
 8000ce0:	1000091e 	bne	r2,zero,8000d08 <HIDMProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000ce4:	e0bffe17 	ldw	r2,-8(fp)
 8000ce8:	10800003 	ldbu	r2,0(r2)
 8000cec:	10803fcc 	andi	r2,r2,255
 8000cf0:	e0fffd17 	ldw	r3,-12(fp)
 8000cf4:	1885883a 	add	r2,r3,r2
 8000cf8:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8000cfc:	e0bffd17 	ldw	r2,-12(fp)
 8000d00:	e0bffe15 	stw	r2,-8(fp)
 8000d04:	00004906 	br	8000e2c <HIDMProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000d08:	e0bffa03 	ldbu	r2,-24(fp)
 8000d0c:	100690fa 	slli	r3,r2,3
 8000d10:	00820074 	movhi	r2,2049
 8000d14:	1885883a 	add	r2,r3,r2
 8000d18:	1098bb17 	ldw	r2,25324(r2)
 8000d1c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000d20:	e0fffe17 	ldw	r3,-8(fp)
 8000d24:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 8000d28:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 8000d2c:	e0bffa03 	ldbu	r2,-24(fp)
 8000d30:	100690fa 	slli	r3,r2,3
 8000d34:	00820074 	movhi	r2,2049
 8000d38:	1885883a 	add	r2,r3,r2
 8000d3c:	1098bb17 	ldw	r2,25324(r2)
 8000d40:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000d44:	e0fffe17 	ldw	r3,-8(fp)
 8000d48:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 8000d4c:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 8000d50:	e0bffa03 	ldbu	r2,-24(fp)
 8000d54:	100690fa 	slli	r3,r2,3
 8000d58:	00820074 	movhi	r2,2049
 8000d5c:	1885883a 	add	r2,r3,r2
 8000d60:	1098bb17 	ldw	r2,25324(r2)
 8000d64:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000d68:	e0fffe17 	ldw	r3,-8(fp)
 8000d6c:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8000d70:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 8000d74:	e0bffa03 	ldbu	r2,-24(fp)
 8000d78:	100690fa 	slli	r3,r2,3
 8000d7c:	00820074 	movhi	r2,2049
 8000d80:	1885883a 	add	r2,r3,r2
 8000d84:	1098bb17 	ldw	r2,25324(r2)
 8000d88:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000d8c:	e0fffe17 	ldw	r3,-8(fp)
 8000d90:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 8000d94:	10c00105 	stb	r3,4(r2)
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000d98:	e0fffa03 	ldbu	r3,-24(fp)
 8000d9c:	e0bffc83 	ldbu	r2,-14(fp)
 8000da0:	d8000415 	stw	zero,16(sp)
 8000da4:	d8000315 	stw	zero,12(sp)
 8000da8:	d8000215 	stw	zero,8(sp)
 8000dac:	d8000115 	stw	zero,4(sp)
 8000db0:	d8800015 	stw	r2,0(sp)
 8000db4:	01c00244 	movi	r7,9
 8000db8:	000d883a 	mov	r6,zero
 8000dbc:	000b883a 	mov	r5,zero
 8000dc0:	1809883a 	mov	r4,r3
 8000dc4:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8000dc8:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 8000dcc:	e0bffcc3 	ldbu	r2,-13(fp)
 8000dd0:	10000226 	beq	r2,zero,8000ddc <HIDMProbe+0x340>
							return (FALSE);
 8000dd4:	0005883a 	mov	r2,zero
 8000dd8:	00002406 	br	8000e6c <HIDMProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8000ddc:	e0fffa03 	ldbu	r3,-24(fp)
 8000de0:	d0a71a43 	ldbu	r2,-25495(gp)
 8000de4:	10803fcc 	andi	r2,r2,255
 8000de8:	d8000415 	stw	zero,16(sp)
 8000dec:	d8000315 	stw	zero,12(sp)
 8000df0:	d8800215 	stw	r2,8(sp)
 8000df4:	d8000115 	stw	zero,4(sp)
 8000df8:	d8000015 	stw	zero,0(sp)
 8000dfc:	01c002c4 	movi	r7,11
 8000e00:	01800844 	movi	r6,33
 8000e04:	000b883a 	mov	r5,zero
 8000e08:	1809883a 	mov	r4,r3
 8000e0c:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8000e10:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000e14:	e0bffcc3 	ldbu	r2,-13(fp)
 8000e18:	10000226 	beq	r2,zero,8000e24 <HIDMProbe+0x388>
							return (FALSE);
 8000e1c:	0005883a 	mov	r2,zero
 8000e20:	00001206 	br	8000e6c <HIDMProbe+0x3d0>
						} else {
							return (TRUE);
 8000e24:	00800044 	movi	r2,1
 8000e28:	00001006 	br	8000e6c <HIDMProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 8000e2c:	e0ffff8b 	ldhu	r3,-2(fp)
 8000e30:	00820074 	movhi	r2,2049
 8000e34:	10987b04 	addi	r2,r2,25068
 8000e38:	1885883a 	add	r2,r3,r2
 8000e3c:	e0fffd17 	ldw	r3,-12(fp)
 8000e40:	18bfa336 	bltu	r3,r2,8000cd0 <HIDMProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000e44:	00000206 	br	8000e50 <HIDMProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 8000e48:	0005883a 	mov	r2,zero
 8000e4c:	00000706 	br	8000e6c <HIDMProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {
 8000e50:	e0ffff8b 	ldhu	r3,-2(fp)
 8000e54:	00820074 	movhi	r2,2049
 8000e58:	10987b04 	addi	r2,r2,25068
 8000e5c:	1885883a 	add	r2,r3,r2
 8000e60:	e0fffd17 	ldw	r3,-12(fp)
 8000e64:	18bf5036 	bltu	r3,r2,8000ba8 <HIDMProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000e68:	0005883a 	mov	r2,zero
}
 8000e6c:	e037883a 	mov	sp,fp
 8000e70:	dfc00117 	ldw	ra,4(sp)
 8000e74:	df000017 	ldw	fp,0(sp)
 8000e78:	dec00204 	addi	sp,sp,8
 8000e7c:	f800283a 	ret

08000e80 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8000e80:	defff204 	addi	sp,sp,-56
 8000e84:	dfc00d15 	stw	ra,52(sp)
 8000e88:	df000c15 	stw	fp,48(sp)
 8000e8c:	df000c04 	addi	fp,sp,48
 8000e90:	2005883a 	mov	r2,r4
 8000e94:	e17ff915 	stw	r5,-28(fp)
 8000e98:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000e9c:	00820074 	movhi	r2,2049
 8000ea0:	10987b04 	addi	r2,r2,25068
 8000ea4:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 8000ea8:	00820074 	movhi	r2,2049
 8000eac:	10987b04 	addi	r2,r2,25068
 8000eb0:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000eb4:	e0fffa03 	ldbu	r3,-24(fp)
 8000eb8:	00820074 	movhi	r2,2049
 8000ebc:	10987b04 	addi	r2,r2,25068
 8000ec0:	d8800415 	stw	r2,16(sp)
 8000ec4:	00800244 	movi	r2,9
 8000ec8:	d8800315 	stw	r2,12(sp)
 8000ecc:	d8000215 	stw	zero,8(sp)
 8000ed0:	00800084 	movi	r2,2
 8000ed4:	d8800115 	stw	r2,4(sp)
 8000ed8:	d8000015 	stw	zero,0(sp)
 8000edc:	01c00184 	movi	r7,6
 8000ee0:	01802004 	movi	r6,128
 8000ee4:	000b883a 	mov	r5,zero
 8000ee8:	1809883a 	mov	r4,r3
 8000eec:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8000ef0:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling           
 8000ef4:	e0bffcc3 	ldbu	r2,-13(fp)
 8000ef8:	10000226 	beq	r2,zero,8000f04 <HIDKProbe+0x84>
		return (FALSE);
 8000efc:	0005883a 	mov	r2,zero
 8000f00:	0000d306 	br	8001250 <HIDKProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000f04:	e0bffe17 	ldw	r2,-8(fp)
 8000f08:	1080008b 	ldhu	r2,2(r2)
 8000f0c:	10bfffcc 	andi	r2,r2,65535
 8000f10:	10804070 	cmpltui	r2,r2,257
 8000f14:	1000031e 	bne	r2,zero,8000f24 <HIDKProbe+0xa4>
		total_length = 256;
 8000f18:	00804004 	movi	r2,256
 8000f1c:	e0bfff8d 	sth	r2,-2(fp)
 8000f20:	00000306 	br	8000f30 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000f24:	e0bffe17 	ldw	r2,-8(fp)
 8000f28:	1080008b 	ldhu	r2,2(r2)
 8000f2c:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000f30:	e13ffa03 	ldbu	r4,-24(fp)
 8000f34:	e0ffff8b 	ldhu	r3,-2(fp)
 8000f38:	00820074 	movhi	r2,2049
 8000f3c:	10987b04 	addi	r2,r2,25068
 8000f40:	d8800415 	stw	r2,16(sp)
 8000f44:	d8c00315 	stw	r3,12(sp)
 8000f48:	d8000215 	stw	zero,8(sp)
 8000f4c:	00800084 	movi	r2,2
 8000f50:	d8800115 	stw	r2,4(sp)
 8000f54:	d8000015 	stw	zero,0(sp)
 8000f58:	01c00184 	movi	r7,6
 8000f5c:	01802004 	movi	r6,128
 8000f60:	000b883a 	mov	r5,zero
 8000f64:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8000f68:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8000f6c:	e0bffcc3 	ldbu	r2,-13(fp)
 8000f70:	10000226 	beq	r2,zero,8000f7c <HIDKProbe+0xfc>
		return (FALSE);
 8000f74:	0005883a 	mov	r2,zero
 8000f78:	0000b506 	br	8001250 <HIDKProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8000f7c:	e0bffe17 	ldw	r2,-8(fp)
 8000f80:	10800143 	ldbu	r2,5(r2)
 8000f84:	e0bffc85 	stb	r2,-14(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000f88:	0000aa06 	br	8001234 <HIDKProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8000f8c:	e0bffe17 	ldw	r2,-8(fp)
 8000f90:	10800043 	ldbu	r2,1(r2)
 8000f94:	10803fcc 	andi	r2,r2,255
 8000f98:	10800120 	cmpeqi	r2,r2,4
 8000f9c:	1000091e 	bne	r2,zero,8000fc4 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000fa0:	e0bffe17 	ldw	r2,-8(fp)
 8000fa4:	10800003 	ldbu	r2,0(r2)
 8000fa8:	10803fcc 	andi	r2,r2,255
 8000fac:	e0fffd17 	ldw	r3,-12(fp)
 8000fb0:	1885883a 	add	r2,r3,r2
 8000fb4:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000fb8:	e0bffd17 	ldw	r2,-12(fp)
 8000fbc:	e0bffe15 	stw	r2,-8(fp)
 8000fc0:	00009c06 	br	8001234 <HIDKProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000fc4:	e0bffe17 	ldw	r2,-8(fp)
 8000fc8:	10800143 	ldbu	r2,5(r2)
 8000fcc:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000fd0:	e0bffe17 	ldw	r2,-8(fp)
 8000fd4:	10800183 	ldbu	r2,6(r2)
 8000fd8:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8000fdc:	e0bffe17 	ldw	r2,-8(fp)
 8000fe0:	108001c3 	ldbu	r2,7(r2)
 8000fe4:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000fe8:	e0bffc43 	ldbu	r2,-15(fp)
 8000fec:	108000d8 	cmpnei	r2,r2,3
 8000ff0:	10008e1e 	bne	r2,zero,800122c <HIDKProbe+0x3ac>
 8000ff4:	e0bffc03 	ldbu	r2,-16(fp)
 8000ff8:	10800058 	cmpnei	r2,r2,1
 8000ffc:	10008b1e 	bne	r2,zero,800122c <HIDKProbe+0x3ac>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8001000:	e0bffbc3 	ldbu	r2,-17(fp)
 8001004:	10800058 	cmpnei	r2,r2,1
 8001008:	1000881e 	bne	r2,zero,800122c <HIDKProbe+0x3ac>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 800100c:	e0bffa03 	ldbu	r2,-24(fp)
 8001010:	100890fa 	slli	r4,r2,3
 8001014:	00c00044 	movi	r3,1
 8001018:	00820074 	movhi	r2,2049
 800101c:	2085883a 	add	r2,r4,r2
 8001020:	10d8bc05 	stb	r3,25328(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8001024:	e0bffa03 	ldbu	r2,-24(fp)
 8001028:	100690fa 	slli	r3,r2,3
 800102c:	00820074 	movhi	r2,2049
 8001030:	1885883a 	add	r2,r3,r2
 8001034:	1098bb17 	ldw	r2,25324(r2)
 8001038:	1080008b 	ldhu	r2,2(r2)
 800103c:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8001040:	80012640 	call	8001264 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8001044:	e0bffa03 	ldbu	r2,-24(fp)
 8001048:	100890fa 	slli	r4,r2,3
 800104c:	00c20074 	movhi	r3,2049
 8001050:	18d86704 	addi	r3,r3,24988
 8001054:	00820074 	movhi	r2,2049
 8001058:	2085883a 	add	r2,r4,r2
 800105c:	10d8bb15 	stw	r3,25324(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8001060:	e0bffa03 	ldbu	r2,-24(fp)
 8001064:	100690fa 	slli	r3,r2,3
 8001068:	00820074 	movhi	r2,2049
 800106c:	1885883a 	add	r2,r3,r2
 8001070:	1098bb17 	ldw	r2,25324(r2)
 8001074:	e0fffb83 	ldbu	r3,-18(fp)
 8001078:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 800107c:	e0bffe17 	ldw	r2,-8(fp)
 8001080:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8001084:	d0a71a45 	stb	r2,-25495(gp)
				hid_device.addr = addr;                        //fill in address
 8001088:	e0bffa03 	ldbu	r2,-24(fp)
 800108c:	d0a71a05 	stb	r2,-25496(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8001090:	e0bffe17 	ldw	r2,-8(fp)
 8001094:	10800003 	ldbu	r2,0(r2)
 8001098:	10803fcc 	andi	r2,r2,255
 800109c:	e0fffd17 	ldw	r3,-12(fp)
 80010a0:	1885883a 	add	r2,r3,r2
 80010a4:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80010a8:	e0bffd17 	ldw	r2,-12(fp)
 80010ac:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 80010b0:	00005706 	br	8001210 <HIDKProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 80010b4:	e0bffe17 	ldw	r2,-8(fp)
 80010b8:	10800043 	ldbu	r2,1(r2)
 80010bc:	10803fcc 	andi	r2,r2,255
 80010c0:	10800160 	cmpeqi	r2,r2,5
 80010c4:	1000091e 	bne	r2,zero,80010ec <HIDKProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80010c8:	e0bffe17 	ldw	r2,-8(fp)
 80010cc:	10800003 	ldbu	r2,0(r2)
 80010d0:	10803fcc 	andi	r2,r2,255
 80010d4:	e0fffd17 	ldw	r3,-12(fp)
 80010d8:	1885883a 	add	r2,r3,r2
 80010dc:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80010e0:	e0bffd17 	ldw	r2,-12(fp)
 80010e4:	e0bffe15 	stw	r2,-8(fp)
 80010e8:	00004906 	br	8001210 <HIDKProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80010ec:	e0bffa03 	ldbu	r2,-24(fp)
 80010f0:	100690fa 	slli	r3,r2,3
 80010f4:	00820074 	movhi	r2,2049
 80010f8:	1885883a 	add	r2,r3,r2
 80010fc:	1098bb17 	ldw	r2,25324(r2)
 8001100:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8001104:	e0fffe17 	ldw	r3,-8(fp)
 8001108:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 800110c:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 8001110:	e0bffa03 	ldbu	r2,-24(fp)
 8001114:	100690fa 	slli	r3,r2,3
 8001118:	00820074 	movhi	r2,2049
 800111c:	1885883a 	add	r2,r3,r2
 8001120:	1098bb17 	ldw	r2,25324(r2)
 8001124:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8001128:	e0fffe17 	ldw	r3,-8(fp)
 800112c:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 8001130:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 8001134:	e0bffa03 	ldbu	r2,-24(fp)
 8001138:	100690fa 	slli	r3,r2,3
 800113c:	00820074 	movhi	r2,2049
 8001140:	1885883a 	add	r2,r3,r2
 8001144:	1098bb17 	ldw	r2,25324(r2)
 8001148:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 800114c:	e0fffe17 	ldw	r3,-8(fp)
 8001150:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8001154:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 8001158:	e0bffa03 	ldbu	r2,-24(fp)
 800115c:	100690fa 	slli	r3,r2,3
 8001160:	00820074 	movhi	r2,2049
 8001164:	1885883a 	add	r2,r3,r2
 8001168:	1098bb17 	ldw	r2,25324(r2)
 800116c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8001170:	e0fffe17 	ldw	r3,-8(fp)
 8001174:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 8001178:	10c00105 	stb	r3,4(r2)
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 800117c:	e0fffa03 	ldbu	r3,-24(fp)
 8001180:	e0bffc83 	ldbu	r2,-14(fp)
 8001184:	d8000415 	stw	zero,16(sp)
 8001188:	d8000315 	stw	zero,12(sp)
 800118c:	d8000215 	stw	zero,8(sp)
 8001190:	d8000115 	stw	zero,4(sp)
 8001194:	d8800015 	stw	r2,0(sp)
 8001198:	01c00244 	movi	r7,9
 800119c:	000d883a 	mov	r6,zero
 80011a0:	000b883a 	mov	r5,zero
 80011a4:	1809883a 	mov	r4,r3
 80011a8:	8001bf00 	call	8001bf0 <XferCtrlReq>
 80011ac:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 80011b0:	e0bffcc3 	ldbu	r2,-13(fp)
 80011b4:	10000226 	beq	r2,zero,80011c0 <HIDKProbe+0x340>
							return (FALSE);
 80011b8:	0005883a 	mov	r2,zero
 80011bc:	00002406 	br	8001250 <HIDKProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80011c0:	e0fffa03 	ldbu	r3,-24(fp)
 80011c4:	d0a71a43 	ldbu	r2,-25495(gp)
 80011c8:	10803fcc 	andi	r2,r2,255
 80011cc:	d8000415 	stw	zero,16(sp)
 80011d0:	d8000315 	stw	zero,12(sp)
 80011d4:	d8800215 	stw	r2,8(sp)
 80011d8:	d8000115 	stw	zero,4(sp)
 80011dc:	d8000015 	stw	zero,0(sp)
 80011e0:	01c002c4 	movi	r7,11
 80011e4:	01800844 	movi	r6,33
 80011e8:	000b883a 	mov	r5,zero
 80011ec:	1809883a 	mov	r4,r3
 80011f0:	8001bf00 	call	8001bf0 <XferCtrlReq>
 80011f4:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 80011f8:	e0bffcc3 	ldbu	r2,-13(fp)
 80011fc:	10000226 	beq	r2,zero,8001208 <HIDKProbe+0x388>
							return (FALSE);
 8001200:	0005883a 	mov	r2,zero
 8001204:	00001206 	br	8001250 <HIDKProbe+0x3d0>
						} else {
							return (TRUE);
 8001208:	00800044 	movi	r2,1
 800120c:	00001006 	br	8001250 <HIDKProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 8001210:	e0ffff8b 	ldhu	r3,-2(fp)
 8001214:	00820074 	movhi	r2,2049
 8001218:	10987b04 	addi	r2,r2,25068
 800121c:	1885883a 	add	r2,r3,r2
 8001220:	e0fffd17 	ldw	r3,-12(fp)
 8001224:	18bfa336 	bltu	r3,r2,80010b4 <HIDKProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8001228:	00000206 	br	8001234 <HIDKProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 800122c:	0005883a 	mov	r2,zero
 8001230:	00000706 	br	8001250 <HIDKProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8001234:	e0ffff8b 	ldhu	r3,-2(fp)
 8001238:	00820074 	movhi	r2,2049
 800123c:	10987b04 	addi	r2,r2,25068
 8001240:	1885883a 	add	r2,r3,r2
 8001244:	e0fffd17 	ldw	r3,-12(fp)
 8001248:	18bf5036 	bltu	r3,r2,8000f8c <HIDKProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 800124c:	0005883a 	mov	r2,zero
}
 8001250:	e037883a 	mov	sp,fp
 8001254:	dfc00117 	ldw	ra,4(sp)
 8001258:	df000017 	ldw	fp,0(sp)
 800125c:	dec00204 	addi	sp,sp,8
 8001260:	f800283a 	ret

08001264 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8001264:	deffff04 	addi	sp,sp,-4
 8001268:	df000015 	stw	fp,0(sp)
 800126c:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8001270:	00c01004 	movi	r3,64
 8001274:	00820074 	movhi	r2,2049
 8001278:	10d86a45 	stb	r3,25001(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 800127c:	00c00404 	movi	r3,16
 8001280:	00820074 	movhi	r2,2049
 8001284:	10d86a85 	stb	r3,25002(r2)
}
 8001288:	0001883a 	nop
 800128c:	e037883a 	mov	sp,fp
 8001290:	df000017 	ldw	fp,0(sp)
 8001294:	dec00104 	addi	sp,sp,4
 8001298:	f800283a 	ret

0800129c <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 800129c:	defffb04 	addi	sp,sp,-20
 80012a0:	dfc00415 	stw	ra,16(sp)
 80012a4:	df000315 	stw	fp,12(sp)
 80012a8:	df000304 	addi	fp,sp,12
 80012ac:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 80012b0:	d0a71a03 	ldbu	r2,-25496(gp)
 80012b4:	10803fcc 	andi	r2,r2,255
 80012b8:	100b883a 	mov	r5,r2
 80012bc:	01003804 	movi	r4,224
 80012c0:	80014840 	call	8001484 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 80012c4:	d0a71a03 	ldbu	r2,-25496(gp)
 80012c8:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 80012cc:	d0a71a03 	ldbu	r2,-25496(gp)
 80012d0:	10803fcc 	andi	r2,r2,255
 80012d4:	100690fa 	slli	r3,r2,3
 80012d8:	00820074 	movhi	r2,2049
 80012dc:	1885883a 	add	r2,r3,r2
 80012e0:	1098bb17 	ldw	r2,25324(r2)
 80012e4:	10800204 	addi	r2,r2,8
 80012e8:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 80012ec:	10803fcc 	andi	r2,r2,255
 80012f0:	d8800015 	stw	r2,0(sp)
 80012f4:	e1fffe17 	ldw	r7,-8(fp)
 80012f8:	01800204 	movi	r6,8
 80012fc:	01400044 	movi	r5,1
 8001300:	80020300 	call	8002030 <XferInTransfer>
 8001304:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 8001308:	e0bfffc3 	ldbu	r2,-1(fp)
}
 800130c:	e037883a 	mov	sp,fp
 8001310:	dfc00117 	ldw	ra,4(sp)
 8001314:	df000017 	ldw	fp,0(sp)
 8001318:	dec00204 	addi	sp,sp,8
 800131c:	f800283a 	ret

08001320 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8001320:	defffb04 	addi	sp,sp,-20
 8001324:	dfc00415 	stw	ra,16(sp)
 8001328:	df000315 	stw	fp,12(sp)
 800132c:	df000304 	addi	fp,sp,12
 8001330:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8001334:	d0a71a03 	ldbu	r2,-25496(gp)
 8001338:	10803fcc 	andi	r2,r2,255
 800133c:	100b883a 	mov	r5,r2
 8001340:	01003804 	movi	r4,224
 8001344:	80014840 	call	8001484 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001348:	d0a71a03 	ldbu	r2,-25496(gp)
 800134c:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8001350:	d0a71a03 	ldbu	r2,-25496(gp)
 8001354:	10803fcc 	andi	r2,r2,255
 8001358:	100690fa 	slli	r3,r2,3
 800135c:	00820074 	movhi	r2,2049
 8001360:	1885883a 	add	r2,r3,r2
 8001364:	1098bb17 	ldw	r2,25324(r2)
 8001368:	10800204 	addi	r2,r2,8
 800136c:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001370:	10803fcc 	andi	r2,r2,255
 8001374:	d8800015 	stw	r2,0(sp)
 8001378:	e1fffe17 	ldw	r7,-8(fp)
 800137c:	01800204 	movi	r6,8
 8001380:	01400044 	movi	r5,1
 8001384:	80020300 	call	8002030 <XferInTransfer>
 8001388:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 800138c:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001390:	e037883a 	mov	sp,fp
 8001394:	dfc00117 	ldw	ra,4(sp)
 8001398:	df000017 	ldw	fp,0(sp)
 800139c:	dec00204 	addi	sp,sp,8
 80013a0:	f800283a 	ret

080013a4 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 80013a4:	defffb04 	addi	sp,sp,-20
 80013a8:	df000415 	stw	fp,16(sp)
 80013ac:	df000404 	addi	fp,sp,16
 80013b0:	2005883a 	mov	r2,r4
 80013b4:	2807883a 	mov	r3,r5
 80013b8:	e1bffd15 	stw	r6,-12(fp)
 80013bc:	e1fffc15 	stw	r7,-16(fp)
 80013c0:	e0bfff05 	stb	r2,-4(fp)
 80013c4:	1805883a 	mov	r2,r3
 80013c8:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 80013cc:	0005883a 	mov	r2,zero
}
 80013d0:	e037883a 	mov	sp,fp
 80013d4:	df000017 	ldw	fp,0(sp)
 80013d8:	dec00104 	addi	sp,sp,4
 80013dc:	f800283a 	ret

080013e0 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 80013e0:	defffb04 	addi	sp,sp,-20
 80013e4:	df000415 	stw	fp,16(sp)
 80013e8:	df000404 	addi	fp,sp,16
 80013ec:	2005883a 	mov	r2,r4
 80013f0:	2807883a 	mov	r3,r5
 80013f4:	e1bffd15 	stw	r6,-12(fp)
 80013f8:	e1fffc15 	stw	r7,-16(fp)
 80013fc:	e0bfff05 	stb	r2,-4(fp)
 8001400:	1805883a 	mov	r2,r3
 8001404:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 8001408:	0005883a 	mov	r2,zero
}
 800140c:	e037883a 	mov	sp,fp
 8001410:	df000017 	ldw	fp,0(sp)
 8001414:	dec00104 	addi	sp,sp,4
 8001418:	f800283a 	ret

0800141c <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 800141c:	defffc04 	addi	sp,sp,-16
 8001420:	df000315 	stw	fp,12(sp)
 8001424:	df000304 	addi	fp,sp,12
 8001428:	2005883a 	mov	r2,r4
 800142c:	2809883a 	mov	r4,r5
 8001430:	3007883a 	mov	r3,r6
 8001434:	e0bfff05 	stb	r2,-4(fp)
 8001438:	2005883a 	mov	r2,r4
 800143c:	e0bffe05 	stb	r2,-8(fp)
 8001440:	1805883a 	mov	r2,r3
 8001444:	e0bffd05 	stb	r2,-12(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 8001448:	0001883a 	nop
 800144c:	e037883a 	mov	sp,fp
 8001450:	df000017 	ldw	fp,0(sp)
 8001454:	dec00104 	addi	sp,sp,4
 8001458:	f800283a 	ret

0800145c <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 800145c:	defffe04 	addi	sp,sp,-8
 8001460:	df000115 	stw	fp,4(sp)
 8001464:	df000104 	addi	fp,sp,4
 8001468:	2005883a 	mov	r2,r4
 800146c:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8001470:	0001883a 	nop
 8001474:	e037883a 	mov	sp,fp
 8001478:	df000017 	ldw	fp,0(sp)
 800147c:	dec00104 	addi	sp,sp,4
 8001480:	f800283a 	ret

08001484 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8001484:	defff804 	addi	sp,sp,-32
 8001488:	dfc00715 	stw	ra,28(sp)
 800148c:	df000615 	stw	fp,24(sp)
 8001490:	df000604 	addi	fp,sp,24
 8001494:	2005883a 	mov	r2,r4
 8001498:	2807883a 	mov	r3,r5
 800149c:	e0bffe05 	stb	r2,-8(fp)
 80014a0:	1805883a 	mov	r2,r3
 80014a4:	e0bffd05 	stb	r2,-12(fp)
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	int rcode;
	reg = reg + 2;
 80014a8:	e0bffe03 	ldbu	r2,-8(fp)
 80014ac:	10800084 	addi	r2,r2,2
 80014b0:	e0bffe05 	stb	r2,-8(fp)
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 80014b4:	d0a00117 	ldw	r2,-32764(gp)
 80014b8:	1009883a 	mov	r4,r2
 80014bc:	e0fffe04 	addi	r3,fp,-8
 80014c0:	00800044 	movi	r2,1
 80014c4:	d8800215 	stw	r2,8(sp)
 80014c8:	d8000115 	stw	zero,4(sp)
 80014cc:	d8000015 	stw	zero,0(sp)
 80014d0:	180f883a 	mov	r7,r3
 80014d4:	01800044 	movi	r6,1
 80014d8:	000b883a 	mov	r5,zero
 80014dc:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 80014e0:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 80014e4:	e0bfff17 	ldw	r2,-4(fp)
 80014e8:	1000030e 	bge	r2,zero,80014f8 <MAXreg_wr+0x74>
		{
			printf("Error Writing Single Val");
 80014ec:	01020074 	movhi	r4,2049
 80014f0:	2108a404 	addi	r4,r4,8848
 80014f4:	8002c940 	call	8002c94 <printf>
		}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &val, 0, NULL, 0);
 80014f8:	d0a00117 	ldw	r2,-32764(gp)
 80014fc:	1007883a 	mov	r3,r2
 8001500:	e0bffd04 	addi	r2,fp,-12
 8001504:	d8000215 	stw	zero,8(sp)
 8001508:	d8000115 	stw	zero,4(sp)
 800150c:	d8000015 	stw	zero,0(sp)
 8001510:	100f883a 	mov	r7,r2
 8001514:	01800044 	movi	r6,1
 8001518:	000b883a 	mov	r5,zero
 800151c:	1809883a 	mov	r4,r3
 8001520:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 8001524:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 8001528:	e0bfff17 	ldw	r2,-4(fp)
 800152c:	1000030e 	bge	r2,zero,800153c <MAXreg_wr+0xb8>
	{
		printf("Error Writing Single Val");
 8001530:	01020074 	movhi	r4,2049
 8001534:	2108a404 	addi	r4,r4,8848
 8001538:	8002c940 	call	8002c94 <printf>
	}
}
 800153c:	0001883a 	nop
 8001540:	e037883a 	mov	sp,fp
 8001544:	dfc00117 	ldw	ra,4(sp)
 8001548:	df000017 	ldw	fp,0(sp)
 800154c:	dec00204 	addi	sp,sp,8
 8001550:	f800283a 	ret

08001554 <MAXbytes_wr>:

//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 8001554:	defff704 	addi	sp,sp,-36
 8001558:	dfc00815 	stw	ra,32(sp)
 800155c:	df000715 	stw	fp,28(sp)
 8001560:	df000704 	addi	fp,sp,28
 8001564:	2005883a 	mov	r2,r4
 8001568:	2807883a 	mov	r3,r5
 800156c:	e1bffc15 	stw	r6,-16(fp)
 8001570:	e0bffe05 	stb	r2,-8(fp)
 8001574:	1805883a 	mov	r2,r3
 8001578:	e0bffd05 	stb	r2,-12(fp)
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	int rcode;
	reg = reg + 2;
 800157c:	e0bffe03 	ldbu	r2,-8(fp)
 8001580:	10800084 	addi	r2,r2,2
 8001584:	e0bffe05 	stb	r2,-8(fp)
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 8001588:	d0a00117 	ldw	r2,-32764(gp)
 800158c:	1009883a 	mov	r4,r2
 8001590:	e0fffe04 	addi	r3,fp,-8
 8001594:	00800044 	movi	r2,1
 8001598:	d8800215 	stw	r2,8(sp)
 800159c:	d8000115 	stw	zero,4(sp)
 80015a0:	d8000015 	stw	zero,0(sp)
 80015a4:	180f883a 	mov	r7,r3
 80015a8:	01800044 	movi	r6,1
 80015ac:	000b883a 	mov	r5,zero
 80015b0:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 80015b4:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 80015b8:	e0bfff17 	ldw	r2,-4(fp)
 80015bc:	1000030e 	bge	r2,zero,80015cc <MAXbytes_wr+0x78>
		{
			printf("Error Writing Multiple Data");
 80015c0:	01020074 	movhi	r4,2049
 80015c4:	2108ab04 	addi	r4,r4,8876
 80015c8:	8002c940 	call	8002c94 <printf>
		}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, nbytes, data, 0, NULL, 0);
 80015cc:	d0a00117 	ldw	r2,-32764(gp)
 80015d0:	1007883a 	mov	r3,r2
 80015d4:	e0bffd03 	ldbu	r2,-12(fp)
 80015d8:	d8000215 	stw	zero,8(sp)
 80015dc:	d8000115 	stw	zero,4(sp)
 80015e0:	d8000015 	stw	zero,0(sp)
 80015e4:	e1fffc17 	ldw	r7,-16(fp)
 80015e8:	100d883a 	mov	r6,r2
 80015ec:	000b883a 	mov	r5,zero
 80015f0:	1809883a 	mov	r4,r3
 80015f4:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 80015f8:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 80015fc:	e0bfff17 	ldw	r2,-4(fp)
 8001600:	1000030e 	bge	r2,zero,8001610 <MAXbytes_wr+0xbc>
	{
		printf("Error Writing Multiple Data");
 8001604:	01020074 	movhi	r4,2049
 8001608:	2108ab04 	addi	r4,r4,8876
 800160c:	8002c940 	call	8002c94 <printf>
	}
	return (data + nbytes);
 8001610:	e0bffd03 	ldbu	r2,-12(fp)
 8001614:	e0fffc17 	ldw	r3,-16(fp)
 8001618:	1885883a 	add	r2,r3,r2
}
 800161c:	e037883a 	mov	sp,fp
 8001620:	dfc00117 	ldw	ra,4(sp)
 8001624:	df000017 	ldw	fp,0(sp)
 8001628:	dec00204 	addi	sp,sp,8
 800162c:	f800283a 	ret

08001630 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 8001630:	defff804 	addi	sp,sp,-32
 8001634:	dfc00715 	stw	ra,28(sp)
 8001638:	df000615 	stw	fp,24(sp)
 800163c:	df000604 	addi	fp,sp,24
 8001640:	2005883a 	mov	r2,r4
 8001644:	e0bffd05 	stb	r2,-12(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
	int rcode;
	BYTE val;
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 8001648:	d0a00117 	ldw	r2,-32764(gp)
 800164c:	1009883a 	mov	r4,r2
 8001650:	e0fffd04 	addi	r3,fp,-12
 8001654:	00800044 	movi	r2,1
 8001658:	d8800215 	stw	r2,8(sp)
 800165c:	d8000115 	stw	zero,4(sp)
 8001660:	d8000015 	stw	zero,0(sp)
 8001664:	180f883a 	mov	r7,r3
 8001668:	01800044 	movi	r6,1
 800166c:	000b883a 	mov	r5,zero
 8001670:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 8001674:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 8001678:	e0bfff17 	ldw	r2,-4(fp)
 800167c:	1000030e 	bge	r2,zero,800168c <MAXreg_rd+0x5c>
			{
				printf("Error Reading Data Val");
 8001680:	01020074 	movhi	r4,2049
 8001684:	2108b204 	addi	r4,r4,8904
 8001688:	8002c940 	call	8002c94 <printf>
			}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 0, NULL, 1, &val, 0);
 800168c:	d0a00117 	ldw	r2,-32764(gp)
 8001690:	1007883a 	mov	r3,r2
 8001694:	d8000215 	stw	zero,8(sp)
 8001698:	e0bffec4 	addi	r2,fp,-5
 800169c:	d8800115 	stw	r2,4(sp)
 80016a0:	00800044 	movi	r2,1
 80016a4:	d8800015 	stw	r2,0(sp)
 80016a8:	000f883a 	mov	r7,zero
 80016ac:	000d883a 	mov	r6,zero
 80016b0:	000b883a 	mov	r5,zero
 80016b4:	1809883a 	mov	r4,r3
 80016b8:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 80016bc:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 80016c0:	e0bfff17 	ldw	r2,-4(fp)
 80016c4:	1000030e 	bge	r2,zero,80016d4 <MAXreg_rd+0xa4>
		{
			printf("Error Reading Data Val");
 80016c8:	01020074 	movhi	r4,2049
 80016cc:	2108b204 	addi	r4,r4,8904
 80016d0:	8002c940 	call	8002c94 <printf>
		}
	return val;
 80016d4:	e0bffec3 	ldbu	r2,-5(fp)
}
 80016d8:	e037883a 	mov	sp,fp
 80016dc:	dfc00117 	ldw	ra,4(sp)
 80016e0:	df000017 	ldw	fp,0(sp)
 80016e4:	dec00204 	addi	sp,sp,8
 80016e8:	f800283a 	ret

080016ec <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 80016ec:	defff704 	addi	sp,sp,-36
 80016f0:	dfc00815 	stw	ra,32(sp)
 80016f4:	df000715 	stw	fp,28(sp)
 80016f8:	df000704 	addi	fp,sp,28
 80016fc:	2005883a 	mov	r2,r4
 8001700:	2807883a 	mov	r3,r5
 8001704:	e1bffc15 	stw	r6,-16(fp)
 8001708:	e0bffe05 	stb	r2,-8(fp)
 800170c:	1805883a 	mov	r2,r3
 8001710:	e0bffd05 	stb	r2,-12(fp)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
	//dereference reg and data
	int rcode;
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 1, &reg, 0, NULL, ALT_AVALON_SPI_COMMAND_MERGE);
 8001714:	d0a00117 	ldw	r2,-32764(gp)
 8001718:	1009883a 	mov	r4,r2
 800171c:	e0fffe04 	addi	r3,fp,-8
 8001720:	00800044 	movi	r2,1
 8001724:	d8800215 	stw	r2,8(sp)
 8001728:	d8000115 	stw	zero,4(sp)
 800172c:	d8000015 	stw	zero,0(sp)
 8001730:	180f883a 	mov	r7,r3
 8001734:	01800044 	movi	r6,1
 8001738:	000b883a 	mov	r5,zero
 800173c:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 8001740:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 8001744:	e0bfff17 	ldw	r2,-4(fp)
 8001748:	1000030e 	bge	r2,zero,8001758 <MAXbytes_rd+0x6c>
		{
			printf("Error Reading Multiple Data");
 800174c:	01020074 	movhi	r4,2049
 8001750:	2108b804 	addi	r4,r4,8928
 8001754:	8002c940 	call	8002c94 <printf>
		}
	rcode = alt_avalon_spi_command(SPI_MASTER_BASE, 0, 0, NULL, nbytes, data, 0);
 8001758:	d0a00117 	ldw	r2,-32764(gp)
 800175c:	1009883a 	mov	r4,r2
 8001760:	e0bffd03 	ldbu	r2,-12(fp)
 8001764:	d8000215 	stw	zero,8(sp)
 8001768:	e0fffc17 	ldw	r3,-16(fp)
 800176c:	d8c00115 	stw	r3,4(sp)
 8001770:	d8800015 	stw	r2,0(sp)
 8001774:	000f883a 	mov	r7,zero
 8001778:	000d883a 	mov	r6,zero
 800177c:	000b883a 	mov	r5,zero
 8001780:	8010d940 	call	8010d94 <alt_avalon_spi_command>
 8001784:	e0bfff15 	stw	r2,-4(fp)
	if (rcode < 0)
 8001788:	e0bfff17 	ldw	r2,-4(fp)
 800178c:	1000030e 	bge	r2,zero,800179c <MAXbytes_rd+0xb0>
	{
		printf("Error Reading Multiple Data");
 8001790:	01020074 	movhi	r4,2049
 8001794:	2108b804 	addi	r4,r4,8928
 8001798:	8002c940 	call	8002c94 <printf>
	}
	return (data + nbytes);
 800179c:	e0bffd03 	ldbu	r2,-12(fp)
 80017a0:	e0fffc17 	ldw	r3,-16(fp)
 80017a4:	1885883a 	add	r2,r3,r2
}
 80017a8:	e037883a 	mov	sp,fp
 80017ac:	dfc00117 	ldw	ra,4(sp)
 80017b0:	df000017 	ldw	fp,0(sp)
 80017b4:	dec00204 	addi	sp,sp,8
 80017b8:	f800283a 	ret

080017bc <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 80017bc:	defffd04 	addi	sp,sp,-12
 80017c0:	dfc00215 	stw	ra,8(sp)
 80017c4:	df000115 	stw	fp,4(sp)
 80017c8:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 80017cc:	0005883a 	mov	r2,zero
 80017d0:	00805c35 	stwio	r2,368(zero)
	usleep(1000000);
 80017d4:	010003f4 	movhi	r4,15
 80017d8:	21109004 	addi	r4,r4,16960
 80017dc:	80100f00 	call	80100f0 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 80017e0:	00800044 	movi	r2,1
 80017e4:	00805c35 	stwio	r2,368(zero)
	BYTE tmp = 0;
 80017e8:	e03fffc5 	stb	zero,-1(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 80017ec:	01400804 	movi	r5,32
 80017f0:	01001e04 	movi	r4,120
 80017f4:	80014840 	call	8001484 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 80017f8:	000b883a 	mov	r5,zero
 80017fc:	01001e04 	movi	r4,120
 8001800:	80014840 	call	8001484 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8001804:	00000806 	br	8001828 <MAX3421E_reset+0x6c>
		tmp++;                                      //timeout after 256 attempts
 8001808:	e0bfffc3 	ldbu	r2,-1(fp)
 800180c:	10800044 	addi	r2,r2,1
 8001810:	e0bfffc5 	stb	r2,-1(fp)
		if (tmp == 0) {
 8001814:	e0bfffc3 	ldbu	r2,-1(fp)
 8001818:	1000031e 	bne	r2,zero,8001828 <MAX3421E_reset+0x6c>
			printf("reset timeout!");
 800181c:	01020074 	movhi	r4,2049
 8001820:	2108bf04 	addi	r4,r4,8956
 8001824:	8002c940 	call	8002c94 <printf>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 8001828:	01001a04 	movi	r4,104
 800182c:	80016300 	call	8001630 <MAXreg_rd>
 8001830:	10803fcc 	andi	r2,r2,255
 8001834:	1080004c 	andi	r2,r2,1
 8001838:	103ff326 	beq	r2,zero,8001808 <MAX3421E_reset+0x4c>
		}
	}
}
 800183c:	0001883a 	nop
 8001840:	e037883a 	mov	sp,fp
 8001844:	dfc00117 	ldw	ra,4(sp)
 8001848:	df000017 	ldw	fp,0(sp)
 800184c:	dec00204 	addi	sp,sp,8
 8001850:	f800283a 	ret

08001854 <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 8001854:	defffe04 	addi	sp,sp,-8
 8001858:	df000115 	stw	fp,4(sp)
 800185c:	df000104 	addi	fp,sp,4
 8001860:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 8001864:	00800044 	movi	r2,1
}
 8001868:	e037883a 	mov	sp,fp
 800186c:	df000017 	ldw	fp,0(sp)
 8001870:	dec00104 	addi	sp,sp,4
 8001874:	f800283a 	ret

08001878 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8001878:	defffd04 	addi	sp,sp,-12
 800187c:	dfc00215 	stw	ra,8(sp)
 8001880:	df000115 	stw	fp,4(sp)
 8001884:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 8001888:	01003e04 	movi	r4,248
 800188c:	80016300 	call	8001630 <MAXreg_rd>
 8001890:	e0bfffc5 	stb	r2,-1(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 8001894:	e0ffffc3 	ldbu	r3,-1(fp)
 8001898:	00bff004 	movi	r2,-64
 800189c:	1884703a 	and	r2,r3,r2
 80018a0:	e0bfffc5 	stb	r2,-1(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 80018a4:	e0bfffc3 	ldbu	r2,-1(fp)
 80018a8:	10c01020 	cmpeqi	r3,r2,64
 80018ac:	1800221e 	bne	r3,zero,8001938 <MAX_busprobe+0xc0>
 80018b0:	10c01048 	cmpgei	r3,r2,65
 80018b4:	1800021e 	bne	r3,zero,80018c0 <MAX_busprobe+0x48>
 80018b8:	10003b26 	beq	r2,zero,80019a8 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 80018bc:	00004a06 	br	80019e8 <MAX_busprobe+0x170>
	switch (bus_sample) {                   //start full-speed or low-speed host
 80018c0:	10c02020 	cmpeqi	r3,r2,128
 80018c4:	1800031e 	bne	r3,zero,80018d4 <MAX_busprobe+0x5c>
 80018c8:	10803020 	cmpeqi	r2,r2,192
 80018cc:	1000331e 	bne	r2,zero,800199c <MAX_busprobe+0x124>
}
 80018d0:	00004506 	br	80019e8 <MAX_busprobe+0x170>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80018d4:	d0a00403 	ldbu	r2,-32752(gp)
 80018d8:	10803fcc 	andi	r2,r2,255
 80018dc:	108004e0 	cmpeqi	r2,r2,19
 80018e0:	10003e1e 	bne	r2,zero,80019dc <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80018e4:	01003604 	movi	r4,216
 80018e8:	80016300 	call	8001630 <MAXreg_rd>
 80018ec:	10803fcc 	andi	r2,r2,255
 80018f0:	1080008c 	andi	r2,r2,2
 80018f4:	1000071e 	bne	r2,zero,8001914 <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 80018f8:	01403244 	movi	r5,201
 80018fc:	01003604 	movi	r4,216
 8001900:	80014840 	call	8001484 <MAXreg_wr>
				printf("Starting in full speed\n");
 8001904:	01020074 	movhi	r4,2049
 8001908:	2108c304 	addi	r4,r4,8972
 800190c:	8002db80 	call	8002db8 <puts>
 8001910:	00000606 	br	800192c <MAX_busprobe+0xb4>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 8001914:	014032c4 	movi	r5,203
 8001918:	01003604 	movi	r4,216
 800191c:	80014840 	call	8001484 <MAXreg_wr>
				printf("Starting in low speed\n");
 8001920:	01020074 	movhi	r4,2049
 8001924:	2108c904 	addi	r4,r4,8996
 8001928:	8002db80 	call	8002db8 <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 800192c:	00800404 	movi	r2,16
 8001930:	d0a00405 	stb	r2,-32752(gp)
		break;
 8001934:	00002906 	br	80019dc <MAX_busprobe+0x164>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 8001938:	d0a00403 	ldbu	r2,-32752(gp)
 800193c:	10803fcc 	andi	r2,r2,255
 8001940:	108004e0 	cmpeqi	r2,r2,19
 8001944:	1000271e 	bne	r2,zero,80019e4 <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 8001948:	01003604 	movi	r4,216
 800194c:	80016300 	call	8001630 <MAXreg_rd>
 8001950:	10803fcc 	andi	r2,r2,255
 8001954:	1080008c 	andi	r2,r2,2
 8001958:	1000071e 	bne	r2,zero,8001978 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 800195c:	014032c4 	movi	r5,203
 8001960:	01003604 	movi	r4,216
 8001964:	80014840 	call	8001484 <MAXreg_wr>
				printf("Starting in low speed\n");
 8001968:	01020074 	movhi	r4,2049
 800196c:	2108c904 	addi	r4,r4,8996
 8001970:	8002db80 	call	8002db8 <puts>
 8001974:	00000606 	br	8001990 <MAX_busprobe+0x118>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001978:	01403244 	movi	r5,201
 800197c:	01003604 	movi	r4,216
 8001980:	80014840 	call	8001484 <MAXreg_wr>
				printf("Starting in full speed\n");
 8001984:	01020074 	movhi	r4,2049
 8001988:	2108c304 	addi	r4,r4,8972
 800198c:	8002db80 	call	8002db8 <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001990:	00800404 	movi	r2,16
 8001994:	d0a00405 	stb	r2,-32752(gp)
		break;
 8001998:	00001206 	br	80019e4 <MAX_busprobe+0x16c>
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 800199c:	00800104 	movi	r2,4
 80019a0:	d0a00405 	stb	r2,-32752(gp)
		break;
 80019a4:	00001006 	br	80019e8 <MAX_busprobe+0x170>
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 80019a8:	d0a00403 	ldbu	r2,-32752(gp)
 80019ac:	10803fcc 	andi	r2,r2,255
 80019b0:	10803c0c 	andi	r2,r2,240
 80019b4:	10000326 	beq	r2,zero,80019c4 <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 80019b8:	00800044 	movi	r2,1
 80019bc:	d0a00405 	stb	r2,-32752(gp)
		break;
 80019c0:	00000906 	br	80019e8 <MAX_busprobe+0x170>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 80019c4:	01403244 	movi	r5,201
 80019c8:	01003604 	movi	r4,216
 80019cc:	80014840 	call	8001484 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 80019d0:	008000c4 	movi	r2,3
 80019d4:	d0a00405 	stb	r2,-32752(gp)
		break;
 80019d8:	00000306 	br	80019e8 <MAX_busprobe+0x170>
		break;
 80019dc:	0001883a 	nop
 80019e0:	00000106 	br	80019e8 <MAX_busprobe+0x170>
		break;
 80019e4:	0001883a 	nop
}
 80019e8:	0001883a 	nop
 80019ec:	e037883a 	mov	sp,fp
 80019f0:	dfc00117 	ldw	ra,4(sp)
 80019f4:	df000017 	ldw	fp,0(sp)
 80019f8:	dec00204 	addi	sp,sp,8
 80019fc:	f800283a 	ret

08001a00 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8001a00:	defffe04 	addi	sp,sp,-8
 8001a04:	dfc00115 	stw	ra,4(sp)
 8001a08:	df000015 	stw	fp,0(sp)
 8001a0c:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 8001a10:	01400684 	movi	r5,26
 8001a14:	01002204 	movi	r4,136
 8001a18:	80014840 	call	8001484 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 8001a1c:	80017bc0 	call	80017bc <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 8001a20:	0009883a 	mov	r4,zero
 8001a24:	80018540 	call	8001854 <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 8001a28:	01402004 	movi	r5,128
 8001a2c:	01002e04 	movi	r4,184
 8001a30:	80014840 	call	8001484 <MAXreg_wr>
	Vbus_power( ON);
 8001a34:	01000044 	movi	r4,1
 8001a38:	80018540 	call	8001854 <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 8001a3c:	01403444 	movi	r5,209
 8001a40:	01003604 	movi	r4,216
 8001a44:	80014840 	call	8001484 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 8001a48:	01400804 	movi	r5,32
 8001a4c:	01003404 	movi	r4,208
 8001a50:	80014840 	call	8001484 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 8001a54:	01400104 	movi	r5,4
 8001a58:	01003a04 	movi	r4,232
 8001a5c:	80014840 	call	8001484 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 8001a60:	80018780 	call	8001878 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 8001a64:	01400804 	movi	r5,32
 8001a68:	01003204 	movi	r4,200
 8001a6c:	80014840 	call	8001484 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8001a70:	01400044 	movi	r5,1
 8001a74:	01002004 	movi	r4,128
 8001a78:	80014840 	call	8001484 <MAXreg_wr>
}
 8001a7c:	0001883a 	nop
 8001a80:	e037883a 	mov	sp,fp
 8001a84:	dfc00117 	ldw	ra,4(sp)
 8001a88:	df000017 	ldw	fp,0(sp)
 8001a8c:	dec00204 	addi	sp,sp,8
 8001a90:	f800283a 	ret

08001a94 <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 8001a94:	defffe04 	addi	sp,sp,-8
 8001a98:	dfc00115 	stw	ra,4(sp)
 8001a9c:	df000015 	stw	fp,0(sp)
 8001aa0:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 8001aa4:	00806437 	ldwio	r2,400(zero)
 8001aa8:	1000041e 	bne	r2,zero,8001abc <MAX3421E_Task+0x28>
		printf("MAX interrupt\n\r");
 8001aac:	01020074 	movhi	r4,2049
 8001ab0:	2108cf04 	addi	r4,r4,9020
 8001ab4:	8002c940 	call	8002c94 <printf>
		MaxIntHandler();
 8001ab8:	8001af00 	call	8001af0 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8001abc:	00806037 	ldwio	r2,384(zero)
 8001ac0:	10800058 	cmpnei	r2,r2,1
 8001ac4:	1000041e 	bne	r2,zero,8001ad8 <MAX3421E_Task+0x44>
		printf("GPX interrupt\n\r");
 8001ac8:	01020074 	movhi	r4,2049
 8001acc:	2108d304 	addi	r4,r4,9036
 8001ad0:	8002c940 	call	8002c94 <printf>
		MaxGpxHandler();
 8001ad4:	8001bbc0 	call	8001bbc <MaxGpxHandler>
	}
}
 8001ad8:	0001883a 	nop
 8001adc:	e037883a 	mov	sp,fp
 8001ae0:	dfc00117 	ldw	ra,4(sp)
 8001ae4:	df000017 	ldw	fp,0(sp)
 8001ae8:	dec00204 	addi	sp,sp,8
 8001aec:	f800283a 	ret

08001af0 <MaxIntHandler>:

void MaxIntHandler(void) {
 8001af0:	defffd04 	addi	sp,sp,-12
 8001af4:	dfc00215 	stw	ra,8(sp)
 8001af8:	df000115 	stw	fp,4(sp)
 8001afc:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8001b00:	e03fffc5 	stb	zero,-1(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 8001b04:	01003204 	movi	r4,200
 8001b08:	80016300 	call	8001630 <MAXreg_rd>
 8001b0c:	e0bfff85 	stb	r2,-2(fp)
	printf("IRQ: %x\n", HIRQ);
 8001b10:	e0bfff83 	ldbu	r2,-2(fp)
 8001b14:	100b883a 	mov	r5,r2
 8001b18:	01020074 	movhi	r4,2049
 8001b1c:	2108d704 	addi	r4,r4,9052
 8001b20:	8002c940 	call	8002c94 <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 8001b24:	e0bfff83 	ldbu	r2,-2(fp)
 8001b28:	1080100c 	andi	r2,r2,64
 8001b2c:	10000326 	beq	r2,zero,8001b3c <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 8001b30:	e0bfffc3 	ldbu	r2,-1(fp)
 8001b34:	10801014 	ori	r2,r2,64
 8001b38:	e0bfffc5 	stb	r2,-1(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 8001b3c:	e0bfff83 	ldbu	r2,-2(fp)
 8001b40:	1080080c 	andi	r2,r2,32
 8001b44:	10000426 	beq	r2,zero,8001b58 <MaxIntHandler+0x68>
		MAX_busprobe();
 8001b48:	80018780 	call	8001878 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 8001b4c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001b50:	10800814 	ori	r2,r2,32
 8001b54:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 8001b58:	e0bfff83 	ldbu	r2,-2(fp)
 8001b5c:	1080020c 	andi	r2,r2,8
 8001b60:	10000326 	beq	r2,zero,8001b70 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 8001b64:	000b883a 	mov	r5,zero
 8001b68:	01000e04 	movi	r4,56
 8001b6c:	80014840 	call	8001484 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 8001b70:	e0bfff83 	ldbu	r2,-2(fp)
 8001b74:	1080004c 	andi	r2,r2,1
 8001b78:	10000626 	beq	r2,zero,8001b94 <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8001b7c:	d0a00403 	ldbu	r2,-32752(gp)
 8001b80:	10800044 	addi	r2,r2,1
 8001b84:	d0a00405 	stb	r2,-32752(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8001b88:	e0bfffc3 	ldbu	r2,-1(fp)
 8001b8c:	10800054 	ori	r2,r2,1
 8001b90:	e0bfffc5 	stb	r2,-1(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 8001b94:	e0bfffc3 	ldbu	r2,-1(fp)
 8001b98:	100b883a 	mov	r5,r2
 8001b9c:	01003204 	movi	r4,200
 8001ba0:	80014840 	call	8001484 <MAXreg_wr>
}
 8001ba4:	0001883a 	nop
 8001ba8:	e037883a 	mov	sp,fp
 8001bac:	dfc00117 	ldw	ra,4(sp)
 8001bb0:	df000017 	ldw	fp,0(sp)
 8001bb4:	dec00204 	addi	sp,sp,8
 8001bb8:	f800283a 	ret

08001bbc <MaxGpxHandler>:

void MaxGpxHandler(void) {
 8001bbc:	defffd04 	addi	sp,sp,-12
 8001bc0:	dfc00215 	stw	ra,8(sp)
 8001bc4:	df000115 	stw	fp,4(sp)
 8001bc8:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 8001bcc:	01002c04 	movi	r4,176
 8001bd0:	80016300 	call	8001630 <MAXreg_rd>
 8001bd4:	e0bfffc5 	stb	r2,-1(fp)
}
 8001bd8:	0001883a 	nop
 8001bdc:	e037883a 	mov	sp,fp
 8001be0:	dfc00117 	ldw	ra,4(sp)
 8001be4:	df000017 	ldw	fp,0(sp)
 8001be8:	dec00204 	addi	sp,sp,8
 8001bec:	f800283a 	ret

08001bf0 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8001bf0:	defff104 	addi	sp,sp,-60
 8001bf4:	dfc00e15 	stw	ra,56(sp)
 8001bf8:	df000d15 	stw	fp,52(sp)
 8001bfc:	df000d04 	addi	fp,sp,52
 8001c00:	2015883a 	mov	r10,r4
 8001c04:	2813883a 	mov	r9,r5
 8001c08:	3011883a 	mov	r8,r6
 8001c0c:	e1400217 	ldw	r5,8(fp)
 8001c10:	e1000317 	ldw	r4,12(fp)
 8001c14:	e0c00417 	ldw	r3,16(fp)
 8001c18:	e0800517 	ldw	r2,20(fp)
 8001c1c:	500d883a 	mov	r6,r10
 8001c20:	e1bffb05 	stb	r6,-20(fp)
 8001c24:	480d883a 	mov	r6,r9
 8001c28:	e1bffa05 	stb	r6,-24(fp)
 8001c2c:	400d883a 	mov	r6,r8
 8001c30:	e1bff905 	stb	r6,-28(fp)
 8001c34:	380d883a 	mov	r6,r7
 8001c38:	e1bff805 	stb	r6,-32(fp)
 8001c3c:	e17ff705 	stb	r5,-36(fp)
 8001c40:	e13ff605 	stb	r4,-40(fp)
 8001c44:	e0fff50d 	sth	r3,-44(fp)
 8001c48:	e0bff40d 	sth	r2,-48(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 8001c4c:	e03fff15 	stw	zero,-4(fp)
 BYTE datastage = 1; //request data stage present or absent
 8001c50:	00800044 	movi	r2,1
 8001c54:	e0bffec5 	stb	r2,-5(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 8001c58:	e0800617 	ldw	r2,24(fp)
 8001c5c:	1000011e 	bne	r2,zero,8001c64 <XferCtrlReq+0x74>
        datastage = 0;
 8001c60:	e03ffec5 	stb	zero,-5(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 8001c64:	e0bffb03 	ldbu	r2,-20(fp)
 8001c68:	100b883a 	mov	r5,r2
 8001c6c:	01003804 	movi	r4,224
 8001c70:	80014840 	call	8001484 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8001c74:	e0bff903 	ldbu	r2,-28(fp)
 8001c78:	10803fcc 	andi	r2,r2,255
 8001c7c:	1080201c 	xori	r2,r2,128
 8001c80:	10bfe004 	addi	r2,r2,-128
 8001c84:	1000020e 	bge	r2,zero,8001c90 <XferCtrlReq+0xa0>
        direction = TRUE;                   		//determine request direction
 8001c88:	00800044 	movi	r2,1
 8001c8c:	e0bfff15 	stw	r2,-4(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001c90:	e0bff903 	ldbu	r2,-28(fp)
 8001c94:	e0bffc85 	stb	r2,-14(fp)
    setup_pkt.bRequest = bRequest;
 8001c98:	e0bff803 	ldbu	r2,-32(fp)
 8001c9c:	e0bffcc5 	stb	r2,-13(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8001ca0:	e0bff703 	ldbu	r2,-36(fp)
 8001ca4:	e0bffd05 	stb	r2,-12(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8001ca8:	e0bff603 	ldbu	r2,-40(fp)
 8001cac:	e0bffd45 	stb	r2,-11(fp)
    setup_pkt.wIndex = wInd;
 8001cb0:	e0bff50b 	ldhu	r2,-44(fp)
 8001cb4:	e0bffd8d 	sth	r2,-10(fp)
    setup_pkt.wLength = nbytes;
 8001cb8:	e0bff40b 	ldhu	r2,-48(fp)
 8001cbc:	e0bffe0d 	sth	r2,-8(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8001cc0:	e0bffc84 	addi	r2,fp,-14
 8001cc4:	100d883a 	mov	r6,r2
 8001cc8:	01400204 	movi	r5,8
 8001ccc:	01000804 	movi	r4,32
 8001cd0:	80015540 	call	8001554 <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8001cd4:	e0bffa03 	ldbu	r2,-24(fp)
 8001cd8:	100b883a 	mov	r5,r2
 8001cdc:	01000404 	movi	r4,16
 8001ce0:	8001eb00 	call	8001eb0 <XferDispatchPkt>
 8001ce4:	e0bffe85 	stb	r2,-6(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8001ce8:	e0bffe83 	ldbu	r2,-6(fp)
 8001cec:	10000226 	beq	r2,zero,8001cf8 <XferCtrlReq+0x108>
        return( rcode );
 8001cf0:	e0bffe83 	ldbu	r2,-6(fp)
 8001cf4:	00000e06 	br	8001d30 <XferCtrlReq+0x140>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8001cf8:	e0bffec3 	ldbu	r2,-5(fp)
 8001cfc:	100690ba 	slli	r3,r2,2
 8001d00:	d0a00204 	addi	r2,gp,-32760
 8001d04:	1885883a 	add	r2,r3,r2
 8001d08:	10800017 	ldw	r2,0(r2)
 8001d0c:	e13ffb03 	ldbu	r4,-20(fp)
 8001d10:	e17ffa03 	ldbu	r5,-24(fp)
 8001d14:	e1bff40b 	ldhu	r6,-48(fp)
 8001d18:	e0ffff17 	ldw	r3,-4(fp)
 8001d1c:	d8c00015 	stw	r3,0(sp)
 8001d20:	e1c00617 	ldw	r7,24(fp)
 8001d24:	103ee83a 	callr	r2
 8001d28:	e0bffe85 	stb	r2,-6(fp)
    return( rcode );
 8001d2c:	e0bffe83 	ldbu	r2,-6(fp)
}
 8001d30:	e037883a 	mov	sp,fp
 8001d34:	dfc00117 	ldw	ra,4(sp)
 8001d38:	df000017 	ldw	fp,0(sp)
 8001d3c:	dec00204 	addi	sp,sp,8
 8001d40:	f800283a 	ret

08001d44 <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001d44:	defff804 	addi	sp,sp,-32
 8001d48:	dfc00715 	stw	ra,28(sp)
 8001d4c:	df000615 	stw	fp,24(sp)
 8001d50:	df000604 	addi	fp,sp,24
 8001d54:	2005883a 	mov	r2,r4
 8001d58:	2809883a 	mov	r4,r5
 8001d5c:	3007883a 	mov	r3,r6
 8001d60:	e1fffb15 	stw	r7,-20(fp)
 8001d64:	e0bffe05 	stb	r2,-8(fp)
 8001d68:	2005883a 	mov	r2,r4
 8001d6c:	e0bffd05 	stb	r2,-12(fp)
 8001d70:	1805883a 	mov	r2,r3
 8001d74:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8001d78:	e0800217 	ldw	r2,8(fp)
 8001d7c:	10002626 	beq	r2,zero,8001e18 <XferCtrlData+0xd4>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001d80:	e0bffe03 	ldbu	r2,-8(fp)
 8001d84:	100690fa 	slli	r3,r2,3
 8001d88:	00820074 	movhi	r2,2049
 8001d8c:	1885883a 	add	r2,r3,r2
 8001d90:	10d8bb17 	ldw	r3,25324(r2)
 8001d94:	e0bffd03 	ldbu	r2,-12(fp)
 8001d98:	100490fa 	slli	r2,r2,3
 8001d9c:	1885883a 	add	r2,r3,r2
 8001da0:	00c00804 	movi	r3,32
 8001da4:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8001da8:	e13ffe03 	ldbu	r4,-8(fp)
 8001dac:	e17ffd03 	ldbu	r5,-12(fp)
 8001db0:	e1bffc0b 	ldhu	r6,-16(fp)
 8001db4:	e0bffe03 	ldbu	r2,-8(fp)
 8001db8:	100690fa 	slli	r3,r2,3
 8001dbc:	00820074 	movhi	r2,2049
 8001dc0:	1885883a 	add	r2,r3,r2
 8001dc4:	10d8bb17 	ldw	r3,25324(r2)
 8001dc8:	e0bffd03 	ldbu	r2,-12(fp)
 8001dcc:	100490fa 	slli	r2,r2,3
 8001dd0:	1885883a 	add	r2,r3,r2
 8001dd4:	1080008b 	ldhu	r2,2(r2)
 8001dd8:	10803fcc 	andi	r2,r2,255
 8001ddc:	d8800015 	stw	r2,0(sp)
 8001de0:	e1fffb17 	ldw	r7,-20(fp)
 8001de4:	80020300 	call	8002030 <XferInTransfer>
 8001de8:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode ) {
 8001dec:	e0bfffc3 	ldbu	r2,-1(fp)
 8001df0:	10000226 	beq	r2,zero,8001dfc <XferCtrlData+0xb8>
        return( rcode );
 8001df4:	e0bfffc3 	ldbu	r2,-1(fp)
 8001df8:	00000806 	br	8001e1c <XferCtrlData+0xd8>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001dfc:	e0bffd03 	ldbu	r2,-12(fp)
 8001e00:	100b883a 	mov	r5,r2
 8001e04:	01002804 	movi	r4,160
 8001e08:	8001eb00 	call	8001eb0 <XferDispatchPkt>
 8001e0c:	e0bfffc5 	stb	r2,-1(fp)
        return( rcode );
 8001e10:	e0bfffc3 	ldbu	r2,-1(fp)
 8001e14:	00000106 	br	8001e1c <XferCtrlData+0xd8>
    }
    else {              //OUT not implemented
        return( 0xff );
 8001e18:	00bfffc4 	movi	r2,-1
    }
}
 8001e1c:	e037883a 	mov	sp,fp
 8001e20:	dfc00117 	ldw	ra,4(sp)
 8001e24:	df000017 	ldw	fp,0(sp)
 8001e28:	dec00204 	addi	sp,sp,8
 8001e2c:	f800283a 	ret

08001e30 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001e30:	defff904 	addi	sp,sp,-28
 8001e34:	dfc00615 	stw	ra,24(sp)
 8001e38:	df000515 	stw	fp,20(sp)
 8001e3c:	df000504 	addi	fp,sp,20
 8001e40:	2005883a 	mov	r2,r4
 8001e44:	2809883a 	mov	r4,r5
 8001e48:	3007883a 	mov	r3,r6
 8001e4c:	e1fffb15 	stw	r7,-20(fp)
 8001e50:	e0bffe05 	stb	r2,-8(fp)
 8001e54:	2005883a 	mov	r2,r4
 8001e58:	e0bffd05 	stb	r2,-12(fp)
 8001e5c:	1805883a 	mov	r2,r3
 8001e60:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001e64:	e0800217 	ldw	r2,8(fp)
 8001e68:	10000626 	beq	r2,zero,8001e84 <XferCtrlND+0x54>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001e6c:	e0bffd03 	ldbu	r2,-12(fp)
 8001e70:	100b883a 	mov	r5,r2
 8001e74:	01002804 	movi	r4,160
 8001e78:	8001eb00 	call	8001eb0 <XferDispatchPkt>
 8001e7c:	e0bfffc5 	stb	r2,-1(fp)
 8001e80:	00000506 	br	8001e98 <XferCtrlND+0x68>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001e84:	e0bffd03 	ldbu	r2,-12(fp)
 8001e88:	100b883a 	mov	r5,r2
 8001e8c:	01002004 	movi	r4,128
 8001e90:	8001eb00 	call	8001eb0 <XferDispatchPkt>
 8001e94:	e0bfffc5 	stb	r2,-1(fp)
    }
    return( rcode );
 8001e98:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001e9c:	e037883a 	mov	sp,fp
 8001ea0:	dfc00117 	ldw	ra,4(sp)
 8001ea4:	df000017 	ldw	fp,0(sp)
 8001ea8:	dec00204 	addi	sp,sp,8
 8001eac:	f800283a 	ret

08001eb0 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8001eb0:	defff904 	addi	sp,sp,-28
 8001eb4:	dfc00615 	stw	ra,24(sp)
 8001eb8:	df000515 	stw	fp,20(sp)
 8001ebc:	df000504 	addi	fp,sp,20
 8001ec0:	2005883a 	mov	r2,r4
 8001ec4:	2807883a 	mov	r3,r5
 8001ec8:	e0bffc05 	stb	r2,-16(fp)
 8001ecc:	1805883a 	mov	r2,r3
 8001ed0:	e0bffb05 	stb	r2,-20(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001ed4:	d0a72917 	ldw	r2,-25436(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8001ed8:	0140fa04 	movi	r5,1000
 8001edc:	1009883a 	mov	r4,r2
 8001ee0:	8002c3c0 	call	8002c3c <__mulsi3>
 8001ee4:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8001ee8:	d0a72817 	ldw	r2,-25440(gp)
 8001eec:	100b883a 	mov	r5,r2
 8001ef0:	1809883a 	mov	r4,r3
 8001ef4:	8002b7c0 	call	8002b7c <__udivsi3>
 8001ef8:	1084e204 	addi	r2,r2,5000
 8001efc:	e0bffe15 	stw	r2,-8(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8001f00:	e03fff85 	stb	zero,-2(fp)
 BYTE nak_count = 0;
 8001f04:	e03fff45 	stb	zero,-3(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001f08:	e0fffc03 	ldbu	r3,-16(fp)
 8001f0c:	e0bffb03 	ldbu	r2,-20(fp)
 8001f10:	1884b03a 	or	r2,r3,r2
 8001f14:	10803fcc 	andi	r2,r2,255
 8001f18:	100b883a 	mov	r5,r2
 8001f1c:	01003c04 	movi	r4,240
 8001f20:	80014840 	call	8001484 <MAXreg_wr>
        rcode = 0xff;
 8001f24:	00bfffc4 	movi	r2,-1
 8001f28:	e0bfffc5 	stb	r2,-1(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001f2c:	00000d06 	br	8001f64 <XferDispatchPkt+0xb4>
            tmpdata = MAXreg_rd( rHIRQ );
 8001f30:	01003204 	movi	r4,200
 8001f34:	80016300 	call	8001630 <MAXreg_rd>
 8001f38:	e0bffdc5 	stb	r2,-9(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8001f3c:	e0bffdc3 	ldbu	r2,-9(fp)
 8001f40:	10803fcc 	andi	r2,r2,255
 8001f44:	1080201c 	xori	r2,r2,128
 8001f48:	10bfe004 	addi	r2,r2,-128
 8001f4c:	1000050e 	bge	r2,zero,8001f64 <XferDispatchPkt+0xb4>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001f50:	01402004 	movi	r5,128
 8001f54:	01003204 	movi	r4,200
 8001f58:	80014840 	call	8001484 <MAXreg_wr>
                rcode = 0x00;
 8001f5c:	e03fffc5 	stb	zero,-1(fp)
                break;
 8001f60:	00000c06 	br	8001f94 <XferDispatchPkt+0xe4>
  return _alt_nticks;
 8001f64:	d0a72917 	ldw	r2,-25436(gp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001f68:	0140fa04 	movi	r5,1000
 8001f6c:	1009883a 	mov	r4,r2
 8001f70:	8002c3c0 	call	8002c3c <__mulsi3>
 8001f74:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8001f78:	d0a72817 	ldw	r2,-25440(gp)
 8001f7c:	100b883a 	mov	r5,r2
 8001f80:	1809883a 	mov	r4,r3
 8001f84:	8002b7c0 	call	8002b7c <__udivsi3>
 8001f88:	1007883a 	mov	r3,r2
 8001f8c:	e0bffe17 	ldw	r2,-8(fp)
 8001f90:	18bfe736 	bltu	r3,r2,8001f30 <XferDispatchPkt+0x80>
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001f94:	e0bfffc3 	ldbu	r2,-1(fp)
 8001f98:	10000226 	beq	r2,zero,8001fa4 <XferDispatchPkt+0xf4>
            return( rcode );
 8001f9c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001fa0:	00001e06 	br	800201c <XferDispatchPkt+0x16c>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001fa4:	01003e04 	movi	r4,248
 8001fa8:	80016300 	call	8001630 <MAXreg_rd>
 8001fac:	108003cc 	andi	r2,r2,15
 8001fb0:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode == hrNAK ) {
 8001fb4:	e0bfffc3 	ldbu	r2,-1(fp)
 8001fb8:	10800118 	cmpnei	r2,r2,4
 8001fbc:	1000071e 	bne	r2,zero,8001fdc <XferDispatchPkt+0x12c>
            nak_count++;
 8001fc0:	e0bfff43 	ldbu	r2,-3(fp)
 8001fc4:	10800044 	addi	r2,r2,1
 8001fc8:	e0bfff45 	stb	r2,-3(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8001fcc:	e0bfff43 	ldbu	r2,-3(fp)
 8001fd0:	10803218 	cmpnei	r2,r2,200
 8001fd4:	10000b1e 	bne	r2,zero,8002004 <XferDispatchPkt+0x154>
                break;
 8001fd8:	00000f06 	br	8002018 <XferDispatchPkt+0x168>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8001fdc:	e0bfffc3 	ldbu	r2,-1(fp)
 8001fe0:	10800398 	cmpnei	r2,r2,14
 8001fe4:	1000091e 	bne	r2,zero,800200c <XferDispatchPkt+0x15c>
            retry_count++;
 8001fe8:	e0bfff83 	ldbu	r2,-2(fp)
 8001fec:	10800044 	addi	r2,r2,1
 8001ff0:	e0bfff85 	stb	r2,-2(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8001ff4:	e0bfff87 	ldb	r2,-2(fp)
 8001ff8:	108000d8 	cmpnei	r2,r2,3
 8001ffc:	10000526 	beq	r2,zero,8002014 <XferDispatchPkt+0x164>
                break;
            }
            else {
                continue;
 8002000:	00000106 	br	8002008 <XferDispatchPkt+0x158>
                continue;
 8002004:	0001883a 	nop
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8002008:	003fbf06 	br	8001f08 <XferDispatchPkt+0x58>
            }
        }
        else break;
 800200c:	0001883a 	nop
 8002010:	00000106 	br	8002018 <XferDispatchPkt+0x168>
                break;
 8002014:	0001883a 	nop
    }//while( 1 )
    return( rcode );
 8002018:	e0bfffc3 	ldbu	r2,-1(fp)
}
 800201c:	e037883a 	mov	sp,fp
 8002020:	dfc00117 	ldw	ra,4(sp)
 8002024:	df000017 	ldw	fp,0(sp)
 8002028:	dec00204 	addi	sp,sp,8
 800202c:	f800283a 	ret

08002030 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8002030:	defff804 	addi	sp,sp,-32
 8002034:	dfc00715 	stw	ra,28(sp)
 8002038:	df000615 	stw	fp,24(sp)
 800203c:	df000604 	addi	fp,sp,24
 8002040:	2007883a 	mov	r3,r4
 8002044:	3009883a 	mov	r4,r6
 8002048:	e1fffb15 	stw	r7,-20(fp)
 800204c:	e0800217 	ldw	r2,8(fp)
 8002050:	e0fffe05 	stb	r3,-8(fp)
 8002054:	2807883a 	mov	r3,r5
 8002058:	e0fffd05 	stb	r3,-12(fp)
 800205c:	2007883a 	mov	r3,r4
 8002060:	e0fffc0d 	sth	r3,-16(fp)
 8002064:	e0bffa05 	stb	r2,-24(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8002068:	e03fff8d 	sth	zero,-2(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 800206c:	e0bffe03 	ldbu	r2,-8(fp)
 8002070:	100690fa 	slli	r3,r2,3
 8002074:	00820074 	movhi	r2,2049
 8002078:	1885883a 	add	r2,r3,r2
 800207c:	10d8bb17 	ldw	r3,25324(r2)
 8002080:	e0bffd03 	ldbu	r2,-12(fp)
 8002084:	100490fa 	slli	r2,r2,3
 8002088:	1885883a 	add	r2,r3,r2
 800208c:	10800183 	ldbu	r2,6(r2)
 8002090:	10803fcc 	andi	r2,r2,255
 8002094:	100b883a 	mov	r5,r2
 8002098:	01003a04 	movi	r4,232
 800209c:	80014840 	call	8001484 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 80020a0:	e0bffd03 	ldbu	r2,-12(fp)
 80020a4:	100b883a 	mov	r5,r2
 80020a8:	0009883a 	mov	r4,zero
 80020ac:	8001eb00 	call	8001eb0 <XferDispatchPkt>
 80020b0:	e0bfff45 	stb	r2,-3(fp)
        if( rcode ) {
 80020b4:	e0bfff43 	ldbu	r2,-3(fp)
 80020b8:	10000226 	beq	r2,zero,80020c4 <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 80020bc:	e0bfff43 	ldbu	r2,-3(fp)
 80020c0:	00003806 	br	80021a4 <XferInTransfer+0x174>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 80020c4:	01003204 	movi	r4,200
 80020c8:	80016300 	call	8001630 <MAXreg_rd>
 80020cc:	10803fcc 	andi	r2,r2,255
 80020d0:	1080010c 	andi	r2,r2,4
 80020d4:	1000021e 	bne	r2,zero,80020e0 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 80020d8:	00bffc04 	movi	r2,-16
 80020dc:	00003106 	br	80021a4 <XferInTransfer+0x174>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 80020e0:	01000c04 	movi	r4,48
 80020e4:	80016300 	call	8001630 <MAXreg_rd>
 80020e8:	e0bfff05 	stb	r2,-4(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 80020ec:	e0bfff03 	ldbu	r2,-4(fp)
 80020f0:	e1bffb17 	ldw	r6,-20(fp)
 80020f4:	100b883a 	mov	r5,r2
 80020f8:	01000204 	movi	r4,8
 80020fc:	80016ec0 	call	80016ec <MAXbytes_rd>
 8002100:	e0bffb15 	stw	r2,-20(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8002104:	01400104 	movi	r5,4
 8002108:	01003204 	movi	r4,200
 800210c:	80014840 	call	8001484 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8002110:	e0bfff03 	ldbu	r2,-4(fp)
 8002114:	e0ffff8b 	ldhu	r3,-2(fp)
 8002118:	1885883a 	add	r2,r3,r2
 800211c:	e0bfff8d 	sth	r2,-2(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8002120:	e0ffff03 	ldbu	r3,-4(fp)
 8002124:	e0bffa03 	ldbu	r2,-24(fp)
 8002128:	18800336 	bltu	r3,r2,8002138 <XferInTransfer+0x108>
 800212c:	e0ffff8b 	ldhu	r3,-2(fp)
 8002130:	e0bffc0b 	ldhu	r2,-16(fp)
 8002134:	18bfda36 	bltu	r3,r2,80020a0 <XferInTransfer+0x70>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8002138:	01003e04 	movi	r4,248
 800213c:	80016300 	call	8001630 <MAXreg_rd>
 8002140:	10803fcc 	andi	r2,r2,255
 8002144:	1080040c 	andi	r2,r2,16
 8002148:	10000b26 	beq	r2,zero,8002178 <XferInTransfer+0x148>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 800214c:	e0bffe03 	ldbu	r2,-8(fp)
 8002150:	100690fa 	slli	r3,r2,3
 8002154:	00820074 	movhi	r2,2049
 8002158:	1885883a 	add	r2,r3,r2
 800215c:	10d8bb17 	ldw	r3,25324(r2)
 8002160:	e0bffd03 	ldbu	r2,-12(fp)
 8002164:	100490fa 	slli	r2,r2,3
 8002168:	1885883a 	add	r2,r3,r2
 800216c:	00c00804 	movi	r3,32
 8002170:	10c00185 	stb	r3,6(r2)
 8002174:	00000a06 	br	80021a0 <XferInTransfer+0x170>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8002178:	e0bffe03 	ldbu	r2,-8(fp)
 800217c:	100690fa 	slli	r3,r2,3
 8002180:	00820074 	movhi	r2,2049
 8002184:	1885883a 	add	r2,r3,r2
 8002188:	10d8bb17 	ldw	r3,25324(r2)
 800218c:	e0bffd03 	ldbu	r2,-12(fp)
 8002190:	100490fa 	slli	r2,r2,3
 8002194:	1885883a 	add	r2,r3,r2
 8002198:	00c00404 	movi	r3,16
 800219c:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 80021a0:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 80021a4:	e037883a 	mov	sp,fp
 80021a8:	dfc00117 	ldw	ra,4(sp)
 80021ac:	df000017 	ldw	fp,0(sp)
 80021b0:	dec00204 	addi	sp,sp,8
 80021b4:	f800283a 	ret

080021b8 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 80021b8:	defffe04 	addi	sp,sp,-8
 80021bc:	df000115 	stw	fp,4(sp)
 80021c0:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80021c4:	e03fffc5 	stb	zero,-1(fp)
 80021c8:	00000d06 	br	8002200 <USB_init+0x48>
        devtable[ i ].epinfo = NULL;       //clear device table
 80021cc:	e0bfffc3 	ldbu	r2,-1(fp)
 80021d0:	100690fa 	slli	r3,r2,3
 80021d4:	00820074 	movhi	r2,2049
 80021d8:	1885883a 	add	r2,r3,r2
 80021dc:	1018bb15 	stw	zero,25324(r2)
        devtable[ i ].devclass = 0;
 80021e0:	e0bfffc3 	ldbu	r2,-1(fp)
 80021e4:	100690fa 	slli	r3,r2,3
 80021e8:	00820074 	movhi	r2,2049
 80021ec:	1885883a 	add	r2,r3,r2
 80021f0:	1018bc05 	stb	zero,25328(r2)
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 80021f4:	e0bfffc3 	ldbu	r2,-1(fp)
 80021f8:	10800044 	addi	r2,r2,1
 80021fc:	e0bfffc5 	stb	r2,-1(fp)
 8002200:	e0bfffc3 	ldbu	r2,-1(fp)
 8002204:	10800270 	cmpltui	r2,r2,9
 8002208:	103ff01e 	bne	r2,zero,80021cc <USB_init+0x14>
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 800220c:	d0e71b04 	addi	r3,gp,-25492
 8002210:	00820074 	movhi	r2,2049
 8002214:	10d8bb15 	stw	r3,25324(r2)
    dev0ep.MaxPktSize = 0;
 8002218:	d0271b8d 	sth	zero,-25490(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 800221c:	00801004 	movi	r2,64
 8002220:	d0a71c45 	stb	r2,-25487(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8002224:	00800404 	movi	r2,16
 8002228:	d0a71c85 	stb	r2,-25486(gp)
}
 800222c:	0001883a 	nop
 8002230:	e037883a 	mov	sp,fp
 8002234:	df000017 	ldw	fp,0(sp)
 8002238:	dec00104 	addi	sp,sp,4
 800223c:	f800283a 	ret

08002240 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8002240:	deffb204 	addi	sp,sp,-312
 8002244:	dfc04d15 	stw	ra,308(sp)
 8002248:	df004c15 	stw	fp,304(sp)
 800224c:	dc004b15 	stw	r16,300(sp)
 8002250:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8002254:	d0a00403 	ldbu	r2,-32752(gp)
 8002258:	10803fcc 	andi	r2,r2,255
 800225c:	10803c0c 	andi	r2,r2,240
 8002260:	10c00820 	cmpeqi	r3,r2,32
 8002264:	18010e1e 	bne	r3,zero,80026a0 <USB_Task+0x460>
 8002268:	10c00848 	cmpgei	r3,r2,33
 800226c:	1800041e 	bne	r3,zero,8002280 <USB_Task+0x40>
 8002270:	10000a26 	beq	r2,zero,800229c <USB_Task+0x5c>
 8002274:	10800420 	cmpeqi	r2,r2,16
 8002278:	10001a1e 	bne	r2,zero,80022e4 <USB_Task+0xa4>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 800227c:	00017506 	br	8002854 <USB_Task+0x614>
    switch( usb_task_state & USB_STATE_MASK ) {
 8002280:	10c01020 	cmpeqi	r3,r2,64
 8002284:	1801681e 	bne	r3,zero,8002828 <USB_Task+0x5e8>
 8002288:	10c03fe0 	cmpeqi	r3,r2,255
 800228c:	1801681e 	bne	r3,zero,8002830 <USB_Task+0x5f0>
 8002290:	10800c20 	cmpeqi	r2,r2,48
 8002294:	10013d1e 	bne	r2,zero,800278c <USB_Task+0x54c>
            break;
 8002298:	00016e06 	br	8002854 <USB_Task+0x614>
            switch( usb_task_state ) {
 800229c:	d0a00403 	ldbu	r2,-32752(gp)
 80022a0:	10803fcc 	andi	r2,r2,255
 80022a4:	10c000e0 	cmpeqi	r3,r2,3
 80022a8:	1800081e 	bne	r3,zero,80022cc <USB_Task+0x8c>
 80022ac:	10c00120 	cmpeqi	r3,r2,4
 80022b0:	18000a1e 	bne	r3,zero,80022dc <USB_Task+0x9c>
 80022b4:	10800058 	cmpnei	r2,r2,1
 80022b8:	10015f1e 	bne	r2,zero,8002838 <USB_Task+0x5f8>
                    USB_init();
 80022bc:	80021b80 	call	80021b8 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 80022c0:	008000c4 	movi	r2,3
 80022c4:	d0a00405 	stb	r2,-32752(gp)
                    break;
 80022c8:	00000506 	br	80022e0 <USB_Task+0xa0>
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 80022cc:	01400104 	movi	r5,4
 80022d0:	01003a04 	movi	r4,232
 80022d4:	80014840 	call	8001484 <MAXreg_wr>
                    break;
 80022d8:	00000106 	br	80022e0 <USB_Task+0xa0>
                    break;
 80022dc:	0001883a 	nop
            break;//( USB_STATE_DETACHED ):
 80022e0:	00015506 	br	8002838 <USB_Task+0x5f8>
            switch( usb_task_state ) {
 80022e4:	d0a00403 	ldbu	r2,-32752(gp)
 80022e8:	10803fcc 	andi	r2,r2,255
 80022ec:	10bffc04 	addi	r2,r2,-16
 80022f0:	10c001a8 	cmpgeui	r3,r2,6
 80022f4:	1801521e 	bne	r3,zero,8002840 <USB_Task+0x600>
 80022f8:	100690ba 	slli	r3,r2,2
 80022fc:	00820034 	movhi	r2,2048
 8002300:	1885883a 	add	r2,r3,r2
 8002304:	1088c317 	ldw	r2,8972(r2)
 8002308:	1000683a 	jmp	r2
 800230c:	08002324 	muli	zero,at,140
 8002310:	0800235c 	xori	zero,at,141
 8002314:	08002398 	cmpnei	zero,at,142
 8002318:	080023bc 	xorhi	zero,at,142
 800231c:	080023fc 	xorhi	zero,at,143
 8002320:	08002410 	cmplti	zero,at,144
  return _alt_nticks;
 8002324:	d0a72917 	ldw	r2,-25436(gp)
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 8002328:	0140fa04 	movi	r5,1000
 800232c:	1009883a 	mov	r4,r2
 8002330:	8002c3c0 	call	8002c3c <__mulsi3>
 8002334:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002338:	d0a72817 	ldw	r2,-25440(gp)
 800233c:	100b883a 	mov	r5,r2
 8002340:	1809883a 	mov	r4,r3
 8002344:	8002b7c0 	call	8002b7c <__udivsi3>
 8002348:	10803204 	addi	r2,r2,200
 800234c:	d0a71e15 	stw	r2,-25480(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 8002350:	00800444 	movi	r2,17
 8002354:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_STATE_ATTACHED )
 8002358:	0000d006 	br	800269c <USB_Task+0x45c>
  return _alt_nticks;
 800235c:	d0a72917 	ldw	r2,-25436(gp)
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 8002360:	0140fa04 	movi	r5,1000
 8002364:	1009883a 	mov	r4,r2
 8002368:	8002c3c0 	call	8002c3c <__mulsi3>
 800236c:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002370:	d0a72817 	ldw	r2,-25440(gp)
 8002374:	100b883a 	mov	r5,r2
 8002378:	1809883a 	mov	r4,r3
 800237c:	8002b7c0 	call	8002b7c <__udivsi3>
 8002380:	1007883a 	mov	r3,r2
 8002384:	d0a71e17 	ldw	r2,-25480(gp)
 8002388:	10c0c12e 	bgeu	r2,r3,8002690 <USB_Task+0x450>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 800238c:	00800484 	movi	r2,18
 8002390:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002394:	0000be06 	br	8002690 <USB_Task+0x450>
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8002398:	01400044 	movi	r5,1
 800239c:	01003204 	movi	r4,200
 80023a0:	80014840 	call	8001484 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 80023a4:	01400044 	movi	r5,1
 80023a8:	01003a04 	movi	r4,232
 80023ac:	80014840 	call	8001484 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 80023b0:	008004c4 	movi	r2,19
 80023b4:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 80023b8:	0000b806 	br	800269c <USB_Task+0x45c>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 80023bc:	01003a04 	movi	r4,232
 80023c0:	80016300 	call	8001630 <MAXreg_rd>
 80023c4:	10803fcc 	andi	r2,r2,255
 80023c8:	1080004c 	andi	r2,r2,1
 80023cc:	1000b21e 	bne	r2,zero,8002698 <USB_Task+0x458>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 80023d0:	01003604 	movi	r4,216
 80023d4:	80016300 	call	8001630 <MAXreg_rd>
 80023d8:	10800214 	ori	r2,r2,8
 80023dc:	e0bffe85 	stb	r2,-6(fp)
                        MAXreg_wr( rMODE, tmpdata );
 80023e0:	e0bffe83 	ldbu	r2,-6(fp)
 80023e4:	100b883a 	mov	r5,r2
 80023e8:	01003604 	movi	r4,216
 80023ec:	80014840 	call	8001484 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 80023f0:	00800504 	movi	r2,20
 80023f4:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 80023f8:	0000a706 	br	8002698 <USB_Task+0x458>
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 80023fc:	01003204 	movi	r4,200
 8002400:	80016300 	call	8001630 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 8002404:	00800544 	movi	r2,21
 8002408:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 800240c:	0000a306 	br	800269c <USB_Task+0x45c>
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 8002410:	00820074 	movhi	r2,2049
 8002414:	1098bb17 	ldw	r2,25324(r2)
 8002418:	00c00204 	movi	r3,8
 800241c:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 8002420:	e0bff984 	addi	r2,fp,-26
 8002424:	d8800415 	stw	r2,16(sp)
 8002428:	00800204 	movi	r2,8
 800242c:	d8800315 	stw	r2,12(sp)
 8002430:	d8000215 	stw	zero,8(sp)
 8002434:	00800044 	movi	r2,1
 8002438:	d8800115 	stw	r2,4(sp)
 800243c:	d8000015 	stw	zero,0(sp)
 8002440:	01c00184 	movi	r7,6
 8002444:	01802004 	movi	r6,128
 8002448:	000b883a 	mov	r5,zero
 800244c:	0009883a 	mov	r4,zero
 8002450:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8002454:	e0bffe45 	stb	r2,-7(fp)
                    if( rcode == 0 ) {
 8002458:	e0bffe43 	ldbu	r2,-7(fp)
 800245c:	1000851e 	bne	r2,zero,8002674 <USB_Task+0x434>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 8002460:	e0fffb43 	ldbu	r3,-19(fp)
 8002464:	00820074 	movhi	r2,2049
 8002468:	1098bb17 	ldw	r2,25324(r2)
 800246c:	18c03fcc 	andi	r3,r3,255
 8002470:	10c0008d 	sth	r3,2(r2)
                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 8002474:	e0bff983 	ldbu	r2,-26(fp)
 8002478:	10803fcc 	andi	r2,r2,255
 800247c:	e0fff984 	addi	r3,fp,-26
 8002480:	d8c00415 	stw	r3,16(sp)
 8002484:	d8800315 	stw	r2,12(sp)
 8002488:	d8000215 	stw	zero,8(sp)
 800248c:	00800044 	movi	r2,1
 8002490:	d8800115 	stw	r2,4(sp)
 8002494:	d8000015 	stw	zero,0(sp)
 8002498:	01c00184 	movi	r7,6
 800249c:	01802004 	movi	r6,128
 80024a0:	000b883a 	mov	r5,zero
 80024a4:	0009883a 	mov	r4,zero
 80024a8:	8001bf00 	call	8001bf0 <XferCtrlReq>
 80024ac:	e0bffe45 	stb	r2,-7(fp)
                        if (buf.iManufacturer != 0)
 80024b0:	e0bffd03 	ldbu	r2,-12(fp)
 80024b4:	10803fcc 	andi	r2,r2,255
 80024b8:	10003426 	beq	r2,zero,800258c <USB_Task+0x34c>
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 80024bc:	e0bffd03 	ldbu	r2,-12(fp)
 80024c0:	10803fcc 	andi	r2,r2,255
 80024c4:	e0ffb984 	addi	r3,fp,-282
 80024c8:	d8c00415 	stw	r3,16(sp)
 80024cc:	00c00084 	movi	r3,2
 80024d0:	d8c00315 	stw	r3,12(sp)
 80024d4:	00c10244 	movi	r3,1033
 80024d8:	d8c00215 	stw	r3,8(sp)
 80024dc:	00c000c4 	movi	r3,3
 80024e0:	d8c00115 	stw	r3,4(sp)
 80024e4:	d8800015 	stw	r2,0(sp)
 80024e8:	01c00184 	movi	r7,6
 80024ec:	01802004 	movi	r6,128
 80024f0:	000b883a 	mov	r5,zero
 80024f4:	0009883a 	mov	r4,zero
 80024f8:	8001bf00 	call	8001bf0 <XferCtrlReq>
 80024fc:	e0bffe45 	stb	r2,-7(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002500:	e0bffd03 	ldbu	r2,-12(fp)
 8002504:	10803fcc 	andi	r2,r2,255
 8002508:	e0ffb983 	ldbu	r3,-282(fp)
 800250c:	18c03fcc 	andi	r3,r3,255
 8002510:	e13fb984 	addi	r4,fp,-282
 8002514:	d9000415 	stw	r4,16(sp)
 8002518:	d8c00315 	stw	r3,12(sp)
 800251c:	00c10244 	movi	r3,1033
 8002520:	d8c00215 	stw	r3,8(sp)
 8002524:	00c000c4 	movi	r3,3
 8002528:	d8c00115 	stw	r3,4(sp)
 800252c:	d8800015 	stw	r2,0(sp)
 8002530:	01c00184 	movi	r7,6
 8002534:	01802004 	movi	r6,128
 8002538:	000b883a 	mov	r5,zero
 800253c:	0009883a 	mov	r4,zero
 8002540:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8002544:	e0bffe45 	stb	r2,-7(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002548:	e0bffd03 	ldbu	r2,-12(fp)
 800254c:	14003fcc 	andi	r16,r2,255
 8002550:	e0bfb983 	ldbu	r2,-282(fp)
 8002554:	10803fcc 	andi	r2,r2,255
 8002558:	1004d07a 	srli	r2,r2,1
 800255c:	10bfffc4 	addi	r2,r2,-1
 8002560:	10c03fcc 	andi	r3,r2,255
 8002564:	e0bfb984 	addi	r2,fp,-282
 8002568:	10800084 	addi	r2,r2,2
 800256c:	180b883a 	mov	r5,r3
 8002570:	1009883a 	mov	r4,r2
 8002574:	8002a000 	call	8002a00 <ConvUTF8ToStr>
 8002578:	100d883a 	mov	r6,r2
 800257c:	800b883a 	mov	r5,r16
 8002580:	01020074 	movhi	r4,2049
 8002584:	2108da04 	addi	r4,r4,9064
 8002588:	8002c940 	call	8002c94 <printf>
                		if (buf.iProduct != 0)
 800258c:	e0bffd43 	ldbu	r2,-11(fp)
 8002590:	10803fcc 	andi	r2,r2,255
 8002594:	10003426 	beq	r2,zero,8002668 <USB_Task+0x428>
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002598:	e0bffd43 	ldbu	r2,-11(fp)
 800259c:	10803fcc 	andi	r2,r2,255
 80025a0:	e0ffb984 	addi	r3,fp,-282
 80025a4:	d8c00415 	stw	r3,16(sp)
 80025a8:	00c00084 	movi	r3,2
 80025ac:	d8c00315 	stw	r3,12(sp)
 80025b0:	00c10244 	movi	r3,1033
 80025b4:	d8c00215 	stw	r3,8(sp)
 80025b8:	00c000c4 	movi	r3,3
 80025bc:	d8c00115 	stw	r3,4(sp)
 80025c0:	d8800015 	stw	r2,0(sp)
 80025c4:	01c00184 	movi	r7,6
 80025c8:	01802004 	movi	r6,128
 80025cc:	000b883a 	mov	r5,zero
 80025d0:	0009883a 	mov	r4,zero
 80025d4:	8001bf00 	call	8001bf0 <XferCtrlReq>
 80025d8:	e0bffe45 	stb	r2,-7(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 80025dc:	e0bffd43 	ldbu	r2,-11(fp)
 80025e0:	10803fcc 	andi	r2,r2,255
 80025e4:	e0ffb983 	ldbu	r3,-282(fp)
 80025e8:	18c03fcc 	andi	r3,r3,255
 80025ec:	e13fb984 	addi	r4,fp,-282
 80025f0:	d9000415 	stw	r4,16(sp)
 80025f4:	d8c00315 	stw	r3,12(sp)
 80025f8:	00c10244 	movi	r3,1033
 80025fc:	d8c00215 	stw	r3,8(sp)
 8002600:	00c000c4 	movi	r3,3
 8002604:	d8c00115 	stw	r3,4(sp)
 8002608:	d8800015 	stw	r2,0(sp)
 800260c:	01c00184 	movi	r7,6
 8002610:	01802004 	movi	r6,128
 8002614:	000b883a 	mov	r5,zero
 8002618:	0009883a 	mov	r4,zero
 800261c:	8001bf00 	call	8001bf0 <XferCtrlReq>
 8002620:	e0bffe45 	stb	r2,-7(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 8002624:	e0bffd43 	ldbu	r2,-11(fp)
 8002628:	14003fcc 	andi	r16,r2,255
 800262c:	e0bfb983 	ldbu	r2,-282(fp)
 8002630:	10803fcc 	andi	r2,r2,255
 8002634:	1004d07a 	srli	r2,r2,1
 8002638:	10bfffc4 	addi	r2,r2,-1
 800263c:	10c03fcc 	andi	r3,r2,255
 8002640:	e0bfb984 	addi	r2,fp,-282
 8002644:	10800084 	addi	r2,r2,2
 8002648:	180b883a 	mov	r5,r3
 800264c:	1009883a 	mov	r4,r2
 8002650:	8002a000 	call	8002a00 <ConvUTF8ToStr>
 8002654:	100d883a 	mov	r6,r2
 8002658:	800b883a 	mov	r5,r16
 800265c:	01020074 	movhi	r4,2049
 8002660:	2108e004 	addi	r4,r4,9088
 8002664:	8002c940 	call	8002c94 <printf>
                        usb_task_state = USB_STATE_ADDRESSING;
 8002668:	00800804 	movi	r2,32
 800266c:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002670:	00000a06 	br	800269c <USB_Task+0x45c>
                        usb_error = rcode;
 8002674:	e0bffe43 	ldbu	r2,-7(fp)
 8002678:	d0a71f45 	stb	r2,-25475(gp)
                        last_usb_task_state = usb_task_state;
 800267c:	d0a00403 	ldbu	r2,-32752(gp)
 8002680:	d0a71d05 	stb	r2,-25484(gp)
                        usb_task_state = USB_STATE_ERROR;
 8002684:	00bfffc4 	movi	r2,-1
 8002688:	d0a00405 	stb	r2,-32752(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 800268c:	00000306 	br	800269c <USB_Task+0x45c>
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002690:	0001883a 	nop
 8002694:	00006a06 	br	8002840 <USB_Task+0x600>
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002698:	0001883a 	nop
            break;//case ( USB_STATE_ATTACHED )
 800269c:	00006806 	br	8002840 <USB_Task+0x600>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80026a0:	00800044 	movi	r2,1
 80026a4:	e0bffec5 	stb	r2,-5(fp)
 80026a8:	00002a06 	br	8002754 <USB_Task+0x514>
                if( devtable[ i ].epinfo == NULL ) {
 80026ac:	e0bffec3 	ldbu	r2,-5(fp)
 80026b0:	100690fa 	slli	r3,r2,3
 80026b4:	00820074 	movhi	r2,2049
 80026b8:	1885883a 	add	r2,r3,r2
 80026bc:	1098bb17 	ldw	r2,25324(r2)
 80026c0:	1000211e 	bne	r2,zero,8002748 <USB_Task+0x508>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 80026c4:	e0bffec3 	ldbu	r2,-5(fp)
 80026c8:	00c20074 	movhi	r3,2049
 80026cc:	18d8bb17 	ldw	r3,25324(r3)
 80026d0:	100890fa 	slli	r4,r2,3
 80026d4:	00820074 	movhi	r2,2049
 80026d8:	2085883a 	add	r2,r4,r2
 80026dc:	10d8bb15 	stw	r3,25324(r2)
                    rcode = XferSetAddr( 0, 0, i );
 80026e0:	e0bffec3 	ldbu	r2,-5(fp)
 80026e4:	d8000415 	stw	zero,16(sp)
 80026e8:	d8000315 	stw	zero,12(sp)
 80026ec:	d8000215 	stw	zero,8(sp)
 80026f0:	d8000115 	stw	zero,4(sp)
 80026f4:	d8800015 	stw	r2,0(sp)
 80026f8:	01c00144 	movi	r7,5
 80026fc:	000d883a 	mov	r6,zero
 8002700:	000b883a 	mov	r5,zero
 8002704:	0009883a 	mov	r4,zero
 8002708:	8001bf00 	call	8001bf0 <XferCtrlReq>
 800270c:	e0bffe45 	stb	r2,-7(fp)
                    if( rcode == 0 ) {
 8002710:	e0bffe43 	ldbu	r2,-7(fp)
 8002714:	1000051e 	bne	r2,zero,800272c <USB_Task+0x4ec>
                        tmp_addr = i;
 8002718:	e0bffec3 	ldbu	r2,-5(fp)
 800271c:	d0a71f05 	stb	r2,-25476(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 8002720:	00800c04 	movi	r2,48
 8002724:	d0a00405 	stb	r2,-32752(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002728:	00000d06 	br	8002760 <USB_Task+0x520>
                        usb_error = rcode;          //set address error
 800272c:	e0bffe43 	ldbu	r2,-7(fp)
 8002730:	d0a71f45 	stb	r2,-25475(gp)
                        last_usb_task_state = usb_task_state;
 8002734:	d0a00403 	ldbu	r2,-32752(gp)
 8002738:	d0a71d05 	stb	r2,-25484(gp)
                        usb_task_state = USB_STATE_ERROR;
 800273c:	00bfffc4 	movi	r2,-1
 8002740:	d0a00405 	stb	r2,-32752(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 8002744:	00000606 	br	8002760 <USB_Task+0x520>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002748:	e0bffec3 	ldbu	r2,-5(fp)
 800274c:	10800044 	addi	r2,r2,1
 8002750:	e0bffec5 	stb	r2,-5(fp)
 8002754:	e0bffec3 	ldbu	r2,-5(fp)
 8002758:	10800230 	cmpltui	r2,r2,8
 800275c:	103fd31e 	bne	r2,zero,80026ac <USB_Task+0x46c>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 8002760:	d0a00403 	ldbu	r2,-32752(gp)
 8002764:	10803fcc 	andi	r2,r2,255
 8002768:	10800818 	cmpnei	r2,r2,32
 800276c:	1000361e 	bne	r2,zero,8002848 <USB_Task+0x608>
                usb_error = 0xfe;
 8002770:	00bfff84 	movi	r2,-2
 8002774:	d0a71f45 	stb	r2,-25475(gp)
                last_usb_task_state = usb_task_state;
 8002778:	d0a00403 	ldbu	r2,-32752(gp)
 800277c:	d0a71d05 	stb	r2,-25484(gp)
                usb_task_state = USB_STATE_ERROR;
 8002780:	00bfffc4 	movi	r2,-1
 8002784:	d0a00405 	stb	r2,-32752(gp)
            break;//case ( USB_STATE_ADDRESSING )
 8002788:	00002f06 	br	8002848 <USB_Task+0x608>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 800278c:	e03ffec5 	stb	zero,-5(fp)
 8002790:	00001706 	br	80027f0 <USB_Task+0x5b0>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 8002794:	e0fffec3 	ldbu	r3,-5(fp)
 8002798:	1805883a 	mov	r2,r3
 800279c:	1085883a 	add	r2,r2,r2
 80027a0:	10c5883a 	add	r2,r2,r3
 80027a4:	100490ba 	slli	r2,r2,2
 80027a8:	00c20074 	movhi	r3,2049
 80027ac:	10c7883a 	add	r3,r2,r3
 80027b0:	188a4717 	ldw	r2,10524(r3)
 80027b4:	d0e71f03 	ldbu	r3,-25476(gp)
 80027b8:	18c03fcc 	andi	r3,r3,255
 80027bc:	000b883a 	mov	r5,zero
 80027c0:	1809883a 	mov	r4,r3
 80027c4:	103ee83a 	callr	r2
 80027c8:	e0bffe45 	stb	r2,-7(fp)
                if( rcode == TRUE ) {
 80027cc:	e0bffe43 	ldbu	r2,-7(fp)
 80027d0:	10800058 	cmpnei	r2,r2,1
 80027d4:	1000031e 	bne	r2,zero,80027e4 <USB_Task+0x5a4>
			        usb_task_state = USB_STATE_RUNNING;
 80027d8:	00801004 	movi	r2,64
 80027dc:	d0a00405 	stb	r2,-32752(gp)
                    break;
 80027e0:	00000606 	br	80027fc <USB_Task+0x5bc>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 80027e4:	e0bffec3 	ldbu	r2,-5(fp)
 80027e8:	10800044 	addi	r2,r2,1
 80027ec:	e0bffec5 	stb	r2,-5(fp)
 80027f0:	e0bffec3 	ldbu	r2,-5(fp)
 80027f4:	10800130 	cmpltui	r2,r2,4
 80027f8:	103fe61e 	bne	r2,zero,8002794 <USB_Task+0x554>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 80027fc:	d0a00403 	ldbu	r2,-32752(gp)
 8002800:	10803fcc 	andi	r2,r2,255
 8002804:	10800c18 	cmpnei	r2,r2,48
 8002808:	1000111e 	bne	r2,zero,8002850 <USB_Task+0x610>
                usb_error = 0xfd;
 800280c:	00bfff44 	movi	r2,-3
 8002810:	d0a71f45 	stb	r2,-25475(gp)
                last_usb_task_state = usb_task_state;
 8002814:	d0a00403 	ldbu	r2,-32752(gp)
 8002818:	d0a71d05 	stb	r2,-25484(gp)
                usb_task_state = USB_STATE_ERROR;
 800281c:	00bfffc4 	movi	r2,-1
 8002820:	d0a00405 	stb	r2,-32752(gp)
            break;//( USB_STATE_CONFIGURING )
 8002824:	00000a06 	br	8002850 <USB_Task+0x610>
            break;//( USB_STATE_RUNNING )
 8002828:	0001883a 	nop
 800282c:	00000906 	br	8002854 <USB_Task+0x614>
            break;//( USB_STATE_ERROR )
 8002830:	0001883a 	nop
 8002834:	00000706 	br	8002854 <USB_Task+0x614>
            break;//( USB_STATE_DETACHED ):
 8002838:	0001883a 	nop
 800283c:	00000506 	br	8002854 <USB_Task+0x614>
            break;//case ( USB_STATE_ATTACHED )
 8002840:	0001883a 	nop
 8002844:	00000306 	br	8002854 <USB_Task+0x614>
            break;//case ( USB_STATE_ADDRESSING )
 8002848:	0001883a 	nop
 800284c:	00000106 	br	8002854 <USB_Task+0x614>
            break;//( USB_STATE_CONFIGURING )
 8002850:	0001883a 	nop
    }//switch( usb_task_state & STATE_MASK )
}
 8002854:	0001883a 	nop
 8002858:	e6ffff04 	addi	sp,fp,-4
 800285c:	dfc00217 	ldw	ra,8(sp)
 8002860:	df000117 	ldw	fp,4(sp)
 8002864:	dc000017 	ldw	r16,0(sp)
 8002868:	dec00304 	addi	sp,sp,12
 800286c:	f800283a 	ret

08002870 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 8002870:	defffd04 	addi	sp,sp,-12
 8002874:	df000215 	stw	fp,8(sp)
 8002878:	df000204 	addi	fp,sp,8
 800287c:	2005883a 	mov	r2,r4
 8002880:	e17ffe15 	stw	r5,-8(fp)
 8002884:	e0bfff05 	stb	r2,-4(fp)
    return( FALSE );
 8002888:	0005883a 	mov	r2,zero
}
 800288c:	e037883a 	mov	sp,fp
 8002890:	df000017 	ldw	fp,0(sp)
 8002894:	dec00104 	addi	sp,sp,4
 8002898:	f800283a 	ret

0800289c <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800289c:	defffb04 	addi	sp,sp,-20
 80028a0:	df000415 	stw	fp,16(sp)
 80028a4:	df000404 	addi	fp,sp,16
 80028a8:	2005883a 	mov	r2,r4
 80028ac:	2807883a 	mov	r3,r5
 80028b0:	e1bffd15 	stw	r6,-12(fp)
 80028b4:	e1fffc15 	stw	r7,-16(fp)
 80028b8:	e0bfff05 	stb	r2,-4(fp)
 80028bc:	1805883a 	mov	r2,r3
 80028c0:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 80028c4:	0005883a 	mov	r2,zero

}
 80028c8:	e037883a 	mov	sp,fp
 80028cc:	df000017 	ldw	fp,0(sp)
 80028d0:	dec00104 	addi	sp,sp,4
 80028d4:	f800283a 	ret

080028d8 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 80028d8:	defffd04 	addi	sp,sp,-12
 80028dc:	df000215 	stw	fp,8(sp)
 80028e0:	df000204 	addi	fp,sp,8
 80028e4:	2005883a 	mov	r2,r4
 80028e8:	e17ffe15 	stw	r5,-8(fp)
 80028ec:	e0bfff05 	stb	r2,-4(fp)

	return( FALSE );
 80028f0:	0005883a 	mov	r2,zero

}
 80028f4:	e037883a 	mov	sp,fp
 80028f8:	df000017 	ldw	fp,0(sp)
 80028fc:	dec00104 	addi	sp,sp,4
 8002900:	f800283a 	ret

08002904 <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002904:	defffb04 	addi	sp,sp,-20
 8002908:	df000415 	stw	fp,16(sp)
 800290c:	df000404 	addi	fp,sp,16
 8002910:	2005883a 	mov	r2,r4
 8002914:	2807883a 	mov	r3,r5
 8002918:	e1bffd15 	stw	r6,-12(fp)
 800291c:	e1fffc15 	stw	r7,-16(fp)
 8002920:	e0bfff05 	stb	r2,-4(fp)
 8002924:	1805883a 	mov	r2,r3
 8002928:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 800292c:	0005883a 	mov	r2,zero
}
 8002930:	e037883a 	mov	sp,fp
 8002934:	df000017 	ldw	fp,0(sp)
 8002938:	dec00104 	addi	sp,sp,4
 800293c:	f800283a 	ret

08002940 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 8002940:	defffd04 	addi	sp,sp,-12
 8002944:	df000215 	stw	fp,8(sp)
 8002948:	df000204 	addi	fp,sp,8
 800294c:	2005883a 	mov	r2,r4
 8002950:	e17ffe15 	stw	r5,-8(fp)
 8002954:	e0bfff05 	stb	r2,-4(fp)
	return( FALSE );
 8002958:	0005883a 	mov	r2,zero
}
 800295c:	e037883a 	mov	sp,fp
 8002960:	df000017 	ldw	fp,0(sp)
 8002964:	dec00104 	addi	sp,sp,4
 8002968:	f800283a 	ret

0800296c <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800296c:	defffb04 	addi	sp,sp,-20
 8002970:	df000415 	stw	fp,16(sp)
 8002974:	df000404 	addi	fp,sp,16
 8002978:	2005883a 	mov	r2,r4
 800297c:	2807883a 	mov	r3,r5
 8002980:	e1bffd15 	stw	r6,-12(fp)
 8002984:	e1fffc15 	stw	r7,-16(fp)
 8002988:	e0bfff05 	stb	r2,-4(fp)
 800298c:	1805883a 	mov	r2,r3
 8002990:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 8002994:	0005883a 	mov	r2,zero
}
 8002998:	e037883a 	mov	sp,fp
 800299c:	df000017 	ldw	fp,0(sp)
 80029a0:	dec00104 	addi	sp,sp,4
 80029a4:	f800283a 	ret

080029a8 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 80029a8:	deffff04 	addi	sp,sp,-4
 80029ac:	df000015 	stw	fp,0(sp)
 80029b0:	d839883a 	mov	fp,sp
    return( usb_task_state );
 80029b4:	d0a00403 	ldbu	r2,-32752(gp)
}
 80029b8:	e037883a 	mov	sp,fp
 80029bc:	df000017 	ldw	fp,0(sp)
 80029c0:	dec00104 	addi	sp,sp,4
 80029c4:	f800283a 	ret

080029c8 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 80029c8:	defffe04 	addi	sp,sp,-8
 80029cc:	df000115 	stw	fp,4(sp)
 80029d0:	df000104 	addi	fp,sp,4
 80029d4:	2005883a 	mov	r2,r4
 80029d8:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 80029dc:	e0bfff03 	ldbu	r2,-4(fp)
 80029e0:	100690fa 	slli	r3,r2,3
 80029e4:	00820074 	movhi	r2,2049
 80029e8:	1098bb04 	addi	r2,r2,25324
 80029ec:	1885883a 	add	r2,r3,r2
}
 80029f0:	e037883a 	mov	sp,fp
 80029f4:	df000017 	ldw	fp,0(sp)
 80029f8:	dec00104 	addi	sp,sp,4
 80029fc:	f800283a 	ret

08002a00 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8002a00:	defffc04 	addi	sp,sp,-16
 8002a04:	df000315 	stw	fp,12(sp)
 8002a08:	df000304 	addi	fp,sp,12
 8002a0c:	e13ffe15 	stw	r4,-8(fp)
 8002a10:	2805883a 	mov	r2,r5
 8002a14:	e0bffd05 	stb	r2,-12(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 8002a18:	e03fffc5 	stb	zero,-1(fp)
 8002a1c:	00000d06 	br	8002a54 <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 8002a20:	e0bfffc3 	ldbu	r2,-1(fp)
 8002a24:	1085883a 	add	r2,r2,r2
 8002a28:	1007883a 	mov	r3,r2
 8002a2c:	e0bffe17 	ldw	r2,-8(fp)
 8002a30:	10c7883a 	add	r3,r2,r3
 8002a34:	e0bfffc3 	ldbu	r2,-1(fp)
 8002a38:	e13ffe17 	ldw	r4,-8(fp)
 8002a3c:	2085883a 	add	r2,r4,r2
 8002a40:	18c00003 	ldbu	r3,0(r3)
 8002a44:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < length; i++)
 8002a48:	e0bfffc3 	ldbu	r2,-1(fp)
 8002a4c:	10800044 	addi	r2,r2,1
 8002a50:	e0bfffc5 	stb	r2,-1(fp)
 8002a54:	e0ffffc3 	ldbu	r3,-1(fp)
 8002a58:	e0bffd03 	ldbu	r2,-12(fp)
 8002a5c:	18bff036 	bltu	r3,r2,8002a20 <ConvUTF8ToStr+0x20>
	}
	utf8[length] = 0x00;
 8002a60:	e0bffd03 	ldbu	r2,-12(fp)
 8002a64:	e0fffe17 	ldw	r3,-8(fp)
 8002a68:	1885883a 	add	r2,r3,r2
 8002a6c:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8002a70:	e0bffe17 	ldw	r2,-8(fp)
}
 8002a74:	e037883a 	mov	sp,fp
 8002a78:	df000017 	ldw	fp,0(sp)
 8002a7c:	dec00104 	addi	sp,sp,4
 8002a80:	f800283a 	ret

08002a84 <__divsi3>:
 8002a84:	20001a16 	blt	r4,zero,8002af0 <__divsi3+0x6c>
 8002a88:	000f883a 	mov	r7,zero
 8002a8c:	2800020e 	bge	r5,zero,8002a98 <__divsi3+0x14>
 8002a90:	014bc83a 	sub	r5,zero,r5
 8002a94:	39c0005c 	xori	r7,r7,1
 8002a98:	200d883a 	mov	r6,r4
 8002a9c:	00c00044 	movi	r3,1
 8002aa0:	2900092e 	bgeu	r5,r4,8002ac8 <__divsi3+0x44>
 8002aa4:	00800804 	movi	r2,32
 8002aa8:	00c00044 	movi	r3,1
 8002aac:	00000106 	br	8002ab4 <__divsi3+0x30>
 8002ab0:	10001226 	beq	r2,zero,8002afc <__divsi3+0x78>
 8002ab4:	294b883a 	add	r5,r5,r5
 8002ab8:	10bfffc4 	addi	r2,r2,-1
 8002abc:	18c7883a 	add	r3,r3,r3
 8002ac0:	293ffb36 	bltu	r5,r4,8002ab0 <__divsi3+0x2c>
 8002ac4:	18000d26 	beq	r3,zero,8002afc <__divsi3+0x78>
 8002ac8:	0005883a 	mov	r2,zero
 8002acc:	31400236 	bltu	r6,r5,8002ad8 <__divsi3+0x54>
 8002ad0:	314dc83a 	sub	r6,r6,r5
 8002ad4:	10c4b03a 	or	r2,r2,r3
 8002ad8:	1806d07a 	srli	r3,r3,1
 8002adc:	280ad07a 	srli	r5,r5,1
 8002ae0:	183ffa1e 	bne	r3,zero,8002acc <__divsi3+0x48>
 8002ae4:	38000126 	beq	r7,zero,8002aec <__divsi3+0x68>
 8002ae8:	0085c83a 	sub	r2,zero,r2
 8002aec:	f800283a 	ret
 8002af0:	0109c83a 	sub	r4,zero,r4
 8002af4:	01c00044 	movi	r7,1
 8002af8:	003fe406 	br	8002a8c <__divsi3+0x8>
 8002afc:	0005883a 	mov	r2,zero
 8002b00:	003ff806 	br	8002ae4 <__divsi3+0x60>

08002b04 <__modsi3>:
 8002b04:	20001a16 	blt	r4,zero,8002b70 <__modsi3+0x6c>
 8002b08:	000f883a 	mov	r7,zero
 8002b0c:	2005883a 	mov	r2,r4
 8002b10:	2800010e 	bge	r5,zero,8002b18 <__modsi3+0x14>
 8002b14:	014bc83a 	sub	r5,zero,r5
 8002b18:	00c00044 	movi	r3,1
 8002b1c:	2900092e 	bgeu	r5,r4,8002b44 <__modsi3+0x40>
 8002b20:	01800804 	movi	r6,32
 8002b24:	00c00044 	movi	r3,1
 8002b28:	00000106 	br	8002b30 <__modsi3+0x2c>
 8002b2c:	30000d26 	beq	r6,zero,8002b64 <__modsi3+0x60>
 8002b30:	294b883a 	add	r5,r5,r5
 8002b34:	31bfffc4 	addi	r6,r6,-1
 8002b38:	18c7883a 	add	r3,r3,r3
 8002b3c:	293ffb36 	bltu	r5,r4,8002b2c <__modsi3+0x28>
 8002b40:	18000826 	beq	r3,zero,8002b64 <__modsi3+0x60>
 8002b44:	1806d07a 	srli	r3,r3,1
 8002b48:	11400136 	bltu	r2,r5,8002b50 <__modsi3+0x4c>
 8002b4c:	1145c83a 	sub	r2,r2,r5
 8002b50:	280ad07a 	srli	r5,r5,1
 8002b54:	183ffb1e 	bne	r3,zero,8002b44 <__modsi3+0x40>
 8002b58:	38000126 	beq	r7,zero,8002b60 <__modsi3+0x5c>
 8002b5c:	0085c83a 	sub	r2,zero,r2
 8002b60:	f800283a 	ret
 8002b64:	2005883a 	mov	r2,r4
 8002b68:	383ffd26 	beq	r7,zero,8002b60 <__modsi3+0x5c>
 8002b6c:	003ffb06 	br	8002b5c <__modsi3+0x58>
 8002b70:	0109c83a 	sub	r4,zero,r4
 8002b74:	01c00044 	movi	r7,1
 8002b78:	003fe406 	br	8002b0c <__modsi3+0x8>

08002b7c <__udivsi3>:
 8002b7c:	200d883a 	mov	r6,r4
 8002b80:	2900152e 	bgeu	r5,r4,8002bd8 <__udivsi3+0x5c>
 8002b84:	28001416 	blt	r5,zero,8002bd8 <__udivsi3+0x5c>
 8002b88:	00800804 	movi	r2,32
 8002b8c:	00c00044 	movi	r3,1
 8002b90:	00000206 	br	8002b9c <__udivsi3+0x20>
 8002b94:	10000e26 	beq	r2,zero,8002bd0 <__udivsi3+0x54>
 8002b98:	28000516 	blt	r5,zero,8002bb0 <__udivsi3+0x34>
 8002b9c:	294b883a 	add	r5,r5,r5
 8002ba0:	10bfffc4 	addi	r2,r2,-1
 8002ba4:	18c7883a 	add	r3,r3,r3
 8002ba8:	293ffa36 	bltu	r5,r4,8002b94 <__udivsi3+0x18>
 8002bac:	18000826 	beq	r3,zero,8002bd0 <__udivsi3+0x54>
 8002bb0:	0005883a 	mov	r2,zero
 8002bb4:	31400236 	bltu	r6,r5,8002bc0 <__udivsi3+0x44>
 8002bb8:	314dc83a 	sub	r6,r6,r5
 8002bbc:	10c4b03a 	or	r2,r2,r3
 8002bc0:	1806d07a 	srli	r3,r3,1
 8002bc4:	280ad07a 	srli	r5,r5,1
 8002bc8:	183ffa1e 	bne	r3,zero,8002bb4 <__udivsi3+0x38>
 8002bcc:	f800283a 	ret
 8002bd0:	0005883a 	mov	r2,zero
 8002bd4:	f800283a 	ret
 8002bd8:	00c00044 	movi	r3,1
 8002bdc:	003ff406 	br	8002bb0 <__udivsi3+0x34>

08002be0 <__umodsi3>:
 8002be0:	2005883a 	mov	r2,r4
 8002be4:	2900132e 	bgeu	r5,r4,8002c34 <__umodsi3+0x54>
 8002be8:	28001216 	blt	r5,zero,8002c34 <__umodsi3+0x54>
 8002bec:	01800804 	movi	r6,32
 8002bf0:	00c00044 	movi	r3,1
 8002bf4:	00000206 	br	8002c00 <__umodsi3+0x20>
 8002bf8:	30000c26 	beq	r6,zero,8002c2c <__umodsi3+0x4c>
 8002bfc:	28000516 	blt	r5,zero,8002c14 <__umodsi3+0x34>
 8002c00:	294b883a 	add	r5,r5,r5
 8002c04:	31bfffc4 	addi	r6,r6,-1
 8002c08:	18c7883a 	add	r3,r3,r3
 8002c0c:	293ffa36 	bltu	r5,r4,8002bf8 <__umodsi3+0x18>
 8002c10:	18000626 	beq	r3,zero,8002c2c <__umodsi3+0x4c>
 8002c14:	1806d07a 	srli	r3,r3,1
 8002c18:	11400136 	bltu	r2,r5,8002c20 <__umodsi3+0x40>
 8002c1c:	1145c83a 	sub	r2,r2,r5
 8002c20:	280ad07a 	srli	r5,r5,1
 8002c24:	183ffb1e 	bne	r3,zero,8002c14 <__umodsi3+0x34>
 8002c28:	f800283a 	ret
 8002c2c:	2005883a 	mov	r2,r4
 8002c30:	f800283a 	ret
 8002c34:	00c00044 	movi	r3,1
 8002c38:	003ff606 	br	8002c14 <__umodsi3+0x34>

08002c3c <__mulsi3>:
 8002c3c:	0005883a 	mov	r2,zero
 8002c40:	20000726 	beq	r4,zero,8002c60 <__mulsi3+0x24>
 8002c44:	20c0004c 	andi	r3,r4,1
 8002c48:	2008d07a 	srli	r4,r4,1
 8002c4c:	18000126 	beq	r3,zero,8002c54 <__mulsi3+0x18>
 8002c50:	1145883a 	add	r2,r2,r5
 8002c54:	294b883a 	add	r5,r5,r5
 8002c58:	203ffa1e 	bne	r4,zero,8002c44 <__mulsi3+0x8>
 8002c5c:	f800283a 	ret
 8002c60:	f800283a 	ret

08002c64 <_printf_r>:
 8002c64:	defffd04 	addi	sp,sp,-12
 8002c68:	2805883a 	mov	r2,r5
 8002c6c:	dfc00015 	stw	ra,0(sp)
 8002c70:	d9800115 	stw	r6,4(sp)
 8002c74:	d9c00215 	stw	r7,8(sp)
 8002c78:	21400217 	ldw	r5,8(r4)
 8002c7c:	d9c00104 	addi	r7,sp,4
 8002c80:	100d883a 	mov	r6,r2
 8002c84:	8002e600 	call	8002e60 <___vfprintf_internal_r>
 8002c88:	dfc00017 	ldw	ra,0(sp)
 8002c8c:	dec00304 	addi	sp,sp,12
 8002c90:	f800283a 	ret

08002c94 <printf>:
 8002c94:	defffc04 	addi	sp,sp,-16
 8002c98:	dfc00015 	stw	ra,0(sp)
 8002c9c:	d9400115 	stw	r5,4(sp)
 8002ca0:	d9800215 	stw	r6,8(sp)
 8002ca4:	d9c00315 	stw	r7,12(sp)
 8002ca8:	00820074 	movhi	r2,2049
 8002cac:	10914117 	ldw	r2,17668(r2)
 8002cb0:	200b883a 	mov	r5,r4
 8002cb4:	d9800104 	addi	r6,sp,4
 8002cb8:	11000217 	ldw	r4,8(r2)
 8002cbc:	8004fe80 	call	8004fe8 <__vfprintf_internal>
 8002cc0:	dfc00017 	ldw	ra,0(sp)
 8002cc4:	dec00404 	addi	sp,sp,16
 8002cc8:	f800283a 	ret

08002ccc <_putchar_r>:
 8002ccc:	21800217 	ldw	r6,8(r4)
 8002cd0:	80099041 	jmpi	8009904 <_putc_r>

08002cd4 <putchar>:
 8002cd4:	00820074 	movhi	r2,2049
 8002cd8:	10914117 	ldw	r2,17668(r2)
 8002cdc:	200b883a 	mov	r5,r4
 8002ce0:	11800217 	ldw	r6,8(r2)
 8002ce4:	1009883a 	mov	r4,r2
 8002ce8:	80099041 	jmpi	8009904 <_putc_r>

08002cec <_puts_r>:
 8002cec:	defff504 	addi	sp,sp,-44
 8002cf0:	dc000815 	stw	r16,32(sp)
 8002cf4:	2021883a 	mov	r16,r4
 8002cf8:	2809883a 	mov	r4,r5
 8002cfc:	dc400915 	stw	r17,36(sp)
 8002d00:	dfc00a15 	stw	ra,40(sp)
 8002d04:	2823883a 	mov	r17,r5
 8002d08:	8002dc80 	call	8002dc8 <strlen>
 8002d0c:	11000044 	addi	r4,r2,1
 8002d10:	d8800515 	stw	r2,20(sp)
 8002d14:	00800044 	movi	r2,1
 8002d18:	00c20074 	movhi	r3,2049
 8002d1c:	d8800715 	stw	r2,28(sp)
 8002d20:	d8800404 	addi	r2,sp,16
 8002d24:	18c8e604 	addi	r3,r3,9112
 8002d28:	d8800115 	stw	r2,4(sp)
 8002d2c:	00800084 	movi	r2,2
 8002d30:	dc400415 	stw	r17,16(sp)
 8002d34:	d8c00615 	stw	r3,24(sp)
 8002d38:	d9000315 	stw	r4,12(sp)
 8002d3c:	d8800215 	stw	r2,8(sp)
 8002d40:	81400217 	ldw	r5,8(r16)
 8002d44:	80000226 	beq	r16,zero,8002d50 <_puts_r+0x64>
 8002d48:	80800e17 	ldw	r2,56(r16)
 8002d4c:	10001326 	beq	r2,zero,8002d9c <_puts_r+0xb0>
 8002d50:	2880030b 	ldhu	r2,12(r5)
 8002d54:	10c8000c 	andi	r3,r2,8192
 8002d58:	1800061e 	bne	r3,zero,8002d74 <_puts_r+0x88>
 8002d5c:	28c01917 	ldw	r3,100(r5)
 8002d60:	0137ffc4 	movi	r4,-8193
 8002d64:	10880014 	ori	r2,r2,8192
 8002d68:	1906703a 	and	r3,r3,r4
 8002d6c:	2880030d 	sth	r2,12(r5)
 8002d70:	28c01915 	stw	r3,100(r5)
 8002d74:	d9800104 	addi	r6,sp,4
 8002d78:	8009883a 	mov	r4,r16
 8002d7c:	80075380 	call	8007538 <__sfvwrite_r>
 8002d80:	10000b1e 	bne	r2,zero,8002db0 <_puts_r+0xc4>
 8002d84:	00800284 	movi	r2,10
 8002d88:	dfc00a17 	ldw	ra,40(sp)
 8002d8c:	dc400917 	ldw	r17,36(sp)
 8002d90:	dc000817 	ldw	r16,32(sp)
 8002d94:	dec00b04 	addi	sp,sp,44
 8002d98:	f800283a 	ret
 8002d9c:	8009883a 	mov	r4,r16
 8002da0:	d9400015 	stw	r5,0(sp)
 8002da4:	80070d80 	call	80070d8 <__sinit>
 8002da8:	d9400017 	ldw	r5,0(sp)
 8002dac:	003fe806 	br	8002d50 <_puts_r+0x64>
 8002db0:	00bfffc4 	movi	r2,-1
 8002db4:	003ff406 	br	8002d88 <_puts_r+0x9c>

08002db8 <puts>:
 8002db8:	00820074 	movhi	r2,2049
 8002dbc:	200b883a 	mov	r5,r4
 8002dc0:	11114117 	ldw	r4,17668(r2)
 8002dc4:	8002cec1 	jmpi	8002cec <_puts_r>

08002dc8 <strlen>:
 8002dc8:	208000cc 	andi	r2,r4,3
 8002dcc:	10002026 	beq	r2,zero,8002e50 <strlen+0x88>
 8002dd0:	20800007 	ldb	r2,0(r4)
 8002dd4:	10002026 	beq	r2,zero,8002e58 <strlen+0x90>
 8002dd8:	2005883a 	mov	r2,r4
 8002ddc:	00000206 	br	8002de8 <strlen+0x20>
 8002de0:	10c00007 	ldb	r3,0(r2)
 8002de4:	18001826 	beq	r3,zero,8002e48 <strlen+0x80>
 8002de8:	10800044 	addi	r2,r2,1
 8002dec:	10c000cc 	andi	r3,r2,3
 8002df0:	183ffb1e 	bne	r3,zero,8002de0 <strlen+0x18>
 8002df4:	11400017 	ldw	r5,0(r2)
 8002df8:	01ffbff4 	movhi	r7,65279
 8002dfc:	39ffbfc4 	addi	r7,r7,-257
 8002e00:	29c7883a 	add	r3,r5,r7
 8002e04:	01a02074 	movhi	r6,32897
 8002e08:	014a303a 	nor	r5,zero,r5
 8002e0c:	1946703a 	and	r3,r3,r5
 8002e10:	31a02004 	addi	r6,r6,-32640
 8002e14:	1986703a 	and	r3,r3,r6
 8002e18:	1800091e 	bne	r3,zero,8002e40 <strlen+0x78>
 8002e1c:	10800104 	addi	r2,r2,4
 8002e20:	11400017 	ldw	r5,0(r2)
 8002e24:	29c7883a 	add	r3,r5,r7
 8002e28:	014a303a 	nor	r5,zero,r5
 8002e2c:	1946703a 	and	r3,r3,r5
 8002e30:	1986703a 	and	r3,r3,r6
 8002e34:	183ff926 	beq	r3,zero,8002e1c <strlen+0x54>
 8002e38:	00000106 	br	8002e40 <strlen+0x78>
 8002e3c:	10800044 	addi	r2,r2,1
 8002e40:	10c00007 	ldb	r3,0(r2)
 8002e44:	183ffd1e 	bne	r3,zero,8002e3c <strlen+0x74>
 8002e48:	1105c83a 	sub	r2,r2,r4
 8002e4c:	f800283a 	ret
 8002e50:	2005883a 	mov	r2,r4
 8002e54:	003fe706 	br	8002df4 <strlen+0x2c>
 8002e58:	0005883a 	mov	r2,zero
 8002e5c:	f800283a 	ret

08002e60 <___vfprintf_internal_r>:
 8002e60:	deffbd04 	addi	sp,sp,-268
 8002e64:	dfc04215 	stw	ra,264(sp)
 8002e68:	dd003d15 	stw	r20,244(sp)
 8002e6c:	dcc03c15 	stw	r19,240(sp)
 8002e70:	dc003915 	stw	r16,228(sp)
 8002e74:	d9000515 	stw	r4,20(sp)
 8002e78:	2021883a 	mov	r16,r4
 8002e7c:	2827883a 	mov	r19,r5
 8002e80:	3029883a 	mov	r20,r6
 8002e84:	d9c00615 	stw	r7,24(sp)
 8002e88:	df004115 	stw	fp,260(sp)
 8002e8c:	ddc04015 	stw	r23,256(sp)
 8002e90:	dd803f15 	stw	r22,252(sp)
 8002e94:	dd403e15 	stw	r21,248(sp)
 8002e98:	dc803b15 	stw	r18,236(sp)
 8002e9c:	dc403a15 	stw	r17,232(sp)
 8002ea0:	8007b6c0 	call	8007b6c <_localeconv_r>
 8002ea4:	10800017 	ldw	r2,0(r2)
 8002ea8:	1009883a 	mov	r4,r2
 8002eac:	d8800d15 	stw	r2,52(sp)
 8002eb0:	8002dc80 	call	8002dc8 <strlen>
 8002eb4:	d8800b15 	stw	r2,44(sp)
 8002eb8:	80000226 	beq	r16,zero,8002ec4 <___vfprintf_internal_r+0x64>
 8002ebc:	80800e17 	ldw	r2,56(r16)
 8002ec0:	1002de26 	beq	r2,zero,8003a3c <___vfprintf_internal_r+0xbdc>
 8002ec4:	9880030b 	ldhu	r2,12(r19)
 8002ec8:	10c8000c 	andi	r3,r2,8192
 8002ecc:	1800061e 	bne	r3,zero,8002ee8 <___vfprintf_internal_r+0x88>
 8002ed0:	98c01917 	ldw	r3,100(r19)
 8002ed4:	0137ffc4 	movi	r4,-8193
 8002ed8:	10880014 	ori	r2,r2,8192
 8002edc:	1906703a 	and	r3,r3,r4
 8002ee0:	9880030d 	sth	r2,12(r19)
 8002ee4:	98c01915 	stw	r3,100(r19)
 8002ee8:	10c0020c 	andi	r3,r2,8
 8002eec:	18009a26 	beq	r3,zero,8003158 <___vfprintf_internal_r+0x2f8>
 8002ef0:	98c00417 	ldw	r3,16(r19)
 8002ef4:	18009826 	beq	r3,zero,8003158 <___vfprintf_internal_r+0x2f8>
 8002ef8:	1080068c 	andi	r2,r2,26
 8002efc:	10800298 	cmpnei	r2,r2,10
 8002f00:	10009d26 	beq	r2,zero,8003178 <___vfprintf_internal_r+0x318>
 8002f04:	ddc02904 	addi	r23,sp,164
 8002f08:	ddc01c15 	stw	r23,112(sp)
 8002f0c:	d8001e15 	stw	zero,120(sp)
 8002f10:	d8001d15 	stw	zero,116(sp)
 8002f14:	d8000815 	stw	zero,32(sp)
 8002f18:	d8000915 	stw	zero,36(sp)
 8002f1c:	d8000a15 	stw	zero,40(sp)
 8002f20:	b811883a 	mov	r8,r23
 8002f24:	d8000c15 	stw	zero,48(sp)
 8002f28:	d8001115 	stw	zero,68(sp)
 8002f2c:	d8000415 	stw	zero,16(sp)
 8002f30:	a02d883a 	mov	r22,r20
 8002f34:	b0800007 	ldb	r2,0(r22)
 8002f38:	1000a226 	beq	r2,zero,80031c4 <___vfprintf_internal_r+0x364>
 8002f3c:	10800960 	cmpeqi	r2,r2,37
 8002f40:	1005351e 	bne	r2,zero,8004418 <___vfprintf_internal_r+0x15b8>
 8002f44:	b021883a 	mov	r16,r22
 8002f48:	00000206 	br	8002f54 <___vfprintf_internal_r+0xf4>
 8002f4c:	18009326 	beq	r3,zero,800319c <___vfprintf_internal_r+0x33c>
 8002f50:	8821883a 	mov	r16,r17
 8002f54:	80800047 	ldb	r2,1(r16)
 8002f58:	84400044 	addi	r17,r16,1
 8002f5c:	10c00958 	cmpnei	r3,r2,37
 8002f60:	103ffa1e 	bne	r2,zero,8002f4c <___vfprintf_internal_r+0xec>
 8002f64:	8da5c83a 	sub	r18,r17,r22
 8002f68:	90009626 	beq	r18,zero,80031c4 <___vfprintf_internal_r+0x364>
 8002f6c:	d8c01e17 	ldw	r3,120(sp)
 8002f70:	d8801d17 	ldw	r2,116(sp)
 8002f74:	45800015 	stw	r22,0(r8)
 8002f78:	1c87883a 	add	r3,r3,r18
 8002f7c:	10800044 	addi	r2,r2,1
 8002f80:	d8801d15 	stw	r2,116(sp)
 8002f84:	44800115 	stw	r18,4(r8)
 8002f88:	d8c01e15 	stw	r3,120(sp)
 8002f8c:	10800208 	cmpgei	r2,r2,8
 8002f90:	1000851e 	bne	r2,zero,80031a8 <___vfprintf_internal_r+0x348>
 8002f94:	42000204 	addi	r8,r8,8
 8002f98:	d8c00417 	ldw	r3,16(sp)
 8002f9c:	80800047 	ldb	r2,1(r16)
 8002fa0:	1c87883a 	add	r3,r3,r18
 8002fa4:	d8c00415 	stw	r3,16(sp)
 8002fa8:	10008626 	beq	r2,zero,80031c4 <___vfprintf_internal_r+0x364>
 8002fac:	8a800047 	ldb	r10,1(r17)
 8002fb0:	8d800044 	addi	r22,r17,1
 8002fb4:	d8001545 	stb	zero,85(sp)
 8002fb8:	0009883a 	mov	r4,zero
 8002fbc:	000b883a 	mov	r5,zero
 8002fc0:	02ffffc4 	movi	r11,-1
 8002fc4:	0021883a 	mov	r16,zero
 8002fc8:	0019883a 	mov	r12,zero
 8002fcc:	b5800044 	addi	r22,r22,1
 8002fd0:	5039883a 	mov	fp,r10
 8002fd4:	e0bff804 	addi	r2,fp,-32
 8002fd8:	10c01668 	cmpgeui	r3,r2,89
 8002fdc:	18009d1e 	bne	r3,zero,8003254 <___vfprintf_internal_r+0x3f4>
 8002fe0:	100490ba 	slli	r2,r2,2
 8002fe4:	00c20034 	movhi	r3,2048
 8002fe8:	10c7883a 	add	r3,r2,r3
 8002fec:	188bfd17 	ldw	r2,12276(r3)
 8002ff0:	1000683a 	jmp	r2
 8002ff4:	0800332c 	andhi	zero,at,204
 8002ff8:	08003254 	ori	zero,at,201
 8002ffc:	08003254 	ori	zero,at,201
 8003000:	08003320 	cmpeqi	zero,at,204
 8003004:	08003254 	ori	zero,at,201
 8003008:	08003254 	ori	zero,at,201
 800300c:	08003254 	ori	zero,at,201
 8003010:	08003254 	ori	zero,at,201
 8003014:	08003254 	ori	zero,at,201
 8003018:	08003254 	ori	zero,at,201
 800301c:	080032f8 	rdprs	zero,at,203
 8003020:	080032e8 	cmpgeui	zero,at,203
 8003024:	08003254 	ori	zero,at,201
 8003028:	080032d0 	cmplti	zero,at,203
 800302c:	08003284 	addi	zero,at,202
 8003030:	08003254 	ori	zero,at,201
 8003034:	08003278 	rdprs	zero,at,201
 8003038:	0800321c 	xori	zero,at,200
 800303c:	0800321c 	xori	zero,at,200
 8003040:	0800321c 	xori	zero,at,200
 8003044:	0800321c 	xori	zero,at,200
 8003048:	0800321c 	xori	zero,at,200
 800304c:	0800321c 	xori	zero,at,200
 8003050:	0800321c 	xori	zero,at,200
 8003054:	0800321c 	xori	zero,at,200
 8003058:	0800321c 	xori	zero,at,200
 800305c:	08003254 	ori	zero,at,201
 8003060:	08003254 	ori	zero,at,201
 8003064:	08003254 	ori	zero,at,201
 8003068:	08003254 	ori	zero,at,201
 800306c:	08003254 	ori	zero,at,201
 8003070:	08003254 	ori	zero,at,201
 8003074:	08003254 	ori	zero,at,201
 8003078:	08003254 	ori	zero,at,201
 800307c:	08003254 	ori	zero,at,201
 8003080:	08003254 	ori	zero,at,201
 8003084:	08003840 	call	800384 <__alt_mem_onchip_memory2_0+0x800384>
 8003088:	08003760 	cmpeqi	zero,at,221
 800308c:	08003254 	ori	zero,at,201
 8003090:	08003760 	cmpeqi	zero,at,221
 8003094:	08003254 	ori	zero,at,201
 8003098:	08003254 	ori	zero,at,201
 800309c:	08003254 	ori	zero,at,201
 80030a0:	08003254 	ori	zero,at,201
 80030a4:	08003754 	ori	zero,at,221
 80030a8:	08003254 	ori	zero,at,201
 80030ac:	08003254 	ori	zero,at,201
 80030b0:	08003720 	cmpeqi	zero,at,220
 80030b4:	08003254 	ori	zero,at,201
 80030b8:	08003254 	ori	zero,at,201
 80030bc:	08003254 	ori	zero,at,201
 80030c0:	08003254 	ori	zero,at,201
 80030c4:	08003254 	ori	zero,at,201
 80030c8:	08003960 	cmpeqi	zero,at,229
 80030cc:	08003254 	ori	zero,at,201
 80030d0:	08003254 	ori	zero,at,201
 80030d4:	08003918 	cmpnei	zero,at,228
 80030d8:	08003254 	ori	zero,at,201
 80030dc:	08003254 	ori	zero,at,201
 80030e0:	08003254 	ori	zero,at,201
 80030e4:	08003254 	ori	zero,at,201
 80030e8:	08003254 	ori	zero,at,201
 80030ec:	08003254 	ori	zero,at,201
 80030f0:	08003254 	ori	zero,at,201
 80030f4:	08003254 	ori	zero,at,201
 80030f8:	08003254 	ori	zero,at,201
 80030fc:	08003254 	ori	zero,at,201
 8003100:	080034b0 	cmpltui	zero,at,210
 8003104:	0800343c 	xorhi	zero,at,208
 8003108:	08003760 	cmpeqi	zero,at,221
 800310c:	08003760 	cmpeqi	zero,at,221
 8003110:	08003760 	cmpeqi	zero,at,221
 8003114:	08003a30 	cmpltui	zero,at,232
 8003118:	0800343c 	xorhi	zero,at,208
 800311c:	08003254 	ori	zero,at,201
 8003120:	08003254 	ori	zero,at,201
 8003124:	08003a1c 	xori	zero,at,232
 8003128:	08003254 	ori	zero,at,201
 800312c:	080036e0 	cmpeqi	zero,at,219
 8003130:	080036a0 	cmpeqi	zero,at,218
 8003134:	080039a0 	cmpeqi	zero,at,230
 8003138:	08003994 	ori	zero,at,230
 800313c:	08003254 	ori	zero,at,201
 8003140:	080033e0 	cmpeqi	zero,at,207
 8003144:	08003254 	ori	zero,at,201
 8003148:	080033a0 	cmpeqi	zero,at,206
 800314c:	08003254 	ori	zero,at,201
 8003150:	08003254 	ori	zero,at,201
 8003154:	08003358 	cmpnei	zero,at,205
 8003158:	d9000517 	ldw	r4,20(sp)
 800315c:	980b883a 	mov	r5,r19
 8003160:	80050c00 	call	80050c0 <__swsetup_r>
 8003164:	1007561e 	bne	r2,zero,8004ec0 <___vfprintf_internal_r+0x2060>
 8003168:	9880030b 	ldhu	r2,12(r19)
 800316c:	1080068c 	andi	r2,r2,26
 8003170:	10800298 	cmpnei	r2,r2,10
 8003174:	103f631e 	bne	r2,zero,8002f04 <___vfprintf_internal_r+0xa4>
 8003178:	9880038f 	ldh	r2,14(r19)
 800317c:	103f6116 	blt	r2,zero,8002f04 <___vfprintf_internal_r+0xa4>
 8003180:	d9c00617 	ldw	r7,24(sp)
 8003184:	d9000517 	ldw	r4,20(sp)
 8003188:	a00d883a 	mov	r6,r20
 800318c:	980b883a 	mov	r5,r19
 8003190:	80050000 	call	8005000 <__sbprintf>
 8003194:	d8800415 	stw	r2,16(sp)
 8003198:	00001306 	br	80031e8 <___vfprintf_internal_r+0x388>
 800319c:	8da5c83a 	sub	r18,r17,r22
 80031a0:	903f8226 	beq	r18,zero,8002fac <___vfprintf_internal_r+0x14c>
 80031a4:	003f7106 	br	8002f6c <___vfprintf_internal_r+0x10c>
 80031a8:	d9000517 	ldw	r4,20(sp)
 80031ac:	d9801c04 	addi	r6,sp,112
 80031b0:	980b883a 	mov	r5,r19
 80031b4:	800a3680 	call	800a368 <__sprint_r>
 80031b8:	1000081e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80031bc:	b811883a 	mov	r8,r23
 80031c0:	003f7506 	br	8002f98 <___vfprintf_internal_r+0x138>
 80031c4:	d8801e17 	ldw	r2,120(sp)
 80031c8:	10000426 	beq	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80031cc:	d9000517 	ldw	r4,20(sp)
 80031d0:	d9801c04 	addi	r6,sp,112
 80031d4:	980b883a 	mov	r5,r19
 80031d8:	800a3680 	call	800a368 <__sprint_r>
 80031dc:	9880030b 	ldhu	r2,12(r19)
 80031e0:	1080100c 	andi	r2,r2,64
 80031e4:	1007361e 	bne	r2,zero,8004ec0 <___vfprintf_internal_r+0x2060>
 80031e8:	d8800417 	ldw	r2,16(sp)
 80031ec:	dfc04217 	ldw	ra,264(sp)
 80031f0:	df004117 	ldw	fp,260(sp)
 80031f4:	ddc04017 	ldw	r23,256(sp)
 80031f8:	dd803f17 	ldw	r22,252(sp)
 80031fc:	dd403e17 	ldw	r21,248(sp)
 8003200:	dd003d17 	ldw	r20,244(sp)
 8003204:	dcc03c17 	ldw	r19,240(sp)
 8003208:	dc803b17 	ldw	r18,236(sp)
 800320c:	dc403a17 	ldw	r17,232(sp)
 8003210:	dc003917 	ldw	r16,228(sp)
 8003214:	dec04304 	addi	sp,sp,268
 8003218:	f800283a 	ret
 800321c:	0021883a 	mov	r16,zero
 8003220:	e0fff404 	addi	r3,fp,-48
 8003224:	800490ba 	slli	r2,r16,2
 8003228:	b5800044 	addi	r22,r22,1
 800322c:	b73fffc7 	ldb	fp,-1(r22)
 8003230:	1421883a 	add	r16,r2,r16
 8003234:	8421883a 	add	r16,r16,r16
 8003238:	1c21883a 	add	r16,r3,r16
 800323c:	e0fff404 	addi	r3,fp,-48
 8003240:	188002b0 	cmpltui	r2,r3,10
 8003244:	103ff71e 	bne	r2,zero,8003224 <___vfprintf_internal_r+0x3c4>
 8003248:	e0bff804 	addi	r2,fp,-32
 800324c:	10c01668 	cmpgeui	r3,r2,89
 8003250:	183f6326 	beq	r3,zero,8002fe0 <___vfprintf_internal_r+0x180>
 8003254:	21003fcc 	andi	r4,r4,255
 8003258:	2006741e 	bne	r4,zero,8004c2c <___vfprintf_internal_r+0x1dcc>
 800325c:	e03fd926 	beq	fp,zero,80031c4 <___vfprintf_internal_r+0x364>
 8003260:	df001f05 	stb	fp,124(sp)
 8003264:	d8001545 	stb	zero,85(sp)
 8003268:	05400044 	movi	r21,1
 800326c:	05000044 	movi	r20,1
 8003270:	dc401f04 	addi	r17,sp,124
 8003274:	00009706 	br	80034d4 <___vfprintf_internal_r+0x674>
 8003278:	63002014 	ori	r12,r12,128
 800327c:	b2800007 	ldb	r10,0(r22)
 8003280:	003f5206 	br	8002fcc <___vfprintf_internal_r+0x16c>
 8003284:	b7000007 	ldb	fp,0(r22)
 8003288:	b0800044 	addi	r2,r22,1
 800328c:	e0c00aa0 	cmpeqi	r3,fp,42
 8003290:	1807491e 	bne	r3,zero,8004fb8 <___vfprintf_internal_r+0x2158>
 8003294:	e0fff404 	addi	r3,fp,-48
 8003298:	198002b0 	cmpltui	r6,r3,10
 800329c:	102d883a 	mov	r22,r2
 80032a0:	0017883a 	mov	r11,zero
 80032a4:	303f4b26 	beq	r6,zero,8002fd4 <___vfprintf_internal_r+0x174>
 80032a8:	580490ba 	slli	r2,r11,2
 80032ac:	b5800044 	addi	r22,r22,1
 80032b0:	b73fffc7 	ldb	fp,-1(r22)
 80032b4:	12d7883a 	add	r11,r2,r11
 80032b8:	5ad7883a 	add	r11,r11,r11
 80032bc:	58d7883a 	add	r11,r11,r3
 80032c0:	e0fff404 	addi	r3,fp,-48
 80032c4:	188002b0 	cmpltui	r2,r3,10
 80032c8:	103ff71e 	bne	r2,zero,80032a8 <___vfprintf_internal_r+0x448>
 80032cc:	003f4106 	br	8002fd4 <___vfprintf_internal_r+0x174>
 80032d0:	b7000003 	ldbu	fp,0(r22)
 80032d4:	e2803fcc 	andi	r10,fp,255
 80032d8:	5280201c 	xori	r10,r10,128
 80032dc:	63000114 	ori	r12,r12,4
 80032e0:	52bfe004 	addi	r10,r10,-128
 80032e4:	003f3906 	br	8002fcc <___vfprintf_internal_r+0x16c>
 80032e8:	01000044 	movi	r4,1
 80032ec:	01400ac4 	movi	r5,43
 80032f0:	b2800007 	ldb	r10,0(r22)
 80032f4:	003f3506 	br	8002fcc <___vfprintf_internal_r+0x16c>
 80032f8:	d8800617 	ldw	r2,24(sp)
 80032fc:	b7000003 	ldbu	fp,0(r22)
 8003300:	14000017 	ldw	r16,0(r2)
 8003304:	10800104 	addi	r2,r2,4
 8003308:	8004da16 	blt	r16,zero,8004674 <___vfprintf_internal_r+0x1814>
 800330c:	d8800615 	stw	r2,24(sp)
 8003310:	e2803fcc 	andi	r10,fp,255
 8003314:	5280201c 	xori	r10,r10,128
 8003318:	52bfe004 	addi	r10,r10,-128
 800331c:	003f2b06 	br	8002fcc <___vfprintf_internal_r+0x16c>
 8003320:	63000054 	ori	r12,r12,1
 8003324:	b2800007 	ldb	r10,0(r22)
 8003328:	003f2806 	br	8002fcc <___vfprintf_internal_r+0x16c>
 800332c:	28803fcc 	andi	r2,r5,255
 8003330:	1080201c 	xori	r2,r2,128
 8003334:	10bfe004 	addi	r2,r2,-128
 8003338:	b7000003 	ldbu	fp,0(r22)
 800333c:	103ff41e 	bne	r2,zero,8003310 <___vfprintf_internal_r+0x4b0>
 8003340:	e2803fcc 	andi	r10,fp,255
 8003344:	5280201c 	xori	r10,r10,128
 8003348:	01000044 	movi	r4,1
 800334c:	01400804 	movi	r5,32
 8003350:	52bfe004 	addi	r10,r10,-128
 8003354:	003f1d06 	br	8002fcc <___vfprintf_internal_r+0x16c>
 8003358:	21003fcc 	andi	r4,r4,255
 800335c:	2006b81e 	bne	r4,zero,8004e40 <___vfprintf_internal_r+0x1fe0>
 8003360:	00820074 	movhi	r2,2049
 8003364:	1088f004 	addi	r2,r2,9152
 8003368:	d8800c15 	stw	r2,48(sp)
 800336c:	6080080c 	andi	r2,r12,32
 8003370:	10017026 	beq	r2,zero,8003934 <___vfprintf_internal_r+0xad4>
 8003374:	d8800617 	ldw	r2,24(sp)
 8003378:	15400017 	ldw	r21,0(r2)
 800337c:	15000117 	ldw	r20,4(r2)
 8003380:	10800204 	addi	r2,r2,8
 8003384:	d8800615 	stw	r2,24(sp)
 8003388:	6080004c 	andi	r2,r12,1
 800338c:	10000226 	beq	r2,zero,8003398 <___vfprintf_internal_r+0x538>
 8003390:	ad04b03a 	or	r2,r21,r20
 8003394:	1004aa1e 	bne	r2,zero,8004640 <___vfprintf_internal_r+0x17e0>
 8003398:	00800084 	movi	r2,2
 800339c:	00018f06 	br	80039dc <___vfprintf_internal_r+0xb7c>
 80033a0:	21003fcc 	andi	r4,r4,255
 80033a4:	2006a41e 	bne	r4,zero,8004e38 <___vfprintf_internal_r+0x1fd8>
 80033a8:	6080080c 	andi	r2,r12,32
 80033ac:	1001b41e 	bne	r2,zero,8003a80 <___vfprintf_internal_r+0xc20>
 80033b0:	d8800617 	ldw	r2,24(sp)
 80033b4:	60c0040c 	andi	r3,r12,16
 80033b8:	15400017 	ldw	r21,0(r2)
 80033bc:	10800104 	addi	r2,r2,4
 80033c0:	18016e1e 	bne	r3,zero,800397c <___vfprintf_internal_r+0xb1c>
 80033c4:	60c0100c 	andi	r3,r12,64
 80033c8:	1805a526 	beq	r3,zero,8004a60 <___vfprintf_internal_r+0x1c00>
 80033cc:	d8800615 	stw	r2,24(sp)
 80033d0:	ad7fffcc 	andi	r21,r21,65535
 80033d4:	0029883a 	mov	r20,zero
 80033d8:	00800044 	movi	r2,1
 80033dc:	00017f06 	br	80039dc <___vfprintf_internal_r+0xb7c>
 80033e0:	d8800617 	ldw	r2,24(sp)
 80033e4:	d8001545 	stb	zero,85(sp)
 80033e8:	14400017 	ldw	r17,0(r2)
 80033ec:	14800104 	addi	r18,r2,4
 80033f0:	8804ca26 	beq	r17,zero,800471c <___vfprintf_internal_r+0x18bc>
 80033f4:	da000e15 	stw	r8,56(sp)
 80033f8:	db000715 	stw	r12,28(sp)
 80033fc:	58bfffe0 	cmpeqi	r2,r11,-1
 8003400:	10056c1e 	bne	r2,zero,80049b4 <___vfprintf_internal_r+0x1b54>
 8003404:	580d883a 	mov	r6,r11
 8003408:	000b883a 	mov	r5,zero
 800340c:	8809883a 	mov	r4,r17
 8003410:	dac00615 	stw	r11,24(sp)
 8003414:	800854c0 	call	800854c <memchr>
 8003418:	dac00617 	ldw	r11,24(sp)
 800341c:	db000717 	ldw	r12,28(sp)
 8003420:	da000e17 	ldw	r8,56(sp)
 8003424:	10066c26 	beq	r2,zero,8004dd8 <___vfprintf_internal_r+0x1f78>
 8003428:	1469c83a 	sub	r20,r2,r17
 800342c:	a02b883a 	mov	r21,r20
 8003430:	a005fc16 	blt	r20,zero,8004c24 <___vfprintf_internal_r+0x1dc4>
 8003434:	dc800615 	stw	r18,24(sp)
 8003438:	00002606 	br	80034d4 <___vfprintf_internal_r+0x674>
 800343c:	21003fcc 	andi	r4,r4,255
 8003440:	20067b1e 	bne	r4,zero,8004e30 <___vfprintf_internal_r+0x1fd0>
 8003444:	6080080c 	andi	r2,r12,32
 8003448:	10017f1e 	bne	r2,zero,8003a48 <___vfprintf_internal_r+0xbe8>
 800344c:	d8800617 	ldw	r2,24(sp)
 8003450:	60c0040c 	andi	r3,r12,16
 8003454:	10800104 	addi	r2,r2,4
 8003458:	1801001e 	bne	r3,zero,800385c <___vfprintf_internal_r+0x9fc>
 800345c:	60c0100c 	andi	r3,r12,64
 8003460:	1800fe26 	beq	r3,zero,800385c <___vfprintf_internal_r+0x9fc>
 8003464:	d8c00617 	ldw	r3,24(sp)
 8003468:	d8800615 	stw	r2,24(sp)
 800346c:	1d40000f 	ldh	r21,0(r3)
 8003470:	a829d7fa 	srai	r20,r21,31
 8003474:	a005883a 	mov	r2,r20
 8003478:	1000fe16 	blt	r2,zero,8003874 <___vfprintf_internal_r+0xa14>
 800347c:	58bfffd8 	cmpnei	r2,r11,-1
 8003480:	db401543 	ldbu	r13,85(sp)
 8003484:	10018526 	beq	r2,zero,8003a9c <___vfprintf_internal_r+0xc3c>
 8003488:	00ffdfc4 	movi	r3,-129
 800348c:	ad04b03a 	or	r2,r21,r20
 8003490:	60d8703a 	and	r12,r12,r3
 8003494:	1001811e 	bne	r2,zero,8003a9c <___vfprintf_internal_r+0xc3c>
 8003498:	5801831e 	bne	r11,zero,8003aa8 <___vfprintf_internal_r+0xc48>
 800349c:	6025883a 	mov	r18,r12
 80034a0:	0017883a 	mov	r11,zero
 80034a4:	0029883a 	mov	r20,zero
 80034a8:	b823883a 	mov	r17,r23
 80034ac:	00018306 	br	8003abc <___vfprintf_internal_r+0xc5c>
 80034b0:	d8c00617 	ldw	r3,24(sp)
 80034b4:	d8001545 	stb	zero,85(sp)
 80034b8:	05400044 	movi	r21,1
 80034bc:	18800017 	ldw	r2,0(r3)
 80034c0:	18c00104 	addi	r3,r3,4
 80034c4:	d8c00615 	stw	r3,24(sp)
 80034c8:	d8801f05 	stb	r2,124(sp)
 80034cc:	05000044 	movi	r20,1
 80034d0:	dc401f04 	addi	r17,sp,124
 80034d4:	6025883a 	mov	r18,r12
 80034d8:	0017883a 	mov	r11,zero
 80034dc:	d8000715 	stw	zero,28(sp)
 80034e0:	9380008c 	andi	r14,r18,2
 80034e4:	70000126 	beq	r14,zero,80034ec <___vfprintf_internal_r+0x68c>
 80034e8:	ad400084 	addi	r21,r21,2
 80034ec:	9340210c 	andi	r13,r18,132
 80034f0:	d8c01e17 	ldw	r3,120(sp)
 80034f4:	6800021e 	bne	r13,zero,8003500 <___vfprintf_internal_r+0x6a0>
 80034f8:	854fc83a 	sub	r7,r16,r21
 80034fc:	01c2ce16 	blt	zero,r7,8004038 <___vfprintf_internal_r+0x11d8>
 8003500:	d8801547 	ldb	r2,85(sp)
 8003504:	10000c26 	beq	r2,zero,8003538 <___vfprintf_internal_r+0x6d8>
 8003508:	d8801d17 	ldw	r2,116(sp)
 800350c:	d9001544 	addi	r4,sp,85
 8003510:	18c00044 	addi	r3,r3,1
 8003514:	10800044 	addi	r2,r2,1
 8003518:	41000015 	stw	r4,0(r8)
 800351c:	01000044 	movi	r4,1
 8003520:	d8801d15 	stw	r2,116(sp)
 8003524:	41000115 	stw	r4,4(r8)
 8003528:	d8c01e15 	stw	r3,120(sp)
 800352c:	10800208 	cmpgei	r2,r2,8
 8003530:	1002fb1e 	bne	r2,zero,8004120 <___vfprintf_internal_r+0x12c0>
 8003534:	42000204 	addi	r8,r8,8
 8003538:	70000c26 	beq	r14,zero,800356c <___vfprintf_internal_r+0x70c>
 800353c:	d8801d17 	ldw	r2,116(sp)
 8003540:	d9001584 	addi	r4,sp,86
 8003544:	18c00084 	addi	r3,r3,2
 8003548:	10800044 	addi	r2,r2,1
 800354c:	41000015 	stw	r4,0(r8)
 8003550:	01000084 	movi	r4,2
 8003554:	d8801d15 	stw	r2,116(sp)
 8003558:	41000115 	stw	r4,4(r8)
 800355c:	d8c01e15 	stw	r3,120(sp)
 8003560:	10800208 	cmpgei	r2,r2,8
 8003564:	1002fc1e 	bne	r2,zero,8004158 <___vfprintf_internal_r+0x12f8>
 8003568:	42000204 	addi	r8,r8,8
 800356c:	6b402018 	cmpnei	r13,r13,128
 8003570:	6801cf26 	beq	r13,zero,8003cb0 <___vfprintf_internal_r+0xe50>
 8003574:	5d0fc83a 	sub	r7,r11,r20
 8003578:	01c20616 	blt	zero,r7,8003d94 <___vfprintf_internal_r+0xf34>
 800357c:	9080400c 	andi	r2,r18,256
 8003580:	10017c1e 	bne	r2,zero,8003b74 <___vfprintf_internal_r+0xd14>
 8003584:	d8801d17 	ldw	r2,116(sp)
 8003588:	1d07883a 	add	r3,r3,r20
 800358c:	44400015 	stw	r17,0(r8)
 8003590:	10800044 	addi	r2,r2,1
 8003594:	d8801d15 	stw	r2,116(sp)
 8003598:	45000115 	stw	r20,4(r8)
 800359c:	d8c01e15 	stw	r3,120(sp)
 80035a0:	10800208 	cmpgei	r2,r2,8
 80035a4:	1002571e 	bne	r2,zero,8003f04 <___vfprintf_internal_r+0x10a4>
 80035a8:	42000204 	addi	r8,r8,8
 80035ac:	9480010c 	andi	r18,r18,4
 80035b0:	90000226 	beq	r18,zero,80035bc <___vfprintf_internal_r+0x75c>
 80035b4:	8563c83a 	sub	r17,r16,r21
 80035b8:	04400916 	blt	zero,r17,80035e0 <___vfprintf_internal_r+0x780>
 80035bc:	8540010e 	bge	r16,r21,80035c4 <___vfprintf_internal_r+0x764>
 80035c0:	a821883a 	mov	r16,r21
 80035c4:	d8800417 	ldw	r2,16(sp)
 80035c8:	1405883a 	add	r2,r2,r16
 80035cc:	d8800415 	stw	r2,16(sp)
 80035d0:	1802241e 	bne	r3,zero,8003e64 <___vfprintf_internal_r+0x1004>
 80035d4:	d8001d15 	stw	zero,116(sp)
 80035d8:	b811883a 	mov	r8,r23
 80035dc:	003e5506 	br	8002f34 <___vfprintf_internal_r+0xd4>
 80035e0:	03020074 	movhi	r12,2049
 80035e4:	89000450 	cmplti	r4,r17,17
 80035e8:	6308fb84 	addi	r12,r12,9198
 80035ec:	d8801d17 	ldw	r2,116(sp)
 80035f0:	20001c1e 	bne	r4,zero,8003664 <___vfprintf_internal_r+0x804>
 80035f4:	04800404 	movi	r18,16
 80035f8:	dd000517 	ldw	r20,20(sp)
 80035fc:	6039883a 	mov	fp,r12
 8003600:	00000406 	br	8003614 <___vfprintf_internal_r+0x7b4>
 8003604:	8c7ffc04 	addi	r17,r17,-16
 8003608:	89000448 	cmpgei	r4,r17,17
 800360c:	42000204 	addi	r8,r8,8
 8003610:	20001326 	beq	r4,zero,8003660 <___vfprintf_internal_r+0x800>
 8003614:	10800044 	addi	r2,r2,1
 8003618:	18c00404 	addi	r3,r3,16
 800361c:	47000015 	stw	fp,0(r8)
 8003620:	44800115 	stw	r18,4(r8)
 8003624:	d8c01e15 	stw	r3,120(sp)
 8003628:	d8801d15 	stw	r2,116(sp)
 800362c:	11000208 	cmpgei	r4,r2,8
 8003630:	203ff426 	beq	r4,zero,8003604 <___vfprintf_internal_r+0x7a4>
 8003634:	d9801c04 	addi	r6,sp,112
 8003638:	980b883a 	mov	r5,r19
 800363c:	a009883a 	mov	r4,r20
 8003640:	800a3680 	call	800a368 <__sprint_r>
 8003644:	103ee51e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8003648:	8c7ffc04 	addi	r17,r17,-16
 800364c:	89000448 	cmpgei	r4,r17,17
 8003650:	d8c01e17 	ldw	r3,120(sp)
 8003654:	d8801d17 	ldw	r2,116(sp)
 8003658:	b811883a 	mov	r8,r23
 800365c:	203fed1e 	bne	r4,zero,8003614 <___vfprintf_internal_r+0x7b4>
 8003660:	e019883a 	mov	r12,fp
 8003664:	10800044 	addi	r2,r2,1
 8003668:	1c47883a 	add	r3,r3,r17
 800366c:	d8801d15 	stw	r2,116(sp)
 8003670:	43000015 	stw	r12,0(r8)
 8003674:	44400115 	stw	r17,4(r8)
 8003678:	d8c01e15 	stw	r3,120(sp)
 800367c:	10800210 	cmplti	r2,r2,8
 8003680:	103fce1e 	bne	r2,zero,80035bc <___vfprintf_internal_r+0x75c>
 8003684:	d9000517 	ldw	r4,20(sp)
 8003688:	d9801c04 	addi	r6,sp,112
 800368c:	980b883a 	mov	r5,r19
 8003690:	800a3680 	call	800a368 <__sprint_r>
 8003694:	103ed11e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8003698:	d8c01e17 	ldw	r3,120(sp)
 800369c:	003fc706 	br	80035bc <___vfprintf_internal_r+0x75c>
 80036a0:	21003fcc 	andi	r4,r4,255
 80036a4:	2005de1e 	bne	r4,zero,8004e20 <___vfprintf_internal_r+0x1fc0>
 80036a8:	6080080c 	andi	r2,r12,32
 80036ac:	1000ed1e 	bne	r2,zero,8003a64 <___vfprintf_internal_r+0xc04>
 80036b0:	d8800617 	ldw	r2,24(sp)
 80036b4:	60c0040c 	andi	r3,r12,16
 80036b8:	15400017 	ldw	r21,0(r2)
 80036bc:	10800104 	addi	r2,r2,4
 80036c0:	18001e1e 	bne	r3,zero,800373c <___vfprintf_internal_r+0x8dc>
 80036c4:	60c0100c 	andi	r3,r12,64
 80036c8:	1804e126 	beq	r3,zero,8004a50 <___vfprintf_internal_r+0x1bf0>
 80036cc:	d8800615 	stw	r2,24(sp)
 80036d0:	ad7fffcc 	andi	r21,r21,65535
 80036d4:	0029883a 	mov	r20,zero
 80036d8:	0005883a 	mov	r2,zero
 80036dc:	0000bf06 	br	80039dc <___vfprintf_internal_r+0xb7c>
 80036e0:	21003fcc 	andi	r4,r4,255
 80036e4:	2005d01e 	bne	r4,zero,8004e28 <___vfprintf_internal_r+0x1fc8>
 80036e8:	d9000617 	ldw	r4,24(sp)
 80036ec:	6080080c 	andi	r2,r12,32
 80036f0:	20c00104 	addi	r3,r4,4
 80036f4:	1003d81e 	bne	r2,zero,8004658 <___vfprintf_internal_r+0x17f8>
 80036f8:	6080040c 	andi	r2,r12,16
 80036fc:	1004321e 	bne	r2,zero,80047c8 <___vfprintf_internal_r+0x1968>
 8003700:	6300100c 	andi	r12,r12,64
 8003704:	60043026 	beq	r12,zero,80047c8 <___vfprintf_internal_r+0x1968>
 8003708:	d8800617 	ldw	r2,24(sp)
 800370c:	d8c00615 	stw	r3,24(sp)
 8003710:	d8c00417 	ldw	r3,16(sp)
 8003714:	10800017 	ldw	r2,0(r2)
 8003718:	10c0000d 	sth	r3,0(r2)
 800371c:	003e0506 	br	8002f34 <___vfprintf_internal_r+0xd4>
 8003720:	21003fcc 	andi	r4,r4,255
 8003724:	2005c81e 	bne	r4,zero,8004e48 <___vfprintf_internal_r+0x1fe8>
 8003728:	6080080c 	andi	r2,r12,32
 800372c:	63000414 	ori	r12,r12,16
 8003730:	1000cc1e 	bne	r2,zero,8003a64 <___vfprintf_internal_r+0xc04>
 8003734:	d8800617 	ldw	r2,24(sp)
 8003738:	10800104 	addi	r2,r2,4
 800373c:	d8c00617 	ldw	r3,24(sp)
 8003740:	0029883a 	mov	r20,zero
 8003744:	d8800615 	stw	r2,24(sp)
 8003748:	1d400017 	ldw	r21,0(r3)
 800374c:	0005883a 	mov	r2,zero
 8003750:	0000a206 	br	80039dc <___vfprintf_internal_r+0xb7c>
 8003754:	63000214 	ori	r12,r12,8
 8003758:	b2800007 	ldb	r10,0(r22)
 800375c:	003e1b06 	br	8002fcc <___vfprintf_internal_r+0x16c>
 8003760:	21003fcc 	andi	r4,r4,255
 8003764:	2005bc1e 	bne	r4,zero,8004e58 <___vfprintf_internal_r+0x1ff8>
 8003768:	d8c00617 	ldw	r3,24(sp)
 800376c:	00a00034 	movhi	r2,32768
 8003770:	10bfffc4 	addi	r2,r2,-1
 8003774:	1d000117 	ldw	r20,4(r3)
 8003778:	1c800017 	ldw	r18,0(r3)
 800377c:	01dffc34 	movhi	r7,32752
 8003780:	a0a2703a 	and	r17,r20,r2
 8003784:	01bfffc4 	movi	r6,-1
 8003788:	18800204 	addi	r2,r3,8
 800378c:	39ffffc4 	addi	r7,r7,-1
 8003790:	9009883a 	mov	r4,r18
 8003794:	880b883a 	mov	r5,r17
 8003798:	da000f15 	stw	r8,60(sp)
 800379c:	dac00e15 	stw	r11,56(sp)
 80037a0:	db000715 	stw	r12,28(sp)
 80037a4:	dd000a15 	stw	r20,40(sp)
 80037a8:	dc800915 	stw	r18,36(sp)
 80037ac:	d8800615 	stw	r2,24(sp)
 80037b0:	800f4680 	call	800f468 <__unorddf2>
 80037b4:	db000717 	ldw	r12,28(sp)
 80037b8:	dac00e17 	ldw	r11,56(sp)
 80037bc:	da000f17 	ldw	r8,60(sp)
 80037c0:	1003191e 	bne	r2,zero,8004428 <___vfprintf_internal_r+0x15c8>
 80037c4:	01dffc34 	movhi	r7,32752
 80037c8:	01bfffc4 	movi	r6,-1
 80037cc:	39ffffc4 	addi	r7,r7,-1
 80037d0:	9009883a 	mov	r4,r18
 80037d4:	880b883a 	mov	r5,r17
 80037d8:	800e22c0 	call	800e22c <__ledf2>
 80037dc:	db000717 	ldw	r12,28(sp)
 80037e0:	dac00e17 	ldw	r11,56(sp)
 80037e4:	da000f17 	ldw	r8,60(sp)
 80037e8:	00830f0e 	bge	zero,r2,8004428 <___vfprintf_internal_r+0x15c8>
 80037ec:	000d883a 	mov	r6,zero
 80037f0:	000f883a 	mov	r7,zero
 80037f4:	9009883a 	mov	r4,r18
 80037f8:	a00b883a 	mov	r5,r20
 80037fc:	da000e15 	stw	r8,56(sp)
 8003800:	800e22c0 	call	800e22c <__ledf2>
 8003804:	db000717 	ldw	r12,28(sp)
 8003808:	da000e17 	ldw	r8,56(sp)
 800380c:	1004e716 	blt	r2,zero,8004bac <___vfprintf_internal_r+0x1d4c>
 8003810:	db401543 	ldbu	r13,85(sp)
 8003814:	e0801210 	cmplti	r2,fp,72
 8003818:	1004d11e 	bne	r2,zero,8004b60 <___vfprintf_internal_r+0x1d00>
 800381c:	04420074 	movhi	r17,2049
 8003820:	8c48e804 	addi	r17,r17,9120
 8003824:	04bfdfc4 	movi	r18,-129
 8003828:	64a4703a 	and	r18,r12,r18
 800382c:	054000c4 	movi	r21,3
 8003830:	050000c4 	movi	r20,3
 8003834:	0017883a 	mov	r11,zero
 8003838:	d8000715 	stw	zero,28(sp)
 800383c:	0000a306 	br	8003acc <___vfprintf_internal_r+0xc6c>
 8003840:	21003fcc 	andi	r4,r4,255
 8003844:	2005821e 	bne	r4,zero,8004e50 <___vfprintf_internal_r+0x1ff0>
 8003848:	6080080c 	andi	r2,r12,32
 800384c:	63000414 	ori	r12,r12,16
 8003850:	10007d1e 	bne	r2,zero,8003a48 <___vfprintf_internal_r+0xbe8>
 8003854:	d8800617 	ldw	r2,24(sp)
 8003858:	10800104 	addi	r2,r2,4
 800385c:	d8c00617 	ldw	r3,24(sp)
 8003860:	1d400017 	ldw	r21,0(r3)
 8003864:	d8800615 	stw	r2,24(sp)
 8003868:	a829d7fa 	srai	r20,r21,31
 800386c:	a005883a 	mov	r2,r20
 8003870:	103f020e 	bge	r2,zero,800347c <___vfprintf_internal_r+0x61c>
 8003874:	056bc83a 	sub	r21,zero,r21
 8003878:	a804c03a 	cmpne	r2,r21,zero
 800387c:	0529c83a 	sub	r20,zero,r20
 8003880:	a0a9c83a 	sub	r20,r20,r2
 8003884:	00800b44 	movi	r2,45
 8003888:	d8801545 	stb	r2,85(sp)
 800388c:	58ffffe0 	cmpeqi	r3,r11,-1
 8003890:	03400b44 	movi	r13,45
 8003894:	00800044 	movi	r2,1
 8003898:	18005426 	beq	r3,zero,80039ec <___vfprintf_internal_r+0xb8c>
 800389c:	10c00060 	cmpeqi	r3,r2,1
 80038a0:	18007e1e 	bne	r3,zero,8003a9c <___vfprintf_internal_r+0xc3c>
 80038a4:	108000a0 	cmpeqi	r2,r2,2
 80038a8:	1002371e 	bne	r2,zero,8004188 <___vfprintf_internal_r+0x1328>
 80038ac:	b807883a 	mov	r3,r23
 80038b0:	00000106 	br	80038b8 <___vfprintf_internal_r+0xa58>
 80038b4:	8807883a 	mov	r3,r17
 80038b8:	a808d0fa 	srli	r4,r21,3
 80038bc:	a00a977a 	slli	r5,r20,29
 80038c0:	a028d0fa 	srli	r20,r20,3
 80038c4:	ad4001cc 	andi	r21,r21,7
 80038c8:	a8800c04 	addi	r2,r21,48
 80038cc:	292ab03a 	or	r21,r5,r4
 80038d0:	18bfffc5 	stb	r2,-1(r3)
 80038d4:	ad08b03a 	or	r4,r21,r20
 80038d8:	1c7fffc4 	addi	r17,r3,-1
 80038dc:	203ff51e 	bne	r4,zero,80038b4 <___vfprintf_internal_r+0xa54>
 80038e0:	6100004c 	andi	r4,r12,1
 80038e4:	2000a026 	beq	r4,zero,8003b68 <___vfprintf_internal_r+0xd08>
 80038e8:	10803fcc 	andi	r2,r2,255
 80038ec:	1080201c 	xori	r2,r2,128
 80038f0:	10bfe004 	addi	r2,r2,-128
 80038f4:	10800c18 	cmpnei	r2,r2,48
 80038f8:	10009b26 	beq	r2,zero,8003b68 <___vfprintf_internal_r+0xd08>
 80038fc:	18ffff84 	addi	r3,r3,-2
 8003900:	00800c04 	movi	r2,48
 8003904:	88bfffc5 	stb	r2,-1(r17)
 8003908:	b8e9c83a 	sub	r20,r23,r3
 800390c:	6025883a 	mov	r18,r12
 8003910:	1823883a 	mov	r17,r3
 8003914:	00006906 	br	8003abc <___vfprintf_internal_r+0xc5c>
 8003918:	21003fcc 	andi	r4,r4,255
 800391c:	20053e1e 	bne	r4,zero,8004e18 <___vfprintf_internal_r+0x1fb8>
 8003920:	00820074 	movhi	r2,2049
 8003924:	1088eb04 	addi	r2,r2,9132
 8003928:	d8800c15 	stw	r2,48(sp)
 800392c:	6080080c 	andi	r2,r12,32
 8003930:	103e901e 	bne	r2,zero,8003374 <___vfprintf_internal_r+0x514>
 8003934:	d8c00617 	ldw	r3,24(sp)
 8003938:	6080040c 	andi	r2,r12,16
 800393c:	1d400017 	ldw	r21,0(r3)
 8003940:	18c00104 	addi	r3,r3,4
 8003944:	d8c00615 	stw	r3,24(sp)
 8003948:	1002b11e 	bne	r2,zero,8004410 <___vfprintf_internal_r+0x15b0>
 800394c:	6080100c 	andi	r2,r12,64
 8003950:	1002af26 	beq	r2,zero,8004410 <___vfprintf_internal_r+0x15b0>
 8003954:	ad7fffcc 	andi	r21,r21,65535
 8003958:	0029883a 	mov	r20,zero
 800395c:	003e8a06 	br	8003388 <___vfprintf_internal_r+0x528>
 8003960:	21003fcc 	andi	r4,r4,255
 8003964:	20053e1e 	bne	r4,zero,8004e60 <___vfprintf_internal_r+0x2000>
 8003968:	6080080c 	andi	r2,r12,32
 800396c:	63000414 	ori	r12,r12,16
 8003970:	1000431e 	bne	r2,zero,8003a80 <___vfprintf_internal_r+0xc20>
 8003974:	d8800617 	ldw	r2,24(sp)
 8003978:	10800104 	addi	r2,r2,4
 800397c:	d8c00617 	ldw	r3,24(sp)
 8003980:	0029883a 	mov	r20,zero
 8003984:	d8800615 	stw	r2,24(sp)
 8003988:	1d400017 	ldw	r21,0(r3)
 800398c:	00800044 	movi	r2,1
 8003990:	00001206 	br	80039dc <___vfprintf_internal_r+0xb7c>
 8003994:	63000814 	ori	r12,r12,32
 8003998:	b2800007 	ldb	r10,0(r22)
 800399c:	003d8b06 	br	8002fcc <___vfprintf_internal_r+0x16c>
 80039a0:	d8c00617 	ldw	r3,24(sp)
 80039a4:	00800c04 	movi	r2,48
 80039a8:	d8801585 	stb	r2,86(sp)
 80039ac:	00801e04 	movi	r2,120
 80039b0:	01020074 	movhi	r4,2049
 80039b4:	d88015c5 	stb	r2,87(sp)
 80039b8:	1d400017 	ldw	r21,0(r3)
 80039bc:	18800104 	addi	r2,r3,4
 80039c0:	d8800615 	stw	r2,24(sp)
 80039c4:	2088f004 	addi	r2,r4,9152
 80039c8:	d8800c15 	stw	r2,48(sp)
 80039cc:	0029883a 	mov	r20,zero
 80039d0:	63000094 	ori	r12,r12,2
 80039d4:	00800084 	movi	r2,2
 80039d8:	07001e04 	movi	fp,120
 80039dc:	d8001545 	stb	zero,85(sp)
 80039e0:	58ffffe0 	cmpeqi	r3,r11,-1
 80039e4:	001b883a 	mov	r13,zero
 80039e8:	183fac1e 	bne	r3,zero,800389c <___vfprintf_internal_r+0xa3c>
 80039ec:	04bfdfc4 	movi	r18,-129
 80039f0:	ad06b03a 	or	r3,r21,r20
 80039f4:	64a4703a 	and	r18,r12,r18
 80039f8:	18018d1e 	bne	r3,zero,8004030 <___vfprintf_internal_r+0x11d0>
 80039fc:	5803bb1e 	bne	r11,zero,80048ec <___vfprintf_internal_r+0x1a8c>
 8003a00:	103ea71e 	bne	r2,zero,80034a0 <___vfprintf_internal_r+0x640>
 8003a04:	6500004c 	andi	r20,r12,1
 8003a08:	a0028526 	beq	r20,zero,8004420 <___vfprintf_internal_r+0x15c0>
 8003a0c:	00800c04 	movi	r2,48
 8003a10:	d88028c5 	stb	r2,163(sp)
 8003a14:	dc4028c4 	addi	r17,sp,163
 8003a18:	00002806 	br	8003abc <___vfprintf_internal_r+0xc5c>
 8003a1c:	b2800007 	ldb	r10,0(r22)
 8003a20:	50801b18 	cmpnei	r2,r10,108
 8003a24:	10032c26 	beq	r2,zero,80046d8 <___vfprintf_internal_r+0x1878>
 8003a28:	63000414 	ori	r12,r12,16
 8003a2c:	003d6706 	br	8002fcc <___vfprintf_internal_r+0x16c>
 8003a30:	63001014 	ori	r12,r12,64
 8003a34:	b2800007 	ldb	r10,0(r22)
 8003a38:	003d6406 	br	8002fcc <___vfprintf_internal_r+0x16c>
 8003a3c:	d9000517 	ldw	r4,20(sp)
 8003a40:	80070d80 	call	80070d8 <__sinit>
 8003a44:	003d1f06 	br	8002ec4 <___vfprintf_internal_r+0x64>
 8003a48:	d8c00617 	ldw	r3,24(sp)
 8003a4c:	18800117 	ldw	r2,4(r3)
 8003a50:	1d400017 	ldw	r21,0(r3)
 8003a54:	18c00204 	addi	r3,r3,8
 8003a58:	d8c00615 	stw	r3,24(sp)
 8003a5c:	1029883a 	mov	r20,r2
 8003a60:	003e8506 	br	8003478 <___vfprintf_internal_r+0x618>
 8003a64:	d8c00617 	ldw	r3,24(sp)
 8003a68:	0005883a 	mov	r2,zero
 8003a6c:	1d400017 	ldw	r21,0(r3)
 8003a70:	1d000117 	ldw	r20,4(r3)
 8003a74:	18c00204 	addi	r3,r3,8
 8003a78:	d8c00615 	stw	r3,24(sp)
 8003a7c:	003fd706 	br	80039dc <___vfprintf_internal_r+0xb7c>
 8003a80:	d8c00617 	ldw	r3,24(sp)
 8003a84:	00800044 	movi	r2,1
 8003a88:	1d400017 	ldw	r21,0(r3)
 8003a8c:	1d000117 	ldw	r20,4(r3)
 8003a90:	18c00204 	addi	r3,r3,8
 8003a94:	d8c00615 	stw	r3,24(sp)
 8003a98:	003fd006 	br	80039dc <___vfprintf_internal_r+0xb7c>
 8003a9c:	a000111e 	bne	r20,zero,8003ae4 <___vfprintf_internal_r+0xc84>
 8003aa0:	a88002a8 	cmpgeui	r2,r21,10
 8003aa4:	10000f1e 	bne	r2,zero,8003ae4 <___vfprintf_internal_r+0xc84>
 8003aa8:	ad400c04 	addi	r21,r21,48
 8003aac:	dd4028c5 	stb	r21,163(sp)
 8003ab0:	6025883a 	mov	r18,r12
 8003ab4:	05000044 	movi	r20,1
 8003ab8:	dc4028c4 	addi	r17,sp,163
 8003abc:	582b883a 	mov	r21,r11
 8003ac0:	5d00010e 	bge	r11,r20,8003ac8 <___vfprintf_internal_r+0xc68>
 8003ac4:	a02b883a 	mov	r21,r20
 8003ac8:	d8000715 	stw	zero,28(sp)
 8003acc:	6b403fcc 	andi	r13,r13,255
 8003ad0:	6b40201c 	xori	r13,r13,128
 8003ad4:	6b7fe004 	addi	r13,r13,-128
 8003ad8:	683e8126 	beq	r13,zero,80034e0 <___vfprintf_internal_r+0x680>
 8003adc:	ad400044 	addi	r21,r21,1
 8003ae0:	003e7f06 	br	80034e0 <___vfprintf_internal_r+0x680>
 8003ae4:	dc000e15 	stw	r16,56(sp)
 8003ae8:	b823883a 	mov	r17,r23
 8003aec:	a021883a 	mov	r16,r20
 8003af0:	db000715 	stw	r12,28(sp)
 8003af4:	9829883a 	mov	r20,r19
 8003af8:	dac00f15 	stw	r11,60(sp)
 8003afc:	4025883a 	mov	r18,r8
 8003b00:	6827883a 	mov	r19,r13
 8003b04:	00000206 	br	8003b10 <___vfprintf_internal_r+0xcb0>
 8003b08:	102b883a 	mov	r21,r2
 8003b0c:	1821883a 	mov	r16,r3
 8003b10:	a809883a 	mov	r4,r21
 8003b14:	800b883a 	mov	r5,r16
 8003b18:	01800284 	movi	r6,10
 8003b1c:	000f883a 	mov	r7,zero
 8003b20:	800c7f00 	call	800c7f0 <__umoddi3>
 8003b24:	10800c04 	addi	r2,r2,48
 8003b28:	8c7fffc4 	addi	r17,r17,-1
 8003b2c:	a809883a 	mov	r4,r21
 8003b30:	800b883a 	mov	r5,r16
 8003b34:	88800005 	stb	r2,0(r17)
 8003b38:	01800284 	movi	r6,10
 8003b3c:	000f883a 	mov	r7,zero
 8003b40:	800c1d40 	call	800c1d4 <__udivdi3>
 8003b44:	803ff01e 	bne	r16,zero,8003b08 <___vfprintf_internal_r+0xca8>
 8003b48:	ad4002a8 	cmpgeui	r21,r21,10
 8003b4c:	a83fee1e 	bne	r21,zero,8003b08 <___vfprintf_internal_r+0xca8>
 8003b50:	db000717 	ldw	r12,28(sp)
 8003b54:	dc000e17 	ldw	r16,56(sp)
 8003b58:	dac00f17 	ldw	r11,60(sp)
 8003b5c:	981b883a 	mov	r13,r19
 8003b60:	9011883a 	mov	r8,r18
 8003b64:	a027883a 	mov	r19,r20
 8003b68:	bc69c83a 	sub	r20,r23,r17
 8003b6c:	6025883a 	mov	r18,r12
 8003b70:	003fd206 	br	8003abc <___vfprintf_internal_r+0xc5c>
 8003b74:	e2801990 	cmplti	r10,fp,102
 8003b78:	5000ea1e 	bne	r10,zero,8003f24 <___vfprintf_internal_r+0x10c4>
 8003b7c:	d9000917 	ldw	r4,36(sp)
 8003b80:	d9400a17 	ldw	r5,40(sp)
 8003b84:	000d883a 	mov	r6,zero
 8003b88:	000f883a 	mov	r7,zero
 8003b8c:	da000f15 	stw	r8,60(sp)
 8003b90:	d8c00e15 	stw	r3,56(sp)
 8003b94:	800e0bc0 	call	800e0bc <__eqdf2>
 8003b98:	d8c00e17 	ldw	r3,56(sp)
 8003b9c:	da000f17 	ldw	r8,60(sp)
 8003ba0:	1001891e 	bne	r2,zero,80041c8 <___vfprintf_internal_r+0x1368>
 8003ba4:	d8801d17 	ldw	r2,116(sp)
 8003ba8:	01020074 	movhi	r4,2049
 8003bac:	2108f704 	addi	r4,r4,9180
 8003bb0:	10800044 	addi	r2,r2,1
 8003bb4:	18c00044 	addi	r3,r3,1
 8003bb8:	41000015 	stw	r4,0(r8)
 8003bbc:	01000044 	movi	r4,1
 8003bc0:	d8801d15 	stw	r2,116(sp)
 8003bc4:	41000115 	stw	r4,4(r8)
 8003bc8:	d8c01e15 	stw	r3,120(sp)
 8003bcc:	10800208 	cmpgei	r2,r2,8
 8003bd0:	1003351e 	bne	r2,zero,80048a8 <___vfprintf_internal_r+0x1a48>
 8003bd4:	42000204 	addi	r8,r8,8
 8003bd8:	d8801617 	ldw	r2,88(sp)
 8003bdc:	d8c00817 	ldw	r3,32(sp)
 8003be0:	10c00416 	blt	r2,r3,8003bf4 <___vfprintf_internal_r+0xd94>
 8003be4:	9080004c 	andi	r2,r18,1
 8003be8:	1000021e 	bne	r2,zero,8003bf4 <___vfprintf_internal_r+0xd94>
 8003bec:	d8c01e17 	ldw	r3,120(sp)
 8003bf0:	003e6e06 	br	80035ac <___vfprintf_internal_r+0x74c>
 8003bf4:	d8800d17 	ldw	r2,52(sp)
 8003bf8:	d8c01e17 	ldw	r3,120(sp)
 8003bfc:	d9000b17 	ldw	r4,44(sp)
 8003c00:	40800015 	stw	r2,0(r8)
 8003c04:	d8801d17 	ldw	r2,116(sp)
 8003c08:	20c7883a 	add	r3,r4,r3
 8003c0c:	41000115 	stw	r4,4(r8)
 8003c10:	10800044 	addi	r2,r2,1
 8003c14:	d8801d15 	stw	r2,116(sp)
 8003c18:	d8c01e15 	stw	r3,120(sp)
 8003c1c:	10800208 	cmpgei	r2,r2,8
 8003c20:	1002b41e 	bne	r2,zero,80046f4 <___vfprintf_internal_r+0x1894>
 8003c24:	42000204 	addi	r8,r8,8
 8003c28:	d8800817 	ldw	r2,32(sp)
 8003c2c:	147fffc4 	addi	r17,r2,-1
 8003c30:	047e5e0e 	bge	zero,r17,80035ac <___vfprintf_internal_r+0x74c>
 8003c34:	03020074 	movhi	r12,2049
 8003c38:	89000450 	cmplti	r4,r17,17
 8003c3c:	6308f784 	addi	r12,r12,9182
 8003c40:	d8801d17 	ldw	r2,116(sp)
 8003c44:	2003791e 	bne	r4,zero,8004a2c <___vfprintf_internal_r+0x1bcc>
 8003c48:	dc000715 	stw	r16,28(sp)
 8003c4c:	05000404 	movi	r20,16
 8003c50:	df000517 	ldw	fp,20(sp)
 8003c54:	6021883a 	mov	r16,r12
 8003c58:	00000406 	br	8003c6c <___vfprintf_internal_r+0xe0c>
 8003c5c:	42000204 	addi	r8,r8,8
 8003c60:	8c7ffc04 	addi	r17,r17,-16
 8003c64:	89000448 	cmpgei	r4,r17,17
 8003c68:	20036e26 	beq	r4,zero,8004a24 <___vfprintf_internal_r+0x1bc4>
 8003c6c:	10800044 	addi	r2,r2,1
 8003c70:	18c00404 	addi	r3,r3,16
 8003c74:	44000015 	stw	r16,0(r8)
 8003c78:	45000115 	stw	r20,4(r8)
 8003c7c:	d8c01e15 	stw	r3,120(sp)
 8003c80:	d8801d15 	stw	r2,116(sp)
 8003c84:	11000208 	cmpgei	r4,r2,8
 8003c88:	203ff426 	beq	r4,zero,8003c5c <___vfprintf_internal_r+0xdfc>
 8003c8c:	d9801c04 	addi	r6,sp,112
 8003c90:	980b883a 	mov	r5,r19
 8003c94:	e009883a 	mov	r4,fp
 8003c98:	800a3680 	call	800a368 <__sprint_r>
 8003c9c:	103d4f1e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8003ca0:	d8c01e17 	ldw	r3,120(sp)
 8003ca4:	d8801d17 	ldw	r2,116(sp)
 8003ca8:	b811883a 	mov	r8,r23
 8003cac:	003fec06 	br	8003c60 <___vfprintf_internal_r+0xe00>
 8003cb0:	854fc83a 	sub	r7,r16,r21
 8003cb4:	01fe2f0e 	bge	zero,r7,8003574 <___vfprintf_internal_r+0x714>
 8003cb8:	03020074 	movhi	r12,2049
 8003cbc:	39000450 	cmplti	r4,r7,17
 8003cc0:	6308f784 	addi	r12,r12,9182
 8003cc4:	d8801d17 	ldw	r2,116(sp)
 8003cc8:	2000271e 	bne	r4,zero,8003d68 <___vfprintf_internal_r+0xf08>
 8003ccc:	dc400e15 	stw	r17,56(sp)
 8003cd0:	dc800f15 	stw	r18,60(sp)
 8003cd4:	dc001015 	stw	r16,64(sp)
 8003cd8:	03400404 	movi	r13,16
 8003cdc:	3821883a 	mov	r16,r7
 8003ce0:	dac01215 	stw	r11,72(sp)
 8003ce4:	dc400517 	ldw	r17,20(sp)
 8003ce8:	6025883a 	mov	r18,r12
 8003cec:	00000406 	br	8003d00 <___vfprintf_internal_r+0xea0>
 8003cf0:	843ffc04 	addi	r16,r16,-16
 8003cf4:	81000448 	cmpgei	r4,r16,17
 8003cf8:	42000204 	addi	r8,r8,8
 8003cfc:	20001426 	beq	r4,zero,8003d50 <___vfprintf_internal_r+0xef0>
 8003d00:	10800044 	addi	r2,r2,1
 8003d04:	18c00404 	addi	r3,r3,16
 8003d08:	44800015 	stw	r18,0(r8)
 8003d0c:	43400115 	stw	r13,4(r8)
 8003d10:	d8c01e15 	stw	r3,120(sp)
 8003d14:	d8801d15 	stw	r2,116(sp)
 8003d18:	11000208 	cmpgei	r4,r2,8
 8003d1c:	203ff426 	beq	r4,zero,8003cf0 <___vfprintf_internal_r+0xe90>
 8003d20:	d9801c04 	addi	r6,sp,112
 8003d24:	980b883a 	mov	r5,r19
 8003d28:	8809883a 	mov	r4,r17
 8003d2c:	800a3680 	call	800a368 <__sprint_r>
 8003d30:	103d2a1e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8003d34:	843ffc04 	addi	r16,r16,-16
 8003d38:	81000448 	cmpgei	r4,r16,17
 8003d3c:	d8c01e17 	ldw	r3,120(sp)
 8003d40:	d8801d17 	ldw	r2,116(sp)
 8003d44:	b811883a 	mov	r8,r23
 8003d48:	03400404 	movi	r13,16
 8003d4c:	203fec1e 	bne	r4,zero,8003d00 <___vfprintf_internal_r+0xea0>
 8003d50:	800f883a 	mov	r7,r16
 8003d54:	9019883a 	mov	r12,r18
 8003d58:	dc400e17 	ldw	r17,56(sp)
 8003d5c:	dc001017 	ldw	r16,64(sp)
 8003d60:	dac01217 	ldw	r11,72(sp)
 8003d64:	dc800f17 	ldw	r18,60(sp)
 8003d68:	10800044 	addi	r2,r2,1
 8003d6c:	19c7883a 	add	r3,r3,r7
 8003d70:	d8801d15 	stw	r2,116(sp)
 8003d74:	43000015 	stw	r12,0(r8)
 8003d78:	41c00115 	stw	r7,4(r8)
 8003d7c:	d8c01e15 	stw	r3,120(sp)
 8003d80:	10800208 	cmpgei	r2,r2,8
 8003d84:	1002cf1e 	bne	r2,zero,80048c4 <___vfprintf_internal_r+0x1a64>
 8003d88:	5d0fc83a 	sub	r7,r11,r20
 8003d8c:	42000204 	addi	r8,r8,8
 8003d90:	01fdfa0e 	bge	zero,r7,800357c <___vfprintf_internal_r+0x71c>
 8003d94:	03020074 	movhi	r12,2049
 8003d98:	39000450 	cmplti	r4,r7,17
 8003d9c:	6308f784 	addi	r12,r12,9182
 8003da0:	d8801d17 	ldw	r2,116(sp)
 8003da4:	2000251e 	bne	r4,zero,8003e3c <___vfprintf_internal_r+0xfdc>
 8003da8:	dc400e15 	stw	r17,56(sp)
 8003dac:	dc800f15 	stw	r18,60(sp)
 8003db0:	dc001015 	stw	r16,64(sp)
 8003db4:	02c00404 	movi	r11,16
 8003db8:	3821883a 	mov	r16,r7
 8003dbc:	dc400517 	ldw	r17,20(sp)
 8003dc0:	6025883a 	mov	r18,r12
 8003dc4:	00000406 	br	8003dd8 <___vfprintf_internal_r+0xf78>
 8003dc8:	843ffc04 	addi	r16,r16,-16
 8003dcc:	81000448 	cmpgei	r4,r16,17
 8003dd0:	42000204 	addi	r8,r8,8
 8003dd4:	20001426 	beq	r4,zero,8003e28 <___vfprintf_internal_r+0xfc8>
 8003dd8:	10800044 	addi	r2,r2,1
 8003ddc:	18c00404 	addi	r3,r3,16
 8003de0:	44800015 	stw	r18,0(r8)
 8003de4:	42c00115 	stw	r11,4(r8)
 8003de8:	d8c01e15 	stw	r3,120(sp)
 8003dec:	d8801d15 	stw	r2,116(sp)
 8003df0:	11000208 	cmpgei	r4,r2,8
 8003df4:	203ff426 	beq	r4,zero,8003dc8 <___vfprintf_internal_r+0xf68>
 8003df8:	d9801c04 	addi	r6,sp,112
 8003dfc:	980b883a 	mov	r5,r19
 8003e00:	8809883a 	mov	r4,r17
 8003e04:	800a3680 	call	800a368 <__sprint_r>
 8003e08:	103cf41e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8003e0c:	843ffc04 	addi	r16,r16,-16
 8003e10:	81000448 	cmpgei	r4,r16,17
 8003e14:	d8c01e17 	ldw	r3,120(sp)
 8003e18:	d8801d17 	ldw	r2,116(sp)
 8003e1c:	b811883a 	mov	r8,r23
 8003e20:	02c00404 	movi	r11,16
 8003e24:	203fec1e 	bne	r4,zero,8003dd8 <___vfprintf_internal_r+0xf78>
 8003e28:	800f883a 	mov	r7,r16
 8003e2c:	9019883a 	mov	r12,r18
 8003e30:	dc400e17 	ldw	r17,56(sp)
 8003e34:	dc001017 	ldw	r16,64(sp)
 8003e38:	dc800f17 	ldw	r18,60(sp)
 8003e3c:	10800044 	addi	r2,r2,1
 8003e40:	19c7883a 	add	r3,r3,r7
 8003e44:	d8801d15 	stw	r2,116(sp)
 8003e48:	43000015 	stw	r12,0(r8)
 8003e4c:	41c00115 	stw	r7,4(r8)
 8003e50:	d8c01e15 	stw	r3,120(sp)
 8003e54:	10800208 	cmpgei	r2,r2,8
 8003e58:	1001651e 	bne	r2,zero,80043f0 <___vfprintf_internal_r+0x1590>
 8003e5c:	42000204 	addi	r8,r8,8
 8003e60:	003dc606 	br	800357c <___vfprintf_internal_r+0x71c>
 8003e64:	d9000517 	ldw	r4,20(sp)
 8003e68:	d9801c04 	addi	r6,sp,112
 8003e6c:	980b883a 	mov	r5,r19
 8003e70:	800a3680 	call	800a368 <__sprint_r>
 8003e74:	103dd726 	beq	r2,zero,80035d4 <___vfprintf_internal_r+0x774>
 8003e78:	003cd806 	br	80031dc <___vfprintf_internal_r+0x37c>
 8003e7c:	d9000517 	ldw	r4,20(sp)
 8003e80:	d9801c04 	addi	r6,sp,112
 8003e84:	980b883a 	mov	r5,r19
 8003e88:	800a3680 	call	800a368 <__sprint_r>
 8003e8c:	103cd31e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8003e90:	d9001617 	ldw	r4,88(sp)
 8003e94:	d8c01e17 	ldw	r3,120(sp)
 8003e98:	b811883a 	mov	r8,r23
 8003e9c:	2002971e 	bne	r4,zero,80048fc <___vfprintf_internal_r+0x1a9c>
 8003ea0:	d9000817 	ldw	r4,32(sp)
 8003ea4:	9080004c 	andi	r2,r18,1
 8003ea8:	1104b03a 	or	r2,r2,r4
 8003eac:	103dbf26 	beq	r2,zero,80035ac <___vfprintf_internal_r+0x74c>
 8003eb0:	d8800d17 	ldw	r2,52(sp)
 8003eb4:	d9000b17 	ldw	r4,44(sp)
 8003eb8:	40800015 	stw	r2,0(r8)
 8003ebc:	d8801d17 	ldw	r2,116(sp)
 8003ec0:	20c7883a 	add	r3,r4,r3
 8003ec4:	41000115 	stw	r4,4(r8)
 8003ec8:	10800044 	addi	r2,r2,1
 8003ecc:	d8c01e15 	stw	r3,120(sp)
 8003ed0:	d8801d15 	stw	r2,116(sp)
 8003ed4:	11000208 	cmpgei	r4,r2,8
 8003ed8:	2003691e 	bne	r4,zero,8004c80 <___vfprintf_internal_r+0x1e20>
 8003edc:	42000204 	addi	r8,r8,8
 8003ee0:	d9000817 	ldw	r4,32(sp)
 8003ee4:	10800044 	addi	r2,r2,1
 8003ee8:	d8801d15 	stw	r2,116(sp)
 8003eec:	20c7883a 	add	r3,r4,r3
 8003ef0:	44400015 	stw	r17,0(r8)
 8003ef4:	41000115 	stw	r4,4(r8)
 8003ef8:	d8c01e15 	stw	r3,120(sp)
 8003efc:	10800208 	cmpgei	r2,r2,8
 8003f00:	103da926 	beq	r2,zero,80035a8 <___vfprintf_internal_r+0x748>
 8003f04:	d9000517 	ldw	r4,20(sp)
 8003f08:	d9801c04 	addi	r6,sp,112
 8003f0c:	980b883a 	mov	r5,r19
 8003f10:	800a3680 	call	800a368 <__sprint_r>
 8003f14:	103cb11e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8003f18:	d8c01e17 	ldw	r3,120(sp)
 8003f1c:	b811883a 	mov	r8,r23
 8003f20:	003da206 	br	80035ac <___vfprintf_internal_r+0x74c>
 8003f24:	d8800817 	ldw	r2,32(sp)
 8003f28:	da801d17 	ldw	r10,116(sp)
 8003f2c:	18c00044 	addi	r3,r3,1
 8003f30:	10800088 	cmpgei	r2,r2,2
 8003f34:	55000044 	addi	r20,r10,1
 8003f38:	47000204 	addi	fp,r8,8
 8003f3c:	1000fb26 	beq	r2,zero,800432c <___vfprintf_internal_r+0x14cc>
 8003f40:	00800044 	movi	r2,1
 8003f44:	40800115 	stw	r2,4(r8)
 8003f48:	44400015 	stw	r17,0(r8)
 8003f4c:	d8c01e15 	stw	r3,120(sp)
 8003f50:	dd001d15 	stw	r20,116(sp)
 8003f54:	a0800210 	cmplti	r2,r20,8
 8003f58:	10022e26 	beq	r2,zero,8004814 <___vfprintf_internal_r+0x19b4>
 8003f5c:	d8800b17 	ldw	r2,44(sp)
 8003f60:	d9000d17 	ldw	r4,52(sp)
 8003f64:	a5000044 	addi	r20,r20,1
 8003f68:	1887883a 	add	r3,r3,r2
 8003f6c:	e0800115 	stw	r2,4(fp)
 8003f70:	e1000015 	stw	r4,0(fp)
 8003f74:	d8c01e15 	stw	r3,120(sp)
 8003f78:	dd001d15 	stw	r20,116(sp)
 8003f7c:	a0800208 	cmpgei	r2,r20,8
 8003f80:	10021b1e 	bne	r2,zero,80047f0 <___vfprintf_internal_r+0x1990>
 8003f84:	e7000204 	addi	fp,fp,8
 8003f88:	d8800817 	ldw	r2,32(sp)
 8003f8c:	d9000917 	ldw	r4,36(sp)
 8003f90:	d9400a17 	ldw	r5,40(sp)
 8003f94:	a2800044 	addi	r10,r20,1
 8003f98:	e2000204 	addi	r8,fp,8
 8003f9c:	12ffffc4 	addi	r11,r2,-1
 8003fa0:	000d883a 	mov	r6,zero
 8003fa4:	000f883a 	mov	r7,zero
 8003fa8:	d8c01215 	stw	r3,72(sp)
 8003fac:	da801015 	stw	r10,64(sp)
 8003fb0:	da800f15 	stw	r10,60(sp)
 8003fb4:	da000e15 	stw	r8,56(sp)
 8003fb8:	dac00715 	stw	r11,28(sp)
 8003fbc:	800e0bc0 	call	800e0bc <__eqdf2>
 8003fc0:	dac00717 	ldw	r11,28(sp)
 8003fc4:	da000e17 	ldw	r8,56(sp)
 8003fc8:	db400f17 	ldw	r13,60(sp)
 8003fcc:	da801017 	ldw	r10,64(sp)
 8003fd0:	d8c01217 	ldw	r3,72(sp)
 8003fd4:	1000e126 	beq	r2,zero,800435c <___vfprintf_internal_r+0x14fc>
 8003fd8:	8c400044 	addi	r17,r17,1
 8003fdc:	1ac7883a 	add	r3,r3,r11
 8003fe0:	da801d15 	stw	r10,116(sp)
 8003fe4:	e4400015 	stw	r17,0(fp)
 8003fe8:	e2c00115 	stw	r11,4(fp)
 8003fec:	d8c01e15 	stw	r3,120(sp)
 8003ff0:	52800208 	cmpgei	r10,r10,8
 8003ff4:	5001ad1e 	bne	r10,zero,80046ac <___vfprintf_internal_r+0x184c>
 8003ff8:	e0800404 	addi	r2,fp,16
 8003ffc:	a2800084 	addi	r10,r20,2
 8004000:	4039883a 	mov	fp,r8
 8004004:	1011883a 	mov	r8,r2
 8004008:	d9001117 	ldw	r4,68(sp)
 800400c:	d8801844 	addi	r2,sp,97
 8004010:	da801d15 	stw	r10,116(sp)
 8004014:	20c7883a 	add	r3,r4,r3
 8004018:	e0800015 	stw	r2,0(fp)
 800401c:	e1000115 	stw	r4,4(fp)
 8004020:	d8c01e15 	stw	r3,120(sp)
 8004024:	52800210 	cmplti	r10,r10,8
 8004028:	503d601e 	bne	r10,zero,80035ac <___vfprintf_internal_r+0x74c>
 800402c:	003fb506 	br	8003f04 <___vfprintf_internal_r+0x10a4>
 8004030:	9019883a 	mov	r12,r18
 8004034:	003e1906 	br	800389c <___vfprintf_internal_r+0xa3c>
 8004038:	03020074 	movhi	r12,2049
 800403c:	39000450 	cmplti	r4,r7,17
 8004040:	6308fb84 	addi	r12,r12,9198
 8004044:	d8801d17 	ldw	r2,116(sp)
 8004048:	20002b1e 	bne	r4,zero,80040f8 <___vfprintf_internal_r+0x1298>
 800404c:	dc401015 	stw	r17,64(sp)
 8004050:	dc801215 	stw	r18,72(sp)
 8004054:	dc001315 	stw	r16,76(sp)
 8004058:	03c00404 	movi	r15,16
 800405c:	db800e15 	stw	r14,56(sp)
 8004060:	db400f15 	stw	r13,60(sp)
 8004064:	dac01415 	stw	r11,80(sp)
 8004068:	3821883a 	mov	r16,r7
 800406c:	dc400517 	ldw	r17,20(sp)
 8004070:	6025883a 	mov	r18,r12
 8004074:	00000406 	br	8004088 <___vfprintf_internal_r+0x1228>
 8004078:	843ffc04 	addi	r16,r16,-16
 800407c:	81000448 	cmpgei	r4,r16,17
 8004080:	42000204 	addi	r8,r8,8
 8004084:	20001426 	beq	r4,zero,80040d8 <___vfprintf_internal_r+0x1278>
 8004088:	10800044 	addi	r2,r2,1
 800408c:	18c00404 	addi	r3,r3,16
 8004090:	44800015 	stw	r18,0(r8)
 8004094:	43c00115 	stw	r15,4(r8)
 8004098:	d8c01e15 	stw	r3,120(sp)
 800409c:	d8801d15 	stw	r2,116(sp)
 80040a0:	11000208 	cmpgei	r4,r2,8
 80040a4:	203ff426 	beq	r4,zero,8004078 <___vfprintf_internal_r+0x1218>
 80040a8:	d9801c04 	addi	r6,sp,112
 80040ac:	980b883a 	mov	r5,r19
 80040b0:	8809883a 	mov	r4,r17
 80040b4:	800a3680 	call	800a368 <__sprint_r>
 80040b8:	103c481e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80040bc:	843ffc04 	addi	r16,r16,-16
 80040c0:	81000448 	cmpgei	r4,r16,17
 80040c4:	d8c01e17 	ldw	r3,120(sp)
 80040c8:	d8801d17 	ldw	r2,116(sp)
 80040cc:	b811883a 	mov	r8,r23
 80040d0:	03c00404 	movi	r15,16
 80040d4:	203fec1e 	bne	r4,zero,8004088 <___vfprintf_internal_r+0x1228>
 80040d8:	800f883a 	mov	r7,r16
 80040dc:	9019883a 	mov	r12,r18
 80040e0:	db800e17 	ldw	r14,56(sp)
 80040e4:	db400f17 	ldw	r13,60(sp)
 80040e8:	dc401017 	ldw	r17,64(sp)
 80040ec:	dac01417 	ldw	r11,80(sp)
 80040f0:	dc001317 	ldw	r16,76(sp)
 80040f4:	dc801217 	ldw	r18,72(sp)
 80040f8:	10800044 	addi	r2,r2,1
 80040fc:	19c7883a 	add	r3,r3,r7
 8004100:	d8801d15 	stw	r2,116(sp)
 8004104:	43000015 	stw	r12,0(r8)
 8004108:	41c00115 	stw	r7,4(r8)
 800410c:	d8c01e15 	stw	r3,120(sp)
 8004110:	10800208 	cmpgei	r2,r2,8
 8004114:	1001d61e 	bne	r2,zero,8004870 <___vfprintf_internal_r+0x1a10>
 8004118:	42000204 	addi	r8,r8,8
 800411c:	003cf806 	br	8003500 <___vfprintf_internal_r+0x6a0>
 8004120:	d9000517 	ldw	r4,20(sp)
 8004124:	d9801c04 	addi	r6,sp,112
 8004128:	980b883a 	mov	r5,r19
 800412c:	dac01015 	stw	r11,64(sp)
 8004130:	db400f15 	stw	r13,60(sp)
 8004134:	db800e15 	stw	r14,56(sp)
 8004138:	800a3680 	call	800a368 <__sprint_r>
 800413c:	103c271e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004140:	d8c01e17 	ldw	r3,120(sp)
 8004144:	b811883a 	mov	r8,r23
 8004148:	dac01017 	ldw	r11,64(sp)
 800414c:	db400f17 	ldw	r13,60(sp)
 8004150:	db800e17 	ldw	r14,56(sp)
 8004154:	003cf806 	br	8003538 <___vfprintf_internal_r+0x6d8>
 8004158:	d9000517 	ldw	r4,20(sp)
 800415c:	d9801c04 	addi	r6,sp,112
 8004160:	980b883a 	mov	r5,r19
 8004164:	dac00f15 	stw	r11,60(sp)
 8004168:	db400e15 	stw	r13,56(sp)
 800416c:	800a3680 	call	800a368 <__sprint_r>
 8004170:	103c1a1e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004174:	d8c01e17 	ldw	r3,120(sp)
 8004178:	b811883a 	mov	r8,r23
 800417c:	dac00f17 	ldw	r11,60(sp)
 8004180:	db400e17 	ldw	r13,56(sp)
 8004184:	003cf906 	br	800356c <___vfprintf_internal_r+0x70c>
 8004188:	d9000c17 	ldw	r4,48(sp)
 800418c:	b823883a 	mov	r17,r23
 8004190:	a88003cc 	andi	r2,r21,15
 8004194:	a006973a 	slli	r3,r20,28
 8004198:	2085883a 	add	r2,r4,r2
 800419c:	a82ad13a 	srli	r21,r21,4
 80041a0:	10800003 	ldbu	r2,0(r2)
 80041a4:	a028d13a 	srli	r20,r20,4
 80041a8:	8c7fffc4 	addi	r17,r17,-1
 80041ac:	1d6ab03a 	or	r21,r3,r21
 80041b0:	88800005 	stb	r2,0(r17)
 80041b4:	ad04b03a 	or	r2,r21,r20
 80041b8:	103ff51e 	bne	r2,zero,8004190 <___vfprintf_internal_r+0x1330>
 80041bc:	bc69c83a 	sub	r20,r23,r17
 80041c0:	6025883a 	mov	r18,r12
 80041c4:	003e3d06 	br	8003abc <___vfprintf_internal_r+0xc5c>
 80041c8:	d9001617 	ldw	r4,88(sp)
 80041cc:	01019a0e 	bge	zero,r4,8004838 <___vfprintf_internal_r+0x19d8>
 80041d0:	d8800717 	ldw	r2,28(sp)
 80041d4:	d9000817 	ldw	r4,32(sp)
 80041d8:	1039883a 	mov	fp,r2
 80041dc:	20812816 	blt	r4,r2,8004680 <___vfprintf_internal_r+0x1820>
 80041e0:	07000a0e 	bge	zero,fp,800420c <___vfprintf_internal_r+0x13ac>
 80041e4:	d8801d17 	ldw	r2,116(sp)
 80041e8:	1f07883a 	add	r3,r3,fp
 80041ec:	44400015 	stw	r17,0(r8)
 80041f0:	10800044 	addi	r2,r2,1
 80041f4:	d8801d15 	stw	r2,116(sp)
 80041f8:	47000115 	stw	fp,4(r8)
 80041fc:	d8c01e15 	stw	r3,120(sp)
 8004200:	10800208 	cmpgei	r2,r2,8
 8004204:	1002de1e 	bne	r2,zero,8004d80 <___vfprintf_internal_r+0x1f20>
 8004208:	42000204 	addi	r8,r8,8
 800420c:	e0014116 	blt	fp,zero,8004714 <___vfprintf_internal_r+0x18b4>
 8004210:	d8800717 	ldw	r2,28(sp)
 8004214:	1739c83a 	sub	fp,r2,fp
 8004218:	07014816 	blt	zero,fp,800473c <___vfprintf_internal_r+0x18dc>
 800421c:	d9001617 	ldw	r4,88(sp)
 8004220:	d8800817 	ldw	r2,32(sp)
 8004224:	2081190e 	bge	r4,r2,800468c <___vfprintf_internal_r+0x182c>
 8004228:	d8800d17 	ldw	r2,52(sp)
 800422c:	d9400b17 	ldw	r5,44(sp)
 8004230:	40800015 	stw	r2,0(r8)
 8004234:	d8801d17 	ldw	r2,116(sp)
 8004238:	1947883a 	add	r3,r3,r5
 800423c:	41400115 	stw	r5,4(r8)
 8004240:	10800044 	addi	r2,r2,1
 8004244:	d8801d15 	stw	r2,116(sp)
 8004248:	d8c01e15 	stw	r3,120(sp)
 800424c:	10800208 	cmpgei	r2,r2,8
 8004250:	1002651e 	bne	r2,zero,8004be8 <___vfprintf_internal_r+0x1d88>
 8004254:	42000204 	addi	r8,r8,8
 8004258:	d8800817 	ldw	r2,32(sp)
 800425c:	d9400717 	ldw	r5,28(sp)
 8004260:	1105c83a 	sub	r2,r2,r4
 8004264:	29015e0e 	bge	r5,r4,80047e0 <___vfprintf_internal_r+0x1980>
 8004268:	1039883a 	mov	fp,r2
 800426c:	07000c0e 	bge	zero,fp,80042a0 <___vfprintf_internal_r+0x1440>
 8004270:	d9000717 	ldw	r4,28(sp)
 8004274:	1f07883a 	add	r3,r3,fp
 8004278:	47000115 	stw	fp,4(r8)
 800427c:	8923883a 	add	r17,r17,r4
 8004280:	d9001d17 	ldw	r4,116(sp)
 8004284:	44400015 	stw	r17,0(r8)
 8004288:	d8c01e15 	stw	r3,120(sp)
 800428c:	21000044 	addi	r4,r4,1
 8004290:	d9001d15 	stw	r4,116(sp)
 8004294:	21000208 	cmpgei	r4,r4,8
 8004298:	2002c41e 	bne	r4,zero,8004dac <___vfprintf_internal_r+0x1f4c>
 800429c:	42000204 	addi	r8,r8,8
 80042a0:	e000010e 	bge	fp,zero,80042a8 <___vfprintf_internal_r+0x1448>
 80042a4:	0039883a 	mov	fp,zero
 80042a8:	1739c83a 	sub	fp,r2,fp
 80042ac:	073cbf0e 	bge	zero,fp,80035ac <___vfprintf_internal_r+0x74c>
 80042b0:	03020074 	movhi	r12,2049
 80042b4:	e1000450 	cmplti	r4,fp,17
 80042b8:	6308f784 	addi	r12,r12,9182
 80042bc:	d8801d17 	ldw	r2,116(sp)
 80042c0:	2002401e 	bne	r4,zero,8004bc4 <___vfprintf_internal_r+0x1d64>
 80042c4:	dc000715 	stw	r16,28(sp)
 80042c8:	05000404 	movi	r20,16
 80042cc:	dc400517 	ldw	r17,20(sp)
 80042d0:	6021883a 	mov	r16,r12
 80042d4:	00000406 	br	80042e8 <___vfprintf_internal_r+0x1488>
 80042d8:	42000204 	addi	r8,r8,8
 80042dc:	e73ffc04 	addi	fp,fp,-16
 80042e0:	e1000448 	cmpgei	r4,fp,17
 80042e4:	20023526 	beq	r4,zero,8004bbc <___vfprintf_internal_r+0x1d5c>
 80042e8:	10800044 	addi	r2,r2,1
 80042ec:	18c00404 	addi	r3,r3,16
 80042f0:	44000015 	stw	r16,0(r8)
 80042f4:	45000115 	stw	r20,4(r8)
 80042f8:	d8c01e15 	stw	r3,120(sp)
 80042fc:	d8801d15 	stw	r2,116(sp)
 8004300:	11000208 	cmpgei	r4,r2,8
 8004304:	203ff426 	beq	r4,zero,80042d8 <___vfprintf_internal_r+0x1478>
 8004308:	d9801c04 	addi	r6,sp,112
 800430c:	980b883a 	mov	r5,r19
 8004310:	8809883a 	mov	r4,r17
 8004314:	800a3680 	call	800a368 <__sprint_r>
 8004318:	103bb01e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 800431c:	d8c01e17 	ldw	r3,120(sp)
 8004320:	d8801d17 	ldw	r2,116(sp)
 8004324:	b811883a 	mov	r8,r23
 8004328:	003fec06 	br	80042dc <___vfprintf_internal_r+0x147c>
 800432c:	9080004c 	andi	r2,r18,1
 8004330:	103f031e 	bne	r2,zero,8003f40 <___vfprintf_internal_r+0x10e0>
 8004334:	00800044 	movi	r2,1
 8004338:	dd001d15 	stw	r20,116(sp)
 800433c:	44400015 	stw	r17,0(r8)
 8004340:	40800115 	stw	r2,4(r8)
 8004344:	d8c01e15 	stw	r3,120(sp)
 8004348:	a5000208 	cmpgei	r20,r20,8
 800434c:	a000d71e 	bne	r20,zero,80046ac <___vfprintf_internal_r+0x184c>
 8004350:	52800084 	addi	r10,r10,2
 8004354:	42000404 	addi	r8,r8,16
 8004358:	003f2b06 	br	8004008 <___vfprintf_internal_r+0x11a8>
 800435c:	02ff2a0e 	bge	zero,r11,8004008 <___vfprintf_internal_r+0x11a8>
 8004360:	58800450 	cmplti	r2,r11,17
 8004364:	03020074 	movhi	r12,2049
 8004368:	1002fe1e 	bne	r2,zero,8004f64 <___vfprintf_internal_r+0x2104>
 800436c:	6308f784 	addi	r12,r12,9182
 8004370:	dd400715 	stw	r21,28(sp)
 8004374:	dc800e15 	stw	r18,56(sp)
 8004378:	e005883a 	mov	r2,fp
 800437c:	04400404 	movi	r17,16
 8004380:	b039883a 	mov	fp,r22
 8004384:	5825883a 	mov	r18,r11
 8004388:	802d883a 	mov	r22,r16
 800438c:	602b883a 	mov	r21,r12
 8004390:	dc000517 	ldw	r16,20(sp)
 8004394:	6829883a 	mov	r20,r13
 8004398:	00000506 	br	80043b0 <___vfprintf_internal_r+0x1550>
 800439c:	10800204 	addi	r2,r2,8
 80043a0:	94bffc04 	addi	r18,r18,-16
 80043a4:	91000448 	cmpgei	r4,r18,17
 80043a8:	20018a26 	beq	r4,zero,80049d4 <___vfprintf_internal_r+0x1b74>
 80043ac:	a5000044 	addi	r20,r20,1
 80043b0:	18c00404 	addi	r3,r3,16
 80043b4:	15400015 	stw	r21,0(r2)
 80043b8:	14400115 	stw	r17,4(r2)
 80043bc:	d8c01e15 	stw	r3,120(sp)
 80043c0:	dd001d15 	stw	r20,116(sp)
 80043c4:	a1000208 	cmpgei	r4,r20,8
 80043c8:	203ff426 	beq	r4,zero,800439c <___vfprintf_internal_r+0x153c>
 80043cc:	d9801c04 	addi	r6,sp,112
 80043d0:	980b883a 	mov	r5,r19
 80043d4:	8009883a 	mov	r4,r16
 80043d8:	800a3680 	call	800a368 <__sprint_r>
 80043dc:	103b7f1e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80043e0:	dd001d17 	ldw	r20,116(sp)
 80043e4:	d8c01e17 	ldw	r3,120(sp)
 80043e8:	b805883a 	mov	r2,r23
 80043ec:	003fec06 	br	80043a0 <___vfprintf_internal_r+0x1540>
 80043f0:	d9000517 	ldw	r4,20(sp)
 80043f4:	d9801c04 	addi	r6,sp,112
 80043f8:	980b883a 	mov	r5,r19
 80043fc:	800a3680 	call	800a368 <__sprint_r>
 8004400:	103b761e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004404:	d8c01e17 	ldw	r3,120(sp)
 8004408:	b811883a 	mov	r8,r23
 800440c:	003c5b06 	br	800357c <___vfprintf_internal_r+0x71c>
 8004410:	0029883a 	mov	r20,zero
 8004414:	003bdc06 	br	8003388 <___vfprintf_internal_r+0x528>
 8004418:	b023883a 	mov	r17,r22
 800441c:	003ae306 	br	8002fac <___vfprintf_internal_r+0x14c>
 8004420:	b823883a 	mov	r17,r23
 8004424:	003da506 	br	8003abc <___vfprintf_internal_r+0xc5c>
 8004428:	d9000917 	ldw	r4,36(sp)
 800442c:	d9400a17 	ldw	r5,40(sp)
 8004430:	da000f15 	stw	r8,60(sp)
 8004434:	200d883a 	mov	r6,r4
 8004438:	280f883a 	mov	r7,r5
 800443c:	dac00e15 	stw	r11,56(sp)
 8004440:	db000715 	stw	r12,28(sp)
 8004444:	800f4680 	call	800f468 <__unorddf2>
 8004448:	db000717 	ldw	r12,28(sp)
 800444c:	dac00e17 	ldw	r11,56(sp)
 8004450:	da000f17 	ldw	r8,60(sp)
 8004454:	1002b21e 	bne	r2,zero,8004f20 <___vfprintf_internal_r+0x20c0>
 8004458:	00fff7c4 	movi	r3,-33
 800445c:	e0c6703a 	and	r3,fp,r3
 8004460:	58bfffe0 	cmpeqi	r2,r11,-1
 8004464:	d8c00715 	stw	r3,28(sp)
 8004468:	10024e1e 	bne	r2,zero,8004da4 <___vfprintf_internal_r+0x1f44>
 800446c:	188011d8 	cmpnei	r2,r3,71
 8004470:	10020026 	beq	r2,zero,8004c74 <___vfprintf_internal_r+0x1e14>
 8004474:	d8800a17 	ldw	r2,40(sp)
 8004478:	64804014 	ori	r18,r12,256
 800447c:	1001e316 	blt	r2,zero,8004c0c <___vfprintf_internal_r+0x1dac>
 8004480:	dd400a17 	ldw	r21,40(sp)
 8004484:	d8000e05 	stb	zero,56(sp)
 8004488:	e08019a0 	cmpeqi	r2,fp,102
 800448c:	d8800f15 	stw	r2,60(sp)
 8004490:	1001771e 	bne	r2,zero,8004a70 <___vfprintf_internal_r+0x1c10>
 8004494:	e08011a0 	cmpeqi	r2,fp,70
 8004498:	1001751e 	bne	r2,zero,8004a70 <___vfprintf_internal_r+0x1c10>
 800449c:	d8800717 	ldw	r2,28(sp)
 80044a0:	da001215 	stw	r8,72(sp)
 80044a4:	db001015 	stw	r12,64(sp)
 80044a8:	10801158 	cmpnei	r2,r2,69
 80044ac:	10020726 	beq	r2,zero,8004ccc <___vfprintf_internal_r+0x1e6c>
 80044b0:	d8801a04 	addi	r2,sp,104
 80044b4:	d8800315 	stw	r2,12(sp)
 80044b8:	d9400917 	ldw	r5,36(sp)
 80044bc:	d8801704 	addi	r2,sp,92
 80044c0:	d9000517 	ldw	r4,20(sp)
 80044c4:	d8800215 	stw	r2,8(sp)
 80044c8:	d8801604 	addi	r2,sp,88
 80044cc:	dac00015 	stw	r11,0(sp)
 80044d0:	d8800115 	stw	r2,4(sp)
 80044d4:	01c00084 	movi	r7,2
 80044d8:	a80d883a 	mov	r6,r21
 80044dc:	dac00815 	stw	r11,32(sp)
 80044e0:	80054540 	call	8005454 <_dtoa_r>
 80044e4:	dac00817 	ldw	r11,32(sp)
 80044e8:	1023883a 	mov	r17,r2
 80044ec:	e08019d8 	cmpnei	r2,fp,103
 80044f0:	db001017 	ldw	r12,64(sp)
 80044f4:	da001217 	ldw	r8,72(sp)
 80044f8:	5829883a 	mov	r20,r11
 80044fc:	1002051e 	bne	r2,zero,8004d14 <___vfprintf_internal_r+0x1eb4>
 8004500:	6080004c 	andi	r2,r12,1
 8004504:	1002051e 	bne	r2,zero,8004d1c <___vfprintf_internal_r+0x1ebc>
 8004508:	d8c01617 	ldw	r3,88(sp)
 800450c:	d8800717 	ldw	r2,28(sp)
 8004510:	d8c00715 	stw	r3,28(sp)
 8004514:	d8c01a17 	ldw	r3,104(sp)
 8004518:	108011e0 	cmpeqi	r2,r2,71
 800451c:	1c47c83a 	sub	r3,r3,r17
 8004520:	d8c00815 	stw	r3,32(sp)
 8004524:	10000526 	beq	r2,zero,800453c <___vfprintf_internal_r+0x16dc>
 8004528:	d8c00717 	ldw	r3,28(sp)
 800452c:	18bfff50 	cmplti	r2,r3,-3
 8004530:	1000011e 	bne	r2,zero,8004538 <___vfprintf_internal_r+0x16d8>
 8004534:	58c2070e 	bge	r11,r3,8004d54 <___vfprintf_internal_r+0x1ef4>
 8004538:	e73fff84 	addi	fp,fp,-2
 800453c:	d8800717 	ldw	r2,28(sp)
 8004540:	df001845 	stb	fp,97(sp)
 8004544:	153fffc4 	addi	r20,r2,-1
 8004548:	dd001615 	stw	r20,88(sp)
 800454c:	a0027c16 	blt	r20,zero,8004f40 <___vfprintf_internal_r+0x20e0>
 8004550:	00800ac4 	movi	r2,43
 8004554:	d8801885 	stb	r2,98(sp)
 8004558:	a0800290 	cmplti	r2,r20,10
 800455c:	10025b1e 	bne	r2,zero,8004ecc <___vfprintf_internal_r+0x206c>
 8004560:	dc000f15 	stw	r16,60(sp)
 8004564:	dd401bc4 	addi	r21,sp,111
 8004568:	a021883a 	mov	r16,r20
 800456c:	db000715 	stw	r12,28(sp)
 8004570:	9829883a 	mov	r20,r19
 8004574:	4027883a 	mov	r19,r8
 8004578:	00000206 	br	8004584 <___vfprintf_internal_r+0x1724>
 800457c:	202b883a 	mov	r21,r4
 8004580:	1021883a 	mov	r16,r2
 8004584:	8009883a 	mov	r4,r16
 8004588:	01400284 	movi	r5,10
 800458c:	8002b040 	call	8002b04 <__modsi3>
 8004590:	10800c04 	addi	r2,r2,48
 8004594:	8009883a 	mov	r4,r16
 8004598:	a8bfffc5 	stb	r2,-1(r21)
 800459c:	01400284 	movi	r5,10
 80045a0:	8002a840 	call	8002a84 <__divsi3>
 80045a4:	80c01908 	cmpgei	r3,r16,100
 80045a8:	a93fffc4 	addi	r4,r21,-1
 80045ac:	183ff31e 	bne	r3,zero,800457c <___vfprintf_internal_r+0x171c>
 80045b0:	10800c04 	addi	r2,r2,48
 80045b4:	20bfffc5 	stb	r2,-1(r4)
 80045b8:	a8ffff84 	addi	r3,r21,-2
 80045bc:	d9001bc4 	addi	r4,sp,111
 80045c0:	9811883a 	mov	r8,r19
 80045c4:	db000717 	ldw	r12,28(sp)
 80045c8:	dc000f17 	ldw	r16,60(sp)
 80045cc:	a027883a 	mov	r19,r20
 80045d0:	1902762e 	bgeu	r3,r4,8004fac <___vfprintf_internal_r+0x214c>
 80045d4:	d90018c4 	addi	r4,sp,99
 80045d8:	00000106 	br	80045e0 <___vfprintf_internal_r+0x1780>
 80045dc:	18800003 	ldbu	r2,0(r3)
 80045e0:	21000044 	addi	r4,r4,1
 80045e4:	20bfffc5 	stb	r2,-1(r4)
 80045e8:	18c00044 	addi	r3,r3,1
 80045ec:	d8801bc4 	addi	r2,sp,111
 80045f0:	18bffa1e 	bne	r3,r2,80045dc <___vfprintf_internal_r+0x177c>
 80045f4:	d8801c44 	addi	r2,sp,113
 80045f8:	d8c018c4 	addi	r3,sp,99
 80045fc:	1545c83a 	sub	r2,r2,r21
 8004600:	1885883a 	add	r2,r3,r2
 8004604:	d8c01844 	addi	r3,sp,97
 8004608:	10c5c83a 	sub	r2,r2,r3
 800460c:	d8801115 	stw	r2,68(sp)
 8004610:	d8c00817 	ldw	r3,32(sp)
 8004614:	d9001117 	ldw	r4,68(sp)
 8004618:	18800088 	cmpgei	r2,r3,2
 800461c:	1929883a 	add	r20,r3,r4
 8004620:	10024c26 	beq	r2,zero,8004f54 <___vfprintf_internal_r+0x20f4>
 8004624:	d8800b17 	ldw	r2,44(sp)
 8004628:	a0a9883a 	add	r20,r20,r2
 800462c:	a02b883a 	mov	r21,r20
 8004630:	a000010e 	bge	r20,zero,8004638 <___vfprintf_internal_r+0x17d8>
 8004634:	002b883a 	mov	r21,zero
 8004638:	d8000715 	stw	zero,28(sp)
 800463c:	00014206 	br	8004b48 <___vfprintf_internal_r+0x1ce8>
 8004640:	00800c04 	movi	r2,48
 8004644:	d8801585 	stb	r2,86(sp)
 8004648:	df0015c5 	stb	fp,87(sp)
 800464c:	63000094 	ori	r12,r12,2
 8004650:	00800084 	movi	r2,2
 8004654:	003ce106 	br	80039dc <___vfprintf_internal_r+0xb7c>
 8004658:	d9400417 	ldw	r5,16(sp)
 800465c:	20800017 	ldw	r2,0(r4)
 8004660:	d8c00615 	stw	r3,24(sp)
 8004664:	2809d7fa 	srai	r4,r5,31
 8004668:	11400015 	stw	r5,0(r2)
 800466c:	11000115 	stw	r4,4(r2)
 8004670:	003a3006 	br	8002f34 <___vfprintf_internal_r+0xd4>
 8004674:	0421c83a 	sub	r16,zero,r16
 8004678:	d8800615 	stw	r2,24(sp)
 800467c:	003b1506 	br	80032d4 <___vfprintf_internal_r+0x474>
 8004680:	2039883a 	mov	fp,r4
 8004684:	073ed716 	blt	zero,fp,80041e4 <___vfprintf_internal_r+0x1384>
 8004688:	003ee006 	br	800420c <___vfprintf_internal_r+0x13ac>
 800468c:	9080004c 	andi	r2,r18,1
 8004690:	103ee51e 	bne	r2,zero,8004228 <___vfprintf_internal_r+0x13c8>
 8004694:	d8800817 	ldw	r2,32(sp)
 8004698:	d9400717 	ldw	r5,28(sp)
 800469c:	1105c83a 	sub	r2,r2,r4
 80046a0:	29004f0e 	bge	r5,r4,80047e0 <___vfprintf_internal_r+0x1980>
 80046a4:	1039883a 	mov	fp,r2
 80046a8:	003efd06 	br	80042a0 <___vfprintf_internal_r+0x1440>
 80046ac:	d9000517 	ldw	r4,20(sp)
 80046b0:	d9801c04 	addi	r6,sp,112
 80046b4:	980b883a 	mov	r5,r19
 80046b8:	800a3680 	call	800a368 <__sprint_r>
 80046bc:	103ac71e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80046c0:	da801d17 	ldw	r10,116(sp)
 80046c4:	d8c01e17 	ldw	r3,120(sp)
 80046c8:	da002b04 	addi	r8,sp,172
 80046cc:	52800044 	addi	r10,r10,1
 80046d0:	b839883a 	mov	fp,r23
 80046d4:	003e4c06 	br	8004008 <___vfprintf_internal_r+0x11a8>
 80046d8:	b7000043 	ldbu	fp,1(r22)
 80046dc:	63000814 	ori	r12,r12,32
 80046e0:	b5800044 	addi	r22,r22,1
 80046e4:	e2803fcc 	andi	r10,fp,255
 80046e8:	5280201c 	xori	r10,r10,128
 80046ec:	52bfe004 	addi	r10,r10,-128
 80046f0:	003a3606 	br	8002fcc <___vfprintf_internal_r+0x16c>
 80046f4:	d9000517 	ldw	r4,20(sp)
 80046f8:	d9801c04 	addi	r6,sp,112
 80046fc:	980b883a 	mov	r5,r19
 8004700:	800a3680 	call	800a368 <__sprint_r>
 8004704:	103ab51e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004708:	d8c01e17 	ldw	r3,120(sp)
 800470c:	b811883a 	mov	r8,r23
 8004710:	003d4506 	br	8003c28 <___vfprintf_internal_r+0xdc8>
 8004714:	0039883a 	mov	fp,zero
 8004718:	003ebd06 	br	8004210 <___vfprintf_internal_r+0x13b0>
 800471c:	588001f0 	cmpltui	r2,r11,7
 8004720:	5829883a 	mov	r20,r11
 8004724:	10013d26 	beq	r2,zero,8004c1c <___vfprintf_internal_r+0x1dbc>
 8004728:	04420074 	movhi	r17,2049
 800472c:	a02b883a 	mov	r21,r20
 8004730:	dc800615 	stw	r18,24(sp)
 8004734:	8c48f504 	addi	r17,r17,9172
 8004738:	003b6606 	br	80034d4 <___vfprintf_internal_r+0x674>
 800473c:	03020074 	movhi	r12,2049
 8004740:	e1000450 	cmplti	r4,fp,17
 8004744:	6308f784 	addi	r12,r12,9182
 8004748:	d8801d17 	ldw	r2,116(sp)
 800474c:	20010d1e 	bne	r4,zero,8004b84 <___vfprintf_internal_r+0x1d24>
 8004750:	dc400e15 	stw	r17,56(sp)
 8004754:	dc800f15 	stw	r18,60(sp)
 8004758:	e023883a 	mov	r17,fp
 800475c:	05000404 	movi	r20,16
 8004760:	b039883a 	mov	fp,r22
 8004764:	6025883a 	mov	r18,r12
 8004768:	802d883a 	mov	r22,r16
 800476c:	dc000517 	ldw	r16,20(sp)
 8004770:	00000406 	br	8004784 <___vfprintf_internal_r+0x1924>
 8004774:	42000204 	addi	r8,r8,8
 8004778:	8c7ffc04 	addi	r17,r17,-16
 800477c:	89000448 	cmpgei	r4,r17,17
 8004780:	2000fa26 	beq	r4,zero,8004b6c <___vfprintf_internal_r+0x1d0c>
 8004784:	10800044 	addi	r2,r2,1
 8004788:	18c00404 	addi	r3,r3,16
 800478c:	44800015 	stw	r18,0(r8)
 8004790:	45000115 	stw	r20,4(r8)
 8004794:	d8c01e15 	stw	r3,120(sp)
 8004798:	d8801d15 	stw	r2,116(sp)
 800479c:	11000208 	cmpgei	r4,r2,8
 80047a0:	203ff426 	beq	r4,zero,8004774 <___vfprintf_internal_r+0x1914>
 80047a4:	d9801c04 	addi	r6,sp,112
 80047a8:	980b883a 	mov	r5,r19
 80047ac:	8009883a 	mov	r4,r16
 80047b0:	800a3680 	call	800a368 <__sprint_r>
 80047b4:	103a891e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80047b8:	d8c01e17 	ldw	r3,120(sp)
 80047bc:	d8801d17 	ldw	r2,116(sp)
 80047c0:	b811883a 	mov	r8,r23
 80047c4:	003fec06 	br	8004778 <___vfprintf_internal_r+0x1918>
 80047c8:	d8800617 	ldw	r2,24(sp)
 80047cc:	10800017 	ldw	r2,0(r2)
 80047d0:	d8c00615 	stw	r3,24(sp)
 80047d4:	d8c00417 	ldw	r3,16(sp)
 80047d8:	10c00015 	stw	r3,0(r2)
 80047dc:	0039d506 	br	8002f34 <___vfprintf_internal_r+0xd4>
 80047e0:	d9000817 	ldw	r4,32(sp)
 80047e4:	d9400717 	ldw	r5,28(sp)
 80047e8:	2179c83a 	sub	fp,r4,r5
 80047ec:	003e9f06 	br	800426c <___vfprintf_internal_r+0x140c>
 80047f0:	d9000517 	ldw	r4,20(sp)
 80047f4:	d9801c04 	addi	r6,sp,112
 80047f8:	980b883a 	mov	r5,r19
 80047fc:	800a3680 	call	800a368 <__sprint_r>
 8004800:	103a761e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004804:	d8c01e17 	ldw	r3,120(sp)
 8004808:	dd001d17 	ldw	r20,116(sp)
 800480c:	b839883a 	mov	fp,r23
 8004810:	003ddd06 	br	8003f88 <___vfprintf_internal_r+0x1128>
 8004814:	d9000517 	ldw	r4,20(sp)
 8004818:	d9801c04 	addi	r6,sp,112
 800481c:	980b883a 	mov	r5,r19
 8004820:	800a3680 	call	800a368 <__sprint_r>
 8004824:	103a6d1e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004828:	d8c01e17 	ldw	r3,120(sp)
 800482c:	dd001d17 	ldw	r20,116(sp)
 8004830:	b839883a 	mov	fp,r23
 8004834:	003dc906 	br	8003f5c <___vfprintf_internal_r+0x10fc>
 8004838:	d8801d17 	ldw	r2,116(sp)
 800483c:	01420074 	movhi	r5,2049
 8004840:	2948f704 	addi	r5,r5,9180
 8004844:	10800044 	addi	r2,r2,1
 8004848:	18c00044 	addi	r3,r3,1
 800484c:	41400015 	stw	r5,0(r8)
 8004850:	01400044 	movi	r5,1
 8004854:	d8801d15 	stw	r2,116(sp)
 8004858:	41400115 	stw	r5,4(r8)
 800485c:	d8c01e15 	stw	r3,120(sp)
 8004860:	10800208 	cmpgei	r2,r2,8
 8004864:	103d851e 	bne	r2,zero,8003e7c <___vfprintf_internal_r+0x101c>
 8004868:	42000204 	addi	r8,r8,8
 800486c:	003d8b06 	br	8003e9c <___vfprintf_internal_r+0x103c>
 8004870:	d9000517 	ldw	r4,20(sp)
 8004874:	d9801c04 	addi	r6,sp,112
 8004878:	980b883a 	mov	r5,r19
 800487c:	dac01015 	stw	r11,64(sp)
 8004880:	db400f15 	stw	r13,60(sp)
 8004884:	db800e15 	stw	r14,56(sp)
 8004888:	800a3680 	call	800a368 <__sprint_r>
 800488c:	103a531e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004890:	d8c01e17 	ldw	r3,120(sp)
 8004894:	b811883a 	mov	r8,r23
 8004898:	dac01017 	ldw	r11,64(sp)
 800489c:	db400f17 	ldw	r13,60(sp)
 80048a0:	db800e17 	ldw	r14,56(sp)
 80048a4:	003b1606 	br	8003500 <___vfprintf_internal_r+0x6a0>
 80048a8:	d9000517 	ldw	r4,20(sp)
 80048ac:	d9801c04 	addi	r6,sp,112
 80048b0:	980b883a 	mov	r5,r19
 80048b4:	800a3680 	call	800a368 <__sprint_r>
 80048b8:	103a481e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80048bc:	b811883a 	mov	r8,r23
 80048c0:	003cc506 	br	8003bd8 <___vfprintf_internal_r+0xd78>
 80048c4:	d9000517 	ldw	r4,20(sp)
 80048c8:	d9801c04 	addi	r6,sp,112
 80048cc:	980b883a 	mov	r5,r19
 80048d0:	dac00e15 	stw	r11,56(sp)
 80048d4:	800a3680 	call	800a368 <__sprint_r>
 80048d8:	103a401e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80048dc:	d8c01e17 	ldw	r3,120(sp)
 80048e0:	b811883a 	mov	r8,r23
 80048e4:	dac00e17 	ldw	r11,56(sp)
 80048e8:	003b2206 	br	8003574 <___vfprintf_internal_r+0x714>
 80048ec:	10c00060 	cmpeqi	r3,r2,1
 80048f0:	9019883a 	mov	r12,r18
 80048f4:	183beb26 	beq	r3,zero,80038a4 <___vfprintf_internal_r+0xa44>
 80048f8:	003c6b06 	br	8003aa8 <___vfprintf_internal_r+0xc48>
 80048fc:	d8800d17 	ldw	r2,52(sp)
 8004900:	d9400b17 	ldw	r5,44(sp)
 8004904:	40800015 	stw	r2,0(r8)
 8004908:	d8801d17 	ldw	r2,116(sp)
 800490c:	28c7883a 	add	r3,r5,r3
 8004910:	41400115 	stw	r5,4(r8)
 8004914:	10800044 	addi	r2,r2,1
 8004918:	d8c01e15 	stw	r3,120(sp)
 800491c:	d8801d15 	stw	r2,116(sp)
 8004920:	11400208 	cmpgei	r5,r2,8
 8004924:	2800d61e 	bne	r5,zero,8004c80 <___vfprintf_internal_r+0x1e20>
 8004928:	42000204 	addi	r8,r8,8
 800492c:	203d6c0e 	bge	r4,zero,8003ee0 <___vfprintf_internal_r+0x1080>
 8004930:	03020074 	movhi	r12,2049
 8004934:	217ffc08 	cmpgei	r5,r4,-16
 8004938:	6308f784 	addi	r12,r12,9182
 800493c:	0129c83a 	sub	r20,zero,r4
 8004940:	28014e1e 	bne	r5,zero,8004e7c <___vfprintf_internal_r+0x201c>
 8004944:	8009883a 	mov	r4,r16
 8004948:	dc400715 	stw	r17,28(sp)
 800494c:	a021883a 	mov	r16,r20
 8004950:	07000404 	movi	fp,16
 8004954:	6023883a 	mov	r17,r12
 8004958:	2029883a 	mov	r20,r4
 800495c:	00000406 	br	8004970 <___vfprintf_internal_r+0x1b10>
 8004960:	42000204 	addi	r8,r8,8
 8004964:	843ffc04 	addi	r16,r16,-16
 8004968:	81000448 	cmpgei	r4,r16,17
 800496c:	20013e26 	beq	r4,zero,8004e68 <___vfprintf_internal_r+0x2008>
 8004970:	10800044 	addi	r2,r2,1
 8004974:	18c00404 	addi	r3,r3,16
 8004978:	44400015 	stw	r17,0(r8)
 800497c:	47000115 	stw	fp,4(r8)
 8004980:	d8c01e15 	stw	r3,120(sp)
 8004984:	d8801d15 	stw	r2,116(sp)
 8004988:	11000208 	cmpgei	r4,r2,8
 800498c:	203ff426 	beq	r4,zero,8004960 <___vfprintf_internal_r+0x1b00>
 8004990:	d9000517 	ldw	r4,20(sp)
 8004994:	d9801c04 	addi	r6,sp,112
 8004998:	980b883a 	mov	r5,r19
 800499c:	800a3680 	call	800a368 <__sprint_r>
 80049a0:	103a0e1e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 80049a4:	d8c01e17 	ldw	r3,120(sp)
 80049a8:	d8801d17 	ldw	r2,116(sp)
 80049ac:	b811883a 	mov	r8,r23
 80049b0:	003fec06 	br	8004964 <___vfprintf_internal_r+0x1b04>
 80049b4:	8809883a 	mov	r4,r17
 80049b8:	8002dc80 	call	8002dc8 <strlen>
 80049bc:	1029883a 	mov	r20,r2
 80049c0:	102b883a 	mov	r21,r2
 80049c4:	dc800615 	stw	r18,24(sp)
 80049c8:	db000717 	ldw	r12,28(sp)
 80049cc:	da000e17 	ldw	r8,56(sp)
 80049d0:	003ac006 	br	80034d4 <___vfprintf_internal_r+0x674>
 80049d4:	9017883a 	mov	r11,r18
 80049d8:	a819883a 	mov	r12,r21
 80049dc:	dc800e17 	ldw	r18,56(sp)
 80049e0:	dd400717 	ldw	r21,28(sp)
 80049e4:	b021883a 	mov	r16,r22
 80049e8:	a2800044 	addi	r10,r20,1
 80049ec:	e02d883a 	mov	r22,fp
 80049f0:	1039883a 	mov	fp,r2
 80049f4:	10800204 	addi	r2,r2,8
 80049f8:	1ac7883a 	add	r3,r3,r11
 80049fc:	e3000015 	stw	r12,0(fp)
 8004a00:	e2c00115 	stw	r11,4(fp)
 8004a04:	d8c01e15 	stw	r3,120(sp)
 8004a08:	da801d15 	stw	r10,116(sp)
 8004a0c:	51000208 	cmpgei	r4,r10,8
 8004a10:	203f261e 	bne	r4,zero,80046ac <___vfprintf_internal_r+0x184c>
 8004a14:	52800044 	addi	r10,r10,1
 8004a18:	12000204 	addi	r8,r2,8
 8004a1c:	1039883a 	mov	fp,r2
 8004a20:	003d7906 	br	8004008 <___vfprintf_internal_r+0x11a8>
 8004a24:	8019883a 	mov	r12,r16
 8004a28:	dc000717 	ldw	r16,28(sp)
 8004a2c:	10800044 	addi	r2,r2,1
 8004a30:	1c47883a 	add	r3,r3,r17
 8004a34:	d8801d15 	stw	r2,116(sp)
 8004a38:	43000015 	stw	r12,0(r8)
 8004a3c:	44400115 	stw	r17,4(r8)
 8004a40:	d8c01e15 	stw	r3,120(sp)
 8004a44:	10800208 	cmpgei	r2,r2,8
 8004a48:	103ad726 	beq	r2,zero,80035a8 <___vfprintf_internal_r+0x748>
 8004a4c:	003d2d06 	br	8003f04 <___vfprintf_internal_r+0x10a4>
 8004a50:	d8800615 	stw	r2,24(sp)
 8004a54:	0029883a 	mov	r20,zero
 8004a58:	0005883a 	mov	r2,zero
 8004a5c:	003bdf06 	br	80039dc <___vfprintf_internal_r+0xb7c>
 8004a60:	d8800615 	stw	r2,24(sp)
 8004a64:	0029883a 	mov	r20,zero
 8004a68:	00800044 	movi	r2,1
 8004a6c:	003bdb06 	br	80039dc <___vfprintf_internal_r+0xb7c>
 8004a70:	d8801a04 	addi	r2,sp,104
 8004a74:	d8800315 	stw	r2,12(sp)
 8004a78:	d9400917 	ldw	r5,36(sp)
 8004a7c:	d8801704 	addi	r2,sp,92
 8004a80:	d9000517 	ldw	r4,20(sp)
 8004a84:	d8800215 	stw	r2,8(sp)
 8004a88:	d8801604 	addi	r2,sp,88
 8004a8c:	dac00015 	stw	r11,0(sp)
 8004a90:	d8800115 	stw	r2,4(sp)
 8004a94:	01c000c4 	movi	r7,3
 8004a98:	a80d883a 	mov	r6,r21
 8004a9c:	da001215 	stw	r8,72(sp)
 8004aa0:	db001015 	stw	r12,64(sp)
 8004aa4:	dac00815 	stw	r11,32(sp)
 8004aa8:	80054540 	call	8005454 <_dtoa_r>
 8004aac:	dac00817 	ldw	r11,32(sp)
 8004ab0:	1023883a 	mov	r17,r2
 8004ab4:	db001017 	ldw	r12,64(sp)
 8004ab8:	12e9883a 	add	r20,r2,r11
 8004abc:	88800007 	ldb	r2,0(r17)
 8004ac0:	da001217 	ldw	r8,72(sp)
 8004ac4:	10800c20 	cmpeqi	r2,r2,48
 8004ac8:	10005a1e 	bne	r2,zero,8004c34 <___vfprintf_internal_r+0x1dd4>
 8004acc:	d8801617 	ldw	r2,88(sp)
 8004ad0:	a0a9883a 	add	r20,r20,r2
 8004ad4:	d9000917 	ldw	r4,36(sp)
 8004ad8:	000d883a 	mov	r6,zero
 8004adc:	000f883a 	mov	r7,zero
 8004ae0:	a80b883a 	mov	r5,r21
 8004ae4:	da001215 	stw	r8,72(sp)
 8004ae8:	dac01015 	stw	r11,64(sp)
 8004aec:	db000815 	stw	r12,32(sp)
 8004af0:	800e0bc0 	call	800e0bc <__eqdf2>
 8004af4:	db000817 	ldw	r12,32(sp)
 8004af8:	dac01017 	ldw	r11,64(sp)
 8004afc:	da001217 	ldw	r8,72(sp)
 8004b00:	1000881e 	bne	r2,zero,8004d24 <___vfprintf_internal_r+0x1ec4>
 8004b04:	a005883a 	mov	r2,r20
 8004b08:	1445c83a 	sub	r2,r2,r17
 8004b0c:	d8c00717 	ldw	r3,28(sp)
 8004b10:	d8800815 	stw	r2,32(sp)
 8004b14:	d8801617 	ldw	r2,88(sp)
 8004b18:	18c011d8 	cmpnei	r3,r3,71
 8004b1c:	d8800715 	stw	r2,28(sp)
 8004b20:	183e8126 	beq	r3,zero,8004528 <___vfprintf_internal_r+0x16c8>
 8004b24:	d8800f17 	ldw	r2,60(sp)
 8004b28:	103e8426 	beq	r2,zero,800453c <___vfprintf_internal_r+0x16dc>
 8004b2c:	d8c00717 	ldw	r3,28(sp)
 8004b30:	6080004c 	andi	r2,r12,1
 8004b34:	12c4b03a 	or	r2,r2,r11
 8004b38:	00c10d0e 	bge	zero,r3,8004f70 <___vfprintf_internal_r+0x2110>
 8004b3c:	1000f11e 	bne	r2,zero,8004f04 <___vfprintf_internal_r+0x20a4>
 8004b40:	dd000717 	ldw	r20,28(sp)
 8004b44:	a02b883a 	mov	r21,r20
 8004b48:	d8800e07 	ldb	r2,56(sp)
 8004b4c:	10007e26 	beq	r2,zero,8004d48 <___vfprintf_internal_r+0x1ee8>
 8004b50:	00800b44 	movi	r2,45
 8004b54:	d8801545 	stb	r2,85(sp)
 8004b58:	0017883a 	mov	r11,zero
 8004b5c:	003bdf06 	br	8003adc <___vfprintf_internal_r+0xc7c>
 8004b60:	04420074 	movhi	r17,2049
 8004b64:	8c48e704 	addi	r17,r17,9116
 8004b68:	003b2e06 	br	8003824 <___vfprintf_internal_r+0x9c4>
 8004b6c:	b021883a 	mov	r16,r22
 8004b70:	9019883a 	mov	r12,r18
 8004b74:	e02d883a 	mov	r22,fp
 8004b78:	dc800f17 	ldw	r18,60(sp)
 8004b7c:	8839883a 	mov	fp,r17
 8004b80:	dc400e17 	ldw	r17,56(sp)
 8004b84:	10800044 	addi	r2,r2,1
 8004b88:	1f07883a 	add	r3,r3,fp
 8004b8c:	d8801d15 	stw	r2,116(sp)
 8004b90:	43000015 	stw	r12,0(r8)
 8004b94:	47000115 	stw	fp,4(r8)
 8004b98:	d8c01e15 	stw	r3,120(sp)
 8004b9c:	10800208 	cmpgei	r2,r2,8
 8004ba0:	1000421e 	bne	r2,zero,8004cac <___vfprintf_internal_r+0x1e4c>
 8004ba4:	42000204 	addi	r8,r8,8
 8004ba8:	003d9c06 	br	800421c <___vfprintf_internal_r+0x13bc>
 8004bac:	00800b44 	movi	r2,45
 8004bb0:	d8801545 	stb	r2,85(sp)
 8004bb4:	03400b44 	movi	r13,45
 8004bb8:	003b1606 	br	8003814 <___vfprintf_internal_r+0x9b4>
 8004bbc:	8019883a 	mov	r12,r16
 8004bc0:	dc000717 	ldw	r16,28(sp)
 8004bc4:	10800044 	addi	r2,r2,1
 8004bc8:	1f07883a 	add	r3,r3,fp
 8004bcc:	d8801d15 	stw	r2,116(sp)
 8004bd0:	43000015 	stw	r12,0(r8)
 8004bd4:	47000115 	stw	fp,4(r8)
 8004bd8:	d8c01e15 	stw	r3,120(sp)
 8004bdc:	10800208 	cmpgei	r2,r2,8
 8004be0:	103a7126 	beq	r2,zero,80035a8 <___vfprintf_internal_r+0x748>
 8004be4:	003cc706 	br	8003f04 <___vfprintf_internal_r+0x10a4>
 8004be8:	d9000517 	ldw	r4,20(sp)
 8004bec:	d9801c04 	addi	r6,sp,112
 8004bf0:	980b883a 	mov	r5,r19
 8004bf4:	800a3680 	call	800a368 <__sprint_r>
 8004bf8:	1039781e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004bfc:	d9001617 	ldw	r4,88(sp)
 8004c00:	d8c01e17 	ldw	r3,120(sp)
 8004c04:	b811883a 	mov	r8,r23
 8004c08:	003d9306 	br	8004258 <___vfprintf_internal_r+0x13f8>
 8004c0c:	1560003c 	xorhi	r21,r2,32768
 8004c10:	00800b44 	movi	r2,45
 8004c14:	d8800e05 	stb	r2,56(sp)
 8004c18:	003e1b06 	br	8004488 <___vfprintf_internal_r+0x1628>
 8004c1c:	05000184 	movi	r20,6
 8004c20:	003ec106 	br	8004728 <___vfprintf_internal_r+0x18c8>
 8004c24:	002b883a 	mov	r21,zero
 8004c28:	003a0206 	br	8003434 <___vfprintf_internal_r+0x5d4>
 8004c2c:	d9401545 	stb	r5,85(sp)
 8004c30:	00398a06 	br	800325c <___vfprintf_internal_r+0x3fc>
 8004c34:	d9000917 	ldw	r4,36(sp)
 8004c38:	000d883a 	mov	r6,zero
 8004c3c:	000f883a 	mov	r7,zero
 8004c40:	a80b883a 	mov	r5,r21
 8004c44:	da001215 	stw	r8,72(sp)
 8004c48:	dac01015 	stw	r11,64(sp)
 8004c4c:	db000815 	stw	r12,32(sp)
 8004c50:	800e0bc0 	call	800e0bc <__eqdf2>
 8004c54:	db000817 	ldw	r12,32(sp)
 8004c58:	dac01017 	ldw	r11,64(sp)
 8004c5c:	da001217 	ldw	r8,72(sp)
 8004c60:	103f9a26 	beq	r2,zero,8004acc <___vfprintf_internal_r+0x1c6c>
 8004c64:	00800044 	movi	r2,1
 8004c68:	12c5c83a 	sub	r2,r2,r11
 8004c6c:	d8801615 	stw	r2,88(sp)
 8004c70:	003f9706 	br	8004ad0 <___vfprintf_internal_r+0x1c70>
 8004c74:	583dff1e 	bne	r11,zero,8004474 <___vfprintf_internal_r+0x1614>
 8004c78:	02c00044 	movi	r11,1
 8004c7c:	003dfd06 	br	8004474 <___vfprintf_internal_r+0x1614>
 8004c80:	d9000517 	ldw	r4,20(sp)
 8004c84:	d9801c04 	addi	r6,sp,112
 8004c88:	980b883a 	mov	r5,r19
 8004c8c:	800a3680 	call	800a368 <__sprint_r>
 8004c90:	1039521e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004c94:	d9001617 	ldw	r4,88(sp)
 8004c98:	d8c01e17 	ldw	r3,120(sp)
 8004c9c:	d8801d17 	ldw	r2,116(sp)
 8004ca0:	b811883a 	mov	r8,r23
 8004ca4:	203c8e0e 	bge	r4,zero,8003ee0 <___vfprintf_internal_r+0x1080>
 8004ca8:	003f2106 	br	8004930 <___vfprintf_internal_r+0x1ad0>
 8004cac:	d9000517 	ldw	r4,20(sp)
 8004cb0:	d9801c04 	addi	r6,sp,112
 8004cb4:	980b883a 	mov	r5,r19
 8004cb8:	800a3680 	call	800a368 <__sprint_r>
 8004cbc:	1039471e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004cc0:	d8c01e17 	ldw	r3,120(sp)
 8004cc4:	b811883a 	mov	r8,r23
 8004cc8:	003d5406 	br	800421c <___vfprintf_internal_r+0x13bc>
 8004ccc:	d8801a04 	addi	r2,sp,104
 8004cd0:	d8800315 	stw	r2,12(sp)
 8004cd4:	d9400917 	ldw	r5,36(sp)
 8004cd8:	d8801704 	addi	r2,sp,92
 8004cdc:	d9000517 	ldw	r4,20(sp)
 8004ce0:	5d000044 	addi	r20,r11,1
 8004ce4:	d8800215 	stw	r2,8(sp)
 8004ce8:	d8801604 	addi	r2,sp,88
 8004cec:	d8800115 	stw	r2,4(sp)
 8004cf0:	dd000015 	stw	r20,0(sp)
 8004cf4:	01c00084 	movi	r7,2
 8004cf8:	a80d883a 	mov	r6,r21
 8004cfc:	dac00815 	stw	r11,32(sp)
 8004d00:	80054540 	call	8005454 <_dtoa_r>
 8004d04:	dac00817 	ldw	r11,32(sp)
 8004d08:	db001017 	ldw	r12,64(sp)
 8004d0c:	da001217 	ldw	r8,72(sp)
 8004d10:	1023883a 	mov	r17,r2
 8004d14:	e08011d8 	cmpnei	r2,fp,71
 8004d18:	103df926 	beq	r2,zero,8004500 <___vfprintf_internal_r+0x16a0>
 8004d1c:	8d29883a 	add	r20,r17,r20
 8004d20:	003f6c06 	br	8004ad4 <___vfprintf_internal_r+0x1c74>
 8004d24:	d8801a17 	ldw	r2,104(sp)
 8004d28:	01000c04 	movi	r4,48
 8004d2c:	153f762e 	bgeu	r2,r20,8004b08 <___vfprintf_internal_r+0x1ca8>
 8004d30:	10c00044 	addi	r3,r2,1
 8004d34:	d8c01a15 	stw	r3,104(sp)
 8004d38:	11000005 	stb	r4,0(r2)
 8004d3c:	d8801a17 	ldw	r2,104(sp)
 8004d40:	153ffb36 	bltu	r2,r20,8004d30 <___vfprintf_internal_r+0x1ed0>
 8004d44:	003f7006 	br	8004b08 <___vfprintf_internal_r+0x1ca8>
 8004d48:	db401543 	ldbu	r13,85(sp)
 8004d4c:	0017883a 	mov	r11,zero
 8004d50:	003b5e06 	br	8003acc <___vfprintf_internal_r+0xc6c>
 8004d54:	d8800717 	ldw	r2,28(sp)
 8004d58:	d8c00817 	ldw	r3,32(sp)
 8004d5c:	10c02216 	blt	r2,r3,8004de8 <___vfprintf_internal_r+0x1f88>
 8004d60:	6300004c 	andi	r12,r12,1
 8004d64:	6000601e 	bne	r12,zero,8004ee8 <___vfprintf_internal_r+0x2088>
 8004d68:	102b883a 	mov	r21,r2
 8004d6c:	1000010e 	bge	r2,zero,8004d74 <___vfprintf_internal_r+0x1f14>
 8004d70:	002b883a 	mov	r21,zero
 8004d74:	dd000717 	ldw	r20,28(sp)
 8004d78:	070019c4 	movi	fp,103
 8004d7c:	003f7206 	br	8004b48 <___vfprintf_internal_r+0x1ce8>
 8004d80:	d9000517 	ldw	r4,20(sp)
 8004d84:	d9801c04 	addi	r6,sp,112
 8004d88:	980b883a 	mov	r5,r19
 8004d8c:	800a3680 	call	800a368 <__sprint_r>
 8004d90:	1039121e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004d94:	d8c01e17 	ldw	r3,120(sp)
 8004d98:	b811883a 	mov	r8,r23
 8004d9c:	e03d1c0e 	bge	fp,zero,8004210 <___vfprintf_internal_r+0x13b0>
 8004da0:	003e5c06 	br	8004714 <___vfprintf_internal_r+0x18b4>
 8004da4:	02c00184 	movi	r11,6
 8004da8:	003db206 	br	8004474 <___vfprintf_internal_r+0x1614>
 8004dac:	d9000517 	ldw	r4,20(sp)
 8004db0:	d9801c04 	addi	r6,sp,112
 8004db4:	980b883a 	mov	r5,r19
 8004db8:	800a3680 	call	800a368 <__sprint_r>
 8004dbc:	1039071e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004dc0:	d8801617 	ldw	r2,88(sp)
 8004dc4:	d9000817 	ldw	r4,32(sp)
 8004dc8:	d8c01e17 	ldw	r3,120(sp)
 8004dcc:	b811883a 	mov	r8,r23
 8004dd0:	2085c83a 	sub	r2,r4,r2
 8004dd4:	003d3206 	br	80042a0 <___vfprintf_internal_r+0x1440>
 8004dd8:	582b883a 	mov	r21,r11
 8004ddc:	dc800615 	stw	r18,24(sp)
 8004de0:	5829883a 	mov	r20,r11
 8004de4:	0039bb06 	br	80034d4 <___vfprintf_internal_r+0x674>
 8004de8:	d8800817 	ldw	r2,32(sp)
 8004dec:	d8c00b17 	ldw	r3,44(sp)
 8004df0:	10e9883a 	add	r20,r2,r3
 8004df4:	d8800717 	ldw	r2,28(sp)
 8004df8:	00800316 	blt	zero,r2,8004e08 <___vfprintf_internal_r+0x1fa8>
 8004dfc:	d8800717 	ldw	r2,28(sp)
 8004e00:	a0b9c83a 	sub	fp,r20,r2
 8004e04:	e5000044 	addi	r20,fp,1
 8004e08:	a02b883a 	mov	r21,r20
 8004e0c:	a0003b16 	blt	r20,zero,8004efc <___vfprintf_internal_r+0x209c>
 8004e10:	070019c4 	movi	fp,103
 8004e14:	003f4c06 	br	8004b48 <___vfprintf_internal_r+0x1ce8>
 8004e18:	d9401545 	stb	r5,85(sp)
 8004e1c:	003ac006 	br	8003920 <___vfprintf_internal_r+0xac0>
 8004e20:	d9401545 	stb	r5,85(sp)
 8004e24:	003a2006 	br	80036a8 <___vfprintf_internal_r+0x848>
 8004e28:	d9401545 	stb	r5,85(sp)
 8004e2c:	003a2e06 	br	80036e8 <___vfprintf_internal_r+0x888>
 8004e30:	d9401545 	stb	r5,85(sp)
 8004e34:	00398306 	br	8003444 <___vfprintf_internal_r+0x5e4>
 8004e38:	d9401545 	stb	r5,85(sp)
 8004e3c:	00395a06 	br	80033a8 <___vfprintf_internal_r+0x548>
 8004e40:	d9401545 	stb	r5,85(sp)
 8004e44:	00394606 	br	8003360 <___vfprintf_internal_r+0x500>
 8004e48:	d9401545 	stb	r5,85(sp)
 8004e4c:	003a3606 	br	8003728 <___vfprintf_internal_r+0x8c8>
 8004e50:	d9401545 	stb	r5,85(sp)
 8004e54:	003a7c06 	br	8003848 <___vfprintf_internal_r+0x9e8>
 8004e58:	d9401545 	stb	r5,85(sp)
 8004e5c:	003a4206 	br	8003768 <___vfprintf_internal_r+0x908>
 8004e60:	d9401545 	stb	r5,85(sp)
 8004e64:	003ac006 	br	8003968 <___vfprintf_internal_r+0xb08>
 8004e68:	8819883a 	mov	r12,r17
 8004e6c:	dc400717 	ldw	r17,28(sp)
 8004e70:	a009883a 	mov	r4,r20
 8004e74:	8029883a 	mov	r20,r16
 8004e78:	2021883a 	mov	r16,r4
 8004e7c:	10800044 	addi	r2,r2,1
 8004e80:	1d07883a 	add	r3,r3,r20
 8004e84:	43000015 	stw	r12,0(r8)
 8004e88:	45000115 	stw	r20,4(r8)
 8004e8c:	d8c01e15 	stw	r3,120(sp)
 8004e90:	d8801d15 	stw	r2,116(sp)
 8004e94:	11000208 	cmpgei	r4,r2,8
 8004e98:	203c1026 	beq	r4,zero,8003edc <___vfprintf_internal_r+0x107c>
 8004e9c:	d9000517 	ldw	r4,20(sp)
 8004ea0:	d9801c04 	addi	r6,sp,112
 8004ea4:	980b883a 	mov	r5,r19
 8004ea8:	800a3680 	call	800a368 <__sprint_r>
 8004eac:	1038cb1e 	bne	r2,zero,80031dc <___vfprintf_internal_r+0x37c>
 8004eb0:	d8c01e17 	ldw	r3,120(sp)
 8004eb4:	d8801d17 	ldw	r2,116(sp)
 8004eb8:	b811883a 	mov	r8,r23
 8004ebc:	003c0806 	br	8003ee0 <___vfprintf_internal_r+0x1080>
 8004ec0:	00bfffc4 	movi	r2,-1
 8004ec4:	d8800415 	stw	r2,16(sp)
 8004ec8:	0038c706 	br	80031e8 <___vfprintf_internal_r+0x388>
 8004ecc:	00800c04 	movi	r2,48
 8004ed0:	a0c00c04 	addi	r3,r20,48
 8004ed4:	d88018c5 	stb	r2,99(sp)
 8004ed8:	00800104 	movi	r2,4
 8004edc:	d8c01905 	stb	r3,100(sp)
 8004ee0:	d8801115 	stw	r2,68(sp)
 8004ee4:	003dca06 	br	8004610 <___vfprintf_internal_r+0x17b0>
 8004ee8:	d8800717 	ldw	r2,28(sp)
 8004eec:	d8c00b17 	ldw	r3,44(sp)
 8004ef0:	10e9883a 	add	r20,r2,r3
 8004ef4:	a02b883a 	mov	r21,r20
 8004ef8:	a03fc50e 	bge	r20,zero,8004e10 <___vfprintf_internal_r+0x1fb0>
 8004efc:	002b883a 	mov	r21,zero
 8004f00:	003fc306 	br	8004e10 <___vfprintf_internal_r+0x1fb0>
 8004f04:	d8800b17 	ldw	r2,44(sp)
 8004f08:	1885883a 	add	r2,r3,r2
 8004f0c:	12e9883a 	add	r20,r2,r11
 8004f10:	a02b883a 	mov	r21,r20
 8004f14:	a03f0c0e 	bge	r20,zero,8004b48 <___vfprintf_internal_r+0x1ce8>
 8004f18:	002b883a 	mov	r21,zero
 8004f1c:	003f0a06 	br	8004b48 <___vfprintf_internal_r+0x1ce8>
 8004f20:	d8800a17 	ldw	r2,40(sp)
 8004f24:	10001d16 	blt	r2,zero,8004f9c <___vfprintf_internal_r+0x213c>
 8004f28:	db401543 	ldbu	r13,85(sp)
 8004f2c:	e0801210 	cmplti	r2,fp,72
 8004f30:	1000171e 	bne	r2,zero,8004f90 <___vfprintf_internal_r+0x2130>
 8004f34:	04420074 	movhi	r17,2049
 8004f38:	8c48ea04 	addi	r17,r17,9128
 8004f3c:	003a3906 	br	8003824 <___vfprintf_internal_r+0x9c4>
 8004f40:	00c00044 	movi	r3,1
 8004f44:	18a9c83a 	sub	r20,r3,r2
 8004f48:	00800b44 	movi	r2,45
 8004f4c:	d8801885 	stb	r2,98(sp)
 8004f50:	003d8106 	br	8004558 <___vfprintf_internal_r+0x16f8>
 8004f54:	6080004c 	andi	r2,r12,1
 8004f58:	d8800715 	stw	r2,28(sp)
 8004f5c:	103db11e 	bne	r2,zero,8004624 <___vfprintf_internal_r+0x17c4>
 8004f60:	003feb06 	br	8004f10 <___vfprintf_internal_r+0x20b0>
 8004f64:	4005883a 	mov	r2,r8
 8004f68:	6308f784 	addi	r12,r12,9182
 8004f6c:	003ea206 	br	80049f8 <___vfprintf_internal_r+0x1b98>
 8004f70:	1000031e 	bne	r2,zero,8004f80 <___vfprintf_internal_r+0x2120>
 8004f74:	05400044 	movi	r21,1
 8004f78:	05000044 	movi	r20,1
 8004f7c:	003ef206 	br	8004b48 <___vfprintf_internal_r+0x1ce8>
 8004f80:	d8800b17 	ldw	r2,44(sp)
 8004f84:	10800044 	addi	r2,r2,1
 8004f88:	12e9883a 	add	r20,r2,r11
 8004f8c:	003fe006 	br	8004f10 <___vfprintf_internal_r+0x20b0>
 8004f90:	04420074 	movhi	r17,2049
 8004f94:	8c48e904 	addi	r17,r17,9124
 8004f98:	003a2206 	br	8003824 <___vfprintf_internal_r+0x9c4>
 8004f9c:	00800b44 	movi	r2,45
 8004fa0:	d8801545 	stb	r2,85(sp)
 8004fa4:	03400b44 	movi	r13,45
 8004fa8:	003fe006 	br	8004f2c <___vfprintf_internal_r+0x20cc>
 8004fac:	00800084 	movi	r2,2
 8004fb0:	d8801115 	stw	r2,68(sp)
 8004fb4:	003d9606 	br	8004610 <___vfprintf_internal_r+0x17b0>
 8004fb8:	d8c00617 	ldw	r3,24(sp)
 8004fbc:	1ac00017 	ldw	r11,0(r3)
 8004fc0:	18c00104 	addi	r3,r3,4
 8004fc4:	5800010e 	bge	r11,zero,8004fcc <___vfprintf_internal_r+0x216c>
 8004fc8:	02ffffc4 	movi	r11,-1
 8004fcc:	b7000043 	ldbu	fp,1(r22)
 8004fd0:	d8c00615 	stw	r3,24(sp)
 8004fd4:	102d883a 	mov	r22,r2
 8004fd8:	e2803fcc 	andi	r10,fp,255
 8004fdc:	5280201c 	xori	r10,r10,128
 8004fe0:	52bfe004 	addi	r10,r10,-128
 8004fe4:	0037f906 	br	8002fcc <___vfprintf_internal_r+0x16c>

08004fe8 <__vfprintf_internal>:
 8004fe8:	00820074 	movhi	r2,2049
 8004fec:	300f883a 	mov	r7,r6
 8004ff0:	280d883a 	mov	r6,r5
 8004ff4:	200b883a 	mov	r5,r4
 8004ff8:	11114117 	ldw	r4,17668(r2)
 8004ffc:	8002e601 	jmpi	8002e60 <___vfprintf_internal_r>

08005000 <__sbprintf>:
 8005000:	2880030b 	ldhu	r2,12(r5)
 8005004:	2b001917 	ldw	r12,100(r5)
 8005008:	2ac0038b 	ldhu	r11,14(r5)
 800500c:	2a800717 	ldw	r10,28(r5)
 8005010:	2a400917 	ldw	r9,36(r5)
 8005014:	defee204 	addi	sp,sp,-1144
 8005018:	da001a04 	addi	r8,sp,104
 800501c:	00c10004 	movi	r3,1024
 8005020:	dc011a15 	stw	r16,1128(sp)
 8005024:	10bfff4c 	andi	r2,r2,65533
 8005028:	2821883a 	mov	r16,r5
 800502c:	d80b883a 	mov	r5,sp
 8005030:	dc811c15 	stw	r18,1136(sp)
 8005034:	dc411b15 	stw	r17,1132(sp)
 8005038:	dfc11d15 	stw	ra,1140(sp)
 800503c:	2025883a 	mov	r18,r4
 8005040:	d880030d 	sth	r2,12(sp)
 8005044:	db001915 	stw	r12,100(sp)
 8005048:	dac0038d 	sth	r11,14(sp)
 800504c:	da800715 	stw	r10,28(sp)
 8005050:	da400915 	stw	r9,36(sp)
 8005054:	da000015 	stw	r8,0(sp)
 8005058:	da000415 	stw	r8,16(sp)
 800505c:	d8c00215 	stw	r3,8(sp)
 8005060:	d8c00515 	stw	r3,20(sp)
 8005064:	d8000615 	stw	zero,24(sp)
 8005068:	8002e600 	call	8002e60 <___vfprintf_internal_r>
 800506c:	1023883a 	mov	r17,r2
 8005070:	10000d0e 	bge	r2,zero,80050a8 <__sbprintf+0xa8>
 8005074:	d880030b 	ldhu	r2,12(sp)
 8005078:	1080100c 	andi	r2,r2,64
 800507c:	10000326 	beq	r2,zero,800508c <__sbprintf+0x8c>
 8005080:	8080030b 	ldhu	r2,12(r16)
 8005084:	10801014 	ori	r2,r2,64
 8005088:	8080030d 	sth	r2,12(r16)
 800508c:	8805883a 	mov	r2,r17
 8005090:	dfc11d17 	ldw	ra,1140(sp)
 8005094:	dc811c17 	ldw	r18,1136(sp)
 8005098:	dc411b17 	ldw	r17,1132(sp)
 800509c:	dc011a17 	ldw	r16,1128(sp)
 80050a0:	dec11e04 	addi	sp,sp,1144
 80050a4:	f800283a 	ret
 80050a8:	d80b883a 	mov	r5,sp
 80050ac:	9009883a 	mov	r4,r18
 80050b0:	8006d440 	call	8006d44 <_fflush_r>
 80050b4:	103fef26 	beq	r2,zero,8005074 <__sbprintf+0x74>
 80050b8:	047fffc4 	movi	r17,-1
 80050bc:	003fed06 	br	8005074 <__sbprintf+0x74>

080050c0 <__swsetup_r>:
 80050c0:	00820074 	movhi	r2,2049
 80050c4:	10914117 	ldw	r2,17668(r2)
 80050c8:	defffd04 	addi	sp,sp,-12
 80050cc:	dc400115 	stw	r17,4(sp)
 80050d0:	dc000015 	stw	r16,0(sp)
 80050d4:	dfc00215 	stw	ra,8(sp)
 80050d8:	2023883a 	mov	r17,r4
 80050dc:	2821883a 	mov	r16,r5
 80050e0:	10000226 	beq	r2,zero,80050ec <__swsetup_r+0x2c>
 80050e4:	10c00e17 	ldw	r3,56(r2)
 80050e8:	18002026 	beq	r3,zero,800516c <__swsetup_r+0xac>
 80050ec:	8080030b 	ldhu	r2,12(r16)
 80050f0:	10c0020c 	andi	r3,r2,8
 80050f4:	1009883a 	mov	r4,r2
 80050f8:	18002226 	beq	r3,zero,8005184 <__swsetup_r+0xc4>
 80050fc:	80c00417 	ldw	r3,16(r16)
 8005100:	18002826 	beq	r3,zero,80051a4 <__swsetup_r+0xe4>
 8005104:	1100004c 	andi	r4,r2,1
 8005108:	20000b1e 	bne	r4,zero,8005138 <__swsetup_r+0x78>
 800510c:	1080008c 	andi	r2,r2,2
 8005110:	10002d1e 	bne	r2,zero,80051c8 <__swsetup_r+0x108>
 8005114:	80800517 	ldw	r2,20(r16)
 8005118:	80800215 	stw	r2,8(r16)
 800511c:	18000b26 	beq	r3,zero,800514c <__swsetup_r+0x8c>
 8005120:	0005883a 	mov	r2,zero
 8005124:	dfc00217 	ldw	ra,8(sp)
 8005128:	dc400117 	ldw	r17,4(sp)
 800512c:	dc000017 	ldw	r16,0(sp)
 8005130:	dec00304 	addi	sp,sp,12
 8005134:	f800283a 	ret
 8005138:	80800517 	ldw	r2,20(r16)
 800513c:	80000215 	stw	zero,8(r16)
 8005140:	0085c83a 	sub	r2,zero,r2
 8005144:	80800615 	stw	r2,24(r16)
 8005148:	183ff51e 	bne	r3,zero,8005120 <__swsetup_r+0x60>
 800514c:	80c0030b 	ldhu	r3,12(r16)
 8005150:	0005883a 	mov	r2,zero
 8005154:	1900200c 	andi	r4,r3,128
 8005158:	203ff226 	beq	r4,zero,8005124 <__swsetup_r+0x64>
 800515c:	18c01014 	ori	r3,r3,64
 8005160:	80c0030d 	sth	r3,12(r16)
 8005164:	00bfffc4 	movi	r2,-1
 8005168:	003fee06 	br	8005124 <__swsetup_r+0x64>
 800516c:	1009883a 	mov	r4,r2
 8005170:	80070d80 	call	80070d8 <__sinit>
 8005174:	8080030b 	ldhu	r2,12(r16)
 8005178:	10c0020c 	andi	r3,r2,8
 800517c:	1009883a 	mov	r4,r2
 8005180:	183fde1e 	bne	r3,zero,80050fc <__swsetup_r+0x3c>
 8005184:	2080040c 	andi	r2,r4,16
 8005188:	10001f26 	beq	r2,zero,8005208 <__swsetup_r+0x148>
 800518c:	2080010c 	andi	r2,r4,4
 8005190:	10000f1e 	bne	r2,zero,80051d0 <__swsetup_r+0x110>
 8005194:	80c00417 	ldw	r3,16(r16)
 8005198:	20800214 	ori	r2,r4,8
 800519c:	8080030d 	sth	r2,12(r16)
 80051a0:	183fd81e 	bne	r3,zero,8005104 <__swsetup_r+0x44>
 80051a4:	1100a00c 	andi	r4,r2,640
 80051a8:	21008020 	cmpeqi	r4,r4,512
 80051ac:	203fd51e 	bne	r4,zero,8005104 <__swsetup_r+0x44>
 80051b0:	800b883a 	mov	r5,r16
 80051b4:	8809883a 	mov	r4,r17
 80051b8:	8007c1c0 	call	8007c1c <__smakebuf_r>
 80051bc:	8080030b 	ldhu	r2,12(r16)
 80051c0:	80c00417 	ldw	r3,16(r16)
 80051c4:	003fcf06 	br	8005104 <__swsetup_r+0x44>
 80051c8:	0005883a 	mov	r2,zero
 80051cc:	003fd206 	br	8005118 <__swsetup_r+0x58>
 80051d0:	81400c17 	ldw	r5,48(r16)
 80051d4:	28000626 	beq	r5,zero,80051f0 <__swsetup_r+0x130>
 80051d8:	80801004 	addi	r2,r16,64
 80051dc:	28800326 	beq	r5,r2,80051ec <__swsetup_r+0x12c>
 80051e0:	8809883a 	mov	r4,r17
 80051e4:	800723c0 	call	800723c <_free_r>
 80051e8:	8100030b 	ldhu	r4,12(r16)
 80051ec:	80000c15 	stw	zero,48(r16)
 80051f0:	80c00417 	ldw	r3,16(r16)
 80051f4:	00bff6c4 	movi	r2,-37
 80051f8:	1108703a 	and	r4,r2,r4
 80051fc:	80000115 	stw	zero,4(r16)
 8005200:	80c00015 	stw	r3,0(r16)
 8005204:	003fe406 	br	8005198 <__swsetup_r+0xd8>
 8005208:	00800244 	movi	r2,9
 800520c:	88800015 	stw	r2,0(r17)
 8005210:	20801014 	ori	r2,r4,64
 8005214:	8080030d 	sth	r2,12(r16)
 8005218:	00bfffc4 	movi	r2,-1
 800521c:	003fc106 	br	8005124 <__swsetup_r+0x64>

08005220 <quorem>:
 8005220:	defff204 	addi	sp,sp,-56
 8005224:	dc000415 	stw	r16,16(sp)
 8005228:	20800417 	ldw	r2,16(r4)
 800522c:	2c000417 	ldw	r16,16(r5)
 8005230:	dfc00d15 	stw	ra,52(sp)
 8005234:	df000c15 	stw	fp,48(sp)
 8005238:	ddc00b15 	stw	r23,44(sp)
 800523c:	dd800a15 	stw	r22,40(sp)
 8005240:	dd400915 	stw	r21,36(sp)
 8005244:	dd000815 	stw	r20,32(sp)
 8005248:	dcc00715 	stw	r19,28(sp)
 800524c:	dc800615 	stw	r18,24(sp)
 8005250:	dc400515 	stw	r17,20(sp)
 8005254:	14007d16 	blt	r2,r16,800544c <quorem+0x22c>
 8005258:	843fffc4 	addi	r16,r16,-1
 800525c:	802c90ba 	slli	r22,r16,2
 8005260:	2f000504 	addi	fp,r5,20
 8005264:	24c00504 	addi	r19,r4,20
 8005268:	e5a5883a 	add	r18,fp,r22
 800526c:	9d85883a 	add	r2,r19,r22
 8005270:	95c00017 	ldw	r23,0(r18)
 8005274:	15000017 	ldw	r20,0(r2)
 8005278:	d9400215 	stw	r5,8(sp)
 800527c:	bdc00044 	addi	r23,r23,1
 8005280:	d9000115 	stw	r4,4(sp)
 8005284:	b80b883a 	mov	r5,r23
 8005288:	a009883a 	mov	r4,r20
 800528c:	dcc00015 	stw	r19,0(sp)
 8005290:	d8800315 	stw	r2,12(sp)
 8005294:	8002b7c0 	call	8002b7c <__udivsi3>
 8005298:	1023883a 	mov	r17,r2
 800529c:	a5c03236 	bltu	r20,r23,8005368 <quorem+0x148>
 80052a0:	e02d883a 	mov	r22,fp
 80052a4:	9829883a 	mov	r20,r19
 80052a8:	002b883a 	mov	r21,zero
 80052ac:	002f883a 	mov	r23,zero
 80052b0:	b5800104 	addi	r22,r22,4
 80052b4:	b4ffff17 	ldw	r19,-4(r22)
 80052b8:	880b883a 	mov	r5,r17
 80052bc:	a5000104 	addi	r20,r20,4
 80052c0:	993fffcc 	andi	r4,r19,65535
 80052c4:	8002c3c0 	call	8002c3c <__mulsi3>
 80052c8:	9808d43a 	srli	r4,r19,16
 80052cc:	880b883a 	mov	r5,r17
 80052d0:	156b883a 	add	r21,r2,r21
 80052d4:	8002c3c0 	call	8002c3c <__mulsi3>
 80052d8:	a0ffff17 	ldw	r3,-4(r20)
 80052dc:	a80ad43a 	srli	r5,r21,16
 80052e0:	a93fffcc 	andi	r4,r21,65535
 80052e4:	b909c83a 	sub	r4,r23,r4
 80052e8:	19bfffcc 	andi	r6,r3,65535
 80052ec:	2189883a 	add	r4,r4,r6
 80052f0:	1806d43a 	srli	r3,r3,16
 80052f4:	116b883a 	add	r21,r2,r5
 80052f8:	2005d43a 	srai	r2,r4,16
 80052fc:	a97fffcc 	andi	r5,r21,65535
 8005300:	1947c83a 	sub	r3,r3,r5
 8005304:	1887883a 	add	r3,r3,r2
 8005308:	1804943a 	slli	r2,r3,16
 800530c:	213fffcc 	andi	r4,r4,65535
 8005310:	a82ad43a 	srli	r21,r21,16
 8005314:	1108b03a 	or	r4,r2,r4
 8005318:	a13fff15 	stw	r4,-4(r20)
 800531c:	182fd43a 	srai	r23,r3,16
 8005320:	95bfe32e 	bgeu	r18,r22,80052b0 <quorem+0x90>
 8005324:	d8c00317 	ldw	r3,12(sp)
 8005328:	18800017 	ldw	r2,0(r3)
 800532c:	10000e1e 	bne	r2,zero,8005368 <quorem+0x148>
 8005330:	d9000017 	ldw	r4,0(sp)
 8005334:	18bfff04 	addi	r2,r3,-4
 8005338:	2080092e 	bgeu	r4,r2,8005360 <quorem+0x140>
 800533c:	18ffff17 	ldw	r3,-4(r3)
 8005340:	18000326 	beq	r3,zero,8005350 <quorem+0x130>
 8005344:	00000606 	br	8005360 <quorem+0x140>
 8005348:	10c00017 	ldw	r3,0(r2)
 800534c:	1800041e 	bne	r3,zero,8005360 <quorem+0x140>
 8005350:	d8c00017 	ldw	r3,0(sp)
 8005354:	10bfff04 	addi	r2,r2,-4
 8005358:	843fffc4 	addi	r16,r16,-1
 800535c:	18bffa36 	bltu	r3,r2,8005348 <quorem+0x128>
 8005360:	d8800117 	ldw	r2,4(sp)
 8005364:	14000415 	stw	r16,16(r2)
 8005368:	d9400217 	ldw	r5,8(sp)
 800536c:	d9000117 	ldw	r4,4(sp)
 8005370:	80092500 	call	8009250 <__mcmp>
 8005374:	10002816 	blt	r2,zero,8005418 <quorem+0x1f8>
 8005378:	d9800017 	ldw	r6,0(sp)
 800537c:	8c400044 	addi	r17,r17,1
 8005380:	0007883a 	mov	r3,zero
 8005384:	e7000104 	addi	fp,fp,4
 8005388:	e13fff17 	ldw	r4,-4(fp)
 800538c:	31400017 	ldw	r5,0(r6)
 8005390:	31800104 	addi	r6,r6,4
 8005394:	20bfffcc 	andi	r2,r4,65535
 8005398:	1887c83a 	sub	r3,r3,r2
 800539c:	28bfffcc 	andi	r2,r5,65535
 80053a0:	1885883a 	add	r2,r3,r2
 80053a4:	2008d43a 	srli	r4,r4,16
 80053a8:	2806d43a 	srli	r3,r5,16
 80053ac:	100fd43a 	srai	r7,r2,16
 80053b0:	117fffcc 	andi	r5,r2,65535
 80053b4:	1907c83a 	sub	r3,r3,r4
 80053b8:	19c7883a 	add	r3,r3,r7
 80053bc:	1804943a 	slli	r2,r3,16
 80053c0:	1807d43a 	srai	r3,r3,16
 80053c4:	1144b03a 	or	r2,r2,r5
 80053c8:	30bfff15 	stw	r2,-4(r6)
 80053cc:	973fed2e 	bgeu	r18,fp,8005384 <quorem+0x164>
 80053d0:	800690ba 	slli	r3,r16,2
 80053d4:	d9000017 	ldw	r4,0(sp)
 80053d8:	20c7883a 	add	r3,r4,r3
 80053dc:	18800017 	ldw	r2,0(r3)
 80053e0:	10000d1e 	bne	r2,zero,8005418 <quorem+0x1f8>
 80053e4:	18bfff04 	addi	r2,r3,-4
 80053e8:	2080092e 	bgeu	r4,r2,8005410 <quorem+0x1f0>
 80053ec:	18ffff17 	ldw	r3,-4(r3)
 80053f0:	18000326 	beq	r3,zero,8005400 <quorem+0x1e0>
 80053f4:	00000606 	br	8005410 <quorem+0x1f0>
 80053f8:	10c00017 	ldw	r3,0(r2)
 80053fc:	1800041e 	bne	r3,zero,8005410 <quorem+0x1f0>
 8005400:	d8c00017 	ldw	r3,0(sp)
 8005404:	10bfff04 	addi	r2,r2,-4
 8005408:	843fffc4 	addi	r16,r16,-1
 800540c:	18bffa36 	bltu	r3,r2,80053f8 <quorem+0x1d8>
 8005410:	d8800117 	ldw	r2,4(sp)
 8005414:	14000415 	stw	r16,16(r2)
 8005418:	8805883a 	mov	r2,r17
 800541c:	dfc00d17 	ldw	ra,52(sp)
 8005420:	df000c17 	ldw	fp,48(sp)
 8005424:	ddc00b17 	ldw	r23,44(sp)
 8005428:	dd800a17 	ldw	r22,40(sp)
 800542c:	dd400917 	ldw	r21,36(sp)
 8005430:	dd000817 	ldw	r20,32(sp)
 8005434:	dcc00717 	ldw	r19,28(sp)
 8005438:	dc800617 	ldw	r18,24(sp)
 800543c:	dc400517 	ldw	r17,20(sp)
 8005440:	dc000417 	ldw	r16,16(sp)
 8005444:	dec00e04 	addi	sp,sp,56
 8005448:	f800283a 	ret
 800544c:	0005883a 	mov	r2,zero
 8005450:	003ff206 	br	800541c <quorem+0x1fc>

08005454 <_dtoa_r>:
 8005454:	20801017 	ldw	r2,64(r4)
 8005458:	deffe204 	addi	sp,sp,-120
 800545c:	df001c15 	stw	fp,112(sp)
 8005460:	dcc01715 	stw	r19,92(sp)
 8005464:	dc401515 	stw	r17,84(sp)
 8005468:	dc001415 	stw	r16,80(sp)
 800546c:	dfc01d15 	stw	ra,116(sp)
 8005470:	ddc01b15 	stw	r23,108(sp)
 8005474:	dd801a15 	stw	r22,104(sp)
 8005478:	dd401915 	stw	r21,100(sp)
 800547c:	dd001815 	stw	r20,96(sp)
 8005480:	dc801615 	stw	r18,88(sp)
 8005484:	d9400115 	stw	r5,4(sp)
 8005488:	d9c00215 	stw	r7,8(sp)
 800548c:	2039883a 	mov	fp,r4
 8005490:	3027883a 	mov	r19,r6
 8005494:	dc002017 	ldw	r16,128(sp)
 8005498:	3023883a 	mov	r17,r6
 800549c:	10000826 	beq	r2,zero,80054c0 <_dtoa_r+0x6c>
 80054a0:	21801117 	ldw	r6,68(r4)
 80054a4:	00c00044 	movi	r3,1
 80054a8:	100b883a 	mov	r5,r2
 80054ac:	1986983a 	sll	r3,r3,r6
 80054b0:	11800115 	stw	r6,4(r2)
 80054b4:	10c00215 	stw	r3,8(r2)
 80054b8:	80089f40 	call	80089f4 <_Bfree>
 80054bc:	e0001015 	stw	zero,64(fp)
 80054c0:	98018116 	blt	r19,zero,8005ac8 <_dtoa_r+0x674>
 80054c4:	80000015 	stw	zero,0(r16)
 80054c8:	989ffc2c 	andhi	r2,r19,32752
 80054cc:	00dffc34 	movhi	r3,32752
 80054d0:	10c18626 	beq	r2,r3,8005aec <_dtoa_r+0x698>
 80054d4:	d9000117 	ldw	r4,4(sp)
 80054d8:	000d883a 	mov	r6,zero
 80054dc:	000f883a 	mov	r7,zero
 80054e0:	880b883a 	mov	r5,r17
 80054e4:	800e0bc0 	call	800e0bc <__eqdf2>
 80054e8:	1000191e 	bne	r2,zero,8005550 <_dtoa_r+0xfc>
 80054ec:	d8c01f17 	ldw	r3,124(sp)
 80054f0:	00800044 	movi	r2,1
 80054f4:	18800015 	stw	r2,0(r3)
 80054f8:	d8802117 	ldw	r2,132(sp)
 80054fc:	10032426 	beq	r2,zero,8006190 <_dtoa_r+0xd3c>
 8005500:	d9002117 	ldw	r4,132(sp)
 8005504:	00820074 	movhi	r2,2049
 8005508:	1088f744 	addi	r2,r2,9181
 800550c:	00c20074 	movhi	r3,2049
 8005510:	20800015 	stw	r2,0(r4)
 8005514:	1888f704 	addi	r2,r3,9180
 8005518:	d8800315 	stw	r2,12(sp)
 800551c:	d8800317 	ldw	r2,12(sp)
 8005520:	dfc01d17 	ldw	ra,116(sp)
 8005524:	df001c17 	ldw	fp,112(sp)
 8005528:	ddc01b17 	ldw	r23,108(sp)
 800552c:	dd801a17 	ldw	r22,104(sp)
 8005530:	dd401917 	ldw	r21,100(sp)
 8005534:	dd001817 	ldw	r20,96(sp)
 8005538:	dcc01717 	ldw	r19,92(sp)
 800553c:	dc801617 	ldw	r18,88(sp)
 8005540:	dc401517 	ldw	r17,84(sp)
 8005544:	dc001417 	ldw	r16,80(sp)
 8005548:	dec01e04 	addi	sp,sp,120
 800554c:	f800283a 	ret
 8005550:	dc800117 	ldw	r18,4(sp)
 8005554:	d8801204 	addi	r2,sp,72
 8005558:	9820d53a 	srli	r16,r19,20
 800555c:	d8800015 	stw	r2,0(sp)
 8005560:	d9c01304 	addi	r7,sp,76
 8005564:	900b883a 	mov	r5,r18
 8005568:	880d883a 	mov	r6,r17
 800556c:	e009883a 	mov	r4,fp
 8005570:	80095c40 	call	80095c4 <__d2b>
 8005574:	102b883a 	mov	r21,r2
 8005578:	8001701e 	bne	r16,zero,8005b3c <_dtoa_r+0x6e8>
 800557c:	dc801217 	ldw	r18,72(sp)
 8005580:	dc001317 	ldw	r16,76(sp)
 8005584:	9421883a 	add	r16,r18,r16
 8005588:	80810c84 	addi	r2,r16,1074
 800558c:	10c00850 	cmplti	r3,r2,33
 8005590:	18030f1e 	bne	r3,zero,80061d0 <_dtoa_r+0xd7c>
 8005594:	01001004 	movi	r4,64
 8005598:	2085c83a 	sub	r2,r4,r2
 800559c:	98a6983a 	sll	r19,r19,r2
 80055a0:	d8800117 	ldw	r2,4(sp)
 80055a4:	81010484 	addi	r4,r16,1042
 80055a8:	1108d83a 	srl	r4,r2,r4
 80055ac:	9908b03a 	or	r4,r19,r4
 80055b0:	800f6040 	call	800f604 <__floatunsidf>
 80055b4:	1009883a 	mov	r4,r2
 80055b8:	017f8434 	movhi	r5,65040
 80055bc:	00800044 	movi	r2,1
 80055c0:	194b883a 	add	r5,r3,r5
 80055c4:	843fffc4 	addi	r16,r16,-1
 80055c8:	d8800a15 	stw	r2,40(sp)
 80055cc:	000d883a 	mov	r6,zero
 80055d0:	01cffe34 	movhi	r7,16376
 80055d4:	800eafc0 	call	800eafc <__subdf3>
 80055d8:	0198dbf4 	movhi	r6,25455
 80055dc:	01cff4f4 	movhi	r7,16339
 80055e0:	3190d844 	addi	r6,r6,17249
 80055e4:	39e1e9c4 	addi	r7,r7,-30809
 80055e8:	1009883a 	mov	r4,r2
 80055ec:	180b883a 	mov	r5,r3
 80055f0:	800e31c0 	call	800e31c <__muldf3>
 80055f4:	01a2d874 	movhi	r6,35681
 80055f8:	01cff1f4 	movhi	r7,16327
 80055fc:	31b22cc4 	addi	r6,r6,-14157
 8005600:	39e28a04 	addi	r7,r7,-30168
 8005604:	180b883a 	mov	r5,r3
 8005608:	1009883a 	mov	r4,r2
 800560c:	800cdb80 	call	800cdb8 <__adddf3>
 8005610:	8009883a 	mov	r4,r16
 8005614:	1029883a 	mov	r20,r2
 8005618:	1827883a 	mov	r19,r3
 800561c:	800f53c0 	call	800f53c <__floatsidf>
 8005620:	019427f4 	movhi	r6,20639
 8005624:	01cff4f4 	movhi	r7,16339
 8005628:	319e7ec4 	addi	r6,r6,31227
 800562c:	39d104c4 	addi	r7,r7,17427
 8005630:	1009883a 	mov	r4,r2
 8005634:	180b883a 	mov	r5,r3
 8005638:	800e31c0 	call	800e31c <__muldf3>
 800563c:	100d883a 	mov	r6,r2
 8005640:	180f883a 	mov	r7,r3
 8005644:	a009883a 	mov	r4,r20
 8005648:	980b883a 	mov	r5,r19
 800564c:	800cdb80 	call	800cdb8 <__adddf3>
 8005650:	1009883a 	mov	r4,r2
 8005654:	180b883a 	mov	r5,r3
 8005658:	1029883a 	mov	r20,r2
 800565c:	1827883a 	mov	r19,r3
 8005660:	800f4bc0 	call	800f4bc <__fixdfsi>
 8005664:	000d883a 	mov	r6,zero
 8005668:	000f883a 	mov	r7,zero
 800566c:	a009883a 	mov	r4,r20
 8005670:	980b883a 	mov	r5,r19
 8005674:	102d883a 	mov	r22,r2
 8005678:	800e22c0 	call	800e22c <__ledf2>
 800567c:	1002ba16 	blt	r2,zero,8006168 <_dtoa_r+0xd14>
 8005680:	9421c83a 	sub	r16,r18,r16
 8005684:	b08005e8 	cmpgeui	r2,r22,23
 8005688:	853fffc4 	addi	r20,r16,-1
 800568c:	1002ae1e 	bne	r2,zero,8006148 <_dtoa_r+0xcf4>
 8005690:	b00690fa 	slli	r3,r22,3
 8005694:	00820074 	movhi	r2,2049
 8005698:	10891b04 	addi	r2,r2,9324
 800569c:	10c5883a 	add	r2,r2,r3
 80056a0:	11800017 	ldw	r6,0(r2)
 80056a4:	11c00117 	ldw	r7,4(r2)
 80056a8:	d9000117 	ldw	r4,4(sp)
 80056ac:	880b883a 	mov	r5,r17
 80056b0:	800e22c0 	call	800e22c <__ledf2>
 80056b4:	10026f0e 	bge	r2,zero,8006074 <_dtoa_r+0xc20>
 80056b8:	d8000915 	stw	zero,36(sp)
 80056bc:	b5bfffc4 	addi	r22,r22,-1
 80056c0:	a002a416 	blt	r20,zero,8006154 <_dtoa_r+0xd00>
 80056c4:	d8000515 	stw	zero,20(sp)
 80056c8:	b0026d0e 	bge	r22,zero,8006080 <_dtoa_r+0xc2c>
 80056cc:	d8800517 	ldw	r2,20(sp)
 80056d0:	d8c00217 	ldw	r3,8(sp)
 80056d4:	dd800415 	stw	r22,16(sp)
 80056d8:	1585c83a 	sub	r2,r2,r22
 80056dc:	d8800515 	stw	r2,20(sp)
 80056e0:	0585c83a 	sub	r2,zero,r22
 80056e4:	d8800815 	stw	r2,32(sp)
 80056e8:	188002a8 	cmpgeui	r2,r3,10
 80056ec:	002d883a 	mov	r22,zero
 80056f0:	1002691e 	bne	r2,zero,8006098 <_dtoa_r+0xc44>
 80056f4:	18800190 	cmplti	r2,r3,6
 80056f8:	1002ba1e 	bne	r2,zero,80061e4 <_dtoa_r+0xd90>
 80056fc:	18bfff04 	addi	r2,r3,-4
 8005700:	d8800215 	stw	r2,8(sp)
 8005704:	0021883a 	mov	r16,zero
 8005708:	d8c00217 	ldw	r3,8(sp)
 800570c:	188000e0 	cmpeqi	r2,r3,3
 8005710:	10039d1e 	bne	r2,zero,8006588 <_dtoa_r+0x1134>
 8005714:	18800108 	cmpgei	r2,r3,4
 8005718:	10027a26 	beq	r2,zero,8006104 <_dtoa_r+0xcb0>
 800571c:	d8c00217 	ldw	r3,8(sp)
 8005720:	18800120 	cmpeqi	r2,r3,4
 8005724:	10026926 	beq	r2,zero,80060cc <_dtoa_r+0xc78>
 8005728:	00800044 	movi	r2,1
 800572c:	d8800715 	stw	r2,28(sp)
 8005730:	d8801e17 	ldw	r2,120(sp)
 8005734:	0083670e 	bge	zero,r2,80064d4 <_dtoa_r+0x1080>
 8005738:	d8800b15 	stw	r2,44(sp)
 800573c:	d8800615 	stw	r2,24(sp)
 8005740:	100d883a 	mov	r6,r2
 8005744:	e0001115 	stw	zero,68(fp)
 8005748:	30800610 	cmplti	r2,r6,24
 800574c:	dc800617 	ldw	r18,24(sp)
 8005750:	1004eb1e 	bne	r2,zero,8006b00 <_dtoa_r+0x16ac>
 8005754:	00c00044 	movi	r3,1
 8005758:	00800104 	movi	r2,4
 800575c:	1085883a 	add	r2,r2,r2
 8005760:	11000504 	addi	r4,r2,20
 8005764:	180b883a 	mov	r5,r3
 8005768:	18c00044 	addi	r3,r3,1
 800576c:	313ffb2e 	bgeu	r6,r4,800575c <_dtoa_r+0x308>
 8005770:	e1401115 	stw	r5,68(fp)
 8005774:	e009883a 	mov	r4,fp
 8005778:	80089500 	call	8008950 <_Balloc>
 800577c:	d8800315 	stw	r2,12(sp)
 8005780:	e0801015 	stw	r2,64(fp)
 8005784:	948003e8 	cmpgeui	r18,r18,15
 8005788:	9000fe1e 	bne	r18,zero,8005b84 <_dtoa_r+0x730>
 800578c:	8000fd26 	beq	r16,zero,8005b84 <_dtoa_r+0x730>
 8005790:	d9000417 	ldw	r4,16(sp)
 8005794:	0103c60e 	bge	zero,r4,80066b0 <_dtoa_r+0x125c>
 8005798:	208003cc 	andi	r2,r4,15
 800579c:	100690fa 	slli	r3,r2,3
 80057a0:	202fd13a 	srai	r23,r4,4
 80057a4:	00820074 	movhi	r2,2049
 80057a8:	10891b04 	addi	r2,r2,9324
 80057ac:	10c5883a 	add	r2,r2,r3
 80057b0:	b8c0040c 	andi	r3,r23,16
 80057b4:	12800017 	ldw	r10,0(r2)
 80057b8:	12400117 	ldw	r9,4(r2)
 80057bc:	1803621e 	bne	r3,zero,8006548 <_dtoa_r+0x10f4>
 80057c0:	d8800117 	ldw	r2,4(sp)
 80057c4:	8827883a 	mov	r19,r17
 80057c8:	04000084 	movi	r16,2
 80057cc:	d8800c15 	stw	r2,48(sp)
 80057d0:	04820074 	movhi	r18,2049
 80057d4:	94891104 	addi	r18,r18,9284
 80057d8:	b8000f26 	beq	r23,zero,8005818 <_dtoa_r+0x3c4>
 80057dc:	5005883a 	mov	r2,r10
 80057e0:	4807883a 	mov	r3,r9
 80057e4:	b980004c 	andi	r6,r23,1
 80057e8:	1009883a 	mov	r4,r2
 80057ec:	b82fd07a 	srai	r23,r23,1
 80057f0:	180b883a 	mov	r5,r3
 80057f4:	30000426 	beq	r6,zero,8005808 <_dtoa_r+0x3b4>
 80057f8:	91800017 	ldw	r6,0(r18)
 80057fc:	91c00117 	ldw	r7,4(r18)
 8005800:	84000044 	addi	r16,r16,1
 8005804:	800e31c0 	call	800e31c <__muldf3>
 8005808:	94800204 	addi	r18,r18,8
 800580c:	b83ff51e 	bne	r23,zero,80057e4 <_dtoa_r+0x390>
 8005810:	1015883a 	mov	r10,r2
 8005814:	1813883a 	mov	r9,r3
 8005818:	d9000c17 	ldw	r4,48(sp)
 800581c:	980b883a 	mov	r5,r19
 8005820:	500d883a 	mov	r6,r10
 8005824:	480f883a 	mov	r7,r9
 8005828:	800d7580 	call	800d758 <__divdf3>
 800582c:	1025883a 	mov	r18,r2
 8005830:	1827883a 	mov	r19,r3
 8005834:	d8800917 	ldw	r2,36(sp)
 8005838:	10000626 	beq	r2,zero,8005854 <_dtoa_r+0x400>
 800583c:	000d883a 	mov	r6,zero
 8005840:	01cffc34 	movhi	r7,16368
 8005844:	9009883a 	mov	r4,r18
 8005848:	980b883a 	mov	r5,r19
 800584c:	800e22c0 	call	800e22c <__ledf2>
 8005850:	10042616 	blt	r2,zero,80068ec <_dtoa_r+0x1498>
 8005854:	8009883a 	mov	r4,r16
 8005858:	800f53c0 	call	800f53c <__floatsidf>
 800585c:	900d883a 	mov	r6,r18
 8005860:	980f883a 	mov	r7,r19
 8005864:	1009883a 	mov	r4,r2
 8005868:	180b883a 	mov	r5,r3
 800586c:	800e31c0 	call	800e31c <__muldf3>
 8005870:	000d883a 	mov	r6,zero
 8005874:	01d00734 	movhi	r7,16412
 8005878:	1009883a 	mov	r4,r2
 800587c:	180b883a 	mov	r5,r3
 8005880:	800cdb80 	call	800cdb8 <__adddf3>
 8005884:	d8800c15 	stw	r2,48(sp)
 8005888:	00bf3034 	movhi	r2,64704
 800588c:	1885883a 	add	r2,r3,r2
 8005890:	d8800d15 	stw	r2,52(sp)
 8005894:	d8800617 	ldw	r2,24(sp)
 8005898:	10036d26 	beq	r2,zero,8006650 <_dtoa_r+0x11fc>
 800589c:	d8800417 	ldw	r2,16(sp)
 80058a0:	d8800f15 	stw	r2,60(sp)
 80058a4:	d8800617 	ldw	r2,24(sp)
 80058a8:	d8800e15 	stw	r2,56(sp)
 80058ac:	980b883a 	mov	r5,r19
 80058b0:	9009883a 	mov	r4,r18
 80058b4:	800f4bc0 	call	800f4bc <__fixdfsi>
 80058b8:	1009883a 	mov	r4,r2
 80058bc:	102f883a 	mov	r23,r2
 80058c0:	800f53c0 	call	800f53c <__floatsidf>
 80058c4:	100d883a 	mov	r6,r2
 80058c8:	180f883a 	mov	r7,r3
 80058cc:	9009883a 	mov	r4,r18
 80058d0:	980b883a 	mov	r5,r19
 80058d4:	800eafc0 	call	800eafc <__subdf3>
 80058d8:	1025883a 	mov	r18,r2
 80058dc:	d8800e17 	ldw	r2,56(sp)
 80058e0:	1821883a 	mov	r16,r3
 80058e4:	ba400c04 	addi	r9,r23,48
 80058e8:	10bfffc4 	addi	r2,r2,-1
 80058ec:	100690fa 	slli	r3,r2,3
 80058f0:	00820074 	movhi	r2,2049
 80058f4:	10891b04 	addi	r2,r2,9324
 80058f8:	10c5883a 	add	r2,r2,r3
 80058fc:	11800017 	ldw	r6,0(r2)
 8005900:	d8c00317 	ldw	r3,12(sp)
 8005904:	11c00117 	ldw	r7,4(r2)
 8005908:	d8800717 	ldw	r2,28(sp)
 800590c:	4811883a 	mov	r8,r9
 8005910:	da001015 	stw	r8,64(sp)
 8005914:	1dc00044 	addi	r23,r3,1
 8005918:	1003a226 	beq	r2,zero,80067a4 <_dtoa_r+0x1350>
 800591c:	0009883a 	mov	r4,zero
 8005920:	014ff834 	movhi	r5,16352
 8005924:	da401115 	stw	r9,68(sp)
 8005928:	800d7580 	call	800d758 <__divdf3>
 800592c:	d9800c17 	ldw	r6,48(sp)
 8005930:	d9c00d17 	ldw	r7,52(sp)
 8005934:	1009883a 	mov	r4,r2
 8005938:	180b883a 	mov	r5,r3
 800593c:	800eafc0 	call	800eafc <__subdf3>
 8005940:	1827883a 	mov	r19,r3
 8005944:	da401117 	ldw	r9,68(sp)
 8005948:	d8c00317 	ldw	r3,12(sp)
 800594c:	900d883a 	mov	r6,r18
 8005950:	800f883a 	mov	r7,r16
 8005954:	1a400005 	stb	r9,0(r3)
 8005958:	1009883a 	mov	r4,r2
 800595c:	980b883a 	mov	r5,r19
 8005960:	d8800c15 	stw	r2,48(sp)
 8005964:	800e13c0 	call	800e13c <__gedf2>
 8005968:	da001017 	ldw	r8,64(sp)
 800596c:	00804816 	blt	zero,r2,8005a90 <_dtoa_r+0x63c>
 8005970:	900d883a 	mov	r6,r18
 8005974:	800f883a 	mov	r7,r16
 8005978:	0009883a 	mov	r4,zero
 800597c:	014ffc34 	movhi	r5,16368
 8005980:	da000d15 	stw	r8,52(sp)
 8005984:	800eafc0 	call	800eafc <__subdf3>
 8005988:	d9000c17 	ldw	r4,48(sp)
 800598c:	100d883a 	mov	r6,r2
 8005990:	180f883a 	mov	r7,r3
 8005994:	980b883a 	mov	r5,r19
 8005998:	800e13c0 	call	800e13c <__gedf2>
 800599c:	da000d17 	ldw	r8,52(sp)
 80059a0:	00844e16 	blt	zero,r2,8006adc <_dtoa_r+0x1688>
 80059a4:	d8c00e17 	ldw	r3,56(sp)
 80059a8:	18800060 	cmpeqi	r2,r3,1
 80059ac:	1000751e 	bne	r2,zero,8005b84 <_dtoa_r+0x730>
 80059b0:	d8800317 	ldw	r2,12(sp)
 80059b4:	dd800d15 	stw	r22,52(sp)
 80059b8:	dd000e15 	stw	r20,56(sp)
 80059bc:	10c5883a 	add	r2,r2,r3
 80059c0:	dd000c17 	ldw	r20,48(sp)
 80059c4:	102d883a 	mov	r22,r2
 80059c8:	dc400c15 	stw	r17,48(sp)
 80059cc:	00000806 	br	80059f0 <_dtoa_r+0x59c>
 80059d0:	800eafc0 	call	800eafc <__subdf3>
 80059d4:	a00d883a 	mov	r6,r20
 80059d8:	980f883a 	mov	r7,r19
 80059dc:	1009883a 	mov	r4,r2
 80059e0:	180b883a 	mov	r5,r3
 80059e4:	800e22c0 	call	800e22c <__ledf2>
 80059e8:	10042316 	blt	r2,zero,8006a78 <_dtoa_r+0x1624>
 80059ec:	bd806226 	beq	r23,r22,8005b78 <_dtoa_r+0x724>
 80059f0:	a009883a 	mov	r4,r20
 80059f4:	980b883a 	mov	r5,r19
 80059f8:	000d883a 	mov	r6,zero
 80059fc:	01d00934 	movhi	r7,16420
 8005a00:	800e31c0 	call	800e31c <__muldf3>
 8005a04:	000d883a 	mov	r6,zero
 8005a08:	01d00934 	movhi	r7,16420
 8005a0c:	9009883a 	mov	r4,r18
 8005a10:	800b883a 	mov	r5,r16
 8005a14:	1029883a 	mov	r20,r2
 8005a18:	1827883a 	mov	r19,r3
 8005a1c:	800e31c0 	call	800e31c <__muldf3>
 8005a20:	180b883a 	mov	r5,r3
 8005a24:	1009883a 	mov	r4,r2
 8005a28:	1821883a 	mov	r16,r3
 8005a2c:	1025883a 	mov	r18,r2
 8005a30:	800f4bc0 	call	800f4bc <__fixdfsi>
 8005a34:	1009883a 	mov	r4,r2
 8005a38:	1023883a 	mov	r17,r2
 8005a3c:	800f53c0 	call	800f53c <__floatsidf>
 8005a40:	9009883a 	mov	r4,r18
 8005a44:	800b883a 	mov	r5,r16
 8005a48:	100d883a 	mov	r6,r2
 8005a4c:	180f883a 	mov	r7,r3
 8005a50:	800eafc0 	call	800eafc <__subdf3>
 8005a54:	bdc00044 	addi	r23,r23,1
 8005a58:	8c400c04 	addi	r17,r17,48
 8005a5c:	a00d883a 	mov	r6,r20
 8005a60:	980f883a 	mov	r7,r19
 8005a64:	1009883a 	mov	r4,r2
 8005a68:	180b883a 	mov	r5,r3
 8005a6c:	bc7fffc5 	stb	r17,-1(r23)
 8005a70:	1025883a 	mov	r18,r2
 8005a74:	1821883a 	mov	r16,r3
 8005a78:	800e22c0 	call	800e22c <__ledf2>
 8005a7c:	900d883a 	mov	r6,r18
 8005a80:	800f883a 	mov	r7,r16
 8005a84:	0009883a 	mov	r4,zero
 8005a88:	014ffc34 	movhi	r5,16368
 8005a8c:	103fd00e 	bge	r2,zero,80059d0 <_dtoa_r+0x57c>
 8005a90:	d8800f17 	ldw	r2,60(sp)
 8005a94:	10800044 	addi	r2,r2,1
 8005a98:	d8800415 	stw	r2,16(sp)
 8005a9c:	a80b883a 	mov	r5,r21
 8005aa0:	e009883a 	mov	r4,fp
 8005aa4:	80089f40 	call	80089f4 <_Bfree>
 8005aa8:	d8801f17 	ldw	r2,124(sp)
 8005aac:	d8c00417 	ldw	r3,16(sp)
 8005ab0:	b8000005 	stb	zero,0(r23)
 8005ab4:	10c00015 	stw	r3,0(r2)
 8005ab8:	d8802117 	ldw	r2,132(sp)
 8005abc:	103e9726 	beq	r2,zero,800551c <_dtoa_r+0xc8>
 8005ac0:	15c00015 	stw	r23,0(r2)
 8005ac4:	003e9506 	br	800551c <_dtoa_r+0xc8>
 8005ac8:	04600034 	movhi	r17,32768
 8005acc:	8c7fffc4 	addi	r17,r17,-1
 8005ad0:	9c62703a 	and	r17,r19,r17
 8005ad4:	00800044 	movi	r2,1
 8005ad8:	8827883a 	mov	r19,r17
 8005adc:	80800015 	stw	r2,0(r16)
 8005ae0:	00dffc34 	movhi	r3,32752
 8005ae4:	989ffc2c 	andhi	r2,r19,32752
 8005ae8:	10fe7a1e 	bne	r2,r3,80054d4 <_dtoa_r+0x80>
 8005aec:	00800434 	movhi	r2,16
 8005af0:	d8c01f17 	ldw	r3,124(sp)
 8005af4:	10bfffc4 	addi	r2,r2,-1
 8005af8:	98a6703a 	and	r19,r19,r2
 8005afc:	0089c3c4 	movi	r2,9999
 8005b00:	18800015 	stw	r2,0(r3)
 8005b04:	d8800117 	ldw	r2,4(sp)
 8005b08:	98aab03a 	or	r21,r19,r2
 8005b0c:	a800141e 	bne	r21,zero,8005b60 <_dtoa_r+0x70c>
 8005b10:	d8802117 	ldw	r2,132(sp)
 8005b14:	1003f626 	beq	r2,zero,8006af0 <_dtoa_r+0x169c>
 8005b18:	00820074 	movhi	r2,2049
 8005b1c:	1007883a 	mov	r3,r2
 8005b20:	18c90104 	addi	r3,r3,9220
 8005b24:	00820074 	movhi	r2,2049
 8005b28:	d8c00315 	stw	r3,12(sp)
 8005b2c:	10890304 	addi	r2,r2,9228
 8005b30:	d8c02117 	ldw	r3,132(sp)
 8005b34:	18800015 	stw	r2,0(r3)
 8005b38:	003e7806 	br	800551c <_dtoa_r+0xc8>
 8005b3c:	01400434 	movhi	r5,16
 8005b40:	297fffc4 	addi	r5,r5,-1
 8005b44:	894a703a 	and	r5,r17,r5
 8005b48:	9009883a 	mov	r4,r18
 8005b4c:	294ffc34 	orhi	r5,r5,16368
 8005b50:	843f0044 	addi	r16,r16,-1023
 8005b54:	dc801217 	ldw	r18,72(sp)
 8005b58:	d8000a15 	stw	zero,40(sp)
 8005b5c:	003e9b06 	br	80055cc <_dtoa_r+0x178>
 8005b60:	d8802117 	ldw	r2,132(sp)
 8005b64:	1002461e 	bne	r2,zero,8006480 <_dtoa_r+0x102c>
 8005b68:	00820074 	movhi	r2,2049
 8005b6c:	10890004 	addi	r2,r2,9216
 8005b70:	d8800315 	stw	r2,12(sp)
 8005b74:	003e6906 	br	800551c <_dtoa_r+0xc8>
 8005b78:	dd800d17 	ldw	r22,52(sp)
 8005b7c:	dd000e17 	ldw	r20,56(sp)
 8005b80:	dc400c17 	ldw	r17,48(sp)
 8005b84:	d8801317 	ldw	r2,76(sp)
 8005b88:	10009f16 	blt	r2,zero,8005e08 <_dtoa_r+0x9b4>
 8005b8c:	d9000417 	ldw	r4,16(sp)
 8005b90:	20c003c8 	cmpgei	r3,r4,15
 8005b94:	18009c1e 	bne	r3,zero,8005e08 <_dtoa_r+0x9b4>
 8005b98:	200690fa 	slli	r3,r4,3
 8005b9c:	00820074 	movhi	r2,2049
 8005ba0:	10891b04 	addi	r2,r2,9324
 8005ba4:	10c5883a 	add	r2,r2,r3
 8005ba8:	14000017 	ldw	r16,0(r2)
 8005bac:	14800117 	ldw	r18,4(r2)
 8005bb0:	d8801e17 	ldw	r2,120(sp)
 8005bb4:	1000140e 	bge	r2,zero,8005c08 <_dtoa_r+0x7b4>
 8005bb8:	d8800617 	ldw	r2,24(sp)
 8005bbc:	00801216 	blt	zero,r2,8005c08 <_dtoa_r+0x7b4>
 8005bc0:	1002b81e 	bne	r2,zero,80066a4 <_dtoa_r+0x1250>
 8005bc4:	8009883a 	mov	r4,r16
 8005bc8:	900b883a 	mov	r5,r18
 8005bcc:	000d883a 	mov	r6,zero
 8005bd0:	01d00534 	movhi	r7,16404
 8005bd4:	800e31c0 	call	800e31c <__muldf3>
 8005bd8:	d9800117 	ldw	r6,4(sp)
 8005bdc:	880f883a 	mov	r7,r17
 8005be0:	1009883a 	mov	r4,r2
 8005be4:	180b883a 	mov	r5,r3
 8005be8:	800e13c0 	call	800e13c <__gedf2>
 8005bec:	0025883a 	mov	r18,zero
 8005bf0:	0021883a 	mov	r16,zero
 8005bf4:	1001fd16 	blt	r2,zero,80063ec <_dtoa_r+0xf98>
 8005bf8:	d8801e17 	ldw	r2,120(sp)
 8005bfc:	ddc00317 	ldw	r23,12(sp)
 8005c00:	00a2303a 	nor	r17,zero,r2
 8005c04:	0001ff06 	br	8006404 <_dtoa_r+0xfb0>
 8005c08:	dcc00117 	ldw	r19,4(sp)
 8005c0c:	800d883a 	mov	r6,r16
 8005c10:	900f883a 	mov	r7,r18
 8005c14:	880b883a 	mov	r5,r17
 8005c18:	9809883a 	mov	r4,r19
 8005c1c:	800d7580 	call	800d758 <__divdf3>
 8005c20:	180b883a 	mov	r5,r3
 8005c24:	1009883a 	mov	r4,r2
 8005c28:	800f4bc0 	call	800f4bc <__fixdfsi>
 8005c2c:	1009883a 	mov	r4,r2
 8005c30:	102d883a 	mov	r22,r2
 8005c34:	800f53c0 	call	800f53c <__floatsidf>
 8005c38:	800d883a 	mov	r6,r16
 8005c3c:	900f883a 	mov	r7,r18
 8005c40:	1009883a 	mov	r4,r2
 8005c44:	180b883a 	mov	r5,r3
 8005c48:	800e31c0 	call	800e31c <__muldf3>
 8005c4c:	880b883a 	mov	r5,r17
 8005c50:	100d883a 	mov	r6,r2
 8005c54:	180f883a 	mov	r7,r3
 8005c58:	9809883a 	mov	r4,r19
 8005c5c:	800eafc0 	call	800eafc <__subdf3>
 8005c60:	dc400317 	ldw	r17,12(sp)
 8005c64:	1009883a 	mov	r4,r2
 8005c68:	d9c00417 	ldw	r7,16(sp)
 8005c6c:	b0800c04 	addi	r2,r22,48
 8005c70:	88800005 	stb	r2,0(r17)
 8005c74:	d8800617 	ldw	r2,24(sp)
 8005c78:	39c00044 	addi	r7,r7,1
 8005c7c:	d9c00415 	stw	r7,16(sp)
 8005c80:	11800060 	cmpeqi	r6,r2,1
 8005c84:	180b883a 	mov	r5,r3
 8005c88:	2005883a 	mov	r2,r4
 8005c8c:	8dc00044 	addi	r23,r17,1
 8005c90:	3000391e 	bne	r6,zero,8005d78 <_dtoa_r+0x924>
 8005c94:	01d00934 	movhi	r7,16420
 8005c98:	800e31c0 	call	800e31c <__muldf3>
 8005c9c:	000d883a 	mov	r6,zero
 8005ca0:	000f883a 	mov	r7,zero
 8005ca4:	1009883a 	mov	r4,r2
 8005ca8:	180b883a 	mov	r5,r3
 8005cac:	1027883a 	mov	r19,r2
 8005cb0:	1829883a 	mov	r20,r3
 8005cb4:	800e0bc0 	call	800e0bc <__eqdf2>
 8005cb8:	103f7826 	beq	r2,zero,8005a9c <_dtoa_r+0x648>
 8005cbc:	d8c00617 	ldw	r3,24(sp)
 8005cc0:	8805883a 	mov	r2,r17
 8005cc4:	dd400115 	stw	r21,4(sp)
 8005cc8:	8c400084 	addi	r17,r17,2
 8005ccc:	10ed883a 	add	r22,r2,r3
 8005cd0:	00000a06 	br	8005cfc <_dtoa_r+0x8a8>
 8005cd4:	800e31c0 	call	800e31c <__muldf3>
 8005cd8:	000d883a 	mov	r6,zero
 8005cdc:	000f883a 	mov	r7,zero
 8005ce0:	1009883a 	mov	r4,r2
 8005ce4:	180b883a 	mov	r5,r3
 8005ce8:	1027883a 	mov	r19,r2
 8005cec:	1829883a 	mov	r20,r3
 8005cf0:	8c400044 	addi	r17,r17,1
 8005cf4:	800e0bc0 	call	800e0bc <__eqdf2>
 8005cf8:	10029d26 	beq	r2,zero,8006770 <_dtoa_r+0x131c>
 8005cfc:	800d883a 	mov	r6,r16
 8005d00:	900f883a 	mov	r7,r18
 8005d04:	9809883a 	mov	r4,r19
 8005d08:	a00b883a 	mov	r5,r20
 8005d0c:	800d7580 	call	800d758 <__divdf3>
 8005d10:	180b883a 	mov	r5,r3
 8005d14:	1009883a 	mov	r4,r2
 8005d18:	800f4bc0 	call	800f4bc <__fixdfsi>
 8005d1c:	1009883a 	mov	r4,r2
 8005d20:	102b883a 	mov	r21,r2
 8005d24:	800f53c0 	call	800f53c <__floatsidf>
 8005d28:	800d883a 	mov	r6,r16
 8005d2c:	900f883a 	mov	r7,r18
 8005d30:	1009883a 	mov	r4,r2
 8005d34:	180b883a 	mov	r5,r3
 8005d38:	800e31c0 	call	800e31c <__muldf3>
 8005d3c:	100d883a 	mov	r6,r2
 8005d40:	180f883a 	mov	r7,r3
 8005d44:	9809883a 	mov	r4,r19
 8005d48:	a00b883a 	mov	r5,r20
 8005d4c:	800eafc0 	call	800eafc <__subdf3>
 8005d50:	aa400c04 	addi	r9,r21,48
 8005d54:	8a7fffc5 	stb	r9,-1(r17)
 8005d58:	000d883a 	mov	r6,zero
 8005d5c:	01d00934 	movhi	r7,16420
 8005d60:	1009883a 	mov	r4,r2
 8005d64:	180b883a 	mov	r5,r3
 8005d68:	882f883a 	mov	r23,r17
 8005d6c:	b47fd91e 	bne	r22,r17,8005cd4 <_dtoa_r+0x880>
 8005d70:	a82d883a 	mov	r22,r21
 8005d74:	dd400117 	ldw	r21,4(sp)
 8005d78:	100d883a 	mov	r6,r2
 8005d7c:	180f883a 	mov	r7,r3
 8005d80:	1009883a 	mov	r4,r2
 8005d84:	180b883a 	mov	r5,r3
 8005d88:	800cdb80 	call	800cdb8 <__adddf3>
 8005d8c:	800d883a 	mov	r6,r16
 8005d90:	900f883a 	mov	r7,r18
 8005d94:	1009883a 	mov	r4,r2
 8005d98:	180b883a 	mov	r5,r3
 8005d9c:	1027883a 	mov	r19,r2
 8005da0:	1823883a 	mov	r17,r3
 8005da4:	800e13c0 	call	800e13c <__gedf2>
 8005da8:	00800816 	blt	zero,r2,8005dcc <_dtoa_r+0x978>
 8005dac:	800d883a 	mov	r6,r16
 8005db0:	900f883a 	mov	r7,r18
 8005db4:	9809883a 	mov	r4,r19
 8005db8:	880b883a 	mov	r5,r17
 8005dbc:	800e0bc0 	call	800e0bc <__eqdf2>
 8005dc0:	103f361e 	bne	r2,zero,8005a9c <_dtoa_r+0x648>
 8005dc4:	b580004c 	andi	r22,r22,1
 8005dc8:	b03f3426 	beq	r22,zero,8005a9c <_dtoa_r+0x648>
 8005dcc:	ba3fffc3 	ldbu	r8,-1(r23)
 8005dd0:	d9000317 	ldw	r4,12(sp)
 8005dd4:	00000306 	br	8005de4 <_dtoa_r+0x990>
 8005dd8:	20c30e26 	beq	r4,r3,8006a14 <_dtoa_r+0x15c0>
 8005ddc:	1a3fffc3 	ldbu	r8,-1(r3)
 8005de0:	182f883a 	mov	r23,r3
 8005de4:	40803fcc 	andi	r2,r8,255
 8005de8:	1080201c 	xori	r2,r2,128
 8005dec:	10bfe004 	addi	r2,r2,-128
 8005df0:	10800e60 	cmpeqi	r2,r2,57
 8005df4:	b8ffffc4 	addi	r3,r23,-1
 8005df8:	103ff71e 	bne	r2,zero,8005dd8 <_dtoa_r+0x984>
 8005dfc:	42000044 	addi	r8,r8,1
 8005e00:	1a000005 	stb	r8,0(r3)
 8005e04:	003f2506 	br	8005a9c <_dtoa_r+0x648>
 8005e08:	d8c00717 	ldw	r3,28(sp)
 8005e0c:	1800e426 	beq	r3,zero,80061a0 <_dtoa_r+0xd4c>
 8005e10:	d8c00217 	ldw	r3,8(sp)
 8005e14:	18c00088 	cmpgei	r3,r3,2
 8005e18:	1801ec26 	beq	r3,zero,80065cc <_dtoa_r+0x1178>
 8005e1c:	d8800617 	ldw	r2,24(sp)
 8005e20:	14bfffc4 	addi	r18,r2,-1
 8005e24:	d8800817 	ldw	r2,32(sp)
 8005e28:	1481c50e 	bge	r2,r18,8006540 <_dtoa_r+0x10ec>
 8005e2c:	d8800817 	ldw	r2,32(sp)
 8005e30:	dc800815 	stw	r18,32(sp)
 8005e34:	9085c83a 	sub	r2,r18,r2
 8005e38:	b0ad883a 	add	r22,r22,r2
 8005e3c:	0025883a 	mov	r18,zero
 8005e40:	d8800617 	ldw	r2,24(sp)
 8005e44:	10024c16 	blt	r2,zero,8006778 <_dtoa_r+0x1324>
 8005e48:	d8c00517 	ldw	r3,20(sp)
 8005e4c:	a0a9883a 	add	r20,r20,r2
 8005e50:	1885883a 	add	r2,r3,r2
 8005e54:	1827883a 	mov	r19,r3
 8005e58:	d8800515 	stw	r2,20(sp)
 8005e5c:	01400044 	movi	r5,1
 8005e60:	e009883a 	mov	r4,fp
 8005e64:	8008d780 	call	8008d78 <__i2b>
 8005e68:	1021883a 	mov	r16,r2
 8005e6c:	04c0080e 	bge	zero,r19,8005e90 <_dtoa_r+0xa3c>
 8005e70:	0500070e 	bge	zero,r20,8005e90 <_dtoa_r+0xa3c>
 8005e74:	9805883a 	mov	r2,r19
 8005e78:	a4c1a916 	blt	r20,r19,8006520 <_dtoa_r+0x10cc>
 8005e7c:	d8c00517 	ldw	r3,20(sp)
 8005e80:	98a7c83a 	sub	r19,r19,r2
 8005e84:	a0a9c83a 	sub	r20,r20,r2
 8005e88:	1887c83a 	sub	r3,r3,r2
 8005e8c:	d8c00515 	stw	r3,20(sp)
 8005e90:	d8800817 	ldw	r2,32(sp)
 8005e94:	10001426 	beq	r2,zero,8005ee8 <_dtoa_r+0xa94>
 8005e98:	d8800717 	ldw	r2,28(sp)
 8005e9c:	10017226 	beq	r2,zero,8006468 <_dtoa_r+0x1014>
 8005ea0:	04800e0e 	bge	zero,r18,8005edc <_dtoa_r+0xa88>
 8005ea4:	800b883a 	mov	r5,r16
 8005ea8:	900d883a 	mov	r6,r18
 8005eac:	e009883a 	mov	r4,fp
 8005eb0:	8008fec0 	call	8008fec <__pow5mult>
 8005eb4:	a80d883a 	mov	r6,r21
 8005eb8:	100b883a 	mov	r5,r2
 8005ebc:	e009883a 	mov	r4,fp
 8005ec0:	1021883a 	mov	r16,r2
 8005ec4:	8008dac0 	call	8008dac <__multiply>
 8005ec8:	102f883a 	mov	r23,r2
 8005ecc:	a80b883a 	mov	r5,r21
 8005ed0:	e009883a 	mov	r4,fp
 8005ed4:	80089f40 	call	80089f4 <_Bfree>
 8005ed8:	b82b883a 	mov	r21,r23
 8005edc:	d8800817 	ldw	r2,32(sp)
 8005ee0:	148dc83a 	sub	r6,r2,r18
 8005ee4:	3001611e 	bne	r6,zero,800646c <_dtoa_r+0x1018>
 8005ee8:	01400044 	movi	r5,1
 8005eec:	e009883a 	mov	r4,fp
 8005ef0:	8008d780 	call	8008d78 <__i2b>
 8005ef4:	1025883a 	mov	r18,r2
 8005ef8:	0580bc16 	blt	zero,r22,80061ec <_dtoa_r+0xd98>
 8005efc:	d8800217 	ldw	r2,8(sp)
 8005f00:	10800088 	cmpgei	r2,r2,2
 8005f04:	10016526 	beq	r2,zero,800649c <_dtoa_r+0x1048>
 8005f08:	0023883a 	mov	r17,zero
 8005f0c:	00800044 	movi	r2,1
 8005f10:	b000bf1e 	bne	r22,zero,8006210 <_dtoa_r+0xdbc>
 8005f14:	1505883a 	add	r2,r2,r20
 8005f18:	108007cc 	andi	r2,r2,31
 8005f1c:	1000aa26 	beq	r2,zero,80061c8 <_dtoa_r+0xd74>
 8005f20:	00c00804 	movi	r3,32
 8005f24:	1887c83a 	sub	r3,r3,r2
 8005f28:	19000150 	cmplti	r4,r3,5
 8005f2c:	2002f61e 	bne	r4,zero,8006b08 <_dtoa_r+0x16b4>
 8005f30:	00c00704 	movi	r3,28
 8005f34:	1885c83a 	sub	r2,r3,r2
 8005f38:	d8c00517 	ldw	r3,20(sp)
 8005f3c:	98a7883a 	add	r19,r19,r2
 8005f40:	a0a9883a 	add	r20,r20,r2
 8005f44:	1887883a 	add	r3,r3,r2
 8005f48:	d8c00515 	stw	r3,20(sp)
 8005f4c:	d8800517 	ldw	r2,20(sp)
 8005f50:	00809716 	blt	zero,r2,80061b0 <_dtoa_r+0xd5c>
 8005f54:	0500050e 	bge	zero,r20,8005f6c <_dtoa_r+0xb18>
 8005f58:	900b883a 	mov	r5,r18
 8005f5c:	a00d883a 	mov	r6,r20
 8005f60:	e009883a 	mov	r4,fp
 8005f64:	80091140 	call	8009114 <__lshift>
 8005f68:	1025883a 	mov	r18,r2
 8005f6c:	d8800917 	ldw	r2,36(sp)
 8005f70:	10012b1e 	bne	r2,zero,8006420 <_dtoa_r+0xfcc>
 8005f74:	d8800617 	ldw	r2,24(sp)
 8005f78:	00810d0e 	bge	zero,r2,80063b0 <_dtoa_r+0xf5c>
 8005f7c:	d8800417 	ldw	r2,16(sp)
 8005f80:	10800044 	addi	r2,r2,1
 8005f84:	d8800415 	stw	r2,16(sp)
 8005f88:	d8800717 	ldw	r2,28(sp)
 8005f8c:	1000b21e 	bne	r2,zero,8006258 <_dtoa_r+0xe04>
 8005f90:	ddc00317 	ldw	r23,12(sp)
 8005f94:	04400044 	movi	r17,1
 8005f98:	dcc00617 	ldw	r19,24(sp)
 8005f9c:	00000306 	br	8005fac <_dtoa_r+0xb58>
 8005fa0:	8008a180 	call	8008a18 <__multadd>
 8005fa4:	102b883a 	mov	r21,r2
 8005fa8:	8c400044 	addi	r17,r17,1
 8005fac:	900b883a 	mov	r5,r18
 8005fb0:	a809883a 	mov	r4,r21
 8005fb4:	80052200 	call	8005220 <quorem>
 8005fb8:	10800c04 	addi	r2,r2,48
 8005fbc:	bdc00044 	addi	r23,r23,1
 8005fc0:	b8bfffc5 	stb	r2,-1(r23)
 8005fc4:	000f883a 	mov	r7,zero
 8005fc8:	01800284 	movi	r6,10
 8005fcc:	a80b883a 	mov	r5,r21
 8005fd0:	e009883a 	mov	r4,fp
 8005fd4:	8cfff216 	blt	r17,r19,8005fa0 <_dtoa_r+0xb4c>
 8005fd8:	1011883a 	mov	r8,r2
 8005fdc:	0029883a 	mov	r20,zero
 8005fe0:	a80b883a 	mov	r5,r21
 8005fe4:	01800044 	movi	r6,1
 8005fe8:	e009883a 	mov	r4,fp
 8005fec:	da000115 	stw	r8,4(sp)
 8005ff0:	80091140 	call	8009114 <__lshift>
 8005ff4:	900b883a 	mov	r5,r18
 8005ff8:	1009883a 	mov	r4,r2
 8005ffc:	102b883a 	mov	r21,r2
 8006000:	80092500 	call	8009250 <__mcmp>
 8006004:	b8ffffc3 	ldbu	r3,-1(r23)
 8006008:	0081610e 	bge	zero,r2,8006590 <_dtoa_r+0x113c>
 800600c:	d9400317 	ldw	r5,12(sp)
 8006010:	00000306 	br	8006020 <_dtoa_r+0xbcc>
 8006014:	29017726 	beq	r5,r4,80065f4 <_dtoa_r+0x11a0>
 8006018:	20ffffc3 	ldbu	r3,-1(r4)
 800601c:	202f883a 	mov	r23,r4
 8006020:	18803fcc 	andi	r2,r3,255
 8006024:	1080201c 	xori	r2,r2,128
 8006028:	10bfe004 	addi	r2,r2,-128
 800602c:	10800e60 	cmpeqi	r2,r2,57
 8006030:	b93fffc4 	addi	r4,r23,-1
 8006034:	103ff71e 	bne	r2,zero,8006014 <_dtoa_r+0xbc0>
 8006038:	18c00044 	addi	r3,r3,1
 800603c:	20c00005 	stb	r3,0(r4)
 8006040:	900b883a 	mov	r5,r18
 8006044:	e009883a 	mov	r4,fp
 8006048:	80089f40 	call	80089f4 <_Bfree>
 800604c:	803e9326 	beq	r16,zero,8005a9c <_dtoa_r+0x648>
 8006050:	a0000426 	beq	r20,zero,8006064 <_dtoa_r+0xc10>
 8006054:	a4000326 	beq	r20,r16,8006064 <_dtoa_r+0xc10>
 8006058:	a00b883a 	mov	r5,r20
 800605c:	e009883a 	mov	r4,fp
 8006060:	80089f40 	call	80089f4 <_Bfree>
 8006064:	800b883a 	mov	r5,r16
 8006068:	e009883a 	mov	r4,fp
 800606c:	80089f40 	call	80089f4 <_Bfree>
 8006070:	003e8a06 	br	8005a9c <_dtoa_r+0x648>
 8006074:	d8000915 	stw	zero,36(sp)
 8006078:	a0003616 	blt	r20,zero,8006154 <_dtoa_r+0xd00>
 800607c:	d8000515 	stw	zero,20(sp)
 8006080:	d8c00217 	ldw	r3,8(sp)
 8006084:	dd800415 	stw	r22,16(sp)
 8006088:	d8000815 	stw	zero,32(sp)
 800608c:	188002a8 	cmpgeui	r2,r3,10
 8006090:	a5a9883a 	add	r20,r20,r22
 8006094:	103d9726 	beq	r2,zero,80056f4 <_dtoa_r+0x2a0>
 8006098:	00800044 	movi	r2,1
 800609c:	d8800715 	stw	r2,28(sp)
 80060a0:	00bfffc4 	movi	r2,-1
 80060a4:	04bfffc4 	movi	r18,-1
 80060a8:	04000044 	movi	r16,1
 80060ac:	d8000215 	stw	zero,8(sp)
 80060b0:	d8800615 	stw	r2,24(sp)
 80060b4:	d8001e15 	stw	zero,120(sp)
 80060b8:	d8800617 	ldw	r2,24(sp)
 80060bc:	e0001115 	stw	zero,68(fp)
 80060c0:	000b883a 	mov	r5,zero
 80060c4:	d8800b15 	stw	r2,44(sp)
 80060c8:	003daa06 	br	8005774 <_dtoa_r+0x320>
 80060cc:	18800160 	cmpeqi	r2,r3,5
 80060d0:	00c00044 	movi	r3,1
 80060d4:	d8c00715 	stw	r3,28(sp)
 80060d8:	10000d26 	beq	r2,zero,8006110 <_dtoa_r+0xcbc>
 80060dc:	d8801e17 	ldw	r2,120(sp)
 80060e0:	d8c00417 	ldw	r3,16(sp)
 80060e4:	10c5883a 	add	r2,r2,r3
 80060e8:	d8800b15 	stw	r2,44(sp)
 80060ec:	10800044 	addi	r2,r2,1
 80060f0:	d8800615 	stw	r2,24(sp)
 80060f4:	100d883a 	mov	r6,r2
 80060f8:	00bd9216 	blt	zero,r2,8005744 <_dtoa_r+0x2f0>
 80060fc:	01800044 	movi	r6,1
 8006100:	003d9006 	br	8005744 <_dtoa_r+0x2f0>
 8006104:	188000a0 	cmpeqi	r2,r3,2
 8006108:	d8000715 	stw	zero,28(sp)
 800610c:	103d881e 	bne	r2,zero,8005730 <_dtoa_r+0x2dc>
 8006110:	e0001115 	stw	zero,68(fp)
 8006114:	000b883a 	mov	r5,zero
 8006118:	e009883a 	mov	r4,fp
 800611c:	80089500 	call	8008950 <_Balloc>
 8006120:	d8800315 	stw	r2,12(sp)
 8006124:	e0801015 	stw	r2,64(fp)
 8006128:	00bfffc4 	movi	r2,-1
 800612c:	d8800b15 	stw	r2,44(sp)
 8006130:	00800044 	movi	r2,1
 8006134:	d8800715 	stw	r2,28(sp)
 8006138:	00bfffc4 	movi	r2,-1
 800613c:	d8001e15 	stw	zero,120(sp)
 8006140:	d8800615 	stw	r2,24(sp)
 8006144:	003e8f06 	br	8005b84 <_dtoa_r+0x730>
 8006148:	00800044 	movi	r2,1
 800614c:	d8800915 	stw	r2,36(sp)
 8006150:	a03d5c0e 	bge	r20,zero,80056c4 <_dtoa_r+0x270>
 8006154:	04800044 	movi	r18,1
 8006158:	9405c83a 	sub	r2,r18,r16
 800615c:	d8800515 	stw	r2,20(sp)
 8006160:	0029883a 	mov	r20,zero
 8006164:	003d5806 	br	80056c8 <_dtoa_r+0x274>
 8006168:	b009883a 	mov	r4,r22
 800616c:	800f53c0 	call	800f53c <__floatsidf>
 8006170:	a00d883a 	mov	r6,r20
 8006174:	980f883a 	mov	r7,r19
 8006178:	1009883a 	mov	r4,r2
 800617c:	180b883a 	mov	r5,r3
 8006180:	800e0bc0 	call	800e0bc <__eqdf2>
 8006184:	103d3e26 	beq	r2,zero,8005680 <_dtoa_r+0x22c>
 8006188:	b5bfffc4 	addi	r22,r22,-1
 800618c:	003d3c06 	br	8005680 <_dtoa_r+0x22c>
 8006190:	00820074 	movhi	r2,2049
 8006194:	1088f704 	addi	r2,r2,9180
 8006198:	d8800315 	stw	r2,12(sp)
 800619c:	003cdf06 	br	800551c <_dtoa_r+0xc8>
 80061a0:	dc800817 	ldw	r18,32(sp)
 80061a4:	dcc00517 	ldw	r19,20(sp)
 80061a8:	0021883a 	mov	r16,zero
 80061ac:	003f2f06 	br	8005e6c <_dtoa_r+0xa18>
 80061b0:	a80b883a 	mov	r5,r21
 80061b4:	100d883a 	mov	r6,r2
 80061b8:	e009883a 	mov	r4,fp
 80061bc:	80091140 	call	8009114 <__lshift>
 80061c0:	102b883a 	mov	r21,r2
 80061c4:	003f6306 	br	8005f54 <_dtoa_r+0xb00>
 80061c8:	00800704 	movi	r2,28
 80061cc:	003f5a06 	br	8005f38 <_dtoa_r+0xae4>
 80061d0:	01000804 	movi	r4,32
 80061d4:	2089c83a 	sub	r4,r4,r2
 80061d8:	d8800117 	ldw	r2,4(sp)
 80061dc:	1108983a 	sll	r4,r2,r4
 80061e0:	003cf306 	br	80055b0 <_dtoa_r+0x15c>
 80061e4:	04000044 	movi	r16,1
 80061e8:	003d4706 	br	8005708 <_dtoa_r+0x2b4>
 80061ec:	b00d883a 	mov	r6,r22
 80061f0:	100b883a 	mov	r5,r2
 80061f4:	e009883a 	mov	r4,fp
 80061f8:	8008fec0 	call	8008fec <__pow5mult>
 80061fc:	1025883a 	mov	r18,r2
 8006200:	d8800217 	ldw	r2,8(sp)
 8006204:	10800090 	cmplti	r2,r2,2
 8006208:	10012f1e 	bne	r2,zero,80066c8 <_dtoa_r+0x1274>
 800620c:	0023883a 	mov	r17,zero
 8006210:	90800417 	ldw	r2,16(r18)
 8006214:	10800104 	addi	r2,r2,4
 8006218:	100490ba 	slli	r2,r2,2
 800621c:	9085883a 	add	r2,r18,r2
 8006220:	11000017 	ldw	r4,0(r2)
 8006224:	8008c640 	call	8008c64 <__hi0bits>
 8006228:	00c00804 	movi	r3,32
 800622c:	1885c83a 	sub	r2,r3,r2
 8006230:	003f3806 	br	8005f14 <_dtoa_r+0xac0>
 8006234:	800b883a 	mov	r5,r16
 8006238:	000f883a 	mov	r7,zero
 800623c:	01800284 	movi	r6,10
 8006240:	e009883a 	mov	r4,fp
 8006244:	8008a180 	call	8008a18 <__multadd>
 8006248:	1021883a 	mov	r16,r2
 800624c:	d8800b17 	ldw	r2,44(sp)
 8006250:	00821b0e 	bge	zero,r2,8006ac0 <_dtoa_r+0x166c>
 8006254:	d8800615 	stw	r2,24(sp)
 8006258:	04c0b316 	blt	zero,r19,8006528 <_dtoa_r+0x10d4>
 800625c:	8801341e 	bne	r17,zero,8006730 <_dtoa_r+0x12dc>
 8006260:	8027883a 	mov	r19,r16
 8006264:	dc400317 	ldw	r17,12(sp)
 8006268:	d8c00617 	ldw	r3,24(sp)
 800626c:	d8800117 	ldw	r2,4(sp)
 8006270:	8dffffc4 	addi	r23,r17,-1
 8006274:	b8c7883a 	add	r3,r23,r3
 8006278:	d8c00615 	stw	r3,24(sp)
 800627c:	d8c00217 	ldw	r3,8(sp)
 8006280:	1080004c 	andi	r2,r2,1
 8006284:	d8800815 	stw	r2,32(sp)
 8006288:	10c4b03a 	or	r2,r2,r3
 800628c:	d8800715 	stw	r2,28(sp)
 8006290:	00002c06 	br	8006344 <_dtoa_r+0xef0>
 8006294:	b80b883a 	mov	r5,r23
 8006298:	a809883a 	mov	r4,r21
 800629c:	da000515 	stw	r8,20(sp)
 80062a0:	80092500 	call	8009250 <__mcmp>
 80062a4:	b80b883a 	mov	r5,r23
 80062a8:	e009883a 	mov	r4,fp
 80062ac:	d8800115 	stw	r2,4(sp)
 80062b0:	80089f40 	call	80089f4 <_Bfree>
 80062b4:	d8800117 	ldw	r2,4(sp)
 80062b8:	da000517 	ldw	r8,20(sp)
 80062bc:	1000021e 	bne	r2,zero,80062c8 <_dtoa_r+0xe74>
 80062c0:	d8c00717 	ldw	r3,28(sp)
 80062c4:	1801f226 	beq	r3,zero,8006a90 <_dtoa_r+0x163c>
 80062c8:	8dc00044 	addi	r23,r17,1
 80062cc:	a0010516 	blt	r20,zero,80066e4 <_dtoa_r+0x1290>
 80062d0:	d8c00217 	ldw	r3,8(sp)
 80062d4:	a0e8b03a 	or	r20,r20,r3
 80062d8:	d8c00817 	ldw	r3,32(sp)
 80062dc:	1d28b03a 	or	r20,r3,r20
 80062e0:	a0010026 	beq	r20,zero,80066e4 <_dtoa_r+0x1290>
 80062e4:	00812816 	blt	zero,r2,8006788 <_dtoa_r+0x1334>
 80062e8:	d8800617 	ldw	r2,24(sp)
 80062ec:	8a000005 	stb	r8,0(r17)
 80062f0:	14412926 	beq	r2,r17,8006798 <_dtoa_r+0x1344>
 80062f4:	a80b883a 	mov	r5,r21
 80062f8:	000f883a 	mov	r7,zero
 80062fc:	01800284 	movi	r6,10
 8006300:	e009883a 	mov	r4,fp
 8006304:	8008a180 	call	8008a18 <__multadd>
 8006308:	102b883a 	mov	r21,r2
 800630c:	000f883a 	mov	r7,zero
 8006310:	01800284 	movi	r6,10
 8006314:	800b883a 	mov	r5,r16
 8006318:	e009883a 	mov	r4,fp
 800631c:	84c02026 	beq	r16,r19,80063a0 <_dtoa_r+0xf4c>
 8006320:	8008a180 	call	8008a18 <__multadd>
 8006324:	980b883a 	mov	r5,r19
 8006328:	000f883a 	mov	r7,zero
 800632c:	01800284 	movi	r6,10
 8006330:	e009883a 	mov	r4,fp
 8006334:	1021883a 	mov	r16,r2
 8006338:	8008a180 	call	8008a18 <__multadd>
 800633c:	1027883a 	mov	r19,r2
 8006340:	b823883a 	mov	r17,r23
 8006344:	900b883a 	mov	r5,r18
 8006348:	a809883a 	mov	r4,r21
 800634c:	80052200 	call	8005220 <quorem>
 8006350:	800b883a 	mov	r5,r16
 8006354:	a809883a 	mov	r4,r21
 8006358:	102d883a 	mov	r22,r2
 800635c:	80092500 	call	8009250 <__mcmp>
 8006360:	980d883a 	mov	r6,r19
 8006364:	900b883a 	mov	r5,r18
 8006368:	e009883a 	mov	r4,fp
 800636c:	1029883a 	mov	r20,r2
 8006370:	80092a80 	call	80092a8 <__mdiff>
 8006374:	102f883a 	mov	r23,r2
 8006378:	10800317 	ldw	r2,12(r2)
 800637c:	b2000c04 	addi	r8,r22,48
 8006380:	103fc426 	beq	r2,zero,8006294 <_dtoa_r+0xe40>
 8006384:	b80b883a 	mov	r5,r23
 8006388:	e009883a 	mov	r4,fp
 800638c:	da000115 	stw	r8,4(sp)
 8006390:	80089f40 	call	80089f4 <_Bfree>
 8006394:	00800044 	movi	r2,1
 8006398:	da000117 	ldw	r8,4(sp)
 800639c:	003fca06 	br	80062c8 <_dtoa_r+0xe74>
 80063a0:	8008a180 	call	8008a18 <__multadd>
 80063a4:	1021883a 	mov	r16,r2
 80063a8:	1027883a 	mov	r19,r2
 80063ac:	003fe406 	br	8006340 <_dtoa_r+0xeec>
 80063b0:	d8800217 	ldw	r2,8(sp)
 80063b4:	108000d0 	cmplti	r2,r2,3
 80063b8:	10004b1e 	bne	r2,zero,80064e8 <_dtoa_r+0x1094>
 80063bc:	d8800617 	ldw	r2,24(sp)
 80063c0:	103e0d1e 	bne	r2,zero,8005bf8 <_dtoa_r+0x7a4>
 80063c4:	900b883a 	mov	r5,r18
 80063c8:	e009883a 	mov	r4,fp
 80063cc:	000f883a 	mov	r7,zero
 80063d0:	01800144 	movi	r6,5
 80063d4:	8008a180 	call	8008a18 <__multadd>
 80063d8:	100b883a 	mov	r5,r2
 80063dc:	a809883a 	mov	r4,r21
 80063e0:	1025883a 	mov	r18,r2
 80063e4:	80092500 	call	8009250 <__mcmp>
 80063e8:	00be030e 	bge	zero,r2,8005bf8 <_dtoa_r+0x7a4>
 80063ec:	d8c00317 	ldw	r3,12(sp)
 80063f0:	00800c44 	movi	r2,49
 80063f4:	18800005 	stb	r2,0(r3)
 80063f8:	d8800417 	ldw	r2,16(sp)
 80063fc:	1dc00044 	addi	r23,r3,1
 8006400:	14400044 	addi	r17,r2,1
 8006404:	900b883a 	mov	r5,r18
 8006408:	e009883a 	mov	r4,fp
 800640c:	80089f40 	call	80089f4 <_Bfree>
 8006410:	88800044 	addi	r2,r17,1
 8006414:	d8800415 	stw	r2,16(sp)
 8006418:	803f121e 	bne	r16,zero,8006064 <_dtoa_r+0xc10>
 800641c:	003d9f06 	br	8005a9c <_dtoa_r+0x648>
 8006420:	900b883a 	mov	r5,r18
 8006424:	a809883a 	mov	r4,r21
 8006428:	80092500 	call	8009250 <__mcmp>
 800642c:	103ed10e 	bge	r2,zero,8005f74 <_dtoa_r+0xb20>
 8006430:	a80b883a 	mov	r5,r21
 8006434:	000f883a 	mov	r7,zero
 8006438:	01800284 	movi	r6,10
 800643c:	e009883a 	mov	r4,fp
 8006440:	8008a180 	call	8008a18 <__multadd>
 8006444:	102b883a 	mov	r21,r2
 8006448:	d8800417 	ldw	r2,16(sp)
 800644c:	153fffc4 	addi	r20,r2,-1
 8006450:	d8800717 	ldw	r2,28(sp)
 8006454:	103f771e 	bne	r2,zero,8006234 <_dtoa_r+0xde0>
 8006458:	d8800b17 	ldw	r2,44(sp)
 800645c:	0081910e 	bge	zero,r2,8006aa4 <_dtoa_r+0x1650>
 8006460:	d8800615 	stw	r2,24(sp)
 8006464:	003eca06 	br	8005f90 <_dtoa_r+0xb3c>
 8006468:	d9800817 	ldw	r6,32(sp)
 800646c:	a80b883a 	mov	r5,r21
 8006470:	e009883a 	mov	r4,fp
 8006474:	8008fec0 	call	8008fec <__pow5mult>
 8006478:	102b883a 	mov	r21,r2
 800647c:	003e9a06 	br	8005ee8 <_dtoa_r+0xa94>
 8006480:	00820074 	movhi	r2,2049
 8006484:	1007883a 	mov	r3,r2
 8006488:	18c90004 	addi	r3,r3,9216
 800648c:	00820074 	movhi	r2,2049
 8006490:	d8c00315 	stw	r3,12(sp)
 8006494:	108900c4 	addi	r2,r2,9219
 8006498:	003da506 	br	8005b30 <_dtoa_r+0x6dc>
 800649c:	d8800117 	ldw	r2,4(sp)
 80064a0:	103e991e 	bne	r2,zero,8005f08 <_dtoa_r+0xab4>
 80064a4:	00800434 	movhi	r2,16
 80064a8:	10bfffc4 	addi	r2,r2,-1
 80064ac:	8884703a 	and	r2,r17,r2
 80064b0:	103e951e 	bne	r2,zero,8005f08 <_dtoa_r+0xab4>
 80064b4:	8c5ffc2c 	andhi	r17,r17,32752
 80064b8:	883e9326 	beq	r17,zero,8005f08 <_dtoa_r+0xab4>
 80064bc:	d8800517 	ldw	r2,20(sp)
 80064c0:	a5000044 	addi	r20,r20,1
 80064c4:	04400044 	movi	r17,1
 80064c8:	10800044 	addi	r2,r2,1
 80064cc:	d8800515 	stw	r2,20(sp)
 80064d0:	003e8e06 	br	8005f0c <_dtoa_r+0xab8>
 80064d4:	00800044 	movi	r2,1
 80064d8:	04800044 	movi	r18,1
 80064dc:	d8800615 	stw	r2,24(sp)
 80064e0:	d8801e15 	stw	r2,120(sp)
 80064e4:	003ef406 	br	80060b8 <_dtoa_r+0xc64>
 80064e8:	d8800417 	ldw	r2,16(sp)
 80064ec:	10800044 	addi	r2,r2,1
 80064f0:	d8800415 	stw	r2,16(sp)
 80064f4:	d8800717 	ldw	r2,28(sp)
 80064f8:	103f571e 	bne	r2,zero,8006258 <_dtoa_r+0xe04>
 80064fc:	900b883a 	mov	r5,r18
 8006500:	a809883a 	mov	r4,r21
 8006504:	80052200 	call	8005220 <quorem>
 8006508:	12000c04 	addi	r8,r2,48
 800650c:	d8800317 	ldw	r2,12(sp)
 8006510:	0029883a 	mov	r20,zero
 8006514:	15c00044 	addi	r23,r2,1
 8006518:	12000005 	stb	r8,0(r2)
 800651c:	003eb006 	br	8005fe0 <_dtoa_r+0xb8c>
 8006520:	a005883a 	mov	r2,r20
 8006524:	003e5506 	br	8005e7c <_dtoa_r+0xa28>
 8006528:	800b883a 	mov	r5,r16
 800652c:	980d883a 	mov	r6,r19
 8006530:	e009883a 	mov	r4,fp
 8006534:	80091140 	call	8009114 <__lshift>
 8006538:	1021883a 	mov	r16,r2
 800653c:	003f4706 	br	800625c <_dtoa_r+0xe08>
 8006540:	14a5c83a 	sub	r18,r2,r18
 8006544:	003e3e06 	br	8005e40 <_dtoa_r+0x9ec>
 8006548:	00820074 	movhi	r2,2049
 800654c:	10891104 	addi	r2,r2,9284
 8006550:	11800817 	ldw	r6,32(r2)
 8006554:	11c00917 	ldw	r7,36(r2)
 8006558:	d9000117 	ldw	r4,4(sp)
 800655c:	880b883a 	mov	r5,r17
 8006560:	da400e15 	stw	r9,56(sp)
 8006564:	da800d15 	stw	r10,52(sp)
 8006568:	800d7580 	call	800d758 <__divdf3>
 800656c:	d8800c15 	stw	r2,48(sp)
 8006570:	1827883a 	mov	r19,r3
 8006574:	bdc003cc 	andi	r23,r23,15
 8006578:	040000c4 	movi	r16,3
 800657c:	da800d17 	ldw	r10,52(sp)
 8006580:	da400e17 	ldw	r9,56(sp)
 8006584:	003c9206 	br	80057d0 <_dtoa_r+0x37c>
 8006588:	d8000715 	stw	zero,28(sp)
 800658c:	003ed306 	br	80060dc <_dtoa_r+0xc88>
 8006590:	1000031e 	bne	r2,zero,80065a0 <_dtoa_r+0x114c>
 8006594:	da000117 	ldw	r8,4(sp)
 8006598:	4200004c 	andi	r8,r8,1
 800659c:	403e9b1e 	bne	r8,zero,800600c <_dtoa_r+0xbb8>
 80065a0:	1805883a 	mov	r2,r3
 80065a4:	00000206 	br	80065b0 <_dtoa_r+0x115c>
 80065a8:	b8bfff83 	ldbu	r2,-2(r23)
 80065ac:	182f883a 	mov	r23,r3
 80065b0:	10803fcc 	andi	r2,r2,255
 80065b4:	1080201c 	xori	r2,r2,128
 80065b8:	10bfe004 	addi	r2,r2,-128
 80065bc:	10800c18 	cmpnei	r2,r2,48
 80065c0:	b8ffffc4 	addi	r3,r23,-1
 80065c4:	103ff826 	beq	r2,zero,80065a8 <_dtoa_r+0x1154>
 80065c8:	003e9d06 	br	8006040 <_dtoa_r+0xbec>
 80065cc:	d8c00a17 	ldw	r3,40(sp)
 80065d0:	1800bc26 	beq	r3,zero,80068c4 <_dtoa_r+0x1470>
 80065d4:	d8c00517 	ldw	r3,20(sp)
 80065d8:	10810cc4 	addi	r2,r2,1075
 80065dc:	a0a9883a 	add	r20,r20,r2
 80065e0:	1885883a 	add	r2,r3,r2
 80065e4:	1827883a 	mov	r19,r3
 80065e8:	dc800817 	ldw	r18,32(sp)
 80065ec:	d8800515 	stw	r2,20(sp)
 80065f0:	003e1a06 	br	8005e5c <_dtoa_r+0xa08>
 80065f4:	d8c00317 	ldw	r3,12(sp)
 80065f8:	00800c44 	movi	r2,49
 80065fc:	18800005 	stb	r2,0(r3)
 8006600:	d8800417 	ldw	r2,16(sp)
 8006604:	10800044 	addi	r2,r2,1
 8006608:	d8800415 	stw	r2,16(sp)
 800660c:	003e8c06 	br	8006040 <_dtoa_r+0xbec>
 8006610:	8009883a 	mov	r4,r16
 8006614:	800f53c0 	call	800f53c <__floatsidf>
 8006618:	900d883a 	mov	r6,r18
 800661c:	980f883a 	mov	r7,r19
 8006620:	1009883a 	mov	r4,r2
 8006624:	180b883a 	mov	r5,r3
 8006628:	800e31c0 	call	800e31c <__muldf3>
 800662c:	000d883a 	mov	r6,zero
 8006630:	01d00734 	movhi	r7,16412
 8006634:	1009883a 	mov	r4,r2
 8006638:	180b883a 	mov	r5,r3
 800663c:	800cdb80 	call	800cdb8 <__adddf3>
 8006640:	d8800c15 	stw	r2,48(sp)
 8006644:	00bf3034 	movhi	r2,64704
 8006648:	1885883a 	add	r2,r3,r2
 800664c:	d8800d15 	stw	r2,52(sp)
 8006650:	9009883a 	mov	r4,r18
 8006654:	980b883a 	mov	r5,r19
 8006658:	000d883a 	mov	r6,zero
 800665c:	01d00534 	movhi	r7,16404
 8006660:	800eafc0 	call	800eafc <__subdf3>
 8006664:	ddc00c17 	ldw	r23,48(sp)
 8006668:	dcc00d17 	ldw	r19,52(sp)
 800666c:	1009883a 	mov	r4,r2
 8006670:	b80d883a 	mov	r6,r23
 8006674:	980f883a 	mov	r7,r19
 8006678:	180b883a 	mov	r5,r3
 800667c:	1025883a 	mov	r18,r2
 8006680:	1821883a 	mov	r16,r3
 8006684:	800e13c0 	call	800e13c <__gedf2>
 8006688:	0080ee16 	blt	zero,r2,8006a44 <_dtoa_r+0x15f0>
 800668c:	99e0003c 	xorhi	r7,r19,32768
 8006690:	b80d883a 	mov	r6,r23
 8006694:	9009883a 	mov	r4,r18
 8006698:	800b883a 	mov	r5,r16
 800669c:	800e22c0 	call	800e22c <__ledf2>
 80066a0:	103d380e 	bge	r2,zero,8005b84 <_dtoa_r+0x730>
 80066a4:	0025883a 	mov	r18,zero
 80066a8:	0021883a 	mov	r16,zero
 80066ac:	003d5206 	br	8005bf8 <_dtoa_r+0x7a4>
 80066b0:	d8800417 	ldw	r2,16(sp)
 80066b4:	1000ad1e 	bne	r2,zero,800696c <_dtoa_r+0x1518>
 80066b8:	dc800117 	ldw	r18,4(sp)
 80066bc:	8827883a 	mov	r19,r17
 80066c0:	04000084 	movi	r16,2
 80066c4:	003c5b06 	br	8005834 <_dtoa_r+0x3e0>
 80066c8:	d8800117 	ldw	r2,4(sp)
 80066cc:	103ecf1e 	bne	r2,zero,800620c <_dtoa_r+0xdb8>
 80066d0:	00800434 	movhi	r2,16
 80066d4:	10bfffc4 	addi	r2,r2,-1
 80066d8:	8884703a 	and	r2,r17,r2
 80066dc:	103f7526 	beq	r2,zero,80064b4 <_dtoa_r+0x1060>
 80066e0:	003eca06 	br	800620c <_dtoa_r+0xdb8>
 80066e4:	00800e0e 	bge	zero,r2,8006720 <_dtoa_r+0x12cc>
 80066e8:	a80b883a 	mov	r5,r21
 80066ec:	01800044 	movi	r6,1
 80066f0:	e009883a 	mov	r4,fp
 80066f4:	da000115 	stw	r8,4(sp)
 80066f8:	80091140 	call	8009114 <__lshift>
 80066fc:	900b883a 	mov	r5,r18
 8006700:	1009883a 	mov	r4,r2
 8006704:	102b883a 	mov	r21,r2
 8006708:	80092500 	call	8009250 <__mcmp>
 800670c:	da000117 	ldw	r8,4(sp)
 8006710:	0080d50e 	bge	zero,r2,8006a68 <_dtoa_r+0x1614>
 8006714:	42000e60 	cmpeqi	r8,r8,57
 8006718:	4000c31e 	bne	r8,zero,8006a28 <_dtoa_r+0x15d4>
 800671c:	b2000c44 	addi	r8,r22,49
 8006720:	8029883a 	mov	r20,r16
 8006724:	8a000005 	stb	r8,0(r17)
 8006728:	9821883a 	mov	r16,r19
 800672c:	003e4406 	br	8006040 <_dtoa_r+0xbec>
 8006730:	81400117 	ldw	r5,4(r16)
 8006734:	e009883a 	mov	r4,fp
 8006738:	80089500 	call	8008950 <_Balloc>
 800673c:	81800417 	ldw	r6,16(r16)
 8006740:	81400304 	addi	r5,r16,12
 8006744:	11000304 	addi	r4,r2,12
 8006748:	31800084 	addi	r6,r6,2
 800674c:	300c90ba 	slli	r6,r6,2
 8006750:	1023883a 	mov	r17,r2
 8006754:	80086340 	call	8008634 <memcpy>
 8006758:	01800044 	movi	r6,1
 800675c:	880b883a 	mov	r5,r17
 8006760:	e009883a 	mov	r4,fp
 8006764:	80091140 	call	8009114 <__lshift>
 8006768:	1027883a 	mov	r19,r2
 800676c:	003ebd06 	br	8006264 <_dtoa_r+0xe10>
 8006770:	dd400117 	ldw	r21,4(sp)
 8006774:	003cc906 	br	8005a9c <_dtoa_r+0x648>
 8006778:	d8800517 	ldw	r2,20(sp)
 800677c:	d8c00617 	ldw	r3,24(sp)
 8006780:	10e7c83a 	sub	r19,r2,r3
 8006784:	003db506 	br	8005e5c <_dtoa_r+0xa08>
 8006788:	40800e58 	cmpnei	r2,r8,57
 800678c:	1000a626 	beq	r2,zero,8006a28 <_dtoa_r+0x15d4>
 8006790:	42000044 	addi	r8,r8,1
 8006794:	003fe206 	br	8006720 <_dtoa_r+0x12cc>
 8006798:	8029883a 	mov	r20,r16
 800679c:	9821883a 	mov	r16,r19
 80067a0:	003e0f06 	br	8005fe0 <_dtoa_r+0xb8c>
 80067a4:	d9000c17 	ldw	r4,48(sp)
 80067a8:	d9400d17 	ldw	r5,52(sp)
 80067ac:	da401015 	stw	r9,64(sp)
 80067b0:	800e31c0 	call	800e31c <__muldf3>
 80067b4:	d9000e17 	ldw	r4,56(sp)
 80067b8:	d8c00d15 	stw	r3,52(sp)
 80067bc:	da401017 	ldw	r9,64(sp)
 80067c0:	d8c00317 	ldw	r3,12(sp)
 80067c4:	d8800c15 	stw	r2,48(sp)
 80067c8:	20800058 	cmpnei	r2,r4,1
 80067cc:	1a400005 	stb	r9,0(r3)
 80067d0:	1907883a 	add	r3,r3,r4
 80067d4:	1809883a 	mov	r4,r3
 80067d8:	10001d26 	beq	r2,zero,8006850 <_dtoa_r+0x13fc>
 80067dc:	8007883a 	mov	r3,r16
 80067e0:	9005883a 	mov	r2,r18
 80067e4:	dc400e15 	stw	r17,56(sp)
 80067e8:	2021883a 	mov	r16,r4
 80067ec:	000d883a 	mov	r6,zero
 80067f0:	01d00934 	movhi	r7,16420
 80067f4:	1009883a 	mov	r4,r2
 80067f8:	180b883a 	mov	r5,r3
 80067fc:	800e31c0 	call	800e31c <__muldf3>
 8006800:	180b883a 	mov	r5,r3
 8006804:	1009883a 	mov	r4,r2
 8006808:	1825883a 	mov	r18,r3
 800680c:	1023883a 	mov	r17,r2
 8006810:	800f4bc0 	call	800f4bc <__fixdfsi>
 8006814:	1009883a 	mov	r4,r2
 8006818:	1027883a 	mov	r19,r2
 800681c:	800f53c0 	call	800f53c <__floatsidf>
 8006820:	100d883a 	mov	r6,r2
 8006824:	180f883a 	mov	r7,r3
 8006828:	8809883a 	mov	r4,r17
 800682c:	900b883a 	mov	r5,r18
 8006830:	bdc00044 	addi	r23,r23,1
 8006834:	9cc00c04 	addi	r19,r19,48
 8006838:	800eafc0 	call	800eafc <__subdf3>
 800683c:	bcffffc5 	stb	r19,-1(r23)
 8006840:	bc3fea1e 	bne	r23,r16,80067ec <_dtoa_r+0x1398>
 8006844:	dc400e17 	ldw	r17,56(sp)
 8006848:	1025883a 	mov	r18,r2
 800684c:	1821883a 	mov	r16,r3
 8006850:	d9000c17 	ldw	r4,48(sp)
 8006854:	d9400d17 	ldw	r5,52(sp)
 8006858:	000d883a 	mov	r6,zero
 800685c:	01cff834 	movhi	r7,16352
 8006860:	800cdb80 	call	800cdb8 <__adddf3>
 8006864:	100d883a 	mov	r6,r2
 8006868:	180f883a 	mov	r7,r3
 800686c:	9009883a 	mov	r4,r18
 8006870:	800b883a 	mov	r5,r16
 8006874:	800e13c0 	call	800e13c <__gedf2>
 8006878:	00807516 	blt	zero,r2,8006a50 <_dtoa_r+0x15fc>
 800687c:	d9800c17 	ldw	r6,48(sp)
 8006880:	d9c00d17 	ldw	r7,52(sp)
 8006884:	0009883a 	mov	r4,zero
 8006888:	014ff834 	movhi	r5,16352
 800688c:	800eafc0 	call	800eafc <__subdf3>
 8006890:	100d883a 	mov	r6,r2
 8006894:	180f883a 	mov	r7,r3
 8006898:	9009883a 	mov	r4,r18
 800689c:	800b883a 	mov	r5,r16
 80068a0:	800e22c0 	call	800e22c <__ledf2>
 80068a4:	103cb70e 	bge	r2,zero,8005b84 <_dtoa_r+0x730>
 80068a8:	00000106 	br	80068b0 <_dtoa_r+0x145c>
 80068ac:	182f883a 	mov	r23,r3
 80068b0:	b8bfffc7 	ldb	r2,-1(r23)
 80068b4:	b8ffffc4 	addi	r3,r23,-1
 80068b8:	10800c20 	cmpeqi	r2,r2,48
 80068bc:	103ffb1e 	bne	r2,zero,80068ac <_dtoa_r+0x1458>
 80068c0:	003c7306 	br	8005a90 <_dtoa_r+0x63c>
 80068c4:	d8c01217 	ldw	r3,72(sp)
 80068c8:	d9000517 	ldw	r4,20(sp)
 80068cc:	00800d84 	movi	r2,54
 80068d0:	10c5c83a 	sub	r2,r2,r3
 80068d4:	a0a9883a 	add	r20,r20,r2
 80068d8:	2085883a 	add	r2,r4,r2
 80068dc:	2027883a 	mov	r19,r4
 80068e0:	dc800817 	ldw	r18,32(sp)
 80068e4:	d8800515 	stw	r2,20(sp)
 80068e8:	003d5c06 	br	8005e5c <_dtoa_r+0xa08>
 80068ec:	d8800617 	ldw	r2,24(sp)
 80068f0:	103f4726 	beq	r2,zero,8006610 <_dtoa_r+0x11bc>
 80068f4:	ddc00b17 	ldw	r23,44(sp)
 80068f8:	05fca20e 	bge	zero,r23,8005b84 <_dtoa_r+0x730>
 80068fc:	980b883a 	mov	r5,r19
 8006900:	000d883a 	mov	r6,zero
 8006904:	01d00934 	movhi	r7,16420
 8006908:	9009883a 	mov	r4,r18
 800690c:	800e31c0 	call	800e31c <__muldf3>
 8006910:	81000044 	addi	r4,r16,1
 8006914:	1025883a 	mov	r18,r2
 8006918:	1827883a 	mov	r19,r3
 800691c:	800f53c0 	call	800f53c <__floatsidf>
 8006920:	900d883a 	mov	r6,r18
 8006924:	980f883a 	mov	r7,r19
 8006928:	1009883a 	mov	r4,r2
 800692c:	180b883a 	mov	r5,r3
 8006930:	800e31c0 	call	800e31c <__muldf3>
 8006934:	000d883a 	mov	r6,zero
 8006938:	01d00734 	movhi	r7,16412
 800693c:	1009883a 	mov	r4,r2
 8006940:	180b883a 	mov	r5,r3
 8006944:	800cdb80 	call	800cdb8 <__adddf3>
 8006948:	d8800c15 	stw	r2,48(sp)
 800694c:	d8800417 	ldw	r2,16(sp)
 8006950:	ddc00e15 	stw	r23,56(sp)
 8006954:	10bfffc4 	addi	r2,r2,-1
 8006958:	d8800f15 	stw	r2,60(sp)
 800695c:	00bf3034 	movhi	r2,64704
 8006960:	1885883a 	add	r2,r3,r2
 8006964:	d8800d15 	stw	r2,52(sp)
 8006968:	003bd006 	br	80058ac <_dtoa_r+0x458>
 800696c:	d8800417 	ldw	r2,16(sp)
 8006970:	d9000117 	ldw	r4,4(sp)
 8006974:	880b883a 	mov	r5,r17
 8006978:	00afc83a 	sub	r23,zero,r2
 800697c:	b88003cc 	andi	r2,r23,15
 8006980:	100690fa 	slli	r3,r2,3
 8006984:	00820074 	movhi	r2,2049
 8006988:	10891b04 	addi	r2,r2,9324
 800698c:	10c5883a 	add	r2,r2,r3
 8006990:	11800017 	ldw	r6,0(r2)
 8006994:	11c00117 	ldw	r7,4(r2)
 8006998:	b82fd13a 	srai	r23,r23,4
 800699c:	800e31c0 	call	800e31c <__muldf3>
 80069a0:	1025883a 	mov	r18,r2
 80069a4:	1827883a 	mov	r19,r3
 80069a8:	b8004a26 	beq	r23,zero,8006ad4 <_dtoa_r+0x1680>
 80069ac:	02020074 	movhi	r8,2049
 80069b0:	04000084 	movi	r16,2
 80069b4:	42091104 	addi	r8,r8,9284
 80069b8:	dc400c15 	stw	r17,48(sp)
 80069bc:	000f883a 	mov	r7,zero
 80069c0:	8023883a 	mov	r17,r16
 80069c4:	4021883a 	mov	r16,r8
 80069c8:	b980004c 	andi	r6,r23,1
 80069cc:	1009883a 	mov	r4,r2
 80069d0:	b82fd07a 	srai	r23,r23,1
 80069d4:	180b883a 	mov	r5,r3
 80069d8:	30000526 	beq	r6,zero,80069f0 <_dtoa_r+0x159c>
 80069dc:	81c00117 	ldw	r7,4(r16)
 80069e0:	81800017 	ldw	r6,0(r16)
 80069e4:	8c400044 	addi	r17,r17,1
 80069e8:	800e31c0 	call	800e31c <__muldf3>
 80069ec:	01c00044 	movi	r7,1
 80069f0:	84000204 	addi	r16,r16,8
 80069f4:	b83ff41e 	bne	r23,zero,80069c8 <_dtoa_r+0x1574>
 80069f8:	39c03fcc 	andi	r7,r7,255
 80069fc:	8821883a 	mov	r16,r17
 8006a00:	dc400c17 	ldw	r17,48(sp)
 8006a04:	383b8b26 	beq	r7,zero,8005834 <_dtoa_r+0x3e0>
 8006a08:	1025883a 	mov	r18,r2
 8006a0c:	1827883a 	mov	r19,r3
 8006a10:	003b8806 	br	8005834 <_dtoa_r+0x3e0>
 8006a14:	d8800417 	ldw	r2,16(sp)
 8006a18:	02000c44 	movi	r8,49
 8006a1c:	10800044 	addi	r2,r2,1
 8006a20:	d8800415 	stw	r2,16(sp)
 8006a24:	003cf606 	br	8005e00 <_dtoa_r+0x9ac>
 8006a28:	00800e44 	movi	r2,57
 8006a2c:	8029883a 	mov	r20,r16
 8006a30:	88800005 	stb	r2,0(r17)
 8006a34:	9821883a 	mov	r16,r19
 8006a38:	00c00e44 	movi	r3,57
 8006a3c:	d9400317 	ldw	r5,12(sp)
 8006a40:	003d7706 	br	8006020 <_dtoa_r+0xbcc>
 8006a44:	0025883a 	mov	r18,zero
 8006a48:	0021883a 	mov	r16,zero
 8006a4c:	003e6706 	br	80063ec <_dtoa_r+0xf98>
 8006a50:	d8800f17 	ldw	r2,60(sp)
 8006a54:	ba3fffc3 	ldbu	r8,-1(r23)
 8006a58:	d9000317 	ldw	r4,12(sp)
 8006a5c:	10800044 	addi	r2,r2,1
 8006a60:	d8800415 	stw	r2,16(sp)
 8006a64:	003cdf06 	br	8005de4 <_dtoa_r+0x990>
 8006a68:	103f2d1e 	bne	r2,zero,8006720 <_dtoa_r+0x12cc>
 8006a6c:	4080004c 	andi	r2,r8,1
 8006a70:	103f281e 	bne	r2,zero,8006714 <_dtoa_r+0x12c0>
 8006a74:	003f2a06 	br	8006720 <_dtoa_r+0x12cc>
 8006a78:	d8800f17 	ldw	r2,60(sp)
 8006a7c:	8811883a 	mov	r8,r17
 8006a80:	d9000317 	ldw	r4,12(sp)
 8006a84:	10800044 	addi	r2,r2,1
 8006a88:	d8800415 	stw	r2,16(sp)
 8006a8c:	003cd506 	br	8005de4 <_dtoa_r+0x990>
 8006a90:	40800e60 	cmpeqi	r2,r8,57
 8006a94:	8dc00044 	addi	r23,r17,1
 8006a98:	103fe31e 	bne	r2,zero,8006a28 <_dtoa_r+0x15d4>
 8006a9c:	053f1f16 	blt	zero,r20,800671c <_dtoa_r+0x12c8>
 8006aa0:	003f1f06 	br	8006720 <_dtoa_r+0x12cc>
 8006aa4:	d8800217 	ldw	r2,8(sp)
 8006aa8:	108000c8 	cmpgei	r2,r2,3
 8006aac:	103e9326 	beq	r2,zero,80064fc <_dtoa_r+0x10a8>
 8006ab0:	d8800b17 	ldw	r2,44(sp)
 8006ab4:	dd000415 	stw	r20,16(sp)
 8006ab8:	d8800615 	stw	r2,24(sp)
 8006abc:	003e3f06 	br	80063bc <_dtoa_r+0xf68>
 8006ac0:	d8800217 	ldw	r2,8(sp)
 8006ac4:	108000c8 	cmpgei	r2,r2,3
 8006ac8:	103ff91e 	bne	r2,zero,8006ab0 <_dtoa_r+0x165c>
 8006acc:	d8800b17 	ldw	r2,44(sp)
 8006ad0:	003de006 	br	8006254 <_dtoa_r+0xe00>
 8006ad4:	04000084 	movi	r16,2
 8006ad8:	003b5606 	br	8005834 <_dtoa_r+0x3e0>
 8006adc:	d8800f17 	ldw	r2,60(sp)
 8006ae0:	d9000317 	ldw	r4,12(sp)
 8006ae4:	10800044 	addi	r2,r2,1
 8006ae8:	d8800415 	stw	r2,16(sp)
 8006aec:	003cbd06 	br	8005de4 <_dtoa_r+0x990>
 8006af0:	00820074 	movhi	r2,2049
 8006af4:	10890104 	addi	r2,r2,9220
 8006af8:	d8800315 	stw	r2,12(sp)
 8006afc:	003a8706 	br	800551c <_dtoa_r+0xc8>
 8006b00:	000b883a 	mov	r5,zero
 8006b04:	003b1b06 	br	8005774 <_dtoa_r+0x320>
 8006b08:	18c00120 	cmpeqi	r3,r3,4
 8006b0c:	183d0f1e 	bne	r3,zero,8005f4c <_dtoa_r+0xaf8>
 8006b10:	00c00f04 	movi	r3,60
 8006b14:	1885c83a 	sub	r2,r3,r2
 8006b18:	003d0706 	br	8005f38 <_dtoa_r+0xae4>

08006b1c <__sflush_r>:
 8006b1c:	2880030b 	ldhu	r2,12(r5)
 8006b20:	defffb04 	addi	sp,sp,-20
 8006b24:	dcc00315 	stw	r19,12(sp)
 8006b28:	dc000015 	stw	r16,0(sp)
 8006b2c:	dfc00415 	stw	ra,16(sp)
 8006b30:	dc800215 	stw	r18,8(sp)
 8006b34:	dc400115 	stw	r17,4(sp)
 8006b38:	10c0020c 	andi	r3,r2,8
 8006b3c:	2821883a 	mov	r16,r5
 8006b40:	2027883a 	mov	r19,r4
 8006b44:	18003f1e 	bne	r3,zero,8006c44 <__sflush_r+0x128>
 8006b48:	28c00117 	ldw	r3,4(r5)
 8006b4c:	10820014 	ori	r2,r2,2048
 8006b50:	2880030d 	sth	r2,12(r5)
 8006b54:	00c0550e 	bge	zero,r3,8006cac <__sflush_r+0x190>
 8006b58:	82000a17 	ldw	r8,40(r16)
 8006b5c:	40003126 	beq	r8,zero,8006c24 <__sflush_r+0x108>
 8006b60:	9c400017 	ldw	r17,0(r19)
 8006b64:	1104000c 	andi	r4,r2,4096
 8006b68:	98000015 	stw	zero,0(r19)
 8006b6c:	1007883a 	mov	r3,r2
 8006b70:	81400717 	ldw	r5,28(r16)
 8006b74:	2000521e 	bne	r4,zero,8006cc0 <__sflush_r+0x1a4>
 8006b78:	01c00044 	movi	r7,1
 8006b7c:	000d883a 	mov	r6,zero
 8006b80:	9809883a 	mov	r4,r19
 8006b84:	403ee83a 	callr	r8
 8006b88:	10ffffd8 	cmpnei	r3,r2,-1
 8006b8c:	18005826 	beq	r3,zero,8006cf0 <__sflush_r+0x1d4>
 8006b90:	80c0030b 	ldhu	r3,12(r16)
 8006b94:	82000a17 	ldw	r8,40(r16)
 8006b98:	81400717 	ldw	r5,28(r16)
 8006b9c:	18c0010c 	andi	r3,r3,4
 8006ba0:	18000626 	beq	r3,zero,8006bbc <__sflush_r+0xa0>
 8006ba4:	81000117 	ldw	r4,4(r16)
 8006ba8:	80c00c17 	ldw	r3,48(r16)
 8006bac:	1105c83a 	sub	r2,r2,r4
 8006bb0:	18000226 	beq	r3,zero,8006bbc <__sflush_r+0xa0>
 8006bb4:	80c00f17 	ldw	r3,60(r16)
 8006bb8:	10c5c83a 	sub	r2,r2,r3
 8006bbc:	000f883a 	mov	r7,zero
 8006bc0:	100d883a 	mov	r6,r2
 8006bc4:	9809883a 	mov	r4,r19
 8006bc8:	403ee83a 	callr	r8
 8006bcc:	10ffffd8 	cmpnei	r3,r2,-1
 8006bd0:	18003d1e 	bne	r3,zero,8006cc8 <__sflush_r+0x1ac>
 8006bd4:	99000017 	ldw	r4,0(r19)
 8006bd8:	80c0030b 	ldhu	r3,12(r16)
 8006bdc:	20004e26 	beq	r4,zero,8006d18 <__sflush_r+0x1fc>
 8006be0:	21400760 	cmpeqi	r5,r4,29
 8006be4:	2800021e 	bne	r5,zero,8006bf0 <__sflush_r+0xd4>
 8006be8:	210005a0 	cmpeqi	r4,r4,22
 8006bec:	20002c26 	beq	r4,zero,8006ca0 <__sflush_r+0x184>
 8006bf0:	80800417 	ldw	r2,16(r16)
 8006bf4:	18fdffcc 	andi	r3,r3,63487
 8006bf8:	80c0030d 	sth	r3,12(r16)
 8006bfc:	80000115 	stw	zero,4(r16)
 8006c00:	80800015 	stw	r2,0(r16)
 8006c04:	81400c17 	ldw	r5,48(r16)
 8006c08:	9c400015 	stw	r17,0(r19)
 8006c0c:	28000526 	beq	r5,zero,8006c24 <__sflush_r+0x108>
 8006c10:	80801004 	addi	r2,r16,64
 8006c14:	28800226 	beq	r5,r2,8006c20 <__sflush_r+0x104>
 8006c18:	9809883a 	mov	r4,r19
 8006c1c:	800723c0 	call	800723c <_free_r>
 8006c20:	80000c15 	stw	zero,48(r16)
 8006c24:	0005883a 	mov	r2,zero
 8006c28:	dfc00417 	ldw	ra,16(sp)
 8006c2c:	dcc00317 	ldw	r19,12(sp)
 8006c30:	dc800217 	ldw	r18,8(sp)
 8006c34:	dc400117 	ldw	r17,4(sp)
 8006c38:	dc000017 	ldw	r16,0(sp)
 8006c3c:	dec00504 	addi	sp,sp,20
 8006c40:	f800283a 	ret
 8006c44:	2c800417 	ldw	r18,16(r5)
 8006c48:	903ff626 	beq	r18,zero,8006c24 <__sflush_r+0x108>
 8006c4c:	2c400017 	ldw	r17,0(r5)
 8006c50:	108000cc 	andi	r2,r2,3
 8006c54:	2c800015 	stw	r18,0(r5)
 8006c58:	8ca3c83a 	sub	r17,r17,r18
 8006c5c:	1000161e 	bne	r2,zero,8006cb8 <__sflush_r+0x19c>
 8006c60:	28800517 	ldw	r2,20(r5)
 8006c64:	80800215 	stw	r2,8(r16)
 8006c68:	04400316 	blt	zero,r17,8006c78 <__sflush_r+0x15c>
 8006c6c:	003fed06 	br	8006c24 <__sflush_r+0x108>
 8006c70:	90a5883a 	add	r18,r18,r2
 8006c74:	047feb0e 	bge	zero,r17,8006c24 <__sflush_r+0x108>
 8006c78:	80800917 	ldw	r2,36(r16)
 8006c7c:	81400717 	ldw	r5,28(r16)
 8006c80:	880f883a 	mov	r7,r17
 8006c84:	900d883a 	mov	r6,r18
 8006c88:	9809883a 	mov	r4,r19
 8006c8c:	103ee83a 	callr	r2
 8006c90:	88a3c83a 	sub	r17,r17,r2
 8006c94:	00bff616 	blt	zero,r2,8006c70 <__sflush_r+0x154>
 8006c98:	80c0030b 	ldhu	r3,12(r16)
 8006c9c:	00bfffc4 	movi	r2,-1
 8006ca0:	18c01014 	ori	r3,r3,64
 8006ca4:	80c0030d 	sth	r3,12(r16)
 8006ca8:	003fdf06 	br	8006c28 <__sflush_r+0x10c>
 8006cac:	28c00f17 	ldw	r3,60(r5)
 8006cb0:	00ffa916 	blt	zero,r3,8006b58 <__sflush_r+0x3c>
 8006cb4:	003fdb06 	br	8006c24 <__sflush_r+0x108>
 8006cb8:	0005883a 	mov	r2,zero
 8006cbc:	003fe906 	br	8006c64 <__sflush_r+0x148>
 8006cc0:	80801417 	ldw	r2,80(r16)
 8006cc4:	003fb506 	br	8006b9c <__sflush_r+0x80>
 8006cc8:	80c0030b 	ldhu	r3,12(r16)
 8006ccc:	81000417 	ldw	r4,16(r16)
 8006cd0:	80000115 	stw	zero,4(r16)
 8006cd4:	197dffcc 	andi	r5,r3,63487
 8006cd8:	8140030d 	sth	r5,12(r16)
 8006cdc:	81000015 	stw	r4,0(r16)
 8006ce0:	18c4000c 	andi	r3,r3,4096
 8006ce4:	183fc726 	beq	r3,zero,8006c04 <__sflush_r+0xe8>
 8006ce8:	80801415 	stw	r2,80(r16)
 8006cec:	003fc506 	br	8006c04 <__sflush_r+0xe8>
 8006cf0:	98c00017 	ldw	r3,0(r19)
 8006cf4:	183fa626 	beq	r3,zero,8006b90 <__sflush_r+0x74>
 8006cf8:	19000760 	cmpeqi	r4,r3,29
 8006cfc:	20000e1e 	bne	r4,zero,8006d38 <__sflush_r+0x21c>
 8006d00:	18c00598 	cmpnei	r3,r3,22
 8006d04:	18000c26 	beq	r3,zero,8006d38 <__sflush_r+0x21c>
 8006d08:	80c0030b 	ldhu	r3,12(r16)
 8006d0c:	18c01014 	ori	r3,r3,64
 8006d10:	80c0030d 	sth	r3,12(r16)
 8006d14:	003fc406 	br	8006c28 <__sflush_r+0x10c>
 8006d18:	81000417 	ldw	r4,16(r16)
 8006d1c:	197dffcc 	andi	r5,r3,63487
 8006d20:	8140030d 	sth	r5,12(r16)
 8006d24:	80000115 	stw	zero,4(r16)
 8006d28:	81000015 	stw	r4,0(r16)
 8006d2c:	18c4000c 	andi	r3,r3,4096
 8006d30:	183fb426 	beq	r3,zero,8006c04 <__sflush_r+0xe8>
 8006d34:	003fec06 	br	8006ce8 <__sflush_r+0x1cc>
 8006d38:	9c400015 	stw	r17,0(r19)
 8006d3c:	0005883a 	mov	r2,zero
 8006d40:	003fb906 	br	8006c28 <__sflush_r+0x10c>

08006d44 <_fflush_r>:
 8006d44:	defffd04 	addi	sp,sp,-12
 8006d48:	dc000115 	stw	r16,4(sp)
 8006d4c:	dfc00215 	stw	ra,8(sp)
 8006d50:	2021883a 	mov	r16,r4
 8006d54:	20000226 	beq	r4,zero,8006d60 <_fflush_r+0x1c>
 8006d58:	20800e17 	ldw	r2,56(r4)
 8006d5c:	10000726 	beq	r2,zero,8006d7c <_fflush_r+0x38>
 8006d60:	2880030f 	ldh	r2,12(r5)
 8006d64:	10000a1e 	bne	r2,zero,8006d90 <_fflush_r+0x4c>
 8006d68:	0005883a 	mov	r2,zero
 8006d6c:	dfc00217 	ldw	ra,8(sp)
 8006d70:	dc000117 	ldw	r16,4(sp)
 8006d74:	dec00304 	addi	sp,sp,12
 8006d78:	f800283a 	ret
 8006d7c:	d9400015 	stw	r5,0(sp)
 8006d80:	80070d80 	call	80070d8 <__sinit>
 8006d84:	d9400017 	ldw	r5,0(sp)
 8006d88:	2880030f 	ldh	r2,12(r5)
 8006d8c:	103ff626 	beq	r2,zero,8006d68 <_fflush_r+0x24>
 8006d90:	8009883a 	mov	r4,r16
 8006d94:	dfc00217 	ldw	ra,8(sp)
 8006d98:	dc000117 	ldw	r16,4(sp)
 8006d9c:	dec00304 	addi	sp,sp,12
 8006da0:	8006b1c1 	jmpi	8006b1c <__sflush_r>

08006da4 <fflush>:
 8006da4:	200b883a 	mov	r5,r4
 8006da8:	20000326 	beq	r4,zero,8006db8 <fflush+0x14>
 8006dac:	00820074 	movhi	r2,2049
 8006db0:	11114117 	ldw	r4,17668(r2)
 8006db4:	8006d441 	jmpi	8006d44 <_fflush_r>
 8006db8:	00820074 	movhi	r2,2049
 8006dbc:	11114017 	ldw	r4,17664(r2)
 8006dc0:	01420034 	movhi	r5,2048
 8006dc4:	295b5104 	addi	r5,r5,27972
 8006dc8:	8007ab01 	jmpi	8007ab0 <_fwalk_reent>

08006dcc <__fp_lock>:
 8006dcc:	0005883a 	mov	r2,zero
 8006dd0:	f800283a 	ret

08006dd4 <_cleanup_r>:
 8006dd4:	01420074 	movhi	r5,2049
 8006dd8:	296e9e04 	addi	r5,r5,-17800
 8006ddc:	8007ab01 	jmpi	8007ab0 <_fwalk_reent>

08006de0 <__sinit.part.0>:
 8006de0:	00c20034 	movhi	r3,2048
 8006de4:	20800117 	ldw	r2,4(r4)
 8006de8:	18db7504 	addi	r3,r3,28116
 8006dec:	20c00f15 	stw	r3,60(r4)
 8006df0:	2140bb04 	addi	r5,r4,748
 8006df4:	00c000c4 	movi	r3,3
 8006df8:	20c0b915 	stw	r3,740(r4)
 8006dfc:	2140ba15 	stw	r5,744(r4)
 8006e00:	2000b815 	stw	zero,736(r4)
 8006e04:	10001705 	stb	zero,92(r2)
 8006e08:	10001745 	stb	zero,93(r2)
 8006e0c:	10001785 	stb	zero,94(r2)
 8006e10:	100017c5 	stb	zero,95(r2)
 8006e14:	10001805 	stb	zero,96(r2)
 8006e18:	10001845 	stb	zero,97(r2)
 8006e1c:	10001885 	stb	zero,98(r2)
 8006e20:	100018c5 	stb	zero,99(r2)
 8006e24:	00c00104 	movi	r3,4
 8006e28:	10c00315 	stw	r3,12(r2)
 8006e2c:	02020074 	movhi	r8,2049
 8006e30:	20c00217 	ldw	r3,8(r4)
 8006e34:	01c20074 	movhi	r7,2049
 8006e38:	01820074 	movhi	r6,2049
 8006e3c:	01420074 	movhi	r5,2049
 8006e40:	42284d04 	addi	r8,r8,-24268
 8006e44:	39e86404 	addi	r7,r7,-24176
 8006e48:	31a88404 	addi	r6,r6,-24048
 8006e4c:	29689b04 	addi	r5,r5,-23956
 8006e50:	02400074 	movhi	r9,1
 8006e54:	10001915 	stw	zero,100(r2)
 8006e58:	10000015 	stw	zero,0(r2)
 8006e5c:	10000115 	stw	zero,4(r2)
 8006e60:	10000215 	stw	zero,8(r2)
 8006e64:	10000415 	stw	zero,16(r2)
 8006e68:	10000515 	stw	zero,20(r2)
 8006e6c:	10000615 	stw	zero,24(r2)
 8006e70:	10800715 	stw	r2,28(r2)
 8006e74:	12000815 	stw	r8,32(r2)
 8006e78:	11c00915 	stw	r7,36(r2)
 8006e7c:	11800a15 	stw	r6,40(r2)
 8006e80:	11400b15 	stw	r5,44(r2)
 8006e84:	4a400284 	addi	r9,r9,10
 8006e88:	1a400315 	stw	r9,12(r3)
 8006e8c:	18001915 	stw	zero,100(r3)
 8006e90:	18000015 	stw	zero,0(r3)
 8006e94:	18000115 	stw	zero,4(r3)
 8006e98:	18000215 	stw	zero,8(r3)
 8006e9c:	18000415 	stw	zero,16(r3)
 8006ea0:	18001705 	stb	zero,92(r3)
 8006ea4:	18001745 	stb	zero,93(r3)
 8006ea8:	18001785 	stb	zero,94(r3)
 8006eac:	180017c5 	stb	zero,95(r3)
 8006eb0:	18001805 	stb	zero,96(r3)
 8006eb4:	18001845 	stb	zero,97(r3)
 8006eb8:	18001885 	stb	zero,98(r3)
 8006ebc:	180018c5 	stb	zero,99(r3)
 8006ec0:	20800317 	ldw	r2,12(r4)
 8006ec4:	024000b4 	movhi	r9,2
 8006ec8:	18000515 	stw	zero,20(r3)
 8006ecc:	18000615 	stw	zero,24(r3)
 8006ed0:	18c00715 	stw	r3,28(r3)
 8006ed4:	1a000815 	stw	r8,32(r3)
 8006ed8:	19c00915 	stw	r7,36(r3)
 8006edc:	19800a15 	stw	r6,40(r3)
 8006ee0:	19400b15 	stw	r5,44(r3)
 8006ee4:	4a400484 	addi	r9,r9,18
 8006ee8:	10001915 	stw	zero,100(r2)
 8006eec:	10000015 	stw	zero,0(r2)
 8006ef0:	10000115 	stw	zero,4(r2)
 8006ef4:	10000215 	stw	zero,8(r2)
 8006ef8:	12400315 	stw	r9,12(r2)
 8006efc:	10000415 	stw	zero,16(r2)
 8006f00:	10000515 	stw	zero,20(r2)
 8006f04:	10000615 	stw	zero,24(r2)
 8006f08:	10001705 	stb	zero,92(r2)
 8006f0c:	10001745 	stb	zero,93(r2)
 8006f10:	10001785 	stb	zero,94(r2)
 8006f14:	100017c5 	stb	zero,95(r2)
 8006f18:	10001805 	stb	zero,96(r2)
 8006f1c:	10001845 	stb	zero,97(r2)
 8006f20:	10001885 	stb	zero,98(r2)
 8006f24:	100018c5 	stb	zero,99(r2)
 8006f28:	10800715 	stw	r2,28(r2)
 8006f2c:	12000815 	stw	r8,32(r2)
 8006f30:	11c00915 	stw	r7,36(r2)
 8006f34:	11800a15 	stw	r6,40(r2)
 8006f38:	11400b15 	stw	r5,44(r2)
 8006f3c:	00800044 	movi	r2,1
 8006f40:	20800e15 	stw	r2,56(r4)
 8006f44:	f800283a 	ret

08006f48 <__fp_unlock>:
 8006f48:	0005883a 	mov	r2,zero
 8006f4c:	f800283a 	ret

08006f50 <__sfmoreglue>:
 8006f50:	defffc04 	addi	sp,sp,-16
 8006f54:	dc800215 	stw	r18,8(sp)
 8006f58:	2825883a 	mov	r18,r5
 8006f5c:	dc000015 	stw	r16,0(sp)
 8006f60:	01401a04 	movi	r5,104
 8006f64:	2021883a 	mov	r16,r4
 8006f68:	913fffc4 	addi	r4,r18,-1
 8006f6c:	dfc00315 	stw	ra,12(sp)
 8006f70:	dc400115 	stw	r17,4(sp)
 8006f74:	8002c3c0 	call	8002c3c <__mulsi3>
 8006f78:	8009883a 	mov	r4,r16
 8006f7c:	11401d04 	addi	r5,r2,116
 8006f80:	1023883a 	mov	r17,r2
 8006f84:	8007d580 	call	8007d58 <_malloc_r>
 8006f88:	1021883a 	mov	r16,r2
 8006f8c:	10000726 	beq	r2,zero,8006fac <__sfmoreglue+0x5c>
 8006f90:	11000304 	addi	r4,r2,12
 8006f94:	10000015 	stw	zero,0(r2)
 8006f98:	14800115 	stw	r18,4(r2)
 8006f9c:	11000215 	stw	r4,8(r2)
 8006fa0:	89801a04 	addi	r6,r17,104
 8006fa4:	000b883a 	mov	r5,zero
 8006fa8:	80088600 	call	8008860 <memset>
 8006fac:	8005883a 	mov	r2,r16
 8006fb0:	dfc00317 	ldw	ra,12(sp)
 8006fb4:	dc800217 	ldw	r18,8(sp)
 8006fb8:	dc400117 	ldw	r17,4(sp)
 8006fbc:	dc000017 	ldw	r16,0(sp)
 8006fc0:	dec00404 	addi	sp,sp,16
 8006fc4:	f800283a 	ret

08006fc8 <__sfp>:
 8006fc8:	defffd04 	addi	sp,sp,-12
 8006fcc:	00820074 	movhi	r2,2049
 8006fd0:	dc000015 	stw	r16,0(sp)
 8006fd4:	14114017 	ldw	r16,17664(r2)
 8006fd8:	dc400115 	stw	r17,4(sp)
 8006fdc:	dfc00215 	stw	ra,8(sp)
 8006fe0:	80800e17 	ldw	r2,56(r16)
 8006fe4:	2023883a 	mov	r17,r4
 8006fe8:	10002b26 	beq	r2,zero,8007098 <__sfp+0xd0>
 8006fec:	8400b804 	addi	r16,r16,736
 8006ff0:	80c00117 	ldw	r3,4(r16)
 8006ff4:	80800217 	ldw	r2,8(r16)
 8006ff8:	18ffffc4 	addi	r3,r3,-1
 8006ffc:	1800050e 	bge	r3,zero,8007014 <__sfp+0x4c>
 8007000:	00002106 	br	8007088 <__sfp+0xc0>
 8007004:	18ffffc4 	addi	r3,r3,-1
 8007008:	193fffd8 	cmpnei	r4,r3,-1
 800700c:	10801a04 	addi	r2,r2,104
 8007010:	20001d26 	beq	r4,zero,8007088 <__sfp+0xc0>
 8007014:	1100030f 	ldh	r4,12(r2)
 8007018:	203ffa1e 	bne	r4,zero,8007004 <__sfp+0x3c>
 800701c:	00fffff4 	movhi	r3,65535
 8007020:	18c00044 	addi	r3,r3,1
 8007024:	10001915 	stw	zero,100(r2)
 8007028:	10000015 	stw	zero,0(r2)
 800702c:	10000115 	stw	zero,4(r2)
 8007030:	10000215 	stw	zero,8(r2)
 8007034:	10c00315 	stw	r3,12(r2)
 8007038:	10000415 	stw	zero,16(r2)
 800703c:	10000515 	stw	zero,20(r2)
 8007040:	10000615 	stw	zero,24(r2)
 8007044:	10001705 	stb	zero,92(r2)
 8007048:	10001745 	stb	zero,93(r2)
 800704c:	10001785 	stb	zero,94(r2)
 8007050:	100017c5 	stb	zero,95(r2)
 8007054:	10001805 	stb	zero,96(r2)
 8007058:	10001845 	stb	zero,97(r2)
 800705c:	10001885 	stb	zero,98(r2)
 8007060:	100018c5 	stb	zero,99(r2)
 8007064:	10000c15 	stw	zero,48(r2)
 8007068:	10000d15 	stw	zero,52(r2)
 800706c:	10001115 	stw	zero,68(r2)
 8007070:	10001215 	stw	zero,72(r2)
 8007074:	dfc00217 	ldw	ra,8(sp)
 8007078:	dc400117 	ldw	r17,4(sp)
 800707c:	dc000017 	ldw	r16,0(sp)
 8007080:	dec00304 	addi	sp,sp,12
 8007084:	f800283a 	ret
 8007088:	80800017 	ldw	r2,0(r16)
 800708c:	10000526 	beq	r2,zero,80070a4 <__sfp+0xdc>
 8007090:	1021883a 	mov	r16,r2
 8007094:	003fd606 	br	8006ff0 <__sfp+0x28>
 8007098:	8009883a 	mov	r4,r16
 800709c:	8006de00 	call	8006de0 <__sinit.part.0>
 80070a0:	003fd206 	br	8006fec <__sfp+0x24>
 80070a4:	01400104 	movi	r5,4
 80070a8:	8809883a 	mov	r4,r17
 80070ac:	8006f500 	call	8006f50 <__sfmoreglue>
 80070b0:	80800015 	stw	r2,0(r16)
 80070b4:	103ff61e 	bne	r2,zero,8007090 <__sfp+0xc8>
 80070b8:	00c00304 	movi	r3,12
 80070bc:	88c00015 	stw	r3,0(r17)
 80070c0:	003fec06 	br	8007074 <__sfp+0xac>

080070c4 <_cleanup>:
 80070c4:	00820074 	movhi	r2,2049
 80070c8:	11114017 	ldw	r4,17664(r2)
 80070cc:	01420074 	movhi	r5,2049
 80070d0:	296e9e04 	addi	r5,r5,-17800
 80070d4:	8007ab01 	jmpi	8007ab0 <_fwalk_reent>

080070d8 <__sinit>:
 80070d8:	20800e17 	ldw	r2,56(r4)
 80070dc:	10000126 	beq	r2,zero,80070e4 <__sinit+0xc>
 80070e0:	f800283a 	ret
 80070e4:	8006de01 	jmpi	8006de0 <__sinit.part.0>

080070e8 <__sfp_lock_acquire>:
 80070e8:	f800283a 	ret

080070ec <__sfp_lock_release>:
 80070ec:	f800283a 	ret

080070f0 <__sinit_lock_acquire>:
 80070f0:	f800283a 	ret

080070f4 <__sinit_lock_release>:
 80070f4:	f800283a 	ret

080070f8 <__fp_lock_all>:
 80070f8:	00820074 	movhi	r2,2049
 80070fc:	11114117 	ldw	r4,17668(r2)
 8007100:	01420034 	movhi	r5,2048
 8007104:	295b7304 	addi	r5,r5,28108
 8007108:	8007a0c1 	jmpi	8007a0c <_fwalk>

0800710c <__fp_unlock_all>:
 800710c:	00820074 	movhi	r2,2049
 8007110:	11114117 	ldw	r4,17668(r2)
 8007114:	01420034 	movhi	r5,2048
 8007118:	295bd204 	addi	r5,r5,28488
 800711c:	8007a0c1 	jmpi	8007a0c <_fwalk>

08007120 <_malloc_trim_r>:
 8007120:	defffb04 	addi	sp,sp,-20
 8007124:	dcc00315 	stw	r19,12(sp)
 8007128:	04c20074 	movhi	r19,2049
 800712c:	dc800215 	stw	r18,8(sp)
 8007130:	dc400115 	stw	r17,4(sp)
 8007134:	dc000015 	stw	r16,0(sp)
 8007138:	dfc00415 	stw	ra,16(sp)
 800713c:	2821883a 	mov	r16,r5
 8007140:	9ccb5c04 	addi	r19,r19,11632
 8007144:	2025883a 	mov	r18,r4
 8007148:	800fca00 	call	800fca0 <__malloc_lock>
 800714c:	98800217 	ldw	r2,8(r19)
 8007150:	14400117 	ldw	r17,4(r2)
 8007154:	00bfff04 	movi	r2,-4
 8007158:	88a2703a 	and	r17,r17,r2
 800715c:	8c21c83a 	sub	r16,r17,r16
 8007160:	8403fbc4 	addi	r16,r16,4079
 8007164:	8020d33a 	srli	r16,r16,12
 8007168:	843fffc4 	addi	r16,r16,-1
 800716c:	8020933a 	slli	r16,r16,12
 8007170:	80840008 	cmpgei	r2,r16,4096
 8007174:	10000626 	beq	r2,zero,8007190 <_malloc_trim_r+0x70>
 8007178:	000b883a 	mov	r5,zero
 800717c:	9009883a 	mov	r4,r18
 8007180:	800a0dc0 	call	800a0dc <_sbrk_r>
 8007184:	98c00217 	ldw	r3,8(r19)
 8007188:	1c47883a 	add	r3,r3,r17
 800718c:	10c00a26 	beq	r2,r3,80071b8 <_malloc_trim_r+0x98>
 8007190:	9009883a 	mov	r4,r18
 8007194:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8007198:	0005883a 	mov	r2,zero
 800719c:	dfc00417 	ldw	ra,16(sp)
 80071a0:	dcc00317 	ldw	r19,12(sp)
 80071a4:	dc800217 	ldw	r18,8(sp)
 80071a8:	dc400117 	ldw	r17,4(sp)
 80071ac:	dc000017 	ldw	r16,0(sp)
 80071b0:	dec00504 	addi	sp,sp,20
 80071b4:	f800283a 	ret
 80071b8:	040bc83a 	sub	r5,zero,r16
 80071bc:	9009883a 	mov	r4,r18
 80071c0:	800a0dc0 	call	800a0dc <_sbrk_r>
 80071c4:	10bfffd8 	cmpnei	r2,r2,-1
 80071c8:	10000d26 	beq	r2,zero,8007200 <_malloc_trim_r+0xe0>
 80071cc:	00820074 	movhi	r2,2049
 80071d0:	10987117 	ldw	r2,25028(r2)
 80071d4:	98c00217 	ldw	r3,8(r19)
 80071d8:	8c23c83a 	sub	r17,r17,r16
 80071dc:	8c400054 	ori	r17,r17,1
 80071e0:	1421c83a 	sub	r16,r2,r16
 80071e4:	1c400115 	stw	r17,4(r3)
 80071e8:	00820074 	movhi	r2,2049
 80071ec:	9009883a 	mov	r4,r18
 80071f0:	14187115 	stw	r16,25028(r2)
 80071f4:	800fcc40 	call	800fcc4 <__malloc_unlock>
 80071f8:	00800044 	movi	r2,1
 80071fc:	003fe706 	br	800719c <_malloc_trim_r+0x7c>
 8007200:	000b883a 	mov	r5,zero
 8007204:	9009883a 	mov	r4,r18
 8007208:	800a0dc0 	call	800a0dc <_sbrk_r>
 800720c:	99000217 	ldw	r4,8(r19)
 8007210:	1107c83a 	sub	r3,r2,r4
 8007214:	19400410 	cmplti	r5,r3,16
 8007218:	283fdd1e 	bne	r5,zero,8007190 <_malloc_trim_r+0x70>
 800721c:	01420074 	movhi	r5,2049
 8007220:	29514217 	ldw	r5,17672(r5)
 8007224:	18c00054 	ori	r3,r3,1
 8007228:	20c00115 	stw	r3,4(r4)
 800722c:	1145c83a 	sub	r2,r2,r5
 8007230:	01420074 	movhi	r5,2049
 8007234:	28987115 	stw	r2,25028(r5)
 8007238:	003fd506 	br	8007190 <_malloc_trim_r+0x70>

0800723c <_free_r>:
 800723c:	28004f26 	beq	r5,zero,800737c <_free_r+0x140>
 8007240:	defffd04 	addi	sp,sp,-12
 8007244:	dc400115 	stw	r17,4(sp)
 8007248:	dc000015 	stw	r16,0(sp)
 800724c:	2023883a 	mov	r17,r4
 8007250:	2821883a 	mov	r16,r5
 8007254:	dfc00215 	stw	ra,8(sp)
 8007258:	800fca00 	call	800fca0 <__malloc_lock>
 800725c:	81ffff17 	ldw	r7,-4(r16)
 8007260:	00bfff84 	movi	r2,-2
 8007264:	80fffe04 	addi	r3,r16,-8
 8007268:	3884703a 	and	r2,r7,r2
 800726c:	01820074 	movhi	r6,2049
 8007270:	1889883a 	add	r4,r3,r2
 8007274:	318b5c04 	addi	r6,r6,11632
 8007278:	21400117 	ldw	r5,4(r4)
 800727c:	32000217 	ldw	r8,8(r6)
 8007280:	027fff04 	movi	r9,-4
 8007284:	2a4a703a 	and	r5,r5,r9
 8007288:	41006426 	beq	r8,r4,800741c <_free_r+0x1e0>
 800728c:	21400115 	stw	r5,4(r4)
 8007290:	39c0004c 	andi	r7,r7,1
 8007294:	2151883a 	add	r8,r4,r5
 8007298:	3800281e 	bne	r7,zero,800733c <_free_r+0x100>
 800729c:	82bffe17 	ldw	r10,-8(r16)
 80072a0:	42000117 	ldw	r8,4(r8)
 80072a4:	01c20074 	movhi	r7,2049
 80072a8:	1a87c83a 	sub	r3,r3,r10
 80072ac:	1a400217 	ldw	r9,8(r3)
 80072b0:	39cb5e04 	addi	r7,r7,11640
 80072b4:	1285883a 	add	r2,r2,r10
 80072b8:	4200004c 	andi	r8,r8,1
 80072bc:	49c04c26 	beq	r9,r7,80073f0 <_free_r+0x1b4>
 80072c0:	1a800317 	ldw	r10,12(r3)
 80072c4:	4a800315 	stw	r10,12(r9)
 80072c8:	52400215 	stw	r9,8(r10)
 80072cc:	40007126 	beq	r8,zero,8007494 <_free_r+0x258>
 80072d0:	11400054 	ori	r5,r2,1
 80072d4:	19400115 	stw	r5,4(r3)
 80072d8:	20800015 	stw	r2,0(r4)
 80072dc:	11008028 	cmpgeui	r4,r2,512
 80072e0:	20002c1e 	bne	r4,zero,8007394 <_free_r+0x158>
 80072e4:	1008d0fa 	srli	r4,r2,3
 80072e8:	31c00117 	ldw	r7,4(r6)
 80072ec:	20800044 	addi	r2,r4,1
 80072f0:	200bd0ba 	srai	r5,r4,2
 80072f4:	100490fa 	slli	r2,r2,3
 80072f8:	01000044 	movi	r4,1
 80072fc:	2148983a 	sll	r4,r4,r5
 8007300:	3085883a 	add	r2,r6,r2
 8007304:	11400017 	ldw	r5,0(r2)
 8007308:	21c8b03a 	or	r4,r4,r7
 800730c:	11fffe04 	addi	r7,r2,-8
 8007310:	19c00315 	stw	r7,12(r3)
 8007314:	19400215 	stw	r5,8(r3)
 8007318:	31000115 	stw	r4,4(r6)
 800731c:	10c00015 	stw	r3,0(r2)
 8007320:	28c00315 	stw	r3,12(r5)
 8007324:	8809883a 	mov	r4,r17
 8007328:	dfc00217 	ldw	ra,8(sp)
 800732c:	dc400117 	ldw	r17,4(sp)
 8007330:	dc000017 	ldw	r16,0(sp)
 8007334:	dec00304 	addi	sp,sp,12
 8007338:	800fcc41 	jmpi	800fcc4 <__malloc_unlock>
 800733c:	41c00117 	ldw	r7,4(r8)
 8007340:	39c0004c 	andi	r7,r7,1
 8007344:	38000e1e 	bne	r7,zero,8007380 <_free_r+0x144>
 8007348:	01c20074 	movhi	r7,2049
 800734c:	1145883a 	add	r2,r2,r5
 8007350:	39cb5e04 	addi	r7,r7,11640
 8007354:	21400217 	ldw	r5,8(r4)
 8007358:	12400054 	ori	r9,r2,1
 800735c:	1891883a 	add	r8,r3,r2
 8007360:	29c05226 	beq	r5,r7,80074ac <_free_r+0x270>
 8007364:	21000317 	ldw	r4,12(r4)
 8007368:	29000315 	stw	r4,12(r5)
 800736c:	21400215 	stw	r5,8(r4)
 8007370:	1a400115 	stw	r9,4(r3)
 8007374:	40800015 	stw	r2,0(r8)
 8007378:	003fd806 	br	80072dc <_free_r+0xa0>
 800737c:	f800283a 	ret
 8007380:	11400054 	ori	r5,r2,1
 8007384:	817fff15 	stw	r5,-4(r16)
 8007388:	20800015 	stw	r2,0(r4)
 800738c:	11008028 	cmpgeui	r4,r2,512
 8007390:	203fd426 	beq	r4,zero,80072e4 <_free_r+0xa8>
 8007394:	1008d27a 	srli	r4,r2,9
 8007398:	21400168 	cmpgeui	r5,r4,5
 800739c:	2800341e 	bne	r5,zero,8007470 <_free_r+0x234>
 80073a0:	1008d1ba 	srli	r4,r2,6
 80073a4:	21c00e44 	addi	r7,r4,57
 80073a8:	380e90fa 	slli	r7,r7,3
 80073ac:	21400e04 	addi	r5,r4,56
 80073b0:	31cf883a 	add	r7,r6,r7
 80073b4:	39000017 	ldw	r4,0(r7)
 80073b8:	39fffe04 	addi	r7,r7,-8
 80073bc:	39004226 	beq	r7,r4,80074c8 <_free_r+0x28c>
 80073c0:	01bfff04 	movi	r6,-4
 80073c4:	21400117 	ldw	r5,4(r4)
 80073c8:	298a703a 	and	r5,r5,r6
 80073cc:	1140022e 	bgeu	r2,r5,80073d8 <_free_r+0x19c>
 80073d0:	21000217 	ldw	r4,8(r4)
 80073d4:	393ffb1e 	bne	r7,r4,80073c4 <_free_r+0x188>
 80073d8:	21c00317 	ldw	r7,12(r4)
 80073dc:	19c00315 	stw	r7,12(r3)
 80073e0:	19000215 	stw	r4,8(r3)
 80073e4:	38c00215 	stw	r3,8(r7)
 80073e8:	20c00315 	stw	r3,12(r4)
 80073ec:	003fcd06 	br	8007324 <_free_r+0xe8>
 80073f0:	40004d1e 	bne	r8,zero,8007528 <_free_r+0x2ec>
 80073f4:	21800317 	ldw	r6,12(r4)
 80073f8:	21000217 	ldw	r4,8(r4)
 80073fc:	2885883a 	add	r2,r5,r2
 8007400:	11400054 	ori	r5,r2,1
 8007404:	21800315 	stw	r6,12(r4)
 8007408:	31000215 	stw	r4,8(r6)
 800740c:	19400115 	stw	r5,4(r3)
 8007410:	1887883a 	add	r3,r3,r2
 8007414:	18800015 	stw	r2,0(r3)
 8007418:	003fc206 	br	8007324 <_free_r+0xe8>
 800741c:	39c0004c 	andi	r7,r7,1
 8007420:	1145883a 	add	r2,r2,r5
 8007424:	3800071e 	bne	r7,zero,8007444 <_free_r+0x208>
 8007428:	81fffe17 	ldw	r7,-8(r16)
 800742c:	19c7c83a 	sub	r3,r3,r7
 8007430:	19000317 	ldw	r4,12(r3)
 8007434:	19400217 	ldw	r5,8(r3)
 8007438:	11c5883a 	add	r2,r2,r7
 800743c:	29000315 	stw	r4,12(r5)
 8007440:	21400215 	stw	r5,8(r4)
 8007444:	01020074 	movhi	r4,2049
 8007448:	11400054 	ori	r5,r2,1
 800744c:	21114317 	ldw	r4,17676(r4)
 8007450:	19400115 	stw	r5,4(r3)
 8007454:	30c00215 	stw	r3,8(r6)
 8007458:	113fb236 	bltu	r2,r4,8007324 <_free_r+0xe8>
 800745c:	00820074 	movhi	r2,2049
 8007460:	11585d17 	ldw	r5,24948(r2)
 8007464:	8809883a 	mov	r4,r17
 8007468:	80071200 	call	8007120 <_malloc_trim_r>
 800746c:	003fad06 	br	8007324 <_free_r+0xe8>
 8007470:	21400568 	cmpgeui	r5,r4,21
 8007474:	28000926 	beq	r5,zero,800749c <_free_r+0x260>
 8007478:	21401568 	cmpgeui	r5,r4,85
 800747c:	2800191e 	bne	r5,zero,80074e4 <_free_r+0x2a8>
 8007480:	1008d33a 	srli	r4,r2,12
 8007484:	21c01bc4 	addi	r7,r4,111
 8007488:	21401b84 	addi	r5,r4,110
 800748c:	380e90fa 	slli	r7,r7,3
 8007490:	003fc706 	br	80073b0 <_free_r+0x174>
 8007494:	1145883a 	add	r2,r2,r5
 8007498:	003fae06 	br	8007354 <_free_r+0x118>
 800749c:	21c01704 	addi	r7,r4,92
 80074a0:	214016c4 	addi	r5,r4,91
 80074a4:	380e90fa 	slli	r7,r7,3
 80074a8:	003fc106 	br	80073b0 <_free_r+0x174>
 80074ac:	30c00515 	stw	r3,20(r6)
 80074b0:	30c00415 	stw	r3,16(r6)
 80074b4:	19c00315 	stw	r7,12(r3)
 80074b8:	19c00215 	stw	r7,8(r3)
 80074bc:	1a400115 	stw	r9,4(r3)
 80074c0:	40800015 	stw	r2,0(r8)
 80074c4:	003f9706 	br	8007324 <_free_r+0xe8>
 80074c8:	280bd0ba 	srai	r5,r5,2
 80074cc:	00800044 	movi	r2,1
 80074d0:	32000117 	ldw	r8,4(r6)
 80074d4:	114a983a 	sll	r5,r2,r5
 80074d8:	2a0ab03a 	or	r5,r5,r8
 80074dc:	31400115 	stw	r5,4(r6)
 80074e0:	003fbe06 	br	80073dc <_free_r+0x1a0>
 80074e4:	21405568 	cmpgeui	r5,r4,341
 80074e8:	2800051e 	bne	r5,zero,8007500 <_free_r+0x2c4>
 80074ec:	1008d3fa 	srli	r4,r2,15
 80074f0:	21c01e04 	addi	r7,r4,120
 80074f4:	21401dc4 	addi	r5,r4,119
 80074f8:	380e90fa 	slli	r7,r7,3
 80074fc:	003fac06 	br	80073b0 <_free_r+0x174>
 8007500:	21015568 	cmpgeui	r4,r4,1365
 8007504:	2000051e 	bne	r4,zero,800751c <_free_r+0x2e0>
 8007508:	1008d4ba 	srli	r4,r2,18
 800750c:	21c01f44 	addi	r7,r4,125
 8007510:	21401f04 	addi	r5,r4,124
 8007514:	380e90fa 	slli	r7,r7,3
 8007518:	003fa506 	br	80073b0 <_free_r+0x174>
 800751c:	01c0fe04 	movi	r7,1016
 8007520:	01401f84 	movi	r5,126
 8007524:	003fa206 	br	80073b0 <_free_r+0x174>
 8007528:	11400054 	ori	r5,r2,1
 800752c:	19400115 	stw	r5,4(r3)
 8007530:	20800015 	stw	r2,0(r4)
 8007534:	003f7b06 	br	8007324 <_free_r+0xe8>

08007538 <__sfvwrite_r>:
 8007538:	30800217 	ldw	r2,8(r6)
 800753c:	1000ca26 	beq	r2,zero,8007868 <__sfvwrite_r+0x330>
 8007540:	2880030b 	ldhu	r2,12(r5)
 8007544:	defff304 	addi	sp,sp,-52
 8007548:	dd000715 	stw	r20,28(sp)
 800754c:	dc000315 	stw	r16,12(sp)
 8007550:	dfc00c15 	stw	ra,48(sp)
 8007554:	df000b15 	stw	fp,44(sp)
 8007558:	ddc00a15 	stw	r23,40(sp)
 800755c:	dd800915 	stw	r22,36(sp)
 8007560:	dd400815 	stw	r21,32(sp)
 8007564:	dcc00615 	stw	r19,24(sp)
 8007568:	dc800515 	stw	r18,20(sp)
 800756c:	dc400415 	stw	r17,16(sp)
 8007570:	d9000015 	stw	r4,0(sp)
 8007574:	10c0020c 	andi	r3,r2,8
 8007578:	2821883a 	mov	r16,r5
 800757c:	3029883a 	mov	r20,r6
 8007580:	18002426 	beq	r3,zero,8007614 <__sfvwrite_r+0xdc>
 8007584:	28c00417 	ldw	r3,16(r5)
 8007588:	18002226 	beq	r3,zero,8007614 <__sfvwrite_r+0xdc>
 800758c:	10c0008c 	andi	r3,r2,2
 8007590:	a4400017 	ldw	r17,0(r20)
 8007594:	18002726 	beq	r3,zero,8007634 <__sfvwrite_r+0xfc>
 8007598:	80c00917 	ldw	r3,36(r16)
 800759c:	80800717 	ldw	r2,28(r16)
 80075a0:	05600034 	movhi	r21,32768
 80075a4:	0027883a 	mov	r19,zero
 80075a8:	0025883a 	mov	r18,zero
 80075ac:	ad7f0004 	addi	r21,r21,-1024
 80075b0:	980d883a 	mov	r6,r19
 80075b4:	100b883a 	mov	r5,r2
 80075b8:	d9000017 	ldw	r4,0(sp)
 80075bc:	90001126 	beq	r18,zero,8007604 <__sfvwrite_r+0xcc>
 80075c0:	900f883a 	mov	r7,r18
 80075c4:	ac80012e 	bgeu	r21,r18,80075cc <__sfvwrite_r+0x94>
 80075c8:	a80f883a 	mov	r7,r21
 80075cc:	183ee83a 	callr	r3
 80075d0:	0080a00e 	bge	zero,r2,8007854 <__sfvwrite_r+0x31c>
 80075d4:	a0c00217 	ldw	r3,8(r20)
 80075d8:	98a7883a 	add	r19,r19,r2
 80075dc:	90a5c83a 	sub	r18,r18,r2
 80075e0:	1885c83a 	sub	r2,r3,r2
 80075e4:	a0800215 	stw	r2,8(r20)
 80075e8:	10006426 	beq	r2,zero,800777c <__sfvwrite_r+0x244>
 80075ec:	80800717 	ldw	r2,28(r16)
 80075f0:	80c00917 	ldw	r3,36(r16)
 80075f4:	980d883a 	mov	r6,r19
 80075f8:	100b883a 	mov	r5,r2
 80075fc:	d9000017 	ldw	r4,0(sp)
 8007600:	903fef1e 	bne	r18,zero,80075c0 <__sfvwrite_r+0x88>
 8007604:	8cc00017 	ldw	r19,0(r17)
 8007608:	8c800117 	ldw	r18,4(r17)
 800760c:	8c400204 	addi	r17,r17,8
 8007610:	003fe706 	br	80075b0 <__sfvwrite_r+0x78>
 8007614:	d9000017 	ldw	r4,0(sp)
 8007618:	800b883a 	mov	r5,r16
 800761c:	80050c00 	call	80050c0 <__swsetup_r>
 8007620:	1000f81e 	bne	r2,zero,8007a04 <__sfvwrite_r+0x4cc>
 8007624:	8080030b 	ldhu	r2,12(r16)
 8007628:	a4400017 	ldw	r17,0(r20)
 800762c:	10c0008c 	andi	r3,r2,2
 8007630:	183fd91e 	bne	r3,zero,8007598 <__sfvwrite_r+0x60>
 8007634:	10c0004c 	andi	r3,r2,1
 8007638:	84800217 	ldw	r18,8(r16)
 800763c:	87000017 	ldw	fp,0(r16)
 8007640:	18008b1e 	bne	r3,zero,8007870 <__sfvwrite_r+0x338>
 8007644:	00e00034 	movhi	r3,32768
 8007648:	18ffff84 	addi	r3,r3,-2
 800764c:	01200034 	movhi	r4,32768
 8007650:	d8c00115 	stw	r3,4(sp)
 8007654:	20ffffc4 	addi	r3,r4,-1
 8007658:	002d883a 	mov	r22,zero
 800765c:	002f883a 	mov	r23,zero
 8007660:	d8c00215 	stw	r3,8(sp)
 8007664:	b8004126 	beq	r23,zero,800776c <__sfvwrite_r+0x234>
 8007668:	1100800c 	andi	r4,r2,512
 800766c:	20009126 	beq	r4,zero,80078b4 <__sfvwrite_r+0x37c>
 8007670:	902b883a 	mov	r21,r18
 8007674:	bc80b836 	bltu	r23,r18,8007958 <__sfvwrite_r+0x420>
 8007678:	1101200c 	andi	r4,r2,1152
 800767c:	20002626 	beq	r4,zero,8007718 <__sfvwrite_r+0x1e0>
 8007680:	84800517 	ldw	r18,20(r16)
 8007684:	81400417 	ldw	r5,16(r16)
 8007688:	b9000044 	addi	r4,r23,1
 800768c:	948d883a 	add	r6,r18,r18
 8007690:	348d883a 	add	r6,r6,r18
 8007694:	3024d7fa 	srli	r18,r6,31
 8007698:	e167c83a 	sub	r19,fp,r5
 800769c:	24c9883a 	add	r4,r4,r19
 80076a0:	91a5883a 	add	r18,r18,r6
 80076a4:	9025d07a 	srai	r18,r18,1
 80076a8:	900d883a 	mov	r6,r18
 80076ac:	9100022e 	bgeu	r18,r4,80076b8 <__sfvwrite_r+0x180>
 80076b0:	2025883a 	mov	r18,r4
 80076b4:	200d883a 	mov	r6,r4
 80076b8:	1081000c 	andi	r2,r2,1024
 80076bc:	1000bf26 	beq	r2,zero,80079bc <__sfvwrite_r+0x484>
 80076c0:	d9000017 	ldw	r4,0(sp)
 80076c4:	300b883a 	mov	r5,r6
 80076c8:	8007d580 	call	8007d58 <_malloc_r>
 80076cc:	1000c826 	beq	r2,zero,80079f0 <__sfvwrite_r+0x4b8>
 80076d0:	81400417 	ldw	r5,16(r16)
 80076d4:	980d883a 	mov	r6,r19
 80076d8:	1009883a 	mov	r4,r2
 80076dc:	80086340 	call	8008634 <memcpy>
 80076e0:	100f883a 	mov	r7,r2
 80076e4:	8080030b 	ldhu	r2,12(r16)
 80076e8:	00fedfc4 	movi	r3,-1153
 80076ec:	10c4703a 	and	r2,r2,r3
 80076f0:	10802014 	ori	r2,r2,128
 80076f4:	8080030d 	sth	r2,12(r16)
 80076f8:	94c5c83a 	sub	r2,r18,r19
 80076fc:	3cf9883a 	add	fp,r7,r19
 8007700:	84800515 	stw	r18,20(r16)
 8007704:	81c00415 	stw	r7,16(r16)
 8007708:	87000015 	stw	fp,0(r16)
 800770c:	b825883a 	mov	r18,r23
 8007710:	80800215 	stw	r2,8(r16)
 8007714:	b82b883a 	mov	r21,r23
 8007718:	a80d883a 	mov	r6,r21
 800771c:	b00b883a 	mov	r5,r22
 8007720:	e009883a 	mov	r4,fp
 8007724:	80087340 	call	8008734 <memmove>
 8007728:	80800217 	ldw	r2,8(r16)
 800772c:	81800017 	ldw	r6,0(r16)
 8007730:	b827883a 	mov	r19,r23
 8007734:	14a5c83a 	sub	r18,r2,r18
 8007738:	354d883a 	add	r6,r6,r21
 800773c:	84800215 	stw	r18,8(r16)
 8007740:	81800015 	stw	r6,0(r16)
 8007744:	002f883a 	mov	r23,zero
 8007748:	a0800217 	ldw	r2,8(r20)
 800774c:	b4ed883a 	add	r22,r22,r19
 8007750:	14e7c83a 	sub	r19,r2,r19
 8007754:	a4c00215 	stw	r19,8(r20)
 8007758:	98000826 	beq	r19,zero,800777c <__sfvwrite_r+0x244>
 800775c:	8080030b 	ldhu	r2,12(r16)
 8007760:	84800217 	ldw	r18,8(r16)
 8007764:	87000017 	ldw	fp,0(r16)
 8007768:	b83fbf1e 	bne	r23,zero,8007668 <__sfvwrite_r+0x130>
 800776c:	8d800017 	ldw	r22,0(r17)
 8007770:	8dc00117 	ldw	r23,4(r17)
 8007774:	8c400204 	addi	r17,r17,8
 8007778:	003fba06 	br	8007664 <__sfvwrite_r+0x12c>
 800777c:	0005883a 	mov	r2,zero
 8007780:	dfc00c17 	ldw	ra,48(sp)
 8007784:	df000b17 	ldw	fp,44(sp)
 8007788:	ddc00a17 	ldw	r23,40(sp)
 800778c:	dd800917 	ldw	r22,36(sp)
 8007790:	dd400817 	ldw	r21,32(sp)
 8007794:	dd000717 	ldw	r20,28(sp)
 8007798:	dcc00617 	ldw	r19,24(sp)
 800779c:	dc800517 	ldw	r18,20(sp)
 80077a0:	dc400417 	ldw	r17,16(sp)
 80077a4:	dc000317 	ldw	r16,12(sp)
 80077a8:	dec00d04 	addi	sp,sp,52
 80077ac:	f800283a 	ret
 80077b0:	b1c07116 	blt	r22,r7,8007978 <__sfvwrite_r+0x440>
 80077b4:	80800917 	ldw	r2,36(r16)
 80077b8:	81400717 	ldw	r5,28(r16)
 80077bc:	d9000017 	ldw	r4,0(sp)
 80077c0:	b80d883a 	mov	r6,r23
 80077c4:	103ee83a 	callr	r2
 80077c8:	1025883a 	mov	r18,r2
 80077cc:	0080210e 	bge	zero,r2,8007854 <__sfvwrite_r+0x31c>
 80077d0:	acabc83a 	sub	r21,r21,r18
 80077d4:	a8006326 	beq	r21,zero,8007964 <__sfvwrite_r+0x42c>
 80077d8:	00800044 	movi	r2,1
 80077dc:	a0c00217 	ldw	r3,8(r20)
 80077e0:	bcaf883a 	add	r23,r23,r18
 80077e4:	9ca7c83a 	sub	r19,r19,r18
 80077e8:	1ca5c83a 	sub	r18,r3,r18
 80077ec:	a4800215 	stw	r18,8(r20)
 80077f0:	903fe226 	beq	r18,zero,800777c <__sfvwrite_r+0x244>
 80077f4:	84800217 	ldw	r18,8(r16)
 80077f8:	87000017 	ldw	fp,0(r16)
 80077fc:	98002126 	beq	r19,zero,8007884 <__sfvwrite_r+0x34c>
 8007800:	10002426 	beq	r2,zero,8007894 <__sfvwrite_r+0x35c>
 8007804:	a805883a 	mov	r2,r21
 8007808:	982d883a 	mov	r22,r19
 800780c:	14c0012e 	bgeu	r2,r19,8007814 <__sfvwrite_r+0x2dc>
 8007810:	102d883a 	mov	r22,r2
 8007814:	80800417 	ldw	r2,16(r16)
 8007818:	81c00517 	ldw	r7,20(r16)
 800781c:	173fe42e 	bgeu	r2,fp,80077b0 <__sfvwrite_r+0x278>
 8007820:	3ca5883a 	add	r18,r7,r18
 8007824:	95bfe20e 	bge	r18,r22,80077b0 <__sfvwrite_r+0x278>
 8007828:	b80b883a 	mov	r5,r23
 800782c:	e009883a 	mov	r4,fp
 8007830:	900d883a 	mov	r6,r18
 8007834:	80087340 	call	8008734 <memmove>
 8007838:	80800017 	ldw	r2,0(r16)
 800783c:	d9000017 	ldw	r4,0(sp)
 8007840:	800b883a 	mov	r5,r16
 8007844:	1485883a 	add	r2,r2,r18
 8007848:	80800015 	stw	r2,0(r16)
 800784c:	8006d440 	call	8006d44 <_fflush_r>
 8007850:	103fdf26 	beq	r2,zero,80077d0 <__sfvwrite_r+0x298>
 8007854:	8080030b 	ldhu	r2,12(r16)
 8007858:	10801014 	ori	r2,r2,64
 800785c:	8080030d 	sth	r2,12(r16)
 8007860:	00bfffc4 	movi	r2,-1
 8007864:	003fc606 	br	8007780 <__sfvwrite_r+0x248>
 8007868:	0005883a 	mov	r2,zero
 800786c:	f800283a 	ret
 8007870:	0027883a 	mov	r19,zero
 8007874:	002b883a 	mov	r21,zero
 8007878:	0005883a 	mov	r2,zero
 800787c:	002f883a 	mov	r23,zero
 8007880:	983fdf1e 	bne	r19,zero,8007800 <__sfvwrite_r+0x2c8>
 8007884:	8cc00117 	ldw	r19,4(r17)
 8007888:	8dc00017 	ldw	r23,0(r17)
 800788c:	8c400204 	addi	r17,r17,8
 8007890:	983ffc26 	beq	r19,zero,8007884 <__sfvwrite_r+0x34c>
 8007894:	980d883a 	mov	r6,r19
 8007898:	01400284 	movi	r5,10
 800789c:	b809883a 	mov	r4,r23
 80078a0:	800854c0 	call	800854c <memchr>
 80078a4:	10004226 	beq	r2,zero,80079b0 <__sfvwrite_r+0x478>
 80078a8:	10800044 	addi	r2,r2,1
 80078ac:	15ebc83a 	sub	r21,r2,r23
 80078b0:	003fd406 	br	8007804 <__sfvwrite_r+0x2cc>
 80078b4:	80800417 	ldw	r2,16(r16)
 80078b8:	17001436 	bltu	r2,fp,800790c <__sfvwrite_r+0x3d4>
 80078bc:	84c00517 	ldw	r19,20(r16)
 80078c0:	bcc01236 	bltu	r23,r19,800790c <__sfvwrite_r+0x3d4>
 80078c4:	d8800117 	ldw	r2,4(sp)
 80078c8:	15c0372e 	bgeu	r2,r23,80079a8 <__sfvwrite_r+0x470>
 80078cc:	d9000217 	ldw	r4,8(sp)
 80078d0:	980b883a 	mov	r5,r19
 80078d4:	8002a840 	call	8002a84 <__divsi3>
 80078d8:	980b883a 	mov	r5,r19
 80078dc:	1009883a 	mov	r4,r2
 80078e0:	8002c3c0 	call	8002c3c <__mulsi3>
 80078e4:	81400717 	ldw	r5,28(r16)
 80078e8:	82800917 	ldw	r10,36(r16)
 80078ec:	d9000017 	ldw	r4,0(sp)
 80078f0:	100f883a 	mov	r7,r2
 80078f4:	b00d883a 	mov	r6,r22
 80078f8:	503ee83a 	callr	r10
 80078fc:	00bfd50e 	bge	zero,r2,8007854 <__sfvwrite_r+0x31c>
 8007900:	1027883a 	mov	r19,r2
 8007904:	bcefc83a 	sub	r23,r23,r19
 8007908:	003f8f06 	br	8007748 <__sfvwrite_r+0x210>
 800790c:	9027883a 	mov	r19,r18
 8007910:	bc80012e 	bgeu	r23,r18,8007918 <__sfvwrite_r+0x3e0>
 8007914:	b827883a 	mov	r19,r23
 8007918:	e009883a 	mov	r4,fp
 800791c:	980d883a 	mov	r6,r19
 8007920:	b00b883a 	mov	r5,r22
 8007924:	80087340 	call	8008734 <memmove>
 8007928:	80800217 	ldw	r2,8(r16)
 800792c:	81000017 	ldw	r4,0(r16)
 8007930:	14c5c83a 	sub	r2,r2,r19
 8007934:	24c9883a 	add	r4,r4,r19
 8007938:	80800215 	stw	r2,8(r16)
 800793c:	81000015 	stw	r4,0(r16)
 8007940:	103ff01e 	bne	r2,zero,8007904 <__sfvwrite_r+0x3cc>
 8007944:	d9000017 	ldw	r4,0(sp)
 8007948:	800b883a 	mov	r5,r16
 800794c:	8006d440 	call	8006d44 <_fflush_r>
 8007950:	103fec26 	beq	r2,zero,8007904 <__sfvwrite_r+0x3cc>
 8007954:	003fbf06 	br	8007854 <__sfvwrite_r+0x31c>
 8007958:	b825883a 	mov	r18,r23
 800795c:	b82b883a 	mov	r21,r23
 8007960:	003f6d06 	br	8007718 <__sfvwrite_r+0x1e0>
 8007964:	d9000017 	ldw	r4,0(sp)
 8007968:	800b883a 	mov	r5,r16
 800796c:	8006d440 	call	8006d44 <_fflush_r>
 8007970:	103f9a26 	beq	r2,zero,80077dc <__sfvwrite_r+0x2a4>
 8007974:	003fb706 	br	8007854 <__sfvwrite_r+0x31c>
 8007978:	b00d883a 	mov	r6,r22
 800797c:	b80b883a 	mov	r5,r23
 8007980:	e009883a 	mov	r4,fp
 8007984:	80087340 	call	8008734 <memmove>
 8007988:	80c00217 	ldw	r3,8(r16)
 800798c:	80800017 	ldw	r2,0(r16)
 8007990:	b025883a 	mov	r18,r22
 8007994:	1d87c83a 	sub	r3,r3,r22
 8007998:	15ad883a 	add	r22,r2,r22
 800799c:	80c00215 	stw	r3,8(r16)
 80079a0:	85800015 	stw	r22,0(r16)
 80079a4:	003f8a06 	br	80077d0 <__sfvwrite_r+0x298>
 80079a8:	b809883a 	mov	r4,r23
 80079ac:	003fc806 	br	80078d0 <__sfvwrite_r+0x398>
 80079b0:	98800044 	addi	r2,r19,1
 80079b4:	102b883a 	mov	r21,r2
 80079b8:	003f9306 	br	8007808 <__sfvwrite_r+0x2d0>
 80079bc:	d9000017 	ldw	r4,0(sp)
 80079c0:	8009ab00 	call	8009ab0 <_realloc_r>
 80079c4:	100f883a 	mov	r7,r2
 80079c8:	103f4b1e 	bne	r2,zero,80076f8 <__sfvwrite_r+0x1c0>
 80079cc:	dc400017 	ldw	r17,0(sp)
 80079d0:	81400417 	ldw	r5,16(r16)
 80079d4:	8809883a 	mov	r4,r17
 80079d8:	800723c0 	call	800723c <_free_r>
 80079dc:	8080030b 	ldhu	r2,12(r16)
 80079e0:	00c00304 	movi	r3,12
 80079e4:	88c00015 	stw	r3,0(r17)
 80079e8:	10bfdfcc 	andi	r2,r2,65407
 80079ec:	003f9a06 	br	8007858 <__sfvwrite_r+0x320>
 80079f0:	d8c00017 	ldw	r3,0(sp)
 80079f4:	00800304 	movi	r2,12
 80079f8:	18800015 	stw	r2,0(r3)
 80079fc:	8080030b 	ldhu	r2,12(r16)
 8007a00:	003f9506 	br	8007858 <__sfvwrite_r+0x320>
 8007a04:	00bfffc4 	movi	r2,-1
 8007a08:	003f5d06 	br	8007780 <__sfvwrite_r+0x248>

08007a0c <_fwalk>:
 8007a0c:	defffa04 	addi	sp,sp,-24
 8007a10:	dc800215 	stw	r18,8(sp)
 8007a14:	dfc00515 	stw	ra,20(sp)
 8007a18:	dd000415 	stw	r20,16(sp)
 8007a1c:	dcc00315 	stw	r19,12(sp)
 8007a20:	dc400115 	stw	r17,4(sp)
 8007a24:	dc000015 	stw	r16,0(sp)
 8007a28:	2480b804 	addi	r18,r4,736
 8007a2c:	90001e26 	beq	r18,zero,8007aa8 <_fwalk+0x9c>
 8007a30:	2827883a 	mov	r19,r5
 8007a34:	0029883a 	mov	r20,zero
 8007a38:	94400117 	ldw	r17,4(r18)
 8007a3c:	94000217 	ldw	r16,8(r18)
 8007a40:	8c7fffc4 	addi	r17,r17,-1
 8007a44:	88000d16 	blt	r17,zero,8007a7c <_fwalk+0x70>
 8007a48:	8080030b 	ldhu	r2,12(r16)
 8007a4c:	8c7fffc4 	addi	r17,r17,-1
 8007a50:	108000b0 	cmpltui	r2,r2,2
 8007a54:	1000061e 	bne	r2,zero,8007a70 <_fwalk+0x64>
 8007a58:	8080038f 	ldh	r2,14(r16)
 8007a5c:	8009883a 	mov	r4,r16
 8007a60:	10bfffe0 	cmpeqi	r2,r2,-1
 8007a64:	1000021e 	bne	r2,zero,8007a70 <_fwalk+0x64>
 8007a68:	983ee83a 	callr	r19
 8007a6c:	a0a8b03a 	or	r20,r20,r2
 8007a70:	88bfffd8 	cmpnei	r2,r17,-1
 8007a74:	84001a04 	addi	r16,r16,104
 8007a78:	103ff31e 	bne	r2,zero,8007a48 <_fwalk+0x3c>
 8007a7c:	94800017 	ldw	r18,0(r18)
 8007a80:	903fed1e 	bne	r18,zero,8007a38 <_fwalk+0x2c>
 8007a84:	a005883a 	mov	r2,r20
 8007a88:	dfc00517 	ldw	ra,20(sp)
 8007a8c:	dd000417 	ldw	r20,16(sp)
 8007a90:	dcc00317 	ldw	r19,12(sp)
 8007a94:	dc800217 	ldw	r18,8(sp)
 8007a98:	dc400117 	ldw	r17,4(sp)
 8007a9c:	dc000017 	ldw	r16,0(sp)
 8007aa0:	dec00604 	addi	sp,sp,24
 8007aa4:	f800283a 	ret
 8007aa8:	0029883a 	mov	r20,zero
 8007aac:	003ff506 	br	8007a84 <_fwalk+0x78>

08007ab0 <_fwalk_reent>:
 8007ab0:	defff904 	addi	sp,sp,-28
 8007ab4:	dc800215 	stw	r18,8(sp)
 8007ab8:	dfc00615 	stw	ra,24(sp)
 8007abc:	dd400515 	stw	r21,20(sp)
 8007ac0:	dd000415 	stw	r20,16(sp)
 8007ac4:	dcc00315 	stw	r19,12(sp)
 8007ac8:	dc400115 	stw	r17,4(sp)
 8007acc:	dc000015 	stw	r16,0(sp)
 8007ad0:	2480b804 	addi	r18,r4,736
 8007ad4:	90002126 	beq	r18,zero,8007b5c <_fwalk_reent+0xac>
 8007ad8:	2829883a 	mov	r20,r5
 8007adc:	2027883a 	mov	r19,r4
 8007ae0:	002b883a 	mov	r21,zero
 8007ae4:	94400117 	ldw	r17,4(r18)
 8007ae8:	94000217 	ldw	r16,8(r18)
 8007aec:	8c7fffc4 	addi	r17,r17,-1
 8007af0:	88000e16 	blt	r17,zero,8007b2c <_fwalk_reent+0x7c>
 8007af4:	8080030b 	ldhu	r2,12(r16)
 8007af8:	8c7fffc4 	addi	r17,r17,-1
 8007afc:	108000b0 	cmpltui	r2,r2,2
 8007b00:	1000071e 	bne	r2,zero,8007b20 <_fwalk_reent+0x70>
 8007b04:	8080038f 	ldh	r2,14(r16)
 8007b08:	800b883a 	mov	r5,r16
 8007b0c:	9809883a 	mov	r4,r19
 8007b10:	10bfffe0 	cmpeqi	r2,r2,-1
 8007b14:	1000021e 	bne	r2,zero,8007b20 <_fwalk_reent+0x70>
 8007b18:	a03ee83a 	callr	r20
 8007b1c:	a8aab03a 	or	r21,r21,r2
 8007b20:	88bfffd8 	cmpnei	r2,r17,-1
 8007b24:	84001a04 	addi	r16,r16,104
 8007b28:	103ff21e 	bne	r2,zero,8007af4 <_fwalk_reent+0x44>
 8007b2c:	94800017 	ldw	r18,0(r18)
 8007b30:	903fec1e 	bne	r18,zero,8007ae4 <_fwalk_reent+0x34>
 8007b34:	a805883a 	mov	r2,r21
 8007b38:	dfc00617 	ldw	ra,24(sp)
 8007b3c:	dd400517 	ldw	r21,20(sp)
 8007b40:	dd000417 	ldw	r20,16(sp)
 8007b44:	dcc00317 	ldw	r19,12(sp)
 8007b48:	dc800217 	ldw	r18,8(sp)
 8007b4c:	dc400117 	ldw	r17,4(sp)
 8007b50:	dc000017 	ldw	r16,0(sp)
 8007b54:	dec00704 	addi	sp,sp,28
 8007b58:	f800283a 	ret
 8007b5c:	002b883a 	mov	r21,zero
 8007b60:	003ff406 	br	8007b34 <_fwalk_reent+0x84>

08007b64 <__localeconv_l>:
 8007b64:	20803c04 	addi	r2,r4,240
 8007b68:	f800283a 	ret

08007b6c <_localeconv_r>:
 8007b6c:	00820074 	movhi	r2,2049
 8007b70:	108c9a04 	addi	r2,r2,12904
 8007b74:	f800283a 	ret

08007b78 <localeconv>:
 8007b78:	00820074 	movhi	r2,2049
 8007b7c:	108c9a04 	addi	r2,r2,12904
 8007b80:	f800283a 	ret

08007b84 <__swhatbuf_r>:
 8007b84:	deffea04 	addi	sp,sp,-88
 8007b88:	dc001215 	stw	r16,72(sp)
 8007b8c:	2821883a 	mov	r16,r5
 8007b90:	2940038f 	ldh	r5,14(r5)
 8007b94:	dc801415 	stw	r18,80(sp)
 8007b98:	dc401315 	stw	r17,76(sp)
 8007b9c:	dfc01515 	stw	ra,84(sp)
 8007ba0:	3023883a 	mov	r17,r6
 8007ba4:	3825883a 	mov	r18,r7
 8007ba8:	28001016 	blt	r5,zero,8007bec <__swhatbuf_r+0x68>
 8007bac:	d80d883a 	mov	r6,sp
 8007bb0:	800bd700 	call	800bd70 <_fstat_r>
 8007bb4:	10000d16 	blt	r2,zero,8007bec <__swhatbuf_r+0x68>
 8007bb8:	d8c00117 	ldw	r3,4(sp)
 8007bbc:	00820004 	movi	r2,2048
 8007bc0:	18fc000c 	andi	r3,r3,61440
 8007bc4:	18c80020 	cmpeqi	r3,r3,8192
 8007bc8:	90c00015 	stw	r3,0(r18)
 8007bcc:	00c10004 	movi	r3,1024
 8007bd0:	88c00015 	stw	r3,0(r17)
 8007bd4:	dfc01517 	ldw	ra,84(sp)
 8007bd8:	dc801417 	ldw	r18,80(sp)
 8007bdc:	dc401317 	ldw	r17,76(sp)
 8007be0:	dc001217 	ldw	r16,72(sp)
 8007be4:	dec01604 	addi	sp,sp,88
 8007be8:	f800283a 	ret
 8007bec:	8080030b 	ldhu	r2,12(r16)
 8007bf0:	90000015 	stw	zero,0(r18)
 8007bf4:	1080200c 	andi	r2,r2,128
 8007bf8:	10000426 	beq	r2,zero,8007c0c <__swhatbuf_r+0x88>
 8007bfc:	00801004 	movi	r2,64
 8007c00:	88800015 	stw	r2,0(r17)
 8007c04:	0005883a 	mov	r2,zero
 8007c08:	003ff206 	br	8007bd4 <__swhatbuf_r+0x50>
 8007c0c:	00810004 	movi	r2,1024
 8007c10:	88800015 	stw	r2,0(r17)
 8007c14:	0005883a 	mov	r2,zero
 8007c18:	003fee06 	br	8007bd4 <__swhatbuf_r+0x50>

08007c1c <__smakebuf_r>:
 8007c1c:	28c0030b 	ldhu	r3,12(r5)
 8007c20:	defffa04 	addi	sp,sp,-24
 8007c24:	dc000215 	stw	r16,8(sp)
 8007c28:	dfc00515 	stw	ra,20(sp)
 8007c2c:	dc800415 	stw	r18,16(sp)
 8007c30:	dc400315 	stw	r17,12(sp)
 8007c34:	18c0008c 	andi	r3,r3,2
 8007c38:	2821883a 	mov	r16,r5
 8007c3c:	18000b26 	beq	r3,zero,8007c6c <__smakebuf_r+0x50>
 8007c40:	28c010c4 	addi	r3,r5,67
 8007c44:	28c00015 	stw	r3,0(r5)
 8007c48:	28c00415 	stw	r3,16(r5)
 8007c4c:	00c00044 	movi	r3,1
 8007c50:	28c00515 	stw	r3,20(r5)
 8007c54:	dfc00517 	ldw	ra,20(sp)
 8007c58:	dc800417 	ldw	r18,16(sp)
 8007c5c:	dc400317 	ldw	r17,12(sp)
 8007c60:	dc000217 	ldw	r16,8(sp)
 8007c64:	dec00604 	addi	sp,sp,24
 8007c68:	f800283a 	ret
 8007c6c:	d9c00104 	addi	r7,sp,4
 8007c70:	d80d883a 	mov	r6,sp
 8007c74:	2023883a 	mov	r17,r4
 8007c78:	8007b840 	call	8007b84 <__swhatbuf_r>
 8007c7c:	1025883a 	mov	r18,r2
 8007c80:	d8800117 	ldw	r2,4(sp)
 8007c84:	1000131e 	bne	r2,zero,8007cd4 <__smakebuf_r+0xb8>
 8007c88:	d9400017 	ldw	r5,0(sp)
 8007c8c:	8809883a 	mov	r4,r17
 8007c90:	8007d580 	call	8007d58 <_malloc_r>
 8007c94:	10001c26 	beq	r2,zero,8007d08 <__smakebuf_r+0xec>
 8007c98:	01020034 	movhi	r4,2048
 8007c9c:	211b7504 	addi	r4,r4,28116
 8007ca0:	80c0030b 	ldhu	r3,12(r16)
 8007ca4:	89000f15 	stw	r4,60(r17)
 8007ca8:	80800015 	stw	r2,0(r16)
 8007cac:	80800415 	stw	r2,16(r16)
 8007cb0:	d8800017 	ldw	r2,0(sp)
 8007cb4:	d9400117 	ldw	r5,4(sp)
 8007cb8:	18c02014 	ori	r3,r3,128
 8007cbc:	80c0030d 	sth	r3,12(r16)
 8007cc0:	80800515 	stw	r2,20(r16)
 8007cc4:	28001c1e 	bne	r5,zero,8007d38 <__smakebuf_r+0x11c>
 8007cc8:	90c6b03a 	or	r3,r18,r3
 8007ccc:	80c0030d 	sth	r3,12(r16)
 8007cd0:	003fe006 	br	8007c54 <__smakebuf_r+0x38>
 8007cd4:	8140038f 	ldh	r5,14(r16)
 8007cd8:	8809883a 	mov	r4,r17
 8007cdc:	800bdd00 	call	800bdd0 <_isatty_r>
 8007ce0:	103fe926 	beq	r2,zero,8007c88 <__smakebuf_r+0x6c>
 8007ce4:	8080030b 	ldhu	r2,12(r16)
 8007ce8:	80c010c4 	addi	r3,r16,67
 8007cec:	80c00015 	stw	r3,0(r16)
 8007cf0:	10800054 	ori	r2,r2,1
 8007cf4:	8080030d 	sth	r2,12(r16)
 8007cf8:	00800044 	movi	r2,1
 8007cfc:	80c00415 	stw	r3,16(r16)
 8007d00:	80800515 	stw	r2,20(r16)
 8007d04:	003fe006 	br	8007c88 <__smakebuf_r+0x6c>
 8007d08:	8080030b 	ldhu	r2,12(r16)
 8007d0c:	10c0800c 	andi	r3,r2,512
 8007d10:	183fd01e 	bne	r3,zero,8007c54 <__smakebuf_r+0x38>
 8007d14:	10bfff0c 	andi	r2,r2,65532
 8007d18:	10800094 	ori	r2,r2,2
 8007d1c:	80c010c4 	addi	r3,r16,67
 8007d20:	8080030d 	sth	r2,12(r16)
 8007d24:	00800044 	movi	r2,1
 8007d28:	80c00015 	stw	r3,0(r16)
 8007d2c:	80c00415 	stw	r3,16(r16)
 8007d30:	80800515 	stw	r2,20(r16)
 8007d34:	003fc706 	br	8007c54 <__smakebuf_r+0x38>
 8007d38:	8140038f 	ldh	r5,14(r16)
 8007d3c:	8809883a 	mov	r4,r17
 8007d40:	800bdd00 	call	800bdd0 <_isatty_r>
 8007d44:	80c0030b 	ldhu	r3,12(r16)
 8007d48:	103fdf26 	beq	r2,zero,8007cc8 <__smakebuf_r+0xac>
 8007d4c:	18ffff0c 	andi	r3,r3,65532
 8007d50:	18c00054 	ori	r3,r3,1
 8007d54:	003fdc06 	br	8007cc8 <__smakebuf_r+0xac>

08007d58 <_malloc_r>:
 8007d58:	defff604 	addi	sp,sp,-40
 8007d5c:	dc400115 	stw	r17,4(sp)
 8007d60:	2c4002c4 	addi	r17,r5,11
 8007d64:	dc800215 	stw	r18,8(sp)
 8007d68:	dfc00915 	stw	ra,36(sp)
 8007d6c:	df000815 	stw	fp,32(sp)
 8007d70:	ddc00715 	stw	r23,28(sp)
 8007d74:	dd800615 	stw	r22,24(sp)
 8007d78:	dd400515 	stw	r21,20(sp)
 8007d7c:	dd000415 	stw	r20,16(sp)
 8007d80:	dcc00315 	stw	r19,12(sp)
 8007d84:	dc000015 	stw	r16,0(sp)
 8007d88:	888005e8 	cmpgeui	r2,r17,23
 8007d8c:	2025883a 	mov	r18,r4
 8007d90:	10001b1e 	bne	r2,zero,8007e00 <_malloc_r+0xa8>
 8007d94:	29400468 	cmpgeui	r5,r5,17
 8007d98:	2800951e 	bne	r5,zero,8007ff0 <_malloc_r+0x298>
 8007d9c:	800fca00 	call	800fca0 <__malloc_lock>
 8007da0:	04400404 	movi	r17,16
 8007da4:	00800604 	movi	r2,24
 8007da8:	01800084 	movi	r6,2
 8007dac:	04c20074 	movhi	r19,2049
 8007db0:	9ccb5c04 	addi	r19,r19,11632
 8007db4:	9885883a 	add	r2,r19,r2
 8007db8:	14000117 	ldw	r16,4(r2)
 8007dbc:	10fffe04 	addi	r3,r2,-8
 8007dc0:	80c09e26 	beq	r16,r3,800803c <_malloc_r+0x2e4>
 8007dc4:	80800117 	ldw	r2,4(r16)
 8007dc8:	81000317 	ldw	r4,12(r16)
 8007dcc:	00ffff04 	movi	r3,-4
 8007dd0:	10c4703a 	and	r2,r2,r3
 8007dd4:	81400217 	ldw	r5,8(r16)
 8007dd8:	8085883a 	add	r2,r16,r2
 8007ddc:	10c00117 	ldw	r3,4(r2)
 8007de0:	29000315 	stw	r4,12(r5)
 8007de4:	21400215 	stw	r5,8(r4)
 8007de8:	18c00054 	ori	r3,r3,1
 8007dec:	10c00115 	stw	r3,4(r2)
 8007df0:	9009883a 	mov	r4,r18
 8007df4:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8007df8:	80800204 	addi	r2,r16,8
 8007dfc:	00007f06 	br	8007ffc <_malloc_r+0x2a4>
 8007e00:	00bffe04 	movi	r2,-8
 8007e04:	88a2703a 	and	r17,r17,r2
 8007e08:	88007916 	blt	r17,zero,8007ff0 <_malloc_r+0x298>
 8007e0c:	89407836 	bltu	r17,r5,8007ff0 <_malloc_r+0x298>
 8007e10:	800fca00 	call	800fca0 <__malloc_lock>
 8007e14:	88807e28 	cmpgeui	r2,r17,504
 8007e18:	10013326 	beq	r2,zero,80082e8 <_malloc_r+0x590>
 8007e1c:	8804d27a 	srli	r2,r17,9
 8007e20:	10008226 	beq	r2,zero,800802c <_malloc_r+0x2d4>
 8007e24:	10c00168 	cmpgeui	r3,r2,5
 8007e28:	1801151e 	bne	r3,zero,8008280 <_malloc_r+0x528>
 8007e2c:	8804d1ba 	srli	r2,r17,6
 8007e30:	11800e44 	addi	r6,r2,57
 8007e34:	300a90fa 	slli	r5,r6,3
 8007e38:	12000e04 	addi	r8,r2,56
 8007e3c:	04c20074 	movhi	r19,2049
 8007e40:	9ccb5c04 	addi	r19,r19,11632
 8007e44:	994b883a 	add	r5,r19,r5
 8007e48:	2c000117 	ldw	r16,4(r5)
 8007e4c:	297ffe04 	addi	r5,r5,-8
 8007e50:	2c001126 	beq	r5,r16,8007e98 <_malloc_r+0x140>
 8007e54:	80800117 	ldw	r2,4(r16)
 8007e58:	00ffff04 	movi	r3,-4
 8007e5c:	10c4703a 	and	r2,r2,r3
 8007e60:	1447c83a 	sub	r3,r2,r17
 8007e64:	19000408 	cmpgei	r4,r3,16
 8007e68:	2000e81e 	bne	r4,zero,800820c <_malloc_r+0x4b4>
 8007e6c:	1800e90e 	bge	r3,zero,8008214 <_malloc_r+0x4bc>
 8007e70:	01ffff04 	movi	r7,-4
 8007e74:	00000606 	br	8007e90 <_malloc_r+0x138>
 8007e78:	80800117 	ldw	r2,4(r16)
 8007e7c:	11c4703a 	and	r2,r2,r7
 8007e80:	1447c83a 	sub	r3,r2,r17
 8007e84:	19000408 	cmpgei	r4,r3,16
 8007e88:	2000e01e 	bne	r4,zero,800820c <_malloc_r+0x4b4>
 8007e8c:	1800e10e 	bge	r3,zero,8008214 <_malloc_r+0x4bc>
 8007e90:	84000317 	ldw	r16,12(r16)
 8007e94:	2c3ff81e 	bne	r5,r16,8007e78 <_malloc_r+0x120>
 8007e98:	9c000417 	ldw	r16,16(r19)
 8007e9c:	02020074 	movhi	r8,2049
 8007ea0:	420b5e04 	addi	r8,r8,11640
 8007ea4:	82006c26 	beq	r16,r8,8008058 <_malloc_r+0x300>
 8007ea8:	80c00117 	ldw	r3,4(r16)
 8007eac:	00bfff04 	movi	r2,-4
 8007eb0:	1884703a 	and	r2,r3,r2
 8007eb4:	1447c83a 	sub	r3,r2,r17
 8007eb8:	19000410 	cmplti	r4,r3,16
 8007ebc:	20011526 	beq	r4,zero,8008314 <_malloc_r+0x5bc>
 8007ec0:	9a000515 	stw	r8,20(r19)
 8007ec4:	9a000415 	stw	r8,16(r19)
 8007ec8:	18010a0e 	bge	r3,zero,80082f4 <_malloc_r+0x59c>
 8007ecc:	10c08028 	cmpgeui	r3,r2,512
 8007ed0:	1800d21e 	bne	r3,zero,800821c <_malloc_r+0x4c4>
 8007ed4:	1004d0fa 	srli	r2,r2,3
 8007ed8:	99400117 	ldw	r5,4(r19)
 8007edc:	10c00044 	addi	r3,r2,1
 8007ee0:	1009d0ba 	srai	r4,r2,2
 8007ee4:	180690fa 	slli	r3,r3,3
 8007ee8:	00800044 	movi	r2,1
 8007eec:	1104983a 	sll	r2,r2,r4
 8007ef0:	98c7883a 	add	r3,r19,r3
 8007ef4:	19000017 	ldw	r4,0(r3)
 8007ef8:	1144b03a 	or	r2,r2,r5
 8007efc:	197ffe04 	addi	r5,r3,-8
 8007f00:	81400315 	stw	r5,12(r16)
 8007f04:	81000215 	stw	r4,8(r16)
 8007f08:	98800115 	stw	r2,4(r19)
 8007f0c:	1c000015 	stw	r16,0(r3)
 8007f10:	24000315 	stw	r16,12(r4)
 8007f14:	3007d0ba 	srai	r3,r6,2
 8007f18:	01000044 	movi	r4,1
 8007f1c:	20c8983a 	sll	r4,r4,r3
 8007f20:	11005236 	bltu	r2,r4,800806c <_malloc_r+0x314>
 8007f24:	2086703a 	and	r3,r4,r2
 8007f28:	18000a1e 	bne	r3,zero,8007f54 <_malloc_r+0x1fc>
 8007f2c:	00ffff04 	movi	r3,-4
 8007f30:	2109883a 	add	r4,r4,r4
 8007f34:	30cc703a 	and	r6,r6,r3
 8007f38:	2086703a 	and	r3,r4,r2
 8007f3c:	31800104 	addi	r6,r6,4
 8007f40:	1800041e 	bne	r3,zero,8007f54 <_malloc_r+0x1fc>
 8007f44:	2109883a 	add	r4,r4,r4
 8007f48:	2086703a 	and	r3,r4,r2
 8007f4c:	31800104 	addi	r6,r6,4
 8007f50:	183ffc26 	beq	r3,zero,8007f44 <_malloc_r+0x1ec>
 8007f54:	027fff04 	movi	r9,-4
 8007f58:	301490fa 	slli	r10,r6,3
 8007f5c:	3017883a 	mov	r11,r6
 8007f60:	9a95883a 	add	r10,r19,r10
 8007f64:	500f883a 	mov	r7,r10
 8007f68:	3c000317 	ldw	r16,12(r7)
 8007f6c:	3c00cd26 	beq	r7,r16,80082a4 <_malloc_r+0x54c>
 8007f70:	80800117 	ldw	r2,4(r16)
 8007f74:	1244703a 	and	r2,r2,r9
 8007f78:	1447c83a 	sub	r3,r2,r17
 8007f7c:	19400408 	cmpgei	r5,r3,16
 8007f80:	2800081e 	bne	r5,zero,8007fa4 <_malloc_r+0x24c>
 8007f84:	1800cc0e 	bge	r3,zero,80082b8 <_malloc_r+0x560>
 8007f88:	84000317 	ldw	r16,12(r16)
 8007f8c:	3c00c526 	beq	r7,r16,80082a4 <_malloc_r+0x54c>
 8007f90:	80800117 	ldw	r2,4(r16)
 8007f94:	1244703a 	and	r2,r2,r9
 8007f98:	1447c83a 	sub	r3,r2,r17
 8007f9c:	19400410 	cmplti	r5,r3,16
 8007fa0:	283ff81e 	bne	r5,zero,8007f84 <_malloc_r+0x22c>
 8007fa4:	81000317 	ldw	r4,12(r16)
 8007fa8:	81400217 	ldw	r5,8(r16)
 8007fac:	89800054 	ori	r6,r17,1
 8007fb0:	81800115 	stw	r6,4(r16)
 8007fb4:	29000315 	stw	r4,12(r5)
 8007fb8:	21400215 	stw	r5,8(r4)
 8007fbc:	8463883a 	add	r17,r16,r17
 8007fc0:	9c400515 	stw	r17,20(r19)
 8007fc4:	9c400415 	stw	r17,16(r19)
 8007fc8:	19000054 	ori	r4,r3,1
 8007fcc:	89000115 	stw	r4,4(r17)
 8007fd0:	8085883a 	add	r2,r16,r2
 8007fd4:	8a000315 	stw	r8,12(r17)
 8007fd8:	8a000215 	stw	r8,8(r17)
 8007fdc:	10c00015 	stw	r3,0(r2)
 8007fe0:	9009883a 	mov	r4,r18
 8007fe4:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8007fe8:	80800204 	addi	r2,r16,8
 8007fec:	00000306 	br	8007ffc <_malloc_r+0x2a4>
 8007ff0:	00800304 	movi	r2,12
 8007ff4:	90800015 	stw	r2,0(r18)
 8007ff8:	0005883a 	mov	r2,zero
 8007ffc:	dfc00917 	ldw	ra,36(sp)
 8008000:	df000817 	ldw	fp,32(sp)
 8008004:	ddc00717 	ldw	r23,28(sp)
 8008008:	dd800617 	ldw	r22,24(sp)
 800800c:	dd400517 	ldw	r21,20(sp)
 8008010:	dd000417 	ldw	r20,16(sp)
 8008014:	dcc00317 	ldw	r19,12(sp)
 8008018:	dc800217 	ldw	r18,8(sp)
 800801c:	dc400117 	ldw	r17,4(sp)
 8008020:	dc000017 	ldw	r16,0(sp)
 8008024:	dec00a04 	addi	sp,sp,40
 8008028:	f800283a 	ret
 800802c:	01408004 	movi	r5,512
 8008030:	01801004 	movi	r6,64
 8008034:	02000fc4 	movi	r8,63
 8008038:	003f8006 	br	8007e3c <_malloc_r+0xe4>
 800803c:	14000317 	ldw	r16,12(r2)
 8008040:	31800084 	addi	r6,r6,2
 8008044:	143f5f1e 	bne	r2,r16,8007dc4 <_malloc_r+0x6c>
 8008048:	9c000417 	ldw	r16,16(r19)
 800804c:	02020074 	movhi	r8,2049
 8008050:	420b5e04 	addi	r8,r8,11640
 8008054:	823f941e 	bne	r16,r8,8007ea8 <_malloc_r+0x150>
 8008058:	3007d0ba 	srai	r3,r6,2
 800805c:	01000044 	movi	r4,1
 8008060:	98800117 	ldw	r2,4(r19)
 8008064:	20c8983a 	sll	r4,r4,r3
 8008068:	113fae2e 	bgeu	r2,r4,8007f24 <_malloc_r+0x1cc>
 800806c:	9c000217 	ldw	r16,8(r19)
 8008070:	00bfff04 	movi	r2,-4
 8008074:	85000117 	ldw	r20,4(r16)
 8008078:	a0ac703a 	and	r22,r20,r2
 800807c:	b4400336 	bltu	r22,r17,800808c <_malloc_r+0x334>
 8008080:	b445c83a 	sub	r2,r22,r17
 8008084:	10c00408 	cmpgei	r3,r2,16
 8008088:	1800561e 	bne	r3,zero,80081e4 <_malloc_r+0x48c>
 800808c:	00820074 	movhi	r2,2049
 8008090:	10914217 	ldw	r2,17672(r2)
 8008094:	00c20074 	movhi	r3,2049
 8008098:	1d185d17 	ldw	r20,24948(r3)
 800809c:	10bfffd8 	cmpnei	r2,r2,-1
 80080a0:	85ab883a 	add	r21,r16,r22
 80080a4:	8d29883a 	add	r20,r17,r20
 80080a8:	1000c826 	beq	r2,zero,80083cc <_malloc_r+0x674>
 80080ac:	a50403c4 	addi	r20,r20,4111
 80080b0:	00bc0004 	movi	r2,-4096
 80080b4:	a0a8703a 	and	r20,r20,r2
 80080b8:	a00b883a 	mov	r5,r20
 80080bc:	9009883a 	mov	r4,r18
 80080c0:	800a0dc0 	call	800a0dc <_sbrk_r>
 80080c4:	102f883a 	mov	r23,r2
 80080c8:	10bfffd8 	cmpnei	r2,r2,-1
 80080cc:	10009a26 	beq	r2,zero,8008338 <_malloc_r+0x5e0>
 80080d0:	bd409836 	bltu	r23,r21,8008334 <_malloc_r+0x5dc>
 80080d4:	00820074 	movhi	r2,2049
 80080d8:	10987117 	ldw	r2,25028(r2)
 80080dc:	00c20074 	movhi	r3,2049
 80080e0:	a085883a 	add	r2,r20,r2
 80080e4:	18987115 	stw	r2,25028(r3)
 80080e8:	1007883a 	mov	r3,r2
 80080ec:	adc0dd26 	beq	r21,r23,8008464 <_malloc_r+0x70c>
 80080f0:	00820074 	movhi	r2,2049
 80080f4:	10914217 	ldw	r2,17672(r2)
 80080f8:	10bfffd8 	cmpnei	r2,r2,-1
 80080fc:	1000e026 	beq	r2,zero,8008480 <_malloc_r+0x728>
 8008100:	bd6bc83a 	sub	r21,r23,r21
 8008104:	a8c7883a 	add	r3,r21,r3
 8008108:	00820074 	movhi	r2,2049
 800810c:	10d87115 	stw	r3,25028(r2)
 8008110:	bf0001cc 	andi	fp,r23,7
 8008114:	e000b626 	beq	fp,zero,80083f0 <_malloc_r+0x698>
 8008118:	bf2fc83a 	sub	r23,r23,fp
 800811c:	bdc00204 	addi	r23,r23,8
 8008120:	00840204 	movi	r2,4104
 8008124:	1705c83a 	sub	r2,r2,fp
 8008128:	bd29883a 	add	r20,r23,r20
 800812c:	1505c83a 	sub	r2,r2,r20
 8008130:	1543ffcc 	andi	r21,r2,4095
 8008134:	a80b883a 	mov	r5,r21
 8008138:	9009883a 	mov	r4,r18
 800813c:	800a0dc0 	call	800a0dc <_sbrk_r>
 8008140:	10ffffe0 	cmpeqi	r3,r2,-1
 8008144:	1800e41e 	bne	r3,zero,80084d8 <_malloc_r+0x780>
 8008148:	15c5c83a 	sub	r2,r2,r23
 800814c:	1569883a 	add	r20,r2,r21
 8008150:	00820074 	movhi	r2,2049
 8008154:	10987117 	ldw	r2,25028(r2)
 8008158:	9dc00215 	stw	r23,8(r19)
 800815c:	a5000054 	ori	r20,r20,1
 8008160:	a885883a 	add	r2,r21,r2
 8008164:	00c20074 	movhi	r3,2049
 8008168:	18987115 	stw	r2,25028(r3)
 800816c:	bd000115 	stw	r20,4(r23)
 8008170:	84c0c626 	beq	r16,r19,800848c <_malloc_r+0x734>
 8008174:	b0c00428 	cmpgeui	r3,r22,16
 8008178:	1800c626 	beq	r3,zero,8008494 <_malloc_r+0x73c>
 800817c:	81000117 	ldw	r4,4(r16)
 8008180:	017ffe04 	movi	r5,-8
 8008184:	b0fffd04 	addi	r3,r22,-12
 8008188:	1946703a 	and	r3,r3,r5
 800818c:	2100004c 	andi	r4,r4,1
 8008190:	20c8b03a 	or	r4,r4,r3
 8008194:	81000115 	stw	r4,4(r16)
 8008198:	01400144 	movi	r5,5
 800819c:	80c9883a 	add	r4,r16,r3
 80081a0:	21400115 	stw	r5,4(r4)
 80081a4:	21400215 	stw	r5,8(r4)
 80081a8:	18c00428 	cmpgeui	r3,r3,16
 80081ac:	1800cf1e 	bne	r3,zero,80084ec <_malloc_r+0x794>
 80081b0:	bd000117 	ldw	r20,4(r23)
 80081b4:	b821883a 	mov	r16,r23
 80081b8:	00c20074 	movhi	r3,2049
 80081bc:	18d85c17 	ldw	r3,24944(r3)
 80081c0:	1880022e 	bgeu	r3,r2,80081cc <_malloc_r+0x474>
 80081c4:	00c20074 	movhi	r3,2049
 80081c8:	18985c15 	stw	r2,24944(r3)
 80081cc:	00c20074 	movhi	r3,2049
 80081d0:	18d85b17 	ldw	r3,24940(r3)
 80081d4:	18805a2e 	bgeu	r3,r2,8008340 <_malloc_r+0x5e8>
 80081d8:	00c20074 	movhi	r3,2049
 80081dc:	18985b15 	stw	r2,24940(r3)
 80081e0:	00005706 	br	8008340 <_malloc_r+0x5e8>
 80081e4:	88c00054 	ori	r3,r17,1
 80081e8:	80c00115 	stw	r3,4(r16)
 80081ec:	8463883a 	add	r17,r16,r17
 80081f0:	10800054 	ori	r2,r2,1
 80081f4:	9c400215 	stw	r17,8(r19)
 80081f8:	88800115 	stw	r2,4(r17)
 80081fc:	9009883a 	mov	r4,r18
 8008200:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8008204:	80800204 	addi	r2,r16,8
 8008208:	003f7c06 	br	8007ffc <_malloc_r+0x2a4>
 800820c:	400d883a 	mov	r6,r8
 8008210:	003f2106 	br	8007e98 <_malloc_r+0x140>
 8008214:	81000317 	ldw	r4,12(r16)
 8008218:	003eee06 	br	8007dd4 <_malloc_r+0x7c>
 800821c:	1006d27a 	srli	r3,r2,9
 8008220:	19000168 	cmpgeui	r4,r3,5
 8008224:	20003e26 	beq	r4,zero,8008320 <_malloc_r+0x5c8>
 8008228:	19000568 	cmpgeui	r4,r3,21
 800822c:	20007a1e 	bne	r4,zero,8008418 <_malloc_r+0x6c0>
 8008230:	19401704 	addi	r5,r3,92
 8008234:	280a90fa 	slli	r5,r5,3
 8008238:	190016c4 	addi	r4,r3,91
 800823c:	994b883a 	add	r5,r19,r5
 8008240:	28c00017 	ldw	r3,0(r5)
 8008244:	297ffe04 	addi	r5,r5,-8
 8008248:	28c06226 	beq	r5,r3,80083d4 <_malloc_r+0x67c>
 800824c:	01ffff04 	movi	r7,-4
 8008250:	19000117 	ldw	r4,4(r3)
 8008254:	21c8703a 	and	r4,r4,r7
 8008258:	1100022e 	bgeu	r2,r4,8008264 <_malloc_r+0x50c>
 800825c:	18c00217 	ldw	r3,8(r3)
 8008260:	28fffb1e 	bne	r5,r3,8008250 <_malloc_r+0x4f8>
 8008264:	19400317 	ldw	r5,12(r3)
 8008268:	98800117 	ldw	r2,4(r19)
 800826c:	81400315 	stw	r5,12(r16)
 8008270:	80c00215 	stw	r3,8(r16)
 8008274:	2c000215 	stw	r16,8(r5)
 8008278:	1c000315 	stw	r16,12(r3)
 800827c:	003f2506 	br	8007f14 <_malloc_r+0x1bc>
 8008280:	10c00568 	cmpgeui	r3,r2,21
 8008284:	18003826 	beq	r3,zero,8008368 <_malloc_r+0x610>
 8008288:	10c01568 	cmpgeui	r3,r2,85
 800828c:	1800691e 	bne	r3,zero,8008434 <_malloc_r+0x6dc>
 8008290:	8804d33a 	srli	r2,r17,12
 8008294:	11801bc4 	addi	r6,r2,111
 8008298:	12001b84 	addi	r8,r2,110
 800829c:	300a90fa 	slli	r5,r6,3
 80082a0:	003ee606 	br	8007e3c <_malloc_r+0xe4>
 80082a4:	5ac00044 	addi	r11,r11,1
 80082a8:	588000cc 	andi	r2,r11,3
 80082ac:	39c00204 	addi	r7,r7,8
 80082b0:	103f2d1e 	bne	r2,zero,8007f68 <_malloc_r+0x210>
 80082b4:	00003306 	br	8008384 <_malloc_r+0x62c>
 80082b8:	8085883a 	add	r2,r16,r2
 80082bc:	10c00117 	ldw	r3,4(r2)
 80082c0:	81000317 	ldw	r4,12(r16)
 80082c4:	81400217 	ldw	r5,8(r16)
 80082c8:	18c00054 	ori	r3,r3,1
 80082cc:	10c00115 	stw	r3,4(r2)
 80082d0:	29000315 	stw	r4,12(r5)
 80082d4:	21400215 	stw	r5,8(r4)
 80082d8:	9009883a 	mov	r4,r18
 80082dc:	800fcc40 	call	800fcc4 <__malloc_unlock>
 80082e0:	80800204 	addi	r2,r16,8
 80082e4:	003f4506 	br	8007ffc <_malloc_r+0x2a4>
 80082e8:	880cd0fa 	srli	r6,r17,3
 80082ec:	88800204 	addi	r2,r17,8
 80082f0:	003eae06 	br	8007dac <_malloc_r+0x54>
 80082f4:	8085883a 	add	r2,r16,r2
 80082f8:	10c00117 	ldw	r3,4(r2)
 80082fc:	9009883a 	mov	r4,r18
 8008300:	18c00054 	ori	r3,r3,1
 8008304:	10c00115 	stw	r3,4(r2)
 8008308:	800fcc40 	call	800fcc4 <__malloc_unlock>
 800830c:	80800204 	addi	r2,r16,8
 8008310:	003f3a06 	br	8007ffc <_malloc_r+0x2a4>
 8008314:	89000054 	ori	r4,r17,1
 8008318:	81000115 	stw	r4,4(r16)
 800831c:	003f2706 	br	8007fbc <_malloc_r+0x264>
 8008320:	1006d1ba 	srli	r3,r2,6
 8008324:	19400e44 	addi	r5,r3,57
 8008328:	19000e04 	addi	r4,r3,56
 800832c:	280a90fa 	slli	r5,r5,3
 8008330:	003fc206 	br	800823c <_malloc_r+0x4e4>
 8008334:	84c04626 	beq	r16,r19,8008450 <_malloc_r+0x6f8>
 8008338:	9c000217 	ldw	r16,8(r19)
 800833c:	85000117 	ldw	r20,4(r16)
 8008340:	00bfff04 	movi	r2,-4
 8008344:	a0a8703a 	and	r20,r20,r2
 8008348:	a445c83a 	sub	r2,r20,r17
 800834c:	a4400236 	bltu	r20,r17,8008358 <_malloc_r+0x600>
 8008350:	10c00408 	cmpgei	r3,r2,16
 8008354:	183fa31e 	bne	r3,zero,80081e4 <_malloc_r+0x48c>
 8008358:	9009883a 	mov	r4,r18
 800835c:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8008360:	0005883a 	mov	r2,zero
 8008364:	003f2506 	br	8007ffc <_malloc_r+0x2a4>
 8008368:	11801704 	addi	r6,r2,92
 800836c:	120016c4 	addi	r8,r2,91
 8008370:	300a90fa 	slli	r5,r6,3
 8008374:	003eb106 	br	8007e3c <_malloc_r+0xe4>
 8008378:	50800217 	ldw	r2,8(r10)
 800837c:	31bfffc4 	addi	r6,r6,-1
 8008380:	1280701e 	bne	r2,r10,8008544 <_malloc_r+0x7ec>
 8008384:	308000cc 	andi	r2,r6,3
 8008388:	52bffe04 	addi	r10,r10,-8
 800838c:	103ffa1e 	bne	r2,zero,8008378 <_malloc_r+0x620>
 8008390:	98c00117 	ldw	r3,4(r19)
 8008394:	0104303a 	nor	r2,zero,r4
 8008398:	10c4703a 	and	r2,r2,r3
 800839c:	98800115 	stw	r2,4(r19)
 80083a0:	2109883a 	add	r4,r4,r4
 80083a4:	113f3136 	bltu	r2,r4,800806c <_malloc_r+0x314>
 80083a8:	203f3026 	beq	r4,zero,800806c <_malloc_r+0x314>
 80083ac:	2086703a 	and	r3,r4,r2
 80083b0:	1800041e 	bne	r3,zero,80083c4 <_malloc_r+0x66c>
 80083b4:	2109883a 	add	r4,r4,r4
 80083b8:	2086703a 	and	r3,r4,r2
 80083bc:	5ac00104 	addi	r11,r11,4
 80083c0:	183ffc26 	beq	r3,zero,80083b4 <_malloc_r+0x65c>
 80083c4:	580d883a 	mov	r6,r11
 80083c8:	003ee306 	br	8007f58 <_malloc_r+0x200>
 80083cc:	a5000404 	addi	r20,r20,16
 80083d0:	003f3906 	br	80080b8 <_malloc_r+0x360>
 80083d4:	2009d0ba 	srai	r4,r4,2
 80083d8:	00800044 	movi	r2,1
 80083dc:	99c00117 	ldw	r7,4(r19)
 80083e0:	1104983a 	sll	r2,r2,r4
 80083e4:	11c4b03a 	or	r2,r2,r7
 80083e8:	98800115 	stw	r2,4(r19)
 80083ec:	003f9f06 	br	800826c <_malloc_r+0x514>
 80083f0:	bd05883a 	add	r2,r23,r20
 80083f4:	0085c83a 	sub	r2,zero,r2
 80083f8:	1543ffcc 	andi	r21,r2,4095
 80083fc:	a80b883a 	mov	r5,r21
 8008400:	9009883a 	mov	r4,r18
 8008404:	800a0dc0 	call	800a0dc <_sbrk_r>
 8008408:	10ffffe0 	cmpeqi	r3,r2,-1
 800840c:	183f4e26 	beq	r3,zero,8008148 <_malloc_r+0x3f0>
 8008410:	002b883a 	mov	r21,zero
 8008414:	003f4e06 	br	8008150 <_malloc_r+0x3f8>
 8008418:	19001568 	cmpgeui	r4,r3,85
 800841c:	2000201e 	bne	r4,zero,80084a0 <_malloc_r+0x748>
 8008420:	1006d33a 	srli	r3,r2,12
 8008424:	19401bc4 	addi	r5,r3,111
 8008428:	19001b84 	addi	r4,r3,110
 800842c:	280a90fa 	slli	r5,r5,3
 8008430:	003f8206 	br	800823c <_malloc_r+0x4e4>
 8008434:	10c05568 	cmpgeui	r3,r2,341
 8008438:	1800201e 	bne	r3,zero,80084bc <_malloc_r+0x764>
 800843c:	8804d3fa 	srli	r2,r17,15
 8008440:	11801e04 	addi	r6,r2,120
 8008444:	12001dc4 	addi	r8,r2,119
 8008448:	300a90fa 	slli	r5,r6,3
 800844c:	003e7b06 	br	8007e3c <_malloc_r+0xe4>
 8008450:	00820074 	movhi	r2,2049
 8008454:	10d87117 	ldw	r3,25028(r2)
 8008458:	a0c7883a 	add	r3,r20,r3
 800845c:	10d87115 	stw	r3,25028(r2)
 8008460:	003f2306 	br	80080f0 <_malloc_r+0x398>
 8008464:	a903ffcc 	andi	r4,r21,4095
 8008468:	203f211e 	bne	r4,zero,80080f0 <_malloc_r+0x398>
 800846c:	9c000217 	ldw	r16,8(r19)
 8008470:	b529883a 	add	r20,r22,r20
 8008474:	a5000054 	ori	r20,r20,1
 8008478:	85000115 	stw	r20,4(r16)
 800847c:	003f4e06 	br	80081b8 <_malloc_r+0x460>
 8008480:	00820074 	movhi	r2,2049
 8008484:	15d14215 	stw	r23,17672(r2)
 8008488:	003f2106 	br	8008110 <_malloc_r+0x3b8>
 800848c:	b821883a 	mov	r16,r23
 8008490:	003f4906 	br	80081b8 <_malloc_r+0x460>
 8008494:	00800044 	movi	r2,1
 8008498:	b8800115 	stw	r2,4(r23)
 800849c:	003fae06 	br	8008358 <_malloc_r+0x600>
 80084a0:	19005568 	cmpgeui	r4,r3,341
 80084a4:	2000191e 	bne	r4,zero,800850c <_malloc_r+0x7b4>
 80084a8:	1006d3fa 	srli	r3,r2,15
 80084ac:	19401e04 	addi	r5,r3,120
 80084b0:	19001dc4 	addi	r4,r3,119
 80084b4:	280a90fa 	slli	r5,r5,3
 80084b8:	003f6006 	br	800823c <_malloc_r+0x4e4>
 80084bc:	10815568 	cmpgeui	r2,r2,1365
 80084c0:	1000191e 	bne	r2,zero,8008528 <_malloc_r+0x7d0>
 80084c4:	8804d4ba 	srli	r2,r17,18
 80084c8:	11801f44 	addi	r6,r2,125
 80084cc:	12001f04 	addi	r8,r2,124
 80084d0:	300a90fa 	slli	r5,r6,3
 80084d4:	003e5906 	br	8007e3c <_malloc_r+0xe4>
 80084d8:	e73ffe04 	addi	fp,fp,-8
 80084dc:	a729883a 	add	r20,r20,fp
 80084e0:	a5e9c83a 	sub	r20,r20,r23
 80084e4:	002b883a 	mov	r21,zero
 80084e8:	003f1906 	br	8008150 <_malloc_r+0x3f8>
 80084ec:	81400204 	addi	r5,r16,8
 80084f0:	9009883a 	mov	r4,r18
 80084f4:	800723c0 	call	800723c <_free_r>
 80084f8:	9c000217 	ldw	r16,8(r19)
 80084fc:	00820074 	movhi	r2,2049
 8008500:	10987117 	ldw	r2,25028(r2)
 8008504:	85000117 	ldw	r20,4(r16)
 8008508:	003f2b06 	br	80081b8 <_malloc_r+0x460>
 800850c:	18c15568 	cmpgeui	r3,r3,1365
 8008510:	1800091e 	bne	r3,zero,8008538 <_malloc_r+0x7e0>
 8008514:	1006d4ba 	srli	r3,r2,18
 8008518:	19401f44 	addi	r5,r3,125
 800851c:	19001f04 	addi	r4,r3,124
 8008520:	280a90fa 	slli	r5,r5,3
 8008524:	003f4506 	br	800823c <_malloc_r+0x4e4>
 8008528:	0140fe04 	movi	r5,1016
 800852c:	01801fc4 	movi	r6,127
 8008530:	02001f84 	movi	r8,126
 8008534:	003e4106 	br	8007e3c <_malloc_r+0xe4>
 8008538:	0140fe04 	movi	r5,1016
 800853c:	01001f84 	movi	r4,126
 8008540:	003f3e06 	br	800823c <_malloc_r+0x4e4>
 8008544:	98800117 	ldw	r2,4(r19)
 8008548:	003f9506 	br	80083a0 <_malloc_r+0x648>

0800854c <memchr>:
 800854c:	208000cc 	andi	r2,r4,3
 8008550:	280f883a 	mov	r7,r5
 8008554:	10003526 	beq	r2,zero,800862c <memchr+0xe0>
 8008558:	30bfffc4 	addi	r2,r6,-1
 800855c:	30001926 	beq	r6,zero,80085c4 <memchr+0x78>
 8008560:	20c00003 	ldbu	r3,0(r4)
 8008564:	29803fcc 	andi	r6,r5,255
 8008568:	30c0061e 	bne	r6,r3,8008584 <memchr+0x38>
 800856c:	00001706 	br	80085cc <memchr+0x80>
 8008570:	10bfffc4 	addi	r2,r2,-1
 8008574:	10ffffe0 	cmpeqi	r3,r2,-1
 8008578:	1800121e 	bne	r3,zero,80085c4 <memchr+0x78>
 800857c:	20c00003 	ldbu	r3,0(r4)
 8008580:	19801226 	beq	r3,r6,80085cc <memchr+0x80>
 8008584:	21000044 	addi	r4,r4,1
 8008588:	20c000cc 	andi	r3,r4,3
 800858c:	183ff81e 	bne	r3,zero,8008570 <memchr+0x24>
 8008590:	10c00128 	cmpgeui	r3,r2,4
 8008594:	18000f1e 	bne	r3,zero,80085d4 <memchr+0x88>
 8008598:	10000a26 	beq	r2,zero,80085c4 <memchr+0x78>
 800859c:	20c00003 	ldbu	r3,0(r4)
 80085a0:	29403fcc 	andi	r5,r5,255
 80085a4:	19400926 	beq	r3,r5,80085cc <memchr+0x80>
 80085a8:	2085883a 	add	r2,r4,r2
 80085ac:	39403fcc 	andi	r5,r7,255
 80085b0:	00000206 	br	80085bc <memchr+0x70>
 80085b4:	20c00003 	ldbu	r3,0(r4)
 80085b8:	19400426 	beq	r3,r5,80085cc <memchr+0x80>
 80085bc:	21000044 	addi	r4,r4,1
 80085c0:	113ffc1e 	bne	r2,r4,80085b4 <memchr+0x68>
 80085c4:	0005883a 	mov	r2,zero
 80085c8:	f800283a 	ret
 80085cc:	2005883a 	mov	r2,r4
 80085d0:	f800283a 	ret
 80085d4:	280c923a 	slli	r6,r5,8
 80085d8:	2a403fcc 	andi	r9,r5,255
 80085dc:	02bfbff4 	movhi	r10,65279
 80085e0:	31bfffcc 	andi	r6,r6,65535
 80085e4:	3246b03a 	or	r3,r6,r9
 80085e8:	1812943a 	slli	r9,r3,16
 80085ec:	02202074 	movhi	r8,32897
 80085f0:	52bfbfc4 	addi	r10,r10,-257
 80085f4:	48d2b03a 	or	r9,r9,r3
 80085f8:	42202004 	addi	r8,r8,-32640
 80085fc:	20c00017 	ldw	r3,0(r4)
 8008600:	48c6f03a 	xor	r3,r9,r3
 8008604:	1a8d883a 	add	r6,r3,r10
 8008608:	00c6303a 	nor	r3,zero,r3
 800860c:	30c6703a 	and	r3,r6,r3
 8008610:	1a06703a 	and	r3,r3,r8
 8008614:	183fe11e 	bne	r3,zero,800859c <memchr+0x50>
 8008618:	10bfff04 	addi	r2,r2,-4
 800861c:	10c00128 	cmpgeui	r3,r2,4
 8008620:	21000104 	addi	r4,r4,4
 8008624:	183ff51e 	bne	r3,zero,80085fc <memchr+0xb0>
 8008628:	003fdb06 	br	8008598 <memchr+0x4c>
 800862c:	3005883a 	mov	r2,r6
 8008630:	003fd706 	br	8008590 <memchr+0x44>

08008634 <memcpy>:
 8008634:	30c00430 	cmpltui	r3,r6,16
 8008638:	2005883a 	mov	r2,r4
 800863c:	18002d1e 	bne	r3,zero,80086f4 <memcpy+0xc0>
 8008640:	2906b03a 	or	r3,r5,r4
 8008644:	18c000cc 	andi	r3,r3,3
 8008648:	1800351e 	bne	r3,zero,8008720 <memcpy+0xec>
 800864c:	32fffc04 	addi	r11,r6,-16
 8008650:	5816d13a 	srli	r11,r11,4
 8008654:	2007883a 	mov	r3,r4
 8008658:	280f883a 	mov	r7,r5
 800865c:	5ac00044 	addi	r11,r11,1
 8008660:	5816913a 	slli	r11,r11,4
 8008664:	22c9883a 	add	r4,r4,r11
 8008668:	3a000017 	ldw	r8,0(r7)
 800866c:	3a800117 	ldw	r10,4(r7)
 8008670:	3a400217 	ldw	r9,8(r7)
 8008674:	39c00404 	addi	r7,r7,16
 8008678:	1a000015 	stw	r8,0(r3)
 800867c:	3a3fff17 	ldw	r8,-4(r7)
 8008680:	1a800115 	stw	r10,4(r3)
 8008684:	1a400215 	stw	r9,8(r3)
 8008688:	18c00404 	addi	r3,r3,16
 800868c:	1a3fff15 	stw	r8,-4(r3)
 8008690:	20fff51e 	bne	r4,r3,8008668 <memcpy+0x34>
 8008694:	3100030c 	andi	r4,r6,12
 8008698:	2acb883a 	add	r5,r5,r11
 800869c:	320003cc 	andi	r8,r6,15
 80086a0:	20002226 	beq	r4,zero,800872c <memcpy+0xf8>
 80086a4:	2809883a 	mov	r4,r5
 80086a8:	1813883a 	mov	r9,r3
 80086ac:	21000104 	addi	r4,r4,4
 80086b0:	22bfff17 	ldw	r10,-4(r4)
 80086b4:	410fc83a 	sub	r7,r8,r4
 80086b8:	4a400104 	addi	r9,r9,4
 80086bc:	29cf883a 	add	r7,r5,r7
 80086c0:	4abfff15 	stw	r10,-4(r9)
 80086c4:	39c00128 	cmpgeui	r7,r7,4
 80086c8:	383ff81e 	bne	r7,zero,80086ac <memcpy+0x78>
 80086cc:	413fff04 	addi	r4,r8,-4
 80086d0:	2008d0ba 	srli	r4,r4,2
 80086d4:	318000cc 	andi	r6,r6,3
 80086d8:	31ffffc4 	addi	r7,r6,-1
 80086dc:	21000044 	addi	r4,r4,1
 80086e0:	200890ba 	slli	r4,r4,2
 80086e4:	1907883a 	add	r3,r3,r4
 80086e8:	290b883a 	add	r5,r5,r4
 80086ec:	3000041e 	bne	r6,zero,8008700 <memcpy+0xcc>
 80086f0:	f800283a 	ret
 80086f4:	2007883a 	mov	r3,r4
 80086f8:	31ffffc4 	addi	r7,r6,-1
 80086fc:	303ffc26 	beq	r6,zero,80086f0 <memcpy+0xbc>
 8008700:	39c00044 	addi	r7,r7,1
 8008704:	19cf883a 	add	r7,r3,r7
 8008708:	29400044 	addi	r5,r5,1
 800870c:	29bfffc3 	ldbu	r6,-1(r5)
 8008710:	18c00044 	addi	r3,r3,1
 8008714:	19bfffc5 	stb	r6,-1(r3)
 8008718:	19fffb1e 	bne	r3,r7,8008708 <memcpy+0xd4>
 800871c:	f800283a 	ret
 8008720:	31ffffc4 	addi	r7,r6,-1
 8008724:	2007883a 	mov	r3,r4
 8008728:	003ff506 	br	8008700 <memcpy+0xcc>
 800872c:	400d883a 	mov	r6,r8
 8008730:	003ff106 	br	80086f8 <memcpy+0xc4>

08008734 <memmove>:
 8008734:	2005883a 	mov	r2,r4
 8008738:	29000a2e 	bgeu	r5,r4,8008764 <memmove+0x30>
 800873c:	2989883a 	add	r4,r5,r6
 8008740:	1100082e 	bgeu	r2,r4,8008764 <memmove+0x30>
 8008744:	1187883a 	add	r3,r2,r6
 8008748:	30003e26 	beq	r6,zero,8008844 <memmove+0x110>
 800874c:	213fffc4 	addi	r4,r4,-1
 8008750:	21400003 	ldbu	r5,0(r4)
 8008754:	18ffffc4 	addi	r3,r3,-1
 8008758:	19400005 	stb	r5,0(r3)
 800875c:	10fffb1e 	bne	r2,r3,800874c <memmove+0x18>
 8008760:	f800283a 	ret
 8008764:	30c00430 	cmpltui	r3,r6,16
 8008768:	18000b26 	beq	r3,zero,8008798 <memmove+0x64>
 800876c:	1007883a 	mov	r3,r2
 8008770:	31ffffc4 	addi	r7,r6,-1
 8008774:	30003726 	beq	r6,zero,8008854 <memmove+0x120>
 8008778:	39c00044 	addi	r7,r7,1
 800877c:	29cf883a 	add	r7,r5,r7
 8008780:	29400044 	addi	r5,r5,1
 8008784:	29bfffc3 	ldbu	r6,-1(r5)
 8008788:	18c00044 	addi	r3,r3,1
 800878c:	19bfffc5 	stb	r6,-1(r3)
 8008790:	29fffb1e 	bne	r5,r7,8008780 <memmove+0x4c>
 8008794:	f800283a 	ret
 8008798:	2886b03a 	or	r3,r5,r2
 800879c:	18c000cc 	andi	r3,r3,3
 80087a0:	1800291e 	bne	r3,zero,8008848 <memmove+0x114>
 80087a4:	327ffc04 	addi	r9,r6,-16
 80087a8:	4812d13a 	srli	r9,r9,4
 80087ac:	280f883a 	mov	r7,r5
 80087b0:	1007883a 	mov	r3,r2
 80087b4:	4a400044 	addi	r9,r9,1
 80087b8:	4812913a 	slli	r9,r9,4
 80087bc:	1251883a 	add	r8,r2,r9
 80087c0:	39000017 	ldw	r4,0(r7)
 80087c4:	18c00404 	addi	r3,r3,16
 80087c8:	39c00404 	addi	r7,r7,16
 80087cc:	193ffc15 	stw	r4,-16(r3)
 80087d0:	393ffd17 	ldw	r4,-12(r7)
 80087d4:	193ffd15 	stw	r4,-12(r3)
 80087d8:	393ffe17 	ldw	r4,-8(r7)
 80087dc:	193ffe15 	stw	r4,-8(r3)
 80087e0:	393fff17 	ldw	r4,-4(r7)
 80087e4:	193fff15 	stw	r4,-4(r3)
 80087e8:	40fff51e 	bne	r8,r3,80087c0 <memmove+0x8c>
 80087ec:	3100030c 	andi	r4,r6,12
 80087f0:	2a4b883a 	add	r5,r5,r9
 80087f4:	320003cc 	andi	r8,r6,15
 80087f8:	20001726 	beq	r4,zero,8008858 <memmove+0x124>
 80087fc:	2813883a 	mov	r9,r5
 8008800:	180f883a 	mov	r7,r3
 8008804:	4a400104 	addi	r9,r9,4
 8008808:	39c00104 	addi	r7,r7,4
 800880c:	4abfff17 	ldw	r10,-4(r9)
 8008810:	41c9c83a 	sub	r4,r8,r7
 8008814:	1909883a 	add	r4,r3,r4
 8008818:	3abfff15 	stw	r10,-4(r7)
 800881c:	21000128 	cmpgeui	r4,r4,4
 8008820:	203ff81e 	bne	r4,zero,8008804 <memmove+0xd0>
 8008824:	413fff04 	addi	r4,r8,-4
 8008828:	2008d0ba 	srli	r4,r4,2
 800882c:	318000cc 	andi	r6,r6,3
 8008830:	21000044 	addi	r4,r4,1
 8008834:	200890ba 	slli	r4,r4,2
 8008838:	1907883a 	add	r3,r3,r4
 800883c:	290b883a 	add	r5,r5,r4
 8008840:	003fcb06 	br	8008770 <memmove+0x3c>
 8008844:	f800283a 	ret
 8008848:	31ffffc4 	addi	r7,r6,-1
 800884c:	1007883a 	mov	r3,r2
 8008850:	003fc906 	br	8008778 <memmove+0x44>
 8008854:	f800283a 	ret
 8008858:	400d883a 	mov	r6,r8
 800885c:	003fc406 	br	8008770 <memmove+0x3c>

08008860 <memset>:
 8008860:	20c000cc 	andi	r3,r4,3
 8008864:	2005883a 	mov	r2,r4
 8008868:	18003626 	beq	r3,zero,8008944 <memset+0xe4>
 800886c:	31ffffc4 	addi	r7,r6,-1
 8008870:	30003326 	beq	r6,zero,8008940 <memset+0xe0>
 8008874:	2811883a 	mov	r8,r5
 8008878:	2007883a 	mov	r3,r4
 800887c:	00000306 	br	800888c <memset+0x2c>
 8008880:	39ffffc4 	addi	r7,r7,-1
 8008884:	39bfffe0 	cmpeqi	r6,r7,-1
 8008888:	30002d1e 	bne	r6,zero,8008940 <memset+0xe0>
 800888c:	18c00044 	addi	r3,r3,1
 8008890:	1a3fffc5 	stb	r8,-1(r3)
 8008894:	198000cc 	andi	r6,r3,3
 8008898:	303ff91e 	bne	r6,zero,8008880 <memset+0x20>
 800889c:	39000130 	cmpltui	r4,r7,4
 80088a0:	2000221e 	bne	r4,zero,800892c <memset+0xcc>
 80088a4:	29003fcc 	andi	r4,r5,255
 80088a8:	200c923a 	slli	r6,r4,8
 80088ac:	3a000430 	cmpltui	r8,r7,16
 80088b0:	3108b03a 	or	r4,r6,r4
 80088b4:	200c943a 	slli	r6,r4,16
 80088b8:	310cb03a 	or	r6,r6,r4
 80088bc:	40000e1e 	bne	r8,zero,80088f8 <memset+0x98>
 80088c0:	3a3ffc04 	addi	r8,r7,-16
 80088c4:	4010d13a 	srli	r8,r8,4
 80088c8:	42000044 	addi	r8,r8,1
 80088cc:	4010913a 	slli	r8,r8,4
 80088d0:	1a11883a 	add	r8,r3,r8
 80088d4:	19800015 	stw	r6,0(r3)
 80088d8:	19800115 	stw	r6,4(r3)
 80088dc:	19800215 	stw	r6,8(r3)
 80088e0:	18c00404 	addi	r3,r3,16
 80088e4:	19bfff15 	stw	r6,-4(r3)
 80088e8:	40fffa1e 	bne	r8,r3,80088d4 <memset+0x74>
 80088ec:	3900030c 	andi	r4,r7,12
 80088f0:	39c003cc 	andi	r7,r7,15
 80088f4:	20000d26 	beq	r4,zero,800892c <memset+0xcc>
 80088f8:	1809883a 	mov	r4,r3
 80088fc:	21000104 	addi	r4,r4,4
 8008900:	3911c83a 	sub	r8,r7,r4
 8008904:	1a11883a 	add	r8,r3,r8
 8008908:	21bfff15 	stw	r6,-4(r4)
 800890c:	42000128 	cmpgeui	r8,r8,4
 8008910:	403ffa1e 	bne	r8,zero,80088fc <memset+0x9c>
 8008914:	393fff04 	addi	r4,r7,-4
 8008918:	2008d0ba 	srli	r4,r4,2
 800891c:	39c000cc 	andi	r7,r7,3
 8008920:	21000044 	addi	r4,r4,1
 8008924:	200890ba 	slli	r4,r4,2
 8008928:	1907883a 	add	r3,r3,r4
 800892c:	38000426 	beq	r7,zero,8008940 <memset+0xe0>
 8008930:	19cf883a 	add	r7,r3,r7
 8008934:	18c00044 	addi	r3,r3,1
 8008938:	197fffc5 	stb	r5,-1(r3)
 800893c:	38fffd1e 	bne	r7,r3,8008934 <memset+0xd4>
 8008940:	f800283a 	ret
 8008944:	2007883a 	mov	r3,r4
 8008948:	300f883a 	mov	r7,r6
 800894c:	003fd306 	br	800889c <memset+0x3c>

08008950 <_Balloc>:
 8008950:	20801317 	ldw	r2,76(r4)
 8008954:	defffc04 	addi	sp,sp,-16
 8008958:	dc400115 	stw	r17,4(sp)
 800895c:	dc000015 	stw	r16,0(sp)
 8008960:	dfc00315 	stw	ra,12(sp)
 8008964:	dc800215 	stw	r18,8(sp)
 8008968:	2021883a 	mov	r16,r4
 800896c:	2823883a 	mov	r17,r5
 8008970:	10000e26 	beq	r2,zero,80089ac <_Balloc+0x5c>
 8008974:	880690ba 	slli	r3,r17,2
 8008978:	10c7883a 	add	r3,r2,r3
 800897c:	18800017 	ldw	r2,0(r3)
 8008980:	10001126 	beq	r2,zero,80089c8 <_Balloc+0x78>
 8008984:	11000017 	ldw	r4,0(r2)
 8008988:	19000015 	stw	r4,0(r3)
 800898c:	10000415 	stw	zero,16(r2)
 8008990:	10000315 	stw	zero,12(r2)
 8008994:	dfc00317 	ldw	ra,12(sp)
 8008998:	dc800217 	ldw	r18,8(sp)
 800899c:	dc400117 	ldw	r17,4(sp)
 80089a0:	dc000017 	ldw	r16,0(sp)
 80089a4:	dec00404 	addi	sp,sp,16
 80089a8:	f800283a 	ret
 80089ac:	01800844 	movi	r6,33
 80089b0:	01400104 	movi	r5,4
 80089b4:	800b9ac0 	call	800b9ac <_calloc_r>
 80089b8:	80801315 	stw	r2,76(r16)
 80089bc:	103fed1e 	bne	r2,zero,8008974 <_Balloc+0x24>
 80089c0:	0005883a 	mov	r2,zero
 80089c4:	003ff306 	br	8008994 <_Balloc+0x44>
 80089c8:	04800044 	movi	r18,1
 80089cc:	9464983a 	sll	r18,r18,r17
 80089d0:	01400044 	movi	r5,1
 80089d4:	8009883a 	mov	r4,r16
 80089d8:	91800144 	addi	r6,r18,5
 80089dc:	300c90ba 	slli	r6,r6,2
 80089e0:	800b9ac0 	call	800b9ac <_calloc_r>
 80089e4:	103ff626 	beq	r2,zero,80089c0 <_Balloc+0x70>
 80089e8:	14400115 	stw	r17,4(r2)
 80089ec:	14800215 	stw	r18,8(r2)
 80089f0:	003fe606 	br	800898c <_Balloc+0x3c>

080089f4 <_Bfree>:
 80089f4:	28000726 	beq	r5,zero,8008a14 <_Bfree+0x20>
 80089f8:	28c00117 	ldw	r3,4(r5)
 80089fc:	20801317 	ldw	r2,76(r4)
 8008a00:	180690ba 	slli	r3,r3,2
 8008a04:	10c5883a 	add	r2,r2,r3
 8008a08:	10c00017 	ldw	r3,0(r2)
 8008a0c:	28c00015 	stw	r3,0(r5)
 8008a10:	11400015 	stw	r5,0(r2)
 8008a14:	f800283a 	ret

08008a18 <__multadd>:
 8008a18:	defff704 	addi	sp,sp,-36
 8008a1c:	dcc00315 	stw	r19,12(sp)
 8008a20:	2cc00417 	ldw	r19,16(r5)
 8008a24:	ddc00715 	stw	r23,28(sp)
 8008a28:	dd800615 	stw	r22,24(sp)
 8008a2c:	dd400515 	stw	r21,20(sp)
 8008a30:	dd000415 	stw	r20,16(sp)
 8008a34:	dc800215 	stw	r18,8(sp)
 8008a38:	dc400115 	stw	r17,4(sp)
 8008a3c:	dfc00815 	stw	ra,32(sp)
 8008a40:	dc000015 	stw	r16,0(sp)
 8008a44:	2829883a 	mov	r20,r5
 8008a48:	202b883a 	mov	r21,r4
 8008a4c:	3025883a 	mov	r18,r6
 8008a50:	3823883a 	mov	r17,r7
 8008a54:	2d800504 	addi	r22,r5,20
 8008a58:	002f883a 	mov	r23,zero
 8008a5c:	b4000017 	ldw	r16,0(r22)
 8008a60:	900b883a 	mov	r5,r18
 8008a64:	b5800104 	addi	r22,r22,4
 8008a68:	813fffcc 	andi	r4,r16,65535
 8008a6c:	8002c3c0 	call	8002c3c <__mulsi3>
 8008a70:	8008d43a 	srli	r4,r16,16
 8008a74:	900b883a 	mov	r5,r18
 8008a78:	1461883a 	add	r16,r2,r17
 8008a7c:	8002c3c0 	call	8002c3c <__mulsi3>
 8008a80:	800ed43a 	srli	r7,r16,16
 8008a84:	843fffcc 	andi	r16,r16,65535
 8008a88:	bdc00044 	addi	r23,r23,1
 8008a8c:	11c5883a 	add	r2,r2,r7
 8008a90:	1006943a 	slli	r3,r2,16
 8008a94:	1022d43a 	srli	r17,r2,16
 8008a98:	1c21883a 	add	r16,r3,r16
 8008a9c:	b43fff15 	stw	r16,-4(r22)
 8008aa0:	bcffee16 	blt	r23,r19,8008a5c <__multadd+0x44>
 8008aa4:	88000826 	beq	r17,zero,8008ac8 <__multadd+0xb0>
 8008aa8:	a0800217 	ldw	r2,8(r20)
 8008aac:	9880120e 	bge	r19,r2,8008af8 <__multadd+0xe0>
 8008ab0:	98800144 	addi	r2,r19,5
 8008ab4:	100490ba 	slli	r2,r2,2
 8008ab8:	9cc00044 	addi	r19,r19,1
 8008abc:	a085883a 	add	r2,r20,r2
 8008ac0:	14400015 	stw	r17,0(r2)
 8008ac4:	a4c00415 	stw	r19,16(r20)
 8008ac8:	a005883a 	mov	r2,r20
 8008acc:	dfc00817 	ldw	ra,32(sp)
 8008ad0:	ddc00717 	ldw	r23,28(sp)
 8008ad4:	dd800617 	ldw	r22,24(sp)
 8008ad8:	dd400517 	ldw	r21,20(sp)
 8008adc:	dd000417 	ldw	r20,16(sp)
 8008ae0:	dcc00317 	ldw	r19,12(sp)
 8008ae4:	dc800217 	ldw	r18,8(sp)
 8008ae8:	dc400117 	ldw	r17,4(sp)
 8008aec:	dc000017 	ldw	r16,0(sp)
 8008af0:	dec00904 	addi	sp,sp,36
 8008af4:	f800283a 	ret
 8008af8:	a1400117 	ldw	r5,4(r20)
 8008afc:	a809883a 	mov	r4,r21
 8008b00:	29400044 	addi	r5,r5,1
 8008b04:	80089500 	call	8008950 <_Balloc>
 8008b08:	a1800417 	ldw	r6,16(r20)
 8008b0c:	a1400304 	addi	r5,r20,12
 8008b10:	11000304 	addi	r4,r2,12
 8008b14:	31800084 	addi	r6,r6,2
 8008b18:	300c90ba 	slli	r6,r6,2
 8008b1c:	1021883a 	mov	r16,r2
 8008b20:	80086340 	call	8008634 <memcpy>
 8008b24:	a0000926 	beq	r20,zero,8008b4c <__multadd+0x134>
 8008b28:	a0c00117 	ldw	r3,4(r20)
 8008b2c:	a8801317 	ldw	r2,76(r21)
 8008b30:	180690ba 	slli	r3,r3,2
 8008b34:	10c5883a 	add	r2,r2,r3
 8008b38:	10c00017 	ldw	r3,0(r2)
 8008b3c:	a0c00015 	stw	r3,0(r20)
 8008b40:	15000015 	stw	r20,0(r2)
 8008b44:	8029883a 	mov	r20,r16
 8008b48:	003fd906 	br	8008ab0 <__multadd+0x98>
 8008b4c:	8029883a 	mov	r20,r16
 8008b50:	003fd706 	br	8008ab0 <__multadd+0x98>

08008b54 <__s2b>:
 8008b54:	defff904 	addi	sp,sp,-28
 8008b58:	dc800215 	stw	r18,8(sp)
 8008b5c:	dc000015 	stw	r16,0(sp)
 8008b60:	2025883a 	mov	r18,r4
 8008b64:	2821883a 	mov	r16,r5
 8008b68:	39000204 	addi	r4,r7,8
 8008b6c:	01400244 	movi	r5,9
 8008b70:	dcc00315 	stw	r19,12(sp)
 8008b74:	dc400115 	stw	r17,4(sp)
 8008b78:	dfc00615 	stw	ra,24(sp)
 8008b7c:	3823883a 	mov	r17,r7
 8008b80:	dd400515 	stw	r21,20(sp)
 8008b84:	dd000415 	stw	r20,16(sp)
 8008b88:	3027883a 	mov	r19,r6
 8008b8c:	8002a840 	call	8002a84 <__divsi3>
 8008b90:	88c00290 	cmplti	r3,r17,10
 8008b94:	1800311e 	bne	r3,zero,8008c5c <__s2b+0x108>
 8008b98:	00c00044 	movi	r3,1
 8008b9c:	000b883a 	mov	r5,zero
 8008ba0:	18c7883a 	add	r3,r3,r3
 8008ba4:	29400044 	addi	r5,r5,1
 8008ba8:	18bffd16 	blt	r3,r2,8008ba0 <__s2b+0x4c>
 8008bac:	9009883a 	mov	r4,r18
 8008bb0:	80089500 	call	8008950 <_Balloc>
 8008bb4:	d8c00717 	ldw	r3,28(sp)
 8008bb8:	10c00515 	stw	r3,20(r2)
 8008bbc:	00c00044 	movi	r3,1
 8008bc0:	10c00415 	stw	r3,16(r2)
 8008bc4:	98c00290 	cmplti	r3,r19,10
 8008bc8:	1800211e 	bne	r3,zero,8008c50 <__s2b+0xfc>
 8008bcc:	85400244 	addi	r21,r16,9
 8008bd0:	84e9883a 	add	r20,r16,r19
 8008bd4:	a821883a 	mov	r16,r21
 8008bd8:	84000044 	addi	r16,r16,1
 8008bdc:	81ffffc7 	ldb	r7,-1(r16)
 8008be0:	01800284 	movi	r6,10
 8008be4:	100b883a 	mov	r5,r2
 8008be8:	39fff404 	addi	r7,r7,-48
 8008bec:	9009883a 	mov	r4,r18
 8008bf0:	8008a180 	call	8008a18 <__multadd>
 8008bf4:	a43ff81e 	bne	r20,r16,8008bd8 <__s2b+0x84>
 8008bf8:	9c3ffe04 	addi	r16,r19,-8
 8008bfc:	ac21883a 	add	r16,r21,r16
 8008c00:	9c400a0e 	bge	r19,r17,8008c2c <__s2b+0xd8>
 8008c04:	8ce3c83a 	sub	r17,r17,r19
 8008c08:	8463883a 	add	r17,r16,r17
 8008c0c:	84000044 	addi	r16,r16,1
 8008c10:	81ffffc7 	ldb	r7,-1(r16)
 8008c14:	01800284 	movi	r6,10
 8008c18:	100b883a 	mov	r5,r2
 8008c1c:	39fff404 	addi	r7,r7,-48
 8008c20:	9009883a 	mov	r4,r18
 8008c24:	8008a180 	call	8008a18 <__multadd>
 8008c28:	8c3ff81e 	bne	r17,r16,8008c0c <__s2b+0xb8>
 8008c2c:	dfc00617 	ldw	ra,24(sp)
 8008c30:	dd400517 	ldw	r21,20(sp)
 8008c34:	dd000417 	ldw	r20,16(sp)
 8008c38:	dcc00317 	ldw	r19,12(sp)
 8008c3c:	dc800217 	ldw	r18,8(sp)
 8008c40:	dc400117 	ldw	r17,4(sp)
 8008c44:	dc000017 	ldw	r16,0(sp)
 8008c48:	dec00704 	addi	sp,sp,28
 8008c4c:	f800283a 	ret
 8008c50:	84000284 	addi	r16,r16,10
 8008c54:	04c00244 	movi	r19,9
 8008c58:	003fe906 	br	8008c00 <__s2b+0xac>
 8008c5c:	000b883a 	mov	r5,zero
 8008c60:	003fd206 	br	8008bac <__s2b+0x58>

08008c64 <__hi0bits>:
 8008c64:	20bfffec 	andhi	r2,r4,65535
 8008c68:	1000131e 	bne	r2,zero,8008cb8 <__hi0bits+0x54>
 8008c6c:	2008943a 	slli	r4,r4,16
 8008c70:	00800404 	movi	r2,16
 8008c74:	20ffc02c 	andhi	r3,r4,65280
 8008c78:	1800021e 	bne	r3,zero,8008c84 <__hi0bits+0x20>
 8008c7c:	2008923a 	slli	r4,r4,8
 8008c80:	10800204 	addi	r2,r2,8
 8008c84:	20fc002c 	andhi	r3,r4,61440
 8008c88:	1800021e 	bne	r3,zero,8008c94 <__hi0bits+0x30>
 8008c8c:	2008913a 	slli	r4,r4,4
 8008c90:	10800104 	addi	r2,r2,4
 8008c94:	20f0002c 	andhi	r3,r4,49152
 8008c98:	1800021e 	bne	r3,zero,8008ca4 <__hi0bits+0x40>
 8008c9c:	200890ba 	slli	r4,r4,2
 8008ca0:	10800084 	addi	r2,r2,2
 8008ca4:	20000316 	blt	r4,zero,8008cb4 <__hi0bits+0x50>
 8008ca8:	2110002c 	andhi	r4,r4,16384
 8008cac:	10800044 	addi	r2,r2,1
 8008cb0:	20000326 	beq	r4,zero,8008cc0 <__hi0bits+0x5c>
 8008cb4:	f800283a 	ret
 8008cb8:	0005883a 	mov	r2,zero
 8008cbc:	003fed06 	br	8008c74 <__hi0bits+0x10>
 8008cc0:	00800804 	movi	r2,32
 8008cc4:	f800283a 	ret

08008cc8 <__lo0bits>:
 8008cc8:	20c00017 	ldw	r3,0(r4)
 8008ccc:	188001cc 	andi	r2,r3,7
 8008cd0:	10000826 	beq	r2,zero,8008cf4 <__lo0bits+0x2c>
 8008cd4:	1880004c 	andi	r2,r3,1
 8008cd8:	10001f1e 	bne	r2,zero,8008d58 <__lo0bits+0x90>
 8008cdc:	1880008c 	andi	r2,r3,2
 8008ce0:	10002126 	beq	r2,zero,8008d68 <__lo0bits+0xa0>
 8008ce4:	1806d07a 	srli	r3,r3,1
 8008ce8:	00800044 	movi	r2,1
 8008cec:	20c00015 	stw	r3,0(r4)
 8008cf0:	f800283a 	ret
 8008cf4:	18bfffcc 	andi	r2,r3,65535
 8008cf8:	1000151e 	bne	r2,zero,8008d50 <__lo0bits+0x88>
 8008cfc:	1806d43a 	srli	r3,r3,16
 8008d00:	00800404 	movi	r2,16
 8008d04:	19403fcc 	andi	r5,r3,255
 8008d08:	2800021e 	bne	r5,zero,8008d14 <__lo0bits+0x4c>
 8008d0c:	1806d23a 	srli	r3,r3,8
 8008d10:	10800204 	addi	r2,r2,8
 8008d14:	194003cc 	andi	r5,r3,15
 8008d18:	2800021e 	bne	r5,zero,8008d24 <__lo0bits+0x5c>
 8008d1c:	1806d13a 	srli	r3,r3,4
 8008d20:	10800104 	addi	r2,r2,4
 8008d24:	194000cc 	andi	r5,r3,3
 8008d28:	2800021e 	bne	r5,zero,8008d34 <__lo0bits+0x6c>
 8008d2c:	1806d0ba 	srli	r3,r3,2
 8008d30:	10800084 	addi	r2,r2,2
 8008d34:	1940004c 	andi	r5,r3,1
 8008d38:	2800031e 	bne	r5,zero,8008d48 <__lo0bits+0x80>
 8008d3c:	1806d07a 	srli	r3,r3,1
 8008d40:	10800044 	addi	r2,r2,1
 8008d44:	18000626 	beq	r3,zero,8008d60 <__lo0bits+0x98>
 8008d48:	20c00015 	stw	r3,0(r4)
 8008d4c:	f800283a 	ret
 8008d50:	0005883a 	mov	r2,zero
 8008d54:	003feb06 	br	8008d04 <__lo0bits+0x3c>
 8008d58:	0005883a 	mov	r2,zero
 8008d5c:	f800283a 	ret
 8008d60:	00800804 	movi	r2,32
 8008d64:	f800283a 	ret
 8008d68:	1806d0ba 	srli	r3,r3,2
 8008d6c:	00800084 	movi	r2,2
 8008d70:	20c00015 	stw	r3,0(r4)
 8008d74:	f800283a 	ret

08008d78 <__i2b>:
 8008d78:	defffe04 	addi	sp,sp,-8
 8008d7c:	dc000015 	stw	r16,0(sp)
 8008d80:	2821883a 	mov	r16,r5
 8008d84:	01400044 	movi	r5,1
 8008d88:	dfc00115 	stw	ra,4(sp)
 8008d8c:	80089500 	call	8008950 <_Balloc>
 8008d90:	01000044 	movi	r4,1
 8008d94:	14000515 	stw	r16,20(r2)
 8008d98:	11000415 	stw	r4,16(r2)
 8008d9c:	dfc00117 	ldw	ra,4(sp)
 8008da0:	dc000017 	ldw	r16,0(sp)
 8008da4:	dec00204 	addi	sp,sp,8
 8008da8:	f800283a 	ret

08008dac <__multiply>:
 8008dac:	defff104 	addi	sp,sp,-60
 8008db0:	dd800b15 	stw	r22,44(sp)
 8008db4:	dc400615 	stw	r17,24(sp)
 8008db8:	2d800417 	ldw	r22,16(r5)
 8008dbc:	34400417 	ldw	r17,16(r6)
 8008dc0:	ddc00c15 	stw	r23,48(sp)
 8008dc4:	dc800715 	stw	r18,28(sp)
 8008dc8:	dfc00e15 	stw	ra,56(sp)
 8008dcc:	df000d15 	stw	fp,52(sp)
 8008dd0:	dd400a15 	stw	r21,40(sp)
 8008dd4:	dd000915 	stw	r20,36(sp)
 8008dd8:	dcc00815 	stw	r19,32(sp)
 8008ddc:	dc000515 	stw	r16,20(sp)
 8008de0:	2825883a 	mov	r18,r5
 8008de4:	302f883a 	mov	r23,r6
 8008de8:	b4400516 	blt	r22,r17,8008e00 <__multiply+0x54>
 8008dec:	8807883a 	mov	r3,r17
 8008df0:	282f883a 	mov	r23,r5
 8008df4:	b023883a 	mov	r17,r22
 8008df8:	3025883a 	mov	r18,r6
 8008dfc:	182d883a 	mov	r22,r3
 8008e00:	b8800217 	ldw	r2,8(r23)
 8008e04:	8da9883a 	add	r20,r17,r22
 8008e08:	b9400117 	ldw	r5,4(r23)
 8008e0c:	1500010e 	bge	r2,r20,8008e14 <__multiply+0x68>
 8008e10:	29400044 	addi	r5,r5,1
 8008e14:	a02690ba 	slli	r19,r20,2
 8008e18:	80089500 	call	8008950 <_Balloc>
 8008e1c:	10c00504 	addi	r3,r2,20
 8008e20:	1cc9883a 	add	r4,r3,r19
 8008e24:	d8800415 	stw	r2,16(sp)
 8008e28:	d8c00015 	stw	r3,0(sp)
 8008e2c:	d9000115 	stw	r4,4(sp)
 8008e30:	1805883a 	mov	r2,r3
 8008e34:	1900042e 	bgeu	r3,r4,8008e48 <__multiply+0x9c>
 8008e38:	d8c00117 	ldw	r3,4(sp)
 8008e3c:	10000015 	stw	zero,0(r2)
 8008e40:	10800104 	addi	r2,r2,4
 8008e44:	10fffc36 	bltu	r2,r3,8008e38 <__multiply+0x8c>
 8008e48:	b02c90ba 	slli	r22,r22,2
 8008e4c:	882290ba 	slli	r17,r17,2
 8008e50:	94800504 	addi	r18,r18,20
 8008e54:	b8800504 	addi	r2,r23,20
 8008e58:	9587883a 	add	r3,r18,r22
 8008e5c:	d8800315 	stw	r2,12(sp)
 8008e60:	d8c00215 	stw	r3,8(sp)
 8008e64:	1463883a 	add	r17,r2,r17
 8008e68:	90c00936 	bltu	r18,r3,8008e90 <__multiply+0xe4>
 8008e6c:	00004606 	br	8008f88 <__multiply+0x1dc>
 8008e70:	8020d43a 	srli	r16,r16,16
 8008e74:	8000271e 	bne	r16,zero,8008f14 <__multiply+0x168>
 8008e78:	d8800017 	ldw	r2,0(sp)
 8008e7c:	94800104 	addi	r18,r18,4
 8008e80:	10800104 	addi	r2,r2,4
 8008e84:	d8800015 	stw	r2,0(sp)
 8008e88:	d8800217 	ldw	r2,8(sp)
 8008e8c:	90803e2e 	bgeu	r18,r2,8008f88 <__multiply+0x1dc>
 8008e90:	94000017 	ldw	r16,0(r18)
 8008e94:	873fffcc 	andi	fp,r16,65535
 8008e98:	e03ff526 	beq	fp,zero,8008e70 <__multiply+0xc4>
 8008e9c:	dcc00017 	ldw	r19,0(sp)
 8008ea0:	dd800317 	ldw	r22,12(sp)
 8008ea4:	002b883a 	mov	r21,zero
 8008ea8:	b5c00017 	ldw	r23,0(r22)
 8008eac:	9c000017 	ldw	r16,0(r19)
 8008eb0:	e00b883a 	mov	r5,fp
 8008eb4:	b93fffcc 	andi	r4,r23,65535
 8008eb8:	8002c3c0 	call	8002c3c <__mulsi3>
 8008ebc:	b808d43a 	srli	r4,r23,16
 8008ec0:	80ffffcc 	andi	r3,r16,65535
 8008ec4:	10c5883a 	add	r2,r2,r3
 8008ec8:	e00b883a 	mov	r5,fp
 8008ecc:	156b883a 	add	r21,r2,r21
 8008ed0:	8020d43a 	srli	r16,r16,16
 8008ed4:	8002c3c0 	call	8002c3c <__mulsi3>
 8008ed8:	a808d43a 	srli	r4,r21,16
 8008edc:	1405883a 	add	r2,r2,r16
 8008ee0:	a8ffffcc 	andi	r3,r21,65535
 8008ee4:	1105883a 	add	r2,r2,r4
 8008ee8:	1008943a 	slli	r4,r2,16
 8008eec:	9cc00104 	addi	r19,r19,4
 8008ef0:	b5800104 	addi	r22,r22,4
 8008ef4:	20c6b03a 	or	r3,r4,r3
 8008ef8:	98ffff15 	stw	r3,-4(r19)
 8008efc:	102ad43a 	srli	r21,r2,16
 8008f00:	b47fe936 	bltu	r22,r17,8008ea8 <__multiply+0xfc>
 8008f04:	9d400015 	stw	r21,0(r19)
 8008f08:	94000017 	ldw	r16,0(r18)
 8008f0c:	8020d43a 	srli	r16,r16,16
 8008f10:	803fd926 	beq	r16,zero,8008e78 <__multiply+0xcc>
 8008f14:	ddc00017 	ldw	r23,0(sp)
 8008f18:	dd400317 	ldw	r21,12(sp)
 8008f1c:	0027883a 	mov	r19,zero
 8008f20:	bd800017 	ldw	r22,0(r23)
 8008f24:	b039883a 	mov	fp,r22
 8008f28:	a900000b 	ldhu	r4,0(r21)
 8008f2c:	e038d43a 	srli	fp,fp,16
 8008f30:	800b883a 	mov	r5,r16
 8008f34:	8002c3c0 	call	8002c3c <__mulsi3>
 8008f38:	1739883a 	add	fp,r2,fp
 8008f3c:	e4e7883a 	add	r19,fp,r19
 8008f40:	9804943a 	slli	r2,r19,16
 8008f44:	b0ffffcc 	andi	r3,r22,65535
 8008f48:	bdc00104 	addi	r23,r23,4
 8008f4c:	10c6b03a 	or	r3,r2,r3
 8008f50:	b8ffff15 	stw	r3,-4(r23)
 8008f54:	ad400104 	addi	r21,r21,4
 8008f58:	a93fff8b 	ldhu	r4,-2(r21)
 8008f5c:	bf000017 	ldw	fp,0(r23)
 8008f60:	800b883a 	mov	r5,r16
 8008f64:	8002c3c0 	call	8002c3c <__mulsi3>
 8008f68:	980cd43a 	srli	r6,r19,16
 8008f6c:	e0ffffcc 	andi	r3,fp,65535
 8008f70:	10c7883a 	add	r3,r2,r3
 8008f74:	19ad883a 	add	r22,r3,r6
 8008f78:	b026d43a 	srli	r19,r22,16
 8008f7c:	ac7fea36 	bltu	r21,r17,8008f28 <__multiply+0x17c>
 8008f80:	bd800015 	stw	r22,0(r23)
 8008f84:	003fbc06 	br	8008e78 <__multiply+0xcc>
 8008f88:	05000a0e 	bge	zero,r20,8008fb4 <__multiply+0x208>
 8008f8c:	d8c00117 	ldw	r3,4(sp)
 8008f90:	18bfff17 	ldw	r2,-4(r3)
 8008f94:	1cffff04 	addi	r19,r3,-4
 8008f98:	10000326 	beq	r2,zero,8008fa8 <__multiply+0x1fc>
 8008f9c:	00000506 	br	8008fb4 <__multiply+0x208>
 8008fa0:	98800017 	ldw	r2,0(r19)
 8008fa4:	1000031e 	bne	r2,zero,8008fb4 <__multiply+0x208>
 8008fa8:	a53fffc4 	addi	r20,r20,-1
 8008fac:	9cffff04 	addi	r19,r19,-4
 8008fb0:	a03ffb1e 	bne	r20,zero,8008fa0 <__multiply+0x1f4>
 8008fb4:	d8800417 	ldw	r2,16(sp)
 8008fb8:	15000415 	stw	r20,16(r2)
 8008fbc:	dfc00e17 	ldw	ra,56(sp)
 8008fc0:	df000d17 	ldw	fp,52(sp)
 8008fc4:	ddc00c17 	ldw	r23,48(sp)
 8008fc8:	dd800b17 	ldw	r22,44(sp)
 8008fcc:	dd400a17 	ldw	r21,40(sp)
 8008fd0:	dd000917 	ldw	r20,36(sp)
 8008fd4:	dcc00817 	ldw	r19,32(sp)
 8008fd8:	dc800717 	ldw	r18,28(sp)
 8008fdc:	dc400617 	ldw	r17,24(sp)
 8008fe0:	dc000517 	ldw	r16,20(sp)
 8008fe4:	dec00f04 	addi	sp,sp,60
 8008fe8:	f800283a 	ret

08008fec <__pow5mult>:
 8008fec:	defffb04 	addi	sp,sp,-20
 8008ff0:	dcc00315 	stw	r19,12(sp)
 8008ff4:	dc000015 	stw	r16,0(sp)
 8008ff8:	dfc00415 	stw	ra,16(sp)
 8008ffc:	dc800215 	stw	r18,8(sp)
 8009000:	dc400115 	stw	r17,4(sp)
 8009004:	308000cc 	andi	r2,r6,3
 8009008:	3021883a 	mov	r16,r6
 800900c:	2027883a 	mov	r19,r4
 8009010:	10002d1e 	bne	r2,zero,80090c8 <__pow5mult+0xdc>
 8009014:	2825883a 	mov	r18,r5
 8009018:	8021d0ba 	srai	r16,r16,2
 800901c:	80001926 	beq	r16,zero,8009084 <__pow5mult+0x98>
 8009020:	9c401217 	ldw	r17,72(r19)
 8009024:	8800061e 	bne	r17,zero,8009040 <__pow5mult+0x54>
 8009028:	00002f06 	br	80090e8 <__pow5mult+0xfc>
 800902c:	8021d07a 	srai	r16,r16,1
 8009030:	80001426 	beq	r16,zero,8009084 <__pow5mult+0x98>
 8009034:	88800017 	ldw	r2,0(r17)
 8009038:	10001a26 	beq	r2,zero,80090a4 <__pow5mult+0xb8>
 800903c:	1023883a 	mov	r17,r2
 8009040:	8080004c 	andi	r2,r16,1
 8009044:	103ff926 	beq	r2,zero,800902c <__pow5mult+0x40>
 8009048:	880d883a 	mov	r6,r17
 800904c:	900b883a 	mov	r5,r18
 8009050:	9809883a 	mov	r4,r19
 8009054:	8008dac0 	call	8008dac <__multiply>
 8009058:	90001926 	beq	r18,zero,80090c0 <__pow5mult+0xd4>
 800905c:	91000117 	ldw	r4,4(r18)
 8009060:	98c01317 	ldw	r3,76(r19)
 8009064:	8021d07a 	srai	r16,r16,1
 8009068:	200890ba 	slli	r4,r4,2
 800906c:	1907883a 	add	r3,r3,r4
 8009070:	19000017 	ldw	r4,0(r3)
 8009074:	91000015 	stw	r4,0(r18)
 8009078:	1c800015 	stw	r18,0(r3)
 800907c:	1025883a 	mov	r18,r2
 8009080:	803fec1e 	bne	r16,zero,8009034 <__pow5mult+0x48>
 8009084:	9005883a 	mov	r2,r18
 8009088:	dfc00417 	ldw	ra,16(sp)
 800908c:	dcc00317 	ldw	r19,12(sp)
 8009090:	dc800217 	ldw	r18,8(sp)
 8009094:	dc400117 	ldw	r17,4(sp)
 8009098:	dc000017 	ldw	r16,0(sp)
 800909c:	dec00504 	addi	sp,sp,20
 80090a0:	f800283a 	ret
 80090a4:	880d883a 	mov	r6,r17
 80090a8:	880b883a 	mov	r5,r17
 80090ac:	9809883a 	mov	r4,r19
 80090b0:	8008dac0 	call	8008dac <__multiply>
 80090b4:	88800015 	stw	r2,0(r17)
 80090b8:	10000015 	stw	zero,0(r2)
 80090bc:	003fdf06 	br	800903c <__pow5mult+0x50>
 80090c0:	1025883a 	mov	r18,r2
 80090c4:	003fd906 	br	800902c <__pow5mult+0x40>
 80090c8:	100490ba 	slli	r2,r2,2
 80090cc:	00c20074 	movhi	r3,2049
 80090d0:	000f883a 	mov	r7,zero
 80090d4:	10c7883a 	add	r3,r2,r3
 80090d8:	19890317 	ldw	r6,9228(r3)
 80090dc:	8008a180 	call	8008a18 <__multadd>
 80090e0:	1025883a 	mov	r18,r2
 80090e4:	003fcc06 	br	8009018 <__pow5mult+0x2c>
 80090e8:	01400044 	movi	r5,1
 80090ec:	9809883a 	mov	r4,r19
 80090f0:	80089500 	call	8008950 <_Balloc>
 80090f4:	1023883a 	mov	r17,r2
 80090f8:	00809c44 	movi	r2,625
 80090fc:	88800515 	stw	r2,20(r17)
 8009100:	00800044 	movi	r2,1
 8009104:	88800415 	stw	r2,16(r17)
 8009108:	9c401215 	stw	r17,72(r19)
 800910c:	88000015 	stw	zero,0(r17)
 8009110:	003fcb06 	br	8009040 <__pow5mult+0x54>

08009114 <__lshift>:
 8009114:	defff904 	addi	sp,sp,-28
 8009118:	dcc00315 	stw	r19,12(sp)
 800911c:	dc400115 	stw	r17,4(sp)
 8009120:	2cc00417 	ldw	r19,16(r5)
 8009124:	3023d17a 	srai	r17,r6,5
 8009128:	28800217 	ldw	r2,8(r5)
 800912c:	dd400515 	stw	r21,20(sp)
 8009130:	8ce7883a 	add	r19,r17,r19
 8009134:	dd000415 	stw	r20,16(sp)
 8009138:	dc800215 	stw	r18,8(sp)
 800913c:	dc000015 	stw	r16,0(sp)
 8009140:	dfc00615 	stw	ra,24(sp)
 8009144:	9c000044 	addi	r16,r19,1
 8009148:	2825883a 	mov	r18,r5
 800914c:	302b883a 	mov	r21,r6
 8009150:	2029883a 	mov	r20,r4
 8009154:	29400117 	ldw	r5,4(r5)
 8009158:	1400030e 	bge	r2,r16,8009168 <__lshift+0x54>
 800915c:	1085883a 	add	r2,r2,r2
 8009160:	29400044 	addi	r5,r5,1
 8009164:	143ffd16 	blt	r2,r16,800915c <__lshift+0x48>
 8009168:	a009883a 	mov	r4,r20
 800916c:	80089500 	call	8008950 <_Balloc>
 8009170:	11000504 	addi	r4,r2,20
 8009174:	0440090e 	bge	zero,r17,800919c <__lshift+0x88>
 8009178:	8c400144 	addi	r17,r17,5
 800917c:	882290ba 	slli	r17,r17,2
 8009180:	2007883a 	mov	r3,r4
 8009184:	144b883a 	add	r5,r2,r17
 8009188:	18c00104 	addi	r3,r3,4
 800918c:	183fff15 	stw	zero,-4(r3)
 8009190:	28fffd1e 	bne	r5,r3,8009188 <__lshift+0x74>
 8009194:	8c7ffb04 	addi	r17,r17,-20
 8009198:	2449883a 	add	r4,r4,r17
 800919c:	92000417 	ldw	r8,16(r18)
 80091a0:	90c00504 	addi	r3,r18,20
 80091a4:	a98007cc 	andi	r6,r21,31
 80091a8:	401090ba 	slli	r8,r8,2
 80091ac:	1a11883a 	add	r8,r3,r8
 80091b0:	30002126 	beq	r6,zero,8009238 <__lshift+0x124>
 80091b4:	02400804 	movi	r9,32
 80091b8:	4993c83a 	sub	r9,r9,r6
 80091bc:	000f883a 	mov	r7,zero
 80091c0:	19400017 	ldw	r5,0(r3)
 80091c4:	21000104 	addi	r4,r4,4
 80091c8:	18c00104 	addi	r3,r3,4
 80091cc:	298a983a 	sll	r5,r5,r6
 80091d0:	29cab03a 	or	r5,r5,r7
 80091d4:	217fff15 	stw	r5,-4(r4)
 80091d8:	197fff17 	ldw	r5,-4(r3)
 80091dc:	2a4ed83a 	srl	r7,r5,r9
 80091e0:	1a3ff736 	bltu	r3,r8,80091c0 <__lshift+0xac>
 80091e4:	21c00015 	stw	r7,0(r4)
 80091e8:	38000126 	beq	r7,zero,80091f0 <__lshift+0xdc>
 80091ec:	8027883a 	mov	r19,r16
 80091f0:	14c00415 	stw	r19,16(r2)
 80091f4:	90000726 	beq	r18,zero,8009214 <__lshift+0x100>
 80091f8:	91000117 	ldw	r4,4(r18)
 80091fc:	a0c01317 	ldw	r3,76(r20)
 8009200:	200890ba 	slli	r4,r4,2
 8009204:	1907883a 	add	r3,r3,r4
 8009208:	19000017 	ldw	r4,0(r3)
 800920c:	91000015 	stw	r4,0(r18)
 8009210:	1c800015 	stw	r18,0(r3)
 8009214:	dfc00617 	ldw	ra,24(sp)
 8009218:	dd400517 	ldw	r21,20(sp)
 800921c:	dd000417 	ldw	r20,16(sp)
 8009220:	dcc00317 	ldw	r19,12(sp)
 8009224:	dc800217 	ldw	r18,8(sp)
 8009228:	dc400117 	ldw	r17,4(sp)
 800922c:	dc000017 	ldw	r16,0(sp)
 8009230:	dec00704 	addi	sp,sp,28
 8009234:	f800283a 	ret
 8009238:	18c00104 	addi	r3,r3,4
 800923c:	197fff17 	ldw	r5,-4(r3)
 8009240:	21000104 	addi	r4,r4,4
 8009244:	217fff15 	stw	r5,-4(r4)
 8009248:	1a3ffb36 	bltu	r3,r8,8009238 <__lshift+0x124>
 800924c:	003fe806 	br	80091f0 <__lshift+0xdc>

08009250 <__mcmp>:
 8009250:	20800417 	ldw	r2,16(r4)
 8009254:	28c00417 	ldw	r3,16(r5)
 8009258:	10c5c83a 	sub	r2,r2,r3
 800925c:	10000e1e 	bne	r2,zero,8009298 <__mcmp+0x48>
 8009260:	180c90ba 	slli	r6,r3,2
 8009264:	21000504 	addi	r4,r4,20
 8009268:	29400504 	addi	r5,r5,20
 800926c:	2187883a 	add	r3,r4,r6
 8009270:	298b883a 	add	r5,r5,r6
 8009274:	00000106 	br	800927c <__mcmp+0x2c>
 8009278:	20c0082e 	bgeu	r4,r3,800929c <__mcmp+0x4c>
 800927c:	18ffff04 	addi	r3,r3,-4
 8009280:	297fff04 	addi	r5,r5,-4
 8009284:	19c00017 	ldw	r7,0(r3)
 8009288:	29800017 	ldw	r6,0(r5)
 800928c:	39bffa26 	beq	r7,r6,8009278 <__mcmp+0x28>
 8009290:	3980032e 	bgeu	r7,r6,80092a0 <__mcmp+0x50>
 8009294:	00bfffc4 	movi	r2,-1
 8009298:	f800283a 	ret
 800929c:	f800283a 	ret
 80092a0:	00800044 	movi	r2,1
 80092a4:	f800283a 	ret

080092a8 <__mdiff>:
 80092a8:	defffa04 	addi	sp,sp,-24
 80092ac:	dc800215 	stw	r18,8(sp)
 80092b0:	30c00417 	ldw	r3,16(r6)
 80092b4:	2c800417 	ldw	r18,16(r5)
 80092b8:	dd000415 	stw	r20,16(sp)
 80092bc:	dcc00315 	stw	r19,12(sp)
 80092c0:	dc400115 	stw	r17,4(sp)
 80092c4:	dc000015 	stw	r16,0(sp)
 80092c8:	dfc00515 	stw	ra,20(sp)
 80092cc:	90e5c83a 	sub	r18,r18,r3
 80092d0:	2827883a 	mov	r19,r5
 80092d4:	3029883a 	mov	r20,r6
 80092d8:	2c000504 	addi	r16,r5,20
 80092dc:	34400504 	addi	r17,r6,20
 80092e0:	9000131e 	bne	r18,zero,8009330 <__mdiff+0x88>
 80092e4:	180690ba 	slli	r3,r3,2
 80092e8:	80c5883a 	add	r2,r16,r3
 80092ec:	88c7883a 	add	r3,r17,r3
 80092f0:	00000106 	br	80092f8 <__mdiff+0x50>
 80092f4:	8080552e 	bgeu	r16,r2,800944c <__mdiff+0x1a4>
 80092f8:	10bfff04 	addi	r2,r2,-4
 80092fc:	18ffff04 	addi	r3,r3,-4
 8009300:	11c00017 	ldw	r7,0(r2)
 8009304:	19400017 	ldw	r5,0(r3)
 8009308:	397ffa26 	beq	r7,r5,80092f4 <__mdiff+0x4c>
 800930c:	39400a2e 	bgeu	r7,r5,8009338 <__mdiff+0x90>
 8009310:	8007883a 	mov	r3,r16
 8009314:	9805883a 	mov	r2,r19
 8009318:	8821883a 	mov	r16,r17
 800931c:	a027883a 	mov	r19,r20
 8009320:	1823883a 	mov	r17,r3
 8009324:	1029883a 	mov	r20,r2
 8009328:	04800044 	movi	r18,1
 800932c:	00000206 	br	8009338 <__mdiff+0x90>
 8009330:	903ff716 	blt	r18,zero,8009310 <__mdiff+0x68>
 8009334:	0025883a 	mov	r18,zero
 8009338:	99400117 	ldw	r5,4(r19)
 800933c:	80089500 	call	8008950 <_Balloc>
 8009340:	9a400417 	ldw	r9,16(r19)
 8009344:	a2c00417 	ldw	r11,16(r20)
 8009348:	12800504 	addi	r10,r2,20
 800934c:	481090ba 	slli	r8,r9,2
 8009350:	581690ba 	slli	r11,r11,2
 8009354:	14800315 	stw	r18,12(r2)
 8009358:	8211883a 	add	r8,r16,r8
 800935c:	8ad7883a 	add	r11,r17,r11
 8009360:	0007883a 	mov	r3,zero
 8009364:	00000106 	br	800936c <__mdiff+0xc4>
 8009368:	3815883a 	mov	r10,r7
 800936c:	81000017 	ldw	r4,0(r16)
 8009370:	89800017 	ldw	r6,0(r17)
 8009374:	51c00104 	addi	r7,r10,4
 8009378:	217fffcc 	andi	r5,r4,65535
 800937c:	28cb883a 	add	r5,r5,r3
 8009380:	30ffffcc 	andi	r3,r6,65535
 8009384:	28cbc83a 	sub	r5,r5,r3
 8009388:	300cd43a 	srli	r6,r6,16
 800938c:	2006d43a 	srli	r3,r4,16
 8009390:	2809d43a 	srai	r4,r5,16
 8009394:	297fffcc 	andi	r5,r5,65535
 8009398:	1987c83a 	sub	r3,r3,r6
 800939c:	1907883a 	add	r3,r3,r4
 80093a0:	1808943a 	slli	r4,r3,16
 80093a4:	8c400104 	addi	r17,r17,4
 80093a8:	84000104 	addi	r16,r16,4
 80093ac:	214ab03a 	or	r5,r4,r5
 80093b0:	397fff15 	stw	r5,-4(r7)
 80093b4:	1807d43a 	srai	r3,r3,16
 80093b8:	8affeb36 	bltu	r17,r11,8009368 <__mdiff+0xc0>
 80093bc:	8200152e 	bgeu	r16,r8,8009414 <__mdiff+0x16c>
 80093c0:	3815883a 	mov	r10,r7
 80093c4:	800d883a 	mov	r6,r16
 80093c8:	31000017 	ldw	r4,0(r6)
 80093cc:	52800104 	addi	r10,r10,4
 80093d0:	31800104 	addi	r6,r6,4
 80093d4:	217fffcc 	andi	r5,r4,65535
 80093d8:	28cb883a 	add	r5,r5,r3
 80093dc:	2817d43a 	srai	r11,r5,16
 80093e0:	2006d43a 	srli	r3,r4,16
 80093e4:	293fffcc 	andi	r4,r5,65535
 80093e8:	1ac7883a 	add	r3,r3,r11
 80093ec:	180a943a 	slli	r5,r3,16
 80093f0:	1807d43a 	srai	r3,r3,16
 80093f4:	290ab03a 	or	r5,r5,r4
 80093f8:	517fff15 	stw	r5,-4(r10)
 80093fc:	323ff236 	bltu	r6,r8,80093c8 <__mdiff+0x120>
 8009400:	42bfffc4 	addi	r10,r8,-1
 8009404:	5415c83a 	sub	r10,r10,r16
 8009408:	5014d0ba 	srli	r10,r10,2
 800940c:	501490ba 	slli	r10,r10,2
 8009410:	3a95883a 	add	r10,r7,r10
 8009414:	2800041e 	bne	r5,zero,8009428 <__mdiff+0x180>
 8009418:	52bfff04 	addi	r10,r10,-4
 800941c:	50c00017 	ldw	r3,0(r10)
 8009420:	4a7fffc4 	addi	r9,r9,-1
 8009424:	183ffc26 	beq	r3,zero,8009418 <__mdiff+0x170>
 8009428:	12400415 	stw	r9,16(r2)
 800942c:	dfc00517 	ldw	ra,20(sp)
 8009430:	dd000417 	ldw	r20,16(sp)
 8009434:	dcc00317 	ldw	r19,12(sp)
 8009438:	dc800217 	ldw	r18,8(sp)
 800943c:	dc400117 	ldw	r17,4(sp)
 8009440:	dc000017 	ldw	r16,0(sp)
 8009444:	dec00604 	addi	sp,sp,24
 8009448:	f800283a 	ret
 800944c:	000b883a 	mov	r5,zero
 8009450:	80089500 	call	8008950 <_Balloc>
 8009454:	00c00044 	movi	r3,1
 8009458:	10c00415 	stw	r3,16(r2)
 800945c:	10000515 	stw	zero,20(r2)
 8009460:	003ff206 	br	800942c <__mdiff+0x184>

08009464 <__ulp>:
 8009464:	295ffc2c 	andhi	r5,r5,32752
 8009468:	00ff3034 	movhi	r3,64704
 800946c:	28c7883a 	add	r3,r5,r3
 8009470:	00c0020e 	bge	zero,r3,800947c <__ulp+0x18>
 8009474:	0005883a 	mov	r2,zero
 8009478:	f800283a 	ret
 800947c:	00c7c83a 	sub	r3,zero,r3
 8009480:	1807d53a 	srai	r3,r3,20
 8009484:	18800508 	cmpgei	r2,r3,20
 8009488:	1000041e 	bne	r2,zero,800949c <__ulp+0x38>
 800948c:	01400234 	movhi	r5,8
 8009490:	28c7d83a 	sra	r3,r5,r3
 8009494:	0005883a 	mov	r2,zero
 8009498:	f800283a 	ret
 800949c:	193ffb04 	addi	r4,r3,-20
 80094a0:	208007c8 	cmpgei	r2,r4,31
 80094a4:	0007883a 	mov	r3,zero
 80094a8:	1000031e 	bne	r2,zero,80094b8 <__ulp+0x54>
 80094ac:	00a00034 	movhi	r2,32768
 80094b0:	1104d83a 	srl	r2,r2,r4
 80094b4:	f800283a 	ret
 80094b8:	00800044 	movi	r2,1
 80094bc:	f800283a 	ret

080094c0 <__b2d>:
 80094c0:	defffa04 	addi	sp,sp,-24
 80094c4:	dc000015 	stw	r16,0(sp)
 80094c8:	24000417 	ldw	r16,16(r4)
 80094cc:	dc800215 	stw	r18,8(sp)
 80094d0:	24800504 	addi	r18,r4,20
 80094d4:	802090ba 	slli	r16,r16,2
 80094d8:	dc400115 	stw	r17,4(sp)
 80094dc:	dd000415 	stw	r20,16(sp)
 80094e0:	9421883a 	add	r16,r18,r16
 80094e4:	847fff17 	ldw	r17,-4(r16)
 80094e8:	dcc00315 	stw	r19,12(sp)
 80094ec:	2829883a 	mov	r20,r5
 80094f0:	8809883a 	mov	r4,r17
 80094f4:	dfc00515 	stw	ra,20(sp)
 80094f8:	8008c640 	call	8008c64 <__hi0bits>
 80094fc:	01000804 	movi	r4,32
 8009500:	2087c83a 	sub	r3,r4,r2
 8009504:	a0c00015 	stw	r3,0(r20)
 8009508:	10c002c8 	cmpgei	r3,r2,11
 800950c:	84ffff04 	addi	r19,r16,-4
 8009510:	18001f26 	beq	r3,zero,8009590 <__b2d+0xd0>
 8009514:	10fffd44 	addi	r3,r2,-11
 8009518:	94c00e2e 	bgeu	r18,r19,8009554 <__b2d+0x94>
 800951c:	80bffe17 	ldw	r2,-8(r16)
 8009520:	18001226 	beq	r3,zero,800956c <__b2d+0xac>
 8009524:	20c9c83a 	sub	r4,r4,r3
 8009528:	110cd83a 	srl	r6,r2,r4
 800952c:	88e2983a 	sll	r17,r17,r3
 8009530:	10c4983a 	sll	r2,r2,r3
 8009534:	817ffe04 	addi	r5,r16,-8
 8009538:	8986b03a 	or	r3,r17,r6
 800953c:	18cffc34 	orhi	r3,r3,16368
 8009540:	91400b2e 	bgeu	r18,r5,8009570 <__b2d+0xb0>
 8009544:	817ffd17 	ldw	r5,-12(r16)
 8009548:	2908d83a 	srl	r4,r5,r4
 800954c:	1104b03a 	or	r2,r2,r4
 8009550:	00000706 	br	8009570 <__b2d+0xb0>
 8009554:	18000426 	beq	r3,zero,8009568 <__b2d+0xa8>
 8009558:	88c6983a 	sll	r3,r17,r3
 800955c:	0005883a 	mov	r2,zero
 8009560:	18cffc34 	orhi	r3,r3,16368
 8009564:	00000206 	br	8009570 <__b2d+0xb0>
 8009568:	0005883a 	mov	r2,zero
 800956c:	88cffc34 	orhi	r3,r17,16368
 8009570:	dfc00517 	ldw	ra,20(sp)
 8009574:	dd000417 	ldw	r20,16(sp)
 8009578:	dcc00317 	ldw	r19,12(sp)
 800957c:	dc800217 	ldw	r18,8(sp)
 8009580:	dc400117 	ldw	r17,4(sp)
 8009584:	dc000017 	ldw	r16,0(sp)
 8009588:	dec00604 	addi	sp,sp,24
 800958c:	f800283a 	ret
 8009590:	014002c4 	movi	r5,11
 8009594:	2889c83a 	sub	r4,r5,r2
 8009598:	8906d83a 	srl	r3,r17,r4
 800959c:	18cffc34 	orhi	r3,r3,16368
 80095a0:	94c00536 	bltu	r18,r19,80095b8 <__b2d+0xf8>
 80095a4:	000b883a 	mov	r5,zero
 80095a8:	10800544 	addi	r2,r2,21
 80095ac:	8884983a 	sll	r2,r17,r2
 80095b0:	1144b03a 	or	r2,r2,r5
 80095b4:	003fee06 	br	8009570 <__b2d+0xb0>
 80095b8:	817ffe17 	ldw	r5,-8(r16)
 80095bc:	290ad83a 	srl	r5,r5,r4
 80095c0:	003ff906 	br	80095a8 <__b2d+0xe8>

080095c4 <__d2b>:
 80095c4:	defff804 	addi	sp,sp,-32
 80095c8:	dc400315 	stw	r17,12(sp)
 80095cc:	3023883a 	mov	r17,r6
 80095d0:	dd000615 	stw	r20,24(sp)
 80095d4:	dc000215 	stw	r16,8(sp)
 80095d8:	2829883a 	mov	r20,r5
 80095dc:	8820d53a 	srli	r16,r17,20
 80095e0:	01400044 	movi	r5,1
 80095e4:	dcc00515 	stw	r19,20(sp)
 80095e8:	dc800415 	stw	r18,16(sp)
 80095ec:	dfc00715 	stw	ra,28(sp)
 80095f0:	3825883a 	mov	r18,r7
 80095f4:	80089500 	call	8008950 <_Balloc>
 80095f8:	01800434 	movhi	r6,16
 80095fc:	31bfffc4 	addi	r6,r6,-1
 8009600:	8401ffcc 	andi	r16,r16,2047
 8009604:	1027883a 	mov	r19,r2
 8009608:	89a2703a 	and	r17,r17,r6
 800960c:	80000126 	beq	r16,zero,8009614 <__d2b+0x50>
 8009610:	8c400434 	orhi	r17,r17,16
 8009614:	dc400115 	stw	r17,4(sp)
 8009618:	a0002826 	beq	r20,zero,80096bc <__d2b+0xf8>
 800961c:	d809883a 	mov	r4,sp
 8009620:	dd000015 	stw	r20,0(sp)
 8009624:	8008cc80 	call	8008cc8 <__lo0bits>
 8009628:	d8c00117 	ldw	r3,4(sp)
 800962c:	1000171e 	bne	r2,zero,800968c <__d2b+0xc8>
 8009630:	d9000017 	ldw	r4,0(sp)
 8009634:	98c00615 	stw	r3,24(r19)
 8009638:	99000515 	stw	r4,20(r19)
 800963c:	18001d1e 	bne	r3,zero,80096b4 <__d2b+0xf0>
 8009640:	04400044 	movi	r17,1
 8009644:	9c400415 	stw	r17,16(r19)
 8009648:	80002526 	beq	r16,zero,80096e0 <__d2b+0x11c>
 800964c:	00c00d44 	movi	r3,53
 8009650:	843ef344 	addi	r16,r16,-1075
 8009654:	80a1883a 	add	r16,r16,r2
 8009658:	1885c83a 	sub	r2,r3,r2
 800965c:	d8c00817 	ldw	r3,32(sp)
 8009660:	94000015 	stw	r16,0(r18)
 8009664:	18800015 	stw	r2,0(r3)
 8009668:	9805883a 	mov	r2,r19
 800966c:	dfc00717 	ldw	ra,28(sp)
 8009670:	dd000617 	ldw	r20,24(sp)
 8009674:	dcc00517 	ldw	r19,20(sp)
 8009678:	dc800417 	ldw	r18,16(sp)
 800967c:	dc400317 	ldw	r17,12(sp)
 8009680:	dc000217 	ldw	r16,8(sp)
 8009684:	dec00804 	addi	sp,sp,32
 8009688:	f800283a 	ret
 800968c:	01000804 	movi	r4,32
 8009690:	2089c83a 	sub	r4,r4,r2
 8009694:	1908983a 	sll	r4,r3,r4
 8009698:	d9400017 	ldw	r5,0(sp)
 800969c:	1886d83a 	srl	r3,r3,r2
 80096a0:	2148b03a 	or	r4,r4,r5
 80096a4:	99000515 	stw	r4,20(r19)
 80096a8:	d8c00115 	stw	r3,4(sp)
 80096ac:	98c00615 	stw	r3,24(r19)
 80096b0:	183fe326 	beq	r3,zero,8009640 <__d2b+0x7c>
 80096b4:	04400084 	movi	r17,2
 80096b8:	003fe206 	br	8009644 <__d2b+0x80>
 80096bc:	d9000104 	addi	r4,sp,4
 80096c0:	8008cc80 	call	8008cc8 <__lo0bits>
 80096c4:	00c00044 	movi	r3,1
 80096c8:	98c00415 	stw	r3,16(r19)
 80096cc:	d8c00117 	ldw	r3,4(sp)
 80096d0:	10800804 	addi	r2,r2,32
 80096d4:	04400044 	movi	r17,1
 80096d8:	98c00515 	stw	r3,20(r19)
 80096dc:	803fdb1e 	bne	r16,zero,800964c <__d2b+0x88>
 80096e0:	880690ba 	slli	r3,r17,2
 80096e4:	10bef384 	addi	r2,r2,-1074
 80096e8:	8822917a 	slli	r17,r17,5
 80096ec:	98c7883a 	add	r3,r19,r3
 80096f0:	19000417 	ldw	r4,16(r3)
 80096f4:	90800015 	stw	r2,0(r18)
 80096f8:	8008c640 	call	8008c64 <__hi0bits>
 80096fc:	88a3c83a 	sub	r17,r17,r2
 8009700:	d8800817 	ldw	r2,32(sp)
 8009704:	14400015 	stw	r17,0(r2)
 8009708:	003fd706 	br	8009668 <__d2b+0xa4>

0800970c <__ratio>:
 800970c:	defff904 	addi	sp,sp,-28
 8009710:	dc400315 	stw	r17,12(sp)
 8009714:	2823883a 	mov	r17,r5
 8009718:	d80b883a 	mov	r5,sp
 800971c:	dfc00615 	stw	ra,24(sp)
 8009720:	dcc00515 	stw	r19,20(sp)
 8009724:	dc800415 	stw	r18,16(sp)
 8009728:	2027883a 	mov	r19,r4
 800972c:	dc000215 	stw	r16,8(sp)
 8009730:	80094c00 	call	80094c0 <__b2d>
 8009734:	d9400104 	addi	r5,sp,4
 8009738:	8809883a 	mov	r4,r17
 800973c:	1025883a 	mov	r18,r2
 8009740:	1821883a 	mov	r16,r3
 8009744:	80094c00 	call	80094c0 <__b2d>
 8009748:	89400417 	ldw	r5,16(r17)
 800974c:	99000417 	ldw	r4,16(r19)
 8009750:	d9800117 	ldw	r6,4(sp)
 8009754:	2149c83a 	sub	r4,r4,r5
 8009758:	d9400017 	ldw	r5,0(sp)
 800975c:	2008917a 	slli	r4,r4,5
 8009760:	298bc83a 	sub	r5,r5,r6
 8009764:	2149883a 	add	r4,r4,r5
 8009768:	01000e0e 	bge	zero,r4,80097a4 <__ratio+0x98>
 800976c:	2008953a 	slli	r4,r4,20
 8009770:	2421883a 	add	r16,r4,r16
 8009774:	100d883a 	mov	r6,r2
 8009778:	180f883a 	mov	r7,r3
 800977c:	9009883a 	mov	r4,r18
 8009780:	800b883a 	mov	r5,r16
 8009784:	800d7580 	call	800d758 <__divdf3>
 8009788:	dfc00617 	ldw	ra,24(sp)
 800978c:	dcc00517 	ldw	r19,20(sp)
 8009790:	dc800417 	ldw	r18,16(sp)
 8009794:	dc400317 	ldw	r17,12(sp)
 8009798:	dc000217 	ldw	r16,8(sp)
 800979c:	dec00704 	addi	sp,sp,28
 80097a0:	f800283a 	ret
 80097a4:	2008953a 	slli	r4,r4,20
 80097a8:	1907c83a 	sub	r3,r3,r4
 80097ac:	003ff106 	br	8009774 <__ratio+0x68>

080097b0 <_mprec_log10>:
 80097b0:	defffe04 	addi	sp,sp,-8
 80097b4:	dc000015 	stw	r16,0(sp)
 80097b8:	dfc00115 	stw	ra,4(sp)
 80097bc:	20800608 	cmpgei	r2,r4,24
 80097c0:	2021883a 	mov	r16,r4
 80097c4:	10000d26 	beq	r2,zero,80097fc <_mprec_log10+0x4c>
 80097c8:	0005883a 	mov	r2,zero
 80097cc:	00cffc34 	movhi	r3,16368
 80097d0:	843fffc4 	addi	r16,r16,-1
 80097d4:	000d883a 	mov	r6,zero
 80097d8:	01d00934 	movhi	r7,16420
 80097dc:	1009883a 	mov	r4,r2
 80097e0:	180b883a 	mov	r5,r3
 80097e4:	800e31c0 	call	800e31c <__muldf3>
 80097e8:	803ff91e 	bne	r16,zero,80097d0 <_mprec_log10+0x20>
 80097ec:	dfc00117 	ldw	ra,4(sp)
 80097f0:	dc000017 	ldw	r16,0(sp)
 80097f4:	dec00204 	addi	sp,sp,8
 80097f8:	f800283a 	ret
 80097fc:	202090fa 	slli	r16,r4,3
 8009800:	00820074 	movhi	r2,2049
 8009804:	10891b04 	addi	r2,r2,9324
 8009808:	1421883a 	add	r16,r2,r16
 800980c:	80800017 	ldw	r2,0(r16)
 8009810:	80c00117 	ldw	r3,4(r16)
 8009814:	dfc00117 	ldw	ra,4(sp)
 8009818:	dc000017 	ldw	r16,0(sp)
 800981c:	dec00204 	addi	sp,sp,8
 8009820:	f800283a 	ret

08009824 <__copybits>:
 8009824:	29ffffc4 	addi	r7,r5,-1
 8009828:	380fd17a 	srai	r7,r7,5
 800982c:	31400417 	ldw	r5,16(r6)
 8009830:	30800504 	addi	r2,r6,20
 8009834:	39c00044 	addi	r7,r7,1
 8009838:	280a90ba 	slli	r5,r5,2
 800983c:	380e90ba 	slli	r7,r7,2
 8009840:	114b883a 	add	r5,r2,r5
 8009844:	21cf883a 	add	r7,r4,r7
 8009848:	11400c2e 	bgeu	r2,r5,800987c <__copybits+0x58>
 800984c:	2007883a 	mov	r3,r4
 8009850:	10800104 	addi	r2,r2,4
 8009854:	123fff17 	ldw	r8,-4(r2)
 8009858:	18c00104 	addi	r3,r3,4
 800985c:	1a3fff15 	stw	r8,-4(r3)
 8009860:	117ffb36 	bltu	r2,r5,8009850 <__copybits+0x2c>
 8009864:	2985c83a 	sub	r2,r5,r6
 8009868:	10bffac4 	addi	r2,r2,-21
 800986c:	1004d0ba 	srli	r2,r2,2
 8009870:	10800044 	addi	r2,r2,1
 8009874:	100490ba 	slli	r2,r2,2
 8009878:	2089883a 	add	r4,r4,r2
 800987c:	21c0032e 	bgeu	r4,r7,800988c <__copybits+0x68>
 8009880:	21000104 	addi	r4,r4,4
 8009884:	203fff15 	stw	zero,-4(r4)
 8009888:	21fffd36 	bltu	r4,r7,8009880 <__copybits+0x5c>
 800988c:	f800283a 	ret

08009890 <__any_on>:
 8009890:	20800417 	ldw	r2,16(r4)
 8009894:	280dd17a 	srai	r6,r5,5
 8009898:	21000504 	addi	r4,r4,20
 800989c:	11800c0e 	bge	r2,r6,80098d0 <__any_on+0x40>
 80098a0:	100690ba 	slli	r3,r2,2
 80098a4:	20c7883a 	add	r3,r4,r3
 80098a8:	20c0142e 	bgeu	r4,r3,80098fc <__any_on+0x6c>
 80098ac:	18bfff17 	ldw	r2,-4(r3)
 80098b0:	18ffff04 	addi	r3,r3,-4
 80098b4:	1000041e 	bne	r2,zero,80098c8 <__any_on+0x38>
 80098b8:	20c00f2e 	bgeu	r4,r3,80098f8 <__any_on+0x68>
 80098bc:	18ffff04 	addi	r3,r3,-4
 80098c0:	19400017 	ldw	r5,0(r3)
 80098c4:	283ffc26 	beq	r5,zero,80098b8 <__any_on+0x28>
 80098c8:	00800044 	movi	r2,1
 80098cc:	f800283a 	ret
 80098d0:	300690ba 	slli	r3,r6,2
 80098d4:	20c7883a 	add	r3,r4,r3
 80098d8:	30bff30e 	bge	r6,r2,80098a8 <__any_on+0x18>
 80098dc:	294007cc 	andi	r5,r5,31
 80098e0:	283ff126 	beq	r5,zero,80098a8 <__any_on+0x18>
 80098e4:	19800017 	ldw	r6,0(r3)
 80098e8:	3144d83a 	srl	r2,r6,r5
 80098ec:	114a983a 	sll	r5,r2,r5
 80098f0:	317ff51e 	bne	r6,r5,80098c8 <__any_on+0x38>
 80098f4:	003fec06 	br	80098a8 <__any_on+0x18>
 80098f8:	f800283a 	ret
 80098fc:	0005883a 	mov	r2,zero
 8009900:	f800283a 	ret

08009904 <_putc_r>:
 8009904:	defffc04 	addi	sp,sp,-16
 8009908:	dc000215 	stw	r16,8(sp)
 800990c:	dfc00315 	stw	ra,12(sp)
 8009910:	2021883a 	mov	r16,r4
 8009914:	20000226 	beq	r4,zero,8009920 <_putc_r+0x1c>
 8009918:	20800e17 	ldw	r2,56(r4)
 800991c:	10000e26 	beq	r2,zero,8009958 <_putc_r+0x54>
 8009920:	30800217 	ldw	r2,8(r6)
 8009924:	10bfffc4 	addi	r2,r2,-1
 8009928:	30800215 	stw	r2,8(r6)
 800992c:	10001316 	blt	r2,zero,800997c <_putc_r+0x78>
 8009930:	30800017 	ldw	r2,0(r6)
 8009934:	11400005 	stb	r5,0(r2)
 8009938:	30800017 	ldw	r2,0(r6)
 800993c:	10c00044 	addi	r3,r2,1
 8009940:	30c00015 	stw	r3,0(r6)
 8009944:	10800003 	ldbu	r2,0(r2)
 8009948:	dfc00317 	ldw	ra,12(sp)
 800994c:	dc000217 	ldw	r16,8(sp)
 8009950:	dec00404 	addi	sp,sp,16
 8009954:	f800283a 	ret
 8009958:	d9800115 	stw	r6,4(sp)
 800995c:	d9400015 	stw	r5,0(sp)
 8009960:	80070d80 	call	80070d8 <__sinit>
 8009964:	d9800117 	ldw	r6,4(sp)
 8009968:	d9400017 	ldw	r5,0(sp)
 800996c:	30800217 	ldw	r2,8(r6)
 8009970:	10bfffc4 	addi	r2,r2,-1
 8009974:	30800215 	stw	r2,8(r6)
 8009978:	103fed0e 	bge	r2,zero,8009930 <_putc_r+0x2c>
 800997c:	30c00617 	ldw	r3,24(r6)
 8009980:	10c00e16 	blt	r2,r3,80099bc <_putc_r+0xb8>
 8009984:	30800017 	ldw	r2,0(r6)
 8009988:	11400005 	stb	r5,0(r2)
 800998c:	30c00017 	ldw	r3,0(r6)
 8009990:	18800003 	ldbu	r2,0(r3)
 8009994:	108002a0 	cmpeqi	r2,r2,10
 8009998:	1000071e 	bne	r2,zero,80099b8 <_putc_r+0xb4>
 800999c:	18800044 	addi	r2,r3,1
 80099a0:	30800015 	stw	r2,0(r6)
 80099a4:	18800003 	ldbu	r2,0(r3)
 80099a8:	dfc00317 	ldw	ra,12(sp)
 80099ac:	dc000217 	ldw	r16,8(sp)
 80099b0:	dec00404 	addi	sp,sp,16
 80099b4:	f800283a 	ret
 80099b8:	01400284 	movi	r5,10
 80099bc:	8009883a 	mov	r4,r16
 80099c0:	dfc00317 	ldw	ra,12(sp)
 80099c4:	dc000217 	ldw	r16,8(sp)
 80099c8:	dec00404 	addi	sp,sp,16
 80099cc:	800b7941 	jmpi	800b794 <__swbuf_r>

080099d0 <putc>:
 80099d0:	defffc04 	addi	sp,sp,-16
 80099d4:	00820074 	movhi	r2,2049
 80099d8:	dc000115 	stw	r16,4(sp)
 80099dc:	14114117 	ldw	r16,17668(r2)
 80099e0:	dc400215 	stw	r17,8(sp)
 80099e4:	dfc00315 	stw	ra,12(sp)
 80099e8:	2023883a 	mov	r17,r4
 80099ec:	80000226 	beq	r16,zero,80099f8 <putc+0x28>
 80099f0:	80800e17 	ldw	r2,56(r16)
 80099f4:	10000f26 	beq	r2,zero,8009a34 <putc+0x64>
 80099f8:	28800217 	ldw	r2,8(r5)
 80099fc:	10bfffc4 	addi	r2,r2,-1
 8009a00:	28800215 	stw	r2,8(r5)
 8009a04:	10001316 	blt	r2,zero,8009a54 <putc+0x84>
 8009a08:	28800017 	ldw	r2,0(r5)
 8009a0c:	14400005 	stb	r17,0(r2)
 8009a10:	28800017 	ldw	r2,0(r5)
 8009a14:	10c00044 	addi	r3,r2,1
 8009a18:	28c00015 	stw	r3,0(r5)
 8009a1c:	10800003 	ldbu	r2,0(r2)
 8009a20:	dfc00317 	ldw	ra,12(sp)
 8009a24:	dc400217 	ldw	r17,8(sp)
 8009a28:	dc000117 	ldw	r16,4(sp)
 8009a2c:	dec00404 	addi	sp,sp,16
 8009a30:	f800283a 	ret
 8009a34:	8009883a 	mov	r4,r16
 8009a38:	d9400015 	stw	r5,0(sp)
 8009a3c:	80070d80 	call	80070d8 <__sinit>
 8009a40:	d9400017 	ldw	r5,0(sp)
 8009a44:	28800217 	ldw	r2,8(r5)
 8009a48:	10bfffc4 	addi	r2,r2,-1
 8009a4c:	28800215 	stw	r2,8(r5)
 8009a50:	103fed0e 	bge	r2,zero,8009a08 <putc+0x38>
 8009a54:	28c00617 	ldw	r3,24(r5)
 8009a58:	10c00a16 	blt	r2,r3,8009a84 <putc+0xb4>
 8009a5c:	28800017 	ldw	r2,0(r5)
 8009a60:	14400005 	stb	r17,0(r2)
 8009a64:	28c00017 	ldw	r3,0(r5)
 8009a68:	18800003 	ldbu	r2,0(r3)
 8009a6c:	108002a0 	cmpeqi	r2,r2,10
 8009a70:	10000c1e 	bne	r2,zero,8009aa4 <putc+0xd4>
 8009a74:	18800044 	addi	r2,r3,1
 8009a78:	28800015 	stw	r2,0(r5)
 8009a7c:	18800003 	ldbu	r2,0(r3)
 8009a80:	003fe706 	br	8009a20 <putc+0x50>
 8009a84:	280d883a 	mov	r6,r5
 8009a88:	880b883a 	mov	r5,r17
 8009a8c:	8009883a 	mov	r4,r16
 8009a90:	dfc00317 	ldw	ra,12(sp)
 8009a94:	dc400217 	ldw	r17,8(sp)
 8009a98:	dc000117 	ldw	r16,4(sp)
 8009a9c:	dec00404 	addi	sp,sp,16
 8009aa0:	800b7941 	jmpi	800b794 <__swbuf_r>
 8009aa4:	280d883a 	mov	r6,r5
 8009aa8:	01400284 	movi	r5,10
 8009aac:	003ff706 	br	8009a8c <putc+0xbc>

08009ab0 <_realloc_r>:
 8009ab0:	defff504 	addi	sp,sp,-44
 8009ab4:	dcc00415 	stw	r19,16(sp)
 8009ab8:	dfc00a15 	stw	ra,40(sp)
 8009abc:	df000915 	stw	fp,36(sp)
 8009ac0:	ddc00815 	stw	r23,32(sp)
 8009ac4:	dd800715 	stw	r22,28(sp)
 8009ac8:	dd400615 	stw	r21,24(sp)
 8009acc:	dd000515 	stw	r20,20(sp)
 8009ad0:	dc800315 	stw	r18,12(sp)
 8009ad4:	dc400215 	stw	r17,8(sp)
 8009ad8:	dc000115 	stw	r16,4(sp)
 8009adc:	3027883a 	mov	r19,r6
 8009ae0:	28008b26 	beq	r5,zero,8009d10 <_realloc_r+0x260>
 8009ae4:	282d883a 	mov	r22,r5
 8009ae8:	202b883a 	mov	r21,r4
 8009aec:	9c0002c4 	addi	r16,r19,11
 8009af0:	800fca00 	call	800fca0 <__malloc_lock>
 8009af4:	808005f0 	cmpltui	r2,r16,23
 8009af8:	1000521e 	bne	r2,zero,8009c44 <_realloc_r+0x194>
 8009afc:	017ffe04 	movi	r5,-8
 8009b00:	8160703a 	and	r16,r16,r5
 8009b04:	8007883a 	mov	r3,r16
 8009b08:	80005116 	blt	r16,zero,8009c50 <_realloc_r+0x1a0>
 8009b0c:	84c05036 	bltu	r16,r19,8009c50 <_realloc_r+0x1a0>
 8009b10:	b0bfff17 	ldw	r2,-4(r22)
 8009b14:	017fff04 	movi	r5,-4
 8009b18:	b4bffe04 	addi	r18,r22,-8
 8009b1c:	1162703a 	and	r17,r2,r5
 8009b20:	9469883a 	add	r20,r18,r17
 8009b24:	88c0390e 	bge	r17,r3,8009c0c <_realloc_r+0x15c>
 8009b28:	07020074 	movhi	fp,2049
 8009b2c:	e70b5c04 	addi	fp,fp,11632
 8009b30:	e2000217 	ldw	r8,8(fp)
 8009b34:	a1000117 	ldw	r4,4(r20)
 8009b38:	45008e26 	beq	r8,r20,8009d74 <_realloc_r+0x2c4>
 8009b3c:	01bfff84 	movi	r6,-2
 8009b40:	218c703a 	and	r6,r4,r6
 8009b44:	a18d883a 	add	r6,r20,r6
 8009b48:	31800117 	ldw	r6,4(r6)
 8009b4c:	3180004c 	andi	r6,r6,1
 8009b50:	30004f1e 	bne	r6,zero,8009c90 <_realloc_r+0x1e0>
 8009b54:	2148703a 	and	r4,r4,r5
 8009b58:	890b883a 	add	r5,r17,r4
 8009b5c:	28c0cb0e 	bge	r5,r3,8009e8c <_realloc_r+0x3dc>
 8009b60:	1080004c 	andi	r2,r2,1
 8009b64:	10004c1e 	bne	r2,zero,8009c98 <_realloc_r+0x1e8>
 8009b68:	b1fffe17 	ldw	r7,-8(r22)
 8009b6c:	00bfff04 	movi	r2,-4
 8009b70:	91cfc83a 	sub	r7,r18,r7
 8009b74:	39400117 	ldw	r5,4(r7)
 8009b78:	288a703a 	and	r5,r5,r2
 8009b7c:	a0000426 	beq	r20,zero,8009b90 <_realloc_r+0xe0>
 8009b80:	896f883a 	add	r23,r17,r5
 8009b84:	b92f883a 	add	r23,r23,r4
 8009b88:	4500cb26 	beq	r8,r20,8009eb8 <_realloc_r+0x408>
 8009b8c:	b8c0930e 	bge	r23,r3,8009ddc <_realloc_r+0x32c>
 8009b90:	38004126 	beq	r7,zero,8009c98 <_realloc_r+0x1e8>
 8009b94:	896f883a 	add	r23,r17,r5
 8009b98:	b8c03f16 	blt	r23,r3,8009c98 <_realloc_r+0x1e8>
 8009b9c:	38c00217 	ldw	r3,8(r7)
 8009ba0:	38800317 	ldw	r2,12(r7)
 8009ba4:	89bfff04 	addi	r6,r17,-4
 8009ba8:	31000968 	cmpgeui	r4,r6,37
 8009bac:	18800315 	stw	r2,12(r3)
 8009bb0:	10c00215 	stw	r3,8(r2)
 8009bb4:	3de9883a 	add	r20,r7,r23
 8009bb8:	38c00204 	addi	r3,r7,8
 8009bbc:	2000f81e 	bne	r4,zero,8009fa0 <_realloc_r+0x4f0>
 8009bc0:	30800530 	cmpltui	r2,r6,20
 8009bc4:	b1000017 	ldw	r4,0(r22)
 8009bc8:	1000eb1e 	bne	r2,zero,8009f78 <_realloc_r+0x4c8>
 8009bcc:	39000215 	stw	r4,8(r7)
 8009bd0:	b1000117 	ldw	r4,4(r22)
 8009bd4:	30800728 	cmpgeui	r2,r6,28
 8009bd8:	39000315 	stw	r4,12(r7)
 8009bdc:	1001041e 	bne	r2,zero,8009ff0 <_realloc_r+0x540>
 8009be0:	b1000217 	ldw	r4,8(r22)
 8009be4:	38800404 	addi	r2,r7,16
 8009be8:	b5800204 	addi	r22,r22,8
 8009bec:	11000015 	stw	r4,0(r2)
 8009bf0:	b1000117 	ldw	r4,4(r22)
 8009bf4:	b823883a 	mov	r17,r23
 8009bf8:	3825883a 	mov	r18,r7
 8009bfc:	11000115 	stw	r4,4(r2)
 8009c00:	b1000217 	ldw	r4,8(r22)
 8009c04:	182d883a 	mov	r22,r3
 8009c08:	11000215 	stw	r4,8(r2)
 8009c0c:	91800117 	ldw	r6,4(r18)
 8009c10:	8c05c83a 	sub	r2,r17,r16
 8009c14:	10c00430 	cmpltui	r3,r2,16
 8009c18:	3180004c 	andi	r6,r6,1
 8009c1c:	18004926 	beq	r3,zero,8009d44 <_realloc_r+0x294>
 8009c20:	898cb03a 	or	r6,r17,r6
 8009c24:	91800115 	stw	r6,4(r18)
 8009c28:	a0800117 	ldw	r2,4(r20)
 8009c2c:	10800054 	ori	r2,r2,1
 8009c30:	a0800115 	stw	r2,4(r20)
 8009c34:	a809883a 	mov	r4,r21
 8009c38:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8009c3c:	b027883a 	mov	r19,r22
 8009c40:	00000606 	br	8009c5c <_realloc_r+0x1ac>
 8009c44:	04000404 	movi	r16,16
 8009c48:	00c00404 	movi	r3,16
 8009c4c:	84ffb02e 	bgeu	r16,r19,8009b10 <_realloc_r+0x60>
 8009c50:	00800304 	movi	r2,12
 8009c54:	a8800015 	stw	r2,0(r21)
 8009c58:	0027883a 	mov	r19,zero
 8009c5c:	9805883a 	mov	r2,r19
 8009c60:	dfc00a17 	ldw	ra,40(sp)
 8009c64:	df000917 	ldw	fp,36(sp)
 8009c68:	ddc00817 	ldw	r23,32(sp)
 8009c6c:	dd800717 	ldw	r22,28(sp)
 8009c70:	dd400617 	ldw	r21,24(sp)
 8009c74:	dd000517 	ldw	r20,20(sp)
 8009c78:	dcc00417 	ldw	r19,16(sp)
 8009c7c:	dc800317 	ldw	r18,12(sp)
 8009c80:	dc400217 	ldw	r17,8(sp)
 8009c84:	dc000117 	ldw	r16,4(sp)
 8009c88:	dec00b04 	addi	sp,sp,44
 8009c8c:	f800283a 	ret
 8009c90:	1080004c 	andi	r2,r2,1
 8009c94:	10007826 	beq	r2,zero,8009e78 <_realloc_r+0x3c8>
 8009c98:	980b883a 	mov	r5,r19
 8009c9c:	a809883a 	mov	r4,r21
 8009ca0:	8007d580 	call	8007d58 <_malloc_r>
 8009ca4:	1027883a 	mov	r19,r2
 8009ca8:	10001626 	beq	r2,zero,8009d04 <_realloc_r+0x254>
 8009cac:	b0bfff17 	ldw	r2,-4(r22)
 8009cb0:	013fff84 	movi	r4,-2
 8009cb4:	98fffe04 	addi	r3,r19,-8
 8009cb8:	1104703a 	and	r2,r2,r4
 8009cbc:	9085883a 	add	r2,r18,r2
 8009cc0:	10c06726 	beq	r2,r3,8009e60 <_realloc_r+0x3b0>
 8009cc4:	89bfff04 	addi	r6,r17,-4
 8009cc8:	30800968 	cmpgeui	r2,r6,37
 8009ccc:	1000761e 	bne	r2,zero,8009ea8 <_realloc_r+0x3f8>
 8009cd0:	30800530 	cmpltui	r2,r6,20
 8009cd4:	b1000017 	ldw	r4,0(r22)
 8009cd8:	10003726 	beq	r2,zero,8009db8 <_realloc_r+0x308>
 8009cdc:	9805883a 	mov	r2,r19
 8009ce0:	b007883a 	mov	r3,r22
 8009ce4:	11000015 	stw	r4,0(r2)
 8009ce8:	19000117 	ldw	r4,4(r3)
 8009cec:	11000115 	stw	r4,4(r2)
 8009cf0:	18c00217 	ldw	r3,8(r3)
 8009cf4:	10c00215 	stw	r3,8(r2)
 8009cf8:	b00b883a 	mov	r5,r22
 8009cfc:	a809883a 	mov	r4,r21
 8009d00:	800723c0 	call	800723c <_free_r>
 8009d04:	a809883a 	mov	r4,r21
 8009d08:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8009d0c:	003fd306 	br	8009c5c <_realloc_r+0x1ac>
 8009d10:	300b883a 	mov	r5,r6
 8009d14:	dfc00a17 	ldw	ra,40(sp)
 8009d18:	df000917 	ldw	fp,36(sp)
 8009d1c:	ddc00817 	ldw	r23,32(sp)
 8009d20:	dd800717 	ldw	r22,28(sp)
 8009d24:	dd400617 	ldw	r21,24(sp)
 8009d28:	dd000517 	ldw	r20,20(sp)
 8009d2c:	dcc00417 	ldw	r19,16(sp)
 8009d30:	dc800317 	ldw	r18,12(sp)
 8009d34:	dc400217 	ldw	r17,8(sp)
 8009d38:	dc000117 	ldw	r16,4(sp)
 8009d3c:	dec00b04 	addi	sp,sp,44
 8009d40:	8007d581 	jmpi	8007d58 <_malloc_r>
 8009d44:	340cb03a 	or	r6,r6,r16
 8009d48:	91800115 	stw	r6,4(r18)
 8009d4c:	940b883a 	add	r5,r18,r16
 8009d50:	10800054 	ori	r2,r2,1
 8009d54:	28800115 	stw	r2,4(r5)
 8009d58:	a0800117 	ldw	r2,4(r20)
 8009d5c:	29400204 	addi	r5,r5,8
 8009d60:	a809883a 	mov	r4,r21
 8009d64:	10800054 	ori	r2,r2,1
 8009d68:	a0800115 	stw	r2,4(r20)
 8009d6c:	800723c0 	call	800723c <_free_r>
 8009d70:	003fb006 	br	8009c34 <_realloc_r+0x184>
 8009d74:	2148703a 	and	r4,r4,r5
 8009d78:	890b883a 	add	r5,r17,r4
 8009d7c:	81800404 	addi	r6,r16,16
 8009d80:	29bf7716 	blt	r5,r6,8009b60 <_realloc_r+0xb0>
 8009d84:	9425883a 	add	r18,r18,r16
 8009d88:	2c05c83a 	sub	r2,r5,r16
 8009d8c:	e4800215 	stw	r18,8(fp)
 8009d90:	10800054 	ori	r2,r2,1
 8009d94:	90800115 	stw	r2,4(r18)
 8009d98:	b0bfff17 	ldw	r2,-4(r22)
 8009d9c:	a809883a 	mov	r4,r21
 8009da0:	b027883a 	mov	r19,r22
 8009da4:	1080004c 	andi	r2,r2,1
 8009da8:	1420b03a 	or	r16,r2,r16
 8009dac:	b43fff15 	stw	r16,-4(r22)
 8009db0:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8009db4:	003fa906 	br	8009c5c <_realloc_r+0x1ac>
 8009db8:	99000015 	stw	r4,0(r19)
 8009dbc:	b0c00117 	ldw	r3,4(r22)
 8009dc0:	30800728 	cmpgeui	r2,r6,28
 8009dc4:	98c00115 	stw	r3,4(r19)
 8009dc8:	1000611e 	bne	r2,zero,8009f50 <_realloc_r+0x4a0>
 8009dcc:	b0c00204 	addi	r3,r22,8
 8009dd0:	98800204 	addi	r2,r19,8
 8009dd4:	b1000217 	ldw	r4,8(r22)
 8009dd8:	003fc206 	br	8009ce4 <_realloc_r+0x234>
 8009ddc:	a0800317 	ldw	r2,12(r20)
 8009de0:	a0c00217 	ldw	r3,8(r20)
 8009de4:	89bfff04 	addi	r6,r17,-4
 8009de8:	31000968 	cmpgeui	r4,r6,37
 8009dec:	18800315 	stw	r2,12(r3)
 8009df0:	10c00215 	stw	r3,8(r2)
 8009df4:	38c00217 	ldw	r3,8(r7)
 8009df8:	38800317 	ldw	r2,12(r7)
 8009dfc:	3a000204 	addi	r8,r7,8
 8009e00:	3de9883a 	add	r20,r7,r23
 8009e04:	18800315 	stw	r2,12(r3)
 8009e08:	10c00215 	stw	r3,8(r2)
 8009e0c:	20006f1e 	bne	r4,zero,8009fcc <_realloc_r+0x51c>
 8009e10:	30800530 	cmpltui	r2,r6,20
 8009e14:	b0c00017 	ldw	r3,0(r22)
 8009e18:	10006a1e 	bne	r2,zero,8009fc4 <_realloc_r+0x514>
 8009e1c:	38c00215 	stw	r3,8(r7)
 8009e20:	b0c00117 	ldw	r3,4(r22)
 8009e24:	30800728 	cmpgeui	r2,r6,28
 8009e28:	38c00315 	stw	r3,12(r7)
 8009e2c:	10007a1e 	bne	r2,zero,800a018 <_realloc_r+0x568>
 8009e30:	b0c00217 	ldw	r3,8(r22)
 8009e34:	38800404 	addi	r2,r7,16
 8009e38:	b5800204 	addi	r22,r22,8
 8009e3c:	10c00015 	stw	r3,0(r2)
 8009e40:	b0c00117 	ldw	r3,4(r22)
 8009e44:	b823883a 	mov	r17,r23
 8009e48:	3825883a 	mov	r18,r7
 8009e4c:	10c00115 	stw	r3,4(r2)
 8009e50:	b0c00217 	ldw	r3,8(r22)
 8009e54:	402d883a 	mov	r22,r8
 8009e58:	10c00215 	stw	r3,8(r2)
 8009e5c:	003f6b06 	br	8009c0c <_realloc_r+0x15c>
 8009e60:	98bfff17 	ldw	r2,-4(r19)
 8009e64:	00ffff04 	movi	r3,-4
 8009e68:	10c4703a 	and	r2,r2,r3
 8009e6c:	88a3883a 	add	r17,r17,r2
 8009e70:	9469883a 	add	r20,r18,r17
 8009e74:	003f6506 	br	8009c0c <_realloc_r+0x15c>
 8009e78:	b1fffe17 	ldw	r7,-8(r22)
 8009e7c:	91cfc83a 	sub	r7,r18,r7
 8009e80:	39000117 	ldw	r4,4(r7)
 8009e84:	214a703a 	and	r5,r4,r5
 8009e88:	003f4106 	br	8009b90 <_realloc_r+0xe0>
 8009e8c:	a0800317 	ldw	r2,12(r20)
 8009e90:	a0c00217 	ldw	r3,8(r20)
 8009e94:	2823883a 	mov	r17,r5
 8009e98:	9169883a 	add	r20,r18,r5
 8009e9c:	18800315 	stw	r2,12(r3)
 8009ea0:	10c00215 	stw	r3,8(r2)
 8009ea4:	003f5906 	br	8009c0c <_realloc_r+0x15c>
 8009ea8:	b00b883a 	mov	r5,r22
 8009eac:	9809883a 	mov	r4,r19
 8009eb0:	80087340 	call	8008734 <memmove>
 8009eb4:	003f9006 	br	8009cf8 <_realloc_r+0x248>
 8009eb8:	80800404 	addi	r2,r16,16
 8009ebc:	b8bf3416 	blt	r23,r2,8009b90 <_realloc_r+0xe0>
 8009ec0:	38800317 	ldw	r2,12(r7)
 8009ec4:	38c00217 	ldw	r3,8(r7)
 8009ec8:	89bfff04 	addi	r6,r17,-4
 8009ecc:	31000968 	cmpgeui	r4,r6,37
 8009ed0:	18800315 	stw	r2,12(r3)
 8009ed4:	10c00215 	stw	r3,8(r2)
 8009ed8:	3cc00204 	addi	r19,r7,8
 8009edc:	20005a1e 	bne	r4,zero,800a048 <_realloc_r+0x598>
 8009ee0:	30800530 	cmpltui	r2,r6,20
 8009ee4:	b0c00017 	ldw	r3,0(r22)
 8009ee8:	1000551e 	bne	r2,zero,800a040 <_realloc_r+0x590>
 8009eec:	38c00215 	stw	r3,8(r7)
 8009ef0:	b0c00117 	ldw	r3,4(r22)
 8009ef4:	30800728 	cmpgeui	r2,r6,28
 8009ef8:	38c00315 	stw	r3,12(r7)
 8009efc:	1000661e 	bne	r2,zero,800a098 <_realloc_r+0x5e8>
 8009f00:	b0c00217 	ldw	r3,8(r22)
 8009f04:	38800404 	addi	r2,r7,16
 8009f08:	b5800204 	addi	r22,r22,8
 8009f0c:	10c00015 	stw	r3,0(r2)
 8009f10:	b0c00117 	ldw	r3,4(r22)
 8009f14:	10c00115 	stw	r3,4(r2)
 8009f18:	b0c00217 	ldw	r3,8(r22)
 8009f1c:	10c00215 	stw	r3,8(r2)
 8009f20:	3c07883a 	add	r3,r7,r16
 8009f24:	bc05c83a 	sub	r2,r23,r16
 8009f28:	e0c00215 	stw	r3,8(fp)
 8009f2c:	10800054 	ori	r2,r2,1
 8009f30:	18800115 	stw	r2,4(r3)
 8009f34:	38800117 	ldw	r2,4(r7)
 8009f38:	a809883a 	mov	r4,r21
 8009f3c:	1080004c 	andi	r2,r2,1
 8009f40:	1420b03a 	or	r16,r2,r16
 8009f44:	3c000115 	stw	r16,4(r7)
 8009f48:	800fcc40 	call	800fcc4 <__malloc_unlock>
 8009f4c:	003f4306 	br	8009c5c <_realloc_r+0x1ac>
 8009f50:	b0800217 	ldw	r2,8(r22)
 8009f54:	31800920 	cmpeqi	r6,r6,36
 8009f58:	98800215 	stw	r2,8(r19)
 8009f5c:	b0800317 	ldw	r2,12(r22)
 8009f60:	98800315 	stw	r2,12(r19)
 8009f64:	3000061e 	bne	r6,zero,8009f80 <_realloc_r+0x4d0>
 8009f68:	b0c00404 	addi	r3,r22,16
 8009f6c:	98800404 	addi	r2,r19,16
 8009f70:	b1000417 	ldw	r4,16(r22)
 8009f74:	003f5b06 	br	8009ce4 <_realloc_r+0x234>
 8009f78:	1805883a 	mov	r2,r3
 8009f7c:	003f1b06 	br	8009bec <_realloc_r+0x13c>
 8009f80:	b1000417 	ldw	r4,16(r22)
 8009f84:	b0c00604 	addi	r3,r22,24
 8009f88:	98800604 	addi	r2,r19,24
 8009f8c:	99000415 	stw	r4,16(r19)
 8009f90:	b1000517 	ldw	r4,20(r22)
 8009f94:	99000515 	stw	r4,20(r19)
 8009f98:	b1000617 	ldw	r4,24(r22)
 8009f9c:	003f5106 	br	8009ce4 <_realloc_r+0x234>
 8009fa0:	b00b883a 	mov	r5,r22
 8009fa4:	1809883a 	mov	r4,r3
 8009fa8:	d9c00015 	stw	r7,0(sp)
 8009fac:	80087340 	call	8008734 <memmove>
 8009fb0:	d9c00017 	ldw	r7,0(sp)
 8009fb4:	102d883a 	mov	r22,r2
 8009fb8:	b823883a 	mov	r17,r23
 8009fbc:	3825883a 	mov	r18,r7
 8009fc0:	003f1206 	br	8009c0c <_realloc_r+0x15c>
 8009fc4:	4005883a 	mov	r2,r8
 8009fc8:	003f9c06 	br	8009e3c <_realloc_r+0x38c>
 8009fcc:	b00b883a 	mov	r5,r22
 8009fd0:	4009883a 	mov	r4,r8
 8009fd4:	d9c00015 	stw	r7,0(sp)
 8009fd8:	80087340 	call	8008734 <memmove>
 8009fdc:	d9c00017 	ldw	r7,0(sp)
 8009fe0:	102d883a 	mov	r22,r2
 8009fe4:	b823883a 	mov	r17,r23
 8009fe8:	3825883a 	mov	r18,r7
 8009fec:	003f0706 	br	8009c0c <_realloc_r+0x15c>
 8009ff0:	b0800217 	ldw	r2,8(r22)
 8009ff4:	31800920 	cmpeqi	r6,r6,36
 8009ff8:	38800415 	stw	r2,16(r7)
 8009ffc:	b0800317 	ldw	r2,12(r22)
 800a000:	38800515 	stw	r2,20(r7)
 800a004:	b1000417 	ldw	r4,16(r22)
 800a008:	3000151e 	bne	r6,zero,800a060 <_realloc_r+0x5b0>
 800a00c:	38800604 	addi	r2,r7,24
 800a010:	b5800404 	addi	r22,r22,16
 800a014:	003ef506 	br	8009bec <_realloc_r+0x13c>
 800a018:	b0800217 	ldw	r2,8(r22)
 800a01c:	31800920 	cmpeqi	r6,r6,36
 800a020:	38800415 	stw	r2,16(r7)
 800a024:	b0800317 	ldw	r2,12(r22)
 800a028:	38800515 	stw	r2,20(r7)
 800a02c:	b0c00417 	ldw	r3,16(r22)
 800a030:	3000121e 	bne	r6,zero,800a07c <_realloc_r+0x5cc>
 800a034:	38800604 	addi	r2,r7,24
 800a038:	b5800404 	addi	r22,r22,16
 800a03c:	003f7f06 	br	8009e3c <_realloc_r+0x38c>
 800a040:	9805883a 	mov	r2,r19
 800a044:	003fb106 	br	8009f0c <_realloc_r+0x45c>
 800a048:	b00b883a 	mov	r5,r22
 800a04c:	9809883a 	mov	r4,r19
 800a050:	d9c00015 	stw	r7,0(sp)
 800a054:	80087340 	call	8008734 <memmove>
 800a058:	d9c00017 	ldw	r7,0(sp)
 800a05c:	003fb006 	br	8009f20 <_realloc_r+0x470>
 800a060:	b5800604 	addi	r22,r22,24
 800a064:	39000615 	stw	r4,24(r7)
 800a068:	b13fff17 	ldw	r4,-4(r22)
 800a06c:	38800804 	addi	r2,r7,32
 800a070:	39000715 	stw	r4,28(r7)
 800a074:	b1000017 	ldw	r4,0(r22)
 800a078:	003edc06 	br	8009bec <_realloc_r+0x13c>
 800a07c:	b5800604 	addi	r22,r22,24
 800a080:	38c00615 	stw	r3,24(r7)
 800a084:	b0ffff17 	ldw	r3,-4(r22)
 800a088:	38800804 	addi	r2,r7,32
 800a08c:	38c00715 	stw	r3,28(r7)
 800a090:	b0c00017 	ldw	r3,0(r22)
 800a094:	003f6906 	br	8009e3c <_realloc_r+0x38c>
 800a098:	b0800217 	ldw	r2,8(r22)
 800a09c:	31800920 	cmpeqi	r6,r6,36
 800a0a0:	38800415 	stw	r2,16(r7)
 800a0a4:	b0800317 	ldw	r2,12(r22)
 800a0a8:	38800515 	stw	r2,20(r7)
 800a0ac:	b0c00417 	ldw	r3,16(r22)
 800a0b0:	3000031e 	bne	r6,zero,800a0c0 <_realloc_r+0x610>
 800a0b4:	38800604 	addi	r2,r7,24
 800a0b8:	b5800404 	addi	r22,r22,16
 800a0bc:	003f9306 	br	8009f0c <_realloc_r+0x45c>
 800a0c0:	b5800604 	addi	r22,r22,24
 800a0c4:	38c00615 	stw	r3,24(r7)
 800a0c8:	b0ffff17 	ldw	r3,-4(r22)
 800a0cc:	38800804 	addi	r2,r7,32
 800a0d0:	38c00715 	stw	r3,28(r7)
 800a0d4:	b0c00017 	ldw	r3,0(r22)
 800a0d8:	003f8c06 	br	8009f0c <_realloc_r+0x45c>

0800a0dc <_sbrk_r>:
 800a0dc:	defffe04 	addi	sp,sp,-8
 800a0e0:	dc000015 	stw	r16,0(sp)
 800a0e4:	00820074 	movhi	r2,2049
 800a0e8:	2021883a 	mov	r16,r4
 800a0ec:	2809883a 	mov	r4,r5
 800a0f0:	dfc00115 	stw	ra,4(sp)
 800a0f4:	10185e15 	stw	zero,24952(r2)
 800a0f8:	800fe9c0 	call	800fe9c <sbrk>
 800a0fc:	10ffffd8 	cmpnei	r3,r2,-1
 800a100:	18000426 	beq	r3,zero,800a114 <_sbrk_r+0x38>
 800a104:	dfc00117 	ldw	ra,4(sp)
 800a108:	dc000017 	ldw	r16,0(sp)
 800a10c:	dec00204 	addi	sp,sp,8
 800a110:	f800283a 	ret
 800a114:	00c20074 	movhi	r3,2049
 800a118:	18d85e17 	ldw	r3,24952(r3)
 800a11c:	183ff926 	beq	r3,zero,800a104 <_sbrk_r+0x28>
 800a120:	80c00015 	stw	r3,0(r16)
 800a124:	dfc00117 	ldw	ra,4(sp)
 800a128:	dc000017 	ldw	r16,0(sp)
 800a12c:	dec00204 	addi	sp,sp,8
 800a130:	f800283a 	ret

0800a134 <__sread>:
 800a134:	defffe04 	addi	sp,sp,-8
 800a138:	dc000015 	stw	r16,0(sp)
 800a13c:	2821883a 	mov	r16,r5
 800a140:	2940038f 	ldh	r5,14(r5)
 800a144:	dfc00115 	stw	ra,4(sp)
 800a148:	800bf6c0 	call	800bf6c <_read_r>
 800a14c:	10000716 	blt	r2,zero,800a16c <__sread+0x38>
 800a150:	80c01417 	ldw	r3,80(r16)
 800a154:	1887883a 	add	r3,r3,r2
 800a158:	80c01415 	stw	r3,80(r16)
 800a15c:	dfc00117 	ldw	ra,4(sp)
 800a160:	dc000017 	ldw	r16,0(sp)
 800a164:	dec00204 	addi	sp,sp,8
 800a168:	f800283a 	ret
 800a16c:	80c0030b 	ldhu	r3,12(r16)
 800a170:	18fbffcc 	andi	r3,r3,61439
 800a174:	80c0030d 	sth	r3,12(r16)
 800a178:	dfc00117 	ldw	ra,4(sp)
 800a17c:	dc000017 	ldw	r16,0(sp)
 800a180:	dec00204 	addi	sp,sp,8
 800a184:	f800283a 	ret

0800a188 <__seofread>:
 800a188:	0005883a 	mov	r2,zero
 800a18c:	f800283a 	ret

0800a190 <__swrite>:
 800a190:	2880030b 	ldhu	r2,12(r5)
 800a194:	defffb04 	addi	sp,sp,-20
 800a198:	dcc00315 	stw	r19,12(sp)
 800a19c:	dc800215 	stw	r18,8(sp)
 800a1a0:	dc400115 	stw	r17,4(sp)
 800a1a4:	dc000015 	stw	r16,0(sp)
 800a1a8:	dfc00415 	stw	ra,16(sp)
 800a1ac:	10c0400c 	andi	r3,r2,256
 800a1b0:	2821883a 	mov	r16,r5
 800a1b4:	2023883a 	mov	r17,r4
 800a1b8:	3025883a 	mov	r18,r6
 800a1bc:	3827883a 	mov	r19,r7
 800a1c0:	2940038f 	ldh	r5,14(r5)
 800a1c4:	18000c1e 	bne	r3,zero,800a1f8 <__swrite+0x68>
 800a1c8:	10bbffcc 	andi	r2,r2,61439
 800a1cc:	980f883a 	mov	r7,r19
 800a1d0:	900d883a 	mov	r6,r18
 800a1d4:	8809883a 	mov	r4,r17
 800a1d8:	8080030d 	sth	r2,12(r16)
 800a1dc:	dfc00417 	ldw	ra,16(sp)
 800a1e0:	dcc00317 	ldw	r19,12(sp)
 800a1e4:	dc800217 	ldw	r18,8(sp)
 800a1e8:	dc400117 	ldw	r17,4(sp)
 800a1ec:	dc000017 	ldw	r16,0(sp)
 800a1f0:	dec00504 	addi	sp,sp,20
 800a1f4:	800b8f01 	jmpi	800b8f0 <_write_r>
 800a1f8:	01c00084 	movi	r7,2
 800a1fc:	000d883a 	mov	r6,zero
 800a200:	800beb80 	call	800beb8 <_lseek_r>
 800a204:	8080030b 	ldhu	r2,12(r16)
 800a208:	8140038f 	ldh	r5,14(r16)
 800a20c:	003fee06 	br	800a1c8 <__swrite+0x38>

0800a210 <__sseek>:
 800a210:	defffe04 	addi	sp,sp,-8
 800a214:	dc000015 	stw	r16,0(sp)
 800a218:	2821883a 	mov	r16,r5
 800a21c:	2940038f 	ldh	r5,14(r5)
 800a220:	dfc00115 	stw	ra,4(sp)
 800a224:	800beb80 	call	800beb8 <_lseek_r>
 800a228:	10ffffd8 	cmpnei	r3,r2,-1
 800a22c:	18000826 	beq	r3,zero,800a250 <__sseek+0x40>
 800a230:	80c0030b 	ldhu	r3,12(r16)
 800a234:	80801415 	stw	r2,80(r16)
 800a238:	18c40014 	ori	r3,r3,4096
 800a23c:	80c0030d 	sth	r3,12(r16)
 800a240:	dfc00117 	ldw	ra,4(sp)
 800a244:	dc000017 	ldw	r16,0(sp)
 800a248:	dec00204 	addi	sp,sp,8
 800a24c:	f800283a 	ret
 800a250:	80c0030b 	ldhu	r3,12(r16)
 800a254:	18fbffcc 	andi	r3,r3,61439
 800a258:	80c0030d 	sth	r3,12(r16)
 800a25c:	dfc00117 	ldw	ra,4(sp)
 800a260:	dc000017 	ldw	r16,0(sp)
 800a264:	dec00204 	addi	sp,sp,8
 800a268:	f800283a 	ret

0800a26c <__sclose>:
 800a26c:	2940038f 	ldh	r5,14(r5)
 800a270:	800b9541 	jmpi	800b954 <_close_r>

0800a274 <__sprint_r.part.0>:
 800a274:	28801917 	ldw	r2,100(r5)
 800a278:	defff604 	addi	sp,sp,-40
 800a27c:	dd000415 	stw	r20,16(sp)
 800a280:	dfc00915 	stw	ra,36(sp)
 800a284:	df000815 	stw	fp,32(sp)
 800a288:	ddc00715 	stw	r23,28(sp)
 800a28c:	dd800615 	stw	r22,24(sp)
 800a290:	dd400515 	stw	r21,20(sp)
 800a294:	dcc00315 	stw	r19,12(sp)
 800a298:	dc800215 	stw	r18,8(sp)
 800a29c:	dc400115 	stw	r17,4(sp)
 800a2a0:	dc000015 	stw	r16,0(sp)
 800a2a4:	1088000c 	andi	r2,r2,8192
 800a2a8:	3029883a 	mov	r20,r6
 800a2ac:	10002c26 	beq	r2,zero,800a360 <__sprint_r.part.0+0xec>
 800a2b0:	30800217 	ldw	r2,8(r6)
 800a2b4:	2823883a 	mov	r17,r5
 800a2b8:	2027883a 	mov	r19,r4
 800a2bc:	35400017 	ldw	r21,0(r6)
 800a2c0:	05ffff04 	movi	r23,-4
 800a2c4:	10002426 	beq	r2,zero,800a358 <__sprint_r.part.0+0xe4>
 800a2c8:	ad800117 	ldw	r22,4(r21)
 800a2cc:	ac000017 	ldw	r16,0(r21)
 800a2d0:	b024d0ba 	srli	r18,r22,2
 800a2d4:	90001b26 	beq	r18,zero,800a344 <__sprint_r.part.0+0xd0>
 800a2d8:	0039883a 	mov	fp,zero
 800a2dc:	00000206 	br	800a2e8 <__sprint_r.part.0+0x74>
 800a2e0:	84000104 	addi	r16,r16,4
 800a2e4:	97001626 	beq	r18,fp,800a340 <__sprint_r.part.0+0xcc>
 800a2e8:	81400017 	ldw	r5,0(r16)
 800a2ec:	880d883a 	mov	r6,r17
 800a2f0:	9809883a 	mov	r4,r19
 800a2f4:	800bcd00 	call	800bcd0 <_fputwc_r>
 800a2f8:	10bfffe0 	cmpeqi	r2,r2,-1
 800a2fc:	e7000044 	addi	fp,fp,1
 800a300:	103ff726 	beq	r2,zero,800a2e0 <__sprint_r.part.0+0x6c>
 800a304:	00bfffc4 	movi	r2,-1
 800a308:	a0000215 	stw	zero,8(r20)
 800a30c:	a0000115 	stw	zero,4(r20)
 800a310:	dfc00917 	ldw	ra,36(sp)
 800a314:	df000817 	ldw	fp,32(sp)
 800a318:	ddc00717 	ldw	r23,28(sp)
 800a31c:	dd800617 	ldw	r22,24(sp)
 800a320:	dd400517 	ldw	r21,20(sp)
 800a324:	dd000417 	ldw	r20,16(sp)
 800a328:	dcc00317 	ldw	r19,12(sp)
 800a32c:	dc800217 	ldw	r18,8(sp)
 800a330:	dc400117 	ldw	r17,4(sp)
 800a334:	dc000017 	ldw	r16,0(sp)
 800a338:	dec00a04 	addi	sp,sp,40
 800a33c:	f800283a 	ret
 800a340:	a0800217 	ldw	r2,8(r20)
 800a344:	b5ec703a 	and	r22,r22,r23
 800a348:	1585c83a 	sub	r2,r2,r22
 800a34c:	a0800215 	stw	r2,8(r20)
 800a350:	ad400204 	addi	r21,r21,8
 800a354:	103fdc1e 	bne	r2,zero,800a2c8 <__sprint_r.part.0+0x54>
 800a358:	0005883a 	mov	r2,zero
 800a35c:	003fea06 	br	800a308 <__sprint_r.part.0+0x94>
 800a360:	80075380 	call	8007538 <__sfvwrite_r>
 800a364:	003fe806 	br	800a308 <__sprint_r.part.0+0x94>

0800a368 <__sprint_r>:
 800a368:	30c00217 	ldw	r3,8(r6)
 800a36c:	18000126 	beq	r3,zero,800a374 <__sprint_r+0xc>
 800a370:	800a2741 	jmpi	800a274 <__sprint_r.part.0>
 800a374:	30000115 	stw	zero,4(r6)
 800a378:	0005883a 	mov	r2,zero
 800a37c:	f800283a 	ret

0800a380 <___vfiprintf_internal_r>:
 800a380:	deffd004 	addi	sp,sp,-192
 800a384:	df002e15 	stw	fp,184(sp)
 800a388:	dcc02915 	stw	r19,164(sp)
 800a38c:	dc802815 	stw	r18,160(sp)
 800a390:	dfc02f15 	stw	ra,188(sp)
 800a394:	ddc02d15 	stw	r23,180(sp)
 800a398:	dd802c15 	stw	r22,176(sp)
 800a39c:	dd402b15 	stw	r21,172(sp)
 800a3a0:	dd002a15 	stw	r20,168(sp)
 800a3a4:	dc402715 	stw	r17,156(sp)
 800a3a8:	dc002615 	stw	r16,152(sp)
 800a3ac:	d9c00315 	stw	r7,12(sp)
 800a3b0:	2027883a 	mov	r19,r4
 800a3b4:	2825883a 	mov	r18,r5
 800a3b8:	3039883a 	mov	fp,r6
 800a3bc:	20000226 	beq	r4,zero,800a3c8 <___vfiprintf_internal_r+0x48>
 800a3c0:	20800e17 	ldw	r2,56(r4)
 800a3c4:	1002ba26 	beq	r2,zero,800aeb0 <___vfiprintf_internal_r+0xb30>
 800a3c8:	9080030b 	ldhu	r2,12(r18)
 800a3cc:	10c8000c 	andi	r3,r2,8192
 800a3d0:	1800061e 	bne	r3,zero,800a3ec <___vfiprintf_internal_r+0x6c>
 800a3d4:	90c01917 	ldw	r3,100(r18)
 800a3d8:	0137ffc4 	movi	r4,-8193
 800a3dc:	10880014 	ori	r2,r2,8192
 800a3e0:	1906703a 	and	r3,r3,r4
 800a3e4:	9080030d 	sth	r2,12(r18)
 800a3e8:	90c01915 	stw	r3,100(r18)
 800a3ec:	10c0020c 	andi	r3,r2,8
 800a3f0:	18009426 	beq	r3,zero,800a644 <___vfiprintf_internal_r+0x2c4>
 800a3f4:	90c00417 	ldw	r3,16(r18)
 800a3f8:	18009226 	beq	r3,zero,800a644 <___vfiprintf_internal_r+0x2c4>
 800a3fc:	1080068c 	andi	r2,r2,26
 800a400:	10800298 	cmpnei	r2,r2,10
 800a404:	10009726 	beq	r2,zero,800a664 <___vfiprintf_internal_r+0x2e4>
 800a408:	dc401604 	addi	r17,sp,88
 800a40c:	dc400915 	stw	r17,36(sp)
 800a410:	d8000b15 	stw	zero,44(sp)
 800a414:	d8000a15 	stw	zero,40(sp)
 800a418:	8811883a 	mov	r8,r17
 800a41c:	d8000415 	stw	zero,16(sp)
 800a420:	d8000015 	stw	zero,0(sp)
 800a424:	e0800007 	ldb	r2,0(fp)
 800a428:	1000a226 	beq	r2,zero,800a6b4 <___vfiprintf_internal_r+0x334>
 800a42c:	10800960 	cmpeqi	r2,r2,37
 800a430:	1003eb1e 	bne	r2,zero,800b3e0 <___vfiprintf_internal_r+0x1060>
 800a434:	e021883a 	mov	r16,fp
 800a438:	00000206 	br	800a444 <___vfiprintf_internal_r+0xc4>
 800a43c:	18009226 	beq	r3,zero,800a688 <___vfiprintf_internal_r+0x308>
 800a440:	a021883a 	mov	r16,r20
 800a444:	80800047 	ldb	r2,1(r16)
 800a448:	85000044 	addi	r20,r16,1
 800a44c:	10c00958 	cmpnei	r3,r2,37
 800a450:	103ffa1e 	bne	r2,zero,800a43c <___vfiprintf_internal_r+0xbc>
 800a454:	a72bc83a 	sub	r21,r20,fp
 800a458:	a8009626 	beq	r21,zero,800a6b4 <___vfiprintf_internal_r+0x334>
 800a45c:	d8c00b17 	ldw	r3,44(sp)
 800a460:	d8800a17 	ldw	r2,40(sp)
 800a464:	47000015 	stw	fp,0(r8)
 800a468:	a8c7883a 	add	r3,r21,r3
 800a46c:	10800044 	addi	r2,r2,1
 800a470:	d8800a15 	stw	r2,40(sp)
 800a474:	45400115 	stw	r21,4(r8)
 800a478:	d8c00b15 	stw	r3,44(sp)
 800a47c:	10800208 	cmpgei	r2,r2,8
 800a480:	1000841e 	bne	r2,zero,800a694 <___vfiprintf_internal_r+0x314>
 800a484:	42000204 	addi	r8,r8,8
 800a488:	d8c00017 	ldw	r3,0(sp)
 800a48c:	80800047 	ldb	r2,1(r16)
 800a490:	1d47883a 	add	r3,r3,r21
 800a494:	d8c00015 	stw	r3,0(sp)
 800a498:	10008626 	beq	r2,zero,800a6b4 <___vfiprintf_internal_r+0x334>
 800a49c:	a0800047 	ldb	r2,1(r20)
 800a4a0:	a7000044 	addi	fp,r20,1
 800a4a4:	d8000845 	stb	zero,33(sp)
 800a4a8:	000b883a 	mov	r5,zero
 800a4ac:	000d883a 	mov	r6,zero
 800a4b0:	027fffc4 	movi	r9,-1
 800a4b4:	0021883a 	mov	r16,zero
 800a4b8:	0019883a 	mov	r12,zero
 800a4bc:	e7000044 	addi	fp,fp,1
 800a4c0:	10fff804 	addi	r3,r2,-32
 800a4c4:	19001668 	cmpgeui	r4,r3,89
 800a4c8:	20009e1e 	bne	r4,zero,800a744 <___vfiprintf_internal_r+0x3c4>
 800a4cc:	180690ba 	slli	r3,r3,2
 800a4d0:	01020074 	movhi	r4,2049
 800a4d4:	1909883a 	add	r4,r3,r4
 800a4d8:	20e93817 	ldw	r3,-23328(r4)
 800a4dc:	1800683a 	jmp	r3
 800a4e0:	0800a81c 	xori	zero,at,672
 800a4e4:	0800a744 	addi	zero,at,669
 800a4e8:	0800a744 	addi	zero,at,669
 800a4ec:	0800a810 	cmplti	zero,at,672
 800a4f0:	0800a744 	addi	zero,at,669
 800a4f4:	0800a744 	addi	zero,at,669
 800a4f8:	0800a744 	addi	zero,at,669
 800a4fc:	0800a744 	addi	zero,at,669
 800a500:	0800a744 	addi	zero,at,669
 800a504:	0800a744 	addi	zero,at,669
 800a508:	0800a7e8 	cmpgeui	zero,at,671
 800a50c:	0800a7d8 	cmpnei	zero,at,671
 800a510:	0800a744 	addi	zero,at,669
 800a514:	0800a7c0 	call	800a7c <__alt_mem_onchip_memory2_0+0x800a7c>
 800a518:	0800a774 	orhi	zero,at,669
 800a51c:	0800a744 	addi	zero,at,669
 800a520:	0800a768 	cmpgeui	zero,at,669
 800a524:	0800a70c 	andi	zero,at,668
 800a528:	0800a70c 	andi	zero,at,668
 800a52c:	0800a70c 	andi	zero,at,668
 800a530:	0800a70c 	andi	zero,at,668
 800a534:	0800a70c 	andi	zero,at,668
 800a538:	0800a70c 	andi	zero,at,668
 800a53c:	0800a70c 	andi	zero,at,668
 800a540:	0800a70c 	andi	zero,at,668
 800a544:	0800a70c 	andi	zero,at,668
 800a548:	0800a744 	addi	zero,at,669
 800a54c:	0800a744 	addi	zero,at,669
 800a550:	0800a744 	addi	zero,at,669
 800a554:	0800a744 	addi	zero,at,669
 800a558:	0800a744 	addi	zero,at,669
 800a55c:	0800a744 	addi	zero,at,669
 800a560:	0800a744 	addi	zero,at,669
 800a564:	0800a744 	addi	zero,at,669
 800a568:	0800a744 	addi	zero,at,669
 800a56c:	0800a744 	addi	zero,at,669
 800a570:	0800add8 	cmpnei	zero,at,695
 800a574:	0800a744 	addi	zero,at,669
 800a578:	0800a744 	addi	zero,at,669
 800a57c:	0800a744 	addi	zero,at,669
 800a580:	0800a744 	addi	zero,at,669
 800a584:	0800a744 	addi	zero,at,669
 800a588:	0800a744 	addi	zero,at,669
 800a58c:	0800a744 	addi	zero,at,669
 800a590:	0800a744 	addi	zero,at,669
 800a594:	0800a744 	addi	zero,at,669
 800a598:	0800a744 	addi	zero,at,669
 800a59c:	0800ad70 	cmpltui	zero,at,693
 800a5a0:	0800a744 	addi	zero,at,669
 800a5a4:	0800a744 	addi	zero,at,669
 800a5a8:	0800a744 	addi	zero,at,669
 800a5ac:	0800a744 	addi	zero,at,669
 800a5b0:	0800a744 	addi	zero,at,669
 800a5b4:	0800ada4 	muli	zero,at,694
 800a5b8:	0800a744 	addi	zero,at,669
 800a5bc:	0800a744 	addi	zero,at,669
 800a5c0:	0800a974 	orhi	zero,at,677
 800a5c4:	0800a744 	addi	zero,at,669
 800a5c8:	0800a744 	addi	zero,at,669
 800a5cc:	0800a744 	addi	zero,at,669
 800a5d0:	0800a744 	addi	zero,at,669
 800a5d4:	0800a744 	addi	zero,at,669
 800a5d8:	0800a744 	addi	zero,at,669
 800a5dc:	0800a744 	addi	zero,at,669
 800a5e0:	0800a744 	addi	zero,at,669
 800a5e4:	0800a744 	addi	zero,at,669
 800a5e8:	0800a744 	addi	zero,at,669
 800a5ec:	0800ab10 	cmplti	zero,at,684
 800a5f0:	0800aa9c 	xori	zero,at,682
 800a5f4:	0800a744 	addi	zero,at,669
 800a5f8:	0800a744 	addi	zero,at,669
 800a5fc:	0800a744 	addi	zero,at,669
 800a600:	0800a8a4 	muli	zero,at,674
 800a604:	0800aa9c 	xori	zero,at,682
 800a608:	0800a744 	addi	zero,at,669
 800a60c:	0800a744 	addi	zero,at,669
 800a610:	0800a890 	cmplti	zero,at,674
 800a614:	0800a744 	addi	zero,at,669
 800a618:	0800aa5c 	xori	zero,at,681
 800a61c:	0800a934 	orhi	zero,at,676
 800a620:	0800a8bc 	xorhi	zero,at,674
 800a624:	0800a8b0 	cmpltui	zero,at,674
 800a628:	0800a744 	addi	zero,at,669
 800a62c:	0800a9fc 	xorhi	zero,at,679
 800a630:	0800a744 	addi	zero,at,669
 800a634:	0800a9bc 	xorhi	zero,at,678
 800a638:	0800a744 	addi	zero,at,669
 800a63c:	0800a744 	addi	zero,at,669
 800a640:	0800a848 	cmpgei	zero,at,673
 800a644:	900b883a 	mov	r5,r18
 800a648:	9809883a 	mov	r4,r19
 800a64c:	80050c00 	call	80050c0 <__swsetup_r>
 800a650:	10040b1e 	bne	r2,zero,800b680 <___vfiprintf_internal_r+0x1300>
 800a654:	9080030b 	ldhu	r2,12(r18)
 800a658:	1080068c 	andi	r2,r2,26
 800a65c:	10800298 	cmpnei	r2,r2,10
 800a660:	103f691e 	bne	r2,zero,800a408 <___vfiprintf_internal_r+0x88>
 800a664:	9080038f 	ldh	r2,14(r18)
 800a668:	103f6716 	blt	r2,zero,800a408 <___vfiprintf_internal_r+0x88>
 800a66c:	d9c00317 	ldw	r7,12(sp)
 800a670:	e00d883a 	mov	r6,fp
 800a674:	900b883a 	mov	r5,r18
 800a678:	9809883a 	mov	r4,r19
 800a67c:	800b6d40 	call	800b6d4 <__sbprintf>
 800a680:	d8800015 	stw	r2,0(sp)
 800a684:	00001406 	br	800a6d8 <___vfiprintf_internal_r+0x358>
 800a688:	a72bc83a 	sub	r21,r20,fp
 800a68c:	a83f8326 	beq	r21,zero,800a49c <___vfiprintf_internal_r+0x11c>
 800a690:	003f7206 	br	800a45c <___vfiprintf_internal_r+0xdc>
 800a694:	18032f26 	beq	r3,zero,800b354 <___vfiprintf_internal_r+0xfd4>
 800a698:	d9800904 	addi	r6,sp,36
 800a69c:	900b883a 	mov	r5,r18
 800a6a0:	9809883a 	mov	r4,r19
 800a6a4:	800a2740 	call	800a274 <__sprint_r.part.0>
 800a6a8:	1000081e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800a6ac:	8811883a 	mov	r8,r17
 800a6b0:	003f7506 	br	800a488 <___vfiprintf_internal_r+0x108>
 800a6b4:	d8800b17 	ldw	r2,44(sp)
 800a6b8:	10000426 	beq	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800a6bc:	d9800904 	addi	r6,sp,36
 800a6c0:	900b883a 	mov	r5,r18
 800a6c4:	9809883a 	mov	r4,r19
 800a6c8:	800a2740 	call	800a274 <__sprint_r.part.0>
 800a6cc:	9080030b 	ldhu	r2,12(r18)
 800a6d0:	1080100c 	andi	r2,r2,64
 800a6d4:	1003ea1e 	bne	r2,zero,800b680 <___vfiprintf_internal_r+0x1300>
 800a6d8:	d8800017 	ldw	r2,0(sp)
 800a6dc:	dfc02f17 	ldw	ra,188(sp)
 800a6e0:	df002e17 	ldw	fp,184(sp)
 800a6e4:	ddc02d17 	ldw	r23,180(sp)
 800a6e8:	dd802c17 	ldw	r22,176(sp)
 800a6ec:	dd402b17 	ldw	r21,172(sp)
 800a6f0:	dd002a17 	ldw	r20,168(sp)
 800a6f4:	dcc02917 	ldw	r19,164(sp)
 800a6f8:	dc802817 	ldw	r18,160(sp)
 800a6fc:	dc402717 	ldw	r17,156(sp)
 800a700:	dc002617 	ldw	r16,152(sp)
 800a704:	dec03004 	addi	sp,sp,192
 800a708:	f800283a 	ret
 800a70c:	0021883a 	mov	r16,zero
 800a710:	113ff404 	addi	r4,r2,-48
 800a714:	800690ba 	slli	r3,r16,2
 800a718:	e7000044 	addi	fp,fp,1
 800a71c:	e0bfffc7 	ldb	r2,-1(fp)
 800a720:	1c21883a 	add	r16,r3,r16
 800a724:	8421883a 	add	r16,r16,r16
 800a728:	2421883a 	add	r16,r4,r16
 800a72c:	113ff404 	addi	r4,r2,-48
 800a730:	20c002b0 	cmpltui	r3,r4,10
 800a734:	183ff71e 	bne	r3,zero,800a714 <___vfiprintf_internal_r+0x394>
 800a738:	10fff804 	addi	r3,r2,-32
 800a73c:	19001668 	cmpgeui	r4,r3,89
 800a740:	203f6226 	beq	r4,zero,800a4cc <___vfiprintf_internal_r+0x14c>
 800a744:	29403fcc 	andi	r5,r5,255
 800a748:	2803ab1e 	bne	r5,zero,800b5f8 <___vfiprintf_internal_r+0x1278>
 800a74c:	103fd926 	beq	r2,zero,800a6b4 <___vfiprintf_internal_r+0x334>
 800a750:	d8800c05 	stb	r2,48(sp)
 800a754:	d8000845 	stb	zero,33(sp)
 800a758:	05400044 	movi	r21,1
 800a75c:	05800044 	movi	r22,1
 800a760:	ddc00c04 	addi	r23,sp,48
 800a764:	0000f306 	br	800ab34 <___vfiprintf_internal_r+0x7b4>
 800a768:	63002014 	ori	r12,r12,128
 800a76c:	e0800007 	ldb	r2,0(fp)
 800a770:	003f5206 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a774:	e0800007 	ldb	r2,0(fp)
 800a778:	e0c00044 	addi	r3,fp,1
 800a77c:	11000aa0 	cmpeqi	r4,r2,42
 800a780:	2003c21e 	bne	r4,zero,800b68c <___vfiprintf_internal_r+0x130c>
 800a784:	113ff404 	addi	r4,r2,-48
 800a788:	21c002b0 	cmpltui	r7,r4,10
 800a78c:	1839883a 	mov	fp,r3
 800a790:	0013883a 	mov	r9,zero
 800a794:	383f4a26 	beq	r7,zero,800a4c0 <___vfiprintf_internal_r+0x140>
 800a798:	480690ba 	slli	r3,r9,2
 800a79c:	e7000044 	addi	fp,fp,1
 800a7a0:	e0bfffc7 	ldb	r2,-1(fp)
 800a7a4:	1a53883a 	add	r9,r3,r9
 800a7a8:	4a53883a 	add	r9,r9,r9
 800a7ac:	4913883a 	add	r9,r9,r4
 800a7b0:	113ff404 	addi	r4,r2,-48
 800a7b4:	20c002b0 	cmpltui	r3,r4,10
 800a7b8:	183ff71e 	bne	r3,zero,800a798 <___vfiprintf_internal_r+0x418>
 800a7bc:	003f4006 	br	800a4c0 <___vfiprintf_internal_r+0x140>
 800a7c0:	e0800003 	ldbu	r2,0(fp)
 800a7c4:	10803fcc 	andi	r2,r2,255
 800a7c8:	1080201c 	xori	r2,r2,128
 800a7cc:	63000114 	ori	r12,r12,4
 800a7d0:	10bfe004 	addi	r2,r2,-128
 800a7d4:	003f3906 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a7d8:	01400044 	movi	r5,1
 800a7dc:	01800ac4 	movi	r6,43
 800a7e0:	e0800007 	ldb	r2,0(fp)
 800a7e4:	003f3506 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a7e8:	d8800317 	ldw	r2,12(sp)
 800a7ec:	14000017 	ldw	r16,0(r2)
 800a7f0:	15c00104 	addi	r23,r2,4
 800a7f4:	e0800003 	ldbu	r2,0(fp)
 800a7f8:	80031416 	blt	r16,zero,800b44c <___vfiprintf_internal_r+0x10cc>
 800a7fc:	ddc00315 	stw	r23,12(sp)
 800a800:	10803fcc 	andi	r2,r2,255
 800a804:	1080201c 	xori	r2,r2,128
 800a808:	10bfe004 	addi	r2,r2,-128
 800a80c:	003f2b06 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a810:	63000054 	ori	r12,r12,1
 800a814:	e0800007 	ldb	r2,0(fp)
 800a818:	003f2806 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a81c:	30c03fcc 	andi	r3,r6,255
 800a820:	18c0201c 	xori	r3,r3,128
 800a824:	18ffe004 	addi	r3,r3,-128
 800a828:	e0800003 	ldbu	r2,0(fp)
 800a82c:	183ff41e 	bne	r3,zero,800a800 <___vfiprintf_internal_r+0x480>
 800a830:	10803fcc 	andi	r2,r2,255
 800a834:	1080201c 	xori	r2,r2,128
 800a838:	01400044 	movi	r5,1
 800a83c:	01800804 	movi	r6,32
 800a840:	10bfe004 	addi	r2,r2,-128
 800a844:	003f1d06 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a848:	29403fcc 	andi	r5,r5,255
 800a84c:	2803741e 	bne	r5,zero,800b620 <___vfiprintf_internal_r+0x12a0>
 800a850:	00c20074 	movhi	r3,2049
 800a854:	18c8f004 	addi	r3,r3,9152
 800a858:	d8c00415 	stw	r3,16(sp)
 800a85c:	60c0080c 	andi	r3,r12,32
 800a860:	18004b26 	beq	r3,zero,800a990 <___vfiprintf_internal_r+0x610>
 800a864:	d8c00317 	ldw	r3,12(sp)
 800a868:	1d400017 	ldw	r21,0(r3)
 800a86c:	1d800117 	ldw	r22,4(r3)
 800a870:	18c00204 	addi	r3,r3,8
 800a874:	d8c00315 	stw	r3,12(sp)
 800a878:	60c0004c 	andi	r3,r12,1
 800a87c:	18000226 	beq	r3,zero,800a888 <___vfiprintf_internal_r+0x508>
 800a880:	ad86b03a 	or	r3,r21,r22
 800a884:	1802df1e 	bne	r3,zero,800b404 <___vfiprintf_internal_r+0x1084>
 800a888:	00800084 	movi	r2,2
 800a88c:	00001906 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800a890:	e0800007 	ldb	r2,0(fp)
 800a894:	10c01b18 	cmpnei	r3,r2,108
 800a898:	18033026 	beq	r3,zero,800b55c <___vfiprintf_internal_r+0x11dc>
 800a89c:	63000414 	ori	r12,r12,16
 800a8a0:	003f0606 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a8a4:	63001014 	ori	r12,r12,64
 800a8a8:	e0800007 	ldb	r2,0(fp)
 800a8ac:	003f0306 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a8b0:	63000814 	ori	r12,r12,32
 800a8b4:	e0800007 	ldb	r2,0(fp)
 800a8b8:	003f0006 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800a8bc:	d8c00317 	ldw	r3,12(sp)
 800a8c0:	00800c04 	movi	r2,48
 800a8c4:	d8800885 	stb	r2,34(sp)
 800a8c8:	00801e04 	movi	r2,120
 800a8cc:	01020074 	movhi	r4,2049
 800a8d0:	d88008c5 	stb	r2,35(sp)
 800a8d4:	1d400017 	ldw	r21,0(r3)
 800a8d8:	18800104 	addi	r2,r3,4
 800a8dc:	d8800315 	stw	r2,12(sp)
 800a8e0:	2088f004 	addi	r2,r4,9152
 800a8e4:	d8800415 	stw	r2,16(sp)
 800a8e8:	002d883a 	mov	r22,zero
 800a8ec:	63000094 	ori	r12,r12,2
 800a8f0:	00800084 	movi	r2,2
 800a8f4:	d8000845 	stb	zero,33(sp)
 800a8f8:	48ffffe0 	cmpeqi	r3,r9,-1
 800a8fc:	001b883a 	mov	r13,zero
 800a900:	18014c1e 	bne	r3,zero,800ae34 <___vfiprintf_internal_r+0xab4>
 800a904:	053fdfc4 	movi	r20,-129
 800a908:	ad86b03a 	or	r3,r21,r22
 800a90c:	6528703a 	and	r20,r12,r20
 800a910:	1802411e 	bne	r3,zero,800b218 <___vfiprintf_internal_r+0xe98>
 800a914:	48030d1e 	bne	r9,zero,800b54c <___vfiprintf_internal_r+0x11cc>
 800a918:	1000791e 	bne	r2,zero,800ab00 <___vfiprintf_internal_r+0x780>
 800a91c:	6580004c 	andi	r22,r12,1
 800a920:	b002b126 	beq	r22,zero,800b3e8 <___vfiprintf_internal_r+0x1068>
 800a924:	00800c04 	movi	r2,48
 800a928:	d88015c5 	stb	r2,87(sp)
 800a92c:	ddc015c4 	addi	r23,sp,87
 800a930:	00017e06 	br	800af2c <___vfiprintf_internal_r+0xbac>
 800a934:	29403fcc 	andi	r5,r5,255
 800a938:	2803461e 	bne	r5,zero,800b654 <___vfiprintf_internal_r+0x12d4>
 800a93c:	6080080c 	andi	r2,r12,32
 800a940:	10016b1e 	bne	r2,zero,800aef0 <___vfiprintf_internal_r+0xb70>
 800a944:	d8800317 	ldw	r2,12(sp)
 800a948:	60c0040c 	andi	r3,r12,16
 800a94c:	15400017 	ldw	r21,0(r2)
 800a950:	10800104 	addi	r2,r2,4
 800a954:	18010d1e 	bne	r3,zero,800ad8c <___vfiprintf_internal_r+0xa0c>
 800a958:	60c0100c 	andi	r3,r12,64
 800a95c:	18031326 	beq	r3,zero,800b5ac <___vfiprintf_internal_r+0x122c>
 800a960:	d8800315 	stw	r2,12(sp)
 800a964:	ad7fffcc 	andi	r21,r21,65535
 800a968:	002d883a 	mov	r22,zero
 800a96c:	0005883a 	mov	r2,zero
 800a970:	003fe006 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800a974:	29403fcc 	andi	r5,r5,255
 800a978:	2803251e 	bne	r5,zero,800b610 <___vfiprintf_internal_r+0x1290>
 800a97c:	00c20074 	movhi	r3,2049
 800a980:	18c8eb04 	addi	r3,r3,9132
 800a984:	d8c00415 	stw	r3,16(sp)
 800a988:	60c0080c 	andi	r3,r12,32
 800a98c:	183fb51e 	bne	r3,zero,800a864 <___vfiprintf_internal_r+0x4e4>
 800a990:	d9000317 	ldw	r4,12(sp)
 800a994:	60c0040c 	andi	r3,r12,16
 800a998:	25400017 	ldw	r21,0(r4)
 800a99c:	21000104 	addi	r4,r4,4
 800a9a0:	d9000315 	stw	r4,12(sp)
 800a9a4:	18026e1e 	bne	r3,zero,800b360 <___vfiprintf_internal_r+0xfe0>
 800a9a8:	60c0100c 	andi	r3,r12,64
 800a9ac:	18026c26 	beq	r3,zero,800b360 <___vfiprintf_internal_r+0xfe0>
 800a9b0:	ad7fffcc 	andi	r21,r21,65535
 800a9b4:	002d883a 	mov	r22,zero
 800a9b8:	003faf06 	br	800a878 <___vfiprintf_internal_r+0x4f8>
 800a9bc:	29403fcc 	andi	r5,r5,255
 800a9c0:	2803151e 	bne	r5,zero,800b618 <___vfiprintf_internal_r+0x1298>
 800a9c4:	6080080c 	andi	r2,r12,32
 800a9c8:	10013b1e 	bne	r2,zero,800aeb8 <___vfiprintf_internal_r+0xb38>
 800a9cc:	d8800317 	ldw	r2,12(sp)
 800a9d0:	60c0040c 	andi	r3,r12,16
 800a9d4:	15400017 	ldw	r21,0(r2)
 800a9d8:	10800104 	addi	r2,r2,4
 800a9dc:	1800f81e 	bne	r3,zero,800adc0 <___vfiprintf_internal_r+0xa40>
 800a9e0:	60c0100c 	andi	r3,r12,64
 800a9e4:	1802ed26 	beq	r3,zero,800b59c <___vfiprintf_internal_r+0x121c>
 800a9e8:	d8800315 	stw	r2,12(sp)
 800a9ec:	ad7fffcc 	andi	r21,r21,65535
 800a9f0:	002d883a 	mov	r22,zero
 800a9f4:	00800044 	movi	r2,1
 800a9f8:	003fbe06 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800a9fc:	d8800317 	ldw	r2,12(sp)
 800aa00:	d8000845 	stb	zero,33(sp)
 800aa04:	15c00017 	ldw	r23,0(r2)
 800aa08:	15000104 	addi	r20,r2,4
 800aa0c:	b802da26 	beq	r23,zero,800b578 <___vfiprintf_internal_r+0x11f8>
 800aa10:	48bfffe0 	cmpeqi	r2,r9,-1
 800aa14:	1002901e 	bne	r2,zero,800b458 <___vfiprintf_internal_r+0x10d8>
 800aa18:	480d883a 	mov	r6,r9
 800aa1c:	000b883a 	mov	r5,zero
 800aa20:	b809883a 	mov	r4,r23
 800aa24:	da000315 	stw	r8,12(sp)
 800aa28:	db000215 	stw	r12,8(sp)
 800aa2c:	da400115 	stw	r9,4(sp)
 800aa30:	800854c0 	call	800854c <memchr>
 800aa34:	da400117 	ldw	r9,4(sp)
 800aa38:	db000217 	ldw	r12,8(sp)
 800aa3c:	da000317 	ldw	r8,12(sp)
 800aa40:	1002ef26 	beq	r2,zero,800b600 <___vfiprintf_internal_r+0x1280>
 800aa44:	15edc83a 	sub	r22,r2,r23
 800aa48:	b02b883a 	mov	r21,r22
 800aa4c:	b000010e 	bge	r22,zero,800aa54 <___vfiprintf_internal_r+0x6d4>
 800aa50:	002b883a 	mov	r21,zero
 800aa54:	dd000315 	stw	r20,12(sp)
 800aa58:	00003606 	br	800ab34 <___vfiprintf_internal_r+0x7b4>
 800aa5c:	29403fcc 	andi	r5,r5,255
 800aa60:	2802fa1e 	bne	r5,zero,800b64c <___vfiprintf_internal_r+0x12cc>
 800aa64:	d9000317 	ldw	r4,12(sp)
 800aa68:	6080080c 	andi	r2,r12,32
 800aa6c:	20c00104 	addi	r3,r4,4
 800aa70:	10026a1e 	bne	r2,zero,800b41c <___vfiprintf_internal_r+0x109c>
 800aa74:	6080040c 	andi	r2,r12,16
 800aa78:	1002891e 	bne	r2,zero,800b4a0 <___vfiprintf_internal_r+0x1120>
 800aa7c:	6300100c 	andi	r12,r12,64
 800aa80:	60028726 	beq	r12,zero,800b4a0 <___vfiprintf_internal_r+0x1120>
 800aa84:	d8800317 	ldw	r2,12(sp)
 800aa88:	d8c00315 	stw	r3,12(sp)
 800aa8c:	d8c00017 	ldw	r3,0(sp)
 800aa90:	10800017 	ldw	r2,0(r2)
 800aa94:	10c0000d 	sth	r3,0(r2)
 800aa98:	003e6206 	br	800a424 <___vfiprintf_internal_r+0xa4>
 800aa9c:	29403fcc 	andi	r5,r5,255
 800aaa0:	2802e81e 	bne	r5,zero,800b644 <___vfiprintf_internal_r+0x12c4>
 800aaa4:	6080080c 	andi	r2,r12,32
 800aaa8:	10010a1e 	bne	r2,zero,800aed4 <___vfiprintf_internal_r+0xb54>
 800aaac:	d8800317 	ldw	r2,12(sp)
 800aab0:	60c0040c 	andi	r3,r12,16
 800aab4:	10800104 	addi	r2,r2,4
 800aab8:	1800ce1e 	bne	r3,zero,800adf4 <___vfiprintf_internal_r+0xa74>
 800aabc:	60c0100c 	andi	r3,r12,64
 800aac0:	1800cc26 	beq	r3,zero,800adf4 <___vfiprintf_internal_r+0xa74>
 800aac4:	d8c00317 	ldw	r3,12(sp)
 800aac8:	d8800315 	stw	r2,12(sp)
 800aacc:	1d40000f 	ldh	r21,0(r3)
 800aad0:	a82dd7fa 	srai	r22,r21,31
 800aad4:	b005883a 	mov	r2,r22
 800aad8:	1000cc16 	blt	r2,zero,800ae0c <___vfiprintf_internal_r+0xa8c>
 800aadc:	48bfffd8 	cmpnei	r2,r9,-1
 800aae0:	db400843 	ldbu	r13,33(sp)
 800aae4:	10010926 	beq	r2,zero,800af0c <___vfiprintf_internal_r+0xb8c>
 800aae8:	00ffdfc4 	movi	r3,-129
 800aaec:	ad84b03a 	or	r2,r21,r22
 800aaf0:	60d8703a 	and	r12,r12,r3
 800aaf4:	1001051e 	bne	r2,zero,800af0c <___vfiprintf_internal_r+0xb8c>
 800aaf8:	4801071e 	bne	r9,zero,800af18 <___vfiprintf_internal_r+0xb98>
 800aafc:	6029883a 	mov	r20,r12
 800ab00:	0013883a 	mov	r9,zero
 800ab04:	002d883a 	mov	r22,zero
 800ab08:	882f883a 	mov	r23,r17
 800ab0c:	00010706 	br	800af2c <___vfiprintf_internal_r+0xbac>
 800ab10:	d8c00317 	ldw	r3,12(sp)
 800ab14:	d8000845 	stb	zero,33(sp)
 800ab18:	05400044 	movi	r21,1
 800ab1c:	18800017 	ldw	r2,0(r3)
 800ab20:	18c00104 	addi	r3,r3,4
 800ab24:	d8c00315 	stw	r3,12(sp)
 800ab28:	d8800c05 	stb	r2,48(sp)
 800ab2c:	05800044 	movi	r22,1
 800ab30:	ddc00c04 	addi	r23,sp,48
 800ab34:	6029883a 	mov	r20,r12
 800ab38:	0013883a 	mov	r9,zero
 800ab3c:	a340008c 	andi	r13,r20,2
 800ab40:	68000126 	beq	r13,zero,800ab48 <___vfiprintf_internal_r+0x7c8>
 800ab44:	ad400084 	addi	r21,r21,2
 800ab48:	d9000a17 	ldw	r4,40(sp)
 800ab4c:	a300210c 	andi	r12,r20,132
 800ab50:	d8800b17 	ldw	r2,44(sp)
 800ab54:	21800044 	addi	r6,r4,1
 800ab58:	300b883a 	mov	r5,r6
 800ab5c:	6000021e 	bne	r12,zero,800ab68 <___vfiprintf_internal_r+0x7e8>
 800ab60:	8547c83a 	sub	r3,r16,r21
 800ab64:	00c1ae16 	blt	zero,r3,800b220 <___vfiprintf_internal_r+0xea0>
 800ab68:	d9800847 	ldb	r6,33(sp)
 800ab6c:	40c00204 	addi	r3,r8,8
 800ab70:	30000d26 	beq	r6,zero,800aba8 <___vfiprintf_internal_r+0x828>
 800ab74:	d9000844 	addi	r4,sp,33
 800ab78:	10800044 	addi	r2,r2,1
 800ab7c:	41000015 	stw	r4,0(r8)
 800ab80:	01000044 	movi	r4,1
 800ab84:	41000115 	stw	r4,4(r8)
 800ab88:	d8800b15 	stw	r2,44(sp)
 800ab8c:	d9400a15 	stw	r5,40(sp)
 800ab90:	29000208 	cmpgei	r4,r5,8
 800ab94:	2001831e 	bne	r4,zero,800b1a4 <___vfiprintf_internal_r+0xe24>
 800ab98:	2809883a 	mov	r4,r5
 800ab9c:	1811883a 	mov	r8,r3
 800aba0:	29400044 	addi	r5,r5,1
 800aba4:	18c00204 	addi	r3,r3,8
 800aba8:	68001826 	beq	r13,zero,800ac0c <___vfiprintf_internal_r+0x88c>
 800abac:	d9000884 	addi	r4,sp,34
 800abb0:	10800084 	addi	r2,r2,2
 800abb4:	41000015 	stw	r4,0(r8)
 800abb8:	01000084 	movi	r4,2
 800abbc:	41000115 	stw	r4,4(r8)
 800abc0:	d8800b15 	stw	r2,44(sp)
 800abc4:	d9400a15 	stw	r5,40(sp)
 800abc8:	29000208 	cmpgei	r4,r5,8
 800abcc:	20018d26 	beq	r4,zero,800b204 <___vfiprintf_internal_r+0xe84>
 800abd0:	1001ed26 	beq	r2,zero,800b388 <___vfiprintf_internal_r+0x1008>
 800abd4:	d9800904 	addi	r6,sp,36
 800abd8:	900b883a 	mov	r5,r18
 800abdc:	9809883a 	mov	r4,r19
 800abe0:	da400215 	stw	r9,8(sp)
 800abe4:	db000115 	stw	r12,4(sp)
 800abe8:	800a2740 	call	800a274 <__sprint_r.part.0>
 800abec:	103eb71e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800abf0:	d9000a17 	ldw	r4,40(sp)
 800abf4:	d8800b17 	ldw	r2,44(sp)
 800abf8:	da400217 	ldw	r9,8(sp)
 800abfc:	db000117 	ldw	r12,4(sp)
 800ac00:	d8c01804 	addi	r3,sp,96
 800ac04:	21400044 	addi	r5,r4,1
 800ac08:	8811883a 	mov	r8,r17
 800ac0c:	63002018 	cmpnei	r12,r12,128
 800ac10:	6000e326 	beq	r12,zero,800afa0 <___vfiprintf_internal_r+0xc20>
 800ac14:	4d93c83a 	sub	r9,r9,r22
 800ac18:	02412216 	blt	zero,r9,800b0a4 <___vfiprintf_internal_r+0xd24>
 800ac1c:	b085883a 	add	r2,r22,r2
 800ac20:	d9400a15 	stw	r5,40(sp)
 800ac24:	45c00015 	stw	r23,0(r8)
 800ac28:	45800115 	stw	r22,4(r8)
 800ac2c:	d8800b15 	stw	r2,44(sp)
 800ac30:	29400210 	cmplti	r5,r5,8
 800ac34:	2800081e 	bne	r5,zero,800ac58 <___vfiprintf_internal_r+0x8d8>
 800ac38:	10001426 	beq	r2,zero,800ac8c <___vfiprintf_internal_r+0x90c>
 800ac3c:	d9800904 	addi	r6,sp,36
 800ac40:	900b883a 	mov	r5,r18
 800ac44:	9809883a 	mov	r4,r19
 800ac48:	800a2740 	call	800a274 <__sprint_r.part.0>
 800ac4c:	103e9f1e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800ac50:	d8800b17 	ldw	r2,44(sp)
 800ac54:	8807883a 	mov	r3,r17
 800ac58:	a500010c 	andi	r20,r20,4
 800ac5c:	a0000226 	beq	r20,zero,800ac68 <___vfiprintf_internal_r+0x8e8>
 800ac60:	8569c83a 	sub	r20,r16,r21
 800ac64:	05000f16 	blt	zero,r20,800aca4 <___vfiprintf_internal_r+0x924>
 800ac68:	8540010e 	bge	r16,r21,800ac70 <___vfiprintf_internal_r+0x8f0>
 800ac6c:	a821883a 	mov	r16,r21
 800ac70:	d8c00017 	ldw	r3,0(sp)
 800ac74:	1c07883a 	add	r3,r3,r16
 800ac78:	d8c00015 	stw	r3,0(sp)
 800ac7c:	10013f1e 	bne	r2,zero,800b17c <___vfiprintf_internal_r+0xdfc>
 800ac80:	d8000a15 	stw	zero,40(sp)
 800ac84:	8811883a 	mov	r8,r17
 800ac88:	003de606 	br	800a424 <___vfiprintf_internal_r+0xa4>
 800ac8c:	d8000a15 	stw	zero,40(sp)
 800ac90:	a500010c 	andi	r20,r20,4
 800ac94:	a0019d26 	beq	r20,zero,800b30c <___vfiprintf_internal_r+0xf8c>
 800ac98:	8569c83a 	sub	r20,r16,r21
 800ac9c:	05019b0e 	bge	zero,r20,800b30c <___vfiprintf_internal_r+0xf8c>
 800aca0:	8807883a 	mov	r3,r17
 800aca4:	a1000450 	cmplti	r4,r20,17
 800aca8:	01c20074 	movhi	r7,2049
 800acac:	d9400a17 	ldw	r5,40(sp)
 800acb0:	20026c1e 	bne	r4,zero,800b664 <___vfiprintf_internal_r+0x12e4>
 800acb4:	39c95104 	addi	r7,r7,9540
 800acb8:	05800404 	movi	r22,16
 800acbc:	00000606 	br	800acd8 <___vfiprintf_internal_r+0x958>
 800acc0:	29800084 	addi	r6,r5,2
 800acc4:	18c00204 	addi	r3,r3,8
 800acc8:	200b883a 	mov	r5,r4
 800accc:	a53ffc04 	addi	r20,r20,-16
 800acd0:	a1000448 	cmpgei	r4,r20,17
 800acd4:	20001726 	beq	r4,zero,800ad34 <___vfiprintf_internal_r+0x9b4>
 800acd8:	29000044 	addi	r4,r5,1
 800acdc:	10800404 	addi	r2,r2,16
 800ace0:	19c00015 	stw	r7,0(r3)
 800ace4:	1d800115 	stw	r22,4(r3)
 800ace8:	d8800b15 	stw	r2,44(sp)
 800acec:	d9000a15 	stw	r4,40(sp)
 800acf0:	21800208 	cmpgei	r6,r4,8
 800acf4:	303ff226 	beq	r6,zero,800acc0 <___vfiprintf_internal_r+0x940>
 800acf8:	d9800904 	addi	r6,sp,36
 800acfc:	900b883a 	mov	r5,r18
 800ad00:	9809883a 	mov	r4,r19
 800ad04:	1000a226 	beq	r2,zero,800af90 <___vfiprintf_internal_r+0xc10>
 800ad08:	d9c00115 	stw	r7,4(sp)
 800ad0c:	800a2740 	call	800a274 <__sprint_r.part.0>
 800ad10:	103e6e1e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800ad14:	d9400a17 	ldw	r5,40(sp)
 800ad18:	a53ffc04 	addi	r20,r20,-16
 800ad1c:	a1000448 	cmpgei	r4,r20,17
 800ad20:	d8800b17 	ldw	r2,44(sp)
 800ad24:	8807883a 	mov	r3,r17
 800ad28:	29800044 	addi	r6,r5,1
 800ad2c:	d9c00117 	ldw	r7,4(sp)
 800ad30:	203fe91e 	bne	r4,zero,800acd8 <___vfiprintf_internal_r+0x958>
 800ad34:	1505883a 	add	r2,r2,r20
 800ad38:	d9800a15 	stw	r6,40(sp)
 800ad3c:	19c00015 	stw	r7,0(r3)
 800ad40:	1d000115 	stw	r20,4(r3)
 800ad44:	d8800b15 	stw	r2,44(sp)
 800ad48:	31800210 	cmplti	r6,r6,8
 800ad4c:	303fc61e 	bne	r6,zero,800ac68 <___vfiprintf_internal_r+0x8e8>
 800ad50:	10016e26 	beq	r2,zero,800b30c <___vfiprintf_internal_r+0xf8c>
 800ad54:	d9800904 	addi	r6,sp,36
 800ad58:	900b883a 	mov	r5,r18
 800ad5c:	9809883a 	mov	r4,r19
 800ad60:	800a2740 	call	800a274 <__sprint_r.part.0>
 800ad64:	103e591e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800ad68:	d8800b17 	ldw	r2,44(sp)
 800ad6c:	003fbe06 	br	800ac68 <___vfiprintf_internal_r+0x8e8>
 800ad70:	29403fcc 	andi	r5,r5,255
 800ad74:	28022c1e 	bne	r5,zero,800b628 <___vfiprintf_internal_r+0x12a8>
 800ad78:	6080080c 	andi	r2,r12,32
 800ad7c:	63000414 	ori	r12,r12,16
 800ad80:	10005b1e 	bne	r2,zero,800aef0 <___vfiprintf_internal_r+0xb70>
 800ad84:	d8800317 	ldw	r2,12(sp)
 800ad88:	10800104 	addi	r2,r2,4
 800ad8c:	d8c00317 	ldw	r3,12(sp)
 800ad90:	002d883a 	mov	r22,zero
 800ad94:	d8800315 	stw	r2,12(sp)
 800ad98:	1d400017 	ldw	r21,0(r3)
 800ad9c:	0005883a 	mov	r2,zero
 800ada0:	003ed406 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800ada4:	29403fcc 	andi	r5,r5,255
 800ada8:	2802211e 	bne	r5,zero,800b630 <___vfiprintf_internal_r+0x12b0>
 800adac:	6080080c 	andi	r2,r12,32
 800adb0:	63000414 	ori	r12,r12,16
 800adb4:	1000401e 	bne	r2,zero,800aeb8 <___vfiprintf_internal_r+0xb38>
 800adb8:	d8800317 	ldw	r2,12(sp)
 800adbc:	10800104 	addi	r2,r2,4
 800adc0:	d8c00317 	ldw	r3,12(sp)
 800adc4:	002d883a 	mov	r22,zero
 800adc8:	d8800315 	stw	r2,12(sp)
 800adcc:	1d400017 	ldw	r21,0(r3)
 800add0:	00800044 	movi	r2,1
 800add4:	003ec706 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800add8:	29403fcc 	andi	r5,r5,255
 800addc:	28021f1e 	bne	r5,zero,800b65c <___vfiprintf_internal_r+0x12dc>
 800ade0:	6080080c 	andi	r2,r12,32
 800ade4:	63000414 	ori	r12,r12,16
 800ade8:	10003a1e 	bne	r2,zero,800aed4 <___vfiprintf_internal_r+0xb54>
 800adec:	d8800317 	ldw	r2,12(sp)
 800adf0:	10800104 	addi	r2,r2,4
 800adf4:	d8c00317 	ldw	r3,12(sp)
 800adf8:	1d400017 	ldw	r21,0(r3)
 800adfc:	d8800315 	stw	r2,12(sp)
 800ae00:	a82dd7fa 	srai	r22,r21,31
 800ae04:	b005883a 	mov	r2,r22
 800ae08:	103f340e 	bge	r2,zero,800aadc <___vfiprintf_internal_r+0x75c>
 800ae0c:	056bc83a 	sub	r21,zero,r21
 800ae10:	a804c03a 	cmpne	r2,r21,zero
 800ae14:	05adc83a 	sub	r22,zero,r22
 800ae18:	b0adc83a 	sub	r22,r22,r2
 800ae1c:	00800b44 	movi	r2,45
 800ae20:	d8800845 	stb	r2,33(sp)
 800ae24:	48ffffe0 	cmpeqi	r3,r9,-1
 800ae28:	03400b44 	movi	r13,45
 800ae2c:	00800044 	movi	r2,1
 800ae30:	183eb426 	beq	r3,zero,800a904 <___vfiprintf_internal_r+0x584>
 800ae34:	10c00060 	cmpeqi	r3,r2,1
 800ae38:	1800341e 	bne	r3,zero,800af0c <___vfiprintf_internal_r+0xb8c>
 800ae3c:	108000a0 	cmpeqi	r2,r2,2
 800ae40:	1000431e 	bne	r2,zero,800af50 <___vfiprintf_internal_r+0xbd0>
 800ae44:	8807883a 	mov	r3,r17
 800ae48:	00000106 	br	800ae50 <___vfiprintf_internal_r+0xad0>
 800ae4c:	b807883a 	mov	r3,r23
 800ae50:	a808d0fa 	srli	r4,r21,3
 800ae54:	b00a977a 	slli	r5,r22,29
 800ae58:	b02cd0fa 	srli	r22,r22,3
 800ae5c:	ad4001cc 	andi	r21,r21,7
 800ae60:	a8800c04 	addi	r2,r21,48
 800ae64:	292ab03a 	or	r21,r5,r4
 800ae68:	18bfffc5 	stb	r2,-1(r3)
 800ae6c:	ad88b03a 	or	r4,r21,r22
 800ae70:	1dffffc4 	addi	r23,r3,-1
 800ae74:	203ff51e 	bne	r4,zero,800ae4c <___vfiprintf_internal_r+0xacc>
 800ae78:	6100004c 	andi	r4,r12,1
 800ae7c:	20004126 	beq	r4,zero,800af84 <___vfiprintf_internal_r+0xc04>
 800ae80:	10803fcc 	andi	r2,r2,255
 800ae84:	1080201c 	xori	r2,r2,128
 800ae88:	10bfe004 	addi	r2,r2,-128
 800ae8c:	10800c18 	cmpnei	r2,r2,48
 800ae90:	10003c26 	beq	r2,zero,800af84 <___vfiprintf_internal_r+0xc04>
 800ae94:	18ffff84 	addi	r3,r3,-2
 800ae98:	00800c04 	movi	r2,48
 800ae9c:	b8bfffc5 	stb	r2,-1(r23)
 800aea0:	88edc83a 	sub	r22,r17,r3
 800aea4:	6029883a 	mov	r20,r12
 800aea8:	182f883a 	mov	r23,r3
 800aeac:	00001f06 	br	800af2c <___vfiprintf_internal_r+0xbac>
 800aeb0:	80070d80 	call	80070d8 <__sinit>
 800aeb4:	003d4406 	br	800a3c8 <___vfiprintf_internal_r+0x48>
 800aeb8:	d8c00317 	ldw	r3,12(sp)
 800aebc:	00800044 	movi	r2,1
 800aec0:	1d400017 	ldw	r21,0(r3)
 800aec4:	1d800117 	ldw	r22,4(r3)
 800aec8:	18c00204 	addi	r3,r3,8
 800aecc:	d8c00315 	stw	r3,12(sp)
 800aed0:	003e8806 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800aed4:	d8c00317 	ldw	r3,12(sp)
 800aed8:	18800117 	ldw	r2,4(r3)
 800aedc:	1d400017 	ldw	r21,0(r3)
 800aee0:	18c00204 	addi	r3,r3,8
 800aee4:	d8c00315 	stw	r3,12(sp)
 800aee8:	102d883a 	mov	r22,r2
 800aeec:	003efa06 	br	800aad8 <___vfiprintf_internal_r+0x758>
 800aef0:	d8c00317 	ldw	r3,12(sp)
 800aef4:	0005883a 	mov	r2,zero
 800aef8:	1d400017 	ldw	r21,0(r3)
 800aefc:	1d800117 	ldw	r22,4(r3)
 800af00:	18c00204 	addi	r3,r3,8
 800af04:	d8c00315 	stw	r3,12(sp)
 800af08:	003e7a06 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800af0c:	b0016a1e 	bne	r22,zero,800b4b8 <___vfiprintf_internal_r+0x1138>
 800af10:	a88002a8 	cmpgeui	r2,r21,10
 800af14:	1001681e 	bne	r2,zero,800b4b8 <___vfiprintf_internal_r+0x1138>
 800af18:	ad400c04 	addi	r21,r21,48
 800af1c:	dd4015c5 	stb	r21,87(sp)
 800af20:	6029883a 	mov	r20,r12
 800af24:	05800044 	movi	r22,1
 800af28:	ddc015c4 	addi	r23,sp,87
 800af2c:	482b883a 	mov	r21,r9
 800af30:	4d80010e 	bge	r9,r22,800af38 <___vfiprintf_internal_r+0xbb8>
 800af34:	b02b883a 	mov	r21,r22
 800af38:	6b403fcc 	andi	r13,r13,255
 800af3c:	6b40201c 	xori	r13,r13,128
 800af40:	6b7fe004 	addi	r13,r13,-128
 800af44:	683efd26 	beq	r13,zero,800ab3c <___vfiprintf_internal_r+0x7bc>
 800af48:	ad400044 	addi	r21,r21,1
 800af4c:	003efb06 	br	800ab3c <___vfiprintf_internal_r+0x7bc>
 800af50:	882f883a 	mov	r23,r17
 800af54:	d9000417 	ldw	r4,16(sp)
 800af58:	a88003cc 	andi	r2,r21,15
 800af5c:	b006973a 	slli	r3,r22,28
 800af60:	2085883a 	add	r2,r4,r2
 800af64:	a82ad13a 	srli	r21,r21,4
 800af68:	10800003 	ldbu	r2,0(r2)
 800af6c:	b02cd13a 	srli	r22,r22,4
 800af70:	bdffffc4 	addi	r23,r23,-1
 800af74:	1d6ab03a 	or	r21,r3,r21
 800af78:	b8800005 	stb	r2,0(r23)
 800af7c:	ad84b03a 	or	r2,r21,r22
 800af80:	103ff41e 	bne	r2,zero,800af54 <___vfiprintf_internal_r+0xbd4>
 800af84:	8dedc83a 	sub	r22,r17,r23
 800af88:	6029883a 	mov	r20,r12
 800af8c:	003fe706 	br	800af2c <___vfiprintf_internal_r+0xbac>
 800af90:	01800044 	movi	r6,1
 800af94:	000b883a 	mov	r5,zero
 800af98:	8807883a 	mov	r3,r17
 800af9c:	003f4b06 	br	800accc <___vfiprintf_internal_r+0x94c>
 800afa0:	8559c83a 	sub	r12,r16,r21
 800afa4:	033f1b0e 	bge	zero,r12,800ac14 <___vfiprintf_internal_r+0x894>
 800afa8:	61800450 	cmplti	r6,r12,17
 800afac:	01c20074 	movhi	r7,2049
 800afb0:	3001af1e 	bne	r6,zero,800b670 <___vfiprintf_internal_r+0x12f0>
 800afb4:	39c94d04 	addi	r7,r7,9524
 800afb8:	03400404 	movi	r13,16
 800afbc:	00000606 	br	800afd8 <___vfiprintf_internal_r+0xc58>
 800afc0:	21800084 	addi	r6,r4,2
 800afc4:	42000204 	addi	r8,r8,8
 800afc8:	1809883a 	mov	r4,r3
 800afcc:	633ffc04 	addi	r12,r12,-16
 800afd0:	60c00448 	cmpgei	r3,r12,17
 800afd4:	18001c26 	beq	r3,zero,800b048 <___vfiprintf_internal_r+0xcc8>
 800afd8:	20c00044 	addi	r3,r4,1
 800afdc:	10800404 	addi	r2,r2,16
 800afe0:	41c00015 	stw	r7,0(r8)
 800afe4:	43400115 	stw	r13,4(r8)
 800afe8:	d8800b15 	stw	r2,44(sp)
 800afec:	d8c00a15 	stw	r3,40(sp)
 800aff0:	19400208 	cmpgei	r5,r3,8
 800aff4:	283ff226 	beq	r5,zero,800afc0 <___vfiprintf_internal_r+0xc40>
 800aff8:	d9800904 	addi	r6,sp,36
 800affc:	900b883a 	mov	r5,r18
 800b000:	9809883a 	mov	r4,r19
 800b004:	10006326 	beq	r2,zero,800b194 <___vfiprintf_internal_r+0xe14>
 800b008:	d9c00515 	stw	r7,20(sp)
 800b00c:	db000215 	stw	r12,8(sp)
 800b010:	da400115 	stw	r9,4(sp)
 800b014:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b018:	103dac1e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800b01c:	db000217 	ldw	r12,8(sp)
 800b020:	d9000a17 	ldw	r4,40(sp)
 800b024:	d8800b17 	ldw	r2,44(sp)
 800b028:	633ffc04 	addi	r12,r12,-16
 800b02c:	60c00448 	cmpgei	r3,r12,17
 800b030:	8811883a 	mov	r8,r17
 800b034:	21800044 	addi	r6,r4,1
 800b038:	d9c00517 	ldw	r7,20(sp)
 800b03c:	03400404 	movi	r13,16
 800b040:	da400117 	ldw	r9,4(sp)
 800b044:	183fe41e 	bne	r3,zero,800afd8 <___vfiprintf_internal_r+0xc58>
 800b048:	43400204 	addi	r13,r8,8
 800b04c:	1305883a 	add	r2,r2,r12
 800b050:	41c00015 	stw	r7,0(r8)
 800b054:	43000115 	stw	r12,4(r8)
 800b058:	d8800b15 	stw	r2,44(sp)
 800b05c:	d9800a15 	stw	r6,40(sp)
 800b060:	30c00208 	cmpgei	r3,r6,8
 800b064:	1800e226 	beq	r3,zero,800b3f0 <___vfiprintf_internal_r+0x1070>
 800b068:	10015726 	beq	r2,zero,800b5c8 <___vfiprintf_internal_r+0x1248>
 800b06c:	d9800904 	addi	r6,sp,36
 800b070:	900b883a 	mov	r5,r18
 800b074:	9809883a 	mov	r4,r19
 800b078:	da400115 	stw	r9,4(sp)
 800b07c:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b080:	103d921e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800b084:	da400117 	ldw	r9,4(sp)
 800b088:	d9000a17 	ldw	r4,40(sp)
 800b08c:	d8800b17 	ldw	r2,44(sp)
 800b090:	4d93c83a 	sub	r9,r9,r22
 800b094:	d8c01804 	addi	r3,sp,96
 800b098:	21400044 	addi	r5,r4,1
 800b09c:	8811883a 	mov	r8,r17
 800b0a0:	027ede0e 	bge	zero,r9,800ac1c <___vfiprintf_internal_r+0x89c>
 800b0a4:	49800450 	cmplti	r6,r9,17
 800b0a8:	01c20074 	movhi	r7,2049
 800b0ac:	3001431e 	bne	r6,zero,800b5bc <___vfiprintf_internal_r+0x123c>
 800b0b0:	39c94d04 	addi	r7,r7,9524
 800b0b4:	03000404 	movi	r12,16
 800b0b8:	00000606 	br	800b0d4 <___vfiprintf_internal_r+0xd54>
 800b0bc:	21400084 	addi	r5,r4,2
 800b0c0:	42000204 	addi	r8,r8,8
 800b0c4:	1809883a 	mov	r4,r3
 800b0c8:	4a7ffc04 	addi	r9,r9,-16
 800b0cc:	48c00448 	cmpgei	r3,r9,17
 800b0d0:	18001a26 	beq	r3,zero,800b13c <___vfiprintf_internal_r+0xdbc>
 800b0d4:	20c00044 	addi	r3,r4,1
 800b0d8:	10800404 	addi	r2,r2,16
 800b0dc:	41c00015 	stw	r7,0(r8)
 800b0e0:	43000115 	stw	r12,4(r8)
 800b0e4:	d8800b15 	stw	r2,44(sp)
 800b0e8:	d8c00a15 	stw	r3,40(sp)
 800b0ec:	19400208 	cmpgei	r5,r3,8
 800b0f0:	283ff226 	beq	r5,zero,800b0bc <___vfiprintf_internal_r+0xd3c>
 800b0f4:	d9800904 	addi	r6,sp,36
 800b0f8:	900b883a 	mov	r5,r18
 800b0fc:	9809883a 	mov	r4,r19
 800b100:	10001a26 	beq	r2,zero,800b16c <___vfiprintf_internal_r+0xdec>
 800b104:	d9c00215 	stw	r7,8(sp)
 800b108:	da400115 	stw	r9,4(sp)
 800b10c:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b110:	103d6e1e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800b114:	da400117 	ldw	r9,4(sp)
 800b118:	d9000a17 	ldw	r4,40(sp)
 800b11c:	d8800b17 	ldw	r2,44(sp)
 800b120:	4a7ffc04 	addi	r9,r9,-16
 800b124:	48c00448 	cmpgei	r3,r9,17
 800b128:	8811883a 	mov	r8,r17
 800b12c:	21400044 	addi	r5,r4,1
 800b130:	d9c00217 	ldw	r7,8(sp)
 800b134:	03000404 	movi	r12,16
 800b138:	183fe61e 	bne	r3,zero,800b0d4 <___vfiprintf_internal_r+0xd54>
 800b13c:	41000204 	addi	r4,r8,8
 800b140:	1245883a 	add	r2,r2,r9
 800b144:	41c00015 	stw	r7,0(r8)
 800b148:	42400115 	stw	r9,4(r8)
 800b14c:	d8800b15 	stw	r2,44(sp)
 800b150:	d9400a15 	stw	r5,40(sp)
 800b154:	28c00208 	cmpgei	r3,r5,8
 800b158:	1800721e 	bne	r3,zero,800b324 <___vfiprintf_internal_r+0xfa4>
 800b15c:	29400044 	addi	r5,r5,1
 800b160:	20c00204 	addi	r3,r4,8
 800b164:	2011883a 	mov	r8,r4
 800b168:	003eac06 	br	800ac1c <___vfiprintf_internal_r+0x89c>
 800b16c:	01400044 	movi	r5,1
 800b170:	0009883a 	mov	r4,zero
 800b174:	8811883a 	mov	r8,r17
 800b178:	003fd306 	br	800b0c8 <___vfiprintf_internal_r+0xd48>
 800b17c:	d9800904 	addi	r6,sp,36
 800b180:	900b883a 	mov	r5,r18
 800b184:	9809883a 	mov	r4,r19
 800b188:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b18c:	103ebc26 	beq	r2,zero,800ac80 <___vfiprintf_internal_r+0x900>
 800b190:	003d4e06 	br	800a6cc <___vfiprintf_internal_r+0x34c>
 800b194:	01800044 	movi	r6,1
 800b198:	0009883a 	mov	r4,zero
 800b19c:	8811883a 	mov	r8,r17
 800b1a0:	003f8a06 	br	800afcc <___vfiprintf_internal_r+0xc4c>
 800b1a4:	10007026 	beq	r2,zero,800b368 <___vfiprintf_internal_r+0xfe8>
 800b1a8:	d9800904 	addi	r6,sp,36
 800b1ac:	900b883a 	mov	r5,r18
 800b1b0:	9809883a 	mov	r4,r19
 800b1b4:	da400515 	stw	r9,20(sp)
 800b1b8:	db000215 	stw	r12,8(sp)
 800b1bc:	db400115 	stw	r13,4(sp)
 800b1c0:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b1c4:	103d411e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800b1c8:	d9000a17 	ldw	r4,40(sp)
 800b1cc:	d8800b17 	ldw	r2,44(sp)
 800b1d0:	d8c01804 	addi	r3,sp,96
 800b1d4:	21400044 	addi	r5,r4,1
 800b1d8:	8811883a 	mov	r8,r17
 800b1dc:	da400517 	ldw	r9,20(sp)
 800b1e0:	db000217 	ldw	r12,8(sp)
 800b1e4:	db400117 	ldw	r13,4(sp)
 800b1e8:	003e6f06 	br	800aba8 <___vfiprintf_internal_r+0x828>
 800b1ec:	d8800884 	addi	r2,sp,34
 800b1f0:	d8801615 	stw	r2,88(sp)
 800b1f4:	00800084 	movi	r2,2
 800b1f8:	d8801715 	stw	r2,92(sp)
 800b1fc:	d8c01804 	addi	r3,sp,96
 800b200:	01400044 	movi	r5,1
 800b204:	1811883a 	mov	r8,r3
 800b208:	2809883a 	mov	r4,r5
 800b20c:	21400044 	addi	r5,r4,1
 800b210:	40c00204 	addi	r3,r8,8
 800b214:	003e7d06 	br	800ac0c <___vfiprintf_internal_r+0x88c>
 800b218:	a019883a 	mov	r12,r20
 800b21c:	003f0506 	br	800ae34 <___vfiprintf_internal_r+0xab4>
 800b220:	19400450 	cmplti	r5,r3,17
 800b224:	01c20074 	movhi	r7,2049
 800b228:	2801031e 	bne	r5,zero,800b638 <___vfiprintf_internal_r+0x12b8>
 800b22c:	39c95104 	addi	r7,r7,9540
 800b230:	03800404 	movi	r14,16
 800b234:	00000706 	br	800b254 <___vfiprintf_internal_r+0xed4>
 800b238:	23c00084 	addi	r15,r4,2
 800b23c:	42000204 	addi	r8,r8,8
 800b240:	3009883a 	mov	r4,r6
 800b244:	18fffc04 	addi	r3,r3,-16
 800b248:	19400448 	cmpgei	r5,r3,17
 800b24c:	28002026 	beq	r5,zero,800b2d0 <___vfiprintf_internal_r+0xf50>
 800b250:	21800044 	addi	r6,r4,1
 800b254:	10800404 	addi	r2,r2,16
 800b258:	41c00015 	stw	r7,0(r8)
 800b25c:	43800115 	stw	r14,4(r8)
 800b260:	d8800b15 	stw	r2,44(sp)
 800b264:	d9800a15 	stw	r6,40(sp)
 800b268:	31400208 	cmpgei	r5,r6,8
 800b26c:	283ff226 	beq	r5,zero,800b238 <___vfiprintf_internal_r+0xeb8>
 800b270:	d9800904 	addi	r6,sp,36
 800b274:	900b883a 	mov	r5,r18
 800b278:	9809883a 	mov	r4,r19
 800b27c:	10001f26 	beq	r2,zero,800b2fc <___vfiprintf_internal_r+0xf7c>
 800b280:	d9c00715 	stw	r7,28(sp)
 800b284:	d8c00615 	stw	r3,24(sp)
 800b288:	da400515 	stw	r9,20(sp)
 800b28c:	db000215 	stw	r12,8(sp)
 800b290:	db400115 	stw	r13,4(sp)
 800b294:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b298:	103d0c1e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800b29c:	d8c00617 	ldw	r3,24(sp)
 800b2a0:	d9000a17 	ldw	r4,40(sp)
 800b2a4:	d8800b17 	ldw	r2,44(sp)
 800b2a8:	18fffc04 	addi	r3,r3,-16
 800b2ac:	19400448 	cmpgei	r5,r3,17
 800b2b0:	8811883a 	mov	r8,r17
 800b2b4:	23c00044 	addi	r15,r4,1
 800b2b8:	d9c00717 	ldw	r7,28(sp)
 800b2bc:	03800404 	movi	r14,16
 800b2c0:	da400517 	ldw	r9,20(sp)
 800b2c4:	db000217 	ldw	r12,8(sp)
 800b2c8:	db400117 	ldw	r13,4(sp)
 800b2cc:	283fe01e 	bne	r5,zero,800b250 <___vfiprintf_internal_r+0xed0>
 800b2d0:	10c5883a 	add	r2,r2,r3
 800b2d4:	40c00115 	stw	r3,4(r8)
 800b2d8:	41c00015 	stw	r7,0(r8)
 800b2dc:	d8800b15 	stw	r2,44(sp)
 800b2e0:	dbc00a15 	stw	r15,40(sp)
 800b2e4:	78c00208 	cmpgei	r3,r15,8
 800b2e8:	18002c1e 	bne	r3,zero,800b39c <___vfiprintf_internal_r+0x101c>
 800b2ec:	42000204 	addi	r8,r8,8
 800b2f0:	79400044 	addi	r5,r15,1
 800b2f4:	7809883a 	mov	r4,r15
 800b2f8:	003e1b06 	br	800ab68 <___vfiprintf_internal_r+0x7e8>
 800b2fc:	0009883a 	mov	r4,zero
 800b300:	03c00044 	movi	r15,1
 800b304:	8811883a 	mov	r8,r17
 800b308:	003fce06 	br	800b244 <___vfiprintf_internal_r+0xec4>
 800b30c:	8540010e 	bge	r16,r21,800b314 <___vfiprintf_internal_r+0xf94>
 800b310:	a821883a 	mov	r16,r21
 800b314:	d8800017 	ldw	r2,0(sp)
 800b318:	1405883a 	add	r2,r2,r16
 800b31c:	d8800015 	stw	r2,0(sp)
 800b320:	003e5706 	br	800ac80 <___vfiprintf_internal_r+0x900>
 800b324:	10008126 	beq	r2,zero,800b52c <___vfiprintf_internal_r+0x11ac>
 800b328:	d9800904 	addi	r6,sp,36
 800b32c:	900b883a 	mov	r5,r18
 800b330:	9809883a 	mov	r4,r19
 800b334:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b338:	103ce41e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800b33c:	d9400a17 	ldw	r5,40(sp)
 800b340:	d8800b17 	ldw	r2,44(sp)
 800b344:	d8c01804 	addi	r3,sp,96
 800b348:	29400044 	addi	r5,r5,1
 800b34c:	8811883a 	mov	r8,r17
 800b350:	003e3206 	br	800ac1c <___vfiprintf_internal_r+0x89c>
 800b354:	d8000a15 	stw	zero,40(sp)
 800b358:	8811883a 	mov	r8,r17
 800b35c:	003c4a06 	br	800a488 <___vfiprintf_internal_r+0x108>
 800b360:	002d883a 	mov	r22,zero
 800b364:	003d4406 	br	800a878 <___vfiprintf_internal_r+0x4f8>
 800b368:	68003326 	beq	r13,zero,800b438 <___vfiprintf_internal_r+0x10b8>
 800b36c:	d8800884 	addi	r2,sp,34
 800b370:	d8801615 	stw	r2,88(sp)
 800b374:	00800084 	movi	r2,2
 800b378:	d8801715 	stw	r2,92(sp)
 800b37c:	da001804 	addi	r8,sp,96
 800b380:	01000044 	movi	r4,1
 800b384:	003fa106 	br	800b20c <___vfiprintf_internal_r+0xe8c>
 800b388:	d8c01804 	addi	r3,sp,96
 800b38c:	01400044 	movi	r5,1
 800b390:	0009883a 	mov	r4,zero
 800b394:	8811883a 	mov	r8,r17
 800b398:	003e1c06 	br	800ac0c <___vfiprintf_internal_r+0x88c>
 800b39c:	10003826 	beq	r2,zero,800b480 <___vfiprintf_internal_r+0x1100>
 800b3a0:	d9800904 	addi	r6,sp,36
 800b3a4:	900b883a 	mov	r5,r18
 800b3a8:	9809883a 	mov	r4,r19
 800b3ac:	da400515 	stw	r9,20(sp)
 800b3b0:	db000215 	stw	r12,8(sp)
 800b3b4:	db400115 	stw	r13,4(sp)
 800b3b8:	800a2740 	call	800a274 <__sprint_r.part.0>
 800b3bc:	103cc31e 	bne	r2,zero,800a6cc <___vfiprintf_internal_r+0x34c>
 800b3c0:	d9000a17 	ldw	r4,40(sp)
 800b3c4:	d8800b17 	ldw	r2,44(sp)
 800b3c8:	8811883a 	mov	r8,r17
 800b3cc:	21400044 	addi	r5,r4,1
 800b3d0:	da400517 	ldw	r9,20(sp)
 800b3d4:	db000217 	ldw	r12,8(sp)
 800b3d8:	db400117 	ldw	r13,4(sp)
 800b3dc:	003de206 	br	800ab68 <___vfiprintf_internal_r+0x7e8>
 800b3e0:	e029883a 	mov	r20,fp
 800b3e4:	003c2d06 	br	800a49c <___vfiprintf_internal_r+0x11c>
 800b3e8:	882f883a 	mov	r23,r17
 800b3ec:	003ecf06 	br	800af2c <___vfiprintf_internal_r+0xbac>
 800b3f0:	31400044 	addi	r5,r6,1
 800b3f4:	68c00204 	addi	r3,r13,8
 800b3f8:	3009883a 	mov	r4,r6
 800b3fc:	6811883a 	mov	r8,r13
 800b400:	003e0406 	br	800ac14 <___vfiprintf_internal_r+0x894>
 800b404:	00c00c04 	movi	r3,48
 800b408:	d88008c5 	stb	r2,35(sp)
 800b40c:	d8c00885 	stb	r3,34(sp)
 800b410:	63000094 	ori	r12,r12,2
 800b414:	00800084 	movi	r2,2
 800b418:	003d3606 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800b41c:	d9400017 	ldw	r5,0(sp)
 800b420:	20800017 	ldw	r2,0(r4)
 800b424:	d8c00315 	stw	r3,12(sp)
 800b428:	2809d7fa 	srai	r4,r5,31
 800b42c:	11400015 	stw	r5,0(r2)
 800b430:	11000115 	stw	r4,4(r2)
 800b434:	003bfb06 	br	800a424 <___vfiprintf_internal_r+0xa4>
 800b438:	0009883a 	mov	r4,zero
 800b43c:	d8c01804 	addi	r3,sp,96
 800b440:	01400044 	movi	r5,1
 800b444:	8811883a 	mov	r8,r17
 800b448:	003df006 	br	800ac0c <___vfiprintf_internal_r+0x88c>
 800b44c:	0421c83a 	sub	r16,zero,r16
 800b450:	ddc00315 	stw	r23,12(sp)
 800b454:	003cdb06 	br	800a7c4 <___vfiprintf_internal_r+0x444>
 800b458:	b809883a 	mov	r4,r23
 800b45c:	da000215 	stw	r8,8(sp)
 800b460:	db000115 	stw	r12,4(sp)
 800b464:	8002dc80 	call	8002dc8 <strlen>
 800b468:	102d883a 	mov	r22,r2
 800b46c:	102b883a 	mov	r21,r2
 800b470:	dd000315 	stw	r20,12(sp)
 800b474:	db000117 	ldw	r12,4(sp)
 800b478:	da000217 	ldw	r8,8(sp)
 800b47c:	003dad06 	br	800ab34 <___vfiprintf_internal_r+0x7b4>
 800b480:	d8c00847 	ldb	r3,33(sp)
 800b484:	1800551e 	bne	r3,zero,800b5dc <___vfiprintf_internal_r+0x125c>
 800b488:	683f581e 	bne	r13,zero,800b1ec <___vfiprintf_internal_r+0xe6c>
 800b48c:	0009883a 	mov	r4,zero
 800b490:	d8c01804 	addi	r3,sp,96
 800b494:	01400044 	movi	r5,1
 800b498:	8811883a 	mov	r8,r17
 800b49c:	003ddd06 	br	800ac14 <___vfiprintf_internal_r+0x894>
 800b4a0:	d8800317 	ldw	r2,12(sp)
 800b4a4:	10800017 	ldw	r2,0(r2)
 800b4a8:	d8c00315 	stw	r3,12(sp)
 800b4ac:	d8c00017 	ldw	r3,0(sp)
 800b4b0:	10c00015 	stw	r3,0(r2)
 800b4b4:	003bdb06 	br	800a424 <___vfiprintf_internal_r+0xa4>
 800b4b8:	882f883a 	mov	r23,r17
 800b4bc:	00000206 	br	800b4c8 <___vfiprintf_internal_r+0x1148>
 800b4c0:	102b883a 	mov	r21,r2
 800b4c4:	182d883a 	mov	r22,r3
 800b4c8:	a809883a 	mov	r4,r21
 800b4cc:	b00b883a 	mov	r5,r22
 800b4d0:	01800284 	movi	r6,10
 800b4d4:	000f883a 	mov	r7,zero
 800b4d8:	db400615 	stw	r13,24(sp)
 800b4dc:	da000515 	stw	r8,20(sp)
 800b4e0:	da400215 	stw	r9,8(sp)
 800b4e4:	db000115 	stw	r12,4(sp)
 800b4e8:	800c7f00 	call	800c7f0 <__umoddi3>
 800b4ec:	10800c04 	addi	r2,r2,48
 800b4f0:	bdffffc4 	addi	r23,r23,-1
 800b4f4:	a809883a 	mov	r4,r21
 800b4f8:	b00b883a 	mov	r5,r22
 800b4fc:	b8800005 	stb	r2,0(r23)
 800b500:	01800284 	movi	r6,10
 800b504:	000f883a 	mov	r7,zero
 800b508:	800c1d40 	call	800c1d4 <__udivdi3>
 800b50c:	db000117 	ldw	r12,4(sp)
 800b510:	da400217 	ldw	r9,8(sp)
 800b514:	da000517 	ldw	r8,20(sp)
 800b518:	db400617 	ldw	r13,24(sp)
 800b51c:	b03fe81e 	bne	r22,zero,800b4c0 <___vfiprintf_internal_r+0x1140>
 800b520:	ad4002a8 	cmpgeui	r21,r21,10
 800b524:	a83fe61e 	bne	r21,zero,800b4c0 <___vfiprintf_internal_r+0x1140>
 800b528:	003e9606 	br	800af84 <___vfiprintf_internal_r+0xc04>
 800b52c:	00c00044 	movi	r3,1
 800b530:	d8c00a15 	stw	r3,40(sp)
 800b534:	b005883a 	mov	r2,r22
 800b538:	ddc01615 	stw	r23,88(sp)
 800b53c:	dd801715 	stw	r22,92(sp)
 800b540:	dd800b15 	stw	r22,44(sp)
 800b544:	d8c01804 	addi	r3,sp,96
 800b548:	003dc306 	br	800ac58 <___vfiprintf_internal_r+0x8d8>
 800b54c:	10c00060 	cmpeqi	r3,r2,1
 800b550:	a019883a 	mov	r12,r20
 800b554:	183e3926 	beq	r3,zero,800ae3c <___vfiprintf_internal_r+0xabc>
 800b558:	003e6f06 	br	800af18 <___vfiprintf_internal_r+0xb98>
 800b55c:	e0800043 	ldbu	r2,1(fp)
 800b560:	63000814 	ori	r12,r12,32
 800b564:	e7000044 	addi	fp,fp,1
 800b568:	10803fcc 	andi	r2,r2,255
 800b56c:	1080201c 	xori	r2,r2,128
 800b570:	10bfe004 	addi	r2,r2,-128
 800b574:	003bd106 	br	800a4bc <___vfiprintf_internal_r+0x13c>
 800b578:	488001f0 	cmpltui	r2,r9,7
 800b57c:	482d883a 	mov	r22,r9
 800b580:	1000011e 	bne	r2,zero,800b588 <___vfiprintf_internal_r+0x1208>
 800b584:	05800184 	movi	r22,6
 800b588:	05c20074 	movhi	r23,2049
 800b58c:	b02b883a 	mov	r21,r22
 800b590:	dd000315 	stw	r20,12(sp)
 800b594:	bdc8f504 	addi	r23,r23,9172
 800b598:	003d6606 	br	800ab34 <___vfiprintf_internal_r+0x7b4>
 800b59c:	d8800315 	stw	r2,12(sp)
 800b5a0:	002d883a 	mov	r22,zero
 800b5a4:	00800044 	movi	r2,1
 800b5a8:	003cd206 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800b5ac:	d8800315 	stw	r2,12(sp)
 800b5b0:	002d883a 	mov	r22,zero
 800b5b4:	0005883a 	mov	r2,zero
 800b5b8:	003cce06 	br	800a8f4 <___vfiprintf_internal_r+0x574>
 800b5bc:	1809883a 	mov	r4,r3
 800b5c0:	39c94d04 	addi	r7,r7,9524
 800b5c4:	003ede06 	br	800b140 <___vfiprintf_internal_r+0xdc0>
 800b5c8:	d8c01804 	addi	r3,sp,96
 800b5cc:	01400044 	movi	r5,1
 800b5d0:	0009883a 	mov	r4,zero
 800b5d4:	8811883a 	mov	r8,r17
 800b5d8:	003d8e06 	br	800ac14 <___vfiprintf_internal_r+0x894>
 800b5dc:	d8800844 	addi	r2,sp,33
 800b5e0:	d8801615 	stw	r2,88(sp)
 800b5e4:	00800044 	movi	r2,1
 800b5e8:	d8801715 	stw	r2,92(sp)
 800b5ec:	d8c01804 	addi	r3,sp,96
 800b5f0:	01400044 	movi	r5,1
 800b5f4:	003d6806 	br	800ab98 <___vfiprintf_internal_r+0x818>
 800b5f8:	d9800845 	stb	r6,33(sp)
 800b5fc:	003c5306 	br	800a74c <___vfiprintf_internal_r+0x3cc>
 800b600:	482b883a 	mov	r21,r9
 800b604:	dd000315 	stw	r20,12(sp)
 800b608:	482d883a 	mov	r22,r9
 800b60c:	003d4906 	br	800ab34 <___vfiprintf_internal_r+0x7b4>
 800b610:	d9800845 	stb	r6,33(sp)
 800b614:	003cd906 	br	800a97c <___vfiprintf_internal_r+0x5fc>
 800b618:	d9800845 	stb	r6,33(sp)
 800b61c:	003ce906 	br	800a9c4 <___vfiprintf_internal_r+0x644>
 800b620:	d9800845 	stb	r6,33(sp)
 800b624:	003c8a06 	br	800a850 <___vfiprintf_internal_r+0x4d0>
 800b628:	d9800845 	stb	r6,33(sp)
 800b62c:	003dd206 	br	800ad78 <___vfiprintf_internal_r+0x9f8>
 800b630:	d9800845 	stb	r6,33(sp)
 800b634:	003ddd06 	br	800adac <___vfiprintf_internal_r+0xa2c>
 800b638:	301f883a 	mov	r15,r6
 800b63c:	39c95104 	addi	r7,r7,9540
 800b640:	003f2306 	br	800b2d0 <___vfiprintf_internal_r+0xf50>
 800b644:	d9800845 	stb	r6,33(sp)
 800b648:	003d1606 	br	800aaa4 <___vfiprintf_internal_r+0x724>
 800b64c:	d9800845 	stb	r6,33(sp)
 800b650:	003d0406 	br	800aa64 <___vfiprintf_internal_r+0x6e4>
 800b654:	d9800845 	stb	r6,33(sp)
 800b658:	003cb806 	br	800a93c <___vfiprintf_internal_r+0x5bc>
 800b65c:	d9800845 	stb	r6,33(sp)
 800b660:	003ddf06 	br	800ade0 <___vfiprintf_internal_r+0xa60>
 800b664:	29800044 	addi	r6,r5,1
 800b668:	39c95104 	addi	r7,r7,9540
 800b66c:	003db106 	br	800ad34 <___vfiprintf_internal_r+0x9b4>
 800b670:	181b883a 	mov	r13,r3
 800b674:	280d883a 	mov	r6,r5
 800b678:	39c94d04 	addi	r7,r7,9524
 800b67c:	003e7306 	br	800b04c <___vfiprintf_internal_r+0xccc>
 800b680:	00bfffc4 	movi	r2,-1
 800b684:	d8800015 	stw	r2,0(sp)
 800b688:	003c1306 	br	800a6d8 <___vfiprintf_internal_r+0x358>
 800b68c:	d8800317 	ldw	r2,12(sp)
 800b690:	12400017 	ldw	r9,0(r2)
 800b694:	15c00104 	addi	r23,r2,4
 800b698:	4800010e 	bge	r9,zero,800b6a0 <___vfiprintf_internal_r+0x1320>
 800b69c:	027fffc4 	movi	r9,-1
 800b6a0:	e0800043 	ldbu	r2,1(fp)
 800b6a4:	ddc00315 	stw	r23,12(sp)
 800b6a8:	1839883a 	mov	fp,r3
 800b6ac:	10803fcc 	andi	r2,r2,255
 800b6b0:	1080201c 	xori	r2,r2,128
 800b6b4:	10bfe004 	addi	r2,r2,-128
 800b6b8:	003b8006 	br	800a4bc <___vfiprintf_internal_r+0x13c>

0800b6bc <__vfiprintf_internal>:
 800b6bc:	00820074 	movhi	r2,2049
 800b6c0:	300f883a 	mov	r7,r6
 800b6c4:	280d883a 	mov	r6,r5
 800b6c8:	200b883a 	mov	r5,r4
 800b6cc:	11114117 	ldw	r4,17668(r2)
 800b6d0:	800a3801 	jmpi	800a380 <___vfiprintf_internal_r>

0800b6d4 <__sbprintf>:
 800b6d4:	2880030b 	ldhu	r2,12(r5)
 800b6d8:	2b001917 	ldw	r12,100(r5)
 800b6dc:	2ac0038b 	ldhu	r11,14(r5)
 800b6e0:	2a800717 	ldw	r10,28(r5)
 800b6e4:	2a400917 	ldw	r9,36(r5)
 800b6e8:	defee204 	addi	sp,sp,-1144
 800b6ec:	da001a04 	addi	r8,sp,104
 800b6f0:	00c10004 	movi	r3,1024
 800b6f4:	dc011a15 	stw	r16,1128(sp)
 800b6f8:	10bfff4c 	andi	r2,r2,65533
 800b6fc:	2821883a 	mov	r16,r5
 800b700:	d80b883a 	mov	r5,sp
 800b704:	dc811c15 	stw	r18,1136(sp)
 800b708:	dc411b15 	stw	r17,1132(sp)
 800b70c:	dfc11d15 	stw	ra,1140(sp)
 800b710:	2025883a 	mov	r18,r4
 800b714:	d880030d 	sth	r2,12(sp)
 800b718:	db001915 	stw	r12,100(sp)
 800b71c:	dac0038d 	sth	r11,14(sp)
 800b720:	da800715 	stw	r10,28(sp)
 800b724:	da400915 	stw	r9,36(sp)
 800b728:	da000015 	stw	r8,0(sp)
 800b72c:	da000415 	stw	r8,16(sp)
 800b730:	d8c00215 	stw	r3,8(sp)
 800b734:	d8c00515 	stw	r3,20(sp)
 800b738:	d8000615 	stw	zero,24(sp)
 800b73c:	800a3800 	call	800a380 <___vfiprintf_internal_r>
 800b740:	1023883a 	mov	r17,r2
 800b744:	10000d0e 	bge	r2,zero,800b77c <__sbprintf+0xa8>
 800b748:	d880030b 	ldhu	r2,12(sp)
 800b74c:	1080100c 	andi	r2,r2,64
 800b750:	10000326 	beq	r2,zero,800b760 <__sbprintf+0x8c>
 800b754:	8080030b 	ldhu	r2,12(r16)
 800b758:	10801014 	ori	r2,r2,64
 800b75c:	8080030d 	sth	r2,12(r16)
 800b760:	8805883a 	mov	r2,r17
 800b764:	dfc11d17 	ldw	ra,1140(sp)
 800b768:	dc811c17 	ldw	r18,1136(sp)
 800b76c:	dc411b17 	ldw	r17,1132(sp)
 800b770:	dc011a17 	ldw	r16,1128(sp)
 800b774:	dec11e04 	addi	sp,sp,1144
 800b778:	f800283a 	ret
 800b77c:	d80b883a 	mov	r5,sp
 800b780:	9009883a 	mov	r4,r18
 800b784:	8006d440 	call	8006d44 <_fflush_r>
 800b788:	103fef26 	beq	r2,zero,800b748 <__sbprintf+0x74>
 800b78c:	047fffc4 	movi	r17,-1
 800b790:	003fed06 	br	800b748 <__sbprintf+0x74>

0800b794 <__swbuf_r>:
 800b794:	defffb04 	addi	sp,sp,-20
 800b798:	dc800215 	stw	r18,8(sp)
 800b79c:	dc400115 	stw	r17,4(sp)
 800b7a0:	dc000015 	stw	r16,0(sp)
 800b7a4:	dfc00415 	stw	ra,16(sp)
 800b7a8:	dcc00315 	stw	r19,12(sp)
 800b7ac:	2023883a 	mov	r17,r4
 800b7b0:	2825883a 	mov	r18,r5
 800b7b4:	3021883a 	mov	r16,r6
 800b7b8:	20000226 	beq	r4,zero,800b7c4 <__swbuf_r+0x30>
 800b7bc:	20800e17 	ldw	r2,56(r4)
 800b7c0:	10003e26 	beq	r2,zero,800b8bc <__swbuf_r+0x128>
 800b7c4:	80800617 	ldw	r2,24(r16)
 800b7c8:	80c0030b 	ldhu	r3,12(r16)
 800b7cc:	80800215 	stw	r2,8(r16)
 800b7d0:	1880020c 	andi	r2,r3,8
 800b7d4:	10001f26 	beq	r2,zero,800b854 <__swbuf_r+0xc0>
 800b7d8:	80800417 	ldw	r2,16(r16)
 800b7dc:	10001d26 	beq	r2,zero,800b854 <__swbuf_r+0xc0>
 800b7e0:	1908000c 	andi	r4,r3,8192
 800b7e4:	94c03fcc 	andi	r19,r18,255
 800b7e8:	20002326 	beq	r4,zero,800b878 <__swbuf_r+0xe4>
 800b7ec:	80c00017 	ldw	r3,0(r16)
 800b7f0:	81000517 	ldw	r4,20(r16)
 800b7f4:	1885c83a 	sub	r2,r3,r2
 800b7f8:	1100290e 	bge	r2,r4,800b8a0 <__swbuf_r+0x10c>
 800b7fc:	10800044 	addi	r2,r2,1
 800b800:	81000217 	ldw	r4,8(r16)
 800b804:	19400044 	addi	r5,r3,1
 800b808:	81400015 	stw	r5,0(r16)
 800b80c:	213fffc4 	addi	r4,r4,-1
 800b810:	81000215 	stw	r4,8(r16)
 800b814:	1c800005 	stb	r18,0(r3)
 800b818:	80c00517 	ldw	r3,20(r16)
 800b81c:	18802926 	beq	r3,r2,800b8c4 <__swbuf_r+0x130>
 800b820:	8080030b 	ldhu	r2,12(r16)
 800b824:	1080004c 	andi	r2,r2,1
 800b828:	10000226 	beq	r2,zero,800b834 <__swbuf_r+0xa0>
 800b82c:	98800298 	cmpnei	r2,r19,10
 800b830:	10002426 	beq	r2,zero,800b8c4 <__swbuf_r+0x130>
 800b834:	9805883a 	mov	r2,r19
 800b838:	dfc00417 	ldw	ra,16(sp)
 800b83c:	dcc00317 	ldw	r19,12(sp)
 800b840:	dc800217 	ldw	r18,8(sp)
 800b844:	dc400117 	ldw	r17,4(sp)
 800b848:	dc000017 	ldw	r16,0(sp)
 800b84c:	dec00504 	addi	sp,sp,20
 800b850:	f800283a 	ret
 800b854:	800b883a 	mov	r5,r16
 800b858:	8809883a 	mov	r4,r17
 800b85c:	80050c00 	call	80050c0 <__swsetup_r>
 800b860:	10001c1e 	bne	r2,zero,800b8d4 <__swbuf_r+0x140>
 800b864:	80c0030b 	ldhu	r3,12(r16)
 800b868:	80800417 	ldw	r2,16(r16)
 800b86c:	94c03fcc 	andi	r19,r18,255
 800b870:	1908000c 	andi	r4,r3,8192
 800b874:	203fdd1e 	bne	r4,zero,800b7ec <__swbuf_r+0x58>
 800b878:	81001917 	ldw	r4,100(r16)
 800b87c:	18c80014 	ori	r3,r3,8192
 800b880:	0177ffc4 	movi	r5,-8193
 800b884:	2148703a 	and	r4,r4,r5
 800b888:	80c0030d 	sth	r3,12(r16)
 800b88c:	80c00017 	ldw	r3,0(r16)
 800b890:	81001915 	stw	r4,100(r16)
 800b894:	81000517 	ldw	r4,20(r16)
 800b898:	1885c83a 	sub	r2,r3,r2
 800b89c:	113fd716 	blt	r2,r4,800b7fc <__swbuf_r+0x68>
 800b8a0:	800b883a 	mov	r5,r16
 800b8a4:	8809883a 	mov	r4,r17
 800b8a8:	8006d440 	call	8006d44 <_fflush_r>
 800b8ac:	1000091e 	bne	r2,zero,800b8d4 <__swbuf_r+0x140>
 800b8b0:	80c00017 	ldw	r3,0(r16)
 800b8b4:	00800044 	movi	r2,1
 800b8b8:	003fd106 	br	800b800 <__swbuf_r+0x6c>
 800b8bc:	80070d80 	call	80070d8 <__sinit>
 800b8c0:	003fc006 	br	800b7c4 <__swbuf_r+0x30>
 800b8c4:	800b883a 	mov	r5,r16
 800b8c8:	8809883a 	mov	r4,r17
 800b8cc:	8006d440 	call	8006d44 <_fflush_r>
 800b8d0:	103fd826 	beq	r2,zero,800b834 <__swbuf_r+0xa0>
 800b8d4:	04ffffc4 	movi	r19,-1
 800b8d8:	003fd606 	br	800b834 <__swbuf_r+0xa0>

0800b8dc <__swbuf>:
 800b8dc:	00820074 	movhi	r2,2049
 800b8e0:	280d883a 	mov	r6,r5
 800b8e4:	200b883a 	mov	r5,r4
 800b8e8:	11114117 	ldw	r4,17668(r2)
 800b8ec:	800b7941 	jmpi	800b794 <__swbuf_r>

0800b8f0 <_write_r>:
 800b8f0:	defffe04 	addi	sp,sp,-8
 800b8f4:	2805883a 	mov	r2,r5
 800b8f8:	dc000015 	stw	r16,0(sp)
 800b8fc:	300b883a 	mov	r5,r6
 800b900:	2021883a 	mov	r16,r4
 800b904:	380d883a 	mov	r6,r7
 800b908:	1009883a 	mov	r4,r2
 800b90c:	00820074 	movhi	r2,2049
 800b910:	dfc00115 	stw	ra,4(sp)
 800b914:	10185e15 	stw	zero,24952(r2)
 800b918:	801015c0 	call	801015c <write>
 800b91c:	10ffffd8 	cmpnei	r3,r2,-1
 800b920:	18000426 	beq	r3,zero,800b934 <_write_r+0x44>
 800b924:	dfc00117 	ldw	ra,4(sp)
 800b928:	dc000017 	ldw	r16,0(sp)
 800b92c:	dec00204 	addi	sp,sp,8
 800b930:	f800283a 	ret
 800b934:	00c20074 	movhi	r3,2049
 800b938:	18d85e17 	ldw	r3,24952(r3)
 800b93c:	183ff926 	beq	r3,zero,800b924 <_write_r+0x34>
 800b940:	80c00015 	stw	r3,0(r16)
 800b944:	dfc00117 	ldw	ra,4(sp)
 800b948:	dc000017 	ldw	r16,0(sp)
 800b94c:	dec00204 	addi	sp,sp,8
 800b950:	f800283a 	ret

0800b954 <_close_r>:
 800b954:	defffe04 	addi	sp,sp,-8
 800b958:	dc000015 	stw	r16,0(sp)
 800b95c:	00820074 	movhi	r2,2049
 800b960:	2021883a 	mov	r16,r4
 800b964:	2809883a 	mov	r4,r5
 800b968:	dfc00115 	stw	ra,4(sp)
 800b96c:	10185e15 	stw	zero,24952(r2)
 800b970:	800f7300 	call	800f730 <close>
 800b974:	10ffffd8 	cmpnei	r3,r2,-1
 800b978:	18000426 	beq	r3,zero,800b98c <_close_r+0x38>
 800b97c:	dfc00117 	ldw	ra,4(sp)
 800b980:	dc000017 	ldw	r16,0(sp)
 800b984:	dec00204 	addi	sp,sp,8
 800b988:	f800283a 	ret
 800b98c:	00c20074 	movhi	r3,2049
 800b990:	18d85e17 	ldw	r3,24952(r3)
 800b994:	183ff926 	beq	r3,zero,800b97c <_close_r+0x28>
 800b998:	80c00015 	stw	r3,0(r16)
 800b99c:	dfc00117 	ldw	ra,4(sp)
 800b9a0:	dc000017 	ldw	r16,0(sp)
 800b9a4:	dec00204 	addi	sp,sp,8
 800b9a8:	f800283a 	ret

0800b9ac <_calloc_r>:
 800b9ac:	defffe04 	addi	sp,sp,-8
 800b9b0:	2805883a 	mov	r2,r5
 800b9b4:	dc000015 	stw	r16,0(sp)
 800b9b8:	300b883a 	mov	r5,r6
 800b9bc:	2021883a 	mov	r16,r4
 800b9c0:	1009883a 	mov	r4,r2
 800b9c4:	dfc00115 	stw	ra,4(sp)
 800b9c8:	8002c3c0 	call	8002c3c <__mulsi3>
 800b9cc:	100b883a 	mov	r5,r2
 800b9d0:	8009883a 	mov	r4,r16
 800b9d4:	8007d580 	call	8007d58 <_malloc_r>
 800b9d8:	1007883a 	mov	r3,r2
 800b9dc:	10000c26 	beq	r2,zero,800ba10 <_calloc_r+0x64>
 800b9e0:	11bfff17 	ldw	r6,-4(r2)
 800b9e4:	00bfff04 	movi	r2,-4
 800b9e8:	308c703a 	and	r6,r6,r2
 800b9ec:	31bfff04 	addi	r6,r6,-4
 800b9f0:	30800968 	cmpgeui	r2,r6,37
 800b9f4:	1000151e 	bne	r2,zero,800ba4c <_calloc_r+0xa0>
 800b9f8:	30800530 	cmpltui	r2,r6,20
 800b9fc:	10000926 	beq	r2,zero,800ba24 <_calloc_r+0x78>
 800ba00:	1805883a 	mov	r2,r3
 800ba04:	10000015 	stw	zero,0(r2)
 800ba08:	10000115 	stw	zero,4(r2)
 800ba0c:	10000215 	stw	zero,8(r2)
 800ba10:	1805883a 	mov	r2,r3
 800ba14:	dfc00117 	ldw	ra,4(sp)
 800ba18:	dc000017 	ldw	r16,0(sp)
 800ba1c:	dec00204 	addi	sp,sp,8
 800ba20:	f800283a 	ret
 800ba24:	18000015 	stw	zero,0(r3)
 800ba28:	18000115 	stw	zero,4(r3)
 800ba2c:	30800728 	cmpgeui	r2,r6,28
 800ba30:	10000b26 	beq	r2,zero,800ba60 <_calloc_r+0xb4>
 800ba34:	18000215 	stw	zero,8(r3)
 800ba38:	18000315 	stw	zero,12(r3)
 800ba3c:	31800920 	cmpeqi	r6,r6,36
 800ba40:	3000091e 	bne	r6,zero,800ba68 <_calloc_r+0xbc>
 800ba44:	18800404 	addi	r2,r3,16
 800ba48:	003fee06 	br	800ba04 <_calloc_r+0x58>
 800ba4c:	1809883a 	mov	r4,r3
 800ba50:	000b883a 	mov	r5,zero
 800ba54:	80088600 	call	8008860 <memset>
 800ba58:	1007883a 	mov	r3,r2
 800ba5c:	003fec06 	br	800ba10 <_calloc_r+0x64>
 800ba60:	18800204 	addi	r2,r3,8
 800ba64:	003fe706 	br	800ba04 <_calloc_r+0x58>
 800ba68:	18000415 	stw	zero,16(r3)
 800ba6c:	18800604 	addi	r2,r3,24
 800ba70:	18000515 	stw	zero,20(r3)
 800ba74:	003fe306 	br	800ba04 <_calloc_r+0x58>

0800ba78 <_fclose_r>:
 800ba78:	defffc04 	addi	sp,sp,-16
 800ba7c:	dfc00315 	stw	ra,12(sp)
 800ba80:	dc800215 	stw	r18,8(sp)
 800ba84:	dc400115 	stw	r17,4(sp)
 800ba88:	dc000015 	stw	r16,0(sp)
 800ba8c:	28000726 	beq	r5,zero,800baac <_fclose_r+0x34>
 800ba90:	2023883a 	mov	r17,r4
 800ba94:	2821883a 	mov	r16,r5
 800ba98:	20000226 	beq	r4,zero,800baa4 <_fclose_r+0x2c>
 800ba9c:	20800e17 	ldw	r2,56(r4)
 800baa0:	10002726 	beq	r2,zero,800bb40 <_fclose_r+0xc8>
 800baa4:	8080030f 	ldh	r2,12(r16)
 800baa8:	1000081e 	bne	r2,zero,800bacc <_fclose_r+0x54>
 800baac:	0025883a 	mov	r18,zero
 800bab0:	9005883a 	mov	r2,r18
 800bab4:	dfc00317 	ldw	ra,12(sp)
 800bab8:	dc800217 	ldw	r18,8(sp)
 800babc:	dc400117 	ldw	r17,4(sp)
 800bac0:	dc000017 	ldw	r16,0(sp)
 800bac4:	dec00404 	addi	sp,sp,16
 800bac8:	f800283a 	ret
 800bacc:	800b883a 	mov	r5,r16
 800bad0:	8809883a 	mov	r4,r17
 800bad4:	8006b1c0 	call	8006b1c <__sflush_r>
 800bad8:	1025883a 	mov	r18,r2
 800badc:	80800b17 	ldw	r2,44(r16)
 800bae0:	10000426 	beq	r2,zero,800baf4 <_fclose_r+0x7c>
 800bae4:	81400717 	ldw	r5,28(r16)
 800bae8:	8809883a 	mov	r4,r17
 800baec:	103ee83a 	callr	r2
 800baf0:	10001716 	blt	r2,zero,800bb50 <_fclose_r+0xd8>
 800baf4:	8080030b 	ldhu	r2,12(r16)
 800baf8:	1080200c 	andi	r2,r2,128
 800bafc:	1000181e 	bne	r2,zero,800bb60 <_fclose_r+0xe8>
 800bb00:	81400c17 	ldw	r5,48(r16)
 800bb04:	28000526 	beq	r5,zero,800bb1c <_fclose_r+0xa4>
 800bb08:	80801004 	addi	r2,r16,64
 800bb0c:	28800226 	beq	r5,r2,800bb18 <_fclose_r+0xa0>
 800bb10:	8809883a 	mov	r4,r17
 800bb14:	800723c0 	call	800723c <_free_r>
 800bb18:	80000c15 	stw	zero,48(r16)
 800bb1c:	81401117 	ldw	r5,68(r16)
 800bb20:	28000326 	beq	r5,zero,800bb30 <_fclose_r+0xb8>
 800bb24:	8809883a 	mov	r4,r17
 800bb28:	800723c0 	call	800723c <_free_r>
 800bb2c:	80001115 	stw	zero,68(r16)
 800bb30:	80070e80 	call	80070e8 <__sfp_lock_acquire>
 800bb34:	8000030d 	sth	zero,12(r16)
 800bb38:	80070ec0 	call	80070ec <__sfp_lock_release>
 800bb3c:	003fdc06 	br	800bab0 <_fclose_r+0x38>
 800bb40:	80070d80 	call	80070d8 <__sinit>
 800bb44:	8080030f 	ldh	r2,12(r16)
 800bb48:	103fd826 	beq	r2,zero,800baac <_fclose_r+0x34>
 800bb4c:	003fdf06 	br	800bacc <_fclose_r+0x54>
 800bb50:	8080030b 	ldhu	r2,12(r16)
 800bb54:	04bfffc4 	movi	r18,-1
 800bb58:	1080200c 	andi	r2,r2,128
 800bb5c:	103fe826 	beq	r2,zero,800bb00 <_fclose_r+0x88>
 800bb60:	81400417 	ldw	r5,16(r16)
 800bb64:	8809883a 	mov	r4,r17
 800bb68:	800723c0 	call	800723c <_free_r>
 800bb6c:	003fe406 	br	800bb00 <_fclose_r+0x88>

0800bb70 <fclose>:
 800bb70:	00820074 	movhi	r2,2049
 800bb74:	200b883a 	mov	r5,r4
 800bb78:	11114117 	ldw	r4,17668(r2)
 800bb7c:	800ba781 	jmpi	800ba78 <_fclose_r>

0800bb80 <__fputwc>:
 800bb80:	defff904 	addi	sp,sp,-28
 800bb84:	dcc00415 	stw	r19,16(sp)
 800bb88:	dc800315 	stw	r18,12(sp)
 800bb8c:	dc000115 	stw	r16,4(sp)
 800bb90:	dfc00615 	stw	ra,24(sp)
 800bb94:	dd000515 	stw	r20,20(sp)
 800bb98:	dc400215 	stw	r17,8(sp)
 800bb9c:	2025883a 	mov	r18,r4
 800bba0:	2827883a 	mov	r19,r5
 800bba4:	3021883a 	mov	r16,r6
 800bba8:	800be980 	call	800be98 <__locale_mb_cur_max>
 800bbac:	10800058 	cmpnei	r2,r2,1
 800bbb0:	1000071e 	bne	r2,zero,800bbd0 <__fputwc+0x50>
 800bbb4:	98bfffc4 	addi	r2,r19,-1
 800bbb8:	10803fe8 	cmpgeui	r2,r2,255
 800bbbc:	1000041e 	bne	r2,zero,800bbd0 <__fputwc+0x50>
 800bbc0:	980b883a 	mov	r5,r19
 800bbc4:	dcc000c5 	stb	r19,3(sp)
 800bbc8:	05000044 	movi	r20,1
 800bbcc:	00000a06 	br	800bbf8 <__fputwc+0x78>
 800bbd0:	81c01704 	addi	r7,r16,92
 800bbd4:	980d883a 	mov	r6,r19
 800bbd8:	d94000c4 	addi	r5,sp,3
 800bbdc:	9009883a 	mov	r4,r18
 800bbe0:	800c0a80 	call	800c0a8 <_wcrtomb_r>
 800bbe4:	1029883a 	mov	r20,r2
 800bbe8:	10bfffd8 	cmpnei	r2,r2,-1
 800bbec:	10003426 	beq	r2,zero,800bcc0 <__fputwc+0x140>
 800bbf0:	a0002926 	beq	r20,zero,800bc98 <__fputwc+0x118>
 800bbf4:	d94000c3 	ldbu	r5,3(sp)
 800bbf8:	0023883a 	mov	r17,zero
 800bbfc:	00000a06 	br	800bc28 <__fputwc+0xa8>
 800bc00:	80800017 	ldw	r2,0(r16)
 800bc04:	11400005 	stb	r5,0(r2)
 800bc08:	80800017 	ldw	r2,0(r16)
 800bc0c:	10800044 	addi	r2,r2,1
 800bc10:	80800015 	stw	r2,0(r16)
 800bc14:	8c400044 	addi	r17,r17,1
 800bc18:	d88000c4 	addi	r2,sp,3
 800bc1c:	1445883a 	add	r2,r2,r17
 800bc20:	8d001d2e 	bgeu	r17,r20,800bc98 <__fputwc+0x118>
 800bc24:	11400003 	ldbu	r5,0(r2)
 800bc28:	80800217 	ldw	r2,8(r16)
 800bc2c:	10bfffc4 	addi	r2,r2,-1
 800bc30:	80800215 	stw	r2,8(r16)
 800bc34:	103ff20e 	bge	r2,zero,800bc00 <__fputwc+0x80>
 800bc38:	80c00617 	ldw	r3,24(r16)
 800bc3c:	10c01016 	blt	r2,r3,800bc80 <__fputwc+0x100>
 800bc40:	80800017 	ldw	r2,0(r16)
 800bc44:	11400005 	stb	r5,0(r2)
 800bc48:	80800017 	ldw	r2,0(r16)
 800bc4c:	10c00003 	ldbu	r3,0(r2)
 800bc50:	10800044 	addi	r2,r2,1
 800bc54:	18c002a0 	cmpeqi	r3,r3,10
 800bc58:	183fed26 	beq	r3,zero,800bc10 <__fputwc+0x90>
 800bc5c:	800d883a 	mov	r6,r16
 800bc60:	01400284 	movi	r5,10
 800bc64:	9009883a 	mov	r4,r18
 800bc68:	800b7940 	call	800b794 <__swbuf_r>
 800bc6c:	10bfffe0 	cmpeqi	r2,r2,-1
 800bc70:	10803fcc 	andi	r2,r2,255
 800bc74:	103fe726 	beq	r2,zero,800bc14 <__fputwc+0x94>
 800bc78:	053fffc4 	movi	r20,-1
 800bc7c:	00000706 	br	800bc9c <__fputwc+0x11c>
 800bc80:	29403fcc 	andi	r5,r5,255
 800bc84:	800d883a 	mov	r6,r16
 800bc88:	9009883a 	mov	r4,r18
 800bc8c:	800b7940 	call	800b794 <__swbuf_r>
 800bc90:	10bfffe0 	cmpeqi	r2,r2,-1
 800bc94:	003ff606 	br	800bc70 <__fputwc+0xf0>
 800bc98:	9829883a 	mov	r20,r19
 800bc9c:	a005883a 	mov	r2,r20
 800bca0:	dfc00617 	ldw	ra,24(sp)
 800bca4:	dd000517 	ldw	r20,20(sp)
 800bca8:	dcc00417 	ldw	r19,16(sp)
 800bcac:	dc800317 	ldw	r18,12(sp)
 800bcb0:	dc400217 	ldw	r17,8(sp)
 800bcb4:	dc000117 	ldw	r16,4(sp)
 800bcb8:	dec00704 	addi	sp,sp,28
 800bcbc:	f800283a 	ret
 800bcc0:	8080030b 	ldhu	r2,12(r16)
 800bcc4:	10801014 	ori	r2,r2,64
 800bcc8:	8080030d 	sth	r2,12(r16)
 800bccc:	003ff306 	br	800bc9c <__fputwc+0x11c>

0800bcd0 <_fputwc_r>:
 800bcd0:	3080030b 	ldhu	r2,12(r6)
 800bcd4:	10c8000c 	andi	r3,r2,8192
 800bcd8:	1800051e 	bne	r3,zero,800bcf0 <_fputwc_r+0x20>
 800bcdc:	30c01917 	ldw	r3,100(r6)
 800bce0:	10880014 	ori	r2,r2,8192
 800bce4:	3080030d 	sth	r2,12(r6)
 800bce8:	18880014 	ori	r2,r3,8192
 800bcec:	30801915 	stw	r2,100(r6)
 800bcf0:	800bb801 	jmpi	800bb80 <__fputwc>

0800bcf4 <fputwc>:
 800bcf4:	defffc04 	addi	sp,sp,-16
 800bcf8:	00820074 	movhi	r2,2049
 800bcfc:	dc000115 	stw	r16,4(sp)
 800bd00:	14114117 	ldw	r16,17668(r2)
 800bd04:	dc400215 	stw	r17,8(sp)
 800bd08:	dfc00315 	stw	ra,12(sp)
 800bd0c:	2023883a 	mov	r17,r4
 800bd10:	80000226 	beq	r16,zero,800bd1c <fputwc+0x28>
 800bd14:	80800e17 	ldw	r2,56(r16)
 800bd18:	10001026 	beq	r2,zero,800bd5c <fputwc+0x68>
 800bd1c:	2880030b 	ldhu	r2,12(r5)
 800bd20:	10c8000c 	andi	r3,r2,8192
 800bd24:	1800051e 	bne	r3,zero,800bd3c <fputwc+0x48>
 800bd28:	28c01917 	ldw	r3,100(r5)
 800bd2c:	10880014 	ori	r2,r2,8192
 800bd30:	2880030d 	sth	r2,12(r5)
 800bd34:	18880014 	ori	r2,r3,8192
 800bd38:	28801915 	stw	r2,100(r5)
 800bd3c:	280d883a 	mov	r6,r5
 800bd40:	8009883a 	mov	r4,r16
 800bd44:	880b883a 	mov	r5,r17
 800bd48:	dfc00317 	ldw	ra,12(sp)
 800bd4c:	dc400217 	ldw	r17,8(sp)
 800bd50:	dc000117 	ldw	r16,4(sp)
 800bd54:	dec00404 	addi	sp,sp,16
 800bd58:	800bb801 	jmpi	800bb80 <__fputwc>
 800bd5c:	8009883a 	mov	r4,r16
 800bd60:	d9400015 	stw	r5,0(sp)
 800bd64:	80070d80 	call	80070d8 <__sinit>
 800bd68:	d9400017 	ldw	r5,0(sp)
 800bd6c:	003feb06 	br	800bd1c <fputwc+0x28>

0800bd70 <_fstat_r>:
 800bd70:	defffe04 	addi	sp,sp,-8
 800bd74:	2805883a 	mov	r2,r5
 800bd78:	dc000015 	stw	r16,0(sp)
 800bd7c:	300b883a 	mov	r5,r6
 800bd80:	2021883a 	mov	r16,r4
 800bd84:	1009883a 	mov	r4,r2
 800bd88:	00820074 	movhi	r2,2049
 800bd8c:	dfc00115 	stw	ra,4(sp)
 800bd90:	10185e15 	stw	zero,24952(r2)
 800bd94:	800f8740 	call	800f874 <fstat>
 800bd98:	10ffffd8 	cmpnei	r3,r2,-1
 800bd9c:	18000426 	beq	r3,zero,800bdb0 <_fstat_r+0x40>
 800bda0:	dfc00117 	ldw	ra,4(sp)
 800bda4:	dc000017 	ldw	r16,0(sp)
 800bda8:	dec00204 	addi	sp,sp,8
 800bdac:	f800283a 	ret
 800bdb0:	00c20074 	movhi	r3,2049
 800bdb4:	18d85e17 	ldw	r3,24952(r3)
 800bdb8:	183ff926 	beq	r3,zero,800bda0 <_fstat_r+0x30>
 800bdbc:	80c00015 	stw	r3,0(r16)
 800bdc0:	dfc00117 	ldw	ra,4(sp)
 800bdc4:	dc000017 	ldw	r16,0(sp)
 800bdc8:	dec00204 	addi	sp,sp,8
 800bdcc:	f800283a 	ret

0800bdd0 <_isatty_r>:
 800bdd0:	defffe04 	addi	sp,sp,-8
 800bdd4:	dc000015 	stw	r16,0(sp)
 800bdd8:	00820074 	movhi	r2,2049
 800bddc:	2021883a 	mov	r16,r4
 800bde0:	2809883a 	mov	r4,r5
 800bde4:	dfc00115 	stw	ra,4(sp)
 800bde8:	10185e15 	stw	zero,24952(r2)
 800bdec:	800f96c0 	call	800f96c <isatty>
 800bdf0:	10ffffd8 	cmpnei	r3,r2,-1
 800bdf4:	18000426 	beq	r3,zero,800be08 <_isatty_r+0x38>
 800bdf8:	dfc00117 	ldw	ra,4(sp)
 800bdfc:	dc000017 	ldw	r16,0(sp)
 800be00:	dec00204 	addi	sp,sp,8
 800be04:	f800283a 	ret
 800be08:	00c20074 	movhi	r3,2049
 800be0c:	18d85e17 	ldw	r3,24952(r3)
 800be10:	183ff926 	beq	r3,zero,800bdf8 <_isatty_r+0x28>
 800be14:	80c00015 	stw	r3,0(r16)
 800be18:	dfc00117 	ldw	ra,4(sp)
 800be1c:	dc000017 	ldw	r16,0(sp)
 800be20:	dec00204 	addi	sp,sp,8
 800be24:	f800283a 	ret

0800be28 <_setlocale_r>:
 800be28:	30001826 	beq	r6,zero,800be8c <_setlocale_r+0x64>
 800be2c:	01420074 	movhi	r5,2049
 800be30:	defffe04 	addi	sp,sp,-8
 800be34:	29495604 	addi	r5,r5,9560
 800be38:	3009883a 	mov	r4,r6
 800be3c:	dc000015 	stw	r16,0(sp)
 800be40:	dfc00115 	stw	ra,4(sp)
 800be44:	3021883a 	mov	r16,r6
 800be48:	800bfd00 	call	800bfd0 <strcmp>
 800be4c:	1000061e 	bne	r2,zero,800be68 <_setlocale_r+0x40>
 800be50:	00820074 	movhi	r2,2049
 800be54:	10895504 	addi	r2,r2,9556
 800be58:	dfc00117 	ldw	ra,4(sp)
 800be5c:	dc000017 	ldw	r16,0(sp)
 800be60:	dec00204 	addi	sp,sp,8
 800be64:	f800283a 	ret
 800be68:	01420074 	movhi	r5,2049
 800be6c:	29495504 	addi	r5,r5,9556
 800be70:	8009883a 	mov	r4,r16
 800be74:	800bfd00 	call	800bfd0 <strcmp>
 800be78:	103ff526 	beq	r2,zero,800be50 <_setlocale_r+0x28>
 800be7c:	80800003 	ldbu	r2,0(r16)
 800be80:	103ff326 	beq	r2,zero,800be50 <_setlocale_r+0x28>
 800be84:	0005883a 	mov	r2,zero
 800be88:	003ff306 	br	800be58 <_setlocale_r+0x30>
 800be8c:	00820074 	movhi	r2,2049
 800be90:	10895504 	addi	r2,r2,9556
 800be94:	f800283a 	ret

0800be98 <__locale_mb_cur_max>:
 800be98:	00820074 	movhi	r2,2049
 800be9c:	108ca807 	ldb	r2,12960(r2)
 800bea0:	f800283a 	ret

0800bea4 <setlocale>:
 800bea4:	00820074 	movhi	r2,2049
 800bea8:	280d883a 	mov	r6,r5
 800beac:	200b883a 	mov	r5,r4
 800beb0:	11114117 	ldw	r4,17668(r2)
 800beb4:	800be281 	jmpi	800be28 <_setlocale_r>

0800beb8 <_lseek_r>:
 800beb8:	defffe04 	addi	sp,sp,-8
 800bebc:	2805883a 	mov	r2,r5
 800bec0:	dc000015 	stw	r16,0(sp)
 800bec4:	300b883a 	mov	r5,r6
 800bec8:	2021883a 	mov	r16,r4
 800becc:	380d883a 	mov	r6,r7
 800bed0:	1009883a 	mov	r4,r2
 800bed4:	00820074 	movhi	r2,2049
 800bed8:	dfc00115 	stw	ra,4(sp)
 800bedc:	10185e15 	stw	zero,24952(r2)
 800bee0:	800fb440 	call	800fb44 <lseek>
 800bee4:	10ffffd8 	cmpnei	r3,r2,-1
 800bee8:	18000426 	beq	r3,zero,800befc <_lseek_r+0x44>
 800beec:	dfc00117 	ldw	ra,4(sp)
 800bef0:	dc000017 	ldw	r16,0(sp)
 800bef4:	dec00204 	addi	sp,sp,8
 800bef8:	f800283a 	ret
 800befc:	00c20074 	movhi	r3,2049
 800bf00:	18d85e17 	ldw	r3,24952(r3)
 800bf04:	183ff926 	beq	r3,zero,800beec <_lseek_r+0x34>
 800bf08:	80c00015 	stw	r3,0(r16)
 800bf0c:	dfc00117 	ldw	ra,4(sp)
 800bf10:	dc000017 	ldw	r16,0(sp)
 800bf14:	dec00204 	addi	sp,sp,8
 800bf18:	f800283a 	ret

0800bf1c <_mbtowc_r>:
 800bf1c:	00820074 	movhi	r2,2049
 800bf20:	108c9717 	ldw	r2,12892(r2)
 800bf24:	1000683a 	jmp	r2

0800bf28 <__ascii_mbtowc>:
 800bf28:	deffff04 	addi	sp,sp,-4
 800bf2c:	28000826 	beq	r5,zero,800bf50 <__ascii_mbtowc+0x28>
 800bf30:	30000926 	beq	r6,zero,800bf58 <__ascii_mbtowc+0x30>
 800bf34:	38000b26 	beq	r7,zero,800bf64 <__ascii_mbtowc+0x3c>
 800bf38:	30800003 	ldbu	r2,0(r6)
 800bf3c:	28800015 	stw	r2,0(r5)
 800bf40:	30800003 	ldbu	r2,0(r6)
 800bf44:	1004c03a 	cmpne	r2,r2,zero
 800bf48:	dec00104 	addi	sp,sp,4
 800bf4c:	f800283a 	ret
 800bf50:	d80b883a 	mov	r5,sp
 800bf54:	303ff71e 	bne	r6,zero,800bf34 <__ascii_mbtowc+0xc>
 800bf58:	0005883a 	mov	r2,zero
 800bf5c:	dec00104 	addi	sp,sp,4
 800bf60:	f800283a 	ret
 800bf64:	00bfff84 	movi	r2,-2
 800bf68:	003ff706 	br	800bf48 <__ascii_mbtowc+0x20>

0800bf6c <_read_r>:
 800bf6c:	defffe04 	addi	sp,sp,-8
 800bf70:	2805883a 	mov	r2,r5
 800bf74:	dc000015 	stw	r16,0(sp)
 800bf78:	300b883a 	mov	r5,r6
 800bf7c:	2021883a 	mov	r16,r4
 800bf80:	380d883a 	mov	r6,r7
 800bf84:	1009883a 	mov	r4,r2
 800bf88:	00820074 	movhi	r2,2049
 800bf8c:	dfc00115 	stw	ra,4(sp)
 800bf90:	10185e15 	stw	zero,24952(r2)
 800bf94:	800fd240 	call	800fd24 <read>
 800bf98:	10ffffd8 	cmpnei	r3,r2,-1
 800bf9c:	18000426 	beq	r3,zero,800bfb0 <_read_r+0x44>
 800bfa0:	dfc00117 	ldw	ra,4(sp)
 800bfa4:	dc000017 	ldw	r16,0(sp)
 800bfa8:	dec00204 	addi	sp,sp,8
 800bfac:	f800283a 	ret
 800bfb0:	00c20074 	movhi	r3,2049
 800bfb4:	18d85e17 	ldw	r3,24952(r3)
 800bfb8:	183ff926 	beq	r3,zero,800bfa0 <_read_r+0x34>
 800bfbc:	80c00015 	stw	r3,0(r16)
 800bfc0:	dfc00117 	ldw	ra,4(sp)
 800bfc4:	dc000017 	ldw	r16,0(sp)
 800bfc8:	dec00204 	addi	sp,sp,8
 800bfcc:	f800283a 	ret

0800bfd0 <strcmp>:
 800bfd0:	2144b03a 	or	r2,r4,r5
 800bfd4:	108000cc 	andi	r2,r2,3
 800bfd8:	1000171e 	bne	r2,zero,800c038 <strcmp+0x68>
 800bfdc:	20800017 	ldw	r2,0(r4)
 800bfe0:	28c00017 	ldw	r3,0(r5)
 800bfe4:	10c0141e 	bne	r2,r3,800c038 <strcmp+0x68>
 800bfe8:	027fbff4 	movhi	r9,65279
 800bfec:	4a7fbfc4 	addi	r9,r9,-257
 800bff0:	1247883a 	add	r3,r2,r9
 800bff4:	02202074 	movhi	r8,32897
 800bff8:	0084303a 	nor	r2,zero,r2
 800bffc:	1884703a 	and	r2,r3,r2
 800c000:	42202004 	addi	r8,r8,-32640
 800c004:	1204703a 	and	r2,r2,r8
 800c008:	10000226 	beq	r2,zero,800c014 <strcmp+0x44>
 800c00c:	00002406 	br	800c0a0 <strcmp+0xd0>
 800c010:	1000231e 	bne	r2,zero,800c0a0 <strcmp+0xd0>
 800c014:	21000104 	addi	r4,r4,4
 800c018:	20c00017 	ldw	r3,0(r4)
 800c01c:	29400104 	addi	r5,r5,4
 800c020:	29800017 	ldw	r6,0(r5)
 800c024:	1a45883a 	add	r2,r3,r9
 800c028:	00ce303a 	nor	r7,zero,r3
 800c02c:	11c4703a 	and	r2,r2,r7
 800c030:	1204703a 	and	r2,r2,r8
 800c034:	19bff626 	beq	r3,r6,800c010 <strcmp+0x40>
 800c038:	20800003 	ldbu	r2,0(r4)
 800c03c:	10c03fcc 	andi	r3,r2,255
 800c040:	18c0201c 	xori	r3,r3,128
 800c044:	18ffe004 	addi	r3,r3,-128
 800c048:	18000d26 	beq	r3,zero,800c080 <strcmp+0xb0>
 800c04c:	29800007 	ldb	r6,0(r5)
 800c050:	10803fcc 	andi	r2,r2,255
 800c054:	19800326 	beq	r3,r6,800c064 <strcmp+0x94>
 800c058:	00000a06 	br	800c084 <strcmp+0xb4>
 800c05c:	29800007 	ldb	r6,0(r5)
 800c060:	11800b1e 	bne	r2,r6,800c090 <strcmp+0xc0>
 800c064:	21000044 	addi	r4,r4,1
 800c068:	20c00003 	ldbu	r3,0(r4)
 800c06c:	29400044 	addi	r5,r5,1
 800c070:	18803fcc 	andi	r2,r3,255
 800c074:	1080201c 	xori	r2,r2,128
 800c078:	10bfe004 	addi	r2,r2,-128
 800c07c:	103ff71e 	bne	r2,zero,800c05c <strcmp+0x8c>
 800c080:	0005883a 	mov	r2,zero
 800c084:	28c00003 	ldbu	r3,0(r5)
 800c088:	10c5c83a 	sub	r2,r2,r3
 800c08c:	f800283a 	ret
 800c090:	18803fcc 	andi	r2,r3,255
 800c094:	28c00003 	ldbu	r3,0(r5)
 800c098:	10c5c83a 	sub	r2,r2,r3
 800c09c:	f800283a 	ret
 800c0a0:	0005883a 	mov	r2,zero
 800c0a4:	f800283a 	ret

0800c0a8 <_wcrtomb_r>:
 800c0a8:	defffa04 	addi	sp,sp,-24
 800c0ac:	dc400415 	stw	r17,16(sp)
 800c0b0:	dc000315 	stw	r16,12(sp)
 800c0b4:	00820074 	movhi	r2,2049
 800c0b8:	dfc00515 	stw	ra,20(sp)
 800c0bc:	2021883a 	mov	r16,r4
 800c0c0:	3823883a 	mov	r17,r7
 800c0c4:	108c9617 	ldw	r2,12888(r2)
 800c0c8:	28000826 	beq	r5,zero,800c0ec <_wcrtomb_r+0x44>
 800c0cc:	103ee83a 	callr	r2
 800c0d0:	10ffffd8 	cmpnei	r3,r2,-1
 800c0d4:	18000a26 	beq	r3,zero,800c100 <_wcrtomb_r+0x58>
 800c0d8:	dfc00517 	ldw	ra,20(sp)
 800c0dc:	dc400417 	ldw	r17,16(sp)
 800c0e0:	dc000317 	ldw	r16,12(sp)
 800c0e4:	dec00604 	addi	sp,sp,24
 800c0e8:	f800283a 	ret
 800c0ec:	000d883a 	mov	r6,zero
 800c0f0:	d9400084 	addi	r5,sp,2
 800c0f4:	103ee83a 	callr	r2
 800c0f8:	10ffffd8 	cmpnei	r3,r2,-1
 800c0fc:	183ff61e 	bne	r3,zero,800c0d8 <_wcrtomb_r+0x30>
 800c100:	00802284 	movi	r2,138
 800c104:	88000015 	stw	zero,0(r17)
 800c108:	80800015 	stw	r2,0(r16)
 800c10c:	00bfffc4 	movi	r2,-1
 800c110:	003ff106 	br	800c0d8 <_wcrtomb_r+0x30>

0800c114 <wcrtomb>:
 800c114:	defffa04 	addi	sp,sp,-24
 800c118:	00820074 	movhi	r2,2049
 800c11c:	dc400415 	stw	r17,16(sp)
 800c120:	dc000315 	stw	r16,12(sp)
 800c124:	dfc00515 	stw	ra,20(sp)
 800c128:	14114117 	ldw	r16,17668(r2)
 800c12c:	00820074 	movhi	r2,2049
 800c130:	3023883a 	mov	r17,r6
 800c134:	108c9617 	ldw	r2,12888(r2)
 800c138:	300f883a 	mov	r7,r6
 800c13c:	20000b26 	beq	r4,zero,800c16c <wcrtomb+0x58>
 800c140:	280d883a 	mov	r6,r5
 800c144:	200b883a 	mov	r5,r4
 800c148:	8009883a 	mov	r4,r16
 800c14c:	103ee83a 	callr	r2
 800c150:	10ffffd8 	cmpnei	r3,r2,-1
 800c154:	18000b26 	beq	r3,zero,800c184 <wcrtomb+0x70>
 800c158:	dfc00517 	ldw	ra,20(sp)
 800c15c:	dc400417 	ldw	r17,16(sp)
 800c160:	dc000317 	ldw	r16,12(sp)
 800c164:	dec00604 	addi	sp,sp,24
 800c168:	f800283a 	ret
 800c16c:	000d883a 	mov	r6,zero
 800c170:	d9400084 	addi	r5,sp,2
 800c174:	8009883a 	mov	r4,r16
 800c178:	103ee83a 	callr	r2
 800c17c:	10ffffd8 	cmpnei	r3,r2,-1
 800c180:	183ff51e 	bne	r3,zero,800c158 <wcrtomb+0x44>
 800c184:	00802284 	movi	r2,138
 800c188:	88000015 	stw	zero,0(r17)
 800c18c:	80800015 	stw	r2,0(r16)
 800c190:	00bfffc4 	movi	r2,-1
 800c194:	003ff006 	br	800c158 <wcrtomb+0x44>

0800c198 <_wctomb_r>:
 800c198:	00820074 	movhi	r2,2049
 800c19c:	108c9617 	ldw	r2,12888(r2)
 800c1a0:	1000683a 	jmp	r2

0800c1a4 <__ascii_wctomb>:
 800c1a4:	28000926 	beq	r5,zero,800c1cc <__ascii_wctomb+0x28>
 800c1a8:	30804030 	cmpltui	r2,r6,256
 800c1ac:	10000326 	beq	r2,zero,800c1bc <__ascii_wctomb+0x18>
 800c1b0:	29800005 	stb	r6,0(r5)
 800c1b4:	00800044 	movi	r2,1
 800c1b8:	f800283a 	ret
 800c1bc:	00802284 	movi	r2,138
 800c1c0:	20800015 	stw	r2,0(r4)
 800c1c4:	00bfffc4 	movi	r2,-1
 800c1c8:	f800283a 	ret
 800c1cc:	0005883a 	mov	r2,zero
 800c1d0:	f800283a 	ret

0800c1d4 <__udivdi3>:
 800c1d4:	defff504 	addi	sp,sp,-44
 800c1d8:	dd000515 	stw	r20,20(sp)
 800c1dc:	dc000115 	stw	r16,4(sp)
 800c1e0:	dfc00a15 	stw	ra,40(sp)
 800c1e4:	df000915 	stw	fp,36(sp)
 800c1e8:	ddc00815 	stw	r23,32(sp)
 800c1ec:	dd800715 	stw	r22,28(sp)
 800c1f0:	dd400615 	stw	r21,24(sp)
 800c1f4:	dcc00415 	stw	r19,16(sp)
 800c1f8:	dc800315 	stw	r18,12(sp)
 800c1fc:	dc400215 	stw	r17,8(sp)
 800c200:	2029883a 	mov	r20,r4
 800c204:	2821883a 	mov	r16,r5
 800c208:	38008c1e 	bne	r7,zero,800c43c <__udivdi3+0x268>
 800c20c:	3827883a 	mov	r19,r7
 800c210:	3023883a 	mov	r17,r6
 800c214:	2025883a 	mov	r18,r4
 800c218:	2980422e 	bgeu	r5,r6,800c324 <__udivdi3+0x150>
 800c21c:	00bfffd4 	movui	r2,65535
 800c220:	282f883a 	mov	r23,r5
 800c224:	1180af2e 	bgeu	r2,r6,800c4e4 <__udivdi3+0x310>
 800c228:	00804034 	movhi	r2,256
 800c22c:	30815936 	bltu	r6,r2,800c794 <__udivdi3+0x5c0>
 800c230:	3006d63a 	srli	r3,r6,24
 800c234:	04c00604 	movi	r19,24
 800c238:	00820074 	movhi	r2,2049
 800c23c:	1885883a 	add	r2,r3,r2
 800c240:	1089f943 	ldbu	r2,10213(r2)
 800c244:	14e7883a 	add	r19,r2,r19
 800c248:	00800804 	movi	r2,32
 800c24c:	14c5c83a 	sub	r2,r2,r19
 800c250:	10000526 	beq	r2,zero,800c268 <__udivdi3+0x94>
 800c254:	80a0983a 	sll	r16,r16,r2
 800c258:	a4e6d83a 	srl	r19,r20,r19
 800c25c:	30a2983a 	sll	r17,r6,r2
 800c260:	a0a4983a 	sll	r18,r20,r2
 800c264:	9c2eb03a 	or	r23,r19,r16
 800c268:	882ad43a 	srli	r21,r17,16
 800c26c:	b809883a 	mov	r4,r23
 800c270:	8dbfffcc 	andi	r22,r17,65535
 800c274:	a80b883a 	mov	r5,r21
 800c278:	8002be00 	call	8002be0 <__umodsi3>
 800c27c:	a80b883a 	mov	r5,r21
 800c280:	b809883a 	mov	r4,r23
 800c284:	1029883a 	mov	r20,r2
 800c288:	8002b7c0 	call	8002b7c <__udivsi3>
 800c28c:	100b883a 	mov	r5,r2
 800c290:	b009883a 	mov	r4,r22
 800c294:	1021883a 	mov	r16,r2
 800c298:	8002c3c0 	call	8002c3c <__mulsi3>
 800c29c:	a028943a 	slli	r20,r20,16
 800c2a0:	9006d43a 	srli	r3,r18,16
 800c2a4:	a0c6b03a 	or	r3,r20,r3
 800c2a8:	1880052e 	bgeu	r3,r2,800c2c0 <__udivdi3+0xec>
 800c2ac:	1c47883a 	add	r3,r3,r17
 800c2b0:	813fffc4 	addi	r4,r16,-1
 800c2b4:	1c400136 	bltu	r3,r17,800c2bc <__udivdi3+0xe8>
 800c2b8:	18814736 	bltu	r3,r2,800c7d8 <__udivdi3+0x604>
 800c2bc:	2021883a 	mov	r16,r4
 800c2c0:	18a7c83a 	sub	r19,r3,r2
 800c2c4:	9809883a 	mov	r4,r19
 800c2c8:	a80b883a 	mov	r5,r21
 800c2cc:	8002be00 	call	8002be0 <__umodsi3>
 800c2d0:	1029883a 	mov	r20,r2
 800c2d4:	9809883a 	mov	r4,r19
 800c2d8:	a80b883a 	mov	r5,r21
 800c2dc:	a028943a 	slli	r20,r20,16
 800c2e0:	8002b7c0 	call	8002b7c <__udivsi3>
 800c2e4:	100b883a 	mov	r5,r2
 800c2e8:	b009883a 	mov	r4,r22
 800c2ec:	94bfffcc 	andi	r18,r18,65535
 800c2f0:	1027883a 	mov	r19,r2
 800c2f4:	a4a4b03a 	or	r18,r20,r18
 800c2f8:	8002c3c0 	call	8002c3c <__mulsi3>
 800c2fc:	9080052e 	bgeu	r18,r2,800c314 <__udivdi3+0x140>
 800c300:	8ca5883a 	add	r18,r17,r18
 800c304:	98ffffc4 	addi	r3,r19,-1
 800c308:	94400136 	bltu	r18,r17,800c310 <__udivdi3+0x13c>
 800c30c:	90813036 	bltu	r18,r2,800c7d0 <__udivdi3+0x5fc>
 800c310:	1827883a 	mov	r19,r3
 800c314:	8004943a 	slli	r2,r16,16
 800c318:	0007883a 	mov	r3,zero
 800c31c:	14c4b03a 	or	r2,r2,r19
 800c320:	00005a06 	br	800c48c <__udivdi3+0x2b8>
 800c324:	3000041e 	bne	r6,zero,800c338 <__udivdi3+0x164>
 800c328:	000b883a 	mov	r5,zero
 800c32c:	01000044 	movi	r4,1
 800c330:	8002b7c0 	call	8002b7c <__udivsi3>
 800c334:	1023883a 	mov	r17,r2
 800c338:	00bfffd4 	movui	r2,65535
 800c33c:	1440642e 	bgeu	r2,r17,800c4d0 <__udivdi3+0x2fc>
 800c340:	00804034 	movhi	r2,256
 800c344:	88811036 	bltu	r17,r2,800c788 <__udivdi3+0x5b4>
 800c348:	8806d63a 	srli	r3,r17,24
 800c34c:	04c00604 	movi	r19,24
 800c350:	00820074 	movhi	r2,2049
 800c354:	1885883a 	add	r2,r3,r2
 800c358:	1089f943 	ldbu	r2,10213(r2)
 800c35c:	00c00804 	movi	r3,32
 800c360:	14e7883a 	add	r19,r2,r19
 800c364:	1cc7c83a 	sub	r3,r3,r19
 800c368:	1800631e 	bne	r3,zero,800c4f8 <__udivdi3+0x324>
 800c36c:	882ad43a 	srli	r21,r17,16
 800c370:	8461c83a 	sub	r16,r16,r17
 800c374:	8dbfffcc 	andi	r22,r17,65535
 800c378:	00c00044 	movi	r3,1
 800c37c:	8009883a 	mov	r4,r16
 800c380:	a80b883a 	mov	r5,r21
 800c384:	d8c00015 	stw	r3,0(sp)
 800c388:	8002be00 	call	8002be0 <__umodsi3>
 800c38c:	8009883a 	mov	r4,r16
 800c390:	a80b883a 	mov	r5,r21
 800c394:	1029883a 	mov	r20,r2
 800c398:	8002b7c0 	call	8002b7c <__udivsi3>
 800c39c:	1009883a 	mov	r4,r2
 800c3a0:	b00b883a 	mov	r5,r22
 800c3a4:	1021883a 	mov	r16,r2
 800c3a8:	8002c3c0 	call	8002c3c <__mulsi3>
 800c3ac:	a028943a 	slli	r20,r20,16
 800c3b0:	9008d43a 	srli	r4,r18,16
 800c3b4:	d8c00017 	ldw	r3,0(sp)
 800c3b8:	a108b03a 	or	r4,r20,r4
 800c3bc:	2080052e 	bgeu	r4,r2,800c3d4 <__udivdi3+0x200>
 800c3c0:	2449883a 	add	r4,r4,r17
 800c3c4:	817fffc4 	addi	r5,r16,-1
 800c3c8:	24400136 	bltu	r4,r17,800c3d0 <__udivdi3+0x1fc>
 800c3cc:	20810536 	bltu	r4,r2,800c7e4 <__udivdi3+0x610>
 800c3d0:	2821883a 	mov	r16,r5
 800c3d4:	20a7c83a 	sub	r19,r4,r2
 800c3d8:	9809883a 	mov	r4,r19
 800c3dc:	a80b883a 	mov	r5,r21
 800c3e0:	d8c00015 	stw	r3,0(sp)
 800c3e4:	8002be00 	call	8002be0 <__umodsi3>
 800c3e8:	1029883a 	mov	r20,r2
 800c3ec:	9809883a 	mov	r4,r19
 800c3f0:	a80b883a 	mov	r5,r21
 800c3f4:	a028943a 	slli	r20,r20,16
 800c3f8:	8002b7c0 	call	8002b7c <__udivsi3>
 800c3fc:	b00b883a 	mov	r5,r22
 800c400:	1009883a 	mov	r4,r2
 800c404:	94bfffcc 	andi	r18,r18,65535
 800c408:	1027883a 	mov	r19,r2
 800c40c:	a4a4b03a 	or	r18,r20,r18
 800c410:	8002c3c0 	call	8002c3c <__mulsi3>
 800c414:	d8c00017 	ldw	r3,0(sp)
 800c418:	9080052e 	bgeu	r18,r2,800c430 <__udivdi3+0x25c>
 800c41c:	8ca5883a 	add	r18,r17,r18
 800c420:	993fffc4 	addi	r4,r19,-1
 800c424:	94400136 	bltu	r18,r17,800c42c <__udivdi3+0x258>
 800c428:	9080e736 	bltu	r18,r2,800c7c8 <__udivdi3+0x5f4>
 800c42c:	2027883a 	mov	r19,r4
 800c430:	8004943a 	slli	r2,r16,16
 800c434:	14c4b03a 	or	r2,r2,r19
 800c438:	00001406 	br	800c48c <__udivdi3+0x2b8>
 800c43c:	29c01136 	bltu	r5,r7,800c484 <__udivdi3+0x2b0>
 800c440:	00bfffd4 	movui	r2,65535
 800c444:	11c01d2e 	bgeu	r2,r7,800c4bc <__udivdi3+0x2e8>
 800c448:	00804034 	movhi	r2,256
 800c44c:	3880c336 	bltu	r7,r2,800c75c <__udivdi3+0x588>
 800c450:	3808d63a 	srli	r4,r7,24
 800c454:	00c00604 	movi	r3,24
 800c458:	00820074 	movhi	r2,2049
 800c45c:	2085883a 	add	r2,r4,r2
 800c460:	1109f943 	ldbu	r4,10213(r2)
 800c464:	20c9883a 	add	r4,r4,r3
 800c468:	00c00804 	movi	r3,32
 800c46c:	192fc83a 	sub	r23,r3,r4
 800c470:	b800581e 	bne	r23,zero,800c5d4 <__udivdi3+0x400>
 800c474:	3c00bc36 	bltu	r7,r16,800c768 <__udivdi3+0x594>
 800c478:	a185403a 	cmpgeu	r2,r20,r6
 800c47c:	0007883a 	mov	r3,zero
 800c480:	00000206 	br	800c48c <__udivdi3+0x2b8>
 800c484:	0007883a 	mov	r3,zero
 800c488:	0005883a 	mov	r2,zero
 800c48c:	dfc00a17 	ldw	ra,40(sp)
 800c490:	df000917 	ldw	fp,36(sp)
 800c494:	ddc00817 	ldw	r23,32(sp)
 800c498:	dd800717 	ldw	r22,28(sp)
 800c49c:	dd400617 	ldw	r21,24(sp)
 800c4a0:	dd000517 	ldw	r20,20(sp)
 800c4a4:	dcc00417 	ldw	r19,16(sp)
 800c4a8:	dc800317 	ldw	r18,12(sp)
 800c4ac:	dc400217 	ldw	r17,8(sp)
 800c4b0:	dc000117 	ldw	r16,4(sp)
 800c4b4:	dec00b04 	addi	sp,sp,44
 800c4b8:	f800283a 	ret
 800c4bc:	38804030 	cmpltui	r2,r7,256
 800c4c0:	1000ac1e 	bne	r2,zero,800c774 <__udivdi3+0x5a0>
 800c4c4:	3808d23a 	srli	r4,r7,8
 800c4c8:	00c00204 	movi	r3,8
 800c4cc:	003fe206 	br	800c458 <__udivdi3+0x284>
 800c4d0:	88804030 	cmpltui	r2,r17,256
 800c4d4:	1000b21e 	bne	r2,zero,800c7a0 <__udivdi3+0x5cc>
 800c4d8:	8806d23a 	srli	r3,r17,8
 800c4dc:	04c00204 	movi	r19,8
 800c4e0:	003f9b06 	br	800c350 <__udivdi3+0x17c>
 800c4e4:	30804030 	cmpltui	r2,r6,256
 800c4e8:	1000a51e 	bne	r2,zero,800c780 <__udivdi3+0x5ac>
 800c4ec:	3006d23a 	srli	r3,r6,8
 800c4f0:	04c00204 	movi	r19,8
 800c4f4:	003f5006 	br	800c238 <__udivdi3+0x64>
 800c4f8:	88e2983a 	sll	r17,r17,r3
 800c4fc:	84eed83a 	srl	r23,r16,r19
 800c500:	a0e4983a 	sll	r18,r20,r3
 800c504:	882ad43a 	srli	r21,r17,16
 800c508:	b809883a 	mov	r4,r23
 800c50c:	80e0983a 	sll	r16,r16,r3
 800c510:	a80b883a 	mov	r5,r21
 800c514:	8002be00 	call	8002be0 <__umodsi3>
 800c518:	b809883a 	mov	r4,r23
 800c51c:	a4e6d83a 	srl	r19,r20,r19
 800c520:	a80b883a 	mov	r5,r21
 800c524:	1029883a 	mov	r20,r2
 800c528:	8dbfffcc 	andi	r22,r17,65535
 800c52c:	8002b7c0 	call	8002b7c <__udivsi3>
 800c530:	b009883a 	mov	r4,r22
 800c534:	100b883a 	mov	r5,r2
 800c538:	9c26b03a 	or	r19,r19,r16
 800c53c:	102f883a 	mov	r23,r2
 800c540:	8002c3c0 	call	8002c3c <__mulsi3>
 800c544:	a028943a 	slli	r20,r20,16
 800c548:	9808d43a 	srli	r4,r19,16
 800c54c:	a108b03a 	or	r4,r20,r4
 800c550:	2080062e 	bgeu	r4,r2,800c56c <__udivdi3+0x398>
 800c554:	2449883a 	add	r4,r4,r17
 800c558:	b8ffffc4 	addi	r3,r23,-1
 800c55c:	24409836 	bltu	r4,r17,800c7c0 <__udivdi3+0x5ec>
 800c560:	2080972e 	bgeu	r4,r2,800c7c0 <__udivdi3+0x5ec>
 800c564:	bdffff84 	addi	r23,r23,-2
 800c568:	2449883a 	add	r4,r4,r17
 800c56c:	20a1c83a 	sub	r16,r4,r2
 800c570:	8009883a 	mov	r4,r16
 800c574:	a80b883a 	mov	r5,r21
 800c578:	8002be00 	call	8002be0 <__umodsi3>
 800c57c:	1029883a 	mov	r20,r2
 800c580:	8009883a 	mov	r4,r16
 800c584:	a80b883a 	mov	r5,r21
 800c588:	a020943a 	slli	r16,r20,16
 800c58c:	8002b7c0 	call	8002b7c <__udivsi3>
 800c590:	100b883a 	mov	r5,r2
 800c594:	b009883a 	mov	r4,r22
 800c598:	9cffffcc 	andi	r19,r19,65535
 800c59c:	1039883a 	mov	fp,r2
 800c5a0:	84e0b03a 	or	r16,r16,r19
 800c5a4:	8002c3c0 	call	8002c3c <__mulsi3>
 800c5a8:	8080062e 	bgeu	r16,r2,800c5c4 <__udivdi3+0x3f0>
 800c5ac:	8461883a 	add	r16,r16,r17
 800c5b0:	e0ffffc4 	addi	r3,fp,-1
 800c5b4:	84407e36 	bltu	r16,r17,800c7b0 <__udivdi3+0x5dc>
 800c5b8:	80807d2e 	bgeu	r16,r2,800c7b0 <__udivdi3+0x5dc>
 800c5bc:	e73fff84 	addi	fp,fp,-2
 800c5c0:	8461883a 	add	r16,r16,r17
 800c5c4:	b806943a 	slli	r3,r23,16
 800c5c8:	80a1c83a 	sub	r16,r16,r2
 800c5cc:	1f06b03a 	or	r3,r3,fp
 800c5d0:	003f6a06 	br	800c37c <__udivdi3+0x1a8>
 800c5d4:	3106d83a 	srl	r3,r6,r4
 800c5d8:	3dce983a 	sll	r7,r7,r23
 800c5dc:	8122d83a 	srl	r17,r16,r4
 800c5e0:	a104d83a 	srl	r2,r20,r4
 800c5e4:	19ecb03a 	or	r22,r3,r7
 800c5e8:	b024d43a 	srli	r18,r22,16
 800c5ec:	85e0983a 	sll	r16,r16,r23
 800c5f0:	8809883a 	mov	r4,r17
 800c5f4:	900b883a 	mov	r5,r18
 800c5f8:	1420b03a 	or	r16,r2,r16
 800c5fc:	b0bfffcc 	andi	r2,r22,65535
 800c600:	35ea983a 	sll	r21,r6,r23
 800c604:	d8800015 	stw	r2,0(sp)
 800c608:	8002be00 	call	8002be0 <__umodsi3>
 800c60c:	900b883a 	mov	r5,r18
 800c610:	8809883a 	mov	r4,r17
 800c614:	1027883a 	mov	r19,r2
 800c618:	8002b7c0 	call	8002b7c <__udivsi3>
 800c61c:	b13fffcc 	andi	r4,r22,65535
 800c620:	100b883a 	mov	r5,r2
 800c624:	1039883a 	mov	fp,r2
 800c628:	8002c3c0 	call	8002c3c <__mulsi3>
 800c62c:	9826943a 	slli	r19,r19,16
 800c630:	8008d43a 	srli	r4,r16,16
 800c634:	9908b03a 	or	r4,r19,r4
 800c638:	2080062e 	bgeu	r4,r2,800c654 <__udivdi3+0x480>
 800c63c:	2589883a 	add	r4,r4,r22
 800c640:	e0ffffc4 	addi	r3,fp,-1
 800c644:	25805c36 	bltu	r4,r22,800c7b8 <__udivdi3+0x5e4>
 800c648:	20805b2e 	bgeu	r4,r2,800c7b8 <__udivdi3+0x5e4>
 800c64c:	e73fff84 	addi	fp,fp,-2
 800c650:	2589883a 	add	r4,r4,r22
 800c654:	20a3c83a 	sub	r17,r4,r2
 800c658:	8809883a 	mov	r4,r17
 800c65c:	900b883a 	mov	r5,r18
 800c660:	8002be00 	call	8002be0 <__umodsi3>
 800c664:	1027883a 	mov	r19,r2
 800c668:	8809883a 	mov	r4,r17
 800c66c:	900b883a 	mov	r5,r18
 800c670:	9826943a 	slli	r19,r19,16
 800c674:	8002b7c0 	call	8002b7c <__udivsi3>
 800c678:	100b883a 	mov	r5,r2
 800c67c:	b13fffcc 	andi	r4,r22,65535
 800c680:	843fffcc 	andi	r16,r16,65535
 800c684:	1023883a 	mov	r17,r2
 800c688:	9c20b03a 	or	r16,r19,r16
 800c68c:	8002c3c0 	call	8002c3c <__mulsi3>
 800c690:	8080062e 	bgeu	r16,r2,800c6ac <__udivdi3+0x4d8>
 800c694:	85a1883a 	add	r16,r16,r22
 800c698:	88ffffc4 	addi	r3,r17,-1
 800c69c:	85804236 	bltu	r16,r22,800c7a8 <__udivdi3+0x5d4>
 800c6a0:	8080412e 	bgeu	r16,r2,800c7a8 <__udivdi3+0x5d4>
 800c6a4:	8c7fff84 	addi	r17,r17,-2
 800c6a8:	85a1883a 	add	r16,r16,r22
 800c6ac:	e038943a 	slli	fp,fp,16
 800c6b0:	adbfffcc 	andi	r22,r21,65535
 800c6b4:	b00b883a 	mov	r5,r22
 800c6b8:	e478b03a 	or	fp,fp,r17
 800c6bc:	e024d43a 	srli	r18,fp,16
 800c6c0:	e4ffffcc 	andi	r19,fp,65535
 800c6c4:	9809883a 	mov	r4,r19
 800c6c8:	a82ad43a 	srli	r21,r21,16
 800c6cc:	80a1c83a 	sub	r16,r16,r2
 800c6d0:	8002c3c0 	call	8002c3c <__mulsi3>
 800c6d4:	9009883a 	mov	r4,r18
 800c6d8:	b00b883a 	mov	r5,r22
 800c6dc:	d8800015 	stw	r2,0(sp)
 800c6e0:	8002c3c0 	call	8002c3c <__mulsi3>
 800c6e4:	9009883a 	mov	r4,r18
 800c6e8:	a80b883a 	mov	r5,r21
 800c6ec:	1023883a 	mov	r17,r2
 800c6f0:	8002c3c0 	call	8002c3c <__mulsi3>
 800c6f4:	a80b883a 	mov	r5,r21
 800c6f8:	9809883a 	mov	r4,r19
 800c6fc:	1025883a 	mov	r18,r2
 800c700:	8002c3c0 	call	8002c3c <__mulsi3>
 800c704:	d9800017 	ldw	r6,0(sp)
 800c708:	1445883a 	add	r2,r2,r17
 800c70c:	3006d43a 	srli	r3,r6,16
 800c710:	1885883a 	add	r2,r3,r2
 800c714:	1440022e 	bgeu	r2,r17,800c720 <__udivdi3+0x54c>
 800c718:	00c00074 	movhi	r3,1
 800c71c:	90e5883a 	add	r18,r18,r3
 800c720:	1006d43a 	srli	r3,r2,16
 800c724:	1c87883a 	add	r3,r3,r18
 800c728:	80c00936 	bltu	r16,r3,800c750 <__udivdi3+0x57c>
 800c72c:	80c00326 	beq	r16,r3,800c73c <__udivdi3+0x568>
 800c730:	e005883a 	mov	r2,fp
 800c734:	0007883a 	mov	r3,zero
 800c738:	003f5406 	br	800c48c <__udivdi3+0x2b8>
 800c73c:	1004943a 	slli	r2,r2,16
 800c740:	a5c6983a 	sll	r3,r20,r23
 800c744:	31bfffcc 	andi	r6,r6,65535
 800c748:	1185883a 	add	r2,r2,r6
 800c74c:	18bff82e 	bgeu	r3,r2,800c730 <__udivdi3+0x55c>
 800c750:	e0bfffc4 	addi	r2,fp,-1
 800c754:	0007883a 	mov	r3,zero
 800c758:	003f4c06 	br	800c48c <__udivdi3+0x2b8>
 800c75c:	3808d43a 	srli	r4,r7,16
 800c760:	00c00404 	movi	r3,16
 800c764:	003f3c06 	br	800c458 <__udivdi3+0x284>
 800c768:	0007883a 	mov	r3,zero
 800c76c:	00800044 	movi	r2,1
 800c770:	003f4606 	br	800c48c <__udivdi3+0x2b8>
 800c774:	3809883a 	mov	r4,r7
 800c778:	0007883a 	mov	r3,zero
 800c77c:	003f3606 	br	800c458 <__udivdi3+0x284>
 800c780:	3007883a 	mov	r3,r6
 800c784:	003eac06 	br	800c238 <__udivdi3+0x64>
 800c788:	8806d43a 	srli	r3,r17,16
 800c78c:	04c00404 	movi	r19,16
 800c790:	003eef06 	br	800c350 <__udivdi3+0x17c>
 800c794:	3006d43a 	srli	r3,r6,16
 800c798:	04c00404 	movi	r19,16
 800c79c:	003ea606 	br	800c238 <__udivdi3+0x64>
 800c7a0:	8807883a 	mov	r3,r17
 800c7a4:	003eea06 	br	800c350 <__udivdi3+0x17c>
 800c7a8:	1823883a 	mov	r17,r3
 800c7ac:	003fbf06 	br	800c6ac <__udivdi3+0x4d8>
 800c7b0:	1839883a 	mov	fp,r3
 800c7b4:	003f8306 	br	800c5c4 <__udivdi3+0x3f0>
 800c7b8:	1839883a 	mov	fp,r3
 800c7bc:	003fa506 	br	800c654 <__udivdi3+0x480>
 800c7c0:	182f883a 	mov	r23,r3
 800c7c4:	003f6906 	br	800c56c <__udivdi3+0x398>
 800c7c8:	9cffff84 	addi	r19,r19,-2
 800c7cc:	003f1806 	br	800c430 <__udivdi3+0x25c>
 800c7d0:	9cffff84 	addi	r19,r19,-2
 800c7d4:	003ecf06 	br	800c314 <__udivdi3+0x140>
 800c7d8:	843fff84 	addi	r16,r16,-2
 800c7dc:	1c47883a 	add	r3,r3,r17
 800c7e0:	003eb706 	br	800c2c0 <__udivdi3+0xec>
 800c7e4:	843fff84 	addi	r16,r16,-2
 800c7e8:	2449883a 	add	r4,r4,r17
 800c7ec:	003ef906 	br	800c3d4 <__udivdi3+0x200>

0800c7f0 <__umoddi3>:
 800c7f0:	defff304 	addi	sp,sp,-52
 800c7f4:	dc400415 	stw	r17,16(sp)
 800c7f8:	dc000315 	stw	r16,12(sp)
 800c7fc:	dfc00c15 	stw	ra,48(sp)
 800c800:	df000b15 	stw	fp,44(sp)
 800c804:	ddc00a15 	stw	r23,40(sp)
 800c808:	dd800915 	stw	r22,36(sp)
 800c80c:	dd400815 	stw	r21,32(sp)
 800c810:	dd000715 	stw	r20,28(sp)
 800c814:	dcc00615 	stw	r19,24(sp)
 800c818:	dc800515 	stw	r18,20(sp)
 800c81c:	2823883a 	mov	r17,r5
 800c820:	2021883a 	mov	r16,r4
 800c824:	3800781e 	bne	r7,zero,800ca08 <__umoddi3+0x218>
 800c828:	3825883a 	mov	r18,r7
 800c82c:	3027883a 	mov	r19,r6
 800c830:	2029883a 	mov	r20,r4
 800c834:	29803d2e 	bgeu	r5,r6,800c92c <__umoddi3+0x13c>
 800c838:	00bfffd4 	movui	r2,65535
 800c83c:	2839883a 	mov	fp,r5
 800c840:	11809f36 	bltu	r2,r6,800cac0 <__umoddi3+0x2d0>
 800c844:	30804030 	cmpltui	r2,r6,256
 800c848:	1001451e 	bne	r2,zero,800cd60 <__umoddi3+0x570>
 800c84c:	3006d23a 	srli	r3,r6,8
 800c850:	04800204 	movi	r18,8
 800c854:	00820074 	movhi	r2,2049
 800c858:	1885883a 	add	r2,r3,r2
 800c85c:	1109f943 	ldbu	r4,10213(r2)
 800c860:	00800804 	movi	r2,32
 800c864:	2489883a 	add	r4,r4,r18
 800c868:	1125c83a 	sub	r18,r2,r4
 800c86c:	90000526 	beq	r18,zero,800c884 <__umoddi3+0x94>
 800c870:	8ca2983a 	sll	r17,r17,r18
 800c874:	8108d83a 	srl	r4,r16,r4
 800c878:	34a6983a 	sll	r19,r6,r18
 800c87c:	84a8983a 	sll	r20,r16,r18
 800c880:	2478b03a 	or	fp,r4,r17
 800c884:	982cd43a 	srli	r22,r19,16
 800c888:	e009883a 	mov	r4,fp
 800c88c:	9dffffcc 	andi	r23,r19,65535
 800c890:	b00b883a 	mov	r5,r22
 800c894:	8002be00 	call	8002be0 <__umodsi3>
 800c898:	b00b883a 	mov	r5,r22
 800c89c:	e009883a 	mov	r4,fp
 800c8a0:	102b883a 	mov	r21,r2
 800c8a4:	8002b7c0 	call	8002b7c <__udivsi3>
 800c8a8:	100b883a 	mov	r5,r2
 800c8ac:	b809883a 	mov	r4,r23
 800c8b0:	8002c3c0 	call	8002c3c <__mulsi3>
 800c8b4:	a82a943a 	slli	r21,r21,16
 800c8b8:	a006d43a 	srli	r3,r20,16
 800c8bc:	a8c6b03a 	or	r3,r21,r3
 800c8c0:	1880032e 	bgeu	r3,r2,800c8d0 <__umoddi3+0xe0>
 800c8c4:	1cc7883a 	add	r3,r3,r19
 800c8c8:	1cc00136 	bltu	r3,r19,800c8d0 <__umoddi3+0xe0>
 800c8cc:	18813836 	bltu	r3,r2,800cdb0 <__umoddi3+0x5c0>
 800c8d0:	18a1c83a 	sub	r16,r3,r2
 800c8d4:	b00b883a 	mov	r5,r22
 800c8d8:	8009883a 	mov	r4,r16
 800c8dc:	8002be00 	call	8002be0 <__umodsi3>
 800c8e0:	b00b883a 	mov	r5,r22
 800c8e4:	8009883a 	mov	r4,r16
 800c8e8:	1023883a 	mov	r17,r2
 800c8ec:	8002b7c0 	call	8002b7c <__udivsi3>
 800c8f0:	100b883a 	mov	r5,r2
 800c8f4:	b809883a 	mov	r4,r23
 800c8f8:	8822943a 	slli	r17,r17,16
 800c8fc:	8002c3c0 	call	8002c3c <__mulsi3>
 800c900:	a0ffffcc 	andi	r3,r20,65535
 800c904:	88c6b03a 	or	r3,r17,r3
 800c908:	1880042e 	bgeu	r3,r2,800c91c <__umoddi3+0x12c>
 800c90c:	1cc7883a 	add	r3,r3,r19
 800c910:	1cc00236 	bltu	r3,r19,800c91c <__umoddi3+0x12c>
 800c914:	1880012e 	bgeu	r3,r2,800c91c <__umoddi3+0x12c>
 800c918:	1cc7883a 	add	r3,r3,r19
 800c91c:	1885c83a 	sub	r2,r3,r2
 800c920:	1484d83a 	srl	r2,r2,r18
 800c924:	0007883a 	mov	r3,zero
 800c928:	00003a06 	br	800ca14 <__umoddi3+0x224>
 800c92c:	3000041e 	bne	r6,zero,800c940 <__umoddi3+0x150>
 800c930:	000b883a 	mov	r5,zero
 800c934:	01000044 	movi	r4,1
 800c938:	8002b7c0 	call	8002b7c <__udivsi3>
 800c93c:	1027883a 	mov	r19,r2
 800c940:	00bfffd4 	movui	r2,65535
 800c944:	14c0592e 	bgeu	r2,r19,800caac <__umoddi3+0x2bc>
 800c948:	00804034 	movhi	r2,256
 800c94c:	98810c36 	bltu	r19,r2,800cd80 <__umoddi3+0x590>
 800c950:	9806d63a 	srli	r3,r19,24
 800c954:	04800604 	movi	r18,24
 800c958:	00820074 	movhi	r2,2049
 800c95c:	1885883a 	add	r2,r3,r2
 800c960:	10c9f943 	ldbu	r3,10213(r2)
 800c964:	00800804 	movi	r2,32
 800c968:	1c87883a 	add	r3,r3,r18
 800c96c:	10e5c83a 	sub	r18,r2,r3
 800c970:	9000c51e 	bne	r18,zero,800cc88 <__umoddi3+0x498>
 800c974:	982ad43a 	srli	r21,r19,16
 800c978:	8ce3c83a 	sub	r17,r17,r19
 800c97c:	9dbfffcc 	andi	r22,r19,65535
 800c980:	a80b883a 	mov	r5,r21
 800c984:	8809883a 	mov	r4,r17
 800c988:	8002be00 	call	8002be0 <__umodsi3>
 800c98c:	a80b883a 	mov	r5,r21
 800c990:	8809883a 	mov	r4,r17
 800c994:	102f883a 	mov	r23,r2
 800c998:	8002b7c0 	call	8002b7c <__udivsi3>
 800c99c:	b00b883a 	mov	r5,r22
 800c9a0:	1009883a 	mov	r4,r2
 800c9a4:	8002c3c0 	call	8002c3c <__mulsi3>
 800c9a8:	b82e943a 	slli	r23,r23,16
 800c9ac:	a006d43a 	srli	r3,r20,16
 800c9b0:	b8c6b03a 	or	r3,r23,r3
 800c9b4:	1880042e 	bgeu	r3,r2,800c9c8 <__umoddi3+0x1d8>
 800c9b8:	1cc7883a 	add	r3,r3,r19
 800c9bc:	1cc00236 	bltu	r3,r19,800c9c8 <__umoddi3+0x1d8>
 800c9c0:	1880012e 	bgeu	r3,r2,800c9c8 <__umoddi3+0x1d8>
 800c9c4:	1cc7883a 	add	r3,r3,r19
 800c9c8:	18a1c83a 	sub	r16,r3,r2
 800c9cc:	a80b883a 	mov	r5,r21
 800c9d0:	8009883a 	mov	r4,r16
 800c9d4:	8002be00 	call	8002be0 <__umodsi3>
 800c9d8:	1023883a 	mov	r17,r2
 800c9dc:	a80b883a 	mov	r5,r21
 800c9e0:	8009883a 	mov	r4,r16
 800c9e4:	8002b7c0 	call	8002b7c <__udivsi3>
 800c9e8:	8822943a 	slli	r17,r17,16
 800c9ec:	b00b883a 	mov	r5,r22
 800c9f0:	1009883a 	mov	r4,r2
 800c9f4:	8002c3c0 	call	8002c3c <__mulsi3>
 800c9f8:	a53fffcc 	andi	r20,r20,65535
 800c9fc:	8d06b03a 	or	r3,r17,r20
 800ca00:	18bfc62e 	bgeu	r3,r2,800c91c <__umoddi3+0x12c>
 800ca04:	003fc106 	br	800c90c <__umoddi3+0x11c>
 800ca08:	2005883a 	mov	r2,r4
 800ca0c:	29c00d2e 	bgeu	r5,r7,800ca44 <__umoddi3+0x254>
 800ca10:	2807883a 	mov	r3,r5
 800ca14:	dfc00c17 	ldw	ra,48(sp)
 800ca18:	df000b17 	ldw	fp,44(sp)
 800ca1c:	ddc00a17 	ldw	r23,40(sp)
 800ca20:	dd800917 	ldw	r22,36(sp)
 800ca24:	dd400817 	ldw	r21,32(sp)
 800ca28:	dd000717 	ldw	r20,28(sp)
 800ca2c:	dcc00617 	ldw	r19,24(sp)
 800ca30:	dc800517 	ldw	r18,20(sp)
 800ca34:	dc400417 	ldw	r17,16(sp)
 800ca38:	dc000317 	ldw	r16,12(sp)
 800ca3c:	dec00d04 	addi	sp,sp,52
 800ca40:	f800283a 	ret
 800ca44:	013fffd4 	movui	r4,65535
 800ca48:	2807883a 	mov	r3,r5
 800ca4c:	21c0122e 	bgeu	r4,r7,800ca98 <__umoddi3+0x2a8>
 800ca50:	01004034 	movhi	r4,256
 800ca54:	3900c736 	bltu	r7,r4,800cd74 <__umoddi3+0x584>
 800ca58:	3810d63a 	srli	r8,r7,24
 800ca5c:	01400604 	movi	r5,24
 800ca60:	01020074 	movhi	r4,2049
 800ca64:	4109883a 	add	r4,r8,r4
 800ca68:	2509f943 	ldbu	r20,10213(r4)
 800ca6c:	05400804 	movi	r21,32
 800ca70:	a169883a 	add	r20,r20,r5
 800ca74:	ad2bc83a 	sub	r21,r21,r20
 800ca78:	a800161e 	bne	r21,zero,800cad4 <__umoddi3+0x2e4>
 800ca7c:	3c400136 	bltu	r7,r17,800ca84 <__umoddi3+0x294>
 800ca80:	81bfe436 	bltu	r16,r6,800ca14 <__umoddi3+0x224>
 800ca84:	8185c83a 	sub	r2,r16,r6
 800ca88:	89cfc83a 	sub	r7,r17,r7
 800ca8c:	8087803a 	cmpltu	r3,r16,r2
 800ca90:	38c7c83a 	sub	r3,r7,r3
 800ca94:	003fdf06 	br	800ca14 <__umoddi3+0x224>
 800ca98:	39004030 	cmpltui	r4,r7,256
 800ca9c:	2000b21e 	bne	r4,zero,800cd68 <__umoddi3+0x578>
 800caa0:	3810d23a 	srli	r8,r7,8
 800caa4:	01400204 	movi	r5,8
 800caa8:	003fed06 	br	800ca60 <__umoddi3+0x270>
 800caac:	98804030 	cmpltui	r2,r19,256
 800cab0:	1000b61e 	bne	r2,zero,800cd8c <__umoddi3+0x59c>
 800cab4:	9806d23a 	srli	r3,r19,8
 800cab8:	04800204 	movi	r18,8
 800cabc:	003fa606 	br	800c958 <__umoddi3+0x168>
 800cac0:	00804034 	movhi	r2,256
 800cac4:	3080b336 	bltu	r6,r2,800cd94 <__umoddi3+0x5a4>
 800cac8:	3006d63a 	srli	r3,r6,24
 800cacc:	04800604 	movi	r18,24
 800cad0:	003f6006 	br	800c854 <__umoddi3+0x64>
 800cad4:	3508d83a 	srl	r4,r6,r20
 800cad8:	3d4e983a 	sll	r7,r7,r21
 800cadc:	8d38d83a 	srl	fp,r17,r20
 800cae0:	8504d83a 	srl	r2,r16,r20
 800cae4:	21e4b03a 	or	r18,r4,r7
 800cae8:	902cd43a 	srli	r22,r18,16
 800caec:	8d62983a 	sll	r17,r17,r21
 800caf0:	e009883a 	mov	r4,fp
 800caf4:	b00b883a 	mov	r5,r22
 800caf8:	3566983a 	sll	r19,r6,r21
 800cafc:	1462b03a 	or	r17,r2,r17
 800cb00:	8002be00 	call	8002be0 <__umodsi3>
 800cb04:	e009883a 	mov	r4,fp
 800cb08:	b00b883a 	mov	r5,r22
 800cb0c:	95ffffcc 	andi	r23,r18,65535
 800cb10:	d8800015 	stw	r2,0(sp)
 800cb14:	8002b7c0 	call	8002b7c <__udivsi3>
 800cb18:	100b883a 	mov	r5,r2
 800cb1c:	b809883a 	mov	r4,r23
 800cb20:	1039883a 	mov	fp,r2
 800cb24:	8002c3c0 	call	8002c3c <__mulsi3>
 800cb28:	d9800017 	ldw	r6,0(sp)
 800cb2c:	8806d43a 	srli	r3,r17,16
 800cb30:	8560983a 	sll	r16,r16,r21
 800cb34:	300c943a 	slli	r6,r6,16
 800cb38:	30c6b03a 	or	r3,r6,r3
 800cb3c:	1880062e 	bgeu	r3,r2,800cb58 <__umoddi3+0x368>
 800cb40:	1c87883a 	add	r3,r3,r18
 800cb44:	e13fffc4 	addi	r4,fp,-1
 800cb48:	1c809736 	bltu	r3,r18,800cda8 <__umoddi3+0x5b8>
 800cb4c:	1880962e 	bgeu	r3,r2,800cda8 <__umoddi3+0x5b8>
 800cb50:	e73fff84 	addi	fp,fp,-2
 800cb54:	1c87883a 	add	r3,r3,r18
 800cb58:	1887c83a 	sub	r3,r3,r2
 800cb5c:	b00b883a 	mov	r5,r22
 800cb60:	1809883a 	mov	r4,r3
 800cb64:	d8c00115 	stw	r3,4(sp)
 800cb68:	8002be00 	call	8002be0 <__umodsi3>
 800cb6c:	d8c00117 	ldw	r3,4(sp)
 800cb70:	b00b883a 	mov	r5,r22
 800cb74:	d8800015 	stw	r2,0(sp)
 800cb78:	1809883a 	mov	r4,r3
 800cb7c:	8002b7c0 	call	8002b7c <__udivsi3>
 800cb80:	100b883a 	mov	r5,r2
 800cb84:	b809883a 	mov	r4,r23
 800cb88:	102d883a 	mov	r22,r2
 800cb8c:	8002c3c0 	call	8002c3c <__mulsi3>
 800cb90:	d9800017 	ldw	r6,0(sp)
 800cb94:	8c7fffcc 	andi	r17,r17,65535
 800cb98:	300c943a 	slli	r6,r6,16
 800cb9c:	3462b03a 	or	r17,r6,r17
 800cba0:	8880062e 	bgeu	r17,r2,800cbbc <__umoddi3+0x3cc>
 800cba4:	8ca3883a 	add	r17,r17,r18
 800cba8:	b0ffffc4 	addi	r3,r22,-1
 800cbac:	8c807c36 	bltu	r17,r18,800cda0 <__umoddi3+0x5b0>
 800cbb0:	88807b2e 	bgeu	r17,r2,800cda0 <__umoddi3+0x5b0>
 800cbb4:	b5bfff84 	addi	r22,r22,-2
 800cbb8:	8ca3883a 	add	r17,r17,r18
 800cbbc:	e038943a 	slli	fp,fp,16
 800cbc0:	980cd43a 	srli	r6,r19,16
 800cbc4:	98ffffcc 	andi	r3,r19,65535
 800cbc8:	e5b8b03a 	or	fp,fp,r22
 800cbcc:	e02cd43a 	srli	r22,fp,16
 800cbd0:	e73fffcc 	andi	fp,fp,65535
 800cbd4:	180b883a 	mov	r5,r3
 800cbd8:	e009883a 	mov	r4,fp
 800cbdc:	d9800215 	stw	r6,8(sp)
 800cbe0:	d8c00015 	stw	r3,0(sp)
 800cbe4:	88a3c83a 	sub	r17,r17,r2
 800cbe8:	8002c3c0 	call	8002c3c <__mulsi3>
 800cbec:	d8c00017 	ldw	r3,0(sp)
 800cbf0:	b009883a 	mov	r4,r22
 800cbf4:	102f883a 	mov	r23,r2
 800cbf8:	180b883a 	mov	r5,r3
 800cbfc:	8002c3c0 	call	8002c3c <__mulsi3>
 800cc00:	d9800217 	ldw	r6,8(sp)
 800cc04:	b009883a 	mov	r4,r22
 800cc08:	d8800115 	stw	r2,4(sp)
 800cc0c:	300b883a 	mov	r5,r6
 800cc10:	d9800015 	stw	r6,0(sp)
 800cc14:	8002c3c0 	call	8002c3c <__mulsi3>
 800cc18:	d9800017 	ldw	r6,0(sp)
 800cc1c:	e009883a 	mov	r4,fp
 800cc20:	102d883a 	mov	r22,r2
 800cc24:	300b883a 	mov	r5,r6
 800cc28:	8002c3c0 	call	8002c3c <__mulsi3>
 800cc2c:	d9c00117 	ldw	r7,4(sp)
 800cc30:	b808d43a 	srli	r4,r23,16
 800cc34:	11c5883a 	add	r2,r2,r7
 800cc38:	2085883a 	add	r2,r4,r2
 800cc3c:	11c0022e 	bgeu	r2,r7,800cc48 <__umoddi3+0x458>
 800cc40:	00c00074 	movhi	r3,1
 800cc44:	b0ed883a 	add	r22,r22,r3
 800cc48:	1006d43a 	srli	r3,r2,16
 800cc4c:	1004943a 	slli	r2,r2,16
 800cc50:	bdffffcc 	andi	r23,r23,65535
 800cc54:	1d87883a 	add	r3,r3,r22
 800cc58:	15c5883a 	add	r2,r2,r23
 800cc5c:	88c03a36 	bltu	r17,r3,800cd48 <__umoddi3+0x558>
 800cc60:	88c03826 	beq	r17,r3,800cd44 <__umoddi3+0x554>
 800cc64:	8085c83a 	sub	r2,r16,r2
 800cc68:	80a1803a 	cmpltu	r16,r16,r2
 800cc6c:	88c7c83a 	sub	r3,r17,r3
 800cc70:	1c07c83a 	sub	r3,r3,r16
 800cc74:	1d20983a 	sll	r16,r3,r20
 800cc78:	1544d83a 	srl	r2,r2,r21
 800cc7c:	1d46d83a 	srl	r3,r3,r21
 800cc80:	8084b03a 	or	r2,r16,r2
 800cc84:	003f6306 	br	800ca14 <__umoddi3+0x224>
 800cc88:	9ca6983a 	sll	r19,r19,r18
 800cc8c:	88f8d83a 	srl	fp,r17,r3
 800cc90:	80c6d83a 	srl	r3,r16,r3
 800cc94:	982ad43a 	srli	r21,r19,16
 800cc98:	8ca2983a 	sll	r17,r17,r18
 800cc9c:	e009883a 	mov	r4,fp
 800cca0:	a80b883a 	mov	r5,r21
 800cca4:	1c6eb03a 	or	r23,r3,r17
 800cca8:	8002be00 	call	8002be0 <__umodsi3>
 800ccac:	a80b883a 	mov	r5,r21
 800ccb0:	e009883a 	mov	r4,fp
 800ccb4:	1029883a 	mov	r20,r2
 800ccb8:	9dbfffcc 	andi	r22,r19,65535
 800ccbc:	8002b7c0 	call	8002b7c <__udivsi3>
 800ccc0:	b009883a 	mov	r4,r22
 800ccc4:	100b883a 	mov	r5,r2
 800ccc8:	8002c3c0 	call	8002c3c <__mulsi3>
 800cccc:	a006943a 	slli	r3,r20,16
 800ccd0:	b808d43a 	srli	r4,r23,16
 800ccd4:	84a8983a 	sll	r20,r16,r18
 800ccd8:	1906b03a 	or	r3,r3,r4
 800ccdc:	1880042e 	bgeu	r3,r2,800ccf0 <__umoddi3+0x500>
 800cce0:	1cc7883a 	add	r3,r3,r19
 800cce4:	1cc00236 	bltu	r3,r19,800ccf0 <__umoddi3+0x500>
 800cce8:	1880012e 	bgeu	r3,r2,800ccf0 <__umoddi3+0x500>
 800ccec:	1cc7883a 	add	r3,r3,r19
 800ccf0:	18a3c83a 	sub	r17,r3,r2
 800ccf4:	8809883a 	mov	r4,r17
 800ccf8:	a80b883a 	mov	r5,r21
 800ccfc:	8002be00 	call	8002be0 <__umodsi3>
 800cd00:	1021883a 	mov	r16,r2
 800cd04:	8809883a 	mov	r4,r17
 800cd08:	a80b883a 	mov	r5,r21
 800cd0c:	8022943a 	slli	r17,r16,16
 800cd10:	8002b7c0 	call	8002b7c <__udivsi3>
 800cd14:	100b883a 	mov	r5,r2
 800cd18:	b009883a 	mov	r4,r22
 800cd1c:	bdffffcc 	andi	r23,r23,65535
 800cd20:	8002c3c0 	call	8002c3c <__mulsi3>
 800cd24:	8de2b03a 	or	r17,r17,r23
 800cd28:	8880042e 	bgeu	r17,r2,800cd3c <__umoddi3+0x54c>
 800cd2c:	8ce3883a 	add	r17,r17,r19
 800cd30:	8cc00236 	bltu	r17,r19,800cd3c <__umoddi3+0x54c>
 800cd34:	8880012e 	bgeu	r17,r2,800cd3c <__umoddi3+0x54c>
 800cd38:	8ce3883a 	add	r17,r17,r19
 800cd3c:	88a3c83a 	sub	r17,r17,r2
 800cd40:	003f0f06 	br	800c980 <__umoddi3+0x190>
 800cd44:	80bfc72e 	bgeu	r16,r2,800cc64 <__umoddi3+0x474>
 800cd48:	14e7c83a 	sub	r19,r2,r19
 800cd4c:	14c5803a 	cmpltu	r2,r2,r19
 800cd50:	1489883a 	add	r4,r2,r18
 800cd54:	1907c83a 	sub	r3,r3,r4
 800cd58:	9805883a 	mov	r2,r19
 800cd5c:	003fc106 	br	800cc64 <__umoddi3+0x474>
 800cd60:	3007883a 	mov	r3,r6
 800cd64:	003ebb06 	br	800c854 <__umoddi3+0x64>
 800cd68:	3811883a 	mov	r8,r7
 800cd6c:	000b883a 	mov	r5,zero
 800cd70:	003f3b06 	br	800ca60 <__umoddi3+0x270>
 800cd74:	3810d43a 	srli	r8,r7,16
 800cd78:	01400404 	movi	r5,16
 800cd7c:	003f3806 	br	800ca60 <__umoddi3+0x270>
 800cd80:	9806d43a 	srli	r3,r19,16
 800cd84:	04800404 	movi	r18,16
 800cd88:	003ef306 	br	800c958 <__umoddi3+0x168>
 800cd8c:	9807883a 	mov	r3,r19
 800cd90:	003ef106 	br	800c958 <__umoddi3+0x168>
 800cd94:	3006d43a 	srli	r3,r6,16
 800cd98:	04800404 	movi	r18,16
 800cd9c:	003ead06 	br	800c854 <__umoddi3+0x64>
 800cda0:	182d883a 	mov	r22,r3
 800cda4:	003f8506 	br	800cbbc <__umoddi3+0x3cc>
 800cda8:	2039883a 	mov	fp,r4
 800cdac:	003f6a06 	br	800cb58 <__umoddi3+0x368>
 800cdb0:	1cc7883a 	add	r3,r3,r19
 800cdb4:	003ec606 	br	800c8d0 <__umoddi3+0xe0>

0800cdb8 <__adddf3>:
 800cdb8:	02000434 	movhi	r8,16
 800cdbc:	defffb04 	addi	sp,sp,-20
 800cdc0:	423fffc4 	addi	r8,r8,-1
 800cdc4:	2a12703a 	and	r9,r5,r8
 800cdc8:	3a06703a 	and	r3,r7,r8
 800cdcc:	3804d53a 	srli	r2,r7,20
 800cdd0:	dc000015 	stw	r16,0(sp)
 800cdd4:	2820d53a 	srli	r16,r5,20
 800cdd8:	2016d77a 	srli	r11,r4,29
 800cddc:	3014d77a 	srli	r10,r6,29
 800cde0:	280ad7fa 	srli	r5,r5,31
 800cde4:	481290fa 	slli	r9,r9,3
 800cde8:	180690fa 	slli	r3,r3,3
 800cdec:	380ed7fa 	srli	r7,r7,31
 800cdf0:	dc400115 	stw	r17,4(sp)
 800cdf4:	8401ffcc 	andi	r16,r16,2047
 800cdf8:	1081ffcc 	andi	r2,r2,2047
 800cdfc:	dfc00415 	stw	ra,16(sp)
 800ce00:	dcc00315 	stw	r19,12(sp)
 800ce04:	dc800215 	stw	r18,8(sp)
 800ce08:	5a52b03a 	or	r9,r11,r9
 800ce0c:	50c6b03a 	or	r3,r10,r3
 800ce10:	2823883a 	mov	r17,r5
 800ce14:	201890fa 	slli	r12,r4,3
 800ce18:	301690fa 	slli	r11,r6,3
 800ce1c:	8095c83a 	sub	r10,r16,r2
 800ce20:	29c06a26 	beq	r5,r7,800cfcc <__adddf3+0x214>
 800ce24:	0280590e 	bge	zero,r10,800cf8c <__adddf3+0x1d4>
 800ce28:	10007c26 	beq	r2,zero,800d01c <__adddf3+0x264>
 800ce2c:	8081ffd8 	cmpnei	r2,r16,2047
 800ce30:	10010726 	beq	r2,zero,800d250 <__adddf3+0x498>
 800ce34:	18c02034 	orhi	r3,r3,128
 800ce38:	50800e48 	cmpgei	r2,r10,57
 800ce3c:	1000ed1e 	bne	r2,zero,800d1f4 <__adddf3+0x43c>
 800ce40:	50800808 	cmpgei	r2,r10,32
 800ce44:	1001541e 	bne	r2,zero,800d398 <__adddf3+0x5e0>
 800ce48:	01000804 	movi	r4,32
 800ce4c:	2289c83a 	sub	r4,r4,r10
 800ce50:	1926983a 	sll	r19,r3,r4
 800ce54:	5a84d83a 	srl	r2,r11,r10
 800ce58:	5908983a 	sll	r4,r11,r4
 800ce5c:	1a86d83a 	srl	r3,r3,r10
 800ce60:	98a6b03a 	or	r19,r19,r2
 800ce64:	2016c03a 	cmpne	r11,r4,zero
 800ce68:	9ae6b03a 	or	r19,r19,r11
 800ce6c:	48d3c83a 	sub	r9,r9,r3
 800ce70:	64e7c83a 	sub	r19,r12,r19
 800ce74:	64c9803a 	cmpltu	r4,r12,r19
 800ce78:	4909c83a 	sub	r4,r9,r4
 800ce7c:	2080202c 	andhi	r2,r4,128
 800ce80:	10008726 	beq	r2,zero,800d0a0 <__adddf3+0x2e8>
 800ce84:	02402034 	movhi	r9,128
 800ce88:	4a7fffc4 	addi	r9,r9,-1
 800ce8c:	2264703a 	and	r18,r4,r9
 800ce90:	9000cf26 	beq	r18,zero,800d1d0 <__adddf3+0x418>
 800ce94:	9009883a 	mov	r4,r18
 800ce98:	800f6a00 	call	800f6a0 <__clzsi2>
 800ce9c:	10fffe04 	addi	r3,r2,-8
 800cea0:	01000804 	movi	r4,32
 800cea4:	20c9c83a 	sub	r4,r4,r3
 800cea8:	990ad83a 	srl	r5,r19,r4
 800ceac:	90c8983a 	sll	r4,r18,r3
 800ceb0:	98e6983a 	sll	r19,r19,r3
 800ceb4:	2908b03a 	or	r4,r5,r4
 800ceb8:	1c00be16 	blt	r3,r16,800d1b4 <__adddf3+0x3fc>
 800cebc:	1c21c83a 	sub	r16,r3,r16
 800cec0:	81400044 	addi	r5,r16,1
 800cec4:	28800808 	cmpgei	r2,r5,32
 800cec8:	10011b1e 	bne	r2,zero,800d338 <__adddf3+0x580>
 800cecc:	00800804 	movi	r2,32
 800ced0:	1145c83a 	sub	r2,r2,r5
 800ced4:	9946d83a 	srl	r3,r19,r5
 800ced8:	98a6983a 	sll	r19,r19,r2
 800cedc:	2084983a 	sll	r2,r4,r2
 800cee0:	2148d83a 	srl	r4,r4,r5
 800cee4:	9826c03a 	cmpne	r19,r19,zero
 800cee8:	10c4b03a 	or	r2,r2,r3
 800ceec:	14e6b03a 	or	r19,r2,r19
 800cef0:	0021883a 	mov	r16,zero
 800cef4:	988001cc 	andi	r2,r19,7
 800cef8:	10000726 	beq	r2,zero,800cf18 <__adddf3+0x160>
 800cefc:	988003cc 	andi	r2,r19,15
 800cf00:	10800120 	cmpeqi	r2,r2,4
 800cf04:	1000041e 	bne	r2,zero,800cf18 <__adddf3+0x160>
 800cf08:	99400104 	addi	r5,r19,4
 800cf0c:	2ce7803a 	cmpltu	r19,r5,r19
 800cf10:	24c9883a 	add	r4,r4,r19
 800cf14:	2827883a 	mov	r19,r5
 800cf18:	2080202c 	andhi	r2,r4,128
 800cf1c:	10006226 	beq	r2,zero,800d0a8 <__adddf3+0x2f0>
 800cf20:	84000044 	addi	r16,r16,1
 800cf24:	8081ffe0 	cmpeqi	r2,r16,2047
 800cf28:	8401ffcc 	andi	r16,r16,2047
 800cf2c:	1000731e 	bne	r2,zero,800d0fc <__adddf3+0x344>
 800cf30:	017fe034 	movhi	r5,65408
 800cf34:	297fffc4 	addi	r5,r5,-1
 800cf38:	214a703a 	and	r5,r4,r5
 800cf3c:	2804977a 	slli	r2,r5,29
 800cf40:	280a927a 	slli	r5,r5,9
 800cf44:	9826d0fa 	srli	r19,r19,3
 800cf48:	2808d33a 	srli	r4,r5,12
 800cf4c:	14c4b03a 	or	r2,r2,r19
 800cf50:	8020953a 	slli	r16,r16,20
 800cf54:	00c00434 	movhi	r3,16
 800cf58:	8c403fcc 	andi	r17,r17,255
 800cf5c:	882297fa 	slli	r17,r17,31
 800cf60:	18ffffc4 	addi	r3,r3,-1
 800cf64:	20c6703a 	and	r3,r4,r3
 800cf68:	1c06b03a 	or	r3,r3,r16
 800cf6c:	1c46b03a 	or	r3,r3,r17
 800cf70:	dfc00417 	ldw	ra,16(sp)
 800cf74:	dcc00317 	ldw	r19,12(sp)
 800cf78:	dc800217 	ldw	r18,8(sp)
 800cf7c:	dc400117 	ldw	r17,4(sp)
 800cf80:	dc000017 	ldw	r16,0(sp)
 800cf84:	dec00504 	addi	sp,sp,20
 800cf88:	f800283a 	ret
 800cf8c:	50002b1e 	bne	r10,zero,800d03c <__adddf3+0x284>
 800cf90:	80800044 	addi	r2,r16,1
 800cf94:	1081ff8c 	andi	r2,r2,2046
 800cf98:	1000a11e 	bne	r2,zero,800d220 <__adddf3+0x468>
 800cf9c:	4b0ab03a 	or	r5,r9,r12
 800cfa0:	1ac4b03a 	or	r2,r3,r11
 800cfa4:	80015c1e 	bne	r16,zero,800d518 <__adddf3+0x760>
 800cfa8:	28012826 	beq	r5,zero,800d44c <__adddf3+0x694>
 800cfac:	1001671e 	bne	r2,zero,800d54c <__adddf3+0x794>
 800cfb0:	4826977a 	slli	r19,r9,29
 800cfb4:	00c80034 	movhi	r3,8192
 800cfb8:	18ffffc4 	addi	r3,r3,-1
 800cfbc:	20c4703a 	and	r2,r4,r3
 800cfc0:	9884b03a 	or	r2,r19,r2
 800cfc4:	4812d0fa 	srli	r9,r9,3
 800cfc8:	00003d06 	br	800d0c0 <__adddf3+0x308>
 800cfcc:	02804f0e 	bge	zero,r10,800d10c <__adddf3+0x354>
 800cfd0:	10002426 	beq	r2,zero,800d064 <__adddf3+0x2ac>
 800cfd4:	8081ffd8 	cmpnei	r2,r16,2047
 800cfd8:	10009d26 	beq	r2,zero,800d250 <__adddf3+0x498>
 800cfdc:	18c02034 	orhi	r3,r3,128
 800cfe0:	50800e48 	cmpgei	r2,r10,57
 800cfe4:	10003b1e 	bne	r2,zero,800d0d4 <__adddf3+0x31c>
 800cfe8:	50800808 	cmpgei	r2,r10,32
 800cfec:	10010326 	beq	r2,zero,800d3fc <__adddf3+0x644>
 800cff0:	54fff804 	addi	r19,r10,-32
 800cff4:	51000820 	cmpeqi	r4,r10,32
 800cff8:	1cc4d83a 	srl	r2,r3,r19
 800cffc:	2000041e 	bne	r4,zero,800d010 <__adddf3+0x258>
 800d000:	01001004 	movi	r4,64
 800d004:	2295c83a 	sub	r10,r4,r10
 800d008:	1a86983a 	sll	r3,r3,r10
 800d00c:	58d6b03a 	or	r11,r11,r3
 800d010:	5826c03a 	cmpne	r19,r11,zero
 800d014:	98a6b03a 	or	r19,r19,r2
 800d018:	00003006 	br	800d0dc <__adddf3+0x324>
 800d01c:	1ac4b03a 	or	r2,r3,r11
 800d020:	10007726 	beq	r2,zero,800d200 <__adddf3+0x448>
 800d024:	50bfffc4 	addi	r2,r10,-1
 800d028:	10011926 	beq	r2,zero,800d490 <__adddf3+0x6d8>
 800d02c:	5281ffd8 	cmpnei	r10,r10,2047
 800d030:	50012026 	beq	r10,zero,800d4b4 <__adddf3+0x6fc>
 800d034:	1015883a 	mov	r10,r2
 800d038:	003f7f06 	br	800ce38 <__adddf3+0x80>
 800d03c:	1409c83a 	sub	r4,r2,r16
 800d040:	8000a61e 	bne	r16,zero,800d2dc <__adddf3+0x524>
 800d044:	4b0ab03a 	or	r5,r9,r12
 800d048:	2800f726 	beq	r5,zero,800d428 <__adddf3+0x670>
 800d04c:	217fffc4 	addi	r5,r4,-1
 800d050:	28017f26 	beq	r5,zero,800d650 <__adddf3+0x898>
 800d054:	2101ffd8 	cmpnei	r4,r4,2047
 800d058:	2001a326 	beq	r4,zero,800d6e8 <__adddf3+0x930>
 800d05c:	2809883a 	mov	r4,r5
 800d060:	0000a106 	br	800d2e8 <__adddf3+0x530>
 800d064:	1ac4b03a 	or	r2,r3,r11
 800d068:	10006526 	beq	r2,zero,800d200 <__adddf3+0x448>
 800d06c:	50bfffc4 	addi	r2,r10,-1
 800d070:	10000426 	beq	r2,zero,800d084 <__adddf3+0x2cc>
 800d074:	5281ffd8 	cmpnei	r10,r10,2047
 800d078:	50014326 	beq	r10,zero,800d588 <__adddf3+0x7d0>
 800d07c:	1015883a 	mov	r10,r2
 800d080:	003fd706 	br	800cfe0 <__adddf3+0x228>
 800d084:	62e7883a 	add	r19,r12,r11
 800d088:	48d3883a 	add	r9,r9,r3
 800d08c:	9b09803a 	cmpltu	r4,r19,r12
 800d090:	4909883a 	add	r4,r9,r4
 800d094:	2080202c 	andhi	r2,r4,128
 800d098:	1000b41e 	bne	r2,zero,800d36c <__adddf3+0x5b4>
 800d09c:	04000044 	movi	r16,1
 800d0a0:	988001cc 	andi	r2,r19,7
 800d0a4:	103f951e 	bne	r2,zero,800cefc <__adddf3+0x144>
 800d0a8:	9826d0fa 	srli	r19,r19,3
 800d0ac:	2004977a 	slli	r2,r4,29
 800d0b0:	2012d0fa 	srli	r9,r4,3
 800d0b4:	9884b03a 	or	r2,r19,r2
 800d0b8:	80c1ffe0 	cmpeqi	r3,r16,2047
 800d0bc:	1800351e 	bne	r3,zero,800d194 <__adddf3+0x3dc>
 800d0c0:	01000434 	movhi	r4,16
 800d0c4:	213fffc4 	addi	r4,r4,-1
 800d0c8:	4908703a 	and	r4,r9,r4
 800d0cc:	8401ffcc 	andi	r16,r16,2047
 800d0d0:	003f9f06 	br	800cf50 <__adddf3+0x198>
 800d0d4:	1ac8b03a 	or	r4,r3,r11
 800d0d8:	2026c03a 	cmpne	r19,r4,zero
 800d0dc:	9b27883a 	add	r19,r19,r12
 800d0e0:	9b09803a 	cmpltu	r4,r19,r12
 800d0e4:	2249883a 	add	r4,r4,r9
 800d0e8:	2080202c 	andhi	r2,r4,128
 800d0ec:	103fec26 	beq	r2,zero,800d0a0 <__adddf3+0x2e8>
 800d0f0:	84000044 	addi	r16,r16,1
 800d0f4:	8081ffe0 	cmpeqi	r2,r16,2047
 800d0f8:	10009d26 	beq	r2,zero,800d370 <__adddf3+0x5b8>
 800d0fc:	0401ffc4 	movi	r16,2047
 800d100:	0009883a 	mov	r4,zero
 800d104:	0005883a 	mov	r2,zero
 800d108:	003f9106 	br	800cf50 <__adddf3+0x198>
 800d10c:	5000571e 	bne	r10,zero,800d26c <__adddf3+0x4b4>
 800d110:	80800044 	addi	r2,r16,1
 800d114:	1141ff8c 	andi	r5,r2,2046
 800d118:	2800ed1e 	bne	r5,zero,800d4d0 <__adddf3+0x718>
 800d11c:	4b04b03a 	or	r2,r9,r12
 800d120:	8000a826 	beq	r16,zero,800d3c4 <__adddf3+0x60c>
 800d124:	10010226 	beq	r2,zero,800d530 <__adddf3+0x778>
 800d128:	1ad6b03a 	or	r11,r3,r11
 800d12c:	480a977a 	slli	r5,r9,29
 800d130:	4812d0fa 	srli	r9,r9,3
 800d134:	58015f26 	beq	r11,zero,800d6b4 <__adddf3+0x8fc>
 800d138:	02080034 	movhi	r8,8192
 800d13c:	423fffc4 	addi	r8,r8,-1
 800d140:	2204703a 	and	r2,r4,r8
 800d144:	4900022c 	andhi	r4,r9,8
 800d148:	114ab03a 	or	r5,r2,r5
 800d14c:	20000826 	beq	r4,zero,800d170 <__adddf3+0x3b8>
 800d150:	1808d0fa 	srli	r4,r3,3
 800d154:	2080022c 	andhi	r2,r4,8
 800d158:	1000051e 	bne	r2,zero,800d170 <__adddf3+0x3b8>
 800d15c:	1806977a 	slli	r3,r3,29
 800d160:	3204703a 	and	r2,r6,r8
 800d164:	3823883a 	mov	r17,r7
 800d168:	10cab03a 	or	r5,r2,r3
 800d16c:	2013883a 	mov	r9,r4
 800d170:	2804d77a 	srli	r2,r5,29
 800d174:	480890fa 	slli	r4,r9,3
 800d178:	00c80034 	movhi	r3,8192
 800d17c:	18ffffc4 	addi	r3,r3,-1
 800d180:	1108b03a 	or	r4,r2,r4
 800d184:	2004977a 	slli	r2,r4,29
 800d188:	2012d0fa 	srli	r9,r4,3
 800d18c:	28ca703a 	and	r5,r5,r3
 800d190:	1144b03a 	or	r2,r2,r5
 800d194:	4886b03a 	or	r3,r9,r2
 800d198:	18016b26 	beq	r3,zero,800d748 <__adddf3+0x990>
 800d19c:	00c00434 	movhi	r3,16
 800d1a0:	49000234 	orhi	r4,r9,8
 800d1a4:	18ffffc4 	addi	r3,r3,-1
 800d1a8:	20c8703a 	and	r4,r4,r3
 800d1ac:	0401ffc4 	movi	r16,2047
 800d1b0:	003f6706 	br	800cf50 <__adddf3+0x198>
 800d1b4:	017fe034 	movhi	r5,65408
 800d1b8:	297fffc4 	addi	r5,r5,-1
 800d1bc:	988001cc 	andi	r2,r19,7
 800d1c0:	80e1c83a 	sub	r16,r16,r3
 800d1c4:	2148703a 	and	r4,r4,r5
 800d1c8:	103f4c1e 	bne	r2,zero,800cefc <__adddf3+0x144>
 800d1cc:	003fb606 	br	800d0a8 <__adddf3+0x2f0>
 800d1d0:	9809883a 	mov	r4,r19
 800d1d4:	800f6a00 	call	800f6a0 <__clzsi2>
 800d1d8:	10c00604 	addi	r3,r2,24
 800d1dc:	19000808 	cmpgei	r4,r3,32
 800d1e0:	203f2f26 	beq	r4,zero,800cea0 <__adddf3+0xe8>
 800d1e4:	113ffe04 	addi	r4,r2,-8
 800d1e8:	9908983a 	sll	r4,r19,r4
 800d1ec:	0027883a 	mov	r19,zero
 800d1f0:	003f3106 	br	800ceb8 <__adddf3+0x100>
 800d1f4:	1ac8b03a 	or	r4,r3,r11
 800d1f8:	2026c03a 	cmpne	r19,r4,zero
 800d1fc:	003f1c06 	br	800ce70 <__adddf3+0xb8>
 800d200:	4826977a 	slli	r19,r9,29
 800d204:	00c80034 	movhi	r3,8192
 800d208:	18ffffc4 	addi	r3,r3,-1
 800d20c:	20c4703a 	and	r2,r4,r3
 800d210:	14c4b03a 	or	r2,r2,r19
 800d214:	4812d0fa 	srli	r9,r9,3
 800d218:	5021883a 	mov	r16,r10
 800d21c:	003fa606 	br	800d0b8 <__adddf3+0x300>
 800d220:	62e7c83a 	sub	r19,r12,r11
 800d224:	48e5c83a 	sub	r18,r9,r3
 800d228:	64c9803a 	cmpltu	r4,r12,r19
 800d22c:	9125c83a 	sub	r18,r18,r4
 800d230:	9080202c 	andhi	r2,r18,128
 800d234:	1000b21e 	bne	r2,zero,800d500 <__adddf3+0x748>
 800d238:	9c84b03a 	or	r2,r19,r18
 800d23c:	103f141e 	bne	r2,zero,800ce90 <__adddf3+0xd8>
 800d240:	0013883a 	mov	r9,zero
 800d244:	0021883a 	mov	r16,zero
 800d248:	0023883a 	mov	r17,zero
 800d24c:	003f9c06 	br	800d0c0 <__adddf3+0x308>
 800d250:	4826977a 	slli	r19,r9,29
 800d254:	00c80034 	movhi	r3,8192
 800d258:	18ffffc4 	addi	r3,r3,-1
 800d25c:	20c4703a 	and	r2,r4,r3
 800d260:	14c4b03a 	or	r2,r2,r19
 800d264:	4812d0fa 	srli	r9,r9,3
 800d268:	003fca06 	br	800d194 <__adddf3+0x3dc>
 800d26c:	1409c83a 	sub	r4,r2,r16
 800d270:	80005e1e 	bne	r16,zero,800d3ec <__adddf3+0x634>
 800d274:	4b0ab03a 	or	r5,r9,r12
 800d278:	28011326 	beq	r5,zero,800d6c8 <__adddf3+0x910>
 800d27c:	217fffc4 	addi	r5,r4,-1
 800d280:	28012c26 	beq	r5,zero,800d734 <__adddf3+0x97c>
 800d284:	2101ffd8 	cmpnei	r4,r4,2047
 800d288:	2000a926 	beq	r4,zero,800d530 <__adddf3+0x778>
 800d28c:	2809883a 	mov	r4,r5
 800d290:	21400e48 	cmpgei	r5,r4,57
 800d294:	2800b91e 	bne	r5,zero,800d57c <__adddf3+0x7c4>
 800d298:	21400808 	cmpgei	r5,r4,32
 800d29c:	28011a1e 	bne	r5,zero,800d708 <__adddf3+0x950>
 800d2a0:	01400804 	movi	r5,32
 800d2a4:	290bc83a 	sub	r5,r5,r4
 800d2a8:	4966983a 	sll	r19,r9,r5
 800d2ac:	610cd83a 	srl	r6,r12,r4
 800d2b0:	614a983a 	sll	r5,r12,r5
 800d2b4:	4912d83a 	srl	r9,r9,r4
 800d2b8:	99a6b03a 	or	r19,r19,r6
 800d2bc:	280ac03a 	cmpne	r5,r5,zero
 800d2c0:	9966b03a 	or	r19,r19,r5
 800d2c4:	1a47883a 	add	r3,r3,r9
 800d2c8:	9ae7883a 	add	r19,r19,r11
 800d2cc:	9ac9803a 	cmpltu	r4,r19,r11
 800d2d0:	20c9883a 	add	r4,r4,r3
 800d2d4:	1021883a 	mov	r16,r2
 800d2d8:	003f8306 	br	800d0e8 <__adddf3+0x330>
 800d2dc:	1141ffd8 	cmpnei	r5,r2,2047
 800d2e0:	28006326 	beq	r5,zero,800d470 <__adddf3+0x6b8>
 800d2e4:	4a402034 	orhi	r9,r9,128
 800d2e8:	21400e48 	cmpgei	r5,r4,57
 800d2ec:	28006e1e 	bne	r5,zero,800d4a8 <__adddf3+0x6f0>
 800d2f0:	21400808 	cmpgei	r5,r4,32
 800d2f4:	2800ab1e 	bne	r5,zero,800d5a4 <__adddf3+0x7ec>
 800d2f8:	01400804 	movi	r5,32
 800d2fc:	290bc83a 	sub	r5,r5,r4
 800d300:	4966983a 	sll	r19,r9,r5
 800d304:	610cd83a 	srl	r6,r12,r4
 800d308:	614a983a 	sll	r5,r12,r5
 800d30c:	4912d83a 	srl	r9,r9,r4
 800d310:	99a6b03a 	or	r19,r19,r6
 800d314:	280ac03a 	cmpne	r5,r5,zero
 800d318:	9966b03a 	or	r19,r19,r5
 800d31c:	1a47c83a 	sub	r3,r3,r9
 800d320:	5ce7c83a 	sub	r19,r11,r19
 800d324:	5cc9803a 	cmpltu	r4,r11,r19
 800d328:	1909c83a 	sub	r4,r3,r4
 800d32c:	3823883a 	mov	r17,r7
 800d330:	1021883a 	mov	r16,r2
 800d334:	003ed106 	br	800ce7c <__adddf3+0xc4>
 800d338:	843ff844 	addi	r16,r16,-31
 800d33c:	28800820 	cmpeqi	r2,r5,32
 800d340:	2420d83a 	srl	r16,r4,r16
 800d344:	1000041e 	bne	r2,zero,800d358 <__adddf3+0x5a0>
 800d348:	00801004 	movi	r2,64
 800d34c:	114bc83a 	sub	r5,r2,r5
 800d350:	2148983a 	sll	r4,r4,r5
 800d354:	9926b03a 	or	r19,r19,r4
 800d358:	9826c03a 	cmpne	r19,r19,zero
 800d35c:	9c26b03a 	or	r19,r19,r16
 800d360:	0009883a 	mov	r4,zero
 800d364:	0021883a 	mov	r16,zero
 800d368:	003f4d06 	br	800d0a0 <__adddf3+0x2e8>
 800d36c:	04000084 	movi	r16,2
 800d370:	00bfe034 	movhi	r2,65408
 800d374:	10bfffc4 	addi	r2,r2,-1
 800d378:	208a703a 	and	r5,r4,r2
 800d37c:	9804d07a 	srli	r2,r19,1
 800d380:	280697fa 	slli	r3,r5,31
 800d384:	9cc0004c 	andi	r19,r19,1
 800d388:	14e6b03a 	or	r19,r2,r19
 800d38c:	2808d07a 	srli	r4,r5,1
 800d390:	1ce6b03a 	or	r19,r3,r19
 800d394:	003ed706 	br	800cef4 <__adddf3+0x13c>
 800d398:	54fff804 	addi	r19,r10,-32
 800d39c:	50800820 	cmpeqi	r2,r10,32
 800d3a0:	1ce6d83a 	srl	r19,r3,r19
 800d3a4:	1000041e 	bne	r2,zero,800d3b8 <__adddf3+0x600>
 800d3a8:	00801004 	movi	r2,64
 800d3ac:	1295c83a 	sub	r10,r2,r10
 800d3b0:	1a86983a 	sll	r3,r3,r10
 800d3b4:	58d6b03a 	or	r11,r11,r3
 800d3b8:	5808c03a 	cmpne	r4,r11,zero
 800d3bc:	24e6b03a 	or	r19,r4,r19
 800d3c0:	003eab06 	br	800ce70 <__adddf3+0xb8>
 800d3c4:	1000a926 	beq	r2,zero,800d66c <__adddf3+0x8b4>
 800d3c8:	1ac4b03a 	or	r2,r3,r11
 800d3cc:	1000ae1e 	bne	r2,zero,800d688 <__adddf3+0x8d0>
 800d3d0:	4806977a 	slli	r3,r9,29
 800d3d4:	00880034 	movhi	r2,8192
 800d3d8:	10bfffc4 	addi	r2,r2,-1
 800d3dc:	2084703a 	and	r2,r4,r2
 800d3e0:	10c4b03a 	or	r2,r2,r3
 800d3e4:	4812d0fa 	srli	r9,r9,3
 800d3e8:	003f3506 	br	800d0c0 <__adddf3+0x308>
 800d3ec:	1141ffd8 	cmpnei	r5,r2,2047
 800d3f0:	28004f26 	beq	r5,zero,800d530 <__adddf3+0x778>
 800d3f4:	4a402034 	orhi	r9,r9,128
 800d3f8:	003fa506 	br	800d290 <__adddf3+0x4d8>
 800d3fc:	01000804 	movi	r4,32
 800d400:	2289c83a 	sub	r4,r4,r10
 800d404:	1926983a 	sll	r19,r3,r4
 800d408:	5a84d83a 	srl	r2,r11,r10
 800d40c:	5908983a 	sll	r4,r11,r4
 800d410:	1a86d83a 	srl	r3,r3,r10
 800d414:	98a6b03a 	or	r19,r19,r2
 800d418:	2016c03a 	cmpne	r11,r4,zero
 800d41c:	9ae6b03a 	or	r19,r19,r11
 800d420:	48d3883a 	add	r9,r9,r3
 800d424:	003f2d06 	br	800d0dc <__adddf3+0x324>
 800d428:	01480034 	movhi	r5,8192
 800d42c:	1826977a 	slli	r19,r3,29
 800d430:	297fffc4 	addi	r5,r5,-1
 800d434:	3144703a 	and	r2,r6,r5
 800d438:	14c4b03a 	or	r2,r2,r19
 800d43c:	1812d0fa 	srli	r9,r3,3
 800d440:	3823883a 	mov	r17,r7
 800d444:	2021883a 	mov	r16,r4
 800d448:	003f1b06 	br	800d0b8 <__adddf3+0x300>
 800d44c:	10007d26 	beq	r2,zero,800d644 <__adddf3+0x88c>
 800d450:	00880034 	movhi	r2,8192
 800d454:	1808977a 	slli	r4,r3,29
 800d458:	10bfffc4 	addi	r2,r2,-1
 800d45c:	3084703a 	and	r2,r6,r2
 800d460:	1104b03a 	or	r2,r2,r4
 800d464:	1812d0fa 	srli	r9,r3,3
 800d468:	3823883a 	mov	r17,r7
 800d46c:	003f1406 	br	800d0c0 <__adddf3+0x308>
 800d470:	180a977a 	slli	r5,r3,29
 800d474:	01080034 	movhi	r4,8192
 800d478:	213fffc4 	addi	r4,r4,-1
 800d47c:	3104703a 	and	r2,r6,r4
 800d480:	2884b03a 	or	r2,r5,r2
 800d484:	1812d0fa 	srli	r9,r3,3
 800d488:	3823883a 	mov	r17,r7
 800d48c:	003f4106 	br	800d194 <__adddf3+0x3dc>
 800d490:	62e7c83a 	sub	r19,r12,r11
 800d494:	48d3c83a 	sub	r9,r9,r3
 800d498:	64c9803a 	cmpltu	r4,r12,r19
 800d49c:	4909c83a 	sub	r4,r9,r4
 800d4a0:	04000044 	movi	r16,1
 800d4a4:	003e7506 	br	800ce7c <__adddf3+0xc4>
 800d4a8:	4b12b03a 	or	r9,r9,r12
 800d4ac:	4826c03a 	cmpne	r19,r9,zero
 800d4b0:	003f9b06 	br	800d320 <__adddf3+0x568>
 800d4b4:	4826977a 	slli	r19,r9,29
 800d4b8:	00c80034 	movhi	r3,8192
 800d4bc:	18ffffc4 	addi	r3,r3,-1
 800d4c0:	20c4703a 	and	r2,r4,r3
 800d4c4:	9884b03a 	or	r2,r19,r2
 800d4c8:	4812d0fa 	srli	r9,r9,3
 800d4cc:	003f3106 	br	800d194 <__adddf3+0x3dc>
 800d4d0:	1101ffe0 	cmpeqi	r4,r2,2047
 800d4d4:	203f091e 	bne	r4,zero,800d0fc <__adddf3+0x344>
 800d4d8:	62d7883a 	add	r11,r12,r11
 800d4dc:	5b09803a 	cmpltu	r4,r11,r12
 800d4e0:	48d3883a 	add	r9,r9,r3
 800d4e4:	490b883a 	add	r5,r9,r4
 800d4e8:	282697fa 	slli	r19,r5,31
 800d4ec:	5816d07a 	srli	r11,r11,1
 800d4f0:	2808d07a 	srli	r4,r5,1
 800d4f4:	1021883a 	mov	r16,r2
 800d4f8:	9ae6b03a 	or	r19,r19,r11
 800d4fc:	003ee806 	br	800d0a0 <__adddf3+0x2e8>
 800d500:	5b27c83a 	sub	r19,r11,r12
 800d504:	1a53c83a 	sub	r9,r3,r9
 800d508:	5cc9803a 	cmpltu	r4,r11,r19
 800d50c:	4925c83a 	sub	r18,r9,r4
 800d510:	3823883a 	mov	r17,r7
 800d514:	003e5e06 	br	800ce90 <__adddf3+0xd8>
 800d518:	28002d1e 	bne	r5,zero,800d5d0 <__adddf3+0x818>
 800d51c:	103fd41e 	bne	r2,zero,800d470 <__adddf3+0x6b8>
 800d520:	00bfffc4 	movi	r2,-1
 800d524:	0023883a 	mov	r17,zero
 800d528:	4013883a 	mov	r9,r8
 800d52c:	003f1b06 	br	800d19c <__adddf3+0x3e4>
 800d530:	00880034 	movhi	r2,8192
 800d534:	1808977a 	slli	r4,r3,29
 800d538:	10bfffc4 	addi	r2,r2,-1
 800d53c:	3084703a 	and	r2,r6,r2
 800d540:	1104b03a 	or	r2,r2,r4
 800d544:	1812d0fa 	srli	r9,r3,3
 800d548:	003f1206 	br	800d194 <__adddf3+0x3dc>
 800d54c:	62e7c83a 	sub	r19,r12,r11
 800d550:	48cbc83a 	sub	r5,r9,r3
 800d554:	64c9803a 	cmpltu	r4,r12,r19
 800d558:	2909c83a 	sub	r4,r5,r4
 800d55c:	2080202c 	andhi	r2,r4,128
 800d560:	10003626 	beq	r2,zero,800d63c <__adddf3+0x884>
 800d564:	5b27c83a 	sub	r19,r11,r12
 800d568:	1a53c83a 	sub	r9,r3,r9
 800d56c:	5cc9803a 	cmpltu	r4,r11,r19
 800d570:	4909c83a 	sub	r4,r9,r4
 800d574:	3823883a 	mov	r17,r7
 800d578:	003e5e06 	br	800cef4 <__adddf3+0x13c>
 800d57c:	4b12b03a 	or	r9,r9,r12
 800d580:	4826c03a 	cmpne	r19,r9,zero
 800d584:	003f5006 	br	800d2c8 <__adddf3+0x510>
 800d588:	4806977a 	slli	r3,r9,29
 800d58c:	00880034 	movhi	r2,8192
 800d590:	10bfffc4 	addi	r2,r2,-1
 800d594:	2084703a 	and	r2,r4,r2
 800d598:	10c4b03a 	or	r2,r2,r3
 800d59c:	4812d0fa 	srli	r9,r9,3
 800d5a0:	003efc06 	br	800d194 <__adddf3+0x3dc>
 800d5a4:	217ff804 	addi	r5,r4,-32
 800d5a8:	21800820 	cmpeqi	r6,r4,32
 800d5ac:	494ad83a 	srl	r5,r9,r5
 800d5b0:	3000041e 	bne	r6,zero,800d5c4 <__adddf3+0x80c>
 800d5b4:	01801004 	movi	r6,64
 800d5b8:	3109c83a 	sub	r4,r6,r4
 800d5bc:	4912983a 	sll	r9,r9,r4
 800d5c0:	6258b03a 	or	r12,r12,r9
 800d5c4:	6026c03a 	cmpne	r19,r12,zero
 800d5c8:	9966b03a 	or	r19,r19,r5
 800d5cc:	003f5406 	br	800d320 <__adddf3+0x568>
 800d5d0:	480a977a 	slli	r5,r9,29
 800d5d4:	4812d0fa 	srli	r9,r9,3
 800d5d8:	10003626 	beq	r2,zero,800d6b4 <__adddf3+0x8fc>
 800d5dc:	02080034 	movhi	r8,8192
 800d5e0:	423fffc4 	addi	r8,r8,-1
 800d5e4:	2204703a 	and	r2,r4,r8
 800d5e8:	4900022c 	andhi	r4,r9,8
 800d5ec:	114ab03a 	or	r5,r2,r5
 800d5f0:	20000826 	beq	r4,zero,800d614 <__adddf3+0x85c>
 800d5f4:	1808d0fa 	srli	r4,r3,3
 800d5f8:	2080022c 	andhi	r2,r4,8
 800d5fc:	1000051e 	bne	r2,zero,800d614 <__adddf3+0x85c>
 800d600:	1806977a 	slli	r3,r3,29
 800d604:	3204703a 	and	r2,r6,r8
 800d608:	3823883a 	mov	r17,r7
 800d60c:	10cab03a 	or	r5,r2,r3
 800d610:	2013883a 	mov	r9,r4
 800d614:	480890fa 	slli	r4,r9,3
 800d618:	2804d77a 	srli	r2,r5,29
 800d61c:	00c80034 	movhi	r3,8192
 800d620:	18ffffc4 	addi	r3,r3,-1
 800d624:	1108b03a 	or	r4,r2,r4
 800d628:	200c977a 	slli	r6,r4,29
 800d62c:	28c4703a 	and	r2,r5,r3
 800d630:	2012d0fa 	srli	r9,r4,3
 800d634:	3084b03a 	or	r2,r6,r2
 800d638:	003ed606 	br	800d194 <__adddf3+0x3dc>
 800d63c:	9904b03a 	or	r2,r19,r4
 800d640:	103e971e 	bne	r2,zero,800d0a0 <__adddf3+0x2e8>
 800d644:	0013883a 	mov	r9,zero
 800d648:	0023883a 	mov	r17,zero
 800d64c:	003e9c06 	br	800d0c0 <__adddf3+0x308>
 800d650:	5b27c83a 	sub	r19,r11,r12
 800d654:	1a53c83a 	sub	r9,r3,r9
 800d658:	5cc9803a 	cmpltu	r4,r11,r19
 800d65c:	4909c83a 	sub	r4,r9,r4
 800d660:	3823883a 	mov	r17,r7
 800d664:	04000044 	movi	r16,1
 800d668:	003e0406 	br	800ce7c <__adddf3+0xc4>
 800d66c:	180a977a 	slli	r5,r3,29
 800d670:	01080034 	movhi	r4,8192
 800d674:	213fffc4 	addi	r4,r4,-1
 800d678:	3104703a 	and	r2,r6,r4
 800d67c:	2884b03a 	or	r2,r5,r2
 800d680:	1812d0fa 	srli	r9,r3,3
 800d684:	003e8e06 	br	800d0c0 <__adddf3+0x308>
 800d688:	62e7883a 	add	r19,r12,r11
 800d68c:	48d3883a 	add	r9,r9,r3
 800d690:	9b09803a 	cmpltu	r4,r19,r12
 800d694:	4909883a 	add	r4,r9,r4
 800d698:	2080202c 	andhi	r2,r4,128
 800d69c:	103e8026 	beq	r2,zero,800d0a0 <__adddf3+0x2e8>
 800d6a0:	00bfe034 	movhi	r2,65408
 800d6a4:	10bfffc4 	addi	r2,r2,-1
 800d6a8:	2088703a 	and	r4,r4,r2
 800d6ac:	04000044 	movi	r16,1
 800d6b0:	003e7b06 	br	800d0a0 <__adddf3+0x2e8>
 800d6b4:	00880034 	movhi	r2,8192
 800d6b8:	10bfffc4 	addi	r2,r2,-1
 800d6bc:	2084703a 	and	r2,r4,r2
 800d6c0:	1144b03a 	or	r2,r2,r5
 800d6c4:	003eb306 	br	800d194 <__adddf3+0x3dc>
 800d6c8:	180e977a 	slli	r7,r3,29
 800d6cc:	01480034 	movhi	r5,8192
 800d6d0:	297fffc4 	addi	r5,r5,-1
 800d6d4:	3144703a 	and	r2,r6,r5
 800d6d8:	3884b03a 	or	r2,r7,r2
 800d6dc:	1812d0fa 	srli	r9,r3,3
 800d6e0:	2021883a 	mov	r16,r4
 800d6e4:	003e7406 	br	800d0b8 <__adddf3+0x300>
 800d6e8:	00880034 	movhi	r2,8192
 800d6ec:	1808977a 	slli	r4,r3,29
 800d6f0:	10bfffc4 	addi	r2,r2,-1
 800d6f4:	3084703a 	and	r2,r6,r2
 800d6f8:	1104b03a 	or	r2,r2,r4
 800d6fc:	1812d0fa 	srli	r9,r3,3
 800d700:	3823883a 	mov	r17,r7
 800d704:	003ea306 	br	800d194 <__adddf3+0x3dc>
 800d708:	217ff804 	addi	r5,r4,-32
 800d70c:	21800820 	cmpeqi	r6,r4,32
 800d710:	494ad83a 	srl	r5,r9,r5
 800d714:	3000041e 	bne	r6,zero,800d728 <__adddf3+0x970>
 800d718:	01801004 	movi	r6,64
 800d71c:	3109c83a 	sub	r4,r6,r4
 800d720:	4912983a 	sll	r9,r9,r4
 800d724:	6258b03a 	or	r12,r12,r9
 800d728:	6026c03a 	cmpne	r19,r12,zero
 800d72c:	9966b03a 	or	r19,r19,r5
 800d730:	003ee506 	br	800d2c8 <__adddf3+0x510>
 800d734:	62e7883a 	add	r19,r12,r11
 800d738:	48d3883a 	add	r9,r9,r3
 800d73c:	9ac9803a 	cmpltu	r4,r19,r11
 800d740:	4909883a 	add	r4,r9,r4
 800d744:	003e5306 	br	800d094 <__adddf3+0x2dc>
 800d748:	0005883a 	mov	r2,zero
 800d74c:	0401ffc4 	movi	r16,2047
 800d750:	0009883a 	mov	r4,zero
 800d754:	003dfe06 	br	800cf50 <__adddf3+0x198>

0800d758 <__divdf3>:
 800d758:	deffef04 	addi	sp,sp,-68
 800d75c:	2804d53a 	srli	r2,r5,20
 800d760:	dd000b15 	stw	r20,44(sp)
 800d764:	2828d7fa 	srli	r20,r5,31
 800d768:	dc400815 	stw	r17,32(sp)
 800d76c:	04400434 	movhi	r17,16
 800d770:	dd800d15 	stw	r22,52(sp)
 800d774:	dcc00a15 	stw	r19,40(sp)
 800d778:	8c7fffc4 	addi	r17,r17,-1
 800d77c:	dfc01015 	stw	ra,64(sp)
 800d780:	df000f15 	stw	fp,60(sp)
 800d784:	ddc00e15 	stw	r23,56(sp)
 800d788:	dd400c15 	stw	r21,48(sp)
 800d78c:	dc800915 	stw	r18,36(sp)
 800d790:	dc000715 	stw	r16,28(sp)
 800d794:	1081ffcc 	andi	r2,r2,2047
 800d798:	2027883a 	mov	r19,r4
 800d79c:	2c62703a 	and	r17,r5,r17
 800d7a0:	a02d883a 	mov	r22,r20
 800d7a4:	10008726 	beq	r2,zero,800d9c4 <__divdf3+0x26c>
 800d7a8:	10c1ffe0 	cmpeqi	r3,r2,2047
 800d7ac:	18009d1e 	bne	r3,zero,800da24 <__divdf3+0x2cc>
 800d7b0:	880a90fa 	slli	r5,r17,3
 800d7b4:	2008d77a 	srli	r4,r4,29
 800d7b8:	982690fa 	slli	r19,r19,3
 800d7bc:	14bf0044 	addi	r18,r2,-1023
 800d7c0:	2148b03a 	or	r4,r4,r5
 800d7c4:	24002034 	orhi	r16,r4,128
 800d7c8:	0023883a 	mov	r17,zero
 800d7cc:	002f883a 	mov	r23,zero
 800d7d0:	3806d53a 	srli	r3,r7,20
 800d7d4:	01000434 	movhi	r4,16
 800d7d8:	213fffc4 	addi	r4,r4,-1
 800d7dc:	18c1ffcc 	andi	r3,r3,2047
 800d7e0:	392a703a 	and	r21,r7,r4
 800d7e4:	3838d7fa 	srli	fp,r7,31
 800d7e8:	18006326 	beq	r3,zero,800d978 <__divdf3+0x220>
 800d7ec:	1881ffe0 	cmpeqi	r2,r3,2047
 800d7f0:	1000201e 	bne	r2,zero,800d874 <__divdf3+0x11c>
 800d7f4:	a80890fa 	slli	r4,r21,3
 800d7f8:	300ed77a 	srli	r7,r6,29
 800d7fc:	300a90fa 	slli	r5,r6,3
 800d800:	18ff0044 	addi	r3,r3,-1023
 800d804:	3908b03a 	or	r4,r7,r4
 800d808:	90e5c83a 	sub	r18,r18,r3
 800d80c:	25402034 	orhi	r21,r4,128
 800d810:	0007883a 	mov	r3,zero
 800d814:	88800428 	cmpgeui	r2,r17,16
 800d818:	a70cf03a 	xor	r6,r20,fp
 800d81c:	1000ab1e 	bne	r2,zero,800dacc <__divdf3+0x374>
 800d820:	882290ba 	slli	r17,r17,2
 800d824:	00820074 	movhi	r2,2049
 800d828:	8885883a 	add	r2,r17,r2
 800d82c:	10b60d17 	ldw	r2,-10188(r2)
 800d830:	1000683a 	jmp	r2
 800d834:	0800dacc 	andi	zero,at,875
 800d838:	0800d968 	cmpgeui	zero,at,869
 800d83c:	0800d90c 	andi	zero,at,868
 800d840:	0800d890 	cmplti	zero,at,866
 800d844:	0800d90c 	andi	zero,at,868
 800d848:	0800da88 	cmpgei	zero,at,874
 800d84c:	0800d90c 	andi	zero,at,868
 800d850:	0800d890 	cmplti	zero,at,866
 800d854:	0800d968 	cmpgeui	zero,at,869
 800d858:	0800d968 	cmpgeui	zero,at,869
 800d85c:	0800da88 	cmpgei	zero,at,874
 800d860:	0800d890 	cmplti	zero,at,866
 800d864:	0800d8a0 	cmpeqi	zero,at,866
 800d868:	0800d8a0 	cmpeqi	zero,at,866
 800d86c:	0800d8a0 	cmpeqi	zero,at,866
 800d870:	0800daa0 	cmpeqi	zero,at,874
 800d874:	a98ab03a 	or	r5,r21,r6
 800d878:	94be0044 	addi	r18,r18,-2047
 800d87c:	28007e1e 	bne	r5,zero,800da78 <__divdf3+0x320>
 800d880:	8c400094 	ori	r17,r17,2
 800d884:	002b883a 	mov	r21,zero
 800d888:	00c00084 	movi	r3,2
 800d88c:	003fe106 	br	800d814 <__divdf3+0xbc>
 800d890:	e02d883a 	mov	r22,fp
 800d894:	a821883a 	mov	r16,r21
 800d898:	2827883a 	mov	r19,r5
 800d89c:	182f883a 	mov	r23,r3
 800d8a0:	b88000a0 	cmpeqi	r2,r23,2
 800d8a4:	1001ab1e 	bne	r2,zero,800df54 <__divdf3+0x7fc>
 800d8a8:	b88000e0 	cmpeqi	r2,r23,3
 800d8ac:	1001f91e 	bne	r2,zero,800e094 <__divdf3+0x93c>
 800d8b0:	b8800060 	cmpeqi	r2,r23,1
 800d8b4:	1000141e 	bne	r2,zero,800d908 <__divdf3+0x1b0>
 800d8b8:	9500ffc4 	addi	r20,r18,1023
 800d8bc:	b00d883a 	mov	r6,r22
 800d8c0:	0501870e 	bge	zero,r20,800dee0 <__divdf3+0x788>
 800d8c4:	988001cc 	andi	r2,r19,7
 800d8c8:	1001c11e 	bne	r2,zero,800dfd0 <__divdf3+0x878>
 800d8cc:	9826d0fa 	srli	r19,r19,3
 800d8d0:	8080402c 	andhi	r2,r16,256
 800d8d4:	10000426 	beq	r2,zero,800d8e8 <__divdf3+0x190>
 800d8d8:	00bfc034 	movhi	r2,65280
 800d8dc:	10bfffc4 	addi	r2,r2,-1
 800d8e0:	80a0703a 	and	r16,r16,r2
 800d8e4:	95010004 	addi	r20,r18,1024
 800d8e8:	a081ffc8 	cmpgei	r2,r20,2047
 800d8ec:	10001e1e 	bne	r2,zero,800d968 <__divdf3+0x210>
 800d8f0:	8006977a 	slli	r3,r16,29
 800d8f4:	8008927a 	slli	r4,r16,9
 800d8f8:	a081ffcc 	andi	r2,r20,2047
 800d8fc:	1ce6b03a 	or	r19,r3,r19
 800d900:	2008d33a 	srli	r4,r4,12
 800d904:	00000406 	br	800d918 <__divdf3+0x1c0>
 800d908:	b00d883a 	mov	r6,r22
 800d90c:	0005883a 	mov	r2,zero
 800d910:	0009883a 	mov	r4,zero
 800d914:	0027883a 	mov	r19,zero
 800d918:	1004953a 	slli	r2,r2,20
 800d91c:	00c00434 	movhi	r3,16
 800d920:	300c97fa 	slli	r6,r6,31
 800d924:	18ffffc4 	addi	r3,r3,-1
 800d928:	20c6703a 	and	r3,r4,r3
 800d92c:	1886b03a 	or	r3,r3,r2
 800d930:	1986b03a 	or	r3,r3,r6
 800d934:	9805883a 	mov	r2,r19
 800d938:	dfc01017 	ldw	ra,64(sp)
 800d93c:	df000f17 	ldw	fp,60(sp)
 800d940:	ddc00e17 	ldw	r23,56(sp)
 800d944:	dd800d17 	ldw	r22,52(sp)
 800d948:	dd400c17 	ldw	r21,48(sp)
 800d94c:	dd000b17 	ldw	r20,44(sp)
 800d950:	dcc00a17 	ldw	r19,40(sp)
 800d954:	dc800917 	ldw	r18,36(sp)
 800d958:	dc400817 	ldw	r17,32(sp)
 800d95c:	dc000717 	ldw	r16,28(sp)
 800d960:	dec01104 	addi	sp,sp,68
 800d964:	f800283a 	ret
 800d968:	0081ffc4 	movi	r2,2047
 800d96c:	0009883a 	mov	r4,zero
 800d970:	0027883a 	mov	r19,zero
 800d974:	003fe806 	br	800d918 <__divdf3+0x1c0>
 800d978:	a98ab03a 	or	r5,r21,r6
 800d97c:	28003a26 	beq	r5,zero,800da68 <__divdf3+0x310>
 800d980:	a8014926 	beq	r21,zero,800dea8 <__divdf3+0x750>
 800d984:	a809883a 	mov	r4,r21
 800d988:	d9800015 	stw	r6,0(sp)
 800d98c:	800f6a00 	call	800f6a0 <__clzsi2>
 800d990:	d9800017 	ldw	r6,0(sp)
 800d994:	11fffd44 	addi	r7,r2,-11
 800d998:	00c00744 	movi	r3,29
 800d99c:	117ffe04 	addi	r5,r2,-8
 800d9a0:	19c7c83a 	sub	r3,r3,r7
 800d9a4:	a948983a 	sll	r4,r21,r5
 800d9a8:	30c6d83a 	srl	r3,r6,r3
 800d9ac:	314a983a 	sll	r5,r6,r5
 800d9b0:	192ab03a 	or	r21,r3,r4
 800d9b4:	1485883a 	add	r2,r2,r18
 800d9b8:	1480fcc4 	addi	r18,r2,1011
 800d9bc:	0007883a 	mov	r3,zero
 800d9c0:	003f9406 	br	800d814 <__divdf3+0xbc>
 800d9c4:	2460b03a 	or	r16,r4,r17
 800d9c8:	202b883a 	mov	r21,r4
 800d9cc:	80002126 	beq	r16,zero,800da54 <__divdf3+0x2fc>
 800d9d0:	d9c00115 	stw	r7,4(sp)
 800d9d4:	d9800015 	stw	r6,0(sp)
 800d9d8:	88012826 	beq	r17,zero,800de7c <__divdf3+0x724>
 800d9dc:	8809883a 	mov	r4,r17
 800d9e0:	800f6a00 	call	800f6a0 <__clzsi2>
 800d9e4:	d9800017 	ldw	r6,0(sp)
 800d9e8:	d9c00117 	ldw	r7,4(sp)
 800d9ec:	1025883a 	mov	r18,r2
 800d9f0:	143ffd44 	addi	r16,r2,-11
 800d9f4:	01000744 	movi	r4,29
 800d9f8:	94fffe04 	addi	r19,r18,-8
 800d9fc:	2409c83a 	sub	r4,r4,r16
 800da00:	8cca983a 	sll	r5,r17,r19
 800da04:	a908d83a 	srl	r4,r21,r4
 800da08:	ace6983a 	sll	r19,r21,r19
 800da0c:	2160b03a 	or	r16,r4,r5
 800da10:	00bf0344 	movi	r2,-1011
 800da14:	14a5c83a 	sub	r18,r2,r18
 800da18:	0023883a 	mov	r17,zero
 800da1c:	002f883a 	mov	r23,zero
 800da20:	003f6b06 	br	800d7d0 <__divdf3+0x78>
 800da24:	2460b03a 	or	r16,r4,r17
 800da28:	8000051e 	bne	r16,zero,800da40 <__divdf3+0x2e8>
 800da2c:	0027883a 	mov	r19,zero
 800da30:	04400204 	movi	r17,8
 800da34:	0481ffc4 	movi	r18,2047
 800da38:	05c00084 	movi	r23,2
 800da3c:	003f6406 	br	800d7d0 <__divdf3+0x78>
 800da40:	8821883a 	mov	r16,r17
 800da44:	0481ffc4 	movi	r18,2047
 800da48:	04400304 	movi	r17,12
 800da4c:	05c000c4 	movi	r23,3
 800da50:	003f5f06 	br	800d7d0 <__divdf3+0x78>
 800da54:	0027883a 	mov	r19,zero
 800da58:	04400104 	movi	r17,4
 800da5c:	0025883a 	mov	r18,zero
 800da60:	05c00044 	movi	r23,1
 800da64:	003f5a06 	br	800d7d0 <__divdf3+0x78>
 800da68:	8c400054 	ori	r17,r17,1
 800da6c:	002b883a 	mov	r21,zero
 800da70:	00c00044 	movi	r3,1
 800da74:	003f6706 	br	800d814 <__divdf3+0xbc>
 800da78:	8c4000d4 	ori	r17,r17,3
 800da7c:	300b883a 	mov	r5,r6
 800da80:	00c000c4 	movi	r3,3
 800da84:	003f6306 	br	800d814 <__divdf3+0xbc>
 800da88:	01000434 	movhi	r4,16
 800da8c:	000d883a 	mov	r6,zero
 800da90:	213fffc4 	addi	r4,r4,-1
 800da94:	04ffffc4 	movi	r19,-1
 800da98:	0081ffc4 	movi	r2,2047
 800da9c:	003f9e06 	br	800d918 <__divdf3+0x1c0>
 800daa0:	8080022c 	andhi	r2,r16,8
 800daa4:	1000d426 	beq	r2,zero,800ddf8 <__divdf3+0x6a0>
 800daa8:	a880022c 	andhi	r2,r21,8
 800daac:	1000d21e 	bne	r2,zero,800ddf8 <__divdf3+0x6a0>
 800dab0:	00800434 	movhi	r2,16
 800dab4:	a9000234 	orhi	r4,r21,8
 800dab8:	10bfffc4 	addi	r2,r2,-1
 800dabc:	2088703a 	and	r4,r4,r2
 800dac0:	e00d883a 	mov	r6,fp
 800dac4:	2827883a 	mov	r19,r5
 800dac8:	003ff306 	br	800da98 <__divdf3+0x340>
 800dacc:	ac00e536 	bltu	r21,r16,800de64 <__divdf3+0x70c>
 800dad0:	ac00e326 	beq	r21,r16,800de60 <__divdf3+0x708>
 800dad4:	94bfffc4 	addi	r18,r18,-1
 800dad8:	0029883a 	mov	r20,zero
 800dadc:	280ed63a 	srli	r7,r5,24
 800dae0:	a82a923a 	slli	r21,r21,8
 800dae4:	2804923a 	slli	r2,r5,8
 800dae8:	8009883a 	mov	r4,r16
 800daec:	3d62b03a 	or	r17,r7,r21
 800daf0:	882ad43a 	srli	r21,r17,16
 800daf4:	d9800115 	stw	r6,4(sp)
 800daf8:	d8800015 	stw	r2,0(sp)
 800dafc:	a80b883a 	mov	r5,r21
 800db00:	8002b7c0 	call	8002b7c <__udivsi3>
 800db04:	8f3fffcc 	andi	fp,r17,65535
 800db08:	100b883a 	mov	r5,r2
 800db0c:	e009883a 	mov	r4,fp
 800db10:	102f883a 	mov	r23,r2
 800db14:	8002c3c0 	call	8002c3c <__mulsi3>
 800db18:	a80b883a 	mov	r5,r21
 800db1c:	8009883a 	mov	r4,r16
 800db20:	102d883a 	mov	r22,r2
 800db24:	8002be00 	call	8002be0 <__umodsi3>
 800db28:	1006943a 	slli	r3,r2,16
 800db2c:	9804d43a 	srli	r2,r19,16
 800db30:	d9800117 	ldw	r6,4(sp)
 800db34:	10c4b03a 	or	r2,r2,r3
 800db38:	1580042e 	bgeu	r2,r22,800db4c <__divdf3+0x3f4>
 800db3c:	1445883a 	add	r2,r2,r17
 800db40:	b8ffffc4 	addi	r3,r23,-1
 800db44:	1441102e 	bgeu	r2,r17,800df88 <__divdf3+0x830>
 800db48:	182f883a 	mov	r23,r3
 800db4c:	15adc83a 	sub	r22,r2,r22
 800db50:	a80b883a 	mov	r5,r21
 800db54:	b009883a 	mov	r4,r22
 800db58:	d9800215 	stw	r6,8(sp)
 800db5c:	8002b7c0 	call	8002b7c <__udivsi3>
 800db60:	100b883a 	mov	r5,r2
 800db64:	e009883a 	mov	r4,fp
 800db68:	1021883a 	mov	r16,r2
 800db6c:	8002c3c0 	call	8002c3c <__mulsi3>
 800db70:	a80b883a 	mov	r5,r21
 800db74:	b009883a 	mov	r4,r22
 800db78:	d8800115 	stw	r2,4(sp)
 800db7c:	8002be00 	call	8002be0 <__umodsi3>
 800db80:	1004943a 	slli	r2,r2,16
 800db84:	da000117 	ldw	r8,4(sp)
 800db88:	9cffffcc 	andi	r19,r19,65535
 800db8c:	9884b03a 	or	r2,r19,r2
 800db90:	d9800217 	ldw	r6,8(sp)
 800db94:	1200042e 	bgeu	r2,r8,800dba8 <__divdf3+0x450>
 800db98:	1445883a 	add	r2,r2,r17
 800db9c:	80ffffc4 	addi	r3,r16,-1
 800dba0:	1440f52e 	bgeu	r2,r17,800df78 <__divdf3+0x820>
 800dba4:	1821883a 	mov	r16,r3
 800dba8:	b808943a 	slli	r4,r23,16
 800dbac:	d8c00017 	ldw	r3,0(sp)
 800dbb0:	1211c83a 	sub	r8,r2,r8
 800dbb4:	2420b03a 	or	r16,r4,r16
 800dbb8:	182cd43a 	srli	r22,r3,16
 800dbbc:	1dffffcc 	andi	r23,r3,65535
 800dbc0:	8026d43a 	srli	r19,r16,16
 800dbc4:	80ffffcc 	andi	r3,r16,65535
 800dbc8:	180b883a 	mov	r5,r3
 800dbcc:	b809883a 	mov	r4,r23
 800dbd0:	d9800615 	stw	r6,24(sp)
 800dbd4:	da000415 	stw	r8,16(sp)
 800dbd8:	d8c00515 	stw	r3,20(sp)
 800dbdc:	8002c3c0 	call	8002c3c <__mulsi3>
 800dbe0:	b80b883a 	mov	r5,r23
 800dbe4:	9809883a 	mov	r4,r19
 800dbe8:	d8800315 	stw	r2,12(sp)
 800dbec:	8002c3c0 	call	8002c3c <__mulsi3>
 800dbf0:	b00b883a 	mov	r5,r22
 800dbf4:	9809883a 	mov	r4,r19
 800dbf8:	d8800215 	stw	r2,8(sp)
 800dbfc:	8002c3c0 	call	8002c3c <__mulsi3>
 800dc00:	d8c00517 	ldw	r3,20(sp)
 800dc04:	b009883a 	mov	r4,r22
 800dc08:	d8800115 	stw	r2,4(sp)
 800dc0c:	180b883a 	mov	r5,r3
 800dc10:	8002c3c0 	call	8002c3c <__mulsi3>
 800dc14:	da400317 	ldw	r9,12(sp)
 800dc18:	dac00217 	ldw	r11,8(sp)
 800dc1c:	da800117 	ldw	r10,4(sp)
 800dc20:	4806d43a 	srli	r3,r9,16
 800dc24:	12c5883a 	add	r2,r2,r11
 800dc28:	da000417 	ldw	r8,16(sp)
 800dc2c:	1887883a 	add	r3,r3,r2
 800dc30:	d9800617 	ldw	r6,24(sp)
 800dc34:	1ac0022e 	bgeu	r3,r11,800dc40 <__divdf3+0x4e8>
 800dc38:	00800074 	movhi	r2,1
 800dc3c:	5095883a 	add	r10,r10,r2
 800dc40:	1826d43a 	srli	r19,r3,16
 800dc44:	1806943a 	slli	r3,r3,16
 800dc48:	4a7fffcc 	andi	r9,r9,65535
 800dc4c:	9aa7883a 	add	r19,r19,r10
 800dc50:	1a47883a 	add	r3,r3,r9
 800dc54:	44c07736 	bltu	r8,r19,800de34 <__divdf3+0x6dc>
 800dc58:	44c07526 	beq	r8,r19,800de30 <__divdf3+0x6d8>
 800dc5c:	a0c7c83a 	sub	r3,r20,r3
 800dc60:	44c5c83a 	sub	r2,r8,r19
 800dc64:	a0e7803a 	cmpltu	r19,r20,r3
 800dc68:	d8c00115 	stw	r3,4(sp)
 800dc6c:	14e7c83a 	sub	r19,r2,r19
 800dc70:	9500ffc4 	addi	r20,r18,1023
 800dc74:	8cc0cd26 	beq	r17,r19,800dfac <__divdf3+0x854>
 800dc78:	a80b883a 	mov	r5,r21
 800dc7c:	9809883a 	mov	r4,r19
 800dc80:	d9800415 	stw	r6,16(sp)
 800dc84:	8002b7c0 	call	8002b7c <__udivsi3>
 800dc88:	100b883a 	mov	r5,r2
 800dc8c:	e009883a 	mov	r4,fp
 800dc90:	d8800315 	stw	r2,12(sp)
 800dc94:	8002c3c0 	call	8002c3c <__mulsi3>
 800dc98:	9809883a 	mov	r4,r19
 800dc9c:	a80b883a 	mov	r5,r21
 800dca0:	d8800215 	stw	r2,8(sp)
 800dca4:	8002be00 	call	8002be0 <__umodsi3>
 800dca8:	d8c00117 	ldw	r3,4(sp)
 800dcac:	1008943a 	slli	r4,r2,16
 800dcb0:	da400217 	ldw	r9,8(sp)
 800dcb4:	1804d43a 	srli	r2,r3,16
 800dcb8:	da000317 	ldw	r8,12(sp)
 800dcbc:	d9800417 	ldw	r6,16(sp)
 800dcc0:	1104b03a 	or	r2,r2,r4
 800dcc4:	1240062e 	bgeu	r2,r9,800dce0 <__divdf3+0x588>
 800dcc8:	1445883a 	add	r2,r2,r17
 800dccc:	413fffc4 	addi	r4,r8,-1
 800dcd0:	1440bd36 	bltu	r2,r17,800dfc8 <__divdf3+0x870>
 800dcd4:	1240bc2e 	bgeu	r2,r9,800dfc8 <__divdf3+0x870>
 800dcd8:	423fff84 	addi	r8,r8,-2
 800dcdc:	1445883a 	add	r2,r2,r17
 800dce0:	1267c83a 	sub	r19,r2,r9
 800dce4:	a80b883a 	mov	r5,r21
 800dce8:	9809883a 	mov	r4,r19
 800dcec:	d8c00415 	stw	r3,16(sp)
 800dcf0:	d9800315 	stw	r6,12(sp)
 800dcf4:	da000215 	stw	r8,8(sp)
 800dcf8:	8002b7c0 	call	8002b7c <__udivsi3>
 800dcfc:	e009883a 	mov	r4,fp
 800dd00:	100b883a 	mov	r5,r2
 800dd04:	d8800115 	stw	r2,4(sp)
 800dd08:	8002c3c0 	call	8002c3c <__mulsi3>
 800dd0c:	a80b883a 	mov	r5,r21
 800dd10:	9809883a 	mov	r4,r19
 800dd14:	1039883a 	mov	fp,r2
 800dd18:	8002be00 	call	8002be0 <__umodsi3>
 800dd1c:	d8c00417 	ldw	r3,16(sp)
 800dd20:	1004943a 	slli	r2,r2,16
 800dd24:	da400117 	ldw	r9,4(sp)
 800dd28:	18ffffcc 	andi	r3,r3,65535
 800dd2c:	1886b03a 	or	r3,r3,r2
 800dd30:	da000217 	ldw	r8,8(sp)
 800dd34:	d9800317 	ldw	r6,12(sp)
 800dd38:	1f00062e 	bgeu	r3,fp,800dd54 <__divdf3+0x5fc>
 800dd3c:	1c47883a 	add	r3,r3,r17
 800dd40:	48bfffc4 	addi	r2,r9,-1
 800dd44:	1c409e36 	bltu	r3,r17,800dfc0 <__divdf3+0x868>
 800dd48:	1f009d2e 	bgeu	r3,fp,800dfc0 <__divdf3+0x868>
 800dd4c:	4a7fff84 	addi	r9,r9,-2
 800dd50:	1c47883a 	add	r3,r3,r17
 800dd54:	4010943a 	slli	r8,r8,16
 800dd58:	1f2bc83a 	sub	r21,r3,fp
 800dd5c:	b80b883a 	mov	r5,r23
 800dd60:	4266b03a 	or	r19,r8,r9
 800dd64:	98ffffcc 	andi	r3,r19,65535
 800dd68:	9838d43a 	srli	fp,r19,16
 800dd6c:	1809883a 	mov	r4,r3
 800dd70:	d9800415 	stw	r6,16(sp)
 800dd74:	d8c00315 	stw	r3,12(sp)
 800dd78:	8002c3c0 	call	8002c3c <__mulsi3>
 800dd7c:	b80b883a 	mov	r5,r23
 800dd80:	e009883a 	mov	r4,fp
 800dd84:	d8800215 	stw	r2,8(sp)
 800dd88:	8002c3c0 	call	8002c3c <__mulsi3>
 800dd8c:	e00b883a 	mov	r5,fp
 800dd90:	b009883a 	mov	r4,r22
 800dd94:	d8800115 	stw	r2,4(sp)
 800dd98:	8002c3c0 	call	8002c3c <__mulsi3>
 800dd9c:	d8c00317 	ldw	r3,12(sp)
 800dda0:	b009883a 	mov	r4,r22
 800dda4:	102f883a 	mov	r23,r2
 800dda8:	180b883a 	mov	r5,r3
 800ddac:	8002c3c0 	call	8002c3c <__mulsi3>
 800ddb0:	da000217 	ldw	r8,8(sp)
 800ddb4:	da400117 	ldw	r9,4(sp)
 800ddb8:	d9800417 	ldw	r6,16(sp)
 800ddbc:	4006d43a 	srli	r3,r8,16
 800ddc0:	1245883a 	add	r2,r2,r9
 800ddc4:	1885883a 	add	r2,r3,r2
 800ddc8:	1240022e 	bgeu	r2,r9,800ddd4 <__divdf3+0x67c>
 800ddcc:	00c00074 	movhi	r3,1
 800ddd0:	b8ef883a 	add	r23,r23,r3
 800ddd4:	1008d43a 	srli	r4,r2,16
 800ddd8:	1004943a 	slli	r2,r2,16
 800dddc:	423fffcc 	andi	r8,r8,65535
 800dde0:	25c9883a 	add	r4,r4,r23
 800dde4:	1205883a 	add	r2,r2,r8
 800dde8:	a9000a36 	bltu	r21,r4,800de14 <__divdf3+0x6bc>
 800ddec:	a9000826 	beq	r21,r4,800de10 <__divdf3+0x6b8>
 800ddf0:	9cc00054 	ori	r19,r19,1
 800ddf4:	003eb206 	br	800d8c0 <__divdf3+0x168>
 800ddf8:	00800434 	movhi	r2,16
 800ddfc:	81000234 	orhi	r4,r16,8
 800de00:	10bfffc4 	addi	r2,r2,-1
 800de04:	2088703a 	and	r4,r4,r2
 800de08:	a00d883a 	mov	r6,r20
 800de0c:	003f2206 	br	800da98 <__divdf3+0x340>
 800de10:	103eab26 	beq	r2,zero,800d8c0 <__divdf3+0x168>
 800de14:	8d47883a 	add	r3,r17,r21
 800de18:	997fffc4 	addi	r5,r19,-1
 800de1c:	1c405e36 	bltu	r3,r17,800df98 <__divdf3+0x840>
 800de20:	19007b36 	bltu	r3,r4,800e010 <__divdf3+0x8b8>
 800de24:	1900a126 	beq	r3,r4,800e0ac <__divdf3+0x954>
 800de28:	2827883a 	mov	r19,r5
 800de2c:	003ff006 	br	800ddf0 <__divdf3+0x698>
 800de30:	a0ff8a2e 	bgeu	r20,r3,800dc5c <__divdf3+0x504>
 800de34:	d8800017 	ldw	r2,0(sp)
 800de38:	a0a9883a 	add	r20,r20,r2
 800de3c:	a085803a 	cmpltu	r2,r20,r2
 800de40:	1445883a 	add	r2,r2,r17
 800de44:	4091883a 	add	r8,r8,r2
 800de48:	80bfffc4 	addi	r2,r16,-1
 800de4c:	8a00462e 	bgeu	r17,r8,800df68 <__divdf3+0x810>
 800de50:	44c06836 	bltu	r8,r19,800dff4 <__divdf3+0x89c>
 800de54:	9a006626 	beq	r19,r8,800dff0 <__divdf3+0x898>
 800de58:	1021883a 	mov	r16,r2
 800de5c:	003f7f06 	br	800dc5c <__divdf3+0x504>
 800de60:	997f1c36 	bltu	r19,r5,800dad4 <__divdf3+0x37c>
 800de64:	800697fa 	slli	r3,r16,31
 800de68:	9804d07a 	srli	r2,r19,1
 800de6c:	982897fa 	slli	r20,r19,31
 800de70:	8020d07a 	srli	r16,r16,1
 800de74:	18a6b03a 	or	r19,r3,r2
 800de78:	003f1806 	br	800dadc <__divdf3+0x384>
 800de7c:	800f6a00 	call	800f6a0 <__clzsi2>
 800de80:	14000544 	addi	r16,r2,21
 800de84:	81000748 	cmpgei	r4,r16,29
 800de88:	14800804 	addi	r18,r2,32
 800de8c:	d9800017 	ldw	r6,0(sp)
 800de90:	d9c00117 	ldw	r7,4(sp)
 800de94:	203ed726 	beq	r4,zero,800d9f4 <__divdf3+0x29c>
 800de98:	113ffe04 	addi	r4,r2,-8
 800de9c:	9920983a 	sll	r16,r19,r4
 800dea0:	0027883a 	mov	r19,zero
 800dea4:	003eda06 	br	800da10 <__divdf3+0x2b8>
 800dea8:	3009883a 	mov	r4,r6
 800deac:	d9800015 	stw	r6,0(sp)
 800deb0:	800f6a00 	call	800f6a0 <__clzsi2>
 800deb4:	11c00544 	addi	r7,r2,21
 800deb8:	38c00748 	cmpgei	r3,r7,29
 800debc:	1009883a 	mov	r4,r2
 800dec0:	d9800017 	ldw	r6,0(sp)
 800dec4:	10800804 	addi	r2,r2,32
 800dec8:	183eb326 	beq	r3,zero,800d998 <__divdf3+0x240>
 800decc:	213ffe04 	addi	r4,r4,-8
 800ded0:	312a983a 	sll	r21,r6,r4
 800ded4:	000b883a 	mov	r5,zero
 800ded8:	003eb606 	br	800d9b4 <__divdf3+0x25c>
 800dedc:	04ffffc4 	movi	r19,-1
 800dee0:	01000044 	movi	r4,1
 800dee4:	2509c83a 	sub	r4,r4,r20
 800dee8:	20800e48 	cmpgei	r2,r4,57
 800deec:	103e871e 	bne	r2,zero,800d90c <__divdf3+0x1b4>
 800def0:	20800808 	cmpgei	r2,r4,32
 800def4:	10004e1e 	bne	r2,zero,800e030 <__divdf3+0x8d8>
 800def8:	90810784 	addi	r2,r18,1054
 800defc:	8086983a 	sll	r3,r16,r2
 800df00:	990ad83a 	srl	r5,r19,r4
 800df04:	9884983a 	sll	r2,r19,r2
 800df08:	8108d83a 	srl	r4,r16,r4
 800df0c:	1966b03a 	or	r19,r3,r5
 800df10:	1004c03a 	cmpne	r2,r2,zero
 800df14:	98a6b03a 	or	r19,r19,r2
 800df18:	988001cc 	andi	r2,r19,7
 800df1c:	10000726 	beq	r2,zero,800df3c <__divdf3+0x7e4>
 800df20:	988003cc 	andi	r2,r19,15
 800df24:	10800120 	cmpeqi	r2,r2,4
 800df28:	1000041e 	bne	r2,zero,800df3c <__divdf3+0x7e4>
 800df2c:	98800104 	addi	r2,r19,4
 800df30:	14e7803a 	cmpltu	r19,r2,r19
 800df34:	24c9883a 	add	r4,r4,r19
 800df38:	1027883a 	mov	r19,r2
 800df3c:	2080202c 	andhi	r2,r4,128
 800df40:	10005026 	beq	r2,zero,800e084 <__divdf3+0x92c>
 800df44:	00800044 	movi	r2,1
 800df48:	0009883a 	mov	r4,zero
 800df4c:	0027883a 	mov	r19,zero
 800df50:	003e7106 	br	800d918 <__divdf3+0x1c0>
 800df54:	b00d883a 	mov	r6,r22
 800df58:	0081ffc4 	movi	r2,2047
 800df5c:	0009883a 	mov	r4,zero
 800df60:	0027883a 	mov	r19,zero
 800df64:	003e6c06 	br	800d918 <__divdf3+0x1c0>
 800df68:	8a3fbb1e 	bne	r17,r8,800de58 <__divdf3+0x700>
 800df6c:	d9000017 	ldw	r4,0(sp)
 800df70:	a13fb936 	bltu	r20,r4,800de58 <__divdf3+0x700>
 800df74:	003fb606 	br	800de50 <__divdf3+0x6f8>
 800df78:	123f0a2e 	bgeu	r2,r8,800dba4 <__divdf3+0x44c>
 800df7c:	843fff84 	addi	r16,r16,-2
 800df80:	1445883a 	add	r2,r2,r17
 800df84:	003f0806 	br	800dba8 <__divdf3+0x450>
 800df88:	15beef2e 	bgeu	r2,r22,800db48 <__divdf3+0x3f0>
 800df8c:	bdffff84 	addi	r23,r23,-2
 800df90:	1445883a 	add	r2,r2,r17
 800df94:	003eed06 	br	800db4c <__divdf3+0x3f4>
 800df98:	2827883a 	mov	r19,r5
 800df9c:	193f941e 	bne	r3,r4,800ddf0 <__divdf3+0x698>
 800dfa0:	d8c00017 	ldw	r3,0(sp)
 800dfa4:	18bf921e 	bne	r3,r2,800ddf0 <__divdf3+0x698>
 800dfa8:	003e4506 	br	800d8c0 <__divdf3+0x168>
 800dfac:	053fcb0e 	bge	zero,r20,800dedc <__divdf3+0x784>
 800dfb0:	0027883a 	mov	r19,zero
 800dfb4:	00c00044 	movi	r3,1
 800dfb8:	80e1883a 	add	r16,r16,r3
 800dfbc:	003e4406 	br	800d8d0 <__divdf3+0x178>
 800dfc0:	1013883a 	mov	r9,r2
 800dfc4:	003f6306 	br	800dd54 <__divdf3+0x5fc>
 800dfc8:	2011883a 	mov	r8,r4
 800dfcc:	003f4406 	br	800dce0 <__divdf3+0x588>
 800dfd0:	988003cc 	andi	r2,r19,15
 800dfd4:	10800118 	cmpnei	r2,r2,4
 800dfd8:	103e3c26 	beq	r2,zero,800d8cc <__divdf3+0x174>
 800dfdc:	98800104 	addi	r2,r19,4
 800dfe0:	00fffec4 	movi	r3,-5
 800dfe4:	1cc7803a 	cmpltu	r3,r3,r19
 800dfe8:	1026d0fa 	srli	r19,r2,3
 800dfec:	003ff206 	br	800dfb8 <__divdf3+0x860>
 800dff0:	a0ff992e 	bgeu	r20,r3,800de58 <__divdf3+0x700>
 800dff4:	d8800017 	ldw	r2,0(sp)
 800dff8:	843fff84 	addi	r16,r16,-2
 800dffc:	a0a9883a 	add	r20,r20,r2
 800e000:	a085803a 	cmpltu	r2,r20,r2
 800e004:	1445883a 	add	r2,r2,r17
 800e008:	4091883a 	add	r8,r8,r2
 800e00c:	003f1306 	br	800dc5c <__divdf3+0x504>
 800e010:	d9c00017 	ldw	r7,0(sp)
 800e014:	9cffff84 	addi	r19,r19,-2
 800e018:	39cb883a 	add	r5,r7,r7
 800e01c:	29cf803a 	cmpltu	r7,r5,r7
 800e020:	3c4f883a 	add	r7,r7,r17
 800e024:	19c7883a 	add	r3,r3,r7
 800e028:	d9400015 	stw	r5,0(sp)
 800e02c:	003fdb06 	br	800df9c <__divdf3+0x844>
 800e030:	00bff844 	movi	r2,-31
 800e034:	1529c83a 	sub	r20,r2,r20
 800e038:	21000820 	cmpeqi	r4,r4,32
 800e03c:	8528d83a 	srl	r20,r16,r20
 800e040:	2000031e 	bne	r4,zero,800e050 <__divdf3+0x8f8>
 800e044:	90810f84 	addi	r2,r18,1086
 800e048:	8088983a 	sll	r4,r16,r2
 800e04c:	9926b03a 	or	r19,r19,r4
 800e050:	9826c03a 	cmpne	r19,r19,zero
 800e054:	9d26b03a 	or	r19,r19,r20
 800e058:	9c0001cc 	andi	r16,r19,7
 800e05c:	8000051e 	bne	r16,zero,800e074 <__divdf3+0x91c>
 800e060:	0009883a 	mov	r4,zero
 800e064:	9826d0fa 	srli	r19,r19,3
 800e068:	0005883a 	mov	r2,zero
 800e06c:	9c26b03a 	or	r19,r19,r16
 800e070:	003e2906 	br	800d918 <__divdf3+0x1c0>
 800e074:	988003cc 	andi	r2,r19,15
 800e078:	10800118 	cmpnei	r2,r2,4
 800e07c:	0009883a 	mov	r4,zero
 800e080:	103faa1e 	bne	r2,zero,800df2c <__divdf3+0x7d4>
 800e084:	2004927a 	slli	r2,r4,9
 800e088:	2020977a 	slli	r16,r4,29
 800e08c:	1008d33a 	srli	r4,r2,12
 800e090:	003ff406 	br	800e064 <__divdf3+0x90c>
 800e094:	00800434 	movhi	r2,16
 800e098:	81000234 	orhi	r4,r16,8
 800e09c:	10bfffc4 	addi	r2,r2,-1
 800e0a0:	2088703a 	and	r4,r4,r2
 800e0a4:	b00d883a 	mov	r6,r22
 800e0a8:	003e7b06 	br	800da98 <__divdf3+0x340>
 800e0ac:	d9c00017 	ldw	r7,0(sp)
 800e0b0:	38bfd736 	bltu	r7,r2,800e010 <__divdf3+0x8b8>
 800e0b4:	2827883a 	mov	r19,r5
 800e0b8:	003fb906 	br	800dfa0 <__divdf3+0x848>

0800e0bc <__eqdf2>:
 800e0bc:	2810d53a 	srli	r8,r5,20
 800e0c0:	3806d53a 	srli	r3,r7,20
 800e0c4:	00800434 	movhi	r2,16
 800e0c8:	4201ffcc 	andi	r8,r8,2047
 800e0cc:	10bfffc4 	addi	r2,r2,-1
 800e0d0:	4281ffd8 	cmpnei	r10,r8,2047
 800e0d4:	2892703a 	and	r9,r5,r2
 800e0d8:	18c1ffcc 	andi	r3,r3,2047
 800e0dc:	3884703a 	and	r2,r7,r2
 800e0e0:	280ad7fa 	srli	r5,r5,31
 800e0e4:	380ed7fa 	srli	r7,r7,31
 800e0e8:	50000626 	beq	r10,zero,800e104 <__eqdf2+0x48>
 800e0ec:	1a81ffe0 	cmpeqi	r10,r3,2047
 800e0f0:	5000021e 	bne	r10,zero,800e0fc <__eqdf2+0x40>
 800e0f4:	40c0011e 	bne	r8,r3,800e0fc <__eqdf2+0x40>
 800e0f8:	48800826 	beq	r9,r2,800e11c <__eqdf2+0x60>
 800e0fc:	00800044 	movi	r2,1
 800e100:	f800283a 	ret
 800e104:	4914b03a 	or	r10,r9,r4
 800e108:	503ffc1e 	bne	r10,zero,800e0fc <__eqdf2+0x40>
 800e10c:	18c1ffd8 	cmpnei	r3,r3,2047
 800e110:	183ffa1e 	bne	r3,zero,800e0fc <__eqdf2+0x40>
 800e114:	1184b03a 	or	r2,r2,r6
 800e118:	103ff81e 	bne	r2,zero,800e0fc <__eqdf2+0x40>
 800e11c:	21bff71e 	bne	r4,r6,800e0fc <__eqdf2+0x40>
 800e120:	29c00426 	beq	r5,r7,800e134 <__eqdf2+0x78>
 800e124:	403ff51e 	bne	r8,zero,800e0fc <__eqdf2+0x40>
 800e128:	4904b03a 	or	r2,r9,r4
 800e12c:	1004c03a 	cmpne	r2,r2,zero
 800e130:	f800283a 	ret
 800e134:	0005883a 	mov	r2,zero
 800e138:	f800283a 	ret

0800e13c <__gedf2>:
 800e13c:	2810d53a 	srli	r8,r5,20
 800e140:	3812d53a 	srli	r9,r7,20
 800e144:	00800434 	movhi	r2,16
 800e148:	4201ffcc 	andi	r8,r8,2047
 800e14c:	10bfffc4 	addi	r2,r2,-1
 800e150:	4281ffd8 	cmpnei	r10,r8,2047
 800e154:	2896703a 	and	r11,r5,r2
 800e158:	3886703a 	and	r3,r7,r2
 800e15c:	280ad7fa 	srli	r5,r5,31
 800e160:	4a41ffcc 	andi	r9,r9,2047
 800e164:	3804d7fa 	srli	r2,r7,31
 800e168:	50000b26 	beq	r10,zero,800e198 <__gedf2+0x5c>
 800e16c:	49c1ffd8 	cmpnei	r7,r9,2047
 800e170:	38000d26 	beq	r7,zero,800e1a8 <__gedf2+0x6c>
 800e174:	4000191e 	bne	r8,zero,800e1dc <__gedf2+0xa0>
 800e178:	5914b03a 	or	r10,r11,r4
 800e17c:	500f003a 	cmpeq	r7,r10,zero
 800e180:	4800131e 	bne	r9,zero,800e1d0 <__gedf2+0x94>
 800e184:	1998b03a 	or	r12,r3,r6
 800e188:	6000111e 	bne	r12,zero,800e1d0 <__gedf2+0x94>
 800e18c:	50000a1e 	bne	r10,zero,800e1b8 <__gedf2+0x7c>
 800e190:	0005883a 	mov	r2,zero
 800e194:	f800283a 	ret
 800e198:	590eb03a 	or	r7,r11,r4
 800e19c:	38001e1e 	bne	r7,zero,800e218 <__gedf2+0xdc>
 800e1a0:	49c1ffe0 	cmpeqi	r7,r9,2047
 800e1a4:	38000d26 	beq	r7,zero,800e1dc <__gedf2+0xa0>
 800e1a8:	198eb03a 	or	r7,r3,r6
 800e1ac:	38001a1e 	bne	r7,zero,800e218 <__gedf2+0xdc>
 800e1b0:	40000526 	beq	r8,zero,800e1c8 <__gedf2+0x8c>
 800e1b4:	28800d26 	beq	r5,r2,800e1ec <__gedf2+0xb0>
 800e1b8:	00800044 	movi	r2,1
 800e1bc:	28000626 	beq	r5,zero,800e1d8 <__gedf2+0x9c>
 800e1c0:	00bfffc4 	movi	r2,-1
 800e1c4:	f800283a 	ret
 800e1c8:	590eb03a 	or	r7,r11,r4
 800e1cc:	380f003a 	cmpeq	r7,r7,zero
 800e1d0:	383ff826 	beq	r7,zero,800e1b4 <__gedf2+0x78>
 800e1d4:	103ffa26 	beq	r2,zero,800e1c0 <__gedf2+0x84>
 800e1d8:	f800283a 	ret
 800e1dc:	483ff51e 	bne	r9,zero,800e1b4 <__gedf2+0x78>
 800e1e0:	198eb03a 	or	r7,r3,r6
 800e1e4:	383ff31e 	bne	r7,zero,800e1b4 <__gedf2+0x78>
 800e1e8:	003ff306 	br	800e1b8 <__gedf2+0x7c>
 800e1ec:	4a000716 	blt	r9,r8,800e20c <__gedf2+0xd0>
 800e1f0:	427ff816 	blt	r8,r9,800e1d4 <__gedf2+0x98>
 800e1f4:	1afff036 	bltu	r3,r11,800e1b8 <__gedf2+0x7c>
 800e1f8:	58c00926 	beq	r11,r3,800e220 <__gedf2+0xe4>
 800e1fc:	58ffe42e 	bgeu	r11,r3,800e190 <__gedf2+0x54>
 800e200:	283fef26 	beq	r5,zero,800e1c0 <__gedf2+0x84>
 800e204:	2805883a 	mov	r2,r5
 800e208:	f800283a 	ret
 800e20c:	103fec1e 	bne	r2,zero,800e1c0 <__gedf2+0x84>
 800e210:	00800044 	movi	r2,1
 800e214:	f800283a 	ret
 800e218:	00bfff84 	movi	r2,-2
 800e21c:	f800283a 	ret
 800e220:	313fe536 	bltu	r6,r4,800e1b8 <__gedf2+0x7c>
 800e224:	21bfda2e 	bgeu	r4,r6,800e190 <__gedf2+0x54>
 800e228:	003ff506 	br	800e200 <__gedf2+0xc4>

0800e22c <__ledf2>:
 800e22c:	2810d53a 	srli	r8,r5,20
 800e230:	3812d53a 	srli	r9,r7,20
 800e234:	00800434 	movhi	r2,16
 800e238:	4201ffcc 	andi	r8,r8,2047
 800e23c:	10bfffc4 	addi	r2,r2,-1
 800e240:	4281ffd8 	cmpnei	r10,r8,2047
 800e244:	2896703a 	and	r11,r5,r2
 800e248:	3886703a 	and	r3,r7,r2
 800e24c:	280ad7fa 	srli	r5,r5,31
 800e250:	4a41ffcc 	andi	r9,r9,2047
 800e254:	3804d7fa 	srli	r2,r7,31
 800e258:	50000b26 	beq	r10,zero,800e288 <__ledf2+0x5c>
 800e25c:	49c1ffd8 	cmpnei	r7,r9,2047
 800e260:	38000d26 	beq	r7,zero,800e298 <__ledf2+0x6c>
 800e264:	40001b1e 	bne	r8,zero,800e2d4 <__ledf2+0xa8>
 800e268:	5914b03a 	or	r10,r11,r4
 800e26c:	500f003a 	cmpeq	r7,r10,zero
 800e270:	48000e1e 	bne	r9,zero,800e2ac <__ledf2+0x80>
 800e274:	1998b03a 	or	r12,r3,r6
 800e278:	60000c1e 	bne	r12,zero,800e2ac <__ledf2+0x80>
 800e27c:	50000d1e 	bne	r10,zero,800e2b4 <__ledf2+0x88>
 800e280:	0005883a 	mov	r2,zero
 800e284:	f800283a 	ret
 800e288:	590eb03a 	or	r7,r11,r4
 800e28c:	38000d1e 	bne	r7,zero,800e2c4 <__ledf2+0x98>
 800e290:	49c1ffe0 	cmpeqi	r7,r9,2047
 800e294:	38000f26 	beq	r7,zero,800e2d4 <__ledf2+0xa8>
 800e298:	198eb03a 	or	r7,r3,r6
 800e29c:	3800091e 	bne	r7,zero,800e2c4 <__ledf2+0x98>
 800e2a0:	4000031e 	bne	r8,zero,800e2b0 <__ledf2+0x84>
 800e2a4:	590eb03a 	or	r7,r11,r4
 800e2a8:	380f003a 	cmpeq	r7,r7,zero
 800e2ac:	3800071e 	bne	r7,zero,800e2cc <__ledf2+0xa0>
 800e2b0:	28800c26 	beq	r5,r2,800e2e4 <__ledf2+0xb8>
 800e2b4:	00800044 	movi	r2,1
 800e2b8:	28000526 	beq	r5,zero,800e2d0 <__ledf2+0xa4>
 800e2bc:	00bfffc4 	movi	r2,-1
 800e2c0:	f800283a 	ret
 800e2c4:	00800084 	movi	r2,2
 800e2c8:	f800283a 	ret
 800e2cc:	103ffb26 	beq	r2,zero,800e2bc <__ledf2+0x90>
 800e2d0:	f800283a 	ret
 800e2d4:	483ff61e 	bne	r9,zero,800e2b0 <__ledf2+0x84>
 800e2d8:	198eb03a 	or	r7,r3,r6
 800e2dc:	383ff41e 	bne	r7,zero,800e2b0 <__ledf2+0x84>
 800e2e0:	003ff406 	br	800e2b4 <__ledf2+0x88>
 800e2e4:	4a00030e 	bge	r9,r8,800e2f4 <__ledf2+0xc8>
 800e2e8:	103ff41e 	bne	r2,zero,800e2bc <__ledf2+0x90>
 800e2ec:	00800044 	movi	r2,1
 800e2f0:	f800283a 	ret
 800e2f4:	427ff516 	blt	r8,r9,800e2cc <__ledf2+0xa0>
 800e2f8:	1affee36 	bltu	r3,r11,800e2b4 <__ledf2+0x88>
 800e2fc:	58c00426 	beq	r11,r3,800e310 <__ledf2+0xe4>
 800e300:	58ffdf2e 	bgeu	r11,r3,800e280 <__ledf2+0x54>
 800e304:	283fed26 	beq	r5,zero,800e2bc <__ledf2+0x90>
 800e308:	2805883a 	mov	r2,r5
 800e30c:	f800283a 	ret
 800e310:	313fe836 	bltu	r6,r4,800e2b4 <__ledf2+0x88>
 800e314:	21bfda2e 	bgeu	r4,r6,800e280 <__ledf2+0x54>
 800e318:	003ffa06 	br	800e304 <__ledf2+0xd8>

0800e31c <__muldf3>:
 800e31c:	2810d53a 	srli	r8,r5,20
 800e320:	deffef04 	addi	sp,sp,-68
 800e324:	dc000715 	stw	r16,28(sp)
 800e328:	04000434 	movhi	r16,16
 800e32c:	dd000b15 	stw	r20,44(sp)
 800e330:	dc800915 	stw	r18,36(sp)
 800e334:	843fffc4 	addi	r16,r16,-1
 800e338:	dfc01015 	stw	ra,64(sp)
 800e33c:	df000f15 	stw	fp,60(sp)
 800e340:	ddc00e15 	stw	r23,56(sp)
 800e344:	dd800d15 	stw	r22,52(sp)
 800e348:	dd400c15 	stw	r21,48(sp)
 800e34c:	dcc00a15 	stw	r19,40(sp)
 800e350:	dc400815 	stw	r17,32(sp)
 800e354:	4201ffcc 	andi	r8,r8,2047
 800e358:	2025883a 	mov	r18,r4
 800e35c:	2c20703a 	and	r16,r5,r16
 800e360:	2828d7fa 	srli	r20,r5,31
 800e364:	40005d26 	beq	r8,zero,800e4dc <__muldf3+0x1c0>
 800e368:	4081ffe0 	cmpeqi	r2,r8,2047
 800e36c:	1000721e 	bne	r2,zero,800e538 <__muldf3+0x21c>
 800e370:	802090fa 	slli	r16,r16,3
 800e374:	2006d77a 	srli	r3,r4,29
 800e378:	202c90fa 	slli	r22,r4,3
 800e37c:	423f0044 	addi	r8,r8,-1023
 800e380:	1c20b03a 	or	r16,r3,r16
 800e384:	84002034 	orhi	r16,r16,128
 800e388:	0027883a 	mov	r19,zero
 800e38c:	002f883a 	mov	r23,zero
 800e390:	3806d53a 	srli	r3,r7,20
 800e394:	04400434 	movhi	r17,16
 800e398:	8c7fffc4 	addi	r17,r17,-1
 800e39c:	18c1ffcc 	andi	r3,r3,2047
 800e3a0:	3c62703a 	and	r17,r7,r17
 800e3a4:	382ad7fa 	srli	r21,r7,31
 800e3a8:	18006a26 	beq	r3,zero,800e554 <__muldf3+0x238>
 800e3ac:	1881ffe0 	cmpeqi	r2,r3,2047
 800e3b0:	1000211e 	bne	r2,zero,800e438 <__muldf3+0x11c>
 800e3b4:	882290fa 	slli	r17,r17,3
 800e3b8:	3008d77a 	srli	r4,r6,29
 800e3bc:	302490fa 	slli	r18,r6,3
 800e3c0:	18ff0044 	addi	r3,r3,-1023
 800e3c4:	2462b03a 	or	r17,r4,r17
 800e3c8:	40d1883a 	add	r8,r8,r3
 800e3cc:	8c402034 	orhi	r17,r17,128
 800e3d0:	0007883a 	mov	r3,zero
 800e3d4:	98800428 	cmpgeui	r2,r19,16
 800e3d8:	a54cf03a 	xor	r6,r20,r21
 800e3dc:	42400044 	addi	r9,r8,1
 800e3e0:	10009b1e 	bne	r2,zero,800e650 <__muldf3+0x334>
 800e3e4:	982690ba 	slli	r19,r19,2
 800e3e8:	00820074 	movhi	r2,2049
 800e3ec:	9885883a 	add	r2,r19,r2
 800e3f0:	10b8fe17 	ldw	r2,-7176(r2)
 800e3f4:	1000683a 	jmp	r2
 800e3f8:	0800e650 	cmplti	zero,at,921
 800e3fc:	0800e458 	cmpnei	zero,at,913
 800e400:	0800e458 	cmpnei	zero,at,913
 800e404:	0800e454 	ori	zero,at,913
 800e408:	0800e464 	muli	zero,at,913
 800e40c:	0800e464 	muli	zero,at,913
 800e410:	0800e60c 	andi	zero,at,920
 800e414:	0800e454 	ori	zero,at,913
 800e418:	0800e464 	muli	zero,at,913
 800e41c:	0800e60c 	andi	zero,at,920
 800e420:	0800e464 	muli	zero,at,913
 800e424:	0800e454 	ori	zero,at,913
 800e428:	0800e604 	addi	zero,at,920
 800e42c:	0800e604 	addi	zero,at,920
 800e430:	0800e604 	addi	zero,at,920
 800e434:	0800e624 	muli	zero,at,920
 800e438:	3464b03a 	or	r18,r6,r17
 800e43c:	4201ffc4 	addi	r8,r8,2047
 800e440:	90006c1e 	bne	r18,zero,800e5f4 <__muldf3+0x2d8>
 800e444:	9cc00094 	ori	r19,r19,2
 800e448:	0023883a 	mov	r17,zero
 800e44c:	00c00084 	movi	r3,2
 800e450:	003fe006 	br	800e3d4 <__muldf3+0xb8>
 800e454:	a80d883a 	mov	r6,r21
 800e458:	8821883a 	mov	r16,r17
 800e45c:	902d883a 	mov	r22,r18
 800e460:	182f883a 	mov	r23,r3
 800e464:	b88000a0 	cmpeqi	r2,r23,2
 800e468:	1000501e 	bne	r2,zero,800e5ac <__muldf3+0x290>
 800e46c:	b88000e0 	cmpeqi	r2,r23,3
 800e470:	10019d1e 	bne	r2,zero,800eae8 <__muldf3+0x7cc>
 800e474:	b8800060 	cmpeqi	r2,r23,1
 800e478:	10012a26 	beq	r2,zero,800e924 <__muldf3+0x608>
 800e47c:	0007883a 	mov	r3,zero
 800e480:	0021883a 	mov	r16,zero
 800e484:	002d883a 	mov	r22,zero
 800e488:	04400434 	movhi	r17,16
 800e48c:	1806953a 	slli	r3,r3,20
 800e490:	31803fcc 	andi	r6,r6,255
 800e494:	8c7fffc4 	addi	r17,r17,-1
 800e498:	300c97fa 	slli	r6,r6,31
 800e49c:	8460703a 	and	r16,r16,r17
 800e4a0:	80c6b03a 	or	r3,r16,r3
 800e4a4:	1986b03a 	or	r3,r3,r6
 800e4a8:	b005883a 	mov	r2,r22
 800e4ac:	dfc01017 	ldw	ra,64(sp)
 800e4b0:	df000f17 	ldw	fp,60(sp)
 800e4b4:	ddc00e17 	ldw	r23,56(sp)
 800e4b8:	dd800d17 	ldw	r22,52(sp)
 800e4bc:	dd400c17 	ldw	r21,48(sp)
 800e4c0:	dd000b17 	ldw	r20,44(sp)
 800e4c4:	dcc00a17 	ldw	r19,40(sp)
 800e4c8:	dc800917 	ldw	r18,36(sp)
 800e4cc:	dc400817 	ldw	r17,32(sp)
 800e4d0:	dc000717 	ldw	r16,28(sp)
 800e4d4:	dec01104 	addi	sp,sp,68
 800e4d8:	f800283a 	ret
 800e4dc:	812cb03a 	or	r22,r16,r4
 800e4e0:	b0003f26 	beq	r22,zero,800e5e0 <__muldf3+0x2c4>
 800e4e4:	d9c00115 	stw	r7,4(sp)
 800e4e8:	d9800015 	stw	r6,0(sp)
 800e4ec:	80013b26 	beq	r16,zero,800e9dc <__muldf3+0x6c0>
 800e4f0:	8009883a 	mov	r4,r16
 800e4f4:	800f6a00 	call	800f6a0 <__clzsi2>
 800e4f8:	d9800017 	ldw	r6,0(sp)
 800e4fc:	d9c00117 	ldw	r7,4(sp)
 800e500:	1007883a 	mov	r3,r2
 800e504:	117ffd44 	addi	r5,r2,-11
 800e508:	01000744 	movi	r4,29
 800e50c:	1dbffe04 	addi	r22,r3,-8
 800e510:	2149c83a 	sub	r4,r4,r5
 800e514:	85a0983a 	sll	r16,r16,r22
 800e518:	9108d83a 	srl	r4,r18,r4
 800e51c:	95ac983a 	sll	r22,r18,r22
 800e520:	2420b03a 	or	r16,r4,r16
 800e524:	023f0344 	movi	r8,-1011
 800e528:	40d1c83a 	sub	r8,r8,r3
 800e52c:	0027883a 	mov	r19,zero
 800e530:	002f883a 	mov	r23,zero
 800e534:	003f9606 	br	800e390 <__muldf3+0x74>
 800e538:	812cb03a 	or	r22,r16,r4
 800e53c:	b000231e 	bne	r22,zero,800e5cc <__muldf3+0x2b0>
 800e540:	0021883a 	mov	r16,zero
 800e544:	04c00204 	movi	r19,8
 800e548:	0201ffc4 	movi	r8,2047
 800e54c:	05c00084 	movi	r23,2
 800e550:	003f8f06 	br	800e390 <__muldf3+0x74>
 800e554:	3464b03a 	or	r18,r6,r17
 800e558:	90001826 	beq	r18,zero,800e5bc <__muldf3+0x2a0>
 800e55c:	88011126 	beq	r17,zero,800e9a4 <__muldf3+0x688>
 800e560:	8809883a 	mov	r4,r17
 800e564:	d9800115 	stw	r6,4(sp)
 800e568:	da000015 	stw	r8,0(sp)
 800e56c:	800f6a00 	call	800f6a0 <__clzsi2>
 800e570:	da000017 	ldw	r8,0(sp)
 800e574:	d9800117 	ldw	r6,4(sp)
 800e578:	1007883a 	mov	r3,r2
 800e57c:	117ffd44 	addi	r5,r2,-11
 800e580:	01000744 	movi	r4,29
 800e584:	1cbffe04 	addi	r18,r3,-8
 800e588:	2149c83a 	sub	r4,r4,r5
 800e58c:	8ca2983a 	sll	r17,r17,r18
 800e590:	3108d83a 	srl	r4,r6,r4
 800e594:	34a4983a 	sll	r18,r6,r18
 800e598:	2462b03a 	or	r17,r4,r17
 800e59c:	40d1c83a 	sub	r8,r8,r3
 800e5a0:	423f0344 	addi	r8,r8,-1011
 800e5a4:	0007883a 	mov	r3,zero
 800e5a8:	003f8a06 	br	800e3d4 <__muldf3+0xb8>
 800e5ac:	00c1ffc4 	movi	r3,2047
 800e5b0:	0021883a 	mov	r16,zero
 800e5b4:	002d883a 	mov	r22,zero
 800e5b8:	003fb306 	br	800e488 <__muldf3+0x16c>
 800e5bc:	9cc00054 	ori	r19,r19,1
 800e5c0:	0023883a 	mov	r17,zero
 800e5c4:	00c00044 	movi	r3,1
 800e5c8:	003f8206 	br	800e3d4 <__muldf3+0xb8>
 800e5cc:	202d883a 	mov	r22,r4
 800e5d0:	04c00304 	movi	r19,12
 800e5d4:	0201ffc4 	movi	r8,2047
 800e5d8:	05c000c4 	movi	r23,3
 800e5dc:	003f6c06 	br	800e390 <__muldf3+0x74>
 800e5e0:	0021883a 	mov	r16,zero
 800e5e4:	04c00104 	movi	r19,4
 800e5e8:	0011883a 	mov	r8,zero
 800e5ec:	05c00044 	movi	r23,1
 800e5f0:	003f6706 	br	800e390 <__muldf3+0x74>
 800e5f4:	9cc000d4 	ori	r19,r19,3
 800e5f8:	3025883a 	mov	r18,r6
 800e5fc:	00c000c4 	movi	r3,3
 800e600:	003f7406 	br	800e3d4 <__muldf3+0xb8>
 800e604:	a00d883a 	mov	r6,r20
 800e608:	003f9606 	br	800e464 <__muldf3+0x148>
 800e60c:	04000434 	movhi	r16,16
 800e610:	000d883a 	mov	r6,zero
 800e614:	843fffc4 	addi	r16,r16,-1
 800e618:	05bfffc4 	movi	r22,-1
 800e61c:	00c1ffc4 	movi	r3,2047
 800e620:	003f9906 	br	800e488 <__muldf3+0x16c>
 800e624:	8080022c 	andhi	r2,r16,8
 800e628:	1000d826 	beq	r2,zero,800e98c <__muldf3+0x670>
 800e62c:	8880022c 	andhi	r2,r17,8
 800e630:	1000d61e 	bne	r2,zero,800e98c <__muldf3+0x670>
 800e634:	00800434 	movhi	r2,16
 800e638:	8c000234 	orhi	r16,r17,8
 800e63c:	10bfffc4 	addi	r2,r2,-1
 800e640:	80a0703a 	and	r16,r16,r2
 800e644:	a80d883a 	mov	r6,r21
 800e648:	902d883a 	mov	r22,r18
 800e64c:	003ff306 	br	800e61c <__muldf3+0x300>
 800e650:	b028d43a 	srli	r20,r22,16
 800e654:	902ed43a 	srli	r23,r18,16
 800e658:	b5bfffcc 	andi	r22,r22,65535
 800e65c:	94bfffcc 	andi	r18,r18,65535
 800e660:	b00b883a 	mov	r5,r22
 800e664:	9009883a 	mov	r4,r18
 800e668:	d9800215 	stw	r6,8(sp)
 800e66c:	da000115 	stw	r8,4(sp)
 800e670:	da400015 	stw	r9,0(sp)
 800e674:	8002c3c0 	call	8002c3c <__mulsi3>
 800e678:	900b883a 	mov	r5,r18
 800e67c:	a009883a 	mov	r4,r20
 800e680:	1027883a 	mov	r19,r2
 800e684:	8002c3c0 	call	8002c3c <__mulsi3>
 800e688:	b80b883a 	mov	r5,r23
 800e68c:	a009883a 	mov	r4,r20
 800e690:	102b883a 	mov	r21,r2
 800e694:	8002c3c0 	call	8002c3c <__mulsi3>
 800e698:	b00b883a 	mov	r5,r22
 800e69c:	b809883a 	mov	r4,r23
 800e6a0:	1039883a 	mov	fp,r2
 800e6a4:	8002c3c0 	call	8002c3c <__mulsi3>
 800e6a8:	9806d43a 	srli	r3,r19,16
 800e6ac:	1545883a 	add	r2,r2,r21
 800e6b0:	da400017 	ldw	r9,0(sp)
 800e6b4:	1885883a 	add	r2,r3,r2
 800e6b8:	da000117 	ldw	r8,4(sp)
 800e6bc:	d9800217 	ldw	r6,8(sp)
 800e6c0:	1540022e 	bgeu	r2,r21,800e6cc <__muldf3+0x3b0>
 800e6c4:	00c00074 	movhi	r3,1
 800e6c8:	e0f9883a 	add	fp,fp,r3
 800e6cc:	1006943a 	slli	r3,r2,16
 800e6d0:	1004d43a 	srli	r2,r2,16
 800e6d4:	882ad43a 	srli	r21,r17,16
 800e6d8:	9cffffcc 	andi	r19,r19,65535
 800e6dc:	8c7fffcc 	andi	r17,r17,65535
 800e6e0:	b00b883a 	mov	r5,r22
 800e6e4:	8809883a 	mov	r4,r17
 800e6e8:	d8800015 	stw	r2,0(sp)
 800e6ec:	1cc5883a 	add	r2,r3,r19
 800e6f0:	d9800515 	stw	r6,20(sp)
 800e6f4:	da000415 	stw	r8,16(sp)
 800e6f8:	da400315 	stw	r9,12(sp)
 800e6fc:	d8800115 	stw	r2,4(sp)
 800e700:	8002c3c0 	call	8002c3c <__mulsi3>
 800e704:	a009883a 	mov	r4,r20
 800e708:	880b883a 	mov	r5,r17
 800e70c:	d8800215 	stw	r2,8(sp)
 800e710:	8002c3c0 	call	8002c3c <__mulsi3>
 800e714:	a009883a 	mov	r4,r20
 800e718:	a80b883a 	mov	r5,r21
 800e71c:	1027883a 	mov	r19,r2
 800e720:	8002c3c0 	call	8002c3c <__mulsi3>
 800e724:	b00b883a 	mov	r5,r22
 800e728:	a809883a 	mov	r4,r21
 800e72c:	1029883a 	mov	r20,r2
 800e730:	8002c3c0 	call	8002c3c <__mulsi3>
 800e734:	d9c00217 	ldw	r7,8(sp)
 800e738:	14c5883a 	add	r2,r2,r19
 800e73c:	da400317 	ldw	r9,12(sp)
 800e740:	3806d43a 	srli	r3,r7,16
 800e744:	da000417 	ldw	r8,16(sp)
 800e748:	d9800517 	ldw	r6,20(sp)
 800e74c:	1885883a 	add	r2,r3,r2
 800e750:	14c0022e 	bgeu	r2,r19,800e75c <__muldf3+0x440>
 800e754:	00c00074 	movhi	r3,1
 800e758:	a0e9883a 	add	r20,r20,r3
 800e75c:	1006d43a 	srli	r3,r2,16
 800e760:	1004943a 	slli	r2,r2,16
 800e764:	802cd43a 	srli	r22,r16,16
 800e768:	843fffcc 	andi	r16,r16,65535
 800e76c:	3cffffcc 	andi	r19,r7,65535
 800e770:	9009883a 	mov	r4,r18
 800e774:	800b883a 	mov	r5,r16
 800e778:	d9800615 	stw	r6,24(sp)
 800e77c:	da000515 	stw	r8,20(sp)
 800e780:	da400415 	stw	r9,16(sp)
 800e784:	1d29883a 	add	r20,r3,r20
 800e788:	14e7883a 	add	r19,r2,r19
 800e78c:	8002c3c0 	call	8002c3c <__mulsi3>
 800e790:	900b883a 	mov	r5,r18
 800e794:	b009883a 	mov	r4,r22
 800e798:	d8800315 	stw	r2,12(sp)
 800e79c:	8002c3c0 	call	8002c3c <__mulsi3>
 800e7a0:	b00b883a 	mov	r5,r22
 800e7a4:	b809883a 	mov	r4,r23
 800e7a8:	1025883a 	mov	r18,r2
 800e7ac:	8002c3c0 	call	8002c3c <__mulsi3>
 800e7b0:	800b883a 	mov	r5,r16
 800e7b4:	b809883a 	mov	r4,r23
 800e7b8:	d8800215 	stw	r2,8(sp)
 800e7bc:	8002c3c0 	call	8002c3c <__mulsi3>
 800e7c0:	d8c00317 	ldw	r3,12(sp)
 800e7c4:	d9400017 	ldw	r5,0(sp)
 800e7c8:	1485883a 	add	r2,r2,r18
 800e7cc:	1808d43a 	srli	r4,r3,16
 800e7d0:	2ccf883a 	add	r7,r5,r19
 800e7d4:	da800217 	ldw	r10,8(sp)
 800e7d8:	2085883a 	add	r2,r4,r2
 800e7dc:	da400417 	ldw	r9,16(sp)
 800e7e0:	da000517 	ldw	r8,20(sp)
 800e7e4:	d9800617 	ldw	r6,24(sp)
 800e7e8:	1480022e 	bgeu	r2,r18,800e7f4 <__muldf3+0x4d8>
 800e7ec:	01000074 	movhi	r4,1
 800e7f0:	5115883a 	add	r10,r10,r4
 800e7f4:	1024d43a 	srli	r18,r2,16
 800e7f8:	1004943a 	slli	r2,r2,16
 800e7fc:	1dffffcc 	andi	r23,r3,65535
 800e800:	8809883a 	mov	r4,r17
 800e804:	800b883a 	mov	r5,r16
 800e808:	d9800615 	stw	r6,24(sp)
 800e80c:	da000515 	stw	r8,20(sp)
 800e810:	da400415 	stw	r9,16(sp)
 800e814:	d9c00315 	stw	r7,12(sp)
 800e818:	92a5883a 	add	r18,r18,r10
 800e81c:	15ef883a 	add	r23,r2,r23
 800e820:	8002c3c0 	call	8002c3c <__mulsi3>
 800e824:	880b883a 	mov	r5,r17
 800e828:	b009883a 	mov	r4,r22
 800e82c:	d8800215 	stw	r2,8(sp)
 800e830:	8002c3c0 	call	8002c3c <__mulsi3>
 800e834:	b00b883a 	mov	r5,r22
 800e838:	a809883a 	mov	r4,r21
 800e83c:	d8800015 	stw	r2,0(sp)
 800e840:	8002c3c0 	call	8002c3c <__mulsi3>
 800e844:	800b883a 	mov	r5,r16
 800e848:	a809883a 	mov	r4,r21
 800e84c:	1023883a 	mov	r17,r2
 800e850:	8002c3c0 	call	8002c3c <__mulsi3>
 800e854:	da800217 	ldw	r10,8(sp)
 800e858:	d8c00017 	ldw	r3,0(sp)
 800e85c:	d9c00317 	ldw	r7,12(sp)
 800e860:	500ad43a 	srli	r5,r10,16
 800e864:	10c5883a 	add	r2,r2,r3
 800e868:	da400417 	ldw	r9,16(sp)
 800e86c:	288b883a 	add	r5,r5,r2
 800e870:	da000517 	ldw	r8,20(sp)
 800e874:	d9800617 	ldw	r6,24(sp)
 800e878:	28c0022e 	bgeu	r5,r3,800e884 <__muldf3+0x568>
 800e87c:	00800074 	movhi	r2,1
 800e880:	88a3883a 	add	r17,r17,r2
 800e884:	2806943a 	slli	r3,r5,16
 800e888:	52bfffcc 	andi	r10,r10,65535
 800e88c:	3f39883a 	add	fp,r7,fp
 800e890:	1a87883a 	add	r3,r3,r10
 800e894:	e4e7803a 	cmpltu	r19,fp,r19
 800e898:	1d07883a 	add	r3,r3,r20
 800e89c:	e5f9883a 	add	fp,fp,r23
 800e8a0:	1ce1883a 	add	r16,r3,r19
 800e8a4:	e5c9803a 	cmpltu	r4,fp,r23
 800e8a8:	848f883a 	add	r7,r16,r18
 800e8ac:	280ad43a 	srli	r5,r5,16
 800e8b0:	3915883a 	add	r10,r7,r4
 800e8b4:	1d29803a 	cmpltu	r20,r3,r20
 800e8b8:	84e1803a 	cmpltu	r16,r16,r19
 800e8bc:	5109803a 	cmpltu	r4,r10,r4
 800e8c0:	a420b03a 	or	r16,r20,r16
 800e8c4:	3ca5803a 	cmpltu	r18,r7,r18
 800e8c8:	8161883a 	add	r16,r16,r5
 800e8cc:	9108b03a 	or	r4,r18,r4
 800e8d0:	8121883a 	add	r16,r16,r4
 800e8d4:	e02c927a 	slli	r22,fp,9
 800e8d8:	8461883a 	add	r16,r16,r17
 800e8dc:	d8c00117 	ldw	r3,4(sp)
 800e8e0:	5004d5fa 	srli	r2,r10,23
 800e8e4:	8020927a 	slli	r16,r16,9
 800e8e8:	e038d5fa 	srli	fp,fp,23
 800e8ec:	b0ecb03a 	or	r22,r22,r3
 800e8f0:	5014927a 	slli	r10,r10,9
 800e8f4:	80a0b03a 	or	r16,r16,r2
 800e8f8:	b02cc03a 	cmpne	r22,r22,zero
 800e8fc:	b72cb03a 	or	r22,r22,fp
 800e900:	8080402c 	andhi	r2,r16,256
 800e904:	b2acb03a 	or	r22,r22,r10
 800e908:	10005c26 	beq	r2,zero,800ea7c <__muldf3+0x760>
 800e90c:	b004d07a 	srli	r2,r22,1
 800e910:	800697fa 	slli	r3,r16,31
 800e914:	b580004c 	andi	r22,r22,1
 800e918:	8020d07a 	srli	r16,r16,1
 800e91c:	15acb03a 	or	r22,r2,r22
 800e920:	b0ecb03a 	or	r22,r22,r3
 800e924:	48c0ffc4 	addi	r3,r9,1023
 800e928:	00c0370e 	bge	zero,r3,800ea08 <__muldf3+0x6ec>
 800e92c:	b08001cc 	andi	r2,r22,7
 800e930:	10000726 	beq	r2,zero,800e950 <__muldf3+0x634>
 800e934:	b08003cc 	andi	r2,r22,15
 800e938:	10800120 	cmpeqi	r2,r2,4
 800e93c:	1000041e 	bne	r2,zero,800e950 <__muldf3+0x634>
 800e940:	b0800104 	addi	r2,r22,4
 800e944:	15ad803a 	cmpltu	r22,r2,r22
 800e948:	85a1883a 	add	r16,r16,r22
 800e94c:	102d883a 	mov	r22,r2
 800e950:	8080402c 	andhi	r2,r16,256
 800e954:	10000426 	beq	r2,zero,800e968 <__muldf3+0x64c>
 800e958:	00bfc034 	movhi	r2,65280
 800e95c:	10bfffc4 	addi	r2,r2,-1
 800e960:	80a0703a 	and	r16,r16,r2
 800e964:	48c10004 	addi	r3,r9,1024
 800e968:	1881ffc8 	cmpgei	r2,r3,2047
 800e96c:	103f0f1e 	bne	r2,zero,800e5ac <__muldf3+0x290>
 800e970:	8004977a 	slli	r2,r16,29
 800e974:	b02cd0fa 	srli	r22,r22,3
 800e978:	8020927a 	slli	r16,r16,9
 800e97c:	18c1ffcc 	andi	r3,r3,2047
 800e980:	15acb03a 	or	r22,r2,r22
 800e984:	8020d33a 	srli	r16,r16,12
 800e988:	003ebf06 	br	800e488 <__muldf3+0x16c>
 800e98c:	00800434 	movhi	r2,16
 800e990:	84000234 	orhi	r16,r16,8
 800e994:	10bfffc4 	addi	r2,r2,-1
 800e998:	80a0703a 	and	r16,r16,r2
 800e99c:	a00d883a 	mov	r6,r20
 800e9a0:	003f1e06 	br	800e61c <__muldf3+0x300>
 800e9a4:	3009883a 	mov	r4,r6
 800e9a8:	da000115 	stw	r8,4(sp)
 800e9ac:	d9800015 	stw	r6,0(sp)
 800e9b0:	800f6a00 	call	800f6a0 <__clzsi2>
 800e9b4:	11400544 	addi	r5,r2,21
 800e9b8:	29000748 	cmpgei	r4,r5,29
 800e9bc:	10c00804 	addi	r3,r2,32
 800e9c0:	d9800017 	ldw	r6,0(sp)
 800e9c4:	da000117 	ldw	r8,4(sp)
 800e9c8:	203eed26 	beq	r4,zero,800e580 <__muldf3+0x264>
 800e9cc:	147ffe04 	addi	r17,r2,-8
 800e9d0:	3462983a 	sll	r17,r6,r17
 800e9d4:	0025883a 	mov	r18,zero
 800e9d8:	003ef006 	br	800e59c <__muldf3+0x280>
 800e9dc:	800f6a00 	call	800f6a0 <__clzsi2>
 800e9e0:	11400544 	addi	r5,r2,21
 800e9e4:	29000748 	cmpgei	r4,r5,29
 800e9e8:	10c00804 	addi	r3,r2,32
 800e9ec:	d9800017 	ldw	r6,0(sp)
 800e9f0:	d9c00117 	ldw	r7,4(sp)
 800e9f4:	203ec426 	beq	r4,zero,800e508 <__muldf3+0x1ec>
 800e9f8:	143ffe04 	addi	r16,r2,-8
 800e9fc:	9420983a 	sll	r16,r18,r16
 800ea00:	002d883a 	mov	r22,zero
 800ea04:	003ec706 	br	800e524 <__muldf3+0x208>
 800ea08:	00800044 	movi	r2,1
 800ea0c:	10c5c83a 	sub	r2,r2,r3
 800ea10:	11000e48 	cmpgei	r4,r2,57
 800ea14:	203e991e 	bne	r4,zero,800e47c <__muldf3+0x160>
 800ea18:	11000808 	cmpgei	r4,r2,32
 800ea1c:	2000191e 	bne	r4,zero,800ea84 <__muldf3+0x768>
 800ea20:	4a410784 	addi	r9,r9,1054
 800ea24:	8246983a 	sll	r3,r16,r9
 800ea28:	b088d83a 	srl	r4,r22,r2
 800ea2c:	b26c983a 	sll	r22,r22,r9
 800ea30:	80a0d83a 	srl	r16,r16,r2
 800ea34:	1904b03a 	or	r2,r3,r4
 800ea38:	b02cc03a 	cmpne	r22,r22,zero
 800ea3c:	1584b03a 	or	r2,r2,r22
 800ea40:	10c001cc 	andi	r3,r2,7
 800ea44:	18000726 	beq	r3,zero,800ea64 <__muldf3+0x748>
 800ea48:	10c003cc 	andi	r3,r2,15
 800ea4c:	18c00120 	cmpeqi	r3,r3,4
 800ea50:	1800041e 	bne	r3,zero,800ea64 <__muldf3+0x748>
 800ea54:	10c00104 	addi	r3,r2,4
 800ea58:	1885803a 	cmpltu	r2,r3,r2
 800ea5c:	80a1883a 	add	r16,r16,r2
 800ea60:	1805883a 	mov	r2,r3
 800ea64:	80c0202c 	andhi	r3,r16,128
 800ea68:	18001b26 	beq	r3,zero,800ead8 <__muldf3+0x7bc>
 800ea6c:	00c00044 	movi	r3,1
 800ea70:	0021883a 	mov	r16,zero
 800ea74:	002d883a 	mov	r22,zero
 800ea78:	003e8306 	br	800e488 <__muldf3+0x16c>
 800ea7c:	4013883a 	mov	r9,r8
 800ea80:	003fa806 	br	800e924 <__muldf3+0x608>
 800ea84:	013ff844 	movi	r4,-31
 800ea88:	20c7c83a 	sub	r3,r4,r3
 800ea8c:	10800820 	cmpeqi	r2,r2,32
 800ea90:	80c6d83a 	srl	r3,r16,r3
 800ea94:	1000031e 	bne	r2,zero,800eaa4 <__muldf3+0x788>
 800ea98:	4a410f84 	addi	r9,r9,1086
 800ea9c:	8260983a 	sll	r16,r16,r9
 800eaa0:	b42cb03a 	or	r22,r22,r16
 800eaa4:	b02cc03a 	cmpne	r22,r22,zero
 800eaa8:	b0c4b03a 	or	r2,r22,r3
 800eaac:	158001cc 	andi	r22,r2,7
 800eab0:	b000051e 	bne	r22,zero,800eac8 <__muldf3+0x7ac>
 800eab4:	0021883a 	mov	r16,zero
 800eab8:	1004d0fa 	srli	r2,r2,3
 800eabc:	0007883a 	mov	r3,zero
 800eac0:	15acb03a 	or	r22,r2,r22
 800eac4:	003e7006 	br	800e488 <__muldf3+0x16c>
 800eac8:	10c003cc 	andi	r3,r2,15
 800eacc:	18c00118 	cmpnei	r3,r3,4
 800ead0:	0021883a 	mov	r16,zero
 800ead4:	183fdf1e 	bne	r3,zero,800ea54 <__muldf3+0x738>
 800ead8:	8006927a 	slli	r3,r16,9
 800eadc:	802c977a 	slli	r22,r16,29
 800eae0:	1820d33a 	srli	r16,r3,12
 800eae4:	003ff406 	br	800eab8 <__muldf3+0x79c>
 800eae8:	00800434 	movhi	r2,16
 800eaec:	84000234 	orhi	r16,r16,8
 800eaf0:	10bfffc4 	addi	r2,r2,-1
 800eaf4:	80a0703a 	and	r16,r16,r2
 800eaf8:	003ec806 	br	800e61c <__muldf3+0x300>

0800eafc <__subdf3>:
 800eafc:	00800434 	movhi	r2,16
 800eb00:	3812d53a 	srli	r9,r7,20
 800eb04:	10bfffc4 	addi	r2,r2,-1
 800eb08:	defffb04 	addi	sp,sp,-20
 800eb0c:	2890703a 	and	r8,r5,r2
 800eb10:	3884703a 	and	r2,r7,r2
 800eb14:	2806d7fa 	srli	r3,r5,31
 800eb18:	dcc00315 	stw	r19,12(sp)
 800eb1c:	dc400115 	stw	r17,4(sp)
 800eb20:	280ad53a 	srli	r5,r5,20
 800eb24:	401090fa 	slli	r8,r8,3
 800eb28:	2026d77a 	srli	r19,r4,29
 800eb2c:	100490fa 	slli	r2,r2,3
 800eb30:	3022d77a 	srli	r17,r6,29
 800eb34:	4a81ffcc 	andi	r10,r9,2047
 800eb38:	dc800215 	stw	r18,8(sp)
 800eb3c:	dc000015 	stw	r16,0(sp)
 800eb40:	dfc00415 	stw	ra,16(sp)
 800eb44:	5241ffe0 	cmpeqi	r9,r10,2047
 800eb48:	1825883a 	mov	r18,r3
 800eb4c:	2c01ffcc 	andi	r16,r5,2047
 800eb50:	18c03fcc 	andi	r3,r3,255
 800eb54:	9a18b03a 	or	r12,r19,r8
 800eb58:	201a90fa 	slli	r13,r4,3
 800eb5c:	380ed7fa 	srli	r7,r7,31
 800eb60:	8896b03a 	or	r11,r17,r2
 800eb64:	301c90fa 	slli	r14,r6,3
 800eb68:	4800711e 	bne	r9,zero,800ed30 <__subdf3+0x234>
 800eb6c:	39c0005c 	xori	r7,r7,1
 800eb70:	8291c83a 	sub	r8,r16,r10
 800eb74:	19c05a26 	beq	r3,r7,800ece0 <__subdf3+0x1e4>
 800eb78:	0200720e 	bge	zero,r8,800ed44 <__subdf3+0x248>
 800eb7c:	50008126 	beq	r10,zero,800ed84 <__subdf3+0x288>
 800eb80:	8081ffd8 	cmpnei	r2,r16,2047
 800eb84:	10011626 	beq	r2,zero,800efe0 <__subdf3+0x4e4>
 800eb88:	5ac02034 	orhi	r11,r11,128
 800eb8c:	40800e48 	cmpgei	r2,r8,57
 800eb90:	1000fe1e 	bne	r2,zero,800ef8c <__subdf3+0x490>
 800eb94:	40800808 	cmpgei	r2,r8,32
 800eb98:	10015e1e 	bne	r2,zero,800f114 <__subdf3+0x618>
 800eb9c:	00800804 	movi	r2,32
 800eba0:	1205c83a 	sub	r2,r2,r8
 800eba4:	58a2983a 	sll	r17,r11,r2
 800eba8:	7206d83a 	srl	r3,r14,r8
 800ebac:	709c983a 	sll	r14,r14,r2
 800ebb0:	5a04d83a 	srl	r2,r11,r8
 800ebb4:	88e2b03a 	or	r17,r17,r3
 800ebb8:	701cc03a 	cmpne	r14,r14,zero
 800ebbc:	8ba2b03a 	or	r17,r17,r14
 800ebc0:	6099c83a 	sub	r12,r12,r2
 800ebc4:	6c63c83a 	sub	r17,r13,r17
 800ebc8:	6c49803a 	cmpltu	r4,r13,r17
 800ebcc:	6109c83a 	sub	r4,r12,r4
 800ebd0:	2080202c 	andhi	r2,r4,128
 800ebd4:	10009f26 	beq	r2,zero,800ee54 <__subdf3+0x358>
 800ebd8:	04c02034 	movhi	r19,128
 800ebdc:	9cffffc4 	addi	r19,r19,-1
 800ebe0:	24e6703a 	and	r19,r4,r19
 800ebe4:	9800e026 	beq	r19,zero,800ef68 <__subdf3+0x46c>
 800ebe8:	9809883a 	mov	r4,r19
 800ebec:	800f6a00 	call	800f6a0 <__clzsi2>
 800ebf0:	123ffe04 	addi	r8,r2,-8
 800ebf4:	01000804 	movi	r4,32
 800ebf8:	2209c83a 	sub	r4,r4,r8
 800ebfc:	8906d83a 	srl	r3,r17,r4
 800ec00:	9a08983a 	sll	r4,r19,r8
 800ec04:	8a22983a 	sll	r17,r17,r8
 800ec08:	1908b03a 	or	r4,r3,r4
 800ec0c:	4400cf16 	blt	r8,r16,800ef4c <__subdf3+0x450>
 800ec10:	4411c83a 	sub	r8,r8,r16
 800ec14:	40800044 	addi	r2,r8,1
 800ec18:	10c00808 	cmpgei	r3,r2,32
 800ec1c:	1801251e 	bne	r3,zero,800f0b4 <__subdf3+0x5b8>
 800ec20:	00c00804 	movi	r3,32
 800ec24:	1887c83a 	sub	r3,r3,r2
 800ec28:	888ad83a 	srl	r5,r17,r2
 800ec2c:	88e2983a 	sll	r17,r17,r3
 800ec30:	20c6983a 	sll	r3,r4,r3
 800ec34:	2088d83a 	srl	r4,r4,r2
 800ec38:	8822c03a 	cmpne	r17,r17,zero
 800ec3c:	1946b03a 	or	r3,r3,r5
 800ec40:	1c62b03a 	or	r17,r3,r17
 800ec44:	0021883a 	mov	r16,zero
 800ec48:	888001cc 	andi	r2,r17,7
 800ec4c:	10000726 	beq	r2,zero,800ec6c <__subdf3+0x170>
 800ec50:	888003cc 	andi	r2,r17,15
 800ec54:	10800120 	cmpeqi	r2,r2,4
 800ec58:	1000041e 	bne	r2,zero,800ec6c <__subdf3+0x170>
 800ec5c:	88c00104 	addi	r3,r17,4
 800ec60:	1c63803a 	cmpltu	r17,r3,r17
 800ec64:	2449883a 	add	r4,r4,r17
 800ec68:	1823883a 	mov	r17,r3
 800ec6c:	2080202c 	andhi	r2,r4,128
 800ec70:	10007a26 	beq	r2,zero,800ee5c <__subdf3+0x360>
 800ec74:	82000044 	addi	r8,r16,1
 800ec78:	4081ffe0 	cmpeqi	r2,r8,2047
 800ec7c:	4201ffcc 	andi	r8,r8,2047
 800ec80:	10008c1e 	bne	r2,zero,800eeb4 <__subdf3+0x3b8>
 800ec84:	00bfe034 	movhi	r2,65408
 800ec88:	10bfffc4 	addi	r2,r2,-1
 800ec8c:	2084703a 	and	r2,r4,r2
 800ec90:	1008927a 	slli	r4,r2,9
 800ec94:	8822d0fa 	srli	r17,r17,3
 800ec98:	100c977a 	slli	r6,r2,29
 800ec9c:	2008d33a 	srli	r4,r4,12
 800eca0:	3444b03a 	or	r2,r6,r17
 800eca4:	4010953a 	slli	r8,r8,20
 800eca8:	00c00434 	movhi	r3,16
 800ecac:	94803fcc 	andi	r18,r18,255
 800ecb0:	902497fa 	slli	r18,r18,31
 800ecb4:	18ffffc4 	addi	r3,r3,-1
 800ecb8:	20c6703a 	and	r3,r4,r3
 800ecbc:	1a06b03a 	or	r3,r3,r8
 800ecc0:	1c86b03a 	or	r3,r3,r18
 800ecc4:	dfc00417 	ldw	ra,16(sp)
 800ecc8:	dcc00317 	ldw	r19,12(sp)
 800eccc:	dc800217 	ldw	r18,8(sp)
 800ecd0:	dc400117 	ldw	r17,4(sp)
 800ecd4:	dc000017 	ldw	r16,0(sp)
 800ecd8:	dec00504 	addi	sp,sp,20
 800ecdc:	f800283a 	ret
 800ece0:	0200320e 	bge	zero,r8,800edac <__subdf3+0x2b0>
 800ece4:	50004c26 	beq	r10,zero,800ee18 <__subdf3+0x31c>
 800ece8:	8081ffd8 	cmpnei	r2,r16,2047
 800ecec:	1000bc26 	beq	r2,zero,800efe0 <__subdf3+0x4e4>
 800ecf0:	5ac02034 	orhi	r11,r11,128
 800ecf4:	40800e48 	cmpgei	r2,r8,57
 800ecf8:	1000641e 	bne	r2,zero,800ee8c <__subdf3+0x390>
 800ecfc:	40800808 	cmpgei	r2,r8,32
 800ed00:	10011726 	beq	r2,zero,800f160 <__subdf3+0x664>
 800ed04:	447ff804 	addi	r17,r8,-32
 800ed08:	40800820 	cmpeqi	r2,r8,32
 800ed0c:	5c46d83a 	srl	r3,r11,r17
 800ed10:	1000041e 	bne	r2,zero,800ed24 <__subdf3+0x228>
 800ed14:	00801004 	movi	r2,64
 800ed18:	1205c83a 	sub	r2,r2,r8
 800ed1c:	5884983a 	sll	r2,r11,r2
 800ed20:	709cb03a 	or	r14,r14,r2
 800ed24:	7022c03a 	cmpne	r17,r14,zero
 800ed28:	88e2b03a 	or	r17,r17,r3
 800ed2c:	00005906 	br	800ee94 <__subdf3+0x398>
 800ed30:	5b8ab03a 	or	r5,r11,r14
 800ed34:	823e0044 	addi	r8,r16,-2047
 800ed38:	28001a1e 	bne	r5,zero,800eda4 <__subdf3+0x2a8>
 800ed3c:	39c0005c 	xori	r7,r7,1
 800ed40:	19c01a26 	beq	r3,r7,800edac <__subdf3+0x2b0>
 800ed44:	4000291e 	bne	r8,zero,800edec <__subdf3+0x2f0>
 800ed48:	80800044 	addi	r2,r16,1
 800ed4c:	1081ff8c 	andi	r2,r2,2046
 800ed50:	1000911e 	bne	r2,zero,800ef98 <__subdf3+0x49c>
 800ed54:	6346b03a 	or	r3,r12,r13
 800ed58:	5b84b03a 	or	r2,r11,r14
 800ed5c:	8001551e 	bne	r16,zero,800f2b4 <__subdf3+0x7b8>
 800ed60:	18011b26 	beq	r3,zero,800f1d0 <__subdf3+0x6d4>
 800ed64:	1001641e 	bne	r2,zero,800f2f8 <__subdf3+0x7fc>
 800ed68:	00880034 	movhi	r2,8192
 800ed6c:	6022977a 	slli	r17,r12,29
 800ed70:	10bfffc4 	addi	r2,r2,-1
 800ed74:	2088703a 	and	r4,r4,r2
 800ed78:	2444b03a 	or	r2,r4,r17
 800ed7c:	6026d0fa 	srli	r19,r12,3
 800ed80:	00003d06 	br	800ee78 <__subdf3+0x37c>
 800ed84:	5b84b03a 	or	r2,r11,r14
 800ed88:	10008e26 	beq	r2,zero,800efc4 <__subdf3+0x4c8>
 800ed8c:	40bfffc4 	addi	r2,r8,-1
 800ed90:	10011f26 	beq	r2,zero,800f210 <__subdf3+0x714>
 800ed94:	4201ffd8 	cmpnei	r8,r8,2047
 800ed98:	40012d26 	beq	r8,zero,800f250 <__subdf3+0x754>
 800ed9c:	1011883a 	mov	r8,r2
 800eda0:	003f7a06 	br	800eb8c <__subdf3+0x90>
 800eda4:	39c03fcc 	andi	r7,r7,255
 800eda8:	19ffe61e 	bne	r3,r7,800ed44 <__subdf3+0x248>
 800edac:	4000931e 	bne	r8,zero,800effc <__subdf3+0x500>
 800edb0:	80c00044 	addi	r3,r16,1
 800edb4:	1881ff8c 	andi	r2,r3,2046
 800edb8:	10012c1e 	bne	r2,zero,800f26c <__subdf3+0x770>
 800edbc:	6344b03a 	or	r2,r12,r13
 800edc0:	8000f91e 	bne	r16,zero,800f1a8 <__subdf3+0x6ac>
 800edc4:	10017326 	beq	r2,zero,800f394 <__subdf3+0x898>
 800edc8:	5b84b03a 	or	r2,r11,r14
 800edcc:	1001781e 	bne	r2,zero,800f3b0 <__subdf3+0x8b4>
 800edd0:	6004977a 	slli	r2,r12,29
 800edd4:	00c80034 	movhi	r3,8192
 800edd8:	18ffffc4 	addi	r3,r3,-1
 800eddc:	20c6703a 	and	r3,r4,r3
 800ede0:	10c4b03a 	or	r2,r2,r3
 800ede4:	6026d0fa 	srli	r19,r12,3
 800ede8:	00002306 	br	800ee78 <__subdf3+0x37c>
 800edec:	5411c83a 	sub	r8,r10,r16
 800edf0:	3825883a 	mov	r18,r7
 800edf4:	8000991e 	bne	r16,zero,800f05c <__subdf3+0x560>
 800edf8:	6344b03a 	or	r2,r12,r13
 800edfc:	1000e326 	beq	r2,zero,800f18c <__subdf3+0x690>
 800ee00:	40bfffc4 	addi	r2,r8,-1
 800ee04:	10015d26 	beq	r2,zero,800f37c <__subdf3+0x880>
 800ee08:	4201ffd8 	cmpnei	r8,r8,2047
 800ee0c:	4000f926 	beq	r8,zero,800f1f4 <__subdf3+0x6f8>
 800ee10:	1011883a 	mov	r8,r2
 800ee14:	00009406 	br	800f068 <__subdf3+0x56c>
 800ee18:	5b84b03a 	or	r2,r11,r14
 800ee1c:	10010226 	beq	r2,zero,800f228 <__subdf3+0x72c>
 800ee20:	40bfffc4 	addi	r2,r8,-1
 800ee24:	10000426 	beq	r2,zero,800ee38 <__subdf3+0x33c>
 800ee28:	4201ffd8 	cmpnei	r8,r8,2047
 800ee2c:	40014126 	beq	r8,zero,800f334 <__subdf3+0x838>
 800ee30:	1011883a 	mov	r8,r2
 800ee34:	003faf06 	br	800ecf4 <__subdf3+0x1f8>
 800ee38:	6ba3883a 	add	r17,r13,r14
 800ee3c:	62c9883a 	add	r4,r12,r11
 800ee40:	8b5b803a 	cmpltu	r13,r17,r13
 800ee44:	2349883a 	add	r4,r4,r13
 800ee48:	2080202c 	andhi	r2,r4,128
 800ee4c:	1000a61e 	bne	r2,zero,800f0e8 <__subdf3+0x5ec>
 800ee50:	04000044 	movi	r16,1
 800ee54:	888001cc 	andi	r2,r17,7
 800ee58:	103f7d1e 	bne	r2,zero,800ec50 <__subdf3+0x154>
 800ee5c:	8822d0fa 	srli	r17,r17,3
 800ee60:	2004977a 	slli	r2,r4,29
 800ee64:	2026d0fa 	srli	r19,r4,3
 800ee68:	8011883a 	mov	r8,r16
 800ee6c:	8884b03a 	or	r2,r17,r2
 800ee70:	40c1ffe0 	cmpeqi	r3,r8,2047
 800ee74:	18002d1e 	bne	r3,zero,800ef2c <__subdf3+0x430>
 800ee78:	01000434 	movhi	r4,16
 800ee7c:	213fffc4 	addi	r4,r4,-1
 800ee80:	9908703a 	and	r4,r19,r4
 800ee84:	4201ffcc 	andi	r8,r8,2047
 800ee88:	003f8606 	br	800eca4 <__subdf3+0x1a8>
 800ee8c:	5ba2b03a 	or	r17,r11,r14
 800ee90:	8822c03a 	cmpne	r17,r17,zero
 800ee94:	8b63883a 	add	r17,r17,r13
 800ee98:	8b49803a 	cmpltu	r4,r17,r13
 800ee9c:	2309883a 	add	r4,r4,r12
 800eea0:	2080202c 	andhi	r2,r4,128
 800eea4:	103feb26 	beq	r2,zero,800ee54 <__subdf3+0x358>
 800eea8:	84000044 	addi	r16,r16,1
 800eeac:	8081ffe0 	cmpeqi	r2,r16,2047
 800eeb0:	10008e26 	beq	r2,zero,800f0ec <__subdf3+0x5f0>
 800eeb4:	0201ffc4 	movi	r8,2047
 800eeb8:	0009883a 	mov	r4,zero
 800eebc:	0005883a 	mov	r2,zero
 800eec0:	003f7806 	br	800eca4 <__subdf3+0x1a8>
 800eec4:	6010977a 	slli	r8,r12,29
 800eec8:	6026d0fa 	srli	r19,r12,3
 800eecc:	1000bb26 	beq	r2,zero,800f1bc <__subdf3+0x6c0>
 800eed0:	01480034 	movhi	r5,8192
 800eed4:	297fffc4 	addi	r5,r5,-1
 800eed8:	2146703a 	and	r3,r4,r5
 800eedc:	9880022c 	andhi	r2,r19,8
 800eee0:	1a06b03a 	or	r3,r3,r8
 800eee4:	10000826 	beq	r2,zero,800ef08 <__subdf3+0x40c>
 800eee8:	5808d0fa 	srli	r4,r11,3
 800eeec:	2080022c 	andhi	r2,r4,8
 800eef0:	1000051e 	bne	r2,zero,800ef08 <__subdf3+0x40c>
 800eef4:	5804977a 	slli	r2,r11,29
 800eef8:	3146703a 	and	r3,r6,r5
 800eefc:	3825883a 	mov	r18,r7
 800ef00:	1886b03a 	or	r3,r3,r2
 800ef04:	2027883a 	mov	r19,r4
 800ef08:	1804d77a 	srli	r2,r3,29
 800ef0c:	980890fa 	slli	r4,r19,3
 800ef10:	01480034 	movhi	r5,8192
 800ef14:	297fffc4 	addi	r5,r5,-1
 800ef18:	1108b03a 	or	r4,r2,r4
 800ef1c:	2004977a 	slli	r2,r4,29
 800ef20:	2026d0fa 	srli	r19,r4,3
 800ef24:	1946703a 	and	r3,r3,r5
 800ef28:	10c4b03a 	or	r2,r2,r3
 800ef2c:	14c6b03a 	or	r3,r2,r19
 800ef30:	18014926 	beq	r3,zero,800f458 <__subdf3+0x95c>
 800ef34:	00c00434 	movhi	r3,16
 800ef38:	99000234 	orhi	r4,r19,8
 800ef3c:	18ffffc4 	addi	r3,r3,-1
 800ef40:	20c8703a 	and	r4,r4,r3
 800ef44:	0201ffc4 	movi	r8,2047
 800ef48:	003f5606 	br	800eca4 <__subdf3+0x1a8>
 800ef4c:	00bfe034 	movhi	r2,65408
 800ef50:	10bfffc4 	addi	r2,r2,-1
 800ef54:	2088703a 	and	r4,r4,r2
 800ef58:	888001cc 	andi	r2,r17,7
 800ef5c:	8221c83a 	sub	r16,r16,r8
 800ef60:	103f3b1e 	bne	r2,zero,800ec50 <__subdf3+0x154>
 800ef64:	003fbd06 	br	800ee5c <__subdf3+0x360>
 800ef68:	8809883a 	mov	r4,r17
 800ef6c:	800f6a00 	call	800f6a0 <__clzsi2>
 800ef70:	12000604 	addi	r8,r2,24
 800ef74:	40c00808 	cmpgei	r3,r8,32
 800ef78:	183f1e26 	beq	r3,zero,800ebf4 <__subdf3+0xf8>
 800ef7c:	113ffe04 	addi	r4,r2,-8
 800ef80:	8908983a 	sll	r4,r17,r4
 800ef84:	0023883a 	mov	r17,zero
 800ef88:	003f2006 	br	800ec0c <__subdf3+0x110>
 800ef8c:	5ba2b03a 	or	r17,r11,r14
 800ef90:	8822c03a 	cmpne	r17,r17,zero
 800ef94:	003f0b06 	br	800ebc4 <__subdf3+0xc8>
 800ef98:	6ba3c83a 	sub	r17,r13,r14
 800ef9c:	62e7c83a 	sub	r19,r12,r11
 800efa0:	6c49803a 	cmpltu	r4,r13,r17
 800efa4:	9927c83a 	sub	r19,r19,r4
 800efa8:	9880202c 	andhi	r2,r19,128
 800efac:	1000bb1e 	bne	r2,zero,800f29c <__subdf3+0x7a0>
 800efb0:	8cc4b03a 	or	r2,r17,r19
 800efb4:	103f0b1e 	bne	r2,zero,800ebe4 <__subdf3+0xe8>
 800efb8:	0027883a 	mov	r19,zero
 800efbc:	0025883a 	mov	r18,zero
 800efc0:	003fad06 	br	800ee78 <__subdf3+0x37c>
 800efc4:	00880034 	movhi	r2,8192
 800efc8:	6022977a 	slli	r17,r12,29
 800efcc:	10bfffc4 	addi	r2,r2,-1
 800efd0:	2088703a 	and	r4,r4,r2
 800efd4:	2444b03a 	or	r2,r4,r17
 800efd8:	6026d0fa 	srli	r19,r12,3
 800efdc:	003fa406 	br	800ee70 <__subdf3+0x374>
 800efe0:	00880034 	movhi	r2,8192
 800efe4:	6022977a 	slli	r17,r12,29
 800efe8:	10bfffc4 	addi	r2,r2,-1
 800efec:	2088703a 	and	r4,r4,r2
 800eff0:	2444b03a 	or	r2,r4,r17
 800eff4:	6026d0fa 	srli	r19,r12,3
 800eff8:	003fcc06 	br	800ef2c <__subdf3+0x430>
 800effc:	5411c83a 	sub	r8,r10,r16
 800f000:	80004f26 	beq	r16,zero,800f140 <__subdf3+0x644>
 800f004:	5081ffd8 	cmpnei	r2,r10,2047
 800f008:	1000b426 	beq	r2,zero,800f2dc <__subdf3+0x7e0>
 800f00c:	63002034 	orhi	r12,r12,128
 800f010:	40800e48 	cmpgei	r2,r8,57
 800f014:	1000c41e 	bne	r2,zero,800f328 <__subdf3+0x82c>
 800f018:	40800808 	cmpgei	r2,r8,32
 800f01c:	1000f91e 	bne	r2,zero,800f404 <__subdf3+0x908>
 800f020:	00800804 	movi	r2,32
 800f024:	1205c83a 	sub	r2,r2,r8
 800f028:	60a2983a 	sll	r17,r12,r2
 800f02c:	6a06d83a 	srl	r3,r13,r8
 800f030:	6884983a 	sll	r2,r13,r2
 800f034:	6210d83a 	srl	r8,r12,r8
 800f038:	88e2b03a 	or	r17,r17,r3
 800f03c:	1004c03a 	cmpne	r2,r2,zero
 800f040:	88a2b03a 	or	r17,r17,r2
 800f044:	5a17883a 	add	r11,r11,r8
 800f048:	8ba3883a 	add	r17,r17,r14
 800f04c:	8b85803a 	cmpltu	r2,r17,r14
 800f050:	12c9883a 	add	r4,r2,r11
 800f054:	5021883a 	mov	r16,r10
 800f058:	003f9106 	br	800eea0 <__subdf3+0x3a4>
 800f05c:	5081ffd8 	cmpnei	r2,r10,2047
 800f060:	10006426 	beq	r2,zero,800f1f4 <__subdf3+0x6f8>
 800f064:	63002034 	orhi	r12,r12,128
 800f068:	40800e48 	cmpgei	r2,r8,57
 800f06c:	1000751e 	bne	r2,zero,800f244 <__subdf3+0x748>
 800f070:	40800808 	cmpgei	r2,r8,32
 800f074:	1000b61e 	bne	r2,zero,800f350 <__subdf3+0x854>
 800f078:	00800804 	movi	r2,32
 800f07c:	1205c83a 	sub	r2,r2,r8
 800f080:	60a2983a 	sll	r17,r12,r2
 800f084:	6a06d83a 	srl	r3,r13,r8
 800f088:	6884983a 	sll	r2,r13,r2
 800f08c:	6210d83a 	srl	r8,r12,r8
 800f090:	88e2b03a 	or	r17,r17,r3
 800f094:	1004c03a 	cmpne	r2,r2,zero
 800f098:	88a2b03a 	or	r17,r17,r2
 800f09c:	5a17c83a 	sub	r11,r11,r8
 800f0a0:	7463c83a 	sub	r17,r14,r17
 800f0a4:	7445803a 	cmpltu	r2,r14,r17
 800f0a8:	5889c83a 	sub	r4,r11,r2
 800f0ac:	5021883a 	mov	r16,r10
 800f0b0:	003ec706 	br	800ebd0 <__subdf3+0xd4>
 800f0b4:	423ff844 	addi	r8,r8,-31
 800f0b8:	10c00820 	cmpeqi	r3,r2,32
 800f0bc:	2210d83a 	srl	r8,r4,r8
 800f0c0:	1800041e 	bne	r3,zero,800f0d4 <__subdf3+0x5d8>
 800f0c4:	00c01004 	movi	r3,64
 800f0c8:	1885c83a 	sub	r2,r3,r2
 800f0cc:	2088983a 	sll	r4,r4,r2
 800f0d0:	8922b03a 	or	r17,r17,r4
 800f0d4:	8822c03a 	cmpne	r17,r17,zero
 800f0d8:	8a22b03a 	or	r17,r17,r8
 800f0dc:	0009883a 	mov	r4,zero
 800f0e0:	0021883a 	mov	r16,zero
 800f0e4:	003f5b06 	br	800ee54 <__subdf3+0x358>
 800f0e8:	04000084 	movi	r16,2
 800f0ec:	00bfe034 	movhi	r2,65408
 800f0f0:	10bfffc4 	addi	r2,r2,-1
 800f0f4:	2084703a 	and	r2,r4,r2
 800f0f8:	8806d07a 	srli	r3,r17,1
 800f0fc:	100a97fa 	slli	r5,r2,31
 800f100:	8c40004c 	andi	r17,r17,1
 800f104:	1c62b03a 	or	r17,r3,r17
 800f108:	1008d07a 	srli	r4,r2,1
 800f10c:	2c62b03a 	or	r17,r5,r17
 800f110:	003ecd06 	br	800ec48 <__subdf3+0x14c>
 800f114:	447ff804 	addi	r17,r8,-32
 800f118:	40800820 	cmpeqi	r2,r8,32
 800f11c:	5c46d83a 	srl	r3,r11,r17
 800f120:	1000041e 	bne	r2,zero,800f134 <__subdf3+0x638>
 800f124:	00801004 	movi	r2,64
 800f128:	1205c83a 	sub	r2,r2,r8
 800f12c:	5884983a 	sll	r2,r11,r2
 800f130:	709cb03a 	or	r14,r14,r2
 800f134:	7022c03a 	cmpne	r17,r14,zero
 800f138:	88e2b03a 	or	r17,r17,r3
 800f13c:	003ea106 	br	800ebc4 <__subdf3+0xc8>
 800f140:	6344b03a 	or	r2,r12,r13
 800f144:	1000a526 	beq	r2,zero,800f3dc <__subdf3+0x8e0>
 800f148:	40bfffc4 	addi	r2,r8,-1
 800f14c:	1000bd26 	beq	r2,zero,800f444 <__subdf3+0x948>
 800f150:	4201ffd8 	cmpnei	r8,r8,2047
 800f154:	40006126 	beq	r8,zero,800f2dc <__subdf3+0x7e0>
 800f158:	1011883a 	mov	r8,r2
 800f15c:	003fac06 	br	800f010 <__subdf3+0x514>
 800f160:	00800804 	movi	r2,32
 800f164:	1205c83a 	sub	r2,r2,r8
 800f168:	58a2983a 	sll	r17,r11,r2
 800f16c:	7206d83a 	srl	r3,r14,r8
 800f170:	709c983a 	sll	r14,r14,r2
 800f174:	5a04d83a 	srl	r2,r11,r8
 800f178:	88e2b03a 	or	r17,r17,r3
 800f17c:	701cc03a 	cmpne	r14,r14,zero
 800f180:	8ba2b03a 	or	r17,r17,r14
 800f184:	6099883a 	add	r12,r12,r2
 800f188:	003f4206 	br	800ee94 <__subdf3+0x398>
 800f18c:	5808977a 	slli	r4,r11,29
 800f190:	00c80034 	movhi	r3,8192
 800f194:	18ffffc4 	addi	r3,r3,-1
 800f198:	30cc703a 	and	r6,r6,r3
 800f19c:	2184b03a 	or	r2,r4,r6
 800f1a0:	5826d0fa 	srli	r19,r11,3
 800f1a4:	003f3206 	br	800ee70 <__subdf3+0x374>
 800f1a8:	10004c26 	beq	r2,zero,800f2dc <__subdf3+0x7e0>
 800f1ac:	5b9cb03a 	or	r14,r11,r14
 800f1b0:	6010977a 	slli	r8,r12,29
 800f1b4:	6026d0fa 	srli	r19,r12,3
 800f1b8:	703f451e 	bne	r14,zero,800eed0 <__subdf3+0x3d4>
 800f1bc:	00880034 	movhi	r2,8192
 800f1c0:	10bfffc4 	addi	r2,r2,-1
 800f1c4:	2084703a 	and	r2,r4,r2
 800f1c8:	1204b03a 	or	r2,r2,r8
 800f1cc:	003f5706 	br	800ef2c <__subdf3+0x430>
 800f1d0:	103f7926 	beq	r2,zero,800efb8 <__subdf3+0x4bc>
 800f1d4:	5804977a 	slli	r2,r11,29
 800f1d8:	00c80034 	movhi	r3,8192
 800f1dc:	18ffffc4 	addi	r3,r3,-1
 800f1e0:	30c6703a 	and	r3,r6,r3
 800f1e4:	10c4b03a 	or	r2,r2,r3
 800f1e8:	5826d0fa 	srli	r19,r11,3
 800f1ec:	3825883a 	mov	r18,r7
 800f1f0:	003f2106 	br	800ee78 <__subdf3+0x37c>
 800f1f4:	5804977a 	slli	r2,r11,29
 800f1f8:	00c80034 	movhi	r3,8192
 800f1fc:	18ffffc4 	addi	r3,r3,-1
 800f200:	30c6703a 	and	r3,r6,r3
 800f204:	10c4b03a 	or	r2,r2,r3
 800f208:	5826d0fa 	srli	r19,r11,3
 800f20c:	003f4706 	br	800ef2c <__subdf3+0x430>
 800f210:	6ba3c83a 	sub	r17,r13,r14
 800f214:	62c9c83a 	sub	r4,r12,r11
 800f218:	6c5b803a 	cmpltu	r13,r13,r17
 800f21c:	2349c83a 	sub	r4,r4,r13
 800f220:	04000044 	movi	r16,1
 800f224:	003e6a06 	br	800ebd0 <__subdf3+0xd4>
 800f228:	6004977a 	slli	r2,r12,29
 800f22c:	00c80034 	movhi	r3,8192
 800f230:	18ffffc4 	addi	r3,r3,-1
 800f234:	20c8703a 	and	r4,r4,r3
 800f238:	1104b03a 	or	r2,r2,r4
 800f23c:	6026d0fa 	srli	r19,r12,3
 800f240:	003f0b06 	br	800ee70 <__subdf3+0x374>
 800f244:	6366b03a 	or	r19,r12,r13
 800f248:	9822c03a 	cmpne	r17,r19,zero
 800f24c:	003f9406 	br	800f0a0 <__subdf3+0x5a4>
 800f250:	6004977a 	slli	r2,r12,29
 800f254:	00c80034 	movhi	r3,8192
 800f258:	18ffffc4 	addi	r3,r3,-1
 800f25c:	20c8703a 	and	r4,r4,r3
 800f260:	1104b03a 	or	r2,r2,r4
 800f264:	6026d0fa 	srli	r19,r12,3
 800f268:	003f3006 	br	800ef2c <__subdf3+0x430>
 800f26c:	1881ffe0 	cmpeqi	r2,r3,2047
 800f270:	103f101e 	bne	r2,zero,800eeb4 <__subdf3+0x3b8>
 800f274:	6b9d883a 	add	r14,r13,r14
 800f278:	62c9883a 	add	r4,r12,r11
 800f27c:	7345803a 	cmpltu	r2,r14,r13
 800f280:	2085883a 	add	r2,r4,r2
 800f284:	102297fa 	slli	r17,r2,31
 800f288:	701cd07a 	srli	r14,r14,1
 800f28c:	1008d07a 	srli	r4,r2,1
 800f290:	1821883a 	mov	r16,r3
 800f294:	8ba2b03a 	or	r17,r17,r14
 800f298:	003eee06 	br	800ee54 <__subdf3+0x358>
 800f29c:	7363c83a 	sub	r17,r14,r13
 800f2a0:	5b09c83a 	sub	r4,r11,r12
 800f2a4:	7467803a 	cmpltu	r19,r14,r17
 800f2a8:	24e7c83a 	sub	r19,r4,r19
 800f2ac:	3825883a 	mov	r18,r7
 800f2b0:	003e4c06 	br	800ebe4 <__subdf3+0xe8>
 800f2b4:	183f031e 	bne	r3,zero,800eec4 <__subdf3+0x3c8>
 800f2b8:	10005d26 	beq	r2,zero,800f430 <__subdf3+0x934>
 800f2bc:	00880034 	movhi	r2,8192
 800f2c0:	5806977a 	slli	r3,r11,29
 800f2c4:	10bfffc4 	addi	r2,r2,-1
 800f2c8:	3084703a 	and	r2,r6,r2
 800f2cc:	10c4b03a 	or	r2,r2,r3
 800f2d0:	5826d0fa 	srli	r19,r11,3
 800f2d4:	3825883a 	mov	r18,r7
 800f2d8:	003f1406 	br	800ef2c <__subdf3+0x430>
 800f2dc:	00880034 	movhi	r2,8192
 800f2e0:	5806977a 	slli	r3,r11,29
 800f2e4:	10bfffc4 	addi	r2,r2,-1
 800f2e8:	3084703a 	and	r2,r6,r2
 800f2ec:	10c4b03a 	or	r2,r2,r3
 800f2f0:	5826d0fa 	srli	r19,r11,3
 800f2f4:	003f0d06 	br	800ef2c <__subdf3+0x430>
 800f2f8:	6ba3c83a 	sub	r17,r13,r14
 800f2fc:	62c5c83a 	sub	r2,r12,r11
 800f300:	6c49803a 	cmpltu	r4,r13,r17
 800f304:	1109c83a 	sub	r4,r2,r4
 800f308:	2080202c 	andhi	r2,r4,128
 800f30c:	10003a26 	beq	r2,zero,800f3f8 <__subdf3+0x8fc>
 800f310:	7363c83a 	sub	r17,r14,r13
 800f314:	5b09c83a 	sub	r4,r11,r12
 800f318:	745d803a 	cmpltu	r14,r14,r17
 800f31c:	2389c83a 	sub	r4,r4,r14
 800f320:	3825883a 	mov	r18,r7
 800f324:	003e4806 	br	800ec48 <__subdf3+0x14c>
 800f328:	6362b03a 	or	r17,r12,r13
 800f32c:	8822c03a 	cmpne	r17,r17,zero
 800f330:	003f4506 	br	800f048 <__subdf3+0x54c>
 800f334:	6004977a 	slli	r2,r12,29
 800f338:	00c80034 	movhi	r3,8192
 800f33c:	18ffffc4 	addi	r3,r3,-1
 800f340:	20c6703a 	and	r3,r4,r3
 800f344:	10c4b03a 	or	r2,r2,r3
 800f348:	6026d0fa 	srli	r19,r12,3
 800f34c:	003ef706 	br	800ef2c <__subdf3+0x430>
 800f350:	40bff804 	addi	r2,r8,-32
 800f354:	40c00820 	cmpeqi	r3,r8,32
 800f358:	6084d83a 	srl	r2,r12,r2
 800f35c:	1800041e 	bne	r3,zero,800f370 <__subdf3+0x874>
 800f360:	04c01004 	movi	r19,64
 800f364:	9a11c83a 	sub	r8,r19,r8
 800f368:	6226983a 	sll	r19,r12,r8
 800f36c:	6cdab03a 	or	r13,r13,r19
 800f370:	6822c03a 	cmpne	r17,r13,zero
 800f374:	88a2b03a 	or	r17,r17,r2
 800f378:	003f4906 	br	800f0a0 <__subdf3+0x5a4>
 800f37c:	7363c83a 	sub	r17,r14,r13
 800f380:	5b09c83a 	sub	r4,r11,r12
 800f384:	745d803a 	cmpltu	r14,r14,r17
 800f388:	2389c83a 	sub	r4,r4,r14
 800f38c:	04000044 	movi	r16,1
 800f390:	003e0f06 	br	800ebd0 <__subdf3+0xd4>
 800f394:	00880034 	movhi	r2,8192
 800f398:	5806977a 	slli	r3,r11,29
 800f39c:	10bfffc4 	addi	r2,r2,-1
 800f3a0:	3084703a 	and	r2,r6,r2
 800f3a4:	10c4b03a 	or	r2,r2,r3
 800f3a8:	5826d0fa 	srli	r19,r11,3
 800f3ac:	003eb206 	br	800ee78 <__subdf3+0x37c>
 800f3b0:	6ba3883a 	add	r17,r13,r14
 800f3b4:	62c9883a 	add	r4,r12,r11
 800f3b8:	8b5b803a 	cmpltu	r13,r17,r13
 800f3bc:	2349883a 	add	r4,r4,r13
 800f3c0:	2080202c 	andhi	r2,r4,128
 800f3c4:	103ea326 	beq	r2,zero,800ee54 <__subdf3+0x358>
 800f3c8:	00bfe034 	movhi	r2,65408
 800f3cc:	10bfffc4 	addi	r2,r2,-1
 800f3d0:	2088703a 	and	r4,r4,r2
 800f3d4:	04000044 	movi	r16,1
 800f3d8:	003e9e06 	br	800ee54 <__subdf3+0x358>
 800f3dc:	00880034 	movhi	r2,8192
 800f3e0:	5806977a 	slli	r3,r11,29
 800f3e4:	10bfffc4 	addi	r2,r2,-1
 800f3e8:	3084703a 	and	r2,r6,r2
 800f3ec:	10c4b03a 	or	r2,r2,r3
 800f3f0:	5826d0fa 	srli	r19,r11,3
 800f3f4:	003e9e06 	br	800ee70 <__subdf3+0x374>
 800f3f8:	8904b03a 	or	r2,r17,r4
 800f3fc:	103eee26 	beq	r2,zero,800efb8 <__subdf3+0x4bc>
 800f400:	003e9406 	br	800ee54 <__subdf3+0x358>
 800f404:	40bff804 	addi	r2,r8,-32
 800f408:	40c00820 	cmpeqi	r3,r8,32
 800f40c:	6084d83a 	srl	r2,r12,r2
 800f410:	1800041e 	bne	r3,zero,800f424 <__subdf3+0x928>
 800f414:	04c01004 	movi	r19,64
 800f418:	9a11c83a 	sub	r8,r19,r8
 800f41c:	6226983a 	sll	r19,r12,r8
 800f420:	6cdab03a 	or	r13,r13,r19
 800f424:	6822c03a 	cmpne	r17,r13,zero
 800f428:	88a2b03a 	or	r17,r17,r2
 800f42c:	003f0606 	br	800f048 <__subdf3+0x54c>
 800f430:	04c00434 	movhi	r19,16
 800f434:	9cffffc4 	addi	r19,r19,-1
 800f438:	0025883a 	mov	r18,zero
 800f43c:	00bfffc4 	movi	r2,-1
 800f440:	003ebc06 	br	800ef34 <__subdf3+0x438>
 800f444:	6ba3883a 	add	r17,r13,r14
 800f448:	62c9883a 	add	r4,r12,r11
 800f44c:	8b9d803a 	cmpltu	r14,r17,r14
 800f450:	2389883a 	add	r4,r4,r14
 800f454:	003e7c06 	br	800ee48 <__subdf3+0x34c>
 800f458:	0005883a 	mov	r2,zero
 800f45c:	0201ffc4 	movi	r8,2047
 800f460:	0009883a 	mov	r4,zero
 800f464:	003e0f06 	br	800eca4 <__subdf3+0x1a8>

0800f468 <__unorddf2>:
 800f468:	2806d53a 	srli	r3,r5,20
 800f46c:	3810d53a 	srli	r8,r7,20
 800f470:	00800434 	movhi	r2,16
 800f474:	18c1ffcc 	andi	r3,r3,2047
 800f478:	10bfffc4 	addi	r2,r2,-1
 800f47c:	18c1ffd8 	cmpnei	r3,r3,2047
 800f480:	288a703a 	and	r5,r5,r2
 800f484:	388e703a 	and	r7,r7,r2
 800f488:	4201ffcc 	andi	r8,r8,2047
 800f48c:	18000426 	beq	r3,zero,800f4a0 <__unorddf2+0x38>
 800f490:	4201ffd8 	cmpnei	r8,r8,2047
 800f494:	40000626 	beq	r8,zero,800f4b0 <__unorddf2+0x48>
 800f498:	0005883a 	mov	r2,zero
 800f49c:	f800283a 	ret
 800f4a0:	214ab03a 	or	r5,r4,r5
 800f4a4:	283ffa26 	beq	r5,zero,800f490 <__unorddf2+0x28>
 800f4a8:	00800044 	movi	r2,1
 800f4ac:	f800283a 	ret
 800f4b0:	398eb03a 	or	r7,r7,r6
 800f4b4:	3804c03a 	cmpne	r2,r7,zero
 800f4b8:	f800283a 	ret

0800f4bc <__fixdfsi>:
 800f4bc:	280cd53a 	srli	r6,r5,20
 800f4c0:	00c00434 	movhi	r3,16
 800f4c4:	18ffffc4 	addi	r3,r3,-1
 800f4c8:	3181ffcc 	andi	r6,r6,2047
 800f4cc:	31c0ffd0 	cmplti	r7,r6,1023
 800f4d0:	28c6703a 	and	r3,r5,r3
 800f4d4:	280ad7fa 	srli	r5,r5,31
 800f4d8:	3800061e 	bne	r7,zero,800f4f4 <__fixdfsi+0x38>
 800f4dc:	30810790 	cmplti	r2,r6,1054
 800f4e0:	1000061e 	bne	r2,zero,800f4fc <__fixdfsi+0x40>
 800f4e4:	00a00034 	movhi	r2,32768
 800f4e8:	10bfffc4 	addi	r2,r2,-1
 800f4ec:	2885883a 	add	r2,r5,r2
 800f4f0:	f800283a 	ret
 800f4f4:	0005883a 	mov	r2,zero
 800f4f8:	f800283a 	ret
 800f4fc:	00810cc4 	movi	r2,1075
 800f500:	118fc83a 	sub	r7,r2,r6
 800f504:	38800808 	cmpgei	r2,r7,32
 800f508:	18c00434 	orhi	r3,r3,16
 800f50c:	1000071e 	bne	r2,zero,800f52c <__fixdfsi+0x70>
 800f510:	30befb44 	addi	r2,r6,-1043
 800f514:	1886983a 	sll	r3,r3,r2
 800f518:	21c4d83a 	srl	r2,r4,r7
 800f51c:	1884b03a 	or	r2,r3,r2
 800f520:	283ff526 	beq	r5,zero,800f4f8 <__fixdfsi+0x3c>
 800f524:	0085c83a 	sub	r2,zero,r2
 800f528:	f800283a 	ret
 800f52c:	008104c4 	movi	r2,1043
 800f530:	1185c83a 	sub	r2,r2,r6
 800f534:	1884d83a 	srl	r2,r3,r2
 800f538:	003ff906 	br	800f520 <__fixdfsi+0x64>

0800f53c <__floatsidf>:
 800f53c:	defffd04 	addi	sp,sp,-12
 800f540:	dfc00215 	stw	ra,8(sp)
 800f544:	dc400115 	stw	r17,4(sp)
 800f548:	dc000015 	stw	r16,0(sp)
 800f54c:	20001326 	beq	r4,zero,800f59c <__floatsidf+0x60>
 800f550:	2021883a 	mov	r16,r4
 800f554:	2022d7fa 	srli	r17,r4,31
 800f558:	20002116 	blt	r4,zero,800f5e0 <__floatsidf+0xa4>
 800f55c:	8009883a 	mov	r4,r16
 800f560:	800f6a00 	call	800f6a0 <__clzsi2>
 800f564:	01010784 	movi	r4,1054
 800f568:	2089c83a 	sub	r4,r4,r2
 800f56c:	10c002c8 	cmpgei	r3,r2,11
 800f570:	2101ffcc 	andi	r4,r4,2047
 800f574:	18001c1e 	bne	r3,zero,800f5e8 <__floatsidf+0xac>
 800f578:	018002c4 	movi	r6,11
 800f57c:	308dc83a 	sub	r6,r6,r2
 800f580:	818ad83a 	srl	r5,r16,r6
 800f584:	00c00434 	movhi	r3,16
 800f588:	10800544 	addi	r2,r2,21
 800f58c:	18ffffc4 	addi	r3,r3,-1
 800f590:	8084983a 	sll	r2,r16,r2
 800f594:	28ca703a 	and	r5,r5,r3
 800f598:	00000406 	br	800f5ac <__floatsidf+0x70>
 800f59c:	0023883a 	mov	r17,zero
 800f5a0:	0009883a 	mov	r4,zero
 800f5a4:	000b883a 	mov	r5,zero
 800f5a8:	0005883a 	mov	r2,zero
 800f5ac:	2008953a 	slli	r4,r4,20
 800f5b0:	8c403fcc 	andi	r17,r17,255
 800f5b4:	01800434 	movhi	r6,16
 800f5b8:	31bfffc4 	addi	r6,r6,-1
 800f5bc:	880697fa 	slli	r3,r17,31
 800f5c0:	298a703a 	and	r5,r5,r6
 800f5c4:	290ab03a 	or	r5,r5,r4
 800f5c8:	28c6b03a 	or	r3,r5,r3
 800f5cc:	dfc00217 	ldw	ra,8(sp)
 800f5d0:	dc400117 	ldw	r17,4(sp)
 800f5d4:	dc000017 	ldw	r16,0(sp)
 800f5d8:	dec00304 	addi	sp,sp,12
 800f5dc:	f800283a 	ret
 800f5e0:	0121c83a 	sub	r16,zero,r4
 800f5e4:	003fdd06 	br	800f55c <__floatsidf+0x20>
 800f5e8:	10bffd44 	addi	r2,r2,-11
 800f5ec:	808a983a 	sll	r5,r16,r2
 800f5f0:	00800434 	movhi	r2,16
 800f5f4:	10bfffc4 	addi	r2,r2,-1
 800f5f8:	288a703a 	and	r5,r5,r2
 800f5fc:	0005883a 	mov	r2,zero
 800f600:	003fea06 	br	800f5ac <__floatsidf+0x70>

0800f604 <__floatunsidf>:
 800f604:	defffe04 	addi	sp,sp,-8
 800f608:	dc000015 	stw	r16,0(sp)
 800f60c:	dfc00115 	stw	ra,4(sp)
 800f610:	2021883a 	mov	r16,r4
 800f614:	20000f26 	beq	r4,zero,800f654 <__floatunsidf+0x50>
 800f618:	800f6a00 	call	800f6a0 <__clzsi2>
 800f61c:	01010784 	movi	r4,1054
 800f620:	2089c83a 	sub	r4,r4,r2
 800f624:	10c002c8 	cmpgei	r3,r2,11
 800f628:	2101ffcc 	andi	r4,r4,2047
 800f62c:	1800151e 	bne	r3,zero,800f684 <__floatunsidf+0x80>
 800f630:	00c002c4 	movi	r3,11
 800f634:	1887c83a 	sub	r3,r3,r2
 800f638:	80c6d83a 	srl	r3,r16,r3
 800f63c:	01400434 	movhi	r5,16
 800f640:	10800544 	addi	r2,r2,21
 800f644:	297fffc4 	addi	r5,r5,-1
 800f648:	80a0983a 	sll	r16,r16,r2
 800f64c:	1944703a 	and	r2,r3,r5
 800f650:	00000206 	br	800f65c <__floatunsidf+0x58>
 800f654:	0009883a 	mov	r4,zero
 800f658:	0005883a 	mov	r2,zero
 800f65c:	2008953a 	slli	r4,r4,20
 800f660:	00c00434 	movhi	r3,16
 800f664:	18ffffc4 	addi	r3,r3,-1
 800f668:	10c6703a 	and	r3,r2,r3
 800f66c:	1906b03a 	or	r3,r3,r4
 800f670:	8005883a 	mov	r2,r16
 800f674:	dfc00117 	ldw	ra,4(sp)
 800f678:	dc000017 	ldw	r16,0(sp)
 800f67c:	dec00204 	addi	sp,sp,8
 800f680:	f800283a 	ret
 800f684:	10bffd44 	addi	r2,r2,-11
 800f688:	8084983a 	sll	r2,r16,r2
 800f68c:	00c00434 	movhi	r3,16
 800f690:	18ffffc4 	addi	r3,r3,-1
 800f694:	10c4703a 	and	r2,r2,r3
 800f698:	0021883a 	mov	r16,zero
 800f69c:	003fef06 	br	800f65c <__floatunsidf+0x58>

0800f6a0 <__clzsi2>:
 800f6a0:	00bfffd4 	movui	r2,65535
 800f6a4:	11000b36 	bltu	r2,r4,800f6d4 <__clzsi2+0x34>
 800f6a8:	20804030 	cmpltui	r2,r4,256
 800f6ac:	1000071e 	bne	r2,zero,800f6cc <__clzsi2+0x2c>
 800f6b0:	2008d23a 	srli	r4,r4,8
 800f6b4:	01400604 	movi	r5,24
 800f6b8:	00c20074 	movhi	r3,2049
 800f6bc:	20c7883a 	add	r3,r4,r3
 800f6c0:	1889f943 	ldbu	r2,10213(r3)
 800f6c4:	2885c83a 	sub	r2,r5,r2
 800f6c8:	f800283a 	ret
 800f6cc:	01400804 	movi	r5,32
 800f6d0:	003ff906 	br	800f6b8 <__clzsi2+0x18>
 800f6d4:	00804034 	movhi	r2,256
 800f6d8:	20800336 	bltu	r4,r2,800f6e8 <__clzsi2+0x48>
 800f6dc:	2008d63a 	srli	r4,r4,24
 800f6e0:	01400204 	movi	r5,8
 800f6e4:	003ff406 	br	800f6b8 <__clzsi2+0x18>
 800f6e8:	2008d43a 	srli	r4,r4,16
 800f6ec:	01400404 	movi	r5,16
 800f6f0:	003ff106 	br	800f6b8 <__clzsi2+0x18>

0800f6f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f6f4:	defffe04 	addi	sp,sp,-8
 800f6f8:	dfc00115 	stw	ra,4(sp)
 800f6fc:	df000015 	stw	fp,0(sp)
 800f700:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f704:	d0a00e17 	ldw	r2,-32712(gp)
 800f708:	10000326 	beq	r2,zero,800f718 <alt_get_errno+0x24>
 800f70c:	d0a00e17 	ldw	r2,-32712(gp)
 800f710:	103ee83a 	callr	r2
 800f714:	00000106 	br	800f71c <alt_get_errno+0x28>
 800f718:	d0a72304 	addi	r2,gp,-25460
}
 800f71c:	e037883a 	mov	sp,fp
 800f720:	dfc00117 	ldw	ra,4(sp)
 800f724:	df000017 	ldw	fp,0(sp)
 800f728:	dec00204 	addi	sp,sp,8
 800f72c:	f800283a 	ret

0800f730 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f730:	defffb04 	addi	sp,sp,-20
 800f734:	dfc00415 	stw	ra,16(sp)
 800f738:	df000315 	stw	fp,12(sp)
 800f73c:	df000304 	addi	fp,sp,12
 800f740:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f744:	e0bffd17 	ldw	r2,-12(fp)
 800f748:	10000916 	blt	r2,zero,800f770 <close+0x40>
 800f74c:	e0fffd17 	ldw	r3,-12(fp)
 800f750:	1805883a 	mov	r2,r3
 800f754:	1085883a 	add	r2,r2,r2
 800f758:	10c5883a 	add	r2,r2,r3
 800f75c:	100490ba 	slli	r2,r2,2
 800f760:	00c20074 	movhi	r3,2049
 800f764:	18ccc304 	addi	r3,r3,13068
 800f768:	10c5883a 	add	r2,r2,r3
 800f76c:	00000106 	br	800f774 <close+0x44>
 800f770:	0005883a 	mov	r2,zero
 800f774:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 800f778:	e0bfff17 	ldw	r2,-4(fp)
 800f77c:	10001926 	beq	r2,zero,800f7e4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f780:	e0bfff17 	ldw	r2,-4(fp)
 800f784:	10800017 	ldw	r2,0(r2)
 800f788:	10800417 	ldw	r2,16(r2)
 800f78c:	10000626 	beq	r2,zero,800f7a8 <close+0x78>
 800f790:	e0bfff17 	ldw	r2,-4(fp)
 800f794:	10800017 	ldw	r2,0(r2)
 800f798:	10800417 	ldw	r2,16(r2)
 800f79c:	e13fff17 	ldw	r4,-4(fp)
 800f7a0:	103ee83a 	callr	r2
 800f7a4:	00000106 	br	800f7ac <close+0x7c>
 800f7a8:	0005883a 	mov	r2,zero
 800f7ac:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f7b0:	e13ffd17 	ldw	r4,-12(fp)
 800f7b4:	800fe2c0 	call	800fe2c <alt_release_fd>
    if (rval < 0)
 800f7b8:	e0bffe17 	ldw	r2,-8(fp)
 800f7bc:	1000070e 	bge	r2,zero,800f7dc <close+0xac>
    {
      ALT_ERRNO = -rval;
 800f7c0:	800f6f40 	call	800f6f4 <alt_get_errno>
 800f7c4:	1007883a 	mov	r3,r2
 800f7c8:	e0bffe17 	ldw	r2,-8(fp)
 800f7cc:	0085c83a 	sub	r2,zero,r2
 800f7d0:	18800015 	stw	r2,0(r3)
      return -1;
 800f7d4:	00bfffc4 	movi	r2,-1
 800f7d8:	00000706 	br	800f7f8 <close+0xc8>
    }
    return 0;
 800f7dc:	0005883a 	mov	r2,zero
 800f7e0:	00000506 	br	800f7f8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f7e4:	800f6f40 	call	800f6f4 <alt_get_errno>
 800f7e8:	1007883a 	mov	r3,r2
 800f7ec:	00801444 	movi	r2,81
 800f7f0:	18800015 	stw	r2,0(r3)
    return -1;
 800f7f4:	00bfffc4 	movi	r2,-1
  }
}
 800f7f8:	e037883a 	mov	sp,fp
 800f7fc:	dfc00117 	ldw	ra,4(sp)
 800f800:	df000017 	ldw	fp,0(sp)
 800f804:	dec00204 	addi	sp,sp,8
 800f808:	f800283a 	ret

0800f80c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f80c:	defffc04 	addi	sp,sp,-16
 800f810:	df000315 	stw	fp,12(sp)
 800f814:	df000304 	addi	fp,sp,12
 800f818:	e13fff15 	stw	r4,-4(fp)
 800f81c:	e17ffe15 	stw	r5,-8(fp)
 800f820:	e1bffd15 	stw	r6,-12(fp)
  return len;
 800f824:	e0bffd17 	ldw	r2,-12(fp)
}
 800f828:	e037883a 	mov	sp,fp
 800f82c:	df000017 	ldw	fp,0(sp)
 800f830:	dec00104 	addi	sp,sp,4
 800f834:	f800283a 	ret

0800f838 <alt_get_errno>:
{
 800f838:	defffe04 	addi	sp,sp,-8
 800f83c:	dfc00115 	stw	ra,4(sp)
 800f840:	df000015 	stw	fp,0(sp)
 800f844:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f848:	d0a00e17 	ldw	r2,-32712(gp)
 800f84c:	10000326 	beq	r2,zero,800f85c <alt_get_errno+0x24>
 800f850:	d0a00e17 	ldw	r2,-32712(gp)
 800f854:	103ee83a 	callr	r2
 800f858:	00000106 	br	800f860 <alt_get_errno+0x28>
 800f85c:	d0a72304 	addi	r2,gp,-25460
}
 800f860:	e037883a 	mov	sp,fp
 800f864:	dfc00117 	ldw	ra,4(sp)
 800f868:	df000017 	ldw	fp,0(sp)
 800f86c:	dec00204 	addi	sp,sp,8
 800f870:	f800283a 	ret

0800f874 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800f874:	defffb04 	addi	sp,sp,-20
 800f878:	dfc00415 	stw	ra,16(sp)
 800f87c:	df000315 	stw	fp,12(sp)
 800f880:	df000304 	addi	fp,sp,12
 800f884:	e13ffe15 	stw	r4,-8(fp)
 800f888:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f88c:	e0bffe17 	ldw	r2,-8(fp)
 800f890:	10000916 	blt	r2,zero,800f8b8 <fstat+0x44>
 800f894:	e0fffe17 	ldw	r3,-8(fp)
 800f898:	1805883a 	mov	r2,r3
 800f89c:	1085883a 	add	r2,r2,r2
 800f8a0:	10c5883a 	add	r2,r2,r3
 800f8a4:	100490ba 	slli	r2,r2,2
 800f8a8:	00c20074 	movhi	r3,2049
 800f8ac:	18ccc304 	addi	r3,r3,13068
 800f8b0:	10c5883a 	add	r2,r2,r3
 800f8b4:	00000106 	br	800f8bc <fstat+0x48>
 800f8b8:	0005883a 	mov	r2,zero
 800f8bc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800f8c0:	e0bfff17 	ldw	r2,-4(fp)
 800f8c4:	10001026 	beq	r2,zero,800f908 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800f8c8:	e0bfff17 	ldw	r2,-4(fp)
 800f8cc:	10800017 	ldw	r2,0(r2)
 800f8d0:	10800817 	ldw	r2,32(r2)
 800f8d4:	10000726 	beq	r2,zero,800f8f4 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 800f8d8:	e0bfff17 	ldw	r2,-4(fp)
 800f8dc:	10800017 	ldw	r2,0(r2)
 800f8e0:	10800817 	ldw	r2,32(r2)
 800f8e4:	e17ffd17 	ldw	r5,-12(fp)
 800f8e8:	e13fff17 	ldw	r4,-4(fp)
 800f8ec:	103ee83a 	callr	r2
 800f8f0:	00000a06 	br	800f91c <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800f8f4:	e0bffd17 	ldw	r2,-12(fp)
 800f8f8:	00c80004 	movi	r3,8192
 800f8fc:	10c00115 	stw	r3,4(r2)
      return 0;
 800f900:	0005883a 	mov	r2,zero
 800f904:	00000506 	br	800f91c <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f908:	800f8380 	call	800f838 <alt_get_errno>
 800f90c:	1007883a 	mov	r3,r2
 800f910:	00801444 	movi	r2,81
 800f914:	18800015 	stw	r2,0(r3)
    return -1;
 800f918:	00bfffc4 	movi	r2,-1
  }
}
 800f91c:	e037883a 	mov	sp,fp
 800f920:	dfc00117 	ldw	ra,4(sp)
 800f924:	df000017 	ldw	fp,0(sp)
 800f928:	dec00204 	addi	sp,sp,8
 800f92c:	f800283a 	ret

0800f930 <alt_get_errno>:
{
 800f930:	defffe04 	addi	sp,sp,-8
 800f934:	dfc00115 	stw	ra,4(sp)
 800f938:	df000015 	stw	fp,0(sp)
 800f93c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f940:	d0a00e17 	ldw	r2,-32712(gp)
 800f944:	10000326 	beq	r2,zero,800f954 <alt_get_errno+0x24>
 800f948:	d0a00e17 	ldw	r2,-32712(gp)
 800f94c:	103ee83a 	callr	r2
 800f950:	00000106 	br	800f958 <alt_get_errno+0x28>
 800f954:	d0a72304 	addi	r2,gp,-25460
}
 800f958:	e037883a 	mov	sp,fp
 800f95c:	dfc00117 	ldw	ra,4(sp)
 800f960:	df000017 	ldw	fp,0(sp)
 800f964:	dec00204 	addi	sp,sp,8
 800f968:	f800283a 	ret

0800f96c <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800f96c:	deffea04 	addi	sp,sp,-88
 800f970:	dfc01515 	stw	ra,84(sp)
 800f974:	df001415 	stw	fp,80(sp)
 800f978:	df001404 	addi	fp,sp,80
 800f97c:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f980:	e0bfec17 	ldw	r2,-80(fp)
 800f984:	10000916 	blt	r2,zero,800f9ac <isatty+0x40>
 800f988:	e0ffec17 	ldw	r3,-80(fp)
 800f98c:	1805883a 	mov	r2,r3
 800f990:	1085883a 	add	r2,r2,r2
 800f994:	10c5883a 	add	r2,r2,r3
 800f998:	100490ba 	slli	r2,r2,2
 800f99c:	00c20074 	movhi	r3,2049
 800f9a0:	18ccc304 	addi	r3,r3,13068
 800f9a4:	10c5883a 	add	r2,r2,r3
 800f9a8:	00000106 	br	800f9b0 <isatty+0x44>
 800f9ac:	0005883a 	mov	r2,zero
 800f9b0:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800f9b4:	e0bfff17 	ldw	r2,-4(fp)
 800f9b8:	10000e26 	beq	r2,zero,800f9f4 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800f9bc:	e0bfff17 	ldw	r2,-4(fp)
 800f9c0:	10800017 	ldw	r2,0(r2)
 800f9c4:	10800817 	ldw	r2,32(r2)
 800f9c8:	1000021e 	bne	r2,zero,800f9d4 <isatty+0x68>
    {
      return 1;
 800f9cc:	00800044 	movi	r2,1
 800f9d0:	00000d06 	br	800fa08 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800f9d4:	e0bfed04 	addi	r2,fp,-76
 800f9d8:	100b883a 	mov	r5,r2
 800f9dc:	e13fec17 	ldw	r4,-80(fp)
 800f9e0:	800f8740 	call	800f874 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800f9e4:	e0bfee17 	ldw	r2,-72(fp)
 800f9e8:	10880020 	cmpeqi	r2,r2,8192
 800f9ec:	10803fcc 	andi	r2,r2,255
 800f9f0:	00000506 	br	800fa08 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f9f4:	800f9300 	call	800f930 <alt_get_errno>
 800f9f8:	1007883a 	mov	r3,r2
 800f9fc:	00801444 	movi	r2,81
 800fa00:	18800015 	stw	r2,0(r3)
    return 0;
 800fa04:	0005883a 	mov	r2,zero
  }
}
 800fa08:	e037883a 	mov	sp,fp
 800fa0c:	dfc00117 	ldw	ra,4(sp)
 800fa10:	df000017 	ldw	fp,0(sp)
 800fa14:	dec00204 	addi	sp,sp,8
 800fa18:	f800283a 	ret

0800fa1c <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800fa1c:	defffc04 	addi	sp,sp,-16
 800fa20:	df000315 	stw	fp,12(sp)
 800fa24:	df000304 	addi	fp,sp,12
 800fa28:	e13fff15 	stw	r4,-4(fp)
 800fa2c:	e17ffe15 	stw	r5,-8(fp)
 800fa30:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 800fa34:	e0fffe17 	ldw	r3,-8(fp)
 800fa38:	e0bfff17 	ldw	r2,-4(fp)
 800fa3c:	18800c26 	beq	r3,r2,800fa70 <alt_load_section+0x54>
  {
    while( to != end )
 800fa40:	00000806 	br	800fa64 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800fa44:	e0ffff17 	ldw	r3,-4(fp)
 800fa48:	18800104 	addi	r2,r3,4
 800fa4c:	e0bfff15 	stw	r2,-4(fp)
 800fa50:	e0bffe17 	ldw	r2,-8(fp)
 800fa54:	11000104 	addi	r4,r2,4
 800fa58:	e13ffe15 	stw	r4,-8(fp)
 800fa5c:	18c00017 	ldw	r3,0(r3)
 800fa60:	10c00015 	stw	r3,0(r2)
    while( to != end )
 800fa64:	e0fffe17 	ldw	r3,-8(fp)
 800fa68:	e0bffd17 	ldw	r2,-12(fp)
 800fa6c:	18bff51e 	bne	r3,r2,800fa44 <alt_load_section+0x28>
    }
  }
}
 800fa70:	0001883a 	nop
 800fa74:	e037883a 	mov	sp,fp
 800fa78:	df000017 	ldw	fp,0(sp)
 800fa7c:	dec00104 	addi	sp,sp,4
 800fa80:	f800283a 	ret

0800fa84 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800fa84:	defffe04 	addi	sp,sp,-8
 800fa88:	dfc00115 	stw	ra,4(sp)
 800fa8c:	df000015 	stw	fp,0(sp)
 800fa90:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800fa94:	01820074 	movhi	r6,2049
 800fa98:	31914e04 	addi	r6,r6,17720
 800fa9c:	01420074 	movhi	r5,2049
 800faa0:	294a4704 	addi	r5,r5,10524
 800faa4:	01020074 	movhi	r4,2049
 800faa8:	21114e04 	addi	r4,r4,17720
 800faac:	800fa1c0 	call	800fa1c <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800fab0:	01820034 	movhi	r6,2048
 800fab4:	31808904 	addi	r6,r6,548
 800fab8:	01420034 	movhi	r5,2048
 800fabc:	29400804 	addi	r5,r5,32
 800fac0:	01020034 	movhi	r4,2048
 800fac4:	21000804 	addi	r4,r4,32
 800fac8:	800fa1c0 	call	800fa1c <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800facc:	01820074 	movhi	r6,2049
 800fad0:	318a4704 	addi	r6,r6,10524
 800fad4:	01420074 	movhi	r5,2049
 800fad8:	29484004 	addi	r5,r5,8448
 800fadc:	01020074 	movhi	r4,2049
 800fae0:	21084004 	addi	r4,r4,8448
 800fae4:	800fa1c0 	call	800fa1c <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800fae8:	80113080 	call	8011308 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800faec:	80114c80 	call	80114c8 <alt_icache_flush_all>
}
 800faf0:	0001883a 	nop
 800faf4:	e037883a 	mov	sp,fp
 800faf8:	dfc00117 	ldw	ra,4(sp)
 800fafc:	df000017 	ldw	fp,0(sp)
 800fb00:	dec00204 	addi	sp,sp,8
 800fb04:	f800283a 	ret

0800fb08 <alt_get_errno>:
{
 800fb08:	defffe04 	addi	sp,sp,-8
 800fb0c:	dfc00115 	stw	ra,4(sp)
 800fb10:	df000015 	stw	fp,0(sp)
 800fb14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fb18:	d0a00e17 	ldw	r2,-32712(gp)
 800fb1c:	10000326 	beq	r2,zero,800fb2c <alt_get_errno+0x24>
 800fb20:	d0a00e17 	ldw	r2,-32712(gp)
 800fb24:	103ee83a 	callr	r2
 800fb28:	00000106 	br	800fb30 <alt_get_errno+0x28>
 800fb2c:	d0a72304 	addi	r2,gp,-25460
}
 800fb30:	e037883a 	mov	sp,fp
 800fb34:	dfc00117 	ldw	ra,4(sp)
 800fb38:	df000017 	ldw	fp,0(sp)
 800fb3c:	dec00204 	addi	sp,sp,8
 800fb40:	f800283a 	ret

0800fb44 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800fb44:	defff904 	addi	sp,sp,-28
 800fb48:	dfc00615 	stw	ra,24(sp)
 800fb4c:	df000515 	stw	fp,20(sp)
 800fb50:	df000504 	addi	fp,sp,20
 800fb54:	e13ffd15 	stw	r4,-12(fp)
 800fb58:	e17ffc15 	stw	r5,-16(fp)
 800fb5c:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800fb60:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fb64:	e0bffd17 	ldw	r2,-12(fp)
 800fb68:	10000916 	blt	r2,zero,800fb90 <lseek+0x4c>
 800fb6c:	e0fffd17 	ldw	r3,-12(fp)
 800fb70:	1805883a 	mov	r2,r3
 800fb74:	1085883a 	add	r2,r2,r2
 800fb78:	10c5883a 	add	r2,r2,r3
 800fb7c:	100490ba 	slli	r2,r2,2
 800fb80:	00c20074 	movhi	r3,2049
 800fb84:	18ccc304 	addi	r3,r3,13068
 800fb88:	10c5883a 	add	r2,r2,r3
 800fb8c:	00000106 	br	800fb94 <lseek+0x50>
 800fb90:	0005883a 	mov	r2,zero
 800fb94:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 800fb98:	e0bffe17 	ldw	r2,-8(fp)
 800fb9c:	10001026 	beq	r2,zero,800fbe0 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800fba0:	e0bffe17 	ldw	r2,-8(fp)
 800fba4:	10800017 	ldw	r2,0(r2)
 800fba8:	10800717 	ldw	r2,28(r2)
 800fbac:	10000926 	beq	r2,zero,800fbd4 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800fbb0:	e0bffe17 	ldw	r2,-8(fp)
 800fbb4:	10800017 	ldw	r2,0(r2)
 800fbb8:	10800717 	ldw	r2,28(r2)
 800fbbc:	e1bffb17 	ldw	r6,-20(fp)
 800fbc0:	e17ffc17 	ldw	r5,-16(fp)
 800fbc4:	e13ffe17 	ldw	r4,-8(fp)
 800fbc8:	103ee83a 	callr	r2
 800fbcc:	e0bfff15 	stw	r2,-4(fp)
 800fbd0:	00000506 	br	800fbe8 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800fbd4:	00bfde84 	movi	r2,-134
 800fbd8:	e0bfff15 	stw	r2,-4(fp)
 800fbdc:	00000206 	br	800fbe8 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 800fbe0:	00bfebc4 	movi	r2,-81
 800fbe4:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 800fbe8:	e0bfff17 	ldw	r2,-4(fp)
 800fbec:	1000070e 	bge	r2,zero,800fc0c <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 800fbf0:	800fb080 	call	800fb08 <alt_get_errno>
 800fbf4:	1007883a 	mov	r3,r2
 800fbf8:	e0bfff17 	ldw	r2,-4(fp)
 800fbfc:	0085c83a 	sub	r2,zero,r2
 800fc00:	18800015 	stw	r2,0(r3)
    rc = -1;
 800fc04:	00bfffc4 	movi	r2,-1
 800fc08:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 800fc0c:	e0bfff17 	ldw	r2,-4(fp)
}
 800fc10:	e037883a 	mov	sp,fp
 800fc14:	dfc00117 	ldw	ra,4(sp)
 800fc18:	df000017 	ldw	fp,0(sp)
 800fc1c:	dec00204 	addi	sp,sp,8
 800fc20:	f800283a 	ret

0800fc24 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800fc24:	defffd04 	addi	sp,sp,-12
 800fc28:	dfc00215 	stw	ra,8(sp)
 800fc2c:	df000115 	stw	fp,4(sp)
 800fc30:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800fc34:	0009883a 	mov	r4,zero
 800fc38:	80102940 	call	8010294 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800fc3c:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800fc40:	80102cc0 	call	80102cc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800fc44:	01820074 	movhi	r6,2049
 800fc48:	318a3d04 	addi	r6,r6,10484
 800fc4c:	01420074 	movhi	r5,2049
 800fc50:	294a3d04 	addi	r5,r5,10484
 800fc54:	01020074 	movhi	r4,2049
 800fc58:	210a3d04 	addi	r4,r4,10484
 800fc5c:	80118500 	call	8011850 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800fc60:	80114080 	call	8011408 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800fc64:	01020074 	movhi	r4,2049
 800fc68:	21051a04 	addi	r4,r4,5224
 800fc6c:	8011e500 	call	8011e50 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800fc70:	d0a72517 	ldw	r2,-25452(gp)
 800fc74:	d0e72617 	ldw	r3,-25448(gp)
 800fc78:	d1272717 	ldw	r4,-25444(gp)
 800fc7c:	200d883a 	mov	r6,r4
 800fc80:	180b883a 	mov	r5,r3
 800fc84:	1009883a 	mov	r4,r2
 800fc88:	80007340 	call	8000734 <main>
 800fc8c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800fc90:	01000044 	movi	r4,1
 800fc94:	800f7300 	call	800f730 <close>
  exit (result);
 800fc98:	e13fff17 	ldw	r4,-4(fp)
 800fc9c:	8011e640 	call	8011e64 <exit>

0800fca0 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800fca0:	defffe04 	addi	sp,sp,-8
 800fca4:	df000115 	stw	fp,4(sp)
 800fca8:	df000104 	addi	fp,sp,4
 800fcac:	e13fff15 	stw	r4,-4(fp)
}
 800fcb0:	0001883a 	nop
 800fcb4:	e037883a 	mov	sp,fp
 800fcb8:	df000017 	ldw	fp,0(sp)
 800fcbc:	dec00104 	addi	sp,sp,4
 800fcc0:	f800283a 	ret

0800fcc4 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800fcc4:	defffe04 	addi	sp,sp,-8
 800fcc8:	df000115 	stw	fp,4(sp)
 800fccc:	df000104 	addi	fp,sp,4
 800fcd0:	e13fff15 	stw	r4,-4(fp)
}
 800fcd4:	0001883a 	nop
 800fcd8:	e037883a 	mov	sp,fp
 800fcdc:	df000017 	ldw	fp,0(sp)
 800fce0:	dec00104 	addi	sp,sp,4
 800fce4:	f800283a 	ret

0800fce8 <alt_get_errno>:
{
 800fce8:	defffe04 	addi	sp,sp,-8
 800fcec:	dfc00115 	stw	ra,4(sp)
 800fcf0:	df000015 	stw	fp,0(sp)
 800fcf4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fcf8:	d0a00e17 	ldw	r2,-32712(gp)
 800fcfc:	10000326 	beq	r2,zero,800fd0c <alt_get_errno+0x24>
 800fd00:	d0a00e17 	ldw	r2,-32712(gp)
 800fd04:	103ee83a 	callr	r2
 800fd08:	00000106 	br	800fd10 <alt_get_errno+0x28>
 800fd0c:	d0a72304 	addi	r2,gp,-25460
}
 800fd10:	e037883a 	mov	sp,fp
 800fd14:	dfc00117 	ldw	ra,4(sp)
 800fd18:	df000017 	ldw	fp,0(sp)
 800fd1c:	dec00204 	addi	sp,sp,8
 800fd20:	f800283a 	ret

0800fd24 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800fd24:	defff904 	addi	sp,sp,-28
 800fd28:	dfc00615 	stw	ra,24(sp)
 800fd2c:	df000515 	stw	fp,20(sp)
 800fd30:	df000504 	addi	fp,sp,20
 800fd34:	e13ffd15 	stw	r4,-12(fp)
 800fd38:	e17ffc15 	stw	r5,-16(fp)
 800fd3c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fd40:	e0bffd17 	ldw	r2,-12(fp)
 800fd44:	10000916 	blt	r2,zero,800fd6c <read+0x48>
 800fd48:	e0fffd17 	ldw	r3,-12(fp)
 800fd4c:	1805883a 	mov	r2,r3
 800fd50:	1085883a 	add	r2,r2,r2
 800fd54:	10c5883a 	add	r2,r2,r3
 800fd58:	100490ba 	slli	r2,r2,2
 800fd5c:	00c20074 	movhi	r3,2049
 800fd60:	18ccc304 	addi	r3,r3,13068
 800fd64:	10c5883a 	add	r2,r2,r3
 800fd68:	00000106 	br	800fd70 <read+0x4c>
 800fd6c:	0005883a 	mov	r2,zero
 800fd70:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800fd74:	e0bfff17 	ldw	r2,-4(fp)
 800fd78:	10002226 	beq	r2,zero,800fe04 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fd7c:	e0bfff17 	ldw	r2,-4(fp)
 800fd80:	10800217 	ldw	r2,8(r2)
 800fd84:	108000cc 	andi	r2,r2,3
 800fd88:	10800060 	cmpeqi	r2,r2,1
 800fd8c:	1000181e 	bne	r2,zero,800fdf0 <read+0xcc>
        (fd->dev->read))
 800fd90:	e0bfff17 	ldw	r2,-4(fp)
 800fd94:	10800017 	ldw	r2,0(r2)
 800fd98:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fd9c:	10001426 	beq	r2,zero,800fdf0 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800fda0:	e0bfff17 	ldw	r2,-4(fp)
 800fda4:	10800017 	ldw	r2,0(r2)
 800fda8:	10800517 	ldw	r2,20(r2)
 800fdac:	e0fffb17 	ldw	r3,-20(fp)
 800fdb0:	180d883a 	mov	r6,r3
 800fdb4:	e17ffc17 	ldw	r5,-16(fp)
 800fdb8:	e13fff17 	ldw	r4,-4(fp)
 800fdbc:	103ee83a 	callr	r2
 800fdc0:	e0bffe15 	stw	r2,-8(fp)
 800fdc4:	e0bffe17 	ldw	r2,-8(fp)
 800fdc8:	1000070e 	bge	r2,zero,800fde8 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 800fdcc:	800fce80 	call	800fce8 <alt_get_errno>
 800fdd0:	1007883a 	mov	r3,r2
 800fdd4:	e0bffe17 	ldw	r2,-8(fp)
 800fdd8:	0085c83a 	sub	r2,zero,r2
 800fddc:	18800015 	stw	r2,0(r3)
          return -1;
 800fde0:	00bfffc4 	movi	r2,-1
 800fde4:	00000c06 	br	800fe18 <read+0xf4>
        }
        return rval;
 800fde8:	e0bffe17 	ldw	r2,-8(fp)
 800fdec:	00000a06 	br	800fe18 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800fdf0:	800fce80 	call	800fce8 <alt_get_errno>
 800fdf4:	1007883a 	mov	r3,r2
 800fdf8:	00800344 	movi	r2,13
 800fdfc:	18800015 	stw	r2,0(r3)
 800fe00:	00000406 	br	800fe14 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800fe04:	800fce80 	call	800fce8 <alt_get_errno>
 800fe08:	1007883a 	mov	r3,r2
 800fe0c:	00801444 	movi	r2,81
 800fe10:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fe14:	00bfffc4 	movi	r2,-1
}
 800fe18:	e037883a 	mov	sp,fp
 800fe1c:	dfc00117 	ldw	ra,4(sp)
 800fe20:	df000017 	ldw	fp,0(sp)
 800fe24:	dec00204 	addi	sp,sp,8
 800fe28:	f800283a 	ret

0800fe2c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800fe2c:	defffe04 	addi	sp,sp,-8
 800fe30:	df000115 	stw	fp,4(sp)
 800fe34:	df000104 	addi	fp,sp,4
 800fe38:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800fe3c:	e0bfff17 	ldw	r2,-4(fp)
 800fe40:	108000d0 	cmplti	r2,r2,3
 800fe44:	1000101e 	bne	r2,zero,800fe88 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 800fe48:	e0ffff17 	ldw	r3,-4(fp)
 800fe4c:	1805883a 	mov	r2,r3
 800fe50:	1085883a 	add	r2,r2,r2
 800fe54:	10c5883a 	add	r2,r2,r3
 800fe58:	100490ba 	slli	r2,r2,2
 800fe5c:	00c20074 	movhi	r3,2049
 800fe60:	10c7883a 	add	r3,r2,r3
 800fe64:	180cc515 	stw	zero,13076(r3)
    alt_fd_list[fd].dev      = 0;
 800fe68:	e0ffff17 	ldw	r3,-4(fp)
 800fe6c:	1805883a 	mov	r2,r3
 800fe70:	1085883a 	add	r2,r2,r2
 800fe74:	10c5883a 	add	r2,r2,r3
 800fe78:	100490ba 	slli	r2,r2,2
 800fe7c:	00c20074 	movhi	r3,2049
 800fe80:	10c7883a 	add	r3,r2,r3
 800fe84:	180cc315 	stw	zero,13068(r3)
  }
}
 800fe88:	0001883a 	nop
 800fe8c:	e037883a 	mov	sp,fp
 800fe90:	df000017 	ldw	fp,0(sp)
 800fe94:	dec00104 	addi	sp,sp,4
 800fe98:	f800283a 	ret

0800fe9c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800fe9c:	defff904 	addi	sp,sp,-28
 800fea0:	df000615 	stw	fp,24(sp)
 800fea4:	df000604 	addi	fp,sp,24
 800fea8:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 800feac:	0005303a 	rdctl	r2,status
 800feb0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800feb4:	e0fffd17 	ldw	r3,-12(fp)
 800feb8:	00bfff84 	movi	r2,-2
 800febc:	1884703a 	and	r2,r3,r2
 800fec0:	1001703a 	wrctl	status,r2
  return context;
 800fec4:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800fec8:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800fecc:	d0a00f17 	ldw	r2,-32708(gp)
 800fed0:	10c000c4 	addi	r3,r2,3
 800fed4:	00bfff04 	movi	r2,-4
 800fed8:	1884703a 	and	r2,r3,r2
 800fedc:	d0a00f15 	stw	r2,-32708(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800fee0:	d0e00f17 	ldw	r3,-32708(gp)
 800fee4:	e0bffa17 	ldw	r2,-24(fp)
 800fee8:	1887883a 	add	r3,r3,r2
 800feec:	00830034 	movhi	r2,3072
 800fef0:	10800004 	addi	r2,r2,0
 800fef4:	10c0062e 	bgeu	r2,r3,800ff10 <sbrk+0x74>
 800fef8:	e0bfff17 	ldw	r2,-4(fp)
 800fefc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800ff00:	e0bffc17 	ldw	r2,-16(fp)
 800ff04:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800ff08:	00bfffc4 	movi	r2,-1
 800ff0c:	00000b06 	br	800ff3c <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800ff10:	d0a00f17 	ldw	r2,-32708(gp)
 800ff14:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 800ff18:	d0e00f17 	ldw	r3,-32708(gp)
 800ff1c:	e0bffa17 	ldw	r2,-24(fp)
 800ff20:	1885883a 	add	r2,r3,r2
 800ff24:	d0a00f15 	stw	r2,-32708(gp)
 800ff28:	e0bfff17 	ldw	r2,-4(fp)
 800ff2c:	e0bffb15 	stw	r2,-20(fp)
 800ff30:	e0bffb17 	ldw	r2,-20(fp)
 800ff34:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800ff38:	e0bffe17 	ldw	r2,-8(fp)
} 
 800ff3c:	e037883a 	mov	sp,fp
 800ff40:	df000017 	ldw	fp,0(sp)
 800ff44:	dec00104 	addi	sp,sp,4
 800ff48:	f800283a 	ret

0800ff4c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800ff4c:	defffa04 	addi	sp,sp,-24
 800ff50:	df000515 	stw	fp,20(sp)
 800ff54:	df000504 	addi	fp,sp,20
 800ff58:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 800ff5c:	0005303a 	rdctl	r2,status
 800ff60:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ff64:	e0fffc17 	ldw	r3,-16(fp)
 800ff68:	00bfff84 	movi	r2,-2
 800ff6c:	1884703a 	and	r2,r3,r2
 800ff70:	1001703a 	wrctl	status,r2
  return context;
 800ff74:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800ff78:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 800ff7c:	e0bffb17 	ldw	r2,-20(fp)
 800ff80:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800ff84:	e0bffd17 	ldw	r2,-12(fp)
 800ff88:	10800017 	ldw	r2,0(r2)
 800ff8c:	e0fffd17 	ldw	r3,-12(fp)
 800ff90:	18c00117 	ldw	r3,4(r3)
 800ff94:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800ff98:	e0bffd17 	ldw	r2,-12(fp)
 800ff9c:	10800117 	ldw	r2,4(r2)
 800ffa0:	e0fffd17 	ldw	r3,-12(fp)
 800ffa4:	18c00017 	ldw	r3,0(r3)
 800ffa8:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800ffac:	e0bffd17 	ldw	r2,-12(fp)
 800ffb0:	e0fffd17 	ldw	r3,-12(fp)
 800ffb4:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800ffb8:	e0bffd17 	ldw	r2,-12(fp)
 800ffbc:	e0fffd17 	ldw	r3,-12(fp)
 800ffc0:	10c00015 	stw	r3,0(r2)
 800ffc4:	e0bfff17 	ldw	r2,-4(fp)
 800ffc8:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 800ffcc:	e0bffe17 	ldw	r2,-8(fp)
 800ffd0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800ffd4:	0001883a 	nop
 800ffd8:	e037883a 	mov	sp,fp
 800ffdc:	df000017 	ldw	fp,0(sp)
 800ffe0:	dec00104 	addi	sp,sp,4
 800ffe4:	f800283a 	ret

0800ffe8 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800ffe8:	defffb04 	addi	sp,sp,-20
 800ffec:	dfc00415 	stw	ra,16(sp)
 800fff0:	df000315 	stw	fp,12(sp)
 800fff4:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800fff8:	d0a01017 	ldw	r2,-32704(gp)
 800fffc:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 8010000:	d0a72917 	ldw	r2,-25436(gp)
 8010004:	10800044 	addi	r2,r2,1
 8010008:	d0a72915 	stw	r2,-25436(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801000c:	00002e06 	br	80100c8 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 8010010:	e0bfff17 	ldw	r2,-4(fp)
 8010014:	10800017 	ldw	r2,0(r2)
 8010018:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801001c:	e0bfff17 	ldw	r2,-4(fp)
 8010020:	10800403 	ldbu	r2,16(r2)
 8010024:	10803fcc 	andi	r2,r2,255
 8010028:	10000426 	beq	r2,zero,801003c <alt_tick+0x54>
 801002c:	d0a72917 	ldw	r2,-25436(gp)
 8010030:	1000021e 	bne	r2,zero,801003c <alt_tick+0x54>
    {
      alarm->rollover = 0;
 8010034:	e0bfff17 	ldw	r2,-4(fp)
 8010038:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801003c:	e0bfff17 	ldw	r2,-4(fp)
 8010040:	10800217 	ldw	r2,8(r2)
 8010044:	d0e72917 	ldw	r3,-25436(gp)
 8010048:	18801d36 	bltu	r3,r2,80100c0 <alt_tick+0xd8>
 801004c:	e0bfff17 	ldw	r2,-4(fp)
 8010050:	10800403 	ldbu	r2,16(r2)
 8010054:	10803fcc 	andi	r2,r2,255
 8010058:	1000191e 	bne	r2,zero,80100c0 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801005c:	e0bfff17 	ldw	r2,-4(fp)
 8010060:	10800317 	ldw	r2,12(r2)
 8010064:	e0ffff17 	ldw	r3,-4(fp)
 8010068:	18c00517 	ldw	r3,20(r3)
 801006c:	1809883a 	mov	r4,r3
 8010070:	103ee83a 	callr	r2
 8010074:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 8010078:	e0bffd17 	ldw	r2,-12(fp)
 801007c:	1000031e 	bne	r2,zero,801008c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 8010080:	e13fff17 	ldw	r4,-4(fp)
 8010084:	800ff4c0 	call	800ff4c <alt_alarm_stop>
 8010088:	00000d06 	br	80100c0 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801008c:	e0bfff17 	ldw	r2,-4(fp)
 8010090:	10c00217 	ldw	r3,8(r2)
 8010094:	e0bffd17 	ldw	r2,-12(fp)
 8010098:	1887883a 	add	r3,r3,r2
 801009c:	e0bfff17 	ldw	r2,-4(fp)
 80100a0:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 80100a4:	e0bfff17 	ldw	r2,-4(fp)
 80100a8:	10c00217 	ldw	r3,8(r2)
 80100ac:	d0a72917 	ldw	r2,-25436(gp)
 80100b0:	1880032e 	bgeu	r3,r2,80100c0 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 80100b4:	e0bfff17 	ldw	r2,-4(fp)
 80100b8:	00c00044 	movi	r3,1
 80100bc:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 80100c0:	e0bffe17 	ldw	r2,-8(fp)
 80100c4:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 80100c8:	e0ffff17 	ldw	r3,-4(fp)
 80100cc:	d0a01004 	addi	r2,gp,-32704
 80100d0:	18bfcf1e 	bne	r3,r2,8010010 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 80100d4:	0001883a 	nop
}
 80100d8:	0001883a 	nop
 80100dc:	e037883a 	mov	sp,fp
 80100e0:	dfc00117 	ldw	ra,4(sp)
 80100e4:	df000017 	ldw	fp,0(sp)
 80100e8:	dec00204 	addi	sp,sp,8
 80100ec:	f800283a 	ret

080100f0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 80100f0:	defffd04 	addi	sp,sp,-12
 80100f4:	dfc00215 	stw	ra,8(sp)
 80100f8:	df000115 	stw	fp,4(sp)
 80100fc:	df000104 	addi	fp,sp,4
 8010100:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 8010104:	e13fff17 	ldw	r4,-4(fp)
 8010108:	80111b00 	call	80111b0 <alt_busy_sleep>
}
 801010c:	e037883a 	mov	sp,fp
 8010110:	dfc00117 	ldw	ra,4(sp)
 8010114:	df000017 	ldw	fp,0(sp)
 8010118:	dec00204 	addi	sp,sp,8
 801011c:	f800283a 	ret

08010120 <alt_get_errno>:
{
 8010120:	defffe04 	addi	sp,sp,-8
 8010124:	dfc00115 	stw	ra,4(sp)
 8010128:	df000015 	stw	fp,0(sp)
 801012c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010130:	d0a00e17 	ldw	r2,-32712(gp)
 8010134:	10000326 	beq	r2,zero,8010144 <alt_get_errno+0x24>
 8010138:	d0a00e17 	ldw	r2,-32712(gp)
 801013c:	103ee83a 	callr	r2
 8010140:	00000106 	br	8010148 <alt_get_errno+0x28>
 8010144:	d0a72304 	addi	r2,gp,-25460
}
 8010148:	e037883a 	mov	sp,fp
 801014c:	dfc00117 	ldw	ra,4(sp)
 8010150:	df000017 	ldw	fp,0(sp)
 8010154:	dec00204 	addi	sp,sp,8
 8010158:	f800283a 	ret

0801015c <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 801015c:	defff904 	addi	sp,sp,-28
 8010160:	dfc00615 	stw	ra,24(sp)
 8010164:	df000515 	stw	fp,20(sp)
 8010168:	df000504 	addi	fp,sp,20
 801016c:	e13ffd15 	stw	r4,-12(fp)
 8010170:	e17ffc15 	stw	r5,-16(fp)
 8010174:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 8010178:	e0bffd17 	ldw	r2,-12(fp)
 801017c:	10000916 	blt	r2,zero,80101a4 <write+0x48>
 8010180:	e0fffd17 	ldw	r3,-12(fp)
 8010184:	1805883a 	mov	r2,r3
 8010188:	1085883a 	add	r2,r2,r2
 801018c:	10c5883a 	add	r2,r2,r3
 8010190:	100490ba 	slli	r2,r2,2
 8010194:	00c20074 	movhi	r3,2049
 8010198:	18ccc304 	addi	r3,r3,13068
 801019c:	10c5883a 	add	r2,r2,r3
 80101a0:	00000106 	br	80101a8 <write+0x4c>
 80101a4:	0005883a 	mov	r2,zero
 80101a8:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 80101ac:	e0bfff17 	ldw	r2,-4(fp)
 80101b0:	10002126 	beq	r2,zero,8010238 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 80101b4:	e0bfff17 	ldw	r2,-4(fp)
 80101b8:	10800217 	ldw	r2,8(r2)
 80101bc:	108000cc 	andi	r2,r2,3
 80101c0:	10001826 	beq	r2,zero,8010224 <write+0xc8>
 80101c4:	e0bfff17 	ldw	r2,-4(fp)
 80101c8:	10800017 	ldw	r2,0(r2)
 80101cc:	10800617 	ldw	r2,24(r2)
 80101d0:	10001426 	beq	r2,zero,8010224 <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 80101d4:	e0bfff17 	ldw	r2,-4(fp)
 80101d8:	10800017 	ldw	r2,0(r2)
 80101dc:	10800617 	ldw	r2,24(r2)
 80101e0:	e0fffb17 	ldw	r3,-20(fp)
 80101e4:	180d883a 	mov	r6,r3
 80101e8:	e17ffc17 	ldw	r5,-16(fp)
 80101ec:	e13fff17 	ldw	r4,-4(fp)
 80101f0:	103ee83a 	callr	r2
 80101f4:	e0bffe15 	stw	r2,-8(fp)
 80101f8:	e0bffe17 	ldw	r2,-8(fp)
 80101fc:	1000070e 	bge	r2,zero,801021c <write+0xc0>
      {
        ALT_ERRNO = -rval;
 8010200:	80101200 	call	8010120 <alt_get_errno>
 8010204:	1007883a 	mov	r3,r2
 8010208:	e0bffe17 	ldw	r2,-8(fp)
 801020c:	0085c83a 	sub	r2,zero,r2
 8010210:	18800015 	stw	r2,0(r3)
        return -1;
 8010214:	00bfffc4 	movi	r2,-1
 8010218:	00000c06 	br	801024c <write+0xf0>
      }
      return rval;
 801021c:	e0bffe17 	ldw	r2,-8(fp)
 8010220:	00000a06 	br	801024c <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 8010224:	80101200 	call	8010120 <alt_get_errno>
 8010228:	1007883a 	mov	r3,r2
 801022c:	00800344 	movi	r2,13
 8010230:	18800015 	stw	r2,0(r3)
 8010234:	00000406 	br	8010248 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 8010238:	80101200 	call	8010120 <alt_get_errno>
 801023c:	1007883a 	mov	r3,r2
 8010240:	00801444 	movi	r2,81
 8010244:	18800015 	stw	r2,0(r3)
  }
  return -1;
 8010248:	00bfffc4 	movi	r2,-1
}
 801024c:	e037883a 	mov	sp,fp
 8010250:	dfc00117 	ldw	ra,4(sp)
 8010254:	df000017 	ldw	fp,0(sp)
 8010258:	dec00204 	addi	sp,sp,8
 801025c:	f800283a 	ret

08010260 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 8010260:	defffd04 	addi	sp,sp,-12
 8010264:	dfc00215 	stw	ra,8(sp)
 8010268:	df000115 	stw	fp,4(sp)
 801026c:	df000104 	addi	fp,sp,4
 8010270:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 8010274:	d1600b04 	addi	r5,gp,-32724
 8010278:	e13fff17 	ldw	r4,-4(fp)
 801027c:	80113640 	call	8011364 <alt_dev_llist_insert>
}
 8010280:	e037883a 	mov	sp,fp
 8010284:	dfc00117 	ldw	ra,4(sp)
 8010288:	df000017 	ldw	fp,0(sp)
 801028c:	dec00204 	addi	sp,sp,8
 8010290:	f800283a 	ret

08010294 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 8010294:	defffd04 	addi	sp,sp,-12
 8010298:	dfc00215 	stw	ra,8(sp)
 801029c:	df000115 	stw	fp,4(sp)
 80102a0:	df000104 	addi	fp,sp,4
 80102a4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 80102a8:	8011b440 	call	8011b44 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 80102ac:	00800044 	movi	r2,1
 80102b0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 80102b4:	0001883a 	nop
 80102b8:	e037883a 	mov	sp,fp
 80102bc:	dfc00117 	ldw	ra,4(sp)
 80102c0:	df000017 	ldw	fp,0(sp)
 80102c4:	dec00204 	addi	sp,sp,8
 80102c8:	f800283a 	ret

080102cc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 80102cc:	defffe04 	addi	sp,sp,-8
 80102d0:	dfc00115 	stw	ra,4(sp)
 80102d4:	df000015 	stw	fp,0(sp)
 80102d8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 80102dc:	01c0fa04 	movi	r7,1000
 80102e0:	01800084 	movi	r6,2
 80102e4:	000b883a 	mov	r5,zero
 80102e8:	01003004 	movi	r4,192
 80102ec:	80110080 	call	8011008 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 80102f0:	01800044 	movi	r6,1
 80102f4:	000b883a 	mov	r5,zero
 80102f8:	01020074 	movhi	r4,2049
 80102fc:	210d2d04 	addi	r4,r4,13492
 8010300:	80104940 	call	8010494 <altera_avalon_jtag_uart_init>
 8010304:	01020074 	movhi	r4,2049
 8010308:	210d2304 	addi	r4,r4,13452
 801030c:	80102600 	call	8010260 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 8010310:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 8010314:	0001883a 	nop
}
 8010318:	0001883a 	nop
 801031c:	e037883a 	mov	sp,fp
 8010320:	dfc00117 	ldw	ra,4(sp)
 8010324:	df000017 	ldw	fp,0(sp)
 8010328:	dec00204 	addi	sp,sp,8
 801032c:	f800283a 	ret

08010330 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 8010330:	defffa04 	addi	sp,sp,-24
 8010334:	dfc00515 	stw	ra,20(sp)
 8010338:	df000415 	stw	fp,16(sp)
 801033c:	df000404 	addi	fp,sp,16
 8010340:	e13ffe15 	stw	r4,-8(fp)
 8010344:	e17ffd15 	stw	r5,-12(fp)
 8010348:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801034c:	e0bffe17 	ldw	r2,-8(fp)
 8010350:	10800017 	ldw	r2,0(r2)
 8010354:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 8010358:	e0bfff17 	ldw	r2,-4(fp)
 801035c:	10c00a04 	addi	r3,r2,40
 8010360:	e0bffe17 	ldw	r2,-8(fp)
 8010364:	10800217 	ldw	r2,8(r2)
 8010368:	100f883a 	mov	r7,r2
 801036c:	e1bffc17 	ldw	r6,-16(fp)
 8010370:	e17ffd17 	ldw	r5,-12(fp)
 8010374:	1809883a 	mov	r4,r3
 8010378:	80109540 	call	8010954 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801037c:	e037883a 	mov	sp,fp
 8010380:	dfc00117 	ldw	ra,4(sp)
 8010384:	df000017 	ldw	fp,0(sp)
 8010388:	dec00204 	addi	sp,sp,8
 801038c:	f800283a 	ret

08010390 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8010390:	defffa04 	addi	sp,sp,-24
 8010394:	dfc00515 	stw	ra,20(sp)
 8010398:	df000415 	stw	fp,16(sp)
 801039c:	df000404 	addi	fp,sp,16
 80103a0:	e13ffe15 	stw	r4,-8(fp)
 80103a4:	e17ffd15 	stw	r5,-12(fp)
 80103a8:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80103ac:	e0bffe17 	ldw	r2,-8(fp)
 80103b0:	10800017 	ldw	r2,0(r2)
 80103b4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 80103b8:	e0bfff17 	ldw	r2,-4(fp)
 80103bc:	10c00a04 	addi	r3,r2,40
 80103c0:	e0bffe17 	ldw	r2,-8(fp)
 80103c4:	10800217 	ldw	r2,8(r2)
 80103c8:	100f883a 	mov	r7,r2
 80103cc:	e1bffc17 	ldw	r6,-16(fp)
 80103d0:	e17ffd17 	ldw	r5,-12(fp)
 80103d4:	1809883a 	mov	r4,r3
 80103d8:	8010b700 	call	8010b70 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 80103dc:	e037883a 	mov	sp,fp
 80103e0:	dfc00117 	ldw	ra,4(sp)
 80103e4:	df000017 	ldw	fp,0(sp)
 80103e8:	dec00204 	addi	sp,sp,8
 80103ec:	f800283a 	ret

080103f0 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 80103f0:	defffc04 	addi	sp,sp,-16
 80103f4:	dfc00315 	stw	ra,12(sp)
 80103f8:	df000215 	stw	fp,8(sp)
 80103fc:	df000204 	addi	fp,sp,8
 8010400:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010404:	e0bffe17 	ldw	r2,-8(fp)
 8010408:	10800017 	ldw	r2,0(r2)
 801040c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 8010410:	e0bfff17 	ldw	r2,-4(fp)
 8010414:	10c00a04 	addi	r3,r2,40
 8010418:	e0bffe17 	ldw	r2,-8(fp)
 801041c:	10800217 	ldw	r2,8(r2)
 8010420:	100b883a 	mov	r5,r2
 8010424:	1809883a 	mov	r4,r3
 8010428:	80107f80 	call	80107f8 <altera_avalon_jtag_uart_close>
}
 801042c:	e037883a 	mov	sp,fp
 8010430:	dfc00117 	ldw	ra,4(sp)
 8010434:	df000017 	ldw	fp,0(sp)
 8010438:	dec00204 	addi	sp,sp,8
 801043c:	f800283a 	ret

08010440 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 8010440:	defffa04 	addi	sp,sp,-24
 8010444:	dfc00515 	stw	ra,20(sp)
 8010448:	df000415 	stw	fp,16(sp)
 801044c:	df000404 	addi	fp,sp,16
 8010450:	e13ffe15 	stw	r4,-8(fp)
 8010454:	e17ffd15 	stw	r5,-12(fp)
 8010458:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801045c:	e0bffe17 	ldw	r2,-8(fp)
 8010460:	10800017 	ldw	r2,0(r2)
 8010464:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8010468:	e0bfff17 	ldw	r2,-4(fp)
 801046c:	10800a04 	addi	r2,r2,40
 8010470:	e1bffc17 	ldw	r6,-16(fp)
 8010474:	e17ffd17 	ldw	r5,-12(fp)
 8010478:	1009883a 	mov	r4,r2
 801047c:	80108600 	call	8010860 <altera_avalon_jtag_uart_ioctl>
}
 8010480:	e037883a 	mov	sp,fp
 8010484:	dfc00117 	ldw	ra,4(sp)
 8010488:	df000017 	ldw	fp,0(sp)
 801048c:	dec00204 	addi	sp,sp,8
 8010490:	f800283a 	ret

08010494 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 8010494:	defffa04 	addi	sp,sp,-24
 8010498:	dfc00515 	stw	ra,20(sp)
 801049c:	df000415 	stw	fp,16(sp)
 80104a0:	df000404 	addi	fp,sp,16
 80104a4:	e13fff15 	stw	r4,-4(fp)
 80104a8:	e17ffe15 	stw	r5,-8(fp)
 80104ac:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80104b0:	e0bfff17 	ldw	r2,-4(fp)
 80104b4:	00c00044 	movi	r3,1
 80104b8:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 80104bc:	e0bfff17 	ldw	r2,-4(fp)
 80104c0:	10800017 	ldw	r2,0(r2)
 80104c4:	10800104 	addi	r2,r2,4
 80104c8:	1007883a 	mov	r3,r2
 80104cc:	e0bfff17 	ldw	r2,-4(fp)
 80104d0:	10800817 	ldw	r2,32(r2)
 80104d4:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 80104d8:	e0bffe17 	ldw	r2,-8(fp)
 80104dc:	e0fffd17 	ldw	r3,-12(fp)
 80104e0:	d8000015 	stw	zero,0(sp)
 80104e4:	e1ffff17 	ldw	r7,-4(fp)
 80104e8:	01820074 	movhi	r6,2049
 80104ec:	31815504 	addi	r6,r6,1364
 80104f0:	180b883a 	mov	r5,r3
 80104f4:	1009883a 	mov	r4,r2
 80104f8:	80114e80 	call	80114e8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 80104fc:	e0bfff17 	ldw	r2,-4(fp)
 8010500:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 8010504:	e0bfff17 	ldw	r2,-4(fp)
 8010508:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801050c:	d0e72817 	ldw	r3,-25440(gp)
 8010510:	e1ffff17 	ldw	r7,-4(fp)
 8010514:	01820074 	movhi	r6,2049
 8010518:	3181d604 	addi	r6,r6,1880
 801051c:	180b883a 	mov	r5,r3
 8010520:	1009883a 	mov	r4,r2
 8010524:	80110840 	call	8011084 <alt_alarm_start>
 8010528:	1000040e 	bge	r2,zero,801053c <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801052c:	e0ffff17 	ldw	r3,-4(fp)
 8010530:	00a00034 	movhi	r2,32768
 8010534:	10bfffc4 	addi	r2,r2,-1
 8010538:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801053c:	0001883a 	nop
 8010540:	e037883a 	mov	sp,fp
 8010544:	dfc00117 	ldw	ra,4(sp)
 8010548:	df000017 	ldw	fp,0(sp)
 801054c:	dec00204 	addi	sp,sp,8
 8010550:	f800283a 	ret

08010554 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 8010554:	defff804 	addi	sp,sp,-32
 8010558:	df000715 	stw	fp,28(sp)
 801055c:	df000704 	addi	fp,sp,28
 8010560:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 8010564:	e0bff917 	ldw	r2,-28(fp)
 8010568:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 801056c:	e0bffd17 	ldw	r2,-12(fp)
 8010570:	10800017 	ldw	r2,0(r2)
 8010574:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010578:	e0bffc17 	ldw	r2,-16(fp)
 801057c:	10800104 	addi	r2,r2,4
 8010580:	10800037 	ldwio	r2,0(r2)
 8010584:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010588:	e0bffb17 	ldw	r2,-20(fp)
 801058c:	1080c00c 	andi	r2,r2,768
 8010590:	10006b26 	beq	r2,zero,8010740 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 8010594:	e0bffb17 	ldw	r2,-20(fp)
 8010598:	1080400c 	andi	r2,r2,256
 801059c:	10003426 	beq	r2,zero,8010670 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 80105a0:	00800074 	movhi	r2,1
 80105a4:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80105a8:	e0bffd17 	ldw	r2,-12(fp)
 80105ac:	10800a17 	ldw	r2,40(r2)
 80105b0:	10800044 	addi	r2,r2,1
 80105b4:	1081ffcc 	andi	r2,r2,2047
 80105b8:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 80105bc:	e0bffd17 	ldw	r2,-12(fp)
 80105c0:	10800b17 	ldw	r2,44(r2)
 80105c4:	e0fffa17 	ldw	r3,-24(fp)
 80105c8:	18801426 	beq	r3,r2,801061c <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 80105cc:	e0bffc17 	ldw	r2,-16(fp)
 80105d0:	10800037 	ldwio	r2,0(r2)
 80105d4:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 80105d8:	e0bfff17 	ldw	r2,-4(fp)
 80105dc:	10a0000c 	andi	r2,r2,32768
 80105e0:	10001026 	beq	r2,zero,8010624 <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 80105e4:	e0bffd17 	ldw	r2,-12(fp)
 80105e8:	10800a17 	ldw	r2,40(r2)
 80105ec:	e0ffff17 	ldw	r3,-4(fp)
 80105f0:	1809883a 	mov	r4,r3
 80105f4:	e0fffd17 	ldw	r3,-12(fp)
 80105f8:	1885883a 	add	r2,r3,r2
 80105fc:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010600:	e0bffd17 	ldw	r2,-12(fp)
 8010604:	10800a17 	ldw	r2,40(r2)
 8010608:	10800044 	addi	r2,r2,1
 801060c:	10c1ffcc 	andi	r3,r2,2047
 8010610:	e0bffd17 	ldw	r2,-12(fp)
 8010614:	10c00a15 	stw	r3,40(r2)
      {
 8010618:	003fe306 	br	80105a8 <altera_avalon_jtag_uart_irq+0x54>
          break;
 801061c:	0001883a 	nop
 8010620:	00000106 	br	8010628 <altera_avalon_jtag_uart_irq+0xd4>
          break;
 8010624:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 8010628:	e0bfff17 	ldw	r2,-4(fp)
 801062c:	10bfffec 	andhi	r2,r2,65535
 8010630:	10000f26 	beq	r2,zero,8010670 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010634:	e0bffd17 	ldw	r2,-12(fp)
 8010638:	10c00817 	ldw	r3,32(r2)
 801063c:	00bfff84 	movi	r2,-2
 8010640:	1886703a 	and	r3,r3,r2
 8010644:	e0bffd17 	ldw	r2,-12(fp)
 8010648:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801064c:	e0bffc17 	ldw	r2,-16(fp)
 8010650:	10800104 	addi	r2,r2,4
 8010654:	1007883a 	mov	r3,r2
 8010658:	e0bffd17 	ldw	r2,-12(fp)
 801065c:	10800817 	ldw	r2,32(r2)
 8010660:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010664:	e0bffc17 	ldw	r2,-16(fp)
 8010668:	10800104 	addi	r2,r2,4
 801066c:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8010670:	e0bffb17 	ldw	r2,-20(fp)
 8010674:	1080800c 	andi	r2,r2,512
 8010678:	103fbf26 	beq	r2,zero,8010578 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801067c:	e0bffb17 	ldw	r2,-20(fp)
 8010680:	1004d43a 	srli	r2,r2,16
 8010684:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010688:	00001306 	br	80106d8 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801068c:	e0bffc17 	ldw	r2,-16(fp)
 8010690:	e0fffd17 	ldw	r3,-12(fp)
 8010694:	18c00d17 	ldw	r3,52(r3)
 8010698:	e13ffd17 	ldw	r4,-12(fp)
 801069c:	20c7883a 	add	r3,r4,r3
 80106a0:	18c20e03 	ldbu	r3,2104(r3)
 80106a4:	18c03fcc 	andi	r3,r3,255
 80106a8:	18c0201c 	xori	r3,r3,128
 80106ac:	18ffe004 	addi	r3,r3,-128
 80106b0:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80106b4:	e0bffd17 	ldw	r2,-12(fp)
 80106b8:	10800d17 	ldw	r2,52(r2)
 80106bc:	10800044 	addi	r2,r2,1
 80106c0:	10c1ffcc 	andi	r3,r2,2047
 80106c4:	e0bffd17 	ldw	r2,-12(fp)
 80106c8:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 80106cc:	e0bffe17 	ldw	r2,-8(fp)
 80106d0:	10bfffc4 	addi	r2,r2,-1
 80106d4:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 80106d8:	e0bffe17 	ldw	r2,-8(fp)
 80106dc:	10000526 	beq	r2,zero,80106f4 <altera_avalon_jtag_uart_irq+0x1a0>
 80106e0:	e0bffd17 	ldw	r2,-12(fp)
 80106e4:	10c00d17 	ldw	r3,52(r2)
 80106e8:	e0bffd17 	ldw	r2,-12(fp)
 80106ec:	10800c17 	ldw	r2,48(r2)
 80106f0:	18bfe61e 	bne	r3,r2,801068c <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
 80106f4:	e0bffe17 	ldw	r2,-8(fp)
 80106f8:	103f9f26 	beq	r2,zero,8010578 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 80106fc:	e0bffd17 	ldw	r2,-12(fp)
 8010700:	10c00817 	ldw	r3,32(r2)
 8010704:	00bfff44 	movi	r2,-3
 8010708:	1886703a 	and	r3,r3,r2
 801070c:	e0bffd17 	ldw	r2,-12(fp)
 8010710:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010714:	e0bffd17 	ldw	r2,-12(fp)
 8010718:	10800017 	ldw	r2,0(r2)
 801071c:	10800104 	addi	r2,r2,4
 8010720:	1007883a 	mov	r3,r2
 8010724:	e0bffd17 	ldw	r2,-12(fp)
 8010728:	10800817 	ldw	r2,32(r2)
 801072c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010730:	e0bffc17 	ldw	r2,-16(fp)
 8010734:	10800104 	addi	r2,r2,4
 8010738:	10800037 	ldwio	r2,0(r2)
  {
 801073c:	003f8e06 	br	8010578 <altera_avalon_jtag_uart_irq+0x24>
      break;
 8010740:	0001883a 	nop
      }
    }
  }
}
 8010744:	0001883a 	nop
 8010748:	e037883a 	mov	sp,fp
 801074c:	df000017 	ldw	fp,0(sp)
 8010750:	dec00104 	addi	sp,sp,4
 8010754:	f800283a 	ret

08010758 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 8010758:	defffc04 	addi	sp,sp,-16
 801075c:	df000315 	stw	fp,12(sp)
 8010760:	df000304 	addi	fp,sp,12
 8010764:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8010768:	e0bffd17 	ldw	r2,-12(fp)
 801076c:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8010770:	e0bfff17 	ldw	r2,-4(fp)
 8010774:	10800017 	ldw	r2,0(r2)
 8010778:	10800104 	addi	r2,r2,4
 801077c:	10800037 	ldwio	r2,0(r2)
 8010780:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 8010784:	e0bffe17 	ldw	r2,-8(fp)
 8010788:	1081000c 	andi	r2,r2,1024
 801078c:	10000b26 	beq	r2,zero,80107bc <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8010790:	e0bfff17 	ldw	r2,-4(fp)
 8010794:	10800017 	ldw	r2,0(r2)
 8010798:	10800104 	addi	r2,r2,4
 801079c:	1007883a 	mov	r3,r2
 80107a0:	e0bfff17 	ldw	r2,-4(fp)
 80107a4:	10800817 	ldw	r2,32(r2)
 80107a8:	10810014 	ori	r2,r2,1024
 80107ac:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 80107b0:	e0bfff17 	ldw	r2,-4(fp)
 80107b4:	10000915 	stw	zero,36(r2)
 80107b8:	00000a06 	br	80107e4 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 80107bc:	e0bfff17 	ldw	r2,-4(fp)
 80107c0:	10c00917 	ldw	r3,36(r2)
 80107c4:	00a00034 	movhi	r2,32768
 80107c8:	10bfff04 	addi	r2,r2,-4
 80107cc:	10c00536 	bltu	r2,r3,80107e4 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 80107d0:	e0bfff17 	ldw	r2,-4(fp)
 80107d4:	10800917 	ldw	r2,36(r2)
 80107d8:	10c00044 	addi	r3,r2,1
 80107dc:	e0bfff17 	ldw	r2,-4(fp)
 80107e0:	10c00915 	stw	r3,36(r2)
 80107e4:	d0a72817 	ldw	r2,-25440(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 80107e8:	e037883a 	mov	sp,fp
 80107ec:	df000017 	ldw	fp,0(sp)
 80107f0:	dec00104 	addi	sp,sp,4
 80107f4:	f800283a 	ret

080107f8 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 80107f8:	defffd04 	addi	sp,sp,-12
 80107fc:	df000215 	stw	fp,8(sp)
 8010800:	df000204 	addi	fp,sp,8
 8010804:	e13fff15 	stw	r4,-4(fp)
 8010808:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801080c:	00000506 	br	8010824 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 8010810:	e0bffe17 	ldw	r2,-8(fp)
 8010814:	1090000c 	andi	r2,r2,16384
 8010818:	10000226 	beq	r2,zero,8010824 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801081c:	00bffd44 	movi	r2,-11
 8010820:	00000b06 	br	8010850 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 8010824:	e0bfff17 	ldw	r2,-4(fp)
 8010828:	10c00d17 	ldw	r3,52(r2)
 801082c:	e0bfff17 	ldw	r2,-4(fp)
 8010830:	10800c17 	ldw	r2,48(r2)
 8010834:	18800526 	beq	r3,r2,801084c <altera_avalon_jtag_uart_close+0x54>
 8010838:	e0bfff17 	ldw	r2,-4(fp)
 801083c:	10c00917 	ldw	r3,36(r2)
 8010840:	e0bfff17 	ldw	r2,-4(fp)
 8010844:	10800117 	ldw	r2,4(r2)
 8010848:	18bff136 	bltu	r3,r2,8010810 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 801084c:	0005883a 	mov	r2,zero
}
 8010850:	e037883a 	mov	sp,fp
 8010854:	df000017 	ldw	fp,0(sp)
 8010858:	dec00104 	addi	sp,sp,4
 801085c:	f800283a 	ret

08010860 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 8010860:	defffa04 	addi	sp,sp,-24
 8010864:	df000515 	stw	fp,20(sp)
 8010868:	df000504 	addi	fp,sp,20
 801086c:	e13ffd15 	stw	r4,-12(fp)
 8010870:	e17ffc15 	stw	r5,-16(fp)
 8010874:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 8010878:	00bff9c4 	movi	r2,-25
 801087c:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 8010880:	e0bffc17 	ldw	r2,-16(fp)
 8010884:	109a8060 	cmpeqi	r2,r2,27137
 8010888:	1000041e 	bne	r2,zero,801089c <altera_avalon_jtag_uart_ioctl+0x3c>
 801088c:	e0bffc17 	ldw	r2,-16(fp)
 8010890:	109a80a0 	cmpeqi	r2,r2,27138
 8010894:	1000181e 	bne	r2,zero,80108f8 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8010898:	00002906 	br	8010940 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 801089c:	e0bffd17 	ldw	r2,-12(fp)
 80108a0:	10c00117 	ldw	r3,4(r2)
 80108a4:	00a00034 	movhi	r2,32768
 80108a8:	10bfffc4 	addi	r2,r2,-1
 80108ac:	18802126 	beq	r3,r2,8010934 <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 80108b0:	e0bffb17 	ldw	r2,-20(fp)
 80108b4:	10800017 	ldw	r2,0(r2)
 80108b8:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 80108bc:	e0bffe17 	ldw	r2,-8(fp)
 80108c0:	10800090 	cmplti	r2,r2,2
 80108c4:	1000061e 	bne	r2,zero,80108e0 <altera_avalon_jtag_uart_ioctl+0x80>
 80108c8:	e0fffe17 	ldw	r3,-8(fp)
 80108cc:	00a00034 	movhi	r2,32768
 80108d0:	10bfffc4 	addi	r2,r2,-1
 80108d4:	18800226 	beq	r3,r2,80108e0 <altera_avalon_jtag_uart_ioctl+0x80>
 80108d8:	e0bffe17 	ldw	r2,-8(fp)
 80108dc:	00000206 	br	80108e8 <altera_avalon_jtag_uart_ioctl+0x88>
 80108e0:	00a00034 	movhi	r2,32768
 80108e4:	10bfff84 	addi	r2,r2,-2
 80108e8:	e0fffd17 	ldw	r3,-12(fp)
 80108ec:	18800115 	stw	r2,4(r3)
      rc = 0;
 80108f0:	e03fff15 	stw	zero,-4(fp)
    break;
 80108f4:	00000f06 	br	8010934 <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 80108f8:	e0bffd17 	ldw	r2,-12(fp)
 80108fc:	10c00117 	ldw	r3,4(r2)
 8010900:	00a00034 	movhi	r2,32768
 8010904:	10bfffc4 	addi	r2,r2,-1
 8010908:	18800c26 	beq	r3,r2,801093c <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801090c:	e0bffd17 	ldw	r2,-12(fp)
 8010910:	10c00917 	ldw	r3,36(r2)
 8010914:	e0bffd17 	ldw	r2,-12(fp)
 8010918:	10800117 	ldw	r2,4(r2)
 801091c:	1885803a 	cmpltu	r2,r3,r2
 8010920:	10c03fcc 	andi	r3,r2,255
 8010924:	e0bffb17 	ldw	r2,-20(fp)
 8010928:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801092c:	e03fff15 	stw	zero,-4(fp)
    break;
 8010930:	00000206 	br	801093c <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 8010934:	0001883a 	nop
 8010938:	00000106 	br	8010940 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 801093c:	0001883a 	nop
  }

  return rc;
 8010940:	e0bfff17 	ldw	r2,-4(fp)
}
 8010944:	e037883a 	mov	sp,fp
 8010948:	df000017 	ldw	fp,0(sp)
 801094c:	dec00104 	addi	sp,sp,4
 8010950:	f800283a 	ret

08010954 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 8010954:	defff304 	addi	sp,sp,-52
 8010958:	dfc00c15 	stw	ra,48(sp)
 801095c:	df000b15 	stw	fp,44(sp)
 8010960:	df000b04 	addi	fp,sp,44
 8010964:	e13ff815 	stw	r4,-32(fp)
 8010968:	e17ff715 	stw	r5,-36(fp)
 801096c:	e1bff615 	stw	r6,-40(fp)
 8010970:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 8010974:	e0bff717 	ldw	r2,-36(fp)
 8010978:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801097c:	00004706 	br	8010a9c <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8010980:	e0bff817 	ldw	r2,-32(fp)
 8010984:	10800a17 	ldw	r2,40(r2)
 8010988:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 801098c:	e0bff817 	ldw	r2,-32(fp)
 8010990:	10800b17 	ldw	r2,44(r2)
 8010994:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 8010998:	e0fffd17 	ldw	r3,-12(fp)
 801099c:	e0bffc17 	ldw	r2,-16(fp)
 80109a0:	18800536 	bltu	r3,r2,80109b8 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 80109a4:	e0fffd17 	ldw	r3,-12(fp)
 80109a8:	e0bffc17 	ldw	r2,-16(fp)
 80109ac:	1885c83a 	sub	r2,r3,r2
 80109b0:	e0bffe15 	stw	r2,-8(fp)
 80109b4:	00000406 	br	80109c8 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 80109b8:	00c20004 	movi	r3,2048
 80109bc:	e0bffc17 	ldw	r2,-16(fp)
 80109c0:	1885c83a 	sub	r2,r3,r2
 80109c4:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 80109c8:	e0bffe17 	ldw	r2,-8(fp)
 80109cc:	10001e26 	beq	r2,zero,8010a48 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 80109d0:	e0fff617 	ldw	r3,-40(fp)
 80109d4:	e0bffe17 	ldw	r2,-8(fp)
 80109d8:	1880022e 	bgeu	r3,r2,80109e4 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 80109dc:	e0bff617 	ldw	r2,-40(fp)
 80109e0:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 80109e4:	e0bff817 	ldw	r2,-32(fp)
 80109e8:	10c00e04 	addi	r3,r2,56
 80109ec:	e0bffc17 	ldw	r2,-16(fp)
 80109f0:	1885883a 	add	r2,r3,r2
 80109f4:	e1bffe17 	ldw	r6,-8(fp)
 80109f8:	100b883a 	mov	r5,r2
 80109fc:	e13fff17 	ldw	r4,-4(fp)
 8010a00:	80086340 	call	8008634 <memcpy>
      ptr   += n;
 8010a04:	e0ffff17 	ldw	r3,-4(fp)
 8010a08:	e0bffe17 	ldw	r2,-8(fp)
 8010a0c:	1885883a 	add	r2,r3,r2
 8010a10:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 8010a14:	e0fff617 	ldw	r3,-40(fp)
 8010a18:	e0bffe17 	ldw	r2,-8(fp)
 8010a1c:	1885c83a 	sub	r2,r3,r2
 8010a20:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010a24:	e0fffc17 	ldw	r3,-16(fp)
 8010a28:	e0bffe17 	ldw	r2,-8(fp)
 8010a2c:	1885883a 	add	r2,r3,r2
 8010a30:	10c1ffcc 	andi	r3,r2,2047
 8010a34:	e0bff817 	ldw	r2,-32(fp)
 8010a38:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 8010a3c:	e0bff617 	ldw	r2,-40(fp)
 8010a40:	00bfcf16 	blt	zero,r2,8010980 <altera_avalon_jtag_uart_read+0x2c>
 8010a44:	00000106 	br	8010a4c <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 8010a48:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 8010a4c:	e0ffff17 	ldw	r3,-4(fp)
 8010a50:	e0bff717 	ldw	r2,-36(fp)
 8010a54:	1880141e 	bne	r3,r2,8010aa8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 8010a58:	e0bff517 	ldw	r2,-44(fp)
 8010a5c:	1090000c 	andi	r2,r2,16384
 8010a60:	1000131e 	bne	r2,zero,8010ab0 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 8010a64:	0001883a 	nop
 8010a68:	e0bff817 	ldw	r2,-32(fp)
 8010a6c:	10800a17 	ldw	r2,40(r2)
 8010a70:	e0fffd17 	ldw	r3,-12(fp)
 8010a74:	1880051e 	bne	r3,r2,8010a8c <altera_avalon_jtag_uart_read+0x138>
 8010a78:	e0bff817 	ldw	r2,-32(fp)
 8010a7c:	10c00917 	ldw	r3,36(r2)
 8010a80:	e0bff817 	ldw	r2,-32(fp)
 8010a84:	10800117 	ldw	r2,4(r2)
 8010a88:	18bff736 	bltu	r3,r2,8010a68 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8010a8c:	e0bff817 	ldw	r2,-32(fp)
 8010a90:	10800a17 	ldw	r2,40(r2)
 8010a94:	e0fffd17 	ldw	r3,-12(fp)
 8010a98:	18800726 	beq	r3,r2,8010ab8 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 8010a9c:	e0bff617 	ldw	r2,-40(fp)
 8010aa0:	00bfb716 	blt	zero,r2,8010980 <altera_avalon_jtag_uart_read+0x2c>
 8010aa4:	00000506 	br	8010abc <altera_avalon_jtag_uart_read+0x168>
      break;
 8010aa8:	0001883a 	nop
 8010aac:	00000306 	br	8010abc <altera_avalon_jtag_uart_read+0x168>
      break;
 8010ab0:	0001883a 	nop
 8010ab4:	00000106 	br	8010abc <altera_avalon_jtag_uart_read+0x168>
      break;
 8010ab8:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8010abc:	e0ffff17 	ldw	r3,-4(fp)
 8010ac0:	e0bff717 	ldw	r2,-36(fp)
 8010ac4:	18801826 	beq	r3,r2,8010b28 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
 8010ac8:	0005303a 	rdctl	r2,status
 8010acc:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010ad0:	e0fff917 	ldw	r3,-28(fp)
 8010ad4:	00bfff84 	movi	r2,-2
 8010ad8:	1884703a 	and	r2,r3,r2
 8010adc:	1001703a 	wrctl	status,r2
  return context;
 8010ae0:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 8010ae4:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010ae8:	e0bff817 	ldw	r2,-32(fp)
 8010aec:	10800817 	ldw	r2,32(r2)
 8010af0:	10c00054 	ori	r3,r2,1
 8010af4:	e0bff817 	ldw	r2,-32(fp)
 8010af8:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010afc:	e0bff817 	ldw	r2,-32(fp)
 8010b00:	10800017 	ldw	r2,0(r2)
 8010b04:	10800104 	addi	r2,r2,4
 8010b08:	1007883a 	mov	r3,r2
 8010b0c:	e0bff817 	ldw	r2,-32(fp)
 8010b10:	10800817 	ldw	r2,32(r2)
 8010b14:	18800035 	stwio	r2,0(r3)
 8010b18:	e0bffb17 	ldw	r2,-20(fp)
 8010b1c:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8010b20:	e0bffa17 	ldw	r2,-24(fp)
 8010b24:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 8010b28:	e0ffff17 	ldw	r3,-4(fp)
 8010b2c:	e0bff717 	ldw	r2,-36(fp)
 8010b30:	18800426 	beq	r3,r2,8010b44 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 8010b34:	e0ffff17 	ldw	r3,-4(fp)
 8010b38:	e0bff717 	ldw	r2,-36(fp)
 8010b3c:	1885c83a 	sub	r2,r3,r2
 8010b40:	00000606 	br	8010b5c <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 8010b44:	e0bff517 	ldw	r2,-44(fp)
 8010b48:	1090000c 	andi	r2,r2,16384
 8010b4c:	10000226 	beq	r2,zero,8010b58 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 8010b50:	00bffd44 	movi	r2,-11
 8010b54:	00000106 	br	8010b5c <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 8010b58:	00bffec4 	movi	r2,-5
}
 8010b5c:	e037883a 	mov	sp,fp
 8010b60:	dfc00117 	ldw	ra,4(sp)
 8010b64:	df000017 	ldw	fp,0(sp)
 8010b68:	dec00204 	addi	sp,sp,8
 8010b6c:	f800283a 	ret

08010b70 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010b70:	defff304 	addi	sp,sp,-52
 8010b74:	dfc00c15 	stw	ra,48(sp)
 8010b78:	df000b15 	stw	fp,44(sp)
 8010b7c:	df000b04 	addi	fp,sp,44
 8010b80:	e13ff815 	stw	r4,-32(fp)
 8010b84:	e17ff715 	stw	r5,-36(fp)
 8010b88:	e1bff615 	stw	r6,-40(fp)
 8010b8c:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010b90:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 8010b94:	e0bff717 	ldw	r2,-36(fp)
 8010b98:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010b9c:	00003706 	br	8010c7c <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010ba0:	e0bff817 	ldw	r2,-32(fp)
 8010ba4:	10800c17 	ldw	r2,48(r2)
 8010ba8:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 8010bac:	e0bff817 	ldw	r2,-32(fp)
 8010bb0:	10800d17 	ldw	r2,52(r2)
 8010bb4:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 8010bb8:	e0fffc17 	ldw	r3,-16(fp)
 8010bbc:	e0bfff17 	ldw	r2,-4(fp)
 8010bc0:	1880062e 	bgeu	r3,r2,8010bdc <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 8010bc4:	e0ffff17 	ldw	r3,-4(fp)
 8010bc8:	e0bffc17 	ldw	r2,-16(fp)
 8010bcc:	1885c83a 	sub	r2,r3,r2
 8010bd0:	10bfffc4 	addi	r2,r2,-1
 8010bd4:	e0bffe15 	stw	r2,-8(fp)
 8010bd8:	00000b06 	br	8010c08 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8010bdc:	e0bfff17 	ldw	r2,-4(fp)
 8010be0:	10000526 	beq	r2,zero,8010bf8 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 8010be4:	00c20004 	movi	r3,2048
 8010be8:	e0bffc17 	ldw	r2,-16(fp)
 8010bec:	1885c83a 	sub	r2,r3,r2
 8010bf0:	e0bffe15 	stw	r2,-8(fp)
 8010bf4:	00000406 	br	8010c08 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010bf8:	00c1ffc4 	movi	r3,2047
 8010bfc:	e0bffc17 	ldw	r2,-16(fp)
 8010c00:	1885c83a 	sub	r2,r3,r2
 8010c04:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8010c08:	e0bffe17 	ldw	r2,-8(fp)
 8010c0c:	10001e26 	beq	r2,zero,8010c88 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 8010c10:	e0fff617 	ldw	r3,-40(fp)
 8010c14:	e0bffe17 	ldw	r2,-8(fp)
 8010c18:	1880022e 	bgeu	r3,r2,8010c24 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 8010c1c:	e0bff617 	ldw	r2,-40(fp)
 8010c20:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 8010c24:	e0bff817 	ldw	r2,-32(fp)
 8010c28:	10c20e04 	addi	r3,r2,2104
 8010c2c:	e0bffc17 	ldw	r2,-16(fp)
 8010c30:	1885883a 	add	r2,r3,r2
 8010c34:	e1bffe17 	ldw	r6,-8(fp)
 8010c38:	e17ff717 	ldw	r5,-36(fp)
 8010c3c:	1009883a 	mov	r4,r2
 8010c40:	80086340 	call	8008634 <memcpy>
      ptr   += n;
 8010c44:	e0fff717 	ldw	r3,-36(fp)
 8010c48:	e0bffe17 	ldw	r2,-8(fp)
 8010c4c:	1885883a 	add	r2,r3,r2
 8010c50:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 8010c54:	e0fff617 	ldw	r3,-40(fp)
 8010c58:	e0bffe17 	ldw	r2,-8(fp)
 8010c5c:	1885c83a 	sub	r2,r3,r2
 8010c60:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010c64:	e0fffc17 	ldw	r3,-16(fp)
 8010c68:	e0bffe17 	ldw	r2,-8(fp)
 8010c6c:	1885883a 	add	r2,r3,r2
 8010c70:	10c1ffcc 	andi	r3,r2,2047
 8010c74:	e0bff817 	ldw	r2,-32(fp)
 8010c78:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 8010c7c:	e0bff617 	ldw	r2,-40(fp)
 8010c80:	00bfc716 	blt	zero,r2,8010ba0 <altera_avalon_jtag_uart_write+0x30>
 8010c84:	00000106 	br	8010c8c <altera_avalon_jtag_uart_write+0x11c>
        break;
 8010c88:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 8010c8c:	0005303a 	rdctl	r2,status
 8010c90:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010c94:	e0fff917 	ldw	r3,-28(fp)
 8010c98:	00bfff84 	movi	r2,-2
 8010c9c:	1884703a 	and	r2,r3,r2
 8010ca0:	1001703a 	wrctl	status,r2
  return context;
 8010ca4:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010ca8:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010cac:	e0bff817 	ldw	r2,-32(fp)
 8010cb0:	10800817 	ldw	r2,32(r2)
 8010cb4:	10c00094 	ori	r3,r2,2
 8010cb8:	e0bff817 	ldw	r2,-32(fp)
 8010cbc:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010cc0:	e0bff817 	ldw	r2,-32(fp)
 8010cc4:	10800017 	ldw	r2,0(r2)
 8010cc8:	10800104 	addi	r2,r2,4
 8010ccc:	1007883a 	mov	r3,r2
 8010cd0:	e0bff817 	ldw	r2,-32(fp)
 8010cd4:	10800817 	ldw	r2,32(r2)
 8010cd8:	18800035 	stwio	r2,0(r3)
 8010cdc:	e0bffb17 	ldw	r2,-20(fp)
 8010ce0:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8010ce4:	e0bffa17 	ldw	r2,-24(fp)
 8010ce8:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8010cec:	e0bff617 	ldw	r2,-40(fp)
 8010cf0:	0080100e 	bge	zero,r2,8010d34 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8010cf4:	e0bff517 	ldw	r2,-44(fp)
 8010cf8:	1090000c 	andi	r2,r2,16384
 8010cfc:	1000101e 	bne	r2,zero,8010d40 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8010d00:	0001883a 	nop
 8010d04:	e0bff817 	ldw	r2,-32(fp)
 8010d08:	10800d17 	ldw	r2,52(r2)
 8010d0c:	e0ffff17 	ldw	r3,-4(fp)
 8010d10:	1880051e 	bne	r3,r2,8010d28 <altera_avalon_jtag_uart_write+0x1b8>
 8010d14:	e0bff817 	ldw	r2,-32(fp)
 8010d18:	10c00917 	ldw	r3,36(r2)
 8010d1c:	e0bff817 	ldw	r2,-32(fp)
 8010d20:	10800117 	ldw	r2,4(r2)
 8010d24:	18bff736 	bltu	r3,r2,8010d04 <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010d28:	e0bff817 	ldw	r2,-32(fp)
 8010d2c:	10800917 	ldw	r2,36(r2)
 8010d30:	1000051e 	bne	r2,zero,8010d48 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8010d34:	e0bff617 	ldw	r2,-40(fp)
 8010d38:	00bfd016 	blt	zero,r2,8010c7c <altera_avalon_jtag_uart_write+0x10c>
 8010d3c:	00000306 	br	8010d4c <altera_avalon_jtag_uart_write+0x1dc>
        break;
 8010d40:	0001883a 	nop
 8010d44:	00000106 	br	8010d4c <altera_avalon_jtag_uart_write+0x1dc>
         break;
 8010d48:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010d4c:	e0fff717 	ldw	r3,-36(fp)
 8010d50:	e0bffd17 	ldw	r2,-12(fp)
 8010d54:	18800426 	beq	r3,r2,8010d68 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8010d58:	e0fff717 	ldw	r3,-36(fp)
 8010d5c:	e0bffd17 	ldw	r2,-12(fp)
 8010d60:	1885c83a 	sub	r2,r3,r2
 8010d64:	00000606 	br	8010d80 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8010d68:	e0bff517 	ldw	r2,-44(fp)
 8010d6c:	1090000c 	andi	r2,r2,16384
 8010d70:	10000226 	beq	r2,zero,8010d7c <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8010d74:	00bffd44 	movi	r2,-11
 8010d78:	00000106 	br	8010d80 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010d7c:	00bffec4 	movi	r2,-5
}
 8010d80:	e037883a 	mov	sp,fp
 8010d84:	dfc00117 	ldw	ra,4(sp)
 8010d88:	df000017 	ldw	fp,0(sp)
 8010d8c:	dec00204 	addi	sp,sp,8
 8010d90:	f800283a 	ret

08010d94 <alt_avalon_spi_command>:

int alt_avalon_spi_command(alt_u32 base, alt_u32 slave,
                           alt_u32 write_length, const alt_u8 * write_data,
                           alt_u32 read_length, alt_u8 * read_data,
                           alt_u32 flags)
{
 8010d94:	defff404 	addi	sp,sp,-48
 8010d98:	df000b15 	stw	fp,44(sp)
 8010d9c:	df000b04 	addi	fp,sp,44
 8010da0:	e13ff815 	stw	r4,-32(fp)
 8010da4:	e17ff715 	stw	r5,-36(fp)
 8010da8:	e1bff615 	stw	r6,-40(fp)
 8010dac:	e1fff515 	stw	r7,-44(fp)
  const alt_u8 * write_end = write_data + write_length;
 8010db0:	e0fff517 	ldw	r3,-44(fp)
 8010db4:	e0bff617 	ldw	r2,-40(fp)
 8010db8:	1885883a 	add	r2,r3,r2
 8010dbc:	e0bffc15 	stw	r2,-16(fp)
  alt_u8 * read_end = read_data + read_length;
 8010dc0:	e0c00217 	ldw	r3,8(fp)
 8010dc4:	e0800117 	ldw	r2,4(fp)
 8010dc8:	1885883a 	add	r2,r3,r2
 8010dcc:	e0bffb15 	stw	r2,-20(fp)

  alt_u32 write_zeros = read_length;
 8010dd0:	e0800117 	ldw	r2,4(fp)
 8010dd4:	e0bfff15 	stw	r2,-4(fp)
  alt_u32 read_ignore = write_length;
 8010dd8:	e0bff617 	ldw	r2,-40(fp)
 8010ddc:	e0bffe15 	stw	r2,-8(fp)

  /* We must not send more than two bytes to the target before it has
   * returned any as otherwise it will overflow. */
  /* Unfortunately the hardware does not seem to work with credits > 1,
   * leave it at 1 for now. */
  alt_32 credits = 1;
 8010de0:	00800044 	movi	r2,1
 8010de4:	e0bffd15 	stw	r2,-12(fp)
  /* Warning: this function is not currently safe if called in a multi-threaded
   * environment, something above must perform locking to make it safe if more
   * than one thread intends to use it.
   */

  IOWR_ALTERA_AVALON_SPI_SLAVE_SEL(base, 1 << slave);
 8010de8:	e0bff817 	ldw	r2,-32(fp)
 8010dec:	10800504 	addi	r2,r2,20
 8010df0:	1009883a 	mov	r4,r2
 8010df4:	00c00044 	movi	r3,1
 8010df8:	e0bff717 	ldw	r2,-36(fp)
 8010dfc:	1884983a 	sll	r2,r3,r2
 8010e00:	20800035 	stwio	r2,0(r4)
  
  /* Set the SSO bit (force chipselect) only if the toggle flag is not set */
  if ((flags & ALT_AVALON_SPI_COMMAND_TOGGLE_SS_N) == 0) {
 8010e04:	e0800317 	ldw	r2,12(fp)
 8010e08:	1080008c 	andi	r2,r2,2
 8010e0c:	1000051e 	bne	r2,zero,8010e24 <alt_avalon_spi_command+0x90>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, ALTERA_AVALON_SPI_CONTROL_SSO_MSK);
 8010e10:	e0bff817 	ldw	r2,-32(fp)
 8010e14:	10800304 	addi	r2,r2,12
 8010e18:	1007883a 	mov	r3,r2
 8010e1c:	00810004 	movi	r2,1024
 8010e20:	18800035 	stwio	r2,0(r3)
  /*
   * Discard any stale data present in the RXDATA register, in case
   * previous communication was interrupted and stale data was left
   * behind.
   */
  IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8010e24:	e0bff817 	ldw	r2,-32(fp)
 8010e28:	10800037 	ldwio	r2,0(r2)
  for ( ; ; )
  {
    
    do
    {
      status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8010e2c:	e0bff817 	ldw	r2,-32(fp)
 8010e30:	10800204 	addi	r2,r2,8
 8010e34:	10800037 	ldwio	r2,0(r2)
 8010e38:	e0bffa15 	stw	r2,-24(fp)
    }
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8010e3c:	e0bffa17 	ldw	r2,-24(fp)
 8010e40:	1080100c 	andi	r2,r2,64
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8010e44:	10000226 	beq	r2,zero,8010e50 <alt_avalon_spi_command+0xbc>
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8010e48:	e0bffd17 	ldw	r2,-12(fp)
 8010e4c:	1000031e 	bne	r2,zero,8010e5c <alt_avalon_spi_command+0xc8>
            (status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) == 0);
 8010e50:	e0bffa17 	ldw	r2,-24(fp)
 8010e54:	1080200c 	andi	r2,r2,128
    while (((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) == 0 || credits == 0) &&
 8010e58:	103ff426 	beq	r2,zero,8010e2c <alt_avalon_spi_command+0x98>

    if ((status & ALTERA_AVALON_SPI_STATUS_TRDY_MSK) != 0 && credits > 0)
 8010e5c:	e0bffa17 	ldw	r2,-24(fp)
 8010e60:	1080100c 	andi	r2,r2,64
 8010e64:	10001e26 	beq	r2,zero,8010ee0 <alt_avalon_spi_command+0x14c>
 8010e68:	e0bffd17 	ldw	r2,-12(fp)
 8010e6c:	00801c0e 	bge	zero,r2,8010ee0 <alt_avalon_spi_command+0x14c>
    {
      credits--;
 8010e70:	e0bffd17 	ldw	r2,-12(fp)
 8010e74:	10bfffc4 	addi	r2,r2,-1
 8010e78:	e0bffd15 	stw	r2,-12(fp)

      if (write_data < write_end)
 8010e7c:	e0fff517 	ldw	r3,-44(fp)
 8010e80:	e0bffc17 	ldw	r2,-16(fp)
 8010e84:	18800a2e 	bgeu	r3,r2,8010eb0 <alt_avalon_spi_command+0x11c>
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, *write_data++);
 8010e88:	e0bff817 	ldw	r2,-32(fp)
 8010e8c:	10800104 	addi	r2,r2,4
 8010e90:	1009883a 	mov	r4,r2
 8010e94:	e0bff517 	ldw	r2,-44(fp)
 8010e98:	10c00044 	addi	r3,r2,1
 8010e9c:	e0fff515 	stw	r3,-44(fp)
 8010ea0:	10800003 	ldbu	r2,0(r2)
 8010ea4:	10803fcc 	andi	r2,r2,255
 8010ea8:	20800035 	stwio	r2,0(r4)
 8010eac:	00000c06 	br	8010ee0 <alt_avalon_spi_command+0x14c>
      else if (write_zeros > 0)
 8010eb0:	e0bfff17 	ldw	r2,-4(fp)
 8010eb4:	10000826 	beq	r2,zero,8010ed8 <alt_avalon_spi_command+0x144>
      {
        write_zeros--;
 8010eb8:	e0bfff17 	ldw	r2,-4(fp)
 8010ebc:	10bfffc4 	addi	r2,r2,-1
 8010ec0:	e0bfff15 	stw	r2,-4(fp)
        IOWR_ALTERA_AVALON_SPI_TXDATA(base, 0);
 8010ec4:	e0bff817 	ldw	r2,-32(fp)
 8010ec8:	10800104 	addi	r2,r2,4
 8010ecc:	0007883a 	mov	r3,zero
 8010ed0:	10c00035 	stwio	r3,0(r2)
 8010ed4:	00000206 	br	8010ee0 <alt_avalon_spi_command+0x14c>
      }
      else
        credits = -1024;
 8010ed8:	00bf0004 	movi	r2,-1024
 8010edc:	e0bffd15 	stw	r2,-12(fp)
    };

    if ((status & ALTERA_AVALON_SPI_STATUS_RRDY_MSK) != 0)
 8010ee0:	e0bffa17 	ldw	r2,-24(fp)
 8010ee4:	1080200c 	andi	r2,r2,128
 8010ee8:	103fd026 	beq	r2,zero,8010e2c <alt_avalon_spi_command+0x98>
    {
      alt_u32 rxdata = IORD_ALTERA_AVALON_SPI_RXDATA(base);
 8010eec:	e0bff817 	ldw	r2,-32(fp)
 8010ef0:	10800037 	ldwio	r2,0(r2)
 8010ef4:	e0bff915 	stw	r2,-28(fp)

      if (read_ignore > 0)
 8010ef8:	e0bffe17 	ldw	r2,-8(fp)
 8010efc:	10000426 	beq	r2,zero,8010f10 <alt_avalon_spi_command+0x17c>
        read_ignore--;
 8010f00:	e0bffe17 	ldw	r2,-8(fp)
 8010f04:	10bfffc4 	addi	r2,r2,-1
 8010f08:	e0bffe15 	stw	r2,-8(fp)
 8010f0c:	00000506 	br	8010f24 <alt_avalon_spi_command+0x190>
      else
        *read_data++ = (alt_u8)rxdata;
 8010f10:	e0800217 	ldw	r2,8(fp)
 8010f14:	10c00044 	addi	r3,r2,1
 8010f18:	e0c00215 	stw	r3,8(fp)
 8010f1c:	e0fff917 	ldw	r3,-28(fp)
 8010f20:	10c00005 	stb	r3,0(r2)
      credits++;
 8010f24:	e0bffd17 	ldw	r2,-12(fp)
 8010f28:	10800044 	addi	r2,r2,1
 8010f2c:	e0bffd15 	stw	r2,-12(fp)

      if (read_ignore == 0 && read_data == read_end)
 8010f30:	e0bffe17 	ldw	r2,-8(fp)
 8010f34:	103fbd1e 	bne	r2,zero,8010e2c <alt_avalon_spi_command+0x98>
 8010f38:	e0c00217 	ldw	r3,8(fp)
 8010f3c:	e0bffb17 	ldw	r2,-20(fp)
 8010f40:	18bfba1e 	bne	r3,r2,8010e2c <alt_avalon_spi_command+0x98>
  }

  /* Wait until the interface has finished transmitting */
  do
  {
    status = IORD_ALTERA_AVALON_SPI_STATUS(base);
 8010f44:	e0bff817 	ldw	r2,-32(fp)
 8010f48:	10800204 	addi	r2,r2,8
 8010f4c:	10800037 	ldwio	r2,0(r2)
 8010f50:	e0bffa15 	stw	r2,-24(fp)
  }
  while ((status & ALTERA_AVALON_SPI_STATUS_TMT_MSK) == 0);
 8010f54:	e0bffa17 	ldw	r2,-24(fp)
 8010f58:	1080080c 	andi	r2,r2,32
 8010f5c:	103ff926 	beq	r2,zero,8010f44 <alt_avalon_spi_command+0x1b0>

  /* Clear SSO (release chipselect) unless the caller is going to
   * keep using this chip
   */
  if ((flags & ALT_AVALON_SPI_COMMAND_MERGE) == 0)
 8010f60:	e0800317 	ldw	r2,12(fp)
 8010f64:	1080004c 	andi	r2,r2,1
 8010f68:	1000041e 	bne	r2,zero,8010f7c <alt_avalon_spi_command+0x1e8>
    IOWR_ALTERA_AVALON_SPI_CONTROL(base, 0);
 8010f6c:	e0bff817 	ldw	r2,-32(fp)
 8010f70:	10800304 	addi	r2,r2,12
 8010f74:	0007883a 	mov	r3,zero
 8010f78:	10c00035 	stwio	r3,0(r2)

  return read_length;
 8010f7c:	e0800117 	ldw	r2,4(fp)
}
 8010f80:	e037883a 	mov	sp,fp
 8010f84:	df000017 	ldw	fp,0(sp)
 8010f88:	dec00104 	addi	sp,sp,4
 8010f8c:	f800283a 	ret

08010f90 <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8010f90:	defffa04 	addi	sp,sp,-24
 8010f94:	dfc00515 	stw	ra,20(sp)
 8010f98:	df000415 	stw	fp,16(sp)
 8010f9c:	df000404 	addi	fp,sp,16
 8010fa0:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8010fa4:	0007883a 	mov	r3,zero
 8010fa8:	e0bffc17 	ldw	r2,-16(fp)
 8010fac:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8010fb0:	e0bffc17 	ldw	r2,-16(fp)
 8010fb4:	10800104 	addi	r2,r2,4
 8010fb8:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 8010fbc:	0005303a 	rdctl	r2,status
 8010fc0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010fc4:	e0fffd17 	ldw	r3,-12(fp)
 8010fc8:	00bfff84 	movi	r2,-2
 8010fcc:	1884703a 	and	r2,r3,r2
 8010fd0:	1001703a 	wrctl	status,r2
  return context;
 8010fd4:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8010fd8:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 8010fdc:	800ffe80 	call	800ffe8 <alt_tick>
 8010fe0:	e0bfff17 	ldw	r2,-4(fp)
 8010fe4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8010fe8:	e0bffe17 	ldw	r2,-8(fp)
 8010fec:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8010ff0:	0001883a 	nop
 8010ff4:	e037883a 	mov	sp,fp
 8010ff8:	dfc00117 	ldw	ra,4(sp)
 8010ffc:	df000017 	ldw	fp,0(sp)
 8011000:	dec00204 	addi	sp,sp,8
 8011004:	f800283a 	ret

08011008 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8011008:	defff804 	addi	sp,sp,-32
 801100c:	dfc00715 	stw	ra,28(sp)
 8011010:	df000615 	stw	fp,24(sp)
 8011014:	df000604 	addi	fp,sp,24
 8011018:	e13ffe15 	stw	r4,-8(fp)
 801101c:	e17ffd15 	stw	r5,-12(fp)
 8011020:	e1bffc15 	stw	r6,-16(fp)
 8011024:	e1fffb15 	stw	r7,-20(fp)
 8011028:	e0bffb17 	ldw	r2,-20(fp)
 801102c:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8011030:	d0a72817 	ldw	r2,-25440(gp)
 8011034:	1000021e 	bne	r2,zero,8011040 <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8011038:	e0bfff17 	ldw	r2,-4(fp)
 801103c:	d0a72815 	stw	r2,-25440(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8011040:	e0bffe17 	ldw	r2,-8(fp)
 8011044:	10800104 	addi	r2,r2,4
 8011048:	00c001c4 	movi	r3,7
 801104c:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8011050:	d8000015 	stw	zero,0(sp)
 8011054:	e1fffe17 	ldw	r7,-8(fp)
 8011058:	01820074 	movhi	r6,2049
 801105c:	3183e404 	addi	r6,r6,3984
 8011060:	e17ffc17 	ldw	r5,-16(fp)
 8011064:	e13ffd17 	ldw	r4,-12(fp)
 8011068:	80114e80 	call	80114e8 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801106c:	0001883a 	nop
 8011070:	e037883a 	mov	sp,fp
 8011074:	dfc00117 	ldw	ra,4(sp)
 8011078:	df000017 	ldw	fp,0(sp)
 801107c:	dec00204 	addi	sp,sp,8
 8011080:	f800283a 	ret

08011084 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8011084:	defff504 	addi	sp,sp,-44
 8011088:	df000a15 	stw	fp,40(sp)
 801108c:	df000a04 	addi	fp,sp,40
 8011090:	e13ff915 	stw	r4,-28(fp)
 8011094:	e17ff815 	stw	r5,-32(fp)
 8011098:	e1bff715 	stw	r6,-36(fp)
 801109c:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 80110a0:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 80110a4:	d0a72817 	ldw	r2,-25440(gp)
  
  if (alt_ticks_per_second ())
 80110a8:	10003c26 	beq	r2,zero,801119c <alt_alarm_start+0x118>
  {
    if (alarm)
 80110ac:	e0bff917 	ldw	r2,-28(fp)
 80110b0:	10003826 	beq	r2,zero,8011194 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 80110b4:	e0bff917 	ldw	r2,-28(fp)
 80110b8:	e0fff717 	ldw	r3,-36(fp)
 80110bc:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 80110c0:	e0bff917 	ldw	r2,-28(fp)
 80110c4:	e0fff617 	ldw	r3,-40(fp)
 80110c8:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 80110cc:	0005303a 	rdctl	r2,status
 80110d0:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80110d4:	e0fffd17 	ldw	r3,-12(fp)
 80110d8:	00bfff84 	movi	r2,-2
 80110dc:	1884703a 	and	r2,r3,r2
 80110e0:	1001703a 	wrctl	status,r2
  return context;
 80110e4:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 80110e8:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 80110ec:	d0a72917 	ldw	r2,-25436(gp)
      
      current_nticks = alt_nticks();
 80110f0:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 80110f4:	e0fff817 	ldw	r3,-32(fp)
 80110f8:	e0bfff17 	ldw	r2,-4(fp)
 80110fc:	1885883a 	add	r2,r3,r2
 8011100:	10c00044 	addi	r3,r2,1
 8011104:	e0bff917 	ldw	r2,-28(fp)
 8011108:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801110c:	e0bff917 	ldw	r2,-28(fp)
 8011110:	10c00217 	ldw	r3,8(r2)
 8011114:	e0bfff17 	ldw	r2,-4(fp)
 8011118:	1880042e 	bgeu	r3,r2,801112c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 801111c:	e0bff917 	ldw	r2,-28(fp)
 8011120:	00c00044 	movi	r3,1
 8011124:	10c00405 	stb	r3,16(r2)
 8011128:	00000206 	br	8011134 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 801112c:	e0bff917 	ldw	r2,-28(fp)
 8011130:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8011134:	e0bff917 	ldw	r2,-28(fp)
 8011138:	d0e01004 	addi	r3,gp,-32704
 801113c:	e0fffb15 	stw	r3,-20(fp)
 8011140:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
 8011144:	e0bffa17 	ldw	r2,-24(fp)
 8011148:	e0fffb17 	ldw	r3,-20(fp)
 801114c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8011150:	e0bffb17 	ldw	r2,-20(fp)
 8011154:	10c00017 	ldw	r3,0(r2)
 8011158:	e0bffa17 	ldw	r2,-24(fp)
 801115c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8011160:	e0bffb17 	ldw	r2,-20(fp)
 8011164:	10800017 	ldw	r2,0(r2)
 8011168:	e0fffa17 	ldw	r3,-24(fp)
 801116c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8011170:	e0bffb17 	ldw	r2,-20(fp)
 8011174:	e0fffa17 	ldw	r3,-24(fp)
 8011178:	10c00015 	stw	r3,0(r2)
 801117c:	e0bffe17 	ldw	r2,-8(fp)
 8011180:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8011184:	e0bffc17 	ldw	r2,-16(fp)
 8011188:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801118c:	0005883a 	mov	r2,zero
 8011190:	00000306 	br	80111a0 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8011194:	00bffa84 	movi	r2,-22
 8011198:	00000106 	br	80111a0 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 801119c:	00bfde84 	movi	r2,-134
  }
}
 80111a0:	e037883a 	mov	sp,fp
 80111a4:	df000017 	ldw	fp,0(sp)
 80111a8:	dec00104 	addi	sp,sp,4
 80111ac:	f800283a 	ret

080111b0 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 80111b0:	defffa04 	addi	sp,sp,-24
 80111b4:	dfc00515 	stw	ra,20(sp)
 80111b8:	df000415 	stw	fp,16(sp)
 80111bc:	df000404 	addi	fp,sp,16
 80111c0:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 80111c4:	00800244 	movi	r2,9
 80111c8:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 80111cc:	014003f4 	movhi	r5,15
 80111d0:	29509004 	addi	r5,r5,16960
 80111d4:	e13ffe17 	ldw	r4,-8(fp)
 80111d8:	8002c3c0 	call	8002c3c <__mulsi3>
 80111dc:	100b883a 	mov	r5,r2
 80111e0:	0100bef4 	movhi	r4,763
 80111e4:	213c2004 	addi	r4,r4,-3968
 80111e8:	8002b7c0 	call	8002b7c <__udivsi3>
  big_loops = us / (INT_MAX/
 80111ec:	100b883a 	mov	r5,r2
 80111f0:	01200034 	movhi	r4,32768
 80111f4:	213fffc4 	addi	r4,r4,-1
 80111f8:	8002b7c0 	call	8002b7c <__udivsi3>
 80111fc:	100b883a 	mov	r5,r2
 8011200:	e13ffc17 	ldw	r4,-16(fp)
 8011204:	8002b7c0 	call	8002b7c <__udivsi3>
 8011208:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 801120c:	e0bffd17 	ldw	r2,-12(fp)
 8011210:	10002a26 	beq	r2,zero,80112bc <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8011214:	e03fff15 	stw	zero,-4(fp)
 8011218:	00001706 	br	8011278 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801121c:	00a00034 	movhi	r2,32768
 8011220:	10bfffc4 	addi	r2,r2,-1
 8011224:	10bfffc4 	addi	r2,r2,-1
 8011228:	103ffe1e 	bne	r2,zero,8011224 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801122c:	014003f4 	movhi	r5,15
 8011230:	29509004 	addi	r5,r5,16960
 8011234:	e13ffe17 	ldw	r4,-8(fp)
 8011238:	8002c3c0 	call	8002c3c <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801123c:	100b883a 	mov	r5,r2
 8011240:	0100bef4 	movhi	r4,763
 8011244:	213c2004 	addi	r4,r4,-3968
 8011248:	8002b7c0 	call	8002b7c <__udivsi3>
 801124c:	100b883a 	mov	r5,r2
 8011250:	01200034 	movhi	r4,32768
 8011254:	213fffc4 	addi	r4,r4,-1
 8011258:	8002b7c0 	call	8002b7c <__udivsi3>
 801125c:	1007883a 	mov	r3,r2
 8011260:	e0bffc17 	ldw	r2,-16(fp)
 8011264:	10c5c83a 	sub	r2,r2,r3
 8011268:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 801126c:	e0bfff17 	ldw	r2,-4(fp)
 8011270:	10800044 	addi	r2,r2,1
 8011274:	e0bfff15 	stw	r2,-4(fp)
 8011278:	e0ffff17 	ldw	r3,-4(fp)
 801127c:	e0bffd17 	ldw	r2,-12(fp)
 8011280:	18bfe616 	blt	r3,r2,801121c <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8011284:	014003f4 	movhi	r5,15
 8011288:	29509004 	addi	r5,r5,16960
 801128c:	e13ffe17 	ldw	r4,-8(fp)
 8011290:	8002c3c0 	call	8002c3c <__mulsi3>
 8011294:	100b883a 	mov	r5,r2
 8011298:	0100bef4 	movhi	r4,763
 801129c:	213c2004 	addi	r4,r4,-3968
 80112a0:	8002b7c0 	call	8002b7c <__udivsi3>
 80112a4:	e17ffc17 	ldw	r5,-16(fp)
 80112a8:	1009883a 	mov	r4,r2
 80112ac:	8002c3c0 	call	8002c3c <__mulsi3>
    __asm__ volatile (
 80112b0:	10bfffc4 	addi	r2,r2,-1
 80112b4:	103ffe1e 	bne	r2,zero,80112b0 <alt_busy_sleep+0x100>
 80112b8:	00000d06 	br	80112f0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 80112bc:	014003f4 	movhi	r5,15
 80112c0:	29509004 	addi	r5,r5,16960
 80112c4:	e13ffe17 	ldw	r4,-8(fp)
 80112c8:	8002c3c0 	call	8002c3c <__mulsi3>
 80112cc:	100b883a 	mov	r5,r2
 80112d0:	0100bef4 	movhi	r4,763
 80112d4:	213c2004 	addi	r4,r4,-3968
 80112d8:	8002b7c0 	call	8002b7c <__udivsi3>
 80112dc:	e17ffc17 	ldw	r5,-16(fp)
 80112e0:	1009883a 	mov	r4,r2
 80112e4:	8002c3c0 	call	8002c3c <__mulsi3>
    __asm__ volatile (
 80112e8:	10bfffc4 	addi	r2,r2,-1
 80112ec:	00bffe16 	blt	zero,r2,80112e8 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 80112f0:	0005883a 	mov	r2,zero
}
 80112f4:	e037883a 	mov	sp,fp
 80112f8:	dfc00117 	ldw	ra,4(sp)
 80112fc:	df000017 	ldw	fp,0(sp)
 8011300:	dec00204 	addi	sp,sp,8
 8011304:	f800283a 	ret

08011308 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8011308:	deffff04 	addi	sp,sp,-4
 801130c:	df000015 	stw	fp,0(sp)
 8011310:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8011314:	0001883a 	nop
 8011318:	e037883a 	mov	sp,fp
 801131c:	df000017 	ldw	fp,0(sp)
 8011320:	dec00104 	addi	sp,sp,4
 8011324:	f800283a 	ret

08011328 <alt_get_errno>:
{
 8011328:	defffe04 	addi	sp,sp,-8
 801132c:	dfc00115 	stw	ra,4(sp)
 8011330:	df000015 	stw	fp,0(sp)
 8011334:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011338:	d0a00e17 	ldw	r2,-32712(gp)
 801133c:	10000326 	beq	r2,zero,801134c <alt_get_errno+0x24>
 8011340:	d0a00e17 	ldw	r2,-32712(gp)
 8011344:	103ee83a 	callr	r2
 8011348:	00000106 	br	8011350 <alt_get_errno+0x28>
 801134c:	d0a72304 	addi	r2,gp,-25460
}
 8011350:	e037883a 	mov	sp,fp
 8011354:	dfc00117 	ldw	ra,4(sp)
 8011358:	df000017 	ldw	fp,0(sp)
 801135c:	dec00204 	addi	sp,sp,8
 8011360:	f800283a 	ret

08011364 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8011364:	defffa04 	addi	sp,sp,-24
 8011368:	dfc00515 	stw	ra,20(sp)
 801136c:	df000415 	stw	fp,16(sp)
 8011370:	df000404 	addi	fp,sp,16
 8011374:	e13ffd15 	stw	r4,-12(fp)
 8011378:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 801137c:	e0bffd17 	ldw	r2,-12(fp)
 8011380:	10000326 	beq	r2,zero,8011390 <alt_dev_llist_insert+0x2c>
 8011384:	e0bffd17 	ldw	r2,-12(fp)
 8011388:	10800217 	ldw	r2,8(r2)
 801138c:	1000061e 	bne	r2,zero,80113a8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8011390:	80113280 	call	8011328 <alt_get_errno>
 8011394:	1007883a 	mov	r3,r2
 8011398:	00800584 	movi	r2,22
 801139c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 80113a0:	00bffa84 	movi	r2,-22
 80113a4:	00001306 	br	80113f4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 80113a8:	e0bffd17 	ldw	r2,-12(fp)
 80113ac:	e0fffc17 	ldw	r3,-16(fp)
 80113b0:	e0ffff15 	stw	r3,-4(fp)
 80113b4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 80113b8:	e0bffe17 	ldw	r2,-8(fp)
 80113bc:	e0ffff17 	ldw	r3,-4(fp)
 80113c0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 80113c4:	e0bfff17 	ldw	r2,-4(fp)
 80113c8:	10c00017 	ldw	r3,0(r2)
 80113cc:	e0bffe17 	ldw	r2,-8(fp)
 80113d0:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 80113d4:	e0bfff17 	ldw	r2,-4(fp)
 80113d8:	10800017 	ldw	r2,0(r2)
 80113dc:	e0fffe17 	ldw	r3,-8(fp)
 80113e0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 80113e4:	e0bfff17 	ldw	r2,-4(fp)
 80113e8:	e0fffe17 	ldw	r3,-8(fp)
 80113ec:	10c00015 	stw	r3,0(r2)

  return 0;  
 80113f0:	0005883a 	mov	r2,zero
}
 80113f4:	e037883a 	mov	sp,fp
 80113f8:	dfc00117 	ldw	ra,4(sp)
 80113fc:	df000017 	ldw	fp,0(sp)
 8011400:	dec00204 	addi	sp,sp,8
 8011404:	f800283a 	ret

08011408 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8011408:	defffd04 	addi	sp,sp,-12
 801140c:	dfc00215 	stw	ra,8(sp)
 8011410:	df000115 	stw	fp,4(sp)
 8011414:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011418:	00820074 	movhi	r2,2049
 801141c:	10883f04 	addi	r2,r2,8444
 8011420:	e0bfff15 	stw	r2,-4(fp)
 8011424:	00000606 	br	8011440 <_do_ctors+0x38>
        (*ctor) (); 
 8011428:	e0bfff17 	ldw	r2,-4(fp)
 801142c:	10800017 	ldw	r2,0(r2)
 8011430:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8011434:	e0bfff17 	ldw	r2,-4(fp)
 8011438:	10bfff04 	addi	r2,r2,-4
 801143c:	e0bfff15 	stw	r2,-4(fp)
 8011440:	e0ffff17 	ldw	r3,-4(fp)
 8011444:	00820074 	movhi	r2,2049
 8011448:	10884004 	addi	r2,r2,8448
 801144c:	18bff62e 	bgeu	r3,r2,8011428 <_do_ctors+0x20>
}
 8011450:	0001883a 	nop
 8011454:	e037883a 	mov	sp,fp
 8011458:	dfc00117 	ldw	ra,4(sp)
 801145c:	df000017 	ldw	fp,0(sp)
 8011460:	dec00204 	addi	sp,sp,8
 8011464:	f800283a 	ret

08011468 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8011468:	defffd04 	addi	sp,sp,-12
 801146c:	dfc00215 	stw	ra,8(sp)
 8011470:	df000115 	stw	fp,4(sp)
 8011474:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011478:	00820074 	movhi	r2,2049
 801147c:	10883f04 	addi	r2,r2,8444
 8011480:	e0bfff15 	stw	r2,-4(fp)
 8011484:	00000606 	br	80114a0 <_do_dtors+0x38>
        (*dtor) (); 
 8011488:	e0bfff17 	ldw	r2,-4(fp)
 801148c:	10800017 	ldw	r2,0(r2)
 8011490:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011494:	e0bfff17 	ldw	r2,-4(fp)
 8011498:	10bfff04 	addi	r2,r2,-4
 801149c:	e0bfff15 	stw	r2,-4(fp)
 80114a0:	e0ffff17 	ldw	r3,-4(fp)
 80114a4:	00820074 	movhi	r2,2049
 80114a8:	10884004 	addi	r2,r2,8448
 80114ac:	18bff62e 	bgeu	r3,r2,8011488 <_do_dtors+0x20>
}
 80114b0:	0001883a 	nop
 80114b4:	e037883a 	mov	sp,fp
 80114b8:	dfc00117 	ldw	ra,4(sp)
 80114bc:	df000017 	ldw	fp,0(sp)
 80114c0:	dec00204 	addi	sp,sp,8
 80114c4:	f800283a 	ret

080114c8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 80114c8:	deffff04 	addi	sp,sp,-4
 80114cc:	df000015 	stw	fp,0(sp)
 80114d0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 80114d4:	0001883a 	nop
 80114d8:	e037883a 	mov	sp,fp
 80114dc:	df000017 	ldw	fp,0(sp)
 80114e0:	dec00104 	addi	sp,sp,4
 80114e4:	f800283a 	ret

080114e8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 80114e8:	defff904 	addi	sp,sp,-28
 80114ec:	dfc00615 	stw	ra,24(sp)
 80114f0:	df000515 	stw	fp,20(sp)
 80114f4:	df000504 	addi	fp,sp,20
 80114f8:	e13fff15 	stw	r4,-4(fp)
 80114fc:	e17ffe15 	stw	r5,-8(fp)
 8011500:	e1bffd15 	stw	r6,-12(fp)
 8011504:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 8011508:	e0800217 	ldw	r2,8(fp)
 801150c:	d8800015 	stw	r2,0(sp)
 8011510:	e1fffc17 	ldw	r7,-16(fp)
 8011514:	e1bffd17 	ldw	r6,-12(fp)
 8011518:	e17ffe17 	ldw	r5,-8(fp)
 801151c:	e13fff17 	ldw	r4,-4(fp)
 8011520:	80116980 	call	8011698 <alt_iic_isr_register>
}  
 8011524:	e037883a 	mov	sp,fp
 8011528:	dfc00117 	ldw	ra,4(sp)
 801152c:	df000017 	ldw	fp,0(sp)
 8011530:	dec00204 	addi	sp,sp,8
 8011534:	f800283a 	ret

08011538 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 8011538:	defff904 	addi	sp,sp,-28
 801153c:	df000615 	stw	fp,24(sp)
 8011540:	df000604 	addi	fp,sp,24
 8011544:	e13ffb15 	stw	r4,-20(fp)
 8011548:	e17ffa15 	stw	r5,-24(fp)
 801154c:	e0bffa17 	ldw	r2,-24(fp)
 8011550:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8011554:	0005303a 	rdctl	r2,status
 8011558:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801155c:	e0fffe17 	ldw	r3,-8(fp)
 8011560:	00bfff84 	movi	r2,-2
 8011564:	1884703a 	and	r2,r3,r2
 8011568:	1001703a 	wrctl	status,r2
  return context;
 801156c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 8011570:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8011574:	00c00044 	movi	r3,1
 8011578:	e0bfff17 	ldw	r2,-4(fp)
 801157c:	1884983a 	sll	r2,r3,r2
 8011580:	1007883a 	mov	r3,r2
 8011584:	d0a72a17 	ldw	r2,-25432(gp)
 8011588:	1884b03a 	or	r2,r3,r2
 801158c:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 8011590:	d0a72a17 	ldw	r2,-25432(gp)
 8011594:	100170fa 	wrctl	ienable,r2
 8011598:	e0bffd17 	ldw	r2,-12(fp)
 801159c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80115a0:	e0bffc17 	ldw	r2,-16(fp)
 80115a4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 80115a8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 80115ac:	0001883a 	nop
}
 80115b0:	e037883a 	mov	sp,fp
 80115b4:	df000017 	ldw	fp,0(sp)
 80115b8:	dec00104 	addi	sp,sp,4
 80115bc:	f800283a 	ret

080115c0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 80115c0:	defff904 	addi	sp,sp,-28
 80115c4:	df000615 	stw	fp,24(sp)
 80115c8:	df000604 	addi	fp,sp,24
 80115cc:	e13ffb15 	stw	r4,-20(fp)
 80115d0:	e17ffa15 	stw	r5,-24(fp)
 80115d4:	e0bffa17 	ldw	r2,-24(fp)
 80115d8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 80115dc:	0005303a 	rdctl	r2,status
 80115e0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80115e4:	e0fffe17 	ldw	r3,-8(fp)
 80115e8:	00bfff84 	movi	r2,-2
 80115ec:	1884703a 	and	r2,r3,r2
 80115f0:	1001703a 	wrctl	status,r2
  return context;
 80115f4:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 80115f8:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 80115fc:	00c00044 	movi	r3,1
 8011600:	e0bfff17 	ldw	r2,-4(fp)
 8011604:	1884983a 	sll	r2,r3,r2
 8011608:	0084303a 	nor	r2,zero,r2
 801160c:	1007883a 	mov	r3,r2
 8011610:	d0a72a17 	ldw	r2,-25432(gp)
 8011614:	1884703a 	and	r2,r3,r2
 8011618:	d0a72a15 	stw	r2,-25432(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801161c:	d0a72a17 	ldw	r2,-25432(gp)
 8011620:	100170fa 	wrctl	ienable,r2
 8011624:	e0bffd17 	ldw	r2,-12(fp)
 8011628:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801162c:	e0bffc17 	ldw	r2,-16(fp)
 8011630:	1001703a 	wrctl	status,r2
  return 0;
 8011634:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 8011638:	0001883a 	nop
}
 801163c:	e037883a 	mov	sp,fp
 8011640:	df000017 	ldw	fp,0(sp)
 8011644:	dec00104 	addi	sp,sp,4
 8011648:	f800283a 	ret

0801164c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801164c:	defffc04 	addi	sp,sp,-16
 8011650:	df000315 	stw	fp,12(sp)
 8011654:	df000304 	addi	fp,sp,12
 8011658:	e13ffe15 	stw	r4,-8(fp)
 801165c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 8011660:	000530fa 	rdctl	r2,ienable
 8011664:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8011668:	00c00044 	movi	r3,1
 801166c:	e0bffd17 	ldw	r2,-12(fp)
 8011670:	1884983a 	sll	r2,r3,r2
 8011674:	1007883a 	mov	r3,r2
 8011678:	e0bfff17 	ldw	r2,-4(fp)
 801167c:	1884703a 	and	r2,r3,r2
 8011680:	1004c03a 	cmpne	r2,r2,zero
 8011684:	10803fcc 	andi	r2,r2,255
}
 8011688:	e037883a 	mov	sp,fp
 801168c:	df000017 	ldw	fp,0(sp)
 8011690:	dec00104 	addi	sp,sp,4
 8011694:	f800283a 	ret

08011698 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011698:	defff504 	addi	sp,sp,-44
 801169c:	dfc00a15 	stw	ra,40(sp)
 80116a0:	df000915 	stw	fp,36(sp)
 80116a4:	df000904 	addi	fp,sp,36
 80116a8:	e13ffa15 	stw	r4,-24(fp)
 80116ac:	e17ff915 	stw	r5,-28(fp)
 80116b0:	e1bff815 	stw	r6,-32(fp)
 80116b4:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 80116b8:	00bffa84 	movi	r2,-22
 80116bc:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 80116c0:	e0bff917 	ldw	r2,-28(fp)
 80116c4:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 80116c8:	e0bffe17 	ldw	r2,-8(fp)
 80116cc:	10800808 	cmpgei	r2,r2,32
 80116d0:	1000241e 	bne	r2,zero,8011764 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
 80116d4:	0005303a 	rdctl	r2,status
 80116d8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80116dc:	e0fffc17 	ldw	r3,-16(fp)
 80116e0:	00bfff84 	movi	r2,-2
 80116e4:	1884703a 	and	r2,r3,r2
 80116e8:	1001703a 	wrctl	status,r2
  return context;
 80116ec:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 80116f0:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 80116f4:	e0bffe17 	ldw	r2,-8(fp)
 80116f8:	100890fa 	slli	r4,r2,3
 80116fc:	e0fff817 	ldw	r3,-32(fp)
 8011700:	00820074 	movhi	r2,2049
 8011704:	2085883a 	add	r2,r4,r2
 8011708:	10d8cd15 	stw	r3,25396(r2)
    alt_irq[id].context = isr_context;
 801170c:	e0bffe17 	ldw	r2,-8(fp)
 8011710:	100890fa 	slli	r4,r2,3
 8011714:	e0fff717 	ldw	r3,-36(fp)
 8011718:	00820074 	movhi	r2,2049
 801171c:	2085883a 	add	r2,r4,r2
 8011720:	10d8ce15 	stw	r3,25400(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 8011724:	e0bff817 	ldw	r2,-32(fp)
 8011728:	10000526 	beq	r2,zero,8011740 <alt_iic_isr_register+0xa8>
 801172c:	e0bffe17 	ldw	r2,-8(fp)
 8011730:	100b883a 	mov	r5,r2
 8011734:	e13ffa17 	ldw	r4,-24(fp)
 8011738:	80115380 	call	8011538 <alt_ic_irq_enable>
 801173c:	00000406 	br	8011750 <alt_iic_isr_register+0xb8>
 8011740:	e0bffe17 	ldw	r2,-8(fp)
 8011744:	100b883a 	mov	r5,r2
 8011748:	e13ffa17 	ldw	r4,-24(fp)
 801174c:	80115c00 	call	80115c0 <alt_ic_irq_disable>
 8011750:	e0bfff15 	stw	r2,-4(fp)
 8011754:	e0bffd17 	ldw	r2,-12(fp)
 8011758:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 801175c:	e0bffb17 	ldw	r2,-20(fp)
 8011760:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8011764:	e0bfff17 	ldw	r2,-4(fp)
}
 8011768:	e037883a 	mov	sp,fp
 801176c:	dfc00117 	ldw	ra,4(sp)
 8011770:	df000017 	ldw	fp,0(sp)
 8011774:	dec00204 	addi	sp,sp,8
 8011778:	f800283a 	ret

0801177c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801177c:	defff904 	addi	sp,sp,-28
 8011780:	dfc00615 	stw	ra,24(sp)
 8011784:	df000515 	stw	fp,20(sp)
 8011788:	df000504 	addi	fp,sp,20
 801178c:	e13ffe15 	stw	r4,-8(fp)
 8011790:	e17ffd15 	stw	r5,-12(fp)
 8011794:	e1bffc15 	stw	r6,-16(fp)
 8011798:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 801179c:	e1bffb17 	ldw	r6,-20(fp)
 80117a0:	e17ffc17 	ldw	r5,-16(fp)
 80117a4:	e13ffd17 	ldw	r4,-12(fp)
 80117a8:	80119e40 	call	80119e4 <open>
 80117ac:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 80117b0:	e0bfff17 	ldw	r2,-4(fp)
 80117b4:	10002016 	blt	r2,zero,8011838 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 80117b8:	e0ffff17 	ldw	r3,-4(fp)
 80117bc:	1805883a 	mov	r2,r3
 80117c0:	1085883a 	add	r2,r2,r2
 80117c4:	10c5883a 	add	r2,r2,r3
 80117c8:	100490ba 	slli	r2,r2,2
 80117cc:	00c20074 	movhi	r3,2049
 80117d0:	10c7883a 	add	r3,r2,r3
 80117d4:	18ccc317 	ldw	r3,13068(r3)
 80117d8:	e0bffe17 	ldw	r2,-8(fp)
 80117dc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 80117e0:	e0ffff17 	ldw	r3,-4(fp)
 80117e4:	1805883a 	mov	r2,r3
 80117e8:	1085883a 	add	r2,r2,r2
 80117ec:	10c5883a 	add	r2,r2,r3
 80117f0:	100490ba 	slli	r2,r2,2
 80117f4:	00c20074 	movhi	r3,2049
 80117f8:	10c7883a 	add	r3,r2,r3
 80117fc:	18ccc417 	ldw	r3,13072(r3)
 8011800:	e0bffe17 	ldw	r2,-8(fp)
 8011804:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 8011808:	e0ffff17 	ldw	r3,-4(fp)
 801180c:	1805883a 	mov	r2,r3
 8011810:	1085883a 	add	r2,r2,r2
 8011814:	10c5883a 	add	r2,r2,r3
 8011818:	100490ba 	slli	r2,r2,2
 801181c:	00c20074 	movhi	r3,2049
 8011820:	10c7883a 	add	r3,r2,r3
 8011824:	18ccc517 	ldw	r3,13076(r3)
 8011828:	e0bffe17 	ldw	r2,-8(fp)
 801182c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 8011830:	e13fff17 	ldw	r4,-4(fp)
 8011834:	800fe2c0 	call	800fe2c <alt_release_fd>
  }
} 
 8011838:	0001883a 	nop
 801183c:	e037883a 	mov	sp,fp
 8011840:	dfc00117 	ldw	ra,4(sp)
 8011844:	df000017 	ldw	fp,0(sp)
 8011848:	dec00204 	addi	sp,sp,8
 801184c:	f800283a 	ret

08011850 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 8011850:	defffb04 	addi	sp,sp,-20
 8011854:	dfc00415 	stw	ra,16(sp)
 8011858:	df000315 	stw	fp,12(sp)
 801185c:	df000304 	addi	fp,sp,12
 8011860:	e13fff15 	stw	r4,-4(fp)
 8011864:	e17ffe15 	stw	r5,-8(fp)
 8011868:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801186c:	01c07fc4 	movi	r7,511
 8011870:	01800044 	movi	r6,1
 8011874:	e17fff17 	ldw	r5,-4(fp)
 8011878:	01020074 	movhi	r4,2049
 801187c:	210cc604 	addi	r4,r4,13080
 8011880:	801177c0 	call	801177c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011884:	01c07fc4 	movi	r7,511
 8011888:	000d883a 	mov	r6,zero
 801188c:	e17ffe17 	ldw	r5,-8(fp)
 8011890:	01020074 	movhi	r4,2049
 8011894:	210cc304 	addi	r4,r4,13068
 8011898:	801177c0 	call	801177c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801189c:	01c07fc4 	movi	r7,511
 80118a0:	01800044 	movi	r6,1
 80118a4:	e17ffd17 	ldw	r5,-12(fp)
 80118a8:	01020074 	movhi	r4,2049
 80118ac:	210cc904 	addi	r4,r4,13092
 80118b0:	801177c0 	call	801177c <alt_open_fd>
}  
 80118b4:	0001883a 	nop
 80118b8:	e037883a 	mov	sp,fp
 80118bc:	dfc00117 	ldw	ra,4(sp)
 80118c0:	df000017 	ldw	fp,0(sp)
 80118c4:	dec00204 	addi	sp,sp,8
 80118c8:	f800283a 	ret

080118cc <alt_get_errno>:
{
 80118cc:	defffe04 	addi	sp,sp,-8
 80118d0:	dfc00115 	stw	ra,4(sp)
 80118d4:	df000015 	stw	fp,0(sp)
 80118d8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 80118dc:	d0a00e17 	ldw	r2,-32712(gp)
 80118e0:	10000326 	beq	r2,zero,80118f0 <alt_get_errno+0x24>
 80118e4:	d0a00e17 	ldw	r2,-32712(gp)
 80118e8:	103ee83a 	callr	r2
 80118ec:	00000106 	br	80118f4 <alt_get_errno+0x28>
 80118f0:	d0a72304 	addi	r2,gp,-25460
}
 80118f4:	e037883a 	mov	sp,fp
 80118f8:	dfc00117 	ldw	ra,4(sp)
 80118fc:	df000017 	ldw	fp,0(sp)
 8011900:	dec00204 	addi	sp,sp,8
 8011904:	f800283a 	ret

08011908 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 8011908:	defffd04 	addi	sp,sp,-12
 801190c:	df000215 	stw	fp,8(sp)
 8011910:	df000204 	addi	fp,sp,8
 8011914:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 8011918:	e0bffe17 	ldw	r2,-8(fp)
 801191c:	10800217 	ldw	r2,8(r2)
 8011920:	10d00034 	orhi	r3,r2,16384
 8011924:	e0bffe17 	ldw	r2,-8(fp)
 8011928:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801192c:	e03fff15 	stw	zero,-4(fp)
 8011930:	00002306 	br	80119c0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011934:	e0ffff17 	ldw	r3,-4(fp)
 8011938:	1805883a 	mov	r2,r3
 801193c:	1085883a 	add	r2,r2,r2
 8011940:	10c5883a 	add	r2,r2,r3
 8011944:	100490ba 	slli	r2,r2,2
 8011948:	00c20074 	movhi	r3,2049
 801194c:	10c7883a 	add	r3,r2,r3
 8011950:	18ccc317 	ldw	r3,13068(r3)
 8011954:	e0bffe17 	ldw	r2,-8(fp)
 8011958:	10800017 	ldw	r2,0(r2)
 801195c:	1880151e 	bne	r3,r2,80119b4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011960:	e0ffff17 	ldw	r3,-4(fp)
 8011964:	1805883a 	mov	r2,r3
 8011968:	1085883a 	add	r2,r2,r2
 801196c:	10c5883a 	add	r2,r2,r3
 8011970:	100490ba 	slli	r2,r2,2
 8011974:	00c20074 	movhi	r3,2049
 8011978:	10c7883a 	add	r3,r2,r3
 801197c:	188cc517 	ldw	r2,13076(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 8011980:	10000c0e 	bge	r2,zero,80119b4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8011984:	e0ffff17 	ldw	r3,-4(fp)
 8011988:	1805883a 	mov	r2,r3
 801198c:	1085883a 	add	r2,r2,r2
 8011990:	10c5883a 	add	r2,r2,r3
 8011994:	100490ba 	slli	r2,r2,2
 8011998:	00c20074 	movhi	r3,2049
 801199c:	18ccc304 	addi	r3,r3,13068
 80119a0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80119a4:	e0fffe17 	ldw	r3,-8(fp)
 80119a8:	18800226 	beq	r3,r2,80119b4 <alt_file_locked+0xac>
    {
      return -EACCES;
 80119ac:	00bffcc4 	movi	r2,-13
 80119b0:	00000806 	br	80119d4 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 80119b4:	e0bfff17 	ldw	r2,-4(fp)
 80119b8:	10800044 	addi	r2,r2,1
 80119bc:	e0bfff15 	stw	r2,-4(fp)
 80119c0:	d0a00d17 	ldw	r2,-32716(gp)
 80119c4:	1007883a 	mov	r3,r2
 80119c8:	e0bfff17 	ldw	r2,-4(fp)
 80119cc:	18bfd92e 	bgeu	r3,r2,8011934 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 80119d0:	0005883a 	mov	r2,zero
}
 80119d4:	e037883a 	mov	sp,fp
 80119d8:	df000017 	ldw	fp,0(sp)
 80119dc:	dec00104 	addi	sp,sp,4
 80119e0:	f800283a 	ret

080119e4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 80119e4:	defff604 	addi	sp,sp,-40
 80119e8:	dfc00915 	stw	ra,36(sp)
 80119ec:	df000815 	stw	fp,32(sp)
 80119f0:	df000804 	addi	fp,sp,32
 80119f4:	e13ffa15 	stw	r4,-24(fp)
 80119f8:	e17ff915 	stw	r5,-28(fp)
 80119fc:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 8011a00:	00bfffc4 	movi	r2,-1
 8011a04:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 8011a08:	00bffb44 	movi	r2,-19
 8011a0c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 8011a10:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 8011a14:	d1600b04 	addi	r5,gp,-32724
 8011a18:	e13ffa17 	ldw	r4,-24(fp)
 8011a1c:	8011b680 	call	8011b68 <alt_find_dev>
 8011a20:	e0bfff15 	stw	r2,-4(fp)
 8011a24:	e0bfff17 	ldw	r2,-4(fp)
 8011a28:	1000051e 	bne	r2,zero,8011a40 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 8011a2c:	e13ffa17 	ldw	r4,-24(fp)
 8011a30:	8011bf80 	call	8011bf8 <alt_find_file>
 8011a34:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 8011a38:	00800044 	movi	r2,1
 8011a3c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 8011a40:	e0bfff17 	ldw	r2,-4(fp)
 8011a44:	10002c26 	beq	r2,zero,8011af8 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 8011a48:	e13fff17 	ldw	r4,-4(fp)
 8011a4c:	8011d000 	call	8011d00 <alt_get_fd>
 8011a50:	e0bffe15 	stw	r2,-8(fp)
 8011a54:	e0bffe17 	ldw	r2,-8(fp)
 8011a58:	1000030e 	bge	r2,zero,8011a68 <open+0x84>
    {
      status = index;
 8011a5c:	e0bffe17 	ldw	r2,-8(fp)
 8011a60:	e0bffd15 	stw	r2,-12(fp)
 8011a64:	00002606 	br	8011b00 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8011a68:	e0fffe17 	ldw	r3,-8(fp)
 8011a6c:	1805883a 	mov	r2,r3
 8011a70:	1085883a 	add	r2,r2,r2
 8011a74:	10c5883a 	add	r2,r2,r3
 8011a78:	100490ba 	slli	r2,r2,2
 8011a7c:	00c20074 	movhi	r3,2049
 8011a80:	18ccc304 	addi	r3,r3,13068
 8011a84:	10c5883a 	add	r2,r2,r3
 8011a88:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8011a8c:	e0fff917 	ldw	r3,-28(fp)
 8011a90:	00900034 	movhi	r2,16384
 8011a94:	10bfffc4 	addi	r2,r2,-1
 8011a98:	1886703a 	and	r3,r3,r2
 8011a9c:	e0bffb17 	ldw	r2,-20(fp)
 8011aa0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8011aa4:	e0bffc17 	ldw	r2,-16(fp)
 8011aa8:	1000051e 	bne	r2,zero,8011ac0 <open+0xdc>
 8011aac:	e13ffb17 	ldw	r4,-20(fp)
 8011ab0:	80119080 	call	8011908 <alt_file_locked>
 8011ab4:	e0bffd15 	stw	r2,-12(fp)
 8011ab8:	e0bffd17 	ldw	r2,-12(fp)
 8011abc:	10001016 	blt	r2,zero,8011b00 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 8011ac0:	e0bfff17 	ldw	r2,-4(fp)
 8011ac4:	10800317 	ldw	r2,12(r2)
 8011ac8:	10000826 	beq	r2,zero,8011aec <open+0x108>
 8011acc:	e0bfff17 	ldw	r2,-4(fp)
 8011ad0:	10800317 	ldw	r2,12(r2)
 8011ad4:	e1fff817 	ldw	r7,-32(fp)
 8011ad8:	e1bff917 	ldw	r6,-28(fp)
 8011adc:	e17ffa17 	ldw	r5,-24(fp)
 8011ae0:	e13ffb17 	ldw	r4,-20(fp)
 8011ae4:	103ee83a 	callr	r2
 8011ae8:	00000106 	br	8011af0 <open+0x10c>
 8011aec:	0005883a 	mov	r2,zero
 8011af0:	e0bffd15 	stw	r2,-12(fp)
 8011af4:	00000206 	br	8011b00 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8011af8:	00bffb44 	movi	r2,-19
 8011afc:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 8011b00:	e0bffd17 	ldw	r2,-12(fp)
 8011b04:	1000090e 	bge	r2,zero,8011b2c <open+0x148>
  {
    alt_release_fd (index);  
 8011b08:	e13ffe17 	ldw	r4,-8(fp)
 8011b0c:	800fe2c0 	call	800fe2c <alt_release_fd>
    ALT_ERRNO = -status;
 8011b10:	80118cc0 	call	80118cc <alt_get_errno>
 8011b14:	1007883a 	mov	r3,r2
 8011b18:	e0bffd17 	ldw	r2,-12(fp)
 8011b1c:	0085c83a 	sub	r2,zero,r2
 8011b20:	18800015 	stw	r2,0(r3)
    return -1;
 8011b24:	00bfffc4 	movi	r2,-1
 8011b28:	00000106 	br	8011b30 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 8011b2c:	e0bffe17 	ldw	r2,-8(fp)
}
 8011b30:	e037883a 	mov	sp,fp
 8011b34:	dfc00117 	ldw	ra,4(sp)
 8011b38:	df000017 	ldw	fp,0(sp)
 8011b3c:	dec00204 	addi	sp,sp,8
 8011b40:	f800283a 	ret

08011b44 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 8011b44:	deffff04 	addi	sp,sp,-4
 8011b48:	df000015 	stw	fp,0(sp)
 8011b4c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 8011b50:	000170fa 	wrctl	ienable,zero
}
 8011b54:	0001883a 	nop
 8011b58:	e037883a 	mov	sp,fp
 8011b5c:	df000017 	ldw	fp,0(sp)
 8011b60:	dec00104 	addi	sp,sp,4
 8011b64:	f800283a 	ret

08011b68 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8011b68:	defffa04 	addi	sp,sp,-24
 8011b6c:	dfc00515 	stw	ra,20(sp)
 8011b70:	df000415 	stw	fp,16(sp)
 8011b74:	df000404 	addi	fp,sp,16
 8011b78:	e13ffd15 	stw	r4,-12(fp)
 8011b7c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 8011b80:	e0bffc17 	ldw	r2,-16(fp)
 8011b84:	10800017 	ldw	r2,0(r2)
 8011b88:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8011b8c:	e13ffd17 	ldw	r4,-12(fp)
 8011b90:	8002dc80 	call	8002dc8 <strlen>
 8011b94:	10800044 	addi	r2,r2,1
 8011b98:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011b9c:	00000d06 	br	8011bd4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 8011ba0:	e0bfff17 	ldw	r2,-4(fp)
 8011ba4:	10800217 	ldw	r2,8(r2)
 8011ba8:	e0fffe17 	ldw	r3,-8(fp)
 8011bac:	180d883a 	mov	r6,r3
 8011bb0:	e17ffd17 	ldw	r5,-12(fp)
 8011bb4:	1009883a 	mov	r4,r2
 8011bb8:	8011e980 	call	8011e98 <memcmp>
 8011bbc:	1000021e 	bne	r2,zero,8011bc8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 8011bc0:	e0bfff17 	ldw	r2,-4(fp)
 8011bc4:	00000706 	br	8011be4 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8011bc8:	e0bfff17 	ldw	r2,-4(fp)
 8011bcc:	10800017 	ldw	r2,0(r2)
 8011bd0:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 8011bd4:	e0ffff17 	ldw	r3,-4(fp)
 8011bd8:	e0bffc17 	ldw	r2,-16(fp)
 8011bdc:	18bff01e 	bne	r3,r2,8011ba0 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 8011be0:	0005883a 	mov	r2,zero
}
 8011be4:	e037883a 	mov	sp,fp
 8011be8:	dfc00117 	ldw	ra,4(sp)
 8011bec:	df000017 	ldw	fp,0(sp)
 8011bf0:	dec00204 	addi	sp,sp,8
 8011bf4:	f800283a 	ret

08011bf8 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8011bf8:	defffb04 	addi	sp,sp,-20
 8011bfc:	dfc00415 	stw	ra,16(sp)
 8011c00:	df000315 	stw	fp,12(sp)
 8011c04:	df000304 	addi	fp,sp,12
 8011c08:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 8011c0c:	d0a00917 	ldw	r2,-32732(gp)
 8011c10:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 8011c14:	00003106 	br	8011cdc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 8011c18:	e0bfff17 	ldw	r2,-4(fp)
 8011c1c:	10800217 	ldw	r2,8(r2)
 8011c20:	1009883a 	mov	r4,r2
 8011c24:	8002dc80 	call	8002dc8 <strlen>
 8011c28:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 8011c2c:	e0bfff17 	ldw	r2,-4(fp)
 8011c30:	10c00217 	ldw	r3,8(r2)
 8011c34:	e0bffe17 	ldw	r2,-8(fp)
 8011c38:	10bfffc4 	addi	r2,r2,-1
 8011c3c:	1885883a 	add	r2,r3,r2
 8011c40:	10800003 	ldbu	r2,0(r2)
 8011c44:	10803fcc 	andi	r2,r2,255
 8011c48:	1080201c 	xori	r2,r2,128
 8011c4c:	10bfe004 	addi	r2,r2,-128
 8011c50:	10800bd8 	cmpnei	r2,r2,47
 8011c54:	1000031e 	bne	r2,zero,8011c64 <alt_find_file+0x6c>
    {
      len -= 1;
 8011c58:	e0bffe17 	ldw	r2,-8(fp)
 8011c5c:	10bfffc4 	addi	r2,r2,-1
 8011c60:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011c64:	e0bffe17 	ldw	r2,-8(fp)
 8011c68:	e0fffd17 	ldw	r3,-12(fp)
 8011c6c:	1885883a 	add	r2,r3,r2
 8011c70:	10800003 	ldbu	r2,0(r2)
 8011c74:	10803fcc 	andi	r2,r2,255
 8011c78:	1080201c 	xori	r2,r2,128
 8011c7c:	10bfe004 	addi	r2,r2,-128
 8011c80:	10800be0 	cmpeqi	r2,r2,47
 8011c84:	1000081e 	bne	r2,zero,8011ca8 <alt_find_file+0xb0>
 8011c88:	e0bffe17 	ldw	r2,-8(fp)
 8011c8c:	e0fffd17 	ldw	r3,-12(fp)
 8011c90:	1885883a 	add	r2,r3,r2
 8011c94:	10800003 	ldbu	r2,0(r2)
 8011c98:	10803fcc 	andi	r2,r2,255
 8011c9c:	1080201c 	xori	r2,r2,128
 8011ca0:	10bfe004 	addi	r2,r2,-128
 8011ca4:	10000a1e 	bne	r2,zero,8011cd0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8011ca8:	e0bfff17 	ldw	r2,-4(fp)
 8011cac:	10800217 	ldw	r2,8(r2)
 8011cb0:	e0fffe17 	ldw	r3,-8(fp)
 8011cb4:	180d883a 	mov	r6,r3
 8011cb8:	e17ffd17 	ldw	r5,-12(fp)
 8011cbc:	1009883a 	mov	r4,r2
 8011cc0:	8011e980 	call	8011e98 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011cc4:	1000021e 	bne	r2,zero,8011cd0 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8011cc8:	e0bfff17 	ldw	r2,-4(fp)
 8011ccc:	00000706 	br	8011cec <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 8011cd0:	e0bfff17 	ldw	r2,-4(fp)
 8011cd4:	10800017 	ldw	r2,0(r2)
 8011cd8:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8011cdc:	e0ffff17 	ldw	r3,-4(fp)
 8011ce0:	d0a00904 	addi	r2,gp,-32732
 8011ce4:	18bfcc1e 	bne	r3,r2,8011c18 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8011ce8:	0005883a 	mov	r2,zero
}
 8011cec:	e037883a 	mov	sp,fp
 8011cf0:	dfc00117 	ldw	ra,4(sp)
 8011cf4:	df000017 	ldw	fp,0(sp)
 8011cf8:	dec00204 	addi	sp,sp,8
 8011cfc:	f800283a 	ret

08011d00 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 8011d00:	defffc04 	addi	sp,sp,-16
 8011d04:	df000315 	stw	fp,12(sp)
 8011d08:	df000304 	addi	fp,sp,12
 8011d0c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 8011d10:	00bffa04 	movi	r2,-24
 8011d14:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 8011d18:	e03fff15 	stw	zero,-4(fp)
 8011d1c:	00001d06 	br	8011d94 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 8011d20:	e0ffff17 	ldw	r3,-4(fp)
 8011d24:	1805883a 	mov	r2,r3
 8011d28:	1085883a 	add	r2,r2,r2
 8011d2c:	10c5883a 	add	r2,r2,r3
 8011d30:	100490ba 	slli	r2,r2,2
 8011d34:	00c20074 	movhi	r3,2049
 8011d38:	10c7883a 	add	r3,r2,r3
 8011d3c:	188cc317 	ldw	r2,13068(r3)
 8011d40:	1000111e 	bne	r2,zero,8011d88 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 8011d44:	e0ffff17 	ldw	r3,-4(fp)
 8011d48:	1805883a 	mov	r2,r3
 8011d4c:	1085883a 	add	r2,r2,r2
 8011d50:	10c5883a 	add	r2,r2,r3
 8011d54:	100490ba 	slli	r2,r2,2
 8011d58:	e13ffd17 	ldw	r4,-12(fp)
 8011d5c:	00c20074 	movhi	r3,2049
 8011d60:	10c7883a 	add	r3,r2,r3
 8011d64:	190cc315 	stw	r4,13068(r3)
      if (i > alt_max_fd)
 8011d68:	d0e00d17 	ldw	r3,-32716(gp)
 8011d6c:	e0bfff17 	ldw	r2,-4(fp)
 8011d70:	1880020e 	bge	r3,r2,8011d7c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8011d74:	e0bfff17 	ldw	r2,-4(fp)
 8011d78:	d0a00d15 	stw	r2,-32716(gp)
      }
      rc = i;
 8011d7c:	e0bfff17 	ldw	r2,-4(fp)
 8011d80:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011d84:	00000706 	br	8011da4 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8011d88:	e0bfff17 	ldw	r2,-4(fp)
 8011d8c:	10800044 	addi	r2,r2,1
 8011d90:	e0bfff15 	stw	r2,-4(fp)
 8011d94:	e0bfff17 	ldw	r2,-4(fp)
 8011d98:	10800810 	cmplti	r2,r2,32
 8011d9c:	103fe01e 	bne	r2,zero,8011d20 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 8011da0:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011da4:	e0bffe17 	ldw	r2,-8(fp)
}
 8011da8:	e037883a 	mov	sp,fp
 8011dac:	df000017 	ldw	fp,0(sp)
 8011db0:	dec00104 	addi	sp,sp,4
 8011db4:	f800283a 	ret

08011db8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011db8:	defffe04 	addi	sp,sp,-8
 8011dbc:	df000115 	stw	fp,4(sp)
 8011dc0:	df000104 	addi	fp,sp,4
 8011dc4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011dc8:	e0bfff17 	ldw	r2,-4(fp)
 8011dcc:	10bffe84 	addi	r2,r2,-6
 8011dd0:	10c00428 	cmpgeui	r3,r2,16
 8011dd4:	1800191e 	bne	r3,zero,8011e3c <alt_exception_cause_generated_bad_addr+0x84>
 8011dd8:	100690ba 	slli	r3,r2,2
 8011ddc:	00820074 	movhi	r2,2049
 8011de0:	1885883a 	add	r2,r3,r2
 8011de4:	10877b17 	ldw	r2,7660(r2)
 8011de8:	1000683a 	jmp	r2
 8011dec:	08011e2c 	andhi	zero,at,1144
 8011df0:	08011e2c 	andhi	zero,at,1144
 8011df4:	08011e3c 	xorhi	zero,at,1144
 8011df8:	08011e3c 	xorhi	zero,at,1144
 8011dfc:	08011e3c 	xorhi	zero,at,1144
 8011e00:	08011e2c 	andhi	zero,at,1144
 8011e04:	08011e34 	orhi	zero,at,1144
 8011e08:	08011e3c 	xorhi	zero,at,1144
 8011e0c:	08011e2c 	andhi	zero,at,1144
 8011e10:	08011e2c 	andhi	zero,at,1144
 8011e14:	08011e3c 	xorhi	zero,at,1144
 8011e18:	08011e2c 	andhi	zero,at,1144
 8011e1c:	08011e34 	orhi	zero,at,1144
 8011e20:	08011e3c 	xorhi	zero,at,1144
 8011e24:	08011e3c 	xorhi	zero,at,1144
 8011e28:	08011e2c 	andhi	zero,at,1144
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 8011e2c:	00800044 	movi	r2,1
 8011e30:	00000306 	br	8011e40 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 8011e34:	0005883a 	mov	r2,zero
 8011e38:	00000106 	br	8011e40 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 8011e3c:	0005883a 	mov	r2,zero
  }
}
 8011e40:	e037883a 	mov	sp,fp
 8011e44:	df000017 	ldw	fp,0(sp)
 8011e48:	dec00104 	addi	sp,sp,4
 8011e4c:	f800283a 	ret

08011e50 <atexit>:
 8011e50:	200b883a 	mov	r5,r4
 8011e54:	000f883a 	mov	r7,zero
 8011e58:	000d883a 	mov	r6,zero
 8011e5c:	0009883a 	mov	r4,zero
 8011e60:	8011f241 	jmpi	8011f24 <__register_exitproc>

08011e64 <exit>:
 8011e64:	defffe04 	addi	sp,sp,-8
 8011e68:	000b883a 	mov	r5,zero
 8011e6c:	dc000015 	stw	r16,0(sp)
 8011e70:	dfc00115 	stw	ra,4(sp)
 8011e74:	2021883a 	mov	r16,r4
 8011e78:	8011fb40 	call	8011fb4 <__call_exitprocs>
 8011e7c:	00820074 	movhi	r2,2049
 8011e80:	11114017 	ldw	r4,17664(r2)
 8011e84:	20800f17 	ldw	r2,60(r4)
 8011e88:	10000126 	beq	r2,zero,8011e90 <exit+0x2c>
 8011e8c:	103ee83a 	callr	r2
 8011e90:	8009883a 	mov	r4,r16
 8011e94:	80120cc0 	call	80120cc <_exit>

08011e98 <memcmp>:
 8011e98:	30800130 	cmpltui	r2,r6,4
 8011e9c:	10000b1e 	bne	r2,zero,8011ecc <memcmp+0x34>
 8011ea0:	2144b03a 	or	r2,r4,r5
 8011ea4:	108000cc 	andi	r2,r2,3
 8011ea8:	10001a1e 	bne	r2,zero,8011f14 <memcmp+0x7c>
 8011eac:	20c00017 	ldw	r3,0(r4)
 8011eb0:	28800017 	ldw	r2,0(r5)
 8011eb4:	1880171e 	bne	r3,r2,8011f14 <memcmp+0x7c>
 8011eb8:	31bfff04 	addi	r6,r6,-4
 8011ebc:	30800128 	cmpgeui	r2,r6,4
 8011ec0:	21000104 	addi	r4,r4,4
 8011ec4:	29400104 	addi	r5,r5,4
 8011ec8:	103ff81e 	bne	r2,zero,8011eac <memcmp+0x14>
 8011ecc:	30ffffc4 	addi	r3,r6,-1
 8011ed0:	30000e26 	beq	r6,zero,8011f0c <memcmp+0x74>
 8011ed4:	29800003 	ldbu	r6,0(r5)
 8011ed8:	20800003 	ldbu	r2,0(r4)
 8011edc:	30800f1e 	bne	r6,r2,8011f1c <memcmp+0x84>
 8011ee0:	18800044 	addi	r2,r3,1
 8011ee4:	20c00044 	addi	r3,r4,1
 8011ee8:	2089883a 	add	r4,r4,r2
 8011eec:	00000506 	br	8011f04 <memcmp+0x6c>
 8011ef0:	18800003 	ldbu	r2,0(r3)
 8011ef4:	29800003 	ldbu	r6,0(r5)
 8011ef8:	18c00044 	addi	r3,r3,1
 8011efc:	10803fcc 	andi	r2,r2,255
 8011f00:	1180061e 	bne	r2,r6,8011f1c <memcmp+0x84>
 8011f04:	29400044 	addi	r5,r5,1
 8011f08:	193ff91e 	bne	r3,r4,8011ef0 <memcmp+0x58>
 8011f0c:	0005883a 	mov	r2,zero
 8011f10:	f800283a 	ret
 8011f14:	30ffffc4 	addi	r3,r6,-1
 8011f18:	003fee06 	br	8011ed4 <memcmp+0x3c>
 8011f1c:	1185c83a 	sub	r2,r2,r6
 8011f20:	f800283a 	ret

08011f24 <__register_exitproc>:
 8011f24:	00820074 	movhi	r2,2049
 8011f28:	10d14017 	ldw	r3,17664(r2)
 8011f2c:	18805217 	ldw	r2,328(r3)
 8011f30:	10001726 	beq	r2,zero,8011f90 <__register_exitproc+0x6c>
 8011f34:	10c00117 	ldw	r3,4(r2)
 8011f38:	1a000808 	cmpgei	r8,r3,32
 8011f3c:	40001b1e 	bne	r8,zero,8011fac <__register_exitproc+0x88>
 8011f40:	20000b26 	beq	r4,zero,8011f70 <__register_exitproc+0x4c>
 8011f44:	181090ba 	slli	r8,r3,2
 8011f48:	02400044 	movi	r9,1
 8011f4c:	48d2983a 	sll	r9,r9,r3
 8011f50:	1211883a 	add	r8,r2,r8
 8011f54:	41802215 	stw	r6,136(r8)
 8011f58:	11806217 	ldw	r6,392(r2)
 8011f5c:	21000098 	cmpnei	r4,r4,2
 8011f60:	324cb03a 	or	r6,r6,r9
 8011f64:	11806215 	stw	r6,392(r2)
 8011f68:	41c04215 	stw	r7,264(r8)
 8011f6c:	20000b26 	beq	r4,zero,8011f9c <__register_exitproc+0x78>
 8011f70:	19000084 	addi	r4,r3,2
 8011f74:	200890ba 	slli	r4,r4,2
 8011f78:	18c00044 	addi	r3,r3,1
 8011f7c:	10c00115 	stw	r3,4(r2)
 8011f80:	1105883a 	add	r2,r2,r4
 8011f84:	11400015 	stw	r5,0(r2)
 8011f88:	0005883a 	mov	r2,zero
 8011f8c:	f800283a 	ret
 8011f90:	18805304 	addi	r2,r3,332
 8011f94:	18805215 	stw	r2,328(r3)
 8011f98:	003fe606 	br	8011f34 <__register_exitproc+0x10>
 8011f9c:	11006317 	ldw	r4,396(r2)
 8011fa0:	2252b03a 	or	r9,r4,r9
 8011fa4:	12406315 	stw	r9,396(r2)
 8011fa8:	003ff106 	br	8011f70 <__register_exitproc+0x4c>
 8011fac:	00bfffc4 	movi	r2,-1
 8011fb0:	f800283a 	ret

08011fb4 <__call_exitprocs>:
 8011fb4:	defff704 	addi	sp,sp,-36
 8011fb8:	00820074 	movhi	r2,2049
 8011fbc:	ddc00715 	stw	r23,28(sp)
 8011fc0:	15d14017 	ldw	r23,17664(r2)
 8011fc4:	dd400515 	stw	r21,20(sp)
 8011fc8:	dd000415 	stw	r20,16(sp)
 8011fcc:	dcc00315 	stw	r19,12(sp)
 8011fd0:	dfc00815 	stw	ra,32(sp)
 8011fd4:	dd800615 	stw	r22,24(sp)
 8011fd8:	dc800215 	stw	r18,8(sp)
 8011fdc:	dc400115 	stw	r17,4(sp)
 8011fe0:	dc000015 	stw	r16,0(sp)
 8011fe4:	2029883a 	mov	r20,r4
 8011fe8:	282b883a 	mov	r21,r5
 8011fec:	04c00044 	movi	r19,1
 8011ff0:	bc805217 	ldw	r18,328(r23)
 8011ff4:	90000d26 	beq	r18,zero,801202c <__call_exitprocs+0x78>
 8011ff8:	94000117 	ldw	r16,4(r18)
 8011ffc:	847fffc4 	addi	r17,r16,-1
 8012000:	88000a16 	blt	r17,zero,801202c <__call_exitprocs+0x78>
 8012004:	84000044 	addi	r16,r16,1
 8012008:	802090ba 	slli	r16,r16,2
 801200c:	9421883a 	add	r16,r18,r16
 8012010:	a8001126 	beq	r21,zero,8012058 <__call_exitprocs+0xa4>
 8012014:	80804017 	ldw	r2,256(r16)
 8012018:	15400f26 	beq	r2,r21,8012058 <__call_exitprocs+0xa4>
 801201c:	8c7fffc4 	addi	r17,r17,-1
 8012020:	88bfffd8 	cmpnei	r2,r17,-1
 8012024:	843fff04 	addi	r16,r16,-4
 8012028:	103ff91e 	bne	r2,zero,8012010 <__call_exitprocs+0x5c>
 801202c:	dfc00817 	ldw	ra,32(sp)
 8012030:	ddc00717 	ldw	r23,28(sp)
 8012034:	dd800617 	ldw	r22,24(sp)
 8012038:	dd400517 	ldw	r21,20(sp)
 801203c:	dd000417 	ldw	r20,16(sp)
 8012040:	dcc00317 	ldw	r19,12(sp)
 8012044:	dc800217 	ldw	r18,8(sp)
 8012048:	dc400117 	ldw	r17,4(sp)
 801204c:	dc000017 	ldw	r16,0(sp)
 8012050:	dec00904 	addi	sp,sp,36
 8012054:	f800283a 	ret
 8012058:	90800117 	ldw	r2,4(r18)
 801205c:	81800017 	ldw	r6,0(r16)
 8012060:	10bfffc4 	addi	r2,r2,-1
 8012064:	14401526 	beq	r2,r17,80120bc <__call_exitprocs+0x108>
 8012068:	80000015 	stw	zero,0(r16)
 801206c:	303feb26 	beq	r6,zero,801201c <__call_exitprocs+0x68>
 8012070:	9c46983a 	sll	r3,r19,r17
 8012074:	90806217 	ldw	r2,392(r18)
 8012078:	95800117 	ldw	r22,4(r18)
 801207c:	1884703a 	and	r2,r3,r2
 8012080:	1000061e 	bne	r2,zero,801209c <__call_exitprocs+0xe8>
 8012084:	303ee83a 	callr	r6
 8012088:	90800117 	ldw	r2,4(r18)
 801208c:	15bfd81e 	bne	r2,r22,8011ff0 <__call_exitprocs+0x3c>
 8012090:	b8805217 	ldw	r2,328(r23)
 8012094:	14bfe126 	beq	r2,r18,801201c <__call_exitprocs+0x68>
 8012098:	003fd506 	br	8011ff0 <__call_exitprocs+0x3c>
 801209c:	90806317 	ldw	r2,396(r18)
 80120a0:	81002017 	ldw	r4,128(r16)
 80120a4:	1886703a 	and	r3,r3,r2
 80120a8:	1800061e 	bne	r3,zero,80120c4 <__call_exitprocs+0x110>
 80120ac:	200b883a 	mov	r5,r4
 80120b0:	a009883a 	mov	r4,r20
 80120b4:	303ee83a 	callr	r6
 80120b8:	003ff306 	br	8012088 <__call_exitprocs+0xd4>
 80120bc:	94400115 	stw	r17,4(r18)
 80120c0:	003fea06 	br	801206c <__call_exitprocs+0xb8>
 80120c4:	303ee83a 	callr	r6
 80120c8:	003fef06 	br	8012088 <__call_exitprocs+0xd4>

080120cc <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 80120cc:	defffd04 	addi	sp,sp,-12
 80120d0:	df000215 	stw	fp,8(sp)
 80120d4:	df000204 	addi	fp,sp,8
 80120d8:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 80120dc:	0001883a 	nop
 80120e0:	e0bffe17 	ldw	r2,-8(fp)
 80120e4:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 80120e8:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 80120ec:	10000226 	beq	r2,zero,80120f8 <_exit+0x2c>
    ALT_SIM_FAIL();
 80120f0:	002af070 	cmpltui	zero,zero,43969
 80120f4:	00000106 	br	80120fc <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 80120f8:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 80120fc:	003fff06 	br	80120fc <_exit+0x30>
