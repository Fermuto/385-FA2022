
usb_kb.elf:     file format elf32-littlenios2
usb_kb.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001242c memsz 0x0001242c flags r-x
    LOAD off    0x0001344c vaddr 0x0801244c paddr 0x08014064 align 2**12
         filesz 0x00001c18 memsz 0x00001c18 flags rw-
    LOAD off    0x00015c7c vaddr 0x08015c7c paddr 0x08015c7c align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011a78  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000007b0  08011c9c  08011c9c  00012c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c18  0801244c  08014064  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  08015c7c  08015c7c  00015c7c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00015064  2**0
                  CONTENTS
  7 .sdram        00000000  08015f5c  08015f5c  00015064  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00015064  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000ff8  00000000  00000000  00015090  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   0004cca5  00000000  00000000  00016088  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000f70c  00000000  00000000  00062d2d  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00019460  00000000  00000000  00072439  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000027b4  00000000  00000000  0008b89c  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00004814  00000000  00000000  0008e050  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c7bd  00000000  00000000  00092864  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000af024  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001ca8  00000000  00000000  000af068  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000b4582  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000b4585  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000b4591  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000b4592  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000b4593  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000b4597  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000b459b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000b459f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000b45aa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000b45b5  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  000b45c0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000031  00000000  00000000  000b45c9  2**0
                  CONTENTS, READONLY
 30 .jdi          00003e47  00000000  00000000  000b45fa  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     000854be  00000000  00000000  000b8441  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
08011c9c l    d  .rodata	00000000 .rodata
0801244c l    d  .rwdata	00000000 .rwdata
08015c7c l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08015f5c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../usb_kb_bsp//obj/HAL/src/crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
0801401c l     O .rwdata	00000001 addr
00000000 l    df *ABS*	00000000 HID.c
00000000 l    df *ABS*	00000000 MAX3421E.c
00000000 l    df *ABS*	00000000 transfer.c
08015c8c l     O .bss	00000004 usb_delay.2681
08015c90 l     O .bss	00000001 tmp_addr.2682
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08004d98 l     F .text	000000c0 __sbprintf
08011f1e l     O .rodata	00000010 blanks.5226
08011f0e l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08004fb8 l     F .text	00000234 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
08006b64 l     F .text	00000008 __fp_lock
08006b78 l     F .text	00000168 __sinit.part.0
08006ce0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801247c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
08011f40 l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800a00c l     F .text	000000f4 __sprint_r.part.0
0800b46c l     F .text	000000c0 __sbprintf
08012074 l     O .rodata	00000010 blanks.5203
08012064 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800f48c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800f5a4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800f5d0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800f6c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800f7b4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800f8a0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800fa80 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08014054 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800feb8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800fff8 l     F .text	00000034 alt_dev_reg
08012fbc l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
080102ec l     F .text	00000204 altera_avalon_jtag_uart_irq
080104f0 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
08010b2c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
08010ec4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
08011318 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
08011468 l     F .text	0000003c alt_get_errno
080114a4 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08015cc0 g     O .bss	00000004 alt_instruction_exception_handler
08002a6c g     F .text	00000018 putchar
08009548 g     F .text	00000074 _mprec_log10
08009628 g     F .text	00000074 __any_on
0800bb68 g     F .text	00000058 _isatty_r
08011f4c g     O .rodata	00000028 __mprec_tinytens
0800f9bc g     F .text	0000007c alt_main
08014020 g     O .rwdata	00000008 ctrl_xfers
08002a84 g     F .text	000000cc _puts_r
08015e5c g     O .bss	00000100 alt_irq
0800bc50 g     F .text	00000064 _lseek_r
08001fd8 g     F .text	00000630 USB_Task
08014064 g       *ABS*	00000000 __flash_rwdata_start
0800de54 g     F .text	00000080 .hidden __eqdf2
08015f5c g       *ABS*	00000000 __alt_heap_start
08002a2c g     F .text	00000038 printf
0800be40 g     F .text	0000006c _wcrtomb_r
08001324 g     F .text	00000084 kbdPoll
08009fa8 g     F .text	0000005c __sseek
08006e70 g     F .text	00000010 __sinit
0800b52c g     F .text	00000148 __swbuf_r
0800bbc0 g     F .text	00000070 _setlocale_r
08006ce8 g     F .text	00000078 __sfmoreglue
0800fa5c g     F .text	00000024 __malloc_unlock
08000260 g     F .text	000001e8 GetDriverandReport
080084cc g     F .text	0000012c memmove
08006e5c g     F .text	00000014 _cleanup
080086e8 g     F .text	000000a4 _Balloc
08001488 g     F .text	00000034 MAXreg_wr
0801244c g     O .rwdata	00000030 ClientDriverTable
0800ded4 g     F .text	000000f0 .hidden __gtdf2
080116e0 g     F .text	00000024 altera_nios2_gen2_irq_init
08002608 g     F .text	0000002c MSDProbe
08000000 g     F .entry	0000000c __reset
080078fc g     F .text	00000008 __localeconv_l
08001adc g     F .text	000000ec XferCtrlData
08000020 g       *ABS*	00000000 __flash_exceptions_start
08015cc4 g     O .bss	00000010 hid_ep
0800bb08 g     F .text	00000060 _fstat_r
08015ca0 g     O .bss	00000004 errno
08009f20 g     F .text	00000008 __seofread
08015cac g     O .bss	00000004 alt_argv
0801c01c g       *ABS*	00000000 _gp
0800fe88 g     F .text	00000030 usleep
080014f4 g     F .text	00000028 MAXreg_rd
08012e3c g     O .rwdata	00000180 alt_fd_list
08001268 g     F .text	00000038 HID_init
08002a64 g     F .text	00000008 _putchar_r
08011704 g     F .text	00000090 alt_find_dev
080083cc g     F .text	00000100 memcpy
08006b6c g     F .text	0000000c _cleanup_r
0800f2d4 g     F .text	000000c8 .hidden __floatsidf
080113ec g     F .text	0000007c alt_io_redirect
0800dfc4 g     F .text	000000f0 .hidden __ltdf2
08011c9c g       *ABS*	00000000 __DTOR_END__
08002b50 g     F .text	00000010 puts
08011954 g     F .text	00000098 alt_exception_cause_generated_bad_addr
080094a4 g     F .text	000000a4 __ratio
0800b454 g     F .text	00000018 __vfiprintf_internal
080106ec g     F .text	0000021c altera_avalon_jtag_uart_read
080029fc g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08002914 g     F .text	00000064 .hidden __udivsi3
0800f704 g     F .text	000000b0 isatty
08011f9c g     O .rodata	000000c8 __mprec_tens
08015c9c g     O .bss	00000004 __malloc_top_pad
08014028 g     O .rwdata	00000001 usb_task_state
08007904 g     F .text	0000000c _localeconv_r
08008b10 g     F .text	00000034 __i2b
080072d0 g     F .text	000004d4 __sfvwrite_r
08009e74 g     F .text	00000058 _sbrk_r
0800bd04 g     F .text	00000064 _read_r
08001798 g     F .text	00000094 MAX3421E_init
08000704 g     F .text	00000034 setKeycode
0801404c g     O .rwdata	00000004 alt_max_fd
0800b810 g     F .text	000000f8 _fclose_r
08006b3c g     F .text	00000028 fflush
08015c98 g     O .bss	00000004 __malloc_max_sbrked_mem
0800cb50 g     F .text	000009a0 .hidden __adddf3
08009258 g     F .text	00000104 __b2d
0800c588 g     F .text	000005c8 .hidden __umoddi3
0800f8dc g     F .text	000000e0 lseek
0801402c g     O .rwdata	00000004 _global_impure_ptr
08009848 g     F .text	0000062c _realloc_r
08015f5c g       *ABS*	00000000 __bss_end
08011234 g     F .text	000000e4 alt_iic_isr_register
0800fd80 g     F .text	00000108 alt_tick
0800bf6c g     F .text	0000061c .hidden __udivdi3
0800ba68 g     F .text	00000024 _fputwc_r
08011f74 g     O .rodata	00000028 __mprec_bigtens
080088ec g     F .text	00000110 __s2b
0800f39c g     F .text	0000009c .hidden __floatunsidf
08008fe8 g     F .text	00000058 __mcmp
08006e90 g     F .text	00000014 __fp_lock_all
080111e8 g     F .text	0000004c alt_ic_irq_enabled
0800fce4 g     F .text	0000009c alt_alarm_stop
08015cbc g     O .bss	00000004 alt_irq_active
080026d8 g     F .text	0000002c DummyProbe
080000fc g     F .exceptions	000000c8 alt_irq_handler
08012e14 g     O .rwdata	00000028 alt_dev_null
080012a0 g     F .text	00000084 mousePoll
080015ec g     F .text	00000024 Vbus_power
08010ea4 g     F .text	00000020 alt_dcache_flush_all
080089fc g     F .text	00000064 __hi0bits
0800f254 g     F .text	00000080 .hidden __fixdfsi
08014064 g       *ABS*	00000000 __ram_rwdata_end
08014044 g     O .rwdata	00000008 alt_dev_list
0800fef4 g     F .text	00000104 write
0800969c g     F .text	000000cc _putc_r
0801244c g       *ABS*	00000000 __ram_rodata_end
08015c91 g     O .bss	00000001 usb_error
0800f60c g     F .text	000000bc fstat
0800dfc4 g     F .text	000000f0 .hidden __ledf2
08008d84 g     F .text	00000128 __pow5mult
0800a118 g     F .text	0000133c ___vfiprintf_internal_r
08002978 g     F .text	0000005c .hidden __umodsi3
08015f5c g       *ABS*	00000000 end
0801022c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
08001c48 g     F .text	00000180 XferDispatchPkt
08011c9c g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
08010ba4 g     F .text	0000007c alt_avalon_timer_sc_init
0800f438 g     F .text	00000054 .hidden __clzsi2
08010908 g     F .text	00000224 altera_avalon_jtag_uart_write
08006e80 g     F .text	00000004 __sfp_lock_acquire
080082e4 g     F .text	000000e8 memchr
08002bf8 g     F .text	00002188 ___vfprintf_internal_r
08001954 g     F .text	00000034 MaxGpxHandler
08006fd4 g     F .text	000002fc _free_r
08012195 g     O .rodata	00000180 _ctype_b
0800bc30 g     F .text	0000000c __locale_mb_cur_max
08011b50 g     F .text	00000118 __call_exitprocs
08014034 g     O .rwdata	00000004 __malloc_sbrk_base
08000224 g     F .text	0000003c _start
08015cb4 g     O .bss	00000004 _alt_tick_rate
0800151c g     F .text	00000038 MAXbytes_rd
08008eac g     F .text	0000013c __lshift
08015cb8 g     O .bss	00000004 _alt_nticks
0800fabc g     F .text	00000108 read
08010064 g     F .text	00000064 alt_sys_init
08015e14 g     O .bss	00000048 devtable
08011ac0 g     F .text	00000090 __register_exitproc
08000e84 g     F .text	000003e4 HIDKProbe
08015cd4 g     O .bss	00000018 msd_ep
08008b44 g     F .text	00000240 __multiply
08010590 g     F .text	00000068 altera_avalon_jtag_uart_close
08001f50 g     F .text	00000088 USB_init
080029d4 g     F .text	00000028 .hidden __mulsi3
08015d14 g     O .bss	00000100 bigbuf
0801244c g       *ABS*	00000000 __ram_rwdata_start
08011c9c g       *ABS*	00000000 __ram_rodata_start
08015cec g     O .bss	00000028 __malloc_current_mallinfo
08015c88 g     O .bss	00000001 last_usb_task_state
0800935c g     F .text	00000148 __d2b
08015c80 g     O .bss	00000008 dev0ep
08000484 g     F .text	00000040 clearLED
080100c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801189c g     F .text	000000b8 alt_get_fd
08010d4c g     F .text	00000158 alt_busy_sleep
08002634 g     F .text	0000003c MSDEventHandler
0800b6ec g     F .text	00000058 _close_r
08011a34 g     F .text	0000008c memcmp
08010188 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08015f5c g       *ABS*	00000000 __alt_stack_base
080101d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08004e58 g     F .text	00000160 __swsetup_r
0800d4f0 g     F .text	00000964 .hidden __divdf3
08006d60 g     F .text	000000fc __sfp
080095bc g     F .text	0000006c __copybits
080128a0 g     O .rwdata	00000408 __malloc_av_
08006e8c g     F .text	00000004 __sinit_lock_release
0800269c g     F .text	0000003c CDCEventHandler
0800e0b4 g     F .text	000007e0 .hidden __muldf3
08002704 g     F .text	0000003c DummyEventHandler
08009ecc g     F .text	00000054 __sread
08011794 g     F .text	00000108 alt_find_file
08010f00 g     F .text	000000a4 alt_dev_llist_insert
0800fa38 g     F .text	00000024 __malloc_lock
0800fc34 g     F .text	000000b0 sbrk
08006adc g     F .text	00000060 _fflush_r
0800b744 g     F .text	000000cc _calloc_r
08015c7c g       *ABS*	00000000 __bss_start
08001610 g     F .text	00000188 MAX_busprobe
08015c7c g     O .bss	00000002 hid_device
080085f8 g     F .text	000000f0 memset
08000738 g     F .text	00000368 main
0800182c g     F .text	0000005c MAX3421E_Task
08015cb0 g     O .bss	00000004 alt_envp
08015c94 g     O .bss	00000004 __malloc_max_total_mem
08010128 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0800b674 g     F .text	00000014 __swbuf
08002798 g     F .text	00000084 ConvUTF8ToStr
0800a004 g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
0800b908 g     F .text	00000010 fclose
080051ec g     F .text	000016c8 _dtoa_r
08007af0 g     F .text	000007f4 _malloc_r
0800bf3c g     F .text	00000030 __ascii_wctomb
08014050 g     O .rwdata	00000004 alt_errno
080077a4 g     F .text	000000a4 _fwalk
0800bcb4 g     F .text	0000000c _mbtowc_r
08009768 g     F .text	000000e0 putc
0800281c g     F .text	00000080 .hidden __divsi3
08001dc8 g     F .text	00000188 XferInTransfer
080005d4 g     F .text	00000130 printSignedHex1
08006eb8 g     F .text	0000011c _malloc_trim_r
08011c9c g       *ABS*	00000000 __CTOR_END__
08002760 g     F .text	00000038 GetDevtable
0800bd68 g     F .text	000000d8 strcmp
08011c9c g       *ABS*	00000000 __flash_rodata_start
08011c9c g       *ABS*	00000000 __DTOR_LIST__
08001bc8 g     F .text	00000080 XferCtrlND
0800de54 g     F .text	00000080 .hidden __nedf2
08001554 g     F .text	00000098 MAX3421E_reset
0801002c g     F .text	00000038 alt_irq_init
0800fbc4 g     F .text	00000070 alt_release_fd
08012315 g     O .rodata	00000100 .hidden __clz_tab
08015ca4 g     O .bss	00000004 _PathLocale
080119ec g     F .text	00000014 atexit
0800b688 g     F .text	00000064 _write_r
0800bc3c g     F .text	00000014 setlocale
08014030 g     O .rwdata	00000004 _impure_ptr
08015ca8 g     O .bss	00000004 alt_argc
080068b4 g     F .text	00000228 __sflush_r
08011004 g     F .text	00000060 _do_dtors
080014bc g     F .text	00000038 MAXbytes_wr
08000020 g       .exceptions	00000000 alt_irq_entry
0800bcc0 g     F .text	00000044 __ascii_mbtowc
080091fc g     F .text	0000005c __ulp
08006ea4 g     F .text	00000014 __fp_unlock_all
0801403c g     O .rwdata	00000008 alt_fs_list
08002670 g     F .text	0000002c CDCProbe
08000020 g       *ABS*	00000000 __ram_exceptions_start
08007910 g     F .text	0000000c localeconv
08000448 g     F .text	0000003c setLED
08002740 g     F .text	00000020 GetUsbTaskState
0800791c g     F .text	00000098 __swhatbuf_r
08011084 g     F .text	00000050 alt_ic_isr_register
08011cd8 g     O .rodata	00000010 devclasses
08014064 g       *ABS*	00000000 _edata
080013e4 g     F .text	0000003c HIDKEventHandler
08015f5c g       *ABS*	00000000 _end
08001888 g     F .text	000000cc MaxIntHandler
0800b918 g     F .text	00000150 __fputwc
08000224 g       *ABS*	00000000 __ram_exceptions_end
080105f8 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08001420 g     F .text	00000040 SPI_init
0801115c g     F .text	0000008c alt_ic_irq_disable
08009f28 g     F .text	00000080 __swrite
08014038 g     O .rwdata	00000004 __malloc_trim_threshold
08011a00 g     F .text	00000034 exit
08007848 g     F .text	000000b4 _fwalk_reent
08009040 g     F .text	000001bc __mdiff
0800289c g     F .text	00000078 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08006e84 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
08012094 g     O .rodata	00000101 _ctype_
0800f200 g     F .text	00000054 .hidden __unorddf2
080013a8 g     F .text	0000003c HIDMEventHandler
08011c68 g     F .text	00000034 _exit
08010c20 g     F .text	0000012c alt_alarm_start
080004c4 g     F .text	00000110 printSignedHex0
080079b4 g     F .text	0000013c __smakebuf_r
08002b60 g     F .text	00000098 strlen
08011580 g     F .text	00000160 open
0800ded4 g     F .text	000000f0 .hidden __gedf2
0800a100 g     F .text	00000018 __sprint_r
08011064 g     F .text	00000020 alt_icache_flush_all
08014060 g     O .rwdata	00000004 alt_priority_mask
080110d4 g     F .text	00000088 alt_ic_irq_enable
08004d80 g     F .text	00000018 __vfprintf_internal
08000aa0 g     F .text	000003e4 HIDMProbe
0800bf30 g     F .text	0000000c _wctomb_r
08001460 g     F .text	00000028 SPI_wr
0800e894 g     F .text	0000096c .hidden __subdf3
08008a60 g     F .text	000000b0 __lo0bits
08014058 g     O .rwdata	00000008 alt_alarm_list
08010fa4 g     F .text	00000060 _do_ctors
0800beac g     F .text	00000084 wcrtomb
0800f4c8 g     F .text	000000dc close
08012ca8 g     O .rwdata	0000016c __global_locale
0800f81c g     F .text	00000084 alt_load
0800ba8c g     F .text	0000007c fputwc
08006e88 g     F .text	00000004 __sinit_lock_acquire
08001988 g     F .text	00000154 XferCtrlReq
080087b0 g     F .text	0000013c __multadd
0800878c g     F .text	00000024 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	00820074 	movhi	r2,2049
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10d79717 	ldw	r3,24156(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	00820074 	movhi	r2,2049
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	10979817 	ldw	r2,24160(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a72917 	ldw	r2,-25436(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a72917 	ldw	r2,-25436(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000230:	d6b00714 	ori	gp,gp,49180
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000238:	10971f14 	ori	r2,r2,23676

    movhi r3, %hi(__bss_end)
 800023c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000240:	18d7d714 	ori	r3,r3,24412

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	800f81c0 	call	800f81c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	800f9bc0 	call	800f9bc <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <GetDriverandReport>:
extern HID_DEVICE hid_device;

static BYTE addr = 1; 				//hard-wired USB address
const char* const devclasses[] = { " Uninitialized", " HID Keyboard", " HID Mouse", " Mass storage" };

BYTE GetDriverandReport() {
 8000260:	defff604 	addi	sp,sp,-40
 8000264:	dfc00915 	stw	ra,36(sp)
 8000268:	df000815 	stw	fp,32(sp)
 800026c:	df000804 	addi	fp,sp,32
	BYTE i;
	BYTE rcode;
	BYTE device = 0xFF;
 8000270:	00bfffc4 	movi	r2,-1
 8000274:	e0bfff85 	stb	r2,-2(fp)
	BYTE tmpbyte;

	DEV_RECORD* tpl_ptr;
	printf("Reached USB_STATE_RUNNING (0x40)\n");
 8000278:	01020074 	movhi	r4,2049
 800027c:	21073a04 	addi	r4,r4,7400
 8000280:	8002b500 	call	8002b50 <puts>
	for (i = 1; i < USB_NUMDEVICES; i++) {
 8000284:	00800044 	movi	r2,1
 8000288:	e0bfffc5 	stb	r2,-1(fp)
 800028c:	00001d06 	br	8000304 <GetDriverandReport+0xa4>
		tpl_ptr = GetDevtable(i);
 8000290:	e0bfffc3 	ldbu	r2,-1(fp)
 8000294:	1009883a 	mov	r4,r2
 8000298:	80027600 	call	8002760 <GetDevtable>
 800029c:	e0bffe15 	stw	r2,-8(fp)
		if (tpl_ptr->epinfo != NULL) {
 80002a0:	e0bffe17 	ldw	r2,-8(fp)
 80002a4:	10800017 	ldw	r2,0(r2)
 80002a8:	10001326 	beq	r2,zero,80002f8 <GetDriverandReport+0x98>
			printf("Device: %d", i);
 80002ac:	e0bfffc3 	ldbu	r2,-1(fp)
 80002b0:	100b883a 	mov	r5,r2
 80002b4:	01020074 	movhi	r4,2049
 80002b8:	21074304 	addi	r4,r4,7436
 80002bc:	8002a2c0 	call	8002a2c <printf>
			printf("%s \n", devclasses[tpl_ptr->devclass]);
 80002c0:	e0bffe17 	ldw	r2,-8(fp)
 80002c4:	10800103 	ldbu	r2,4(r2)
 80002c8:	10803fcc 	andi	r2,r2,255
 80002cc:	100690ba 	slli	r3,r2,2
 80002d0:	00820074 	movhi	r2,2049
 80002d4:	1885883a 	add	r2,r3,r2
 80002d8:	10873617 	ldw	r2,7384(r2)
 80002dc:	100b883a 	mov	r5,r2
 80002e0:	01020074 	movhi	r4,2049
 80002e4:	21074604 	addi	r4,r4,7448
 80002e8:	8002a2c0 	call	8002a2c <printf>
			device = tpl_ptr->devclass;
 80002ec:	e0bffe17 	ldw	r2,-8(fp)
 80002f0:	10800103 	ldbu	r2,4(r2)
 80002f4:	e0bfff85 	stb	r2,-2(fp)
	for (i = 1; i < USB_NUMDEVICES; i++) {
 80002f8:	e0bfffc3 	ldbu	r2,-1(fp)
 80002fc:	10800044 	addi	r2,r2,1
 8000300:	e0bfffc5 	stb	r2,-1(fp)
 8000304:	e0bfffc3 	ldbu	r2,-1(fp)
 8000308:	10800230 	cmpltui	r2,r2,8
 800030c:	103fe01e 	bne	r2,zero,8000290 <GetDriverandReport+0x30>
		}
	}
	//Query rate and protocol
	rcode = XferGetIdle(addr, 0, hid_device.interface, 0, &tmpbyte);
 8000310:	d0a00003 	ldbu	r2,-32768(gp)
 8000314:	11003fcc 	andi	r4,r2,255
 8000318:	d0a71843 	ldbu	r2,-25503(gp)
 800031c:	10803fcc 	andi	r2,r2,255
 8000320:	e0fffd84 	addi	r3,fp,-10
 8000324:	d8c00415 	stw	r3,16(sp)
 8000328:	00c00044 	movi	r3,1
 800032c:	d8c00315 	stw	r3,12(sp)
 8000330:	d8800215 	stw	r2,8(sp)
 8000334:	d8000115 	stw	zero,4(sp)
 8000338:	d8000015 	stw	zero,0(sp)
 800033c:	01c00084 	movi	r7,2
 8000340:	01802844 	movi	r6,161
 8000344:	000b883a 	mov	r5,zero
 8000348:	80019880 	call	8001988 <XferCtrlReq>
 800034c:	e0bffdc5 	stb	r2,-9(fp)
	if (rcode) {   //error handling
 8000350:	e0bffdc3 	ldbu	r2,-9(fp)
 8000354:	10000926 	beq	r2,zero,800037c <GetDriverandReport+0x11c>
		printf("GetIdle Error. Error code: ");
 8000358:	01020074 	movhi	r4,2049
 800035c:	21074804 	addi	r4,r4,7456
 8000360:	8002a2c0 	call	8002a2c <printf>
		printf("%x \n", rcode);
 8000364:	e0bffdc3 	ldbu	r2,-9(fp)
 8000368:	100b883a 	mov	r5,r2
 800036c:	01020074 	movhi	r4,2049
 8000370:	21074f04 	addi	r4,r4,7484
 8000374:	8002a2c0 	call	8002a2c <printf>
 8000378:	00000906 	br	80003a0 <GetDriverandReport+0x140>
	} else {
		printf("Update rate: ");
 800037c:	01020074 	movhi	r4,2049
 8000380:	21075104 	addi	r4,r4,7492
 8000384:	8002a2c0 	call	8002a2c <printf>
		printf("%x \n", tmpbyte);
 8000388:	e0bffd83 	ldbu	r2,-10(fp)
 800038c:	10803fcc 	andi	r2,r2,255
 8000390:	100b883a 	mov	r5,r2
 8000394:	01020074 	movhi	r4,2049
 8000398:	21074f04 	addi	r4,r4,7484
 800039c:	8002a2c0 	call	8002a2c <printf>
	}
	printf("Protocol: ");
 80003a0:	01020074 	movhi	r4,2049
 80003a4:	21075504 	addi	r4,r4,7508
 80003a8:	8002a2c0 	call	8002a2c <printf>
	rcode = XferGetProto(addr, 0, hid_device.interface, &tmpbyte);
 80003ac:	d0a00003 	ldbu	r2,-32768(gp)
 80003b0:	11003fcc 	andi	r4,r2,255
 80003b4:	d0a71843 	ldbu	r2,-25503(gp)
 80003b8:	10803fcc 	andi	r2,r2,255
 80003bc:	e0fffd84 	addi	r3,fp,-10
 80003c0:	d8c00415 	stw	r3,16(sp)
 80003c4:	00c00044 	movi	r3,1
 80003c8:	d8c00315 	stw	r3,12(sp)
 80003cc:	d8800215 	stw	r2,8(sp)
 80003d0:	d8000115 	stw	zero,4(sp)
 80003d4:	d8000015 	stw	zero,0(sp)
 80003d8:	01c000c4 	movi	r7,3
 80003dc:	01802844 	movi	r6,161
 80003e0:	000b883a 	mov	r5,zero
 80003e4:	80019880 	call	8001988 <XferCtrlReq>
 80003e8:	e0bffdc5 	stb	r2,-9(fp)
	if (rcode) {   //error handling
 80003ec:	e0bffdc3 	ldbu	r2,-9(fp)
 80003f0:	10000926 	beq	r2,zero,8000418 <GetDriverandReport+0x1b8>
		printf("GetProto Error. Error code ");
 80003f4:	01020074 	movhi	r4,2049
 80003f8:	21075804 	addi	r4,r4,7520
 80003fc:	8002a2c0 	call	8002a2c <printf>
		printf("%x \n", rcode);
 8000400:	e0bffdc3 	ldbu	r2,-9(fp)
 8000404:	100b883a 	mov	r5,r2
 8000408:	01020074 	movhi	r4,2049
 800040c:	21074f04 	addi	r4,r4,7484
 8000410:	8002a2c0 	call	8002a2c <printf>
 8000414:	00000606 	br	8000430 <GetDriverandReport+0x1d0>
	} else {
		printf("%d \n", tmpbyte);
 8000418:	e0bffd83 	ldbu	r2,-10(fp)
 800041c:	10803fcc 	andi	r2,r2,255
 8000420:	100b883a 	mov	r5,r2
 8000424:	01020074 	movhi	r4,2049
 8000428:	21075f04 	addi	r4,r4,7548
 800042c:	8002a2c0 	call	8002a2c <printf>
	}
	return device;
 8000430:	e0bfff83 	ldbu	r2,-2(fp)
}
 8000434:	e037883a 	mov	sp,fp
 8000438:	dfc00117 	ldw	ra,4(sp)
 800043c:	df000017 	ldw	fp,0(sp)
 8000440:	dec00204 	addi	sp,sp,8
 8000444:	f800283a 	ret

08000448 <setLED>:

void setLED(int LED) {
 8000448:	defffe04 	addi	sp,sp,-8
 800044c:	df000115 	stw	fp,4(sp)
 8000450:	df000104 	addi	fp,sp,4
 8000454:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8000458:	00c05437 	ldwio	r3,336(zero)
 800045c:	01000044 	movi	r4,1
 8000460:	e0bfff17 	ldw	r2,-4(fp)
 8000464:	2084983a 	sll	r2,r4,r2
 8000468:	1884b03a 	or	r2,r3,r2
 800046c:	00805435 	stwio	r2,336(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) | (0x001 << LED)));
}
 8000470:	0001883a 	nop
 8000474:	e037883a 	mov	sp,fp
 8000478:	df000017 	ldw	fp,0(sp)
 800047c:	dec00104 	addi	sp,sp,4
 8000480:	f800283a 	ret

08000484 <clearLED>:

void clearLED(int LED) {
 8000484:	defffe04 	addi	sp,sp,-8
 8000488:	df000115 	stw	fp,4(sp)
 800048c:	df000104 	addi	fp,sp,4
 8000490:	e13fff15 	stw	r4,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE,
 8000494:	00c05437 	ldwio	r3,336(zero)
 8000498:	01000044 	movi	r4,1
 800049c:	e0bfff17 	ldw	r2,-4(fp)
 80004a0:	2084983a 	sll	r2,r4,r2
 80004a4:	0084303a 	nor	r2,zero,r2
 80004a8:	1884703a 	and	r2,r3,r2
 80004ac:	00805435 	stwio	r2,336(zero)
			(IORD_ALTERA_AVALON_PIO_DATA(LEDS_PIO_BASE) & ~(0x001 << LED)));

}
 80004b0:	0001883a 	nop
 80004b4:	e037883a 	mov	sp,fp
 80004b8:	df000017 	ldw	fp,0(sp)
 80004bc:	dec00104 	addi	sp,sp,4
 80004c0:	f800283a 	ret

080004c4 <printSignedHex0>:

void printSignedHex0(signed char value) {
 80004c4:	defffc04 	addi	sp,sp,-16
 80004c8:	dfc00315 	stw	ra,12(sp)
 80004cc:	df000215 	stw	fp,8(sp)
 80004d0:	df000204 	addi	fp,sp,8
 80004d4:	2005883a 	mov	r2,r4
 80004d8:	e0bffe05 	stb	r2,-8(fp)
	BYTE tens = 0;
 80004dc:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 80004e0:	e03fff85 	stb	zero,-2(fp)
	WORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80004e4:	00805837 	ldwio	r2,352(zero)
 80004e8:	e0bfff0d 	sth	r2,-4(fp)
	if (value < 0) {
 80004ec:	e0bffe07 	ldb	r2,-8(fp)
 80004f0:	1000060e 	bge	r2,zero,800050c <printSignedHex0+0x48>
		setLED(11);
 80004f4:	010002c4 	movi	r4,11
 80004f8:	80004480 	call	8000448 <setLED>
		value = -value;
 80004fc:	e0bffe03 	ldbu	r2,-8(fp)
 8000500:	0085c83a 	sub	r2,zero,r2
 8000504:	e0bffe05 	stb	r2,-8(fp)
 8000508:	00000206 	br	8000514 <printSignedHex0+0x50>
	} else {
		clearLED(11);
 800050c:	010002c4 	movi	r4,11
 8000510:	80004840 	call	8000484 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000514:	e0bffe03 	ldbu	r2,-8(fp)
 8000518:	108018c4 	addi	r2,r2,99
 800051c:	10803fcc 	andi	r2,r2,255
 8000520:	108031f0 	cmpltui	r2,r2,199
 8000524:	1000031e 	bne	r2,zero,8000534 <printSignedHex0+0x70>
		setLED(13);
 8000528:	01000344 	movi	r4,13
 800052c:	80004480 	call	8000448 <setLED>
 8000530:	00000206 	br	800053c <printSignedHex0+0x78>
	else
		clearLED(13);
 8000534:	01000344 	movi	r4,13
 8000538:	80004840 	call	8000484 <clearLED>

	value = value % 100;
 800053c:	e0bffe07 	ldb	r2,-8(fp)
 8000540:	01401904 	movi	r5,100
 8000544:	1009883a 	mov	r4,r2
 8000548:	800289c0 	call	800289c <__modsi3>
 800054c:	e0bffe05 	stb	r2,-8(fp)
	tens = value / 10;
 8000550:	e0bffe07 	ldb	r2,-8(fp)
 8000554:	01400284 	movi	r5,10
 8000558:	1009883a 	mov	r4,r2
 800055c:	800281c0 	call	800281c <__divsi3>
 8000560:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8000564:	e0bffe07 	ldb	r2,-8(fp)
 8000568:	01400284 	movi	r5,10
 800056c:	1009883a 	mov	r4,r2
 8000570:	800289c0 	call	800289c <__modsi3>
 8000574:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0x00FF;
 8000578:	e0bfff0b 	ldhu	r2,-4(fp)
 800057c:	10803fcc 	andi	r2,r2,255
 8000580:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (tens << 12);
 8000584:	e0bfffc3 	ldbu	r2,-1(fp)
 8000588:	1004933a 	slli	r2,r2,12
 800058c:	1007883a 	mov	r3,r2
 8000590:	e0bfff0b 	ldhu	r2,-4(fp)
 8000594:	1884b03a 	or	r2,r3,r2
 8000598:	e0bfff0d 	sth	r2,-4(fp)
	pio_val |= (ones << 8);
 800059c:	e0bfff83 	ldbu	r2,-2(fp)
 80005a0:	1004923a 	slli	r2,r2,8
 80005a4:	1007883a 	mov	r3,r2
 80005a8:	e0bfff0b 	ldhu	r2,-4(fp)
 80005ac:	1884b03a 	or	r2,r3,r2
 80005b0:	e0bfff0d 	sth	r2,-4(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80005b4:	e0bfff0b 	ldhu	r2,-4(fp)
 80005b8:	00805835 	stwio	r2,352(zero)
}
 80005bc:	0001883a 	nop
 80005c0:	e037883a 	mov	sp,fp
 80005c4:	dfc00117 	ldw	ra,4(sp)
 80005c8:	df000017 	ldw	fp,0(sp)
 80005cc:	dec00204 	addi	sp,sp,8
 80005d0:	f800283a 	ret

080005d4 <printSignedHex1>:

void printSignedHex1(signed char value) {
 80005d4:	defffb04 	addi	sp,sp,-20
 80005d8:	dfc00415 	stw	ra,16(sp)
 80005dc:	df000315 	stw	fp,12(sp)
 80005e0:	df000304 	addi	fp,sp,12
 80005e4:	2005883a 	mov	r2,r4
 80005e8:	e0bffd05 	stb	r2,-12(fp)
	BYTE tens = 0;
 80005ec:	e03fffc5 	stb	zero,-1(fp)
	BYTE ones = 0;
 80005f0:	e03fff85 	stb	zero,-2(fp)
	DWORD pio_val = IORD_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE);
 80005f4:	00805837 	ldwio	r2,352(zero)
 80005f8:	e0bffe15 	stw	r2,-8(fp)
	if (value < 0) {
 80005fc:	e0bffd07 	ldb	r2,-12(fp)
 8000600:	1000060e 	bge	r2,zero,800061c <printSignedHex1+0x48>
		setLED(10);
 8000604:	01000284 	movi	r4,10
 8000608:	80004480 	call	8000448 <setLED>
		value = -value;
 800060c:	e0bffd03 	ldbu	r2,-12(fp)
 8000610:	0085c83a 	sub	r2,zero,r2
 8000614:	e0bffd05 	stb	r2,-12(fp)
 8000618:	00000206 	br	8000624 <printSignedHex1+0x50>
	} else {
		clearLED(10);
 800061c:	01000284 	movi	r4,10
 8000620:	80004840 	call	8000484 <clearLED>
	}
	//handled hundreds
	if (value / 100)
 8000624:	e0bffd03 	ldbu	r2,-12(fp)
 8000628:	108018c4 	addi	r2,r2,99
 800062c:	10803fcc 	andi	r2,r2,255
 8000630:	108031f0 	cmpltui	r2,r2,199
 8000634:	1000031e 	bne	r2,zero,8000644 <printSignedHex1+0x70>
		setLED(12);
 8000638:	01000304 	movi	r4,12
 800063c:	80004480 	call	8000448 <setLED>
 8000640:	00000206 	br	800064c <printSignedHex1+0x78>
	else
		clearLED(12);
 8000644:	01000304 	movi	r4,12
 8000648:	80004840 	call	8000484 <clearLED>

	value = value % 100;
 800064c:	e0bffd07 	ldb	r2,-12(fp)
 8000650:	01401904 	movi	r5,100
 8000654:	1009883a 	mov	r4,r2
 8000658:	800289c0 	call	800289c <__modsi3>
 800065c:	e0bffd05 	stb	r2,-12(fp)
	tens = value / 10;
 8000660:	e0bffd07 	ldb	r2,-12(fp)
 8000664:	01400284 	movi	r5,10
 8000668:	1009883a 	mov	r4,r2
 800066c:	800281c0 	call	800281c <__divsi3>
 8000670:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 8000674:	e0bffd07 	ldb	r2,-12(fp)
 8000678:	01400284 	movi	r5,10
 800067c:	1009883a 	mov	r4,r2
 8000680:	800289c0 	call	800289c <__modsi3>
 8000684:	e0bfff85 	stb	r2,-2(fp)
	tens = value / 10;
 8000688:	e0bffd07 	ldb	r2,-12(fp)
 800068c:	01400284 	movi	r5,10
 8000690:	1009883a 	mov	r4,r2
 8000694:	800281c0 	call	800281c <__divsi3>
 8000698:	e0bfffc5 	stb	r2,-1(fp)
	ones = value % 10;
 800069c:	e0bffd07 	ldb	r2,-12(fp)
 80006a0:	01400284 	movi	r5,10
 80006a4:	1009883a 	mov	r4,r2
 80006a8:	800289c0 	call	800289c <__modsi3>
 80006ac:	e0bfff85 	stb	r2,-2(fp)

	pio_val &= 0xFF00;
 80006b0:	e0bffe17 	ldw	r2,-8(fp)
 80006b4:	10bfc00c 	andi	r2,r2,65280
 80006b8:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (tens << 4);
 80006bc:	e0bfffc3 	ldbu	r2,-1(fp)
 80006c0:	1004913a 	slli	r2,r2,4
 80006c4:	1007883a 	mov	r3,r2
 80006c8:	e0bffe17 	ldw	r2,-8(fp)
 80006cc:	10c4b03a 	or	r2,r2,r3
 80006d0:	e0bffe15 	stw	r2,-8(fp)
	pio_val |= (ones << 0);
 80006d4:	e0bfff83 	ldbu	r2,-2(fp)
 80006d8:	e0fffe17 	ldw	r3,-8(fp)
 80006dc:	1884b03a 	or	r2,r3,r2
 80006e0:	e0bffe15 	stw	r2,-8(fp)

	IOWR_ALTERA_AVALON_PIO_DATA(HEX_DIGITS_PIO_BASE, pio_val);
 80006e4:	e0bffe17 	ldw	r2,-8(fp)
 80006e8:	00805835 	stwio	r2,352(zero)
}
 80006ec:	0001883a 	nop
 80006f0:	e037883a 	mov	sp,fp
 80006f4:	dfc00117 	ldw	ra,4(sp)
 80006f8:	df000017 	ldw	fp,0(sp)
 80006fc:	dec00204 	addi	sp,sp,8
 8000700:	f800283a 	ret

08000704 <setKeycode>:

void setKeycode(WORD keycode)
{
 8000704:	defffe04 	addi	sp,sp,-8
 8000708:	df000115 	stw	fp,4(sp)
 800070c:	df000104 	addi	fp,sp,4
 8000710:	2005883a 	mov	r2,r4
 8000714:	e0bfff0d 	sth	r2,-4(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(0x8002000, keycode);
 8000718:	e0ffff0b 	ldhu	r3,-4(fp)
 800071c:	00820034 	movhi	r2,2048
 8000720:	10c80035 	stwio	r3,8192(r2)
}
 8000724:	0001883a 	nop
 8000728:	e037883a 	mov	sp,fp
 800072c:	df000017 	ldw	fp,0(sp)
 8000730:	dec00104 	addi	sp,sp,4
 8000734:	f800283a 	ret

08000738 <main>:
int main() {
 8000738:	defff704 	addi	sp,sp,-36
 800073c:	dfc00815 	stw	ra,32(sp)
 8000740:	df000715 	stw	fp,28(sp)
 8000744:	df000704 	addi	fp,sp,28
	BYTE rcode;
	BOOT_MOUSE_REPORT buf;		//USB mouse report
	BOOT_KBD_REPORT kbdbuf;

	BYTE runningdebugflag = 0;//flag to dump out a bunch of information when we first get to USB_STATE_RUNNING
 8000748:	e03fffc5 	stb	zero,-1(fp)
	BYTE errorflag = 0; //flag once we get an error device so we don't keep dumping out state info
 800074c:	e03fff85 	stb	zero,-2(fp)
	BYTE device;
	WORD keycode;

	printf("initializing MAX3421E...\n");
 8000750:	01020074 	movhi	r4,2049
 8000754:	21076104 	addi	r4,r4,7556
 8000758:	8002b500 	call	8002b50 <puts>
	MAX3421E_init();
 800075c:	80017980 	call	8001798 <MAX3421E_init>
	printf("initializing USB...\n");
 8000760:	01020074 	movhi	r4,2049
 8000764:	21076804 	addi	r4,r4,7584
 8000768:	8002b500 	call	8002b50 <puts>
	USB_init();
 800076c:	8001f500 	call	8001f50 <USB_init>
	while (1) {
		printf(".");
 8000770:	01000b84 	movi	r4,46
 8000774:	8002a6c0 	call	8002a6c <putchar>
		MAX3421E_Task();
 8000778:	800182c0 	call	800182c <MAX3421E_Task>
		USB_Task();
 800077c:	8001fd80 	call	8001fd8 <USB_Task>
		//usleep (500000);
		if (GetUsbTaskState() == USB_STATE_RUNNING) {
 8000780:	80027400 	call	8002740 <GetUsbTaskState>
 8000784:	10803fcc 	andi	r2,r2,255
 8000788:	10801018 	cmpnei	r2,r2,64
 800078c:	1000a01e 	bne	r2,zero,8000a10 <main+0x2d8>
			if (!runningdebugflag) {
 8000790:	e0bfffc3 	ldbu	r2,-1(fp)
 8000794:	1000071e 	bne	r2,zero,80007b4 <main+0x7c>
				runningdebugflag = 1;
 8000798:	00800044 	movi	r2,1
 800079c:	e0bfffc5 	stb	r2,-1(fp)
				setLED(9);
 80007a0:	01000244 	movi	r4,9
 80007a4:	80004480 	call	8000448 <setLED>
				device = GetDriverandReport();
 80007a8:	80002600 	call	8000260 <GetDriverandReport>
 80007ac:	e0bfff45 	stb	r2,-3(fp)
 80007b0:	003fef06 	br	8000770 <main+0x38>
			} else if (device == 1) {
 80007b4:	e0bfff43 	ldbu	r2,-3(fp)
 80007b8:	10800058 	cmpnei	r2,r2,1
 80007bc:	1000381e 	bne	r2,zero,80008a0 <main+0x168>
				//run keyboard debug polling
				rcode = kbdPoll(&kbdbuf);
 80007c0:	e0bff9c4 	addi	r2,fp,-25
 80007c4:	1009883a 	mov	r4,r2
 80007c8:	80013240 	call	8001324 <kbdPoll>
 80007cc:	e0bffdc5 	stb	r2,-9(fp)
				if (rcode == hrNAK) {
 80007d0:	e0bffdc3 	ldbu	r2,-9(fp)
 80007d4:	10800118 	cmpnei	r2,r2,4
 80007d8:	1000ad26 	beq	r2,zero,8000a90 <main+0x358>
					continue; //NAK means no new data
				} else if (rcode) {
 80007dc:	e0bffdc3 	ldbu	r2,-9(fp)
 80007e0:	10000926 	beq	r2,zero,8000808 <main+0xd0>
					printf("Rcode: ");
 80007e4:	01020074 	movhi	r4,2049
 80007e8:	21076d04 	addi	r4,r4,7604
 80007ec:	8002a2c0 	call	8002a2c <printf>
					printf("%x \n", rcode);
 80007f0:	e0bffdc3 	ldbu	r2,-9(fp)
 80007f4:	100b883a 	mov	r5,r2
 80007f8:	01020074 	movhi	r4,2049
 80007fc:	21074f04 	addi	r4,r4,7484
 8000800:	8002a2c0 	call	8002a2c <printf>
					continue;
 8000804:	0000a506 	br	8000a9c <main+0x364>
				}
				printf("keycodes: ");
 8000808:	01020074 	movhi	r4,2049
 800080c:	21076f04 	addi	r4,r4,7612
 8000810:	8002a2c0 	call	8002a2c <printf>
				for (int i = 0; i < 6; i++) {
 8000814:	e03ffe15 	stw	zero,-8(fp)
 8000818:	00000b06 	br	8000848 <main+0x110>
					printf("%x ", kbdbuf.keycode[i]);
 800081c:	e0bffe17 	ldw	r2,-8(fp)
 8000820:	e085883a 	add	r2,fp,r2
 8000824:	10bffa43 	ldbu	r2,-23(r2)
 8000828:	10803fcc 	andi	r2,r2,255
 800082c:	100b883a 	mov	r5,r2
 8000830:	01020074 	movhi	r4,2049
 8000834:	21077204 	addi	r4,r4,7624
 8000838:	8002a2c0 	call	8002a2c <printf>
				for (int i = 0; i < 6; i++) {
 800083c:	e0bffe17 	ldw	r2,-8(fp)
 8000840:	10800044 	addi	r2,r2,1
 8000844:	e0bffe15 	stw	r2,-8(fp)
 8000848:	e0bffe17 	ldw	r2,-8(fp)
 800084c:	10800190 	cmplti	r2,r2,6
 8000850:	103ff21e 	bne	r2,zero,800081c <main+0xe4>
				}
				setKeycode(kbdbuf.keycode[0]);
 8000854:	e0bffa43 	ldbu	r2,-23(fp)
 8000858:	10803fcc 	andi	r2,r2,255
 800085c:	1009883a 	mov	r4,r2
 8000860:	80007040 	call	8000704 <setKeycode>
				printSignedHex0(kbdbuf.keycode[0]);
 8000864:	e0bffa43 	ldbu	r2,-23(fp)
 8000868:	10803fcc 	andi	r2,r2,255
 800086c:	1080201c 	xori	r2,r2,128
 8000870:	10bfe004 	addi	r2,r2,-128
 8000874:	1009883a 	mov	r4,r2
 8000878:	80004c40 	call	80004c4 <printSignedHex0>
				printSignedHex1(kbdbuf.keycode[1]);
 800087c:	e0bffa83 	ldbu	r2,-22(fp)
 8000880:	10803fcc 	andi	r2,r2,255
 8000884:	1080201c 	xori	r2,r2,128
 8000888:	10bfe004 	addi	r2,r2,-128
 800088c:	1009883a 	mov	r4,r2
 8000890:	80005d40 	call	80005d4 <printSignedHex1>
				printf("\n");
 8000894:	01000284 	movi	r4,10
 8000898:	8002a6c0 	call	8002a6c <putchar>
 800089c:	003fb406 	br	8000770 <main+0x38>
			}

			else if (device == 2) {
 80008a0:	e0bfff43 	ldbu	r2,-3(fp)
 80008a4:	10800098 	cmpnei	r2,r2,2
 80008a8:	103fb11e 	bne	r2,zero,8000770 <main+0x38>
				rcode = mousePoll(&buf);
 80008ac:	e0bffbc4 	addi	r2,fp,-17
 80008b0:	1009883a 	mov	r4,r2
 80008b4:	80012a00 	call	80012a0 <mousePoll>
 80008b8:	e0bffdc5 	stb	r2,-9(fp)
				if (rcode == hrNAK) {
 80008bc:	e0bffdc3 	ldbu	r2,-9(fp)
 80008c0:	10800118 	cmpnei	r2,r2,4
 80008c4:	10007426 	beq	r2,zero,8000a98 <main+0x360>
					//NAK means no new data
					continue;
				} else if (rcode) {
 80008c8:	e0bffdc3 	ldbu	r2,-9(fp)
 80008cc:	10000926 	beq	r2,zero,80008f4 <main+0x1bc>
					printf("Rcode: ");
 80008d0:	01020074 	movhi	r4,2049
 80008d4:	21076d04 	addi	r4,r4,7604
 80008d8:	8002a2c0 	call	8002a2c <printf>
					printf("%x \n", rcode);
 80008dc:	e0bffdc3 	ldbu	r2,-9(fp)
 80008e0:	100b883a 	mov	r5,r2
 80008e4:	01020074 	movhi	r4,2049
 80008e8:	21074f04 	addi	r4,r4,7484
 80008ec:	8002a2c0 	call	8002a2c <printf>
					continue;
 80008f0:	00006a06 	br	8000a9c <main+0x364>
				}
				printf("X displacement: ");
 80008f4:	01020074 	movhi	r4,2049
 80008f8:	21077304 	addi	r4,r4,7628
 80008fc:	8002a2c0 	call	8002a2c <printf>
				printf("%d ", (signed char) buf.Xdispl);
 8000900:	e0bffc03 	ldbu	r2,-16(fp)
 8000904:	10803fcc 	andi	r2,r2,255
 8000908:	1080201c 	xori	r2,r2,128
 800090c:	10bfe004 	addi	r2,r2,-128
 8000910:	100b883a 	mov	r5,r2
 8000914:	01020074 	movhi	r4,2049
 8000918:	21077804 	addi	r4,r4,7648
 800091c:	8002a2c0 	call	8002a2c <printf>
				printSignedHex0((signed char) buf.Xdispl);
 8000920:	e0bffc03 	ldbu	r2,-16(fp)
 8000924:	10803fcc 	andi	r2,r2,255
 8000928:	1080201c 	xori	r2,r2,128
 800092c:	10bfe004 	addi	r2,r2,-128
 8000930:	1009883a 	mov	r4,r2
 8000934:	80004c40 	call	80004c4 <printSignedHex0>
				printf("Y displacement: ");
 8000938:	01020074 	movhi	r4,2049
 800093c:	21077904 	addi	r4,r4,7652
 8000940:	8002a2c0 	call	8002a2c <printf>
				printf("%d ", (signed char) buf.Ydispl);
 8000944:	e0bffc43 	ldbu	r2,-15(fp)
 8000948:	10803fcc 	andi	r2,r2,255
 800094c:	1080201c 	xori	r2,r2,128
 8000950:	10bfe004 	addi	r2,r2,-128
 8000954:	100b883a 	mov	r5,r2
 8000958:	01020074 	movhi	r4,2049
 800095c:	21077804 	addi	r4,r4,7648
 8000960:	8002a2c0 	call	8002a2c <printf>
				printSignedHex1((signed char) buf.Ydispl);
 8000964:	e0bffc43 	ldbu	r2,-15(fp)
 8000968:	10803fcc 	andi	r2,r2,255
 800096c:	1080201c 	xori	r2,r2,128
 8000970:	10bfe004 	addi	r2,r2,-128
 8000974:	1009883a 	mov	r4,r2
 8000978:	80005d40 	call	80005d4 <printSignedHex1>
				printf("Buttons: ");
 800097c:	01020074 	movhi	r4,2049
 8000980:	21077e04 	addi	r4,r4,7672
 8000984:	8002a2c0 	call	8002a2c <printf>
				printf("%x\n", buf.button);
 8000988:	e0bffbc3 	ldbu	r2,-17(fp)
 800098c:	10803fcc 	andi	r2,r2,255
 8000990:	100b883a 	mov	r5,r2
 8000994:	01020074 	movhi	r4,2049
 8000998:	21078104 	addi	r4,r4,7684
 800099c:	8002a2c0 	call	8002a2c <printf>
				if (buf.button & 0x04)
 80009a0:	e0bffbc3 	ldbu	r2,-17(fp)
 80009a4:	10803fcc 	andi	r2,r2,255
 80009a8:	1080010c 	andi	r2,r2,4
 80009ac:	10000326 	beq	r2,zero,80009bc <main+0x284>
					setLED(2);
 80009b0:	01000084 	movi	r4,2
 80009b4:	80004480 	call	8000448 <setLED>
 80009b8:	00000206 	br	80009c4 <main+0x28c>
				else
					clearLED(2);
 80009bc:	01000084 	movi	r4,2
 80009c0:	80004840 	call	8000484 <clearLED>
				if (buf.button & 0x02)
 80009c4:	e0bffbc3 	ldbu	r2,-17(fp)
 80009c8:	10803fcc 	andi	r2,r2,255
 80009cc:	1080008c 	andi	r2,r2,2
 80009d0:	10000326 	beq	r2,zero,80009e0 <main+0x2a8>
					setLED(1);
 80009d4:	01000044 	movi	r4,1
 80009d8:	80004480 	call	8000448 <setLED>
 80009dc:	00000206 	br	80009e8 <main+0x2b0>
				else
					clearLED(1);
 80009e0:	01000044 	movi	r4,1
 80009e4:	80004840 	call	8000484 <clearLED>
				if (buf.button & 0x01)
 80009e8:	e0bffbc3 	ldbu	r2,-17(fp)
 80009ec:	10803fcc 	andi	r2,r2,255
 80009f0:	1080004c 	andi	r2,r2,1
 80009f4:	10000326 	beq	r2,zero,8000a04 <main+0x2cc>
					setLED(0);
 80009f8:	0009883a 	mov	r4,zero
 80009fc:	80004480 	call	8000448 <setLED>
 8000a00:	003f5b06 	br	8000770 <main+0x38>
				else
					clearLED(0);
 8000a04:	0009883a 	mov	r4,zero
 8000a08:	80004840 	call	8000484 <clearLED>
 8000a0c:	003f5806 	br	8000770 <main+0x38>
			}
		} else if (GetUsbTaskState() == USB_STATE_ERROR) {
 8000a10:	80027400 	call	8002740 <GetUsbTaskState>
 8000a14:	10803fcc 	andi	r2,r2,255
 8000a18:	10803fd8 	cmpnei	r2,r2,255
 8000a1c:	10000a1e 	bne	r2,zero,8000a48 <main+0x310>
			if (!errorflag) {
 8000a20:	e0bfff83 	ldbu	r2,-2(fp)
 8000a24:	103f521e 	bne	r2,zero,8000770 <main+0x38>
				errorflag = 1;
 8000a28:	00800044 	movi	r2,1
 8000a2c:	e0bfff85 	stb	r2,-2(fp)
				clearLED(9);
 8000a30:	01000244 	movi	r4,9
 8000a34:	80004840 	call	8000484 <clearLED>
				printf("USB Error State\n");
 8000a38:	01020074 	movhi	r4,2049
 8000a3c:	21078204 	addi	r4,r4,7688
 8000a40:	8002b500 	call	8002b50 <puts>
 8000a44:	003f4a06 	br	8000770 <main+0x38>
				//print out string descriptor here
			}
		} else //not in USB running state
		{

			printf("USB task state: ");
 8000a48:	01020074 	movhi	r4,2049
 8000a4c:	21078604 	addi	r4,r4,7704
 8000a50:	8002a2c0 	call	8002a2c <printf>
			printf("%x\n", GetUsbTaskState());
 8000a54:	80027400 	call	8002740 <GetUsbTaskState>
 8000a58:	10803fcc 	andi	r2,r2,255
 8000a5c:	100b883a 	mov	r5,r2
 8000a60:	01020074 	movhi	r4,2049
 8000a64:	21078104 	addi	r4,r4,7684
 8000a68:	8002a2c0 	call	8002a2c <printf>
			if (runningdebugflag) {	//previously running, reset USB hardware just to clear out any funky state, HS/FS etc
 8000a6c:	e0bfffc3 	ldbu	r2,-1(fp)
 8000a70:	10000326 	beq	r2,zero,8000a80 <main+0x348>
				runningdebugflag = 0;
 8000a74:	e03fffc5 	stb	zero,-1(fp)
				MAX3421E_init();
 8000a78:	80017980 	call	8001798 <MAX3421E_init>
				USB_init();
 8000a7c:	8001f500 	call	8001f50 <USB_init>
			}
			errorflag = 0;
 8000a80:	e03fff85 	stb	zero,-2(fp)
			clearLED(9);
 8000a84:	01000244 	movi	r4,9
 8000a88:	80004840 	call	8000484 <clearLED>
 8000a8c:	003f3806 	br	8000770 <main+0x38>
					continue; //NAK means no new data
 8000a90:	0001883a 	nop
 8000a94:	003f3606 	br	8000770 <main+0x38>
					continue;
 8000a98:	0001883a 	nop
		printf(".");
 8000a9c:	003f3406 	br	8000770 <main+0x38>

08000aa0 <HIDMProbe>:
/* HID Mouse probe. Called from USB state machine.                          */
/* assumes configuration length is less than 256 bytes                      */
/* looks for Class:03, Subclass: 01, Protocol: 02 in interface descriptor   */
/* sets mouse in boot protocol                                              */
/* assumes single configuration and interface configuration 0               */
BOOL HIDMProbe(BYTE addr, DWORD flags) {
 8000aa0:	defff204 	addi	sp,sp,-56
 8000aa4:	dfc00d15 	stw	ra,52(sp)
 8000aa8:	df000c15 	stw	fp,48(sp)
 8000aac:	df000c04 	addi	fp,sp,48
 8000ab0:	2005883a 	mov	r2,r4
 8000ab4:	e17ff915 	stw	r5,-28(fp)
 8000ab8:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000abc:	00820074 	movhi	r2,2049
 8000ac0:	10974504 	addi	r2,r2,23828
 8000ac4:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 8000ac8:	00820074 	movhi	r2,2049
 8000acc:	10974504 	addi	r2,r2,23828
 8000ad0:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000ad4:	e0fffa03 	ldbu	r3,-24(fp)
 8000ad8:	00820074 	movhi	r2,2049
 8000adc:	10974504 	addi	r2,r2,23828
 8000ae0:	d8800415 	stw	r2,16(sp)
 8000ae4:	00800244 	movi	r2,9
 8000ae8:	d8800315 	stw	r2,12(sp)
 8000aec:	d8000215 	stw	zero,8(sp)
 8000af0:	00800084 	movi	r2,2
 8000af4:	d8800115 	stw	r2,4(sp)
 8000af8:	d8000015 	stw	zero,0(sp)
 8000afc:	01c00184 	movi	r7,6
 8000b00:	01802004 	movi	r6,128
 8000b04:	000b883a 	mov	r5,zero
 8000b08:	1809883a 	mov	r4,r3
 8000b0c:	80019880 	call	8001988 <XferCtrlReq>
 8000b10:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8000b14:	e0bffcc3 	ldbu	r2,-13(fp)
 8000b18:	10000226 	beq	r2,zero,8000b24 <HIDMProbe+0x84>
		//printf("unable to get configuration descriptor");
		return (FALSE);
 8000b1c:	0005883a 	mov	r2,zero
 8000b20:	0000d306 	br	8000e70 <HIDMProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000b24:	e0bffe17 	ldw	r2,-8(fp)
 8000b28:	1080008b 	ldhu	r2,2(r2)
 8000b2c:	10bfffcc 	andi	r2,r2,65535
 8000b30:	10804070 	cmpltui	r2,r2,257
 8000b34:	1000031e 	bne	r2,zero,8000b44 <HIDMProbe+0xa4>
		total_length = 256;
 8000b38:	00804004 	movi	r2,256
 8000b3c:	e0bfff8d 	sth	r2,-2(fp)
 8000b40:	00000306 	br	8000b50 <HIDMProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000b44:	e0bffe17 	ldw	r2,-8(fp)
 8000b48:	1080008b 	ldhu	r2,2(r2)
 8000b4c:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000b50:	e13ffa03 	ldbu	r4,-24(fp)
 8000b54:	e0ffff8b 	ldhu	r3,-2(fp)
 8000b58:	00820074 	movhi	r2,2049
 8000b5c:	10974504 	addi	r2,r2,23828
 8000b60:	d8800415 	stw	r2,16(sp)
 8000b64:	d8c00315 	stw	r3,12(sp)
 8000b68:	d8000215 	stw	zero,8(sp)
 8000b6c:	00800084 	movi	r2,2
 8000b70:	d8800115 	stw	r2,4(sp)
 8000b74:	d8000015 	stw	zero,0(sp)
 8000b78:	01c00184 	movi	r7,6
 8000b7c:	01802004 	movi	r6,128
 8000b80:	000b883a 	mov	r5,zero
 8000b84:	80019880 	call	8001988 <XferCtrlReq>
 8000b88:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8000b8c:	e0bffcc3 	ldbu	r2,-13(fp)
 8000b90:	10000226 	beq	r2,zero,8000b9c <HIDMProbe+0xfc>
		//printf("unable to get configuration");
		return (FALSE);
 8000b94:	0005883a 	mov	r2,zero
 8000b98:	0000b506 	br	8000e70 <HIDMProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue;
 8000b9c:	e0bffe17 	ldw	r2,-8(fp)
 8000ba0:	10800143 	ldbu	r2,5(r2)
 8000ba4:	e0bffc85 	stb	r2,-14(fp)
	//printf("checking configuration value (length: %d): ",
	//		data_ptr->descr.config.wTotalLength);
	//for (int i = 0; i < data_ptr->descr.config.wTotalLength; i++) {
		//printf("%x ", (unsigned char) (bigbuf[i] & 0xff));
	//}
	while (byte_ptr < bigbuf + total_length) {
 8000ba8:	0000aa06 	br	8000e54 <HIDMProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) {
 8000bac:	e0bffe17 	ldw	r2,-8(fp)
 8000bb0:	10800043 	ldbu	r2,1(r2)
 8000bb4:	10803fcc 	andi	r2,r2,255
 8000bb8:	10800120 	cmpeqi	r2,r2,4
 8000bbc:	1000091e 	bne	r2,zero,8000be4 <HIDMProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000bc0:	e0bffe17 	ldw	r2,-8(fp)
 8000bc4:	10800003 	ldbu	r2,0(r2)
 8000bc8:	10803fcc 	andi	r2,r2,255
 8000bcc:	e0fffd17 	ldw	r3,-12(fp)
 8000bd0:	1885883a 	add	r2,r3,r2
 8000bd4:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000bd8:	e0bffd17 	ldw	r2,-12(fp)
 8000bdc:	e0bffe15 	stw	r2,-8(fp)
 8000be0:	00009c06 	br	8000e54 <HIDMProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000be4:	e0bffe17 	ldw	r2,-8(fp)
 8000be8:	10800143 	ldbu	r2,5(r2)
 8000bec:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000bf0:	e0bffe17 	ldw	r2,-8(fp)
 8000bf4:	10800183 	ldbu	r2,6(r2)
 8000bf8:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8000bfc:	e0bffe17 	ldw	r2,-8(fp)
 8000c00:	108001c3 	ldbu	r2,7(r2)
 8000c04:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000c08:	e0bffc43 	ldbu	r2,-15(fp)
 8000c0c:	108000d8 	cmpnei	r2,r2,3
 8000c10:	10008e1e 	bne	r2,zero,8000e4c <HIDMProbe+0x3ac>
 8000c14:	e0bffc03 	ldbu	r2,-16(fp)
 8000c18:	10800058 	cmpnei	r2,r2,1
 8000c1c:	10008b1e 	bne	r2,zero,8000e4c <HIDMProbe+0x3ac>
					&& protocol == HID_PROTOCOL_MOUSE) {
 8000c20:	e0bffbc3 	ldbu	r2,-17(fp)
 8000c24:	10800098 	cmpnei	r2,r2,2
 8000c28:	1000881e 	bne	r2,zero,8000e4c <HIDMProbe+0x3ac>
				//detected a mouse
				devtable[addr].devclass = HID_M;                  //device class
 8000c2c:	e0bffa03 	ldbu	r2,-24(fp)
 8000c30:	100890fa 	slli	r4,r2,3
 8000c34:	00c00084 	movi	r3,2
 8000c38:	00820074 	movhi	r2,2049
 8000c3c:	2085883a 	add	r2,r4,r2
 8000c40:	10d78605 	stb	r3,24088(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize;
 8000c44:	e0bffa03 	ldbu	r2,-24(fp)
 8000c48:	100690fa 	slli	r3,r2,3
 8000c4c:	00820074 	movhi	r2,2049
 8000c50:	1885883a 	add	r2,r3,r2
 8000c54:	10978517 	ldw	r2,24084(r2)
 8000c58:	1080008b 	ldhu	r2,2(r2)
 8000c5c:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8000c60:	80012680 	call	8001268 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8000c64:	e0bffa03 	ldbu	r2,-24(fp)
 8000c68:	100890fa 	slli	r4,r2,3
 8000c6c:	00c20074 	movhi	r3,2049
 8000c70:	18d73104 	addi	r3,r3,23748
 8000c74:	00820074 	movhi	r2,2049
 8000c78:	2085883a 	add	r2,r4,r2
 8000c7c:	10d78515 	stw	r3,24084(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte;
 8000c80:	e0bffa03 	ldbu	r2,-24(fp)
 8000c84:	100690fa 	slli	r3,r2,3
 8000c88:	00820074 	movhi	r2,2049
 8000c8c:	1885883a 	add	r2,r3,r2
 8000c90:	10978517 	ldw	r2,24084(r2)
 8000c94:	e0fffb83 	ldbu	r3,-18(fp)
 8000c98:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber;
 8000c9c:	e0bffe17 	ldw	r2,-8(fp)
 8000ca0:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8000ca4:	d0a71845 	stb	r2,-25503(gp)
				hid_device.addr = addr;
 8000ca8:	e0bffa03 	ldbu	r2,-24(fp)
 8000cac:	d0a71805 	stb	r2,-25504(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000cb0:	e0bffe17 	ldw	r2,-8(fp)
 8000cb4:	10800003 	ldbu	r2,0(r2)
 8000cb8:	10803fcc 	andi	r2,r2,255
 8000cbc:	e0fffd17 	ldw	r3,-12(fp)
 8000cc0:	1885883a 	add	r2,r3,r2
 8000cc4:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 8000cc8:	e0bffd17 	ldw	r2,-12(fp)
 8000ccc:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 8000cd0:	00005706 	br	8000e30 <HIDMProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 8000cd4:	e0bffe17 	ldw	r2,-8(fp)
 8000cd8:	10800043 	ldbu	r2,1(r2)
 8000cdc:	10803fcc 	andi	r2,r2,255
 8000ce0:	10800160 	cmpeqi	r2,r2,5
 8000ce4:	1000091e 	bne	r2,zero,8000d0c <HIDMProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000ce8:	e0bffe17 	ldw	r2,-8(fp)
 8000cec:	10800003 	ldbu	r2,0(r2)
 8000cf0:	10803fcc 	andi	r2,r2,255
 8000cf4:	e0fffd17 	ldw	r3,-12(fp)
 8000cf8:	1885883a 	add	r2,r3,r2
 8000cfc:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 8000d00:	e0bffd17 	ldw	r2,-12(fp)
 8000d04:	e0bffe15 	stw	r2,-8(fp)
 8000d08:	00004906 	br	8000e30 <HIDMProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 8000d0c:	e0bffa03 	ldbu	r2,-24(fp)
 8000d10:	100690fa 	slli	r3,r2,3
 8000d14:	00820074 	movhi	r2,2049
 8000d18:	1885883a 	add	r2,r3,r2
 8000d1c:	10978517 	ldw	r2,24084(r2)
 8000d20:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8000d24:	e0fffe17 	ldw	r3,-8(fp)
 8000d28:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 8000d2c:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 8000d30:	e0bffa03 	ldbu	r2,-24(fp)
 8000d34:	100690fa 	slli	r3,r2,3
 8000d38:	00820074 	movhi	r2,2049
 8000d3c:	1885883a 	add	r2,r3,r2
 8000d40:	10978517 	ldw	r2,24084(r2)
 8000d44:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 8000d48:	e0fffe17 	ldw	r3,-8(fp)
 8000d4c:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 8000d50:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 8000d54:	e0bffa03 	ldbu	r2,-24(fp)
 8000d58:	100690fa 	slli	r3,r2,3
 8000d5c:	00820074 	movhi	r2,2049
 8000d60:	1885883a 	add	r2,r3,r2
 8000d64:	10978517 	ldw	r2,24084(r2)
 8000d68:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8000d6c:	e0fffe17 	ldw	r3,-8(fp)
 8000d70:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8000d74:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 8000d78:	e0bffa03 	ldbu	r2,-24(fp)
 8000d7c:	100690fa 	slli	r3,r2,3
 8000d80:	00820074 	movhi	r2,2049
 8000d84:	1885883a 	add	r2,r3,r2
 8000d88:	10978517 	ldw	r2,24084(r2)
 8000d8c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8000d90:	e0fffe17 	ldw	r3,-8(fp)
 8000d94:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 8000d98:	10c00105 	stb	r3,4(r2)
						// devtable[ addr ].epinfo[ 1 ].rcvToggle = bmRCVTOG0;
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8000d9c:	e0fffa03 	ldbu	r3,-24(fp)
 8000da0:	e0bffc83 	ldbu	r2,-14(fp)
 8000da4:	d8000415 	stw	zero,16(sp)
 8000da8:	d8000315 	stw	zero,12(sp)
 8000dac:	d8000215 	stw	zero,8(sp)
 8000db0:	d8000115 	stw	zero,4(sp)
 8000db4:	d8800015 	stw	r2,0(sp)
 8000db8:	01c00244 	movi	r7,9
 8000dbc:	000d883a 	mov	r6,zero
 8000dc0:	000b883a 	mov	r5,zero
 8000dc4:	1809883a 	mov	r4,r3
 8000dc8:	80019880 	call	8001988 <XferCtrlReq>
 8000dcc:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 8000dd0:	e0bffcc3 	ldbu	r2,-13(fp)
 8000dd4:	10000226 	beq	r2,zero,8000de0 <HIDMProbe+0x340>
							return (FALSE);
 8000dd8:	0005883a 	mov	r2,zero
 8000ddc:	00002406 	br	8000e70 <HIDMProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 8000de0:	e0fffa03 	ldbu	r3,-24(fp)
 8000de4:	d0a71843 	ldbu	r2,-25503(gp)
 8000de8:	10803fcc 	andi	r2,r2,255
 8000dec:	d8000415 	stw	zero,16(sp)
 8000df0:	d8000315 	stw	zero,12(sp)
 8000df4:	d8800215 	stw	r2,8(sp)
 8000df8:	d8000115 	stw	zero,4(sp)
 8000dfc:	d8000015 	stw	zero,0(sp)
 8000e00:	01c002c4 	movi	r7,11
 8000e04:	01800844 	movi	r6,33
 8000e08:	000b883a 	mov	r5,zero
 8000e0c:	1809883a 	mov	r4,r3
 8000e10:	80019880 	call	8001988 <XferCtrlReq>
 8000e14:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 8000e18:	e0bffcc3 	ldbu	r2,-13(fp)
 8000e1c:	10000226 	beq	r2,zero,8000e28 <HIDMProbe+0x388>
							return (FALSE);
 8000e20:	0005883a 	mov	r2,zero
 8000e24:	00001206 	br	8000e70 <HIDMProbe+0x3d0>
						} else {
							return (TRUE);
 8000e28:	00800044 	movi	r2,1
 8000e2c:	00001006 	br	8000e70 <HIDMProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 8000e30:	e0ffff8b 	ldhu	r3,-2(fp)
 8000e34:	00820074 	movhi	r2,2049
 8000e38:	10974504 	addi	r2,r2,23828
 8000e3c:	1885883a 	add	r2,r3,r2
 8000e40:	e0fffd17 	ldw	r3,-12(fp)
 8000e44:	18bfa336 	bltu	r3,r2,8000cd4 <HIDMProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000e48:	00000206 	br	8000e54 <HIDMProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; die on first interface. Not really correct
				return (FALSE);
 8000e4c:	0005883a 	mov	r2,zero
 8000e50:	00000706 	br	8000e70 <HIDMProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {
 8000e54:	e0ffff8b 	ldhu	r3,-2(fp)
 8000e58:	00820074 	movhi	r2,2049
 8000e5c:	10974504 	addi	r2,r2,23828
 8000e60:	1885883a 	add	r2,r3,r2
 8000e64:	e0fffd17 	ldw	r3,-12(fp)
 8000e68:	18bf5036 	bltu	r3,r2,8000bac <HIDMProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8000e6c:	0005883a 	mov	r2,zero
}
 8000e70:	e037883a 	mov	sp,fp
 8000e74:	dfc00117 	ldw	ra,4(sp)
 8000e78:	df000017 	ldw	fp,0(sp)
 8000e7c:	dec00204 	addi	sp,sp,8
 8000e80:	f800283a 	ret

08000e84 <HIDKProbe>:
/* HID Keyboard probe. Called from USB state machine.                           */
/* assumes configuration length is less than 256 bytes                          */
/* looks for Class:03, Subclass: 01, Protocol: 01 in interface descriptor       */
/* sets keyboard in boot protocol                                               */
/* assumes single configuration, single endpoint, and interface configuration 0 */
BOOL HIDKProbe(BYTE addr, DWORD flags) {
 8000e84:	defff204 	addi	sp,sp,-56
 8000e88:	dfc00d15 	stw	ra,52(sp)
 8000e8c:	df000c15 	stw	fp,48(sp)
 8000e90:	df000c04 	addi	fp,sp,48
 8000e94:	2005883a 	mov	r2,r4
 8000e98:	e17ff915 	stw	r5,-28(fp)
 8000e9c:	e0bffa05 	stb	r2,-24(fp)
	BYTE tmpbyte;
	BYTE rcode;
	BYTE confvalue;
	WORD total_length;
	USB_DESCR* data_ptr = (USB_DESCR *) &bigbuf;
 8000ea0:	00820074 	movhi	r2,2049
 8000ea4:	10974504 	addi	r2,r2,23828
 8000ea8:	e0bffe15 	stw	r2,-8(fp)
	BYTE* byte_ptr = bigbuf;
 8000eac:	00820074 	movhi	r2,2049
 8000eb0:	10974504 	addi	r2,r2,23828
 8000eb4:	e0bffd15 	stw	r2,-12(fp)
	rcode = XferGetConfDescr(addr, 0, CONF_DESCR_LEN, 0, bigbuf); //get configuration descriptor
 8000eb8:	e0fffa03 	ldbu	r3,-24(fp)
 8000ebc:	00820074 	movhi	r2,2049
 8000ec0:	10974504 	addi	r2,r2,23828
 8000ec4:	d8800415 	stw	r2,16(sp)
 8000ec8:	00800244 	movi	r2,9
 8000ecc:	d8800315 	stw	r2,12(sp)
 8000ed0:	d8000215 	stw	zero,8(sp)
 8000ed4:	00800084 	movi	r2,2
 8000ed8:	d8800115 	stw	r2,4(sp)
 8000edc:	d8000015 	stw	zero,0(sp)
 8000ee0:	01c00184 	movi	r7,6
 8000ee4:	01802004 	movi	r6,128
 8000ee8:	000b883a 	mov	r5,zero
 8000eec:	1809883a 	mov	r4,r3
 8000ef0:	80019880 	call	8001988 <XferCtrlReq>
 8000ef4:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling           
 8000ef8:	e0bffcc3 	ldbu	r2,-13(fp)
 8000efc:	10000226 	beq	r2,zero,8000f08 <HIDKProbe+0x84>
		return (FALSE);
 8000f00:	0005883a 	mov	r2,zero
 8000f04:	0000d306 	br	8001254 <HIDKProbe+0x3d0>
	}
	if (data_ptr->descr.config.wTotalLength > 256) {
 8000f08:	e0bffe17 	ldw	r2,-8(fp)
 8000f0c:	1080008b 	ldhu	r2,2(r2)
 8000f10:	10bfffcc 	andi	r2,r2,65535
 8000f14:	10804070 	cmpltui	r2,r2,257
 8000f18:	1000031e 	bne	r2,zero,8000f28 <HIDKProbe+0xa4>
		total_length = 256;
 8000f1c:	00804004 	movi	r2,256
 8000f20:	e0bfff8d 	sth	r2,-2(fp)
 8000f24:	00000306 	br	8000f34 <HIDKProbe+0xb0>
	} else {
		total_length = data_ptr->descr.config.wTotalLength;
 8000f28:	e0bffe17 	ldw	r2,-8(fp)
 8000f2c:	1080008b 	ldhu	r2,2(r2)
 8000f30:	e0bfff8d 	sth	r2,-2(fp)
	}
	rcode = XferGetConfDescr(addr, 0, total_length, 0, bigbuf); //get the whole configuration
 8000f34:	e13ffa03 	ldbu	r4,-24(fp)
 8000f38:	e0ffff8b 	ldhu	r3,-2(fp)
 8000f3c:	00820074 	movhi	r2,2049
 8000f40:	10974504 	addi	r2,r2,23828
 8000f44:	d8800415 	stw	r2,16(sp)
 8000f48:	d8c00315 	stw	r3,12(sp)
 8000f4c:	d8000215 	stw	zero,8(sp)
 8000f50:	00800084 	movi	r2,2
 8000f54:	d8800115 	stw	r2,4(sp)
 8000f58:	d8000015 	stw	zero,0(sp)
 8000f5c:	01c00184 	movi	r7,6
 8000f60:	01802004 	movi	r6,128
 8000f64:	000b883a 	mov	r5,zero
 8000f68:	80019880 	call	8001988 <XferCtrlReq>
 8000f6c:	e0bffcc5 	stb	r2,-13(fp)
	if (rcode) {   //error handling
 8000f70:	e0bffcc3 	ldbu	r2,-13(fp)
 8000f74:	10000226 	beq	r2,zero,8000f80 <HIDKProbe+0xfc>
		return (FALSE);
 8000f78:	0005883a 	mov	r2,zero
 8000f7c:	0000b506 	br	8001254 <HIDKProbe+0x3d0>
	}
	confvalue = data_ptr->descr.config.bConfigurationValue; //save configuration value to use later
 8000f80:	e0bffe17 	ldw	r2,-8(fp)
 8000f84:	10800143 	ldbu	r2,5(r2)
 8000f88:	e0bffc85 	stb	r2,-14(fp)
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8000f8c:	0000aa06 	br	8001238 <HIDKProbe+0x3b4>
		if (data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE) { //skip to the next descriptor
 8000f90:	e0bffe17 	ldw	r2,-8(fp)
 8000f94:	10800043 	ldbu	r2,1(r2)
 8000f98:	10803fcc 	andi	r2,r2,255
 8000f9c:	10800120 	cmpeqi	r2,r2,4
 8000fa0:	1000091e 	bne	r2,zero,8000fc8 <HIDKProbe+0x144>
			byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 8000fa4:	e0bffe17 	ldw	r2,-8(fp)
 8000fa8:	10800003 	ldbu	r2,0(r2)
 8000fac:	10803fcc 	andi	r2,r2,255
 8000fb0:	e0fffd17 	ldw	r3,-12(fp)
 8000fb4:	1885883a 	add	r2,r3,r2
 8000fb8:	e0bffd15 	stw	r2,-12(fp)
			data_ptr = (USB_DESCR*) byte_ptr;
 8000fbc:	e0bffd17 	ldw	r2,-12(fp)
 8000fc0:	e0bffe15 	stw	r2,-8(fp)
 8000fc4:	00009c06 	br	8001238 <HIDKProbe+0x3b4>
		} // if( data_ptr->descr.config.bDescriptorType != USB_DESCRIPTOR_INTERFACE
		else {
			//printf("starting interface parsing at byte location %d\n",
			//		data_ptr->descr.config.bLength);
			BYTE class = data_ptr->descr.interface.bInterfaceClass;
 8000fc8:	e0bffe17 	ldw	r2,-8(fp)
 8000fcc:	10800143 	ldbu	r2,5(r2)
 8000fd0:	e0bffc45 	stb	r2,-15(fp)
			BYTE subclass = data_ptr->descr.interface.bInterfaceSubClass;
 8000fd4:	e0bffe17 	ldw	r2,-8(fp)
 8000fd8:	10800183 	ldbu	r2,6(r2)
 8000fdc:	e0bffc05 	stb	r2,-16(fp)
			BYTE protocol = data_ptr->descr.interface.bInterfaceProtocol;
 8000fe0:	e0bffe17 	ldw	r2,-8(fp)
 8000fe4:	108001c3 	ldbu	r2,7(r2)
 8000fe8:	e0bffbc5 	stb	r2,-17(fp)
			//printf("class %x, subclass %x, protocol %x,\n", class, subclass,
			//		protocol);
			//interface descriptor
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 8000fec:	e0bffc43 	ldbu	r2,-15(fp)
 8000ff0:	108000d8 	cmpnei	r2,r2,3
 8000ff4:	10008e1e 	bne	r2,zero,8001230 <HIDKProbe+0x3ac>
 8000ff8:	e0bffc03 	ldbu	r2,-16(fp)
 8000ffc:	10800058 	cmpnei	r2,r2,1
 8001000:	10008b1e 	bne	r2,zero,8001230 <HIDKProbe+0x3ac>
					&& protocol == HID_PROTOCOL_KEYBOARD) {
 8001004:	e0bffbc3 	ldbu	r2,-17(fp)
 8001008:	10800058 	cmpnei	r2,r2,1
 800100c:	1000881e 	bne	r2,zero,8001230 <HIDKProbe+0x3ac>
				//detected a keyboard
				devtable[addr].devclass = HID_K;             //fill device class
 8001010:	e0bffa03 	ldbu	r2,-24(fp)
 8001014:	100890fa 	slli	r4,r2,3
 8001018:	00c00044 	movi	r3,1
 800101c:	00820074 	movhi	r2,2049
 8001020:	2085883a 	add	r2,r4,r2
 8001024:	10d78605 	stb	r3,24088(r2)
				tmpbyte = devtable[addr].epinfo->MaxPktSize; //save max.packet size
 8001028:	e0bffa03 	ldbu	r2,-24(fp)
 800102c:	100690fa 	slli	r3,r2,3
 8001030:	00820074 	movhi	r2,2049
 8001034:	1885883a 	add	r2,r3,r2
 8001038:	10978517 	ldw	r2,24084(r2)
 800103c:	1080008b 	ldhu	r2,2(r2)
 8001040:	e0bffb85 	stb	r2,-18(fp)
				HID_init();                         //initialize data structures
 8001044:	80012680 	call	8001268 <HID_init>
				devtable[addr].epinfo = hid_ep; //switch endpoint information structure
 8001048:	e0bffa03 	ldbu	r2,-24(fp)
 800104c:	100890fa 	slli	r4,r2,3
 8001050:	00c20074 	movhi	r3,2049
 8001054:	18d73104 	addi	r3,r3,23748
 8001058:	00820074 	movhi	r2,2049
 800105c:	2085883a 	add	r2,r4,r2
 8001060:	10d78515 	stw	r3,24084(r2)
				devtable[addr].epinfo[0].MaxPktSize = tmpbyte; //fill in max.packet size
 8001064:	e0bffa03 	ldbu	r2,-24(fp)
 8001068:	100690fa 	slli	r3,r2,3
 800106c:	00820074 	movhi	r2,2049
 8001070:	1885883a 	add	r2,r3,r2
 8001074:	10978517 	ldw	r2,24084(r2)
 8001078:	e0fffb83 	ldbu	r3,-18(fp)
 800107c:	10c0008d 	sth	r3,2(r2)
				hid_device.interface =
						data_ptr->descr.interface.bInterfaceNumber; //fill in interface number to be used in HID requests
 8001080:	e0bffe17 	ldw	r2,-8(fp)
 8001084:	10800083 	ldbu	r2,2(r2)
				hid_device.interface =
 8001088:	d0a71845 	stb	r2,-25503(gp)
				hid_device.addr = addr;                        //fill in address
 800108c:	e0bffa03 	ldbu	r2,-24(fp)
 8001090:	d0a71805 	stb	r2,-25504(gp)
				byte_ptr = byte_ptr + data_ptr->descr.config.bLength; //skip to the next descriptor
 8001094:	e0bffe17 	ldw	r2,-8(fp)
 8001098:	10800003 	ldbu	r2,0(r2)
 800109c:	10803fcc 	andi	r2,r2,255
 80010a0:	e0fffd17 	ldw	r3,-12(fp)
 80010a4:	1885883a 	add	r2,r3,r2
 80010a8:	e0bffd15 	stw	r2,-12(fp)
				data_ptr = (USB_DESCR*) byte_ptr;
 80010ac:	e0bffd17 	ldw	r2,-12(fp)
 80010b0:	e0bffe15 	stw	r2,-8(fp)
				while (byte_ptr < bigbuf + total_length) {
 80010b4:	00005706 	br	8001214 <HIDKProbe+0x390>
					if (data_ptr->descr.config.bDescriptorType
 80010b8:	e0bffe17 	ldw	r2,-8(fp)
 80010bc:	10800043 	ldbu	r2,1(r2)
 80010c0:	10803fcc 	andi	r2,r2,255
 80010c4:	10800160 	cmpeqi	r2,r2,5
 80010c8:	1000091e 	bne	r2,zero,80010f0 <HIDKProbe+0x26c>
							!= USB_DESCRIPTOR_ENDPOINT) { //skip to endpoint descriptor
						byte_ptr = byte_ptr + data_ptr->descr.config.bLength;
 80010cc:	e0bffe17 	ldw	r2,-8(fp)
 80010d0:	10800003 	ldbu	r2,0(r2)
 80010d4:	10803fcc 	andi	r2,r2,255
 80010d8:	e0fffd17 	ldw	r3,-12(fp)
 80010dc:	1885883a 	add	r2,r3,r2
 80010e0:	e0bffd15 	stw	r2,-12(fp)
						data_ptr = (USB_DESCR*) byte_ptr;
 80010e4:	e0bffd17 	ldw	r2,-12(fp)
 80010e8:	e0bffe15 	stw	r2,-8(fp)
 80010ec:	00004906 	br	8001214 <HIDKProbe+0x390>
					} else {
						/* fill endpoint information structure */
						devtable[addr].epinfo[1].epAddr =
 80010f0:	e0bffa03 	ldbu	r2,-24(fp)
 80010f4:	100690fa 	slli	r3,r2,3
 80010f8:	00820074 	movhi	r2,2049
 80010fc:	1885883a 	add	r2,r3,r2
 8001100:	10978517 	ldw	r2,24084(r2)
 8001104:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bEndpointAddress;
 8001108:	e0fffe17 	ldw	r3,-8(fp)
 800110c:	18c00083 	ldbu	r3,2(r3)
						devtable[addr].epinfo[1].epAddr =
 8001110:	10c00005 	stb	r3,0(r2)
						devtable[addr].epinfo[1].Attr =
 8001114:	e0bffa03 	ldbu	r2,-24(fp)
 8001118:	100690fa 	slli	r3,r2,3
 800111c:	00820074 	movhi	r2,2049
 8001120:	1885883a 	add	r2,r3,r2
 8001124:	10978517 	ldw	r2,24084(r2)
 8001128:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bmAttributes;
 800112c:	e0fffe17 	ldw	r3,-8(fp)
 8001130:	18c000c3 	ldbu	r3,3(r3)
						devtable[addr].epinfo[1].Attr =
 8001134:	10c00045 	stb	r3,1(r2)
						devtable[addr].epinfo[1].MaxPktSize =
 8001138:	e0bffa03 	ldbu	r2,-24(fp)
 800113c:	100690fa 	slli	r3,r2,3
 8001140:	00820074 	movhi	r2,2049
 8001144:	1885883a 	add	r2,r3,r2
 8001148:	10978517 	ldw	r2,24084(r2)
 800114c:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.wMaxPacketSize;
 8001150:	e0fffe17 	ldw	r3,-8(fp)
 8001154:	18c0010b 	ldhu	r3,4(r3)
						devtable[addr].epinfo[1].MaxPktSize =
 8001158:	10c0008d 	sth	r3,2(r2)
						devtable[addr].epinfo[1].Interval =
 800115c:	e0bffa03 	ldbu	r2,-24(fp)
 8001160:	100690fa 	slli	r3,r2,3
 8001164:	00820074 	movhi	r2,2049
 8001168:	1885883a 	add	r2,r3,r2
 800116c:	10978517 	ldw	r2,24084(r2)
 8001170:	10800204 	addi	r2,r2,8
								data_ptr->descr.endpoint.bInterval;
 8001174:	e0fffe17 	ldw	r3,-8(fp)
 8001178:	18c00183 	ldbu	r3,6(r3)
						devtable[addr].epinfo[1].Interval =
 800117c:	10c00105 	stb	r3,4(r2)
						/* configure device */
						rcode = XferSetConf(addr, 0, confvalue); //set configuration
 8001180:	e0fffa03 	ldbu	r3,-24(fp)
 8001184:	e0bffc83 	ldbu	r2,-14(fp)
 8001188:	d8000415 	stw	zero,16(sp)
 800118c:	d8000315 	stw	zero,12(sp)
 8001190:	d8000215 	stw	zero,8(sp)
 8001194:	d8000115 	stw	zero,4(sp)
 8001198:	d8800015 	stw	r2,0(sp)
 800119c:	01c00244 	movi	r7,9
 80011a0:	000d883a 	mov	r6,zero
 80011a4:	000b883a 	mov	r5,zero
 80011a8:	1809883a 	mov	r4,r3
 80011ac:	80019880 	call	8001988 <XferCtrlReq>
 80011b0:	e0bffcc5 	stb	r2,-13(fp)
						if (rcode) {   //error handling
 80011b4:	e0bffcc3 	ldbu	r2,-13(fp)
 80011b8:	10000226 	beq	r2,zero,80011c4 <HIDKProbe+0x340>
							return (FALSE);
 80011bc:	0005883a 	mov	r2,zero
 80011c0:	00002406 	br	8001254 <HIDKProbe+0x3d0>
						}
						rcode = XferSetProto(addr, 0, hid_device.interface,
 80011c4:	e0fffa03 	ldbu	r3,-24(fp)
 80011c8:	d0a71843 	ldbu	r2,-25503(gp)
 80011cc:	10803fcc 	andi	r2,r2,255
 80011d0:	d8000415 	stw	zero,16(sp)
 80011d4:	d8000315 	stw	zero,12(sp)
 80011d8:	d8800215 	stw	r2,8(sp)
 80011dc:	d8000115 	stw	zero,4(sp)
 80011e0:	d8000015 	stw	zero,0(sp)
 80011e4:	01c002c4 	movi	r7,11
 80011e8:	01800844 	movi	r6,33
 80011ec:	000b883a 	mov	r5,zero
 80011f0:	1809883a 	mov	r4,r3
 80011f4:	80019880 	call	8001988 <XferCtrlReq>
 80011f8:	e0bffcc5 	stb	r2,-13(fp)
								BOOT_PROTOCOL);
						if (rcode) {   //error handling
 80011fc:	e0bffcc3 	ldbu	r2,-13(fp)
 8001200:	10000226 	beq	r2,zero,800120c <HIDKProbe+0x388>
							return (FALSE);
 8001204:	0005883a 	mov	r2,zero
 8001208:	00001206 	br	8001254 <HIDKProbe+0x3d0>
						} else {
							return (TRUE);
 800120c:	00800044 	movi	r2,1
 8001210:	00001006 	br	8001254 <HIDKProbe+0x3d0>
				while (byte_ptr < bigbuf + total_length) {
 8001214:	e0ffff8b 	ldhu	r3,-2(fp)
 8001218:	00820074 	movhi	r2,2049
 800121c:	10974504 	addi	r2,r2,23828
 8001220:	1885883a 	add	r2,r3,r2
 8001224:	e0fffd17 	ldw	r3,-12(fp)
 8001228:	18bfa336 	bltu	r3,r2,80010b8 <HIDKProbe+0x234>
			if (class == HID_INTF && subclass == BOOT_INTF_SUBCLASS
 800122c:	00000206 	br	8001238 <HIDKProbe+0x3b4>
						}
					}
				}   //while( byte_ptr....
			}   //if (Class matches
			else { //if class don't match; stop processing after first interface. Not really correct
				return (FALSE);
 8001230:	0005883a 	mov	r2,zero
 8001234:	00000706 	br	8001254 <HIDKProbe+0x3d0>
	while (byte_ptr < bigbuf + total_length) {             //parse configuration
 8001238:	e0ffff8b 	ldhu	r3,-2(fp)
 800123c:	00820074 	movhi	r2,2049
 8001240:	10974504 	addi	r2,r2,23828
 8001244:	1885883a 	add	r2,r3,r2
 8001248:	e0fffd17 	ldw	r3,-12(fp)
 800124c:	18bf5036 	bltu	r3,r2,8000f90 <HIDKProbe+0x10c>
			}
		} //else if( data_ptr->
	} // while( byte_ptr < &buf + total_length
	return (FALSE);
 8001250:	0005883a 	mov	r2,zero
}
 8001254:	e037883a 	mov	sp,fp
 8001258:	dfc00117 	ldw	ra,4(sp)
 800125c:	df000017 	ldw	fp,0(sp)
 8001260:	dec00204 	addi	sp,sp,8
 8001264:	f800283a 	ret

08001268 <HID_init>:
/* HID data structures initialization */
void HID_init(void) {
 8001268:	deffff04 	addi	sp,sp,-4
 800126c:	df000015 	stw	fp,0(sp)
 8001270:	d839883a 	mov	fp,sp
	hid_ep[1].sndToggle = bmSNDTOG0;
 8001274:	00c01004 	movi	r3,64
 8001278:	00820074 	movhi	r2,2049
 800127c:	10d73445 	stb	r3,23761(r2)
	hid_ep[1].rcvToggle = bmRCVTOG0;
 8001280:	00c00404 	movi	r3,16
 8001284:	00820074 	movhi	r2,2049
 8001288:	10d73485 	stb	r3,23762(r2)
}
 800128c:	0001883a 	nop
 8001290:	e037883a 	mov	sp,fp
 8001294:	df000017 	ldw	fp,0(sp)
 8001298:	dec00104 	addi	sp,sp,4
 800129c:	f800283a 	ret

080012a0 <mousePoll>:
/* poll boot mouse */
BYTE mousePoll(BOOT_MOUSE_REPORT* buf) {
 80012a0:	defffb04 	addi	sp,sp,-20
 80012a4:	dfc00415 	stw	ra,16(sp)
 80012a8:	df000315 	stw	fp,12(sp)
 80012ac:	df000304 	addi	fp,sp,12
 80012b0:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 80012b4:	d0a71803 	ldbu	r2,-25504(gp)
 80012b8:	10803fcc 	andi	r2,r2,255
 80012bc:	100b883a 	mov	r5,r2
 80012c0:	01003804 	movi	r4,224
 80012c4:	80014880 	call	8001488 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 80012c8:	d0a71803 	ldbu	r2,-25504(gp)
 80012cc:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 80012d0:	d0a71803 	ldbu	r2,-25504(gp)
 80012d4:	10803fcc 	andi	r2,r2,255
 80012d8:	100690fa 	slli	r3,r2,3
 80012dc:	00820074 	movhi	r2,2049
 80012e0:	1885883a 	add	r2,r3,r2
 80012e4:	10978517 	ldw	r2,24084(r2)
 80012e8:	10800204 	addi	r2,r2,8
 80012ec:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 80012f0:	10803fcc 	andi	r2,r2,255
 80012f4:	d8800015 	stw	r2,0(sp)
 80012f8:	e1fffe17 	ldw	r7,-8(fp)
 80012fc:	01800204 	movi	r6,8
 8001300:	01400044 	movi	r5,1
 8001304:	8001dc80 	call	8001dc8 <XferInTransfer>
 8001308:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 800130c:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001310:	e037883a 	mov	sp,fp
 8001314:	dfc00117 	ldw	ra,4(sp)
 8001318:	df000017 	ldw	fp,0(sp)
 800131c:	dec00204 	addi	sp,sp,8
 8001320:	f800283a 	ret

08001324 <kbdPoll>:
/* poll boot keyboard */
BYTE kbdPoll(BOOT_KBD_REPORT* buf) {
 8001324:	defffb04 	addi	sp,sp,-20
 8001328:	dfc00415 	stw	ra,16(sp)
 800132c:	df000315 	stw	fp,12(sp)
 8001330:	df000304 	addi	fp,sp,12
 8001334:	e13ffe15 	stw	r4,-8(fp)
	BYTE rcode;
	MAXreg_wr( rPERADDR, hid_device.addr);    //set peripheral address
 8001338:	d0a71803 	ldbu	r2,-25504(gp)
 800133c:	10803fcc 	andi	r2,r2,255
 8001340:	100b883a 	mov	r5,r2
 8001344:	01003804 	movi	r4,224
 8001348:	80014880 	call	8001488 <MAXreg_wr>
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 800134c:	d0a71803 	ldbu	r2,-25504(gp)
 8001350:	11003fcc 	andi	r4,r2,255
			devtable[hid_device.addr].epinfo[1].MaxPktSize);
 8001354:	d0a71803 	ldbu	r2,-25504(gp)
 8001358:	10803fcc 	andi	r2,r2,255
 800135c:	100690fa 	slli	r3,r2,3
 8001360:	00820074 	movhi	r2,2049
 8001364:	1885883a 	add	r2,r3,r2
 8001368:	10978517 	ldw	r2,24084(r2)
 800136c:	10800204 	addi	r2,r2,8
 8001370:	1080008b 	ldhu	r2,2(r2)
	rcode = XferInTransfer(hid_device.addr, 1, 8, (BYTE*) buf,
 8001374:	10803fcc 	andi	r2,r2,255
 8001378:	d8800015 	stw	r2,0(sp)
 800137c:	e1fffe17 	ldw	r7,-8(fp)
 8001380:	01800204 	movi	r6,8
 8001384:	01400044 	movi	r5,1
 8001388:	8001dc80 	call	8001dc8 <XferInTransfer>
 800138c:	e0bfffc5 	stb	r2,-1(fp)
	return (rcode);
 8001390:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001394:	e037883a 	mov	sp,fp
 8001398:	dfc00117 	ldw	ra,4(sp)
 800139c:	df000017 	ldw	fp,0(sp)
 80013a0:	dec00204 	addi	sp,sp,8
 80013a4:	f800283a 	ret

080013a8 <HIDMEventHandler>:
BOOL HIDMEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 80013a8:	defffb04 	addi	sp,sp,-20
 80013ac:	df000415 	stw	fp,16(sp)
 80013b0:	df000404 	addi	fp,sp,16
 80013b4:	2005883a 	mov	r2,r4
 80013b8:	2807883a 	mov	r3,r5
 80013bc:	e1bffd15 	stw	r6,-12(fp)
 80013c0:	e1fffc15 	stw	r7,-16(fp)
 80013c4:	e0bfff05 	stb	r2,-4(fp)
 80013c8:	1805883a 	mov	r2,r3
 80013cc:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 80013d0:	0005883a 	mov	r2,zero
}
 80013d4:	e037883a 	mov	sp,fp
 80013d8:	df000017 	ldw	fp,0(sp)
 80013dc:	dec00104 	addi	sp,sp,4
 80013e0:	f800283a 	ret

080013e4 <HIDKEventHandler>:
BOOL HIDKEventHandler(BYTE address, BYTE event, void *data, DWORD size) {
 80013e4:	defffb04 	addi	sp,sp,-20
 80013e8:	df000415 	stw	fp,16(sp)
 80013ec:	df000404 	addi	fp,sp,16
 80013f0:	2005883a 	mov	r2,r4
 80013f4:	2807883a 	mov	r3,r5
 80013f8:	e1bffd15 	stw	r6,-12(fp)
 80013fc:	e1fffc15 	stw	r7,-16(fp)
 8001400:	e0bfff05 	stb	r2,-4(fp)
 8001404:	1805883a 	mov	r2,r3
 8001408:	e0bffe05 	stb	r2,-8(fp)
	return (FALSE);
 800140c:	0005883a 	mov	r2,zero
}
 8001410:	e037883a 	mov	sp,fp
 8001414:	df000017 	ldw	fp,0(sp)
 8001418:	dec00104 	addi	sp,sp,4
 800141c:	f800283a 	ret

08001420 <SPI_init>:
//variables and data structures
//External variables
extern BYTE usb_task_state;

/* Functions    */
void SPI_init(BYTE sync_mode, BYTE bus_mode, BYTE smp_phase) {
 8001420:	defffc04 	addi	sp,sp,-16
 8001424:	df000315 	stw	fp,12(sp)
 8001428:	df000304 	addi	fp,sp,12
 800142c:	2005883a 	mov	r2,r4
 8001430:	2809883a 	mov	r4,r5
 8001434:	3007883a 	mov	r3,r6
 8001438:	e0bfff05 	stb	r2,-4(fp)
 800143c:	2005883a 	mov	r2,r4
 8001440:	e0bffe05 	stb	r2,-8(fp)
 8001444:	1805883a 	mov	r2,r3
 8001448:	e0bffd05 	stb	r2,-12(fp)
	//Don't need to initialize SPI port, already ready to go with BSP
}
 800144c:	0001883a 	nop
 8001450:	e037883a 	mov	sp,fp
 8001454:	df000017 	ldw	fp,0(sp)
 8001458:	dec00104 	addi	sp,sp,4
 800145c:	f800283a 	ret

08001460 <SPI_wr>:

//writes single byte to MAX3421E via SPI, simultanously reads status register and returns it
BYTE SPI_wr(BYTE data) {
 8001460:	defffe04 	addi	sp,sp,-8
 8001464:	df000115 	stw	fp,4(sp)
 8001468:	df000104 	addi	fp,sp,4
 800146c:	2005883a 	mov	r2,r4
 8001470:	e0bfff05 	stb	r2,-4(fp)
	//This function is never used by the code, so you do not need to fill it in
}
 8001474:	0001883a 	nop
 8001478:	e037883a 	mov	sp,fp
 800147c:	df000017 	ldw	fp,0(sp)
 8001480:	dec00104 	addi	sp,sp,4
 8001484:	f800283a 	ret

08001488 <MAXreg_wr>:
//writes register to MAX3421E via SPI
void MAXreg_wr(BYTE reg, BYTE val) {
 8001488:	defffd04 	addi	sp,sp,-12
 800148c:	df000215 	stw	fp,8(sp)
 8001490:	df000204 	addi	fp,sp,8
 8001494:	2005883a 	mov	r2,r4
 8001498:	2807883a 	mov	r3,r5
 800149c:	e0bfff05 	stb	r2,-4(fp)
 80014a0:	1805883a 	mov	r2,r3
 80014a4:	e0bffe05 	stb	r2,-8(fp)
	//write reg + 2 via SPI
	//write val via SPI
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
}
 80014a8:	0001883a 	nop
 80014ac:	e037883a 	mov	sp,fp
 80014b0:	df000017 	ldw	fp,0(sp)
 80014b4:	dec00104 	addi	sp,sp,4
 80014b8:	f800283a 	ret

080014bc <MAXbytes_wr>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_wr(BYTE reg, BYTE nbytes, BYTE* data) {
 80014bc:	defffc04 	addi	sp,sp,-16
 80014c0:	df000315 	stw	fp,12(sp)
 80014c4:	df000304 	addi	fp,sp,12
 80014c8:	2005883a 	mov	r2,r4
 80014cc:	2807883a 	mov	r3,r5
 80014d0:	e1bffd15 	stw	r6,-12(fp)
 80014d4:	e0bfff05 	stb	r2,-4(fp)
 80014d8:	1805883a 	mov	r2,r3
 80014dc:	e0bffe05 	stb	r2,-8(fp)
	//write data[n] via SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation) 
	//if return code < 0  print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
}
 80014e0:	0001883a 	nop
 80014e4:	e037883a 	mov	sp,fp
 80014e8:	df000017 	ldw	fp,0(sp)
 80014ec:	dec00104 	addi	sp,sp,4
 80014f0:	f800283a 	ret

080014f4 <MAXreg_rd>:

//reads register from MAX3421E via SPI
BYTE MAXreg_rd(BYTE reg) {
 80014f4:	defffe04 	addi	sp,sp,-8
 80014f8:	df000115 	stw	fp,4(sp)
 80014fc:	df000104 	addi	fp,sp,4
 8001500:	2005883a 	mov	r2,r4
 8001504:	e0bfff05 	stb	r2,-4(fp)
	//read val via SPI
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return val
}
 8001508:	0001883a 	nop
 800150c:	e037883a 	mov	sp,fp
 8001510:	df000017 	ldw	fp,0(sp)
 8001514:	dec00104 	addi	sp,sp,4
 8001518:	f800283a 	ret

0800151c <MAXbytes_rd>:
//multiple-byte write
//returns a pointer to a memory position after last written
BYTE* MAXbytes_rd(BYTE reg, BYTE nbytes, BYTE* data) {
 800151c:	defffc04 	addi	sp,sp,-16
 8001520:	df000315 	stw	fp,12(sp)
 8001524:	df000304 	addi	fp,sp,12
 8001528:	2005883a 	mov	r2,r4
 800152c:	2807883a 	mov	r3,r5
 8001530:	e1bffd15 	stw	r6,-12(fp)
 8001534:	e0bfff05 	stb	r2,-4(fp)
 8001538:	1805883a 	mov	r2,r3
 800153c:	e0bffe05 	stb	r2,-8(fp)
	//read data[n] from SPI, where n goes from 0 to nbytes-1
	//read return code from SPI peripheral (see Intel documentation)
	//if return code < 0 print an error
	//deselect MAX3421E (may not be necessary if you are using SPI peripheral)
	//return (data + nbytes);
}
 8001540:	0001883a 	nop
 8001544:	e037883a 	mov	sp,fp
 8001548:	df000017 	ldw	fp,0(sp)
 800154c:	dec00104 	addi	sp,sp,4
 8001550:	f800283a 	ret

08001554 <MAX3421E_reset>:
/* reset MAX3421E using chip reset bit. SPI configuration is not affected   */
void MAX3421E_reset(void) {
 8001554:	defffd04 	addi	sp,sp,-12
 8001558:	dfc00215 	stw	ra,8(sp)
 800155c:	df000115 	stw	fp,4(sp)
 8001560:	df000104 	addi	fp,sp,4
	//hardware reset, then software reset
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 0);
 8001564:	0005883a 	mov	r2,zero
 8001568:	00805c35 	stwio	r2,368(zero)
	usleep(1000000);
 800156c:	010003f4 	movhi	r4,15
 8001570:	21109004 	addi	r4,r4,16960
 8001574:	800fe880 	call	800fe88 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(USB_RST_BASE, 1);
 8001578:	00800044 	movi	r2,1
 800157c:	00805c35 	stwio	r2,368(zero)
	BYTE tmp = 0;
 8001580:	e03fffc5 	stb	zero,-1(fp)
	MAXreg_wr( rUSBCTL, bmCHIPRES);      //Chip reset. This stops the oscillator
 8001584:	01400804 	movi	r5,32
 8001588:	01001e04 	movi	r4,120
 800158c:	80014880 	call	8001488 <MAXreg_wr>
	MAXreg_wr( rUSBCTL, 0x00);                          //Remove the reset
 8001590:	000b883a 	mov	r5,zero
 8001594:	01001e04 	movi	r4,120
 8001598:	80014880 	call	8001488 <MAXreg_wr>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 800159c:	00000806 	br	80015c0 <MAX3421E_reset+0x6c>
		tmp++;                                      //timeout after 256 attempts
 80015a0:	e0bfffc3 	ldbu	r2,-1(fp)
 80015a4:	10800044 	addi	r2,r2,1
 80015a8:	e0bfffc5 	stb	r2,-1(fp)
		if (tmp == 0) {
 80015ac:	e0bfffc3 	ldbu	r2,-1(fp)
 80015b0:	1000031e 	bne	r2,zero,80015c0 <MAX3421E_reset+0x6c>
			printf("reset timeout!");
 80015b4:	01020074 	movhi	r4,2049
 80015b8:	21078b04 	addi	r4,r4,7724
 80015bc:	8002a2c0 	call	8002a2c <printf>
	while (!(MAXreg_rd( rUSBIRQ) & bmOSCOKIRQ)) { //wait until the PLL stabilizes
 80015c0:	01001a04 	movi	r4,104
 80015c4:	80014f40 	call	80014f4 <MAXreg_rd>
 80015c8:	10803fcc 	andi	r2,r2,255
 80015cc:	1080004c 	andi	r2,r2,1
 80015d0:	103ff326 	beq	r2,zero,80015a0 <MAX3421E_reset+0x4c>
		}
	}
}
 80015d4:	0001883a 	nop
 80015d8:	e037883a 	mov	sp,fp
 80015dc:	dfc00117 	ldw	ra,4(sp)
 80015e0:	df000017 	ldw	fp,0(sp)
 80015e4:	dec00204 	addi	sp,sp,8
 80015e8:	f800283a 	ret

080015ec <Vbus_power>:
/* turn USB power on/off                                                */
/* ON pin of VBUS switch (MAX4793 or similar) is connected to GPOUT7    */
/* OVERLOAD pin of Vbus switch is connected to GPIN7                    */
/* OVERLOAD state low. NO OVERLOAD or VBUS OFF state high.              */
BOOL Vbus_power(BOOL action) {
 80015ec:	defffe04 	addi	sp,sp,-8
 80015f0:	df000115 	stw	fp,4(sp)
 80015f4:	df000104 	addi	fp,sp,4
 80015f8:	e13fff15 	stw	r4,-4(fp)
	// power on/off successful
	return (1);
 80015fc:	00800044 	movi	r2,1
}
 8001600:	e037883a 	mov	sp,fp
 8001604:	df000017 	ldw	fp,0(sp)
 8001608:	dec00104 	addi	sp,sp,4
 800160c:	f800283a 	ret

08001610 <MAX_busprobe>:

/* probe bus to determine device presense and speed */
void MAX_busprobe(void) {
 8001610:	defffd04 	addi	sp,sp,-12
 8001614:	dfc00215 	stw	ra,8(sp)
 8001618:	df000115 	stw	fp,4(sp)
 800161c:	df000104 	addi	fp,sp,4
	BYTE bus_sample;

//  MAXreg_wr(rHCTL,bmSAMPLEBUS);
	bus_sample = MAXreg_rd( rHRSL);            //Get J,K status
 8001620:	01003e04 	movi	r4,248
 8001624:	80014f40 	call	80014f4 <MAXreg_rd>
 8001628:	e0bfffc5 	stb	r2,-1(fp)
	bus_sample &= ( bmJSTATUS | bmKSTATUS);      //zero the rest of the byte
 800162c:	e0ffffc3 	ldbu	r3,-1(fp)
 8001630:	00bff004 	movi	r2,-64
 8001634:	1884703a 	and	r2,r3,r2
 8001638:	e0bfffc5 	stb	r2,-1(fp)

	switch (bus_sample) {                   //start full-speed or low-speed host
 800163c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001640:	10c01020 	cmpeqi	r3,r2,64
 8001644:	1800221e 	bne	r3,zero,80016d0 <MAX_busprobe+0xc0>
 8001648:	10c01048 	cmpgei	r3,r2,65
 800164c:	1800021e 	bne	r3,zero,8001658 <MAX_busprobe+0x48>
 8001650:	10003b26 	beq	r2,zero,8001740 <MAX_busprobe+0x130>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
		}
		break;
	} //end switch( bus_sample )
}
 8001654:	00004a06 	br	8001780 <MAX_busprobe+0x170>
	switch (bus_sample) {                   //start full-speed or low-speed host
 8001658:	10c02020 	cmpeqi	r3,r2,128
 800165c:	1800031e 	bne	r3,zero,800166c <MAX_busprobe+0x5c>
 8001660:	10803020 	cmpeqi	r2,r2,192
 8001664:	1000331e 	bne	r2,zero,8001734 <MAX_busprobe+0x124>
}
 8001668:	00004506 	br	8001780 <MAX_busprobe+0x170>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 800166c:	d0a00303 	ldbu	r2,-32756(gp)
 8001670:	10803fcc 	andi	r2,r2,255
 8001674:	108004e0 	cmpeqi	r2,r2,19
 8001678:	10003e1e 	bne	r2,zero,8001774 <MAX_busprobe+0x164>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 800167c:	01003604 	movi	r4,216
 8001680:	80014f40 	call	80014f4 <MAXreg_rd>
 8001684:	10803fcc 	andi	r2,r2,255
 8001688:	1080008c 	andi	r2,r2,2
 800168c:	1000071e 	bne	r2,zero,80016ac <MAX_busprobe+0x9c>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001690:	01403244 	movi	r5,201
 8001694:	01003604 	movi	r4,216
 8001698:	80014880 	call	8001488 <MAXreg_wr>
				printf("Starting in full speed\n");
 800169c:	01020074 	movhi	r4,2049
 80016a0:	21078f04 	addi	r4,r4,7740
 80016a4:	8002b500 	call	8002b50 <puts>
 80016a8:	00000606 	br	80016c4 <MAX_busprobe+0xb4>
				MAXreg_wr( rMODE, MODE_LS_HOST);    //start low-speed host
 80016ac:	014032c4 	movi	r5,203
 80016b0:	01003604 	movi	r4,216
 80016b4:	80014880 	call	8001488 <MAXreg_wr>
				printf("Starting in low speed\n");
 80016b8:	01020074 	movhi	r4,2049
 80016bc:	21079504 	addi	r4,r4,7764
 80016c0:	8002b500 	call	8002b50 <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 80016c4:	00800404 	movi	r2,16
 80016c8:	d0a00305 	stb	r2,-32756(gp)
		break;
 80016cc:	00002906 	br	8001774 <MAX_busprobe+0x164>
		if (usb_task_state != USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE) { //bus reset causes connection detect interrupt
 80016d0:	d0a00303 	ldbu	r2,-32756(gp)
 80016d4:	10803fcc 	andi	r2,r2,255
 80016d8:	108004e0 	cmpeqi	r2,r2,19
 80016dc:	1000271e 	bne	r2,zero,800177c <MAX_busprobe+0x16c>
			if (!(MAXreg_rd( rMODE) & bmLOWSPEED)) {
 80016e0:	01003604 	movi	r4,216
 80016e4:	80014f40 	call	80014f4 <MAXreg_rd>
 80016e8:	10803fcc 	andi	r2,r2,255
 80016ec:	1080008c 	andi	r2,r2,2
 80016f0:	1000071e 	bne	r2,zero,8001710 <MAX_busprobe+0x100>
				MAXreg_wr( rMODE, MODE_LS_HOST);   //start low-speed host
 80016f4:	014032c4 	movi	r5,203
 80016f8:	01003604 	movi	r4,216
 80016fc:	80014880 	call	8001488 <MAXreg_wr>
				printf("Starting in low speed\n");
 8001700:	01020074 	movhi	r4,2049
 8001704:	21079504 	addi	r4,r4,7764
 8001708:	8002b500 	call	8002b50 <puts>
 800170c:	00000606 	br	8001728 <MAX_busprobe+0x118>
				MAXreg_wr( rMODE, MODE_FS_HOST);         //start full-speed host
 8001710:	01403244 	movi	r5,201
 8001714:	01003604 	movi	r4,216
 8001718:	80014880 	call	8001488 <MAXreg_wr>
				printf("Starting in full speed\n");
 800171c:	01020074 	movhi	r4,2049
 8001720:	21078f04 	addi	r4,r4,7740
 8001724:	8002b500 	call	8002b50 <puts>
			usb_task_state = ( USB_STATE_ATTACHED); //signal usb state machine to start attachment sequence
 8001728:	00800404 	movi	r2,16
 800172c:	d0a00305 	stb	r2,-32756(gp)
		break;
 8001730:	00001206 	br	800177c <MAX_busprobe+0x16c>
		usb_task_state = ( USB_DETACHED_SUBSTATE_ILLEGAL);
 8001734:	00800104 	movi	r2,4
 8001738:	d0a00305 	stb	r2,-32756(gp)
		break;
 800173c:	00001006 	br	8001780 <MAX_busprobe+0x170>
		if (!((usb_task_state & USB_STATE_MASK) == USB_STATE_DETACHED)) //if we came here from other than detached state
 8001740:	d0a00303 	ldbu	r2,-32756(gp)
 8001744:	10803fcc 	andi	r2,r2,255
 8001748:	10803c0c 	andi	r2,r2,240
 800174c:	10000326 	beq	r2,zero,800175c <MAX_busprobe+0x14c>
			usb_task_state = ( USB_DETACHED_SUBSTATE_INITIALIZE); //clear device data structures
 8001750:	00800044 	movi	r2,1
 8001754:	d0a00305 	stb	r2,-32756(gp)
		break;
 8001758:	00000906 	br	8001780 <MAX_busprobe+0x170>
			MAXreg_wr( rMODE, MODE_FS_HOST); //start full-speed host
 800175c:	01403244 	movi	r5,201
 8001760:	01003604 	movi	r4,216
 8001764:	80014880 	call	8001488 <MAXreg_wr>
			usb_task_state = ( USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE);
 8001768:	008000c4 	movi	r2,3
 800176c:	d0a00305 	stb	r2,-32756(gp)
		break;
 8001770:	00000306 	br	8001780 <MAX_busprobe+0x170>
		break;
 8001774:	0001883a 	nop
 8001778:	00000106 	br	8001780 <MAX_busprobe+0x170>
		break;
 800177c:	0001883a 	nop
}
 8001780:	0001883a 	nop
 8001784:	e037883a 	mov	sp,fp
 8001788:	dfc00117 	ldw	ra,4(sp)
 800178c:	df000017 	ldw	fp,0(sp)
 8001790:	dec00204 	addi	sp,sp,8
 8001794:	f800283a 	ret

08001798 <MAX3421E_init>:
/* MAX3421E initialization after power-on   */
void MAX3421E_init(void) {
 8001798:	defffe04 	addi	sp,sp,-8
 800179c:	dfc00115 	stw	ra,4(sp)
 80017a0:	df000015 	stw	fp,0(sp)
 80017a4:	d839883a 	mov	fp,sp
	/* Configure full-duplex SPI, interrupt pulse   */
	MAXreg_wr( rPINCTL, (bmFDUPSPI + bmINTLEVEL + bmGPXB)); //Full-duplex SPI, level interrupt, GPX
 80017a8:	01400684 	movi	r5,26
 80017ac:	01002204 	movi	r4,136
 80017b0:	80014880 	call	8001488 <MAXreg_wr>
	MAX3421E_reset();                                //stop/start the oscillator
 80017b4:	80015540 	call	8001554 <MAX3421E_reset>
	/* configure power switch   */
	Vbus_power( OFF);                                      //turn Vbus power off
 80017b8:	0009883a 	mov	r4,zero
 80017bc:	80015ec0 	call	80015ec <Vbus_power>
	MAXreg_wr( rGPINIEN, bmGPINIEN7); //enable interrupt on GPIN7 (power switch overload flag)
 80017c0:	01402004 	movi	r5,128
 80017c4:	01002e04 	movi	r4,184
 80017c8:	80014880 	call	8001488 <MAXreg_wr>
	Vbus_power( ON);
 80017cc:	01000044 	movi	r4,1
 80017d0:	80015ec0 	call	80015ec <Vbus_power>
	/* configure host operation */
	MAXreg_wr( rMODE, bmDPPULLDN | bmDMPULLDN | bmHOST | bmSEPIRQ); // set pull-downs, SOF, Host, Separate GPIN IRQ on GPX
 80017d4:	01403444 	movi	r5,209
 80017d8:	01003604 	movi	r4,216
 80017dc:	80014880 	call	8001488 <MAXreg_wr>
	//MAXreg_wr( rHIEN, bmFRAMEIE|bmCONDETIE|bmBUSEVENTIE );                      // enable SOF, connection detection, bus event IRQs
	MAXreg_wr( rHIEN, bmCONDETIE);                        //connection detection
 80017e0:	01400804 	movi	r5,32
 80017e4:	01003404 	movi	r4,208
 80017e8:	80014880 	call	8001488 <MAXreg_wr>
	/* HXFRDNIRQ is checked in Dispatch packet function */
	MAXreg_wr(rHCTL, bmSAMPLEBUS);        // update the JSTATUS and KSTATUS bits
 80017ec:	01400104 	movi	r5,4
 80017f0:	01003a04 	movi	r4,232
 80017f4:	80014880 	call	8001488 <MAXreg_wr>
	MAX_busprobe();                             //check if anything is connected
 80017f8:	80016100 	call	8001610 <MAX_busprobe>
	MAXreg_wr( rHIRQ, bmCONDETIRQ); //clear connection detect interrupt                 
 80017fc:	01400804 	movi	r5,32
 8001800:	01003204 	movi	r4,200
 8001804:	80014880 	call	8001488 <MAXreg_wr>
	MAXreg_wr( rCPUCTL, 0x01);                            //enable interrupt pin
 8001808:	01400044 	movi	r5,1
 800180c:	01002004 	movi	r4,128
 8001810:	80014880 	call	8001488 <MAXreg_wr>
}
 8001814:	0001883a 	nop
 8001818:	e037883a 	mov	sp,fp
 800181c:	dfc00117 	ldw	ra,4(sp)
 8001820:	df000017 	ldw	fp,0(sp)
 8001824:	dec00204 	addi	sp,sp,8
 8001828:	f800283a 	ret

0800182c <MAX3421E_Task>:

/* MAX3421 state change task and interrupt handler */
void MAX3421E_Task(void) {
 800182c:	defffe04 	addi	sp,sp,-8
 8001830:	dfc00115 	stw	ra,4(sp)
 8001834:	df000015 	stw	fp,0(sp)
 8001838:	d839883a 	mov	fp,sp
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_IRQ_BASE) == 0) {
 800183c:	00806437 	ldwio	r2,400(zero)
 8001840:	1000041e 	bne	r2,zero,8001854 <MAX3421E_Task+0x28>
		printf("MAX interrupt\n\r");
 8001844:	01020074 	movhi	r4,2049
 8001848:	21079b04 	addi	r4,r4,7788
 800184c:	8002a2c0 	call	8002a2c <printf>
		MaxIntHandler();
 8001850:	80018880 	call	8001888 <MaxIntHandler>
	}
	if ( IORD_ALTERA_AVALON_PIO_DATA(USB_GPX_BASE) == 1) {
 8001854:	00806037 	ldwio	r2,384(zero)
 8001858:	10800058 	cmpnei	r2,r2,1
 800185c:	1000041e 	bne	r2,zero,8001870 <MAX3421E_Task+0x44>
		printf("GPX interrupt\n\r");
 8001860:	01020074 	movhi	r4,2049
 8001864:	21079f04 	addi	r4,r4,7804
 8001868:	8002a2c0 	call	8002a2c <printf>
		MaxGpxHandler();
 800186c:	80019540 	call	8001954 <MaxGpxHandler>
	}
}
 8001870:	0001883a 	nop
 8001874:	e037883a 	mov	sp,fp
 8001878:	dfc00117 	ldw	ra,4(sp)
 800187c:	df000017 	ldw	fp,0(sp)
 8001880:	dec00204 	addi	sp,sp,8
 8001884:	f800283a 	ret

08001888 <MaxIntHandler>:

void MaxIntHandler(void) {
 8001888:	defffd04 	addi	sp,sp,-12
 800188c:	dfc00215 	stw	ra,8(sp)
 8001890:	df000115 	stw	fp,4(sp)
 8001894:	df000104 	addi	fp,sp,4
	BYTE HIRQ;
	BYTE HIRQ_sendback = 0x00;
 8001898:	e03fffc5 	stb	zero,-1(fp)
	HIRQ = MAXreg_rd( rHIRQ);                  //determine interrupt source
 800189c:	01003204 	movi	r4,200
 80018a0:	80014f40 	call	80014f4 <MAXreg_rd>
 80018a4:	e0bfff85 	stb	r2,-2(fp)
	printf("IRQ: %x\n", HIRQ);
 80018a8:	e0bfff83 	ldbu	r2,-2(fp)
 80018ac:	100b883a 	mov	r5,r2
 80018b0:	01020074 	movhi	r4,2049
 80018b4:	2107a304 	addi	r4,r4,7820
 80018b8:	8002a2c0 	call	8002a2c <printf>
	if (HIRQ & bmFRAMEIRQ) {                   //->1ms SOF interrupt handler
 80018bc:	e0bfff83 	ldbu	r2,-2(fp)
 80018c0:	1080100c 	andi	r2,r2,64
 80018c4:	10000326 	beq	r2,zero,80018d4 <MaxIntHandler+0x4c>
		HIRQ_sendback |= bmFRAMEIRQ;
 80018c8:	e0bfffc3 	ldbu	r2,-1(fp)
 80018cc:	10801014 	ori	r2,r2,64
 80018d0:	e0bfffc5 	stb	r2,-1(fp)
	}                   //end FRAMEIRQ handling

	if (HIRQ & bmCONDETIRQ) {
 80018d4:	e0bfff83 	ldbu	r2,-2(fp)
 80018d8:	1080080c 	andi	r2,r2,32
 80018dc:	10000426 	beq	r2,zero,80018f0 <MaxIntHandler+0x68>
		MAX_busprobe();
 80018e0:	80016100 	call	8001610 <MAX_busprobe>
		HIRQ_sendback |= bmCONDETIRQ;      //set sendback to 1 to clear register
 80018e4:	e0bfffc3 	ldbu	r2,-1(fp)
 80018e8:	10800814 	ori	r2,r2,32
 80018ec:	e0bfffc5 	stb	r2,-1(fp)
	}
	if (HIRQ & bmSNDBAVIRQ) //if the send buffer is clear (previous transfer completed without issue)
 80018f0:	e0bfff83 	ldbu	r2,-2(fp)
 80018f4:	1080020c 	andi	r2,r2,8
 80018f8:	10000326 	beq	r2,zero,8001908 <MaxIntHandler+0x80>
	{
		MAXreg_wr(rSNDBC, 0x00);//clear the send buffer (not really necessary, but clears interrupt)
 80018fc:	000b883a 	mov	r5,zero
 8001900:	01000e04 	movi	r4,56
 8001904:	80014880 	call	8001488 <MAXreg_wr>
	}
	if (HIRQ & bmBUSEVENTIRQ) {           //bus event is either reset or suspend
 8001908:	e0bfff83 	ldbu	r2,-2(fp)
 800190c:	1080004c 	andi	r2,r2,1
 8001910:	10000626 	beq	r2,zero,800192c <MaxIntHandler+0xa4>
		usb_task_state++;                       //advance USB task state machine
 8001914:	d0a00303 	ldbu	r2,-32756(gp)
 8001918:	10800044 	addi	r2,r2,1
 800191c:	d0a00305 	stb	r2,-32756(gp)
		HIRQ_sendback |= bmBUSEVENTIRQ;
 8001920:	e0bfffc3 	ldbu	r2,-1(fp)
 8001924:	10800054 	ori	r2,r2,1
 8001928:	e0bfffc5 	stb	r2,-1(fp)
	}
	/* End HIRQ interrupts handling, clear serviced IRQs    */
	MAXreg_wr( rHIRQ, HIRQ_sendback); //write '1' to CONDETIRQ to ack bus state change
 800192c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001930:	100b883a 	mov	r5,r2
 8001934:	01003204 	movi	r4,200
 8001938:	80014880 	call	8001488 <MAXreg_wr>
}
 800193c:	0001883a 	nop
 8001940:	e037883a 	mov	sp,fp
 8001944:	dfc00117 	ldw	ra,4(sp)
 8001948:	df000017 	ldw	fp,0(sp)
 800194c:	dec00204 	addi	sp,sp,8
 8001950:	f800283a 	ret

08001954 <MaxGpxHandler>:

void MaxGpxHandler(void) {
 8001954:	defffd04 	addi	sp,sp,-12
 8001958:	dfc00215 	stw	ra,8(sp)
 800195c:	df000115 	stw	fp,4(sp)
 8001960:	df000104 	addi	fp,sp,4
	BYTE GPINIRQ;
	GPINIRQ = MAXreg_rd( rGPINIRQ);            //read both IRQ registers
 8001964:	01002c04 	movi	r4,176
 8001968:	80014f40 	call	80014f4 <MAXreg_rd>
 800196c:	e0bfffc5 	stb	r2,-1(fp)
}
 8001970:	0001883a 	nop
 8001974:	e037883a 	mov	sp,fp
 8001978:	dfc00117 	ldw	ra,4(sp)
 800197c:	df000017 	ldw	fp,0(sp)
 8001980:	dec00204 	addi	sp,sp,8
 8001984:	f800283a 	ret

08001988 <XferCtrlReq>:
/* depending on request. Actual requests are defined as macros                                                                                      */
/* return codes:                */
/* 00       =   success         */
/* 01-0f    =   non-zero HRSLT  */
BYTE XferCtrlReq( BYTE addr, BYTE ep, BYTE bmReqType, BYTE bRequest, BYTE wValLo, BYTE wValHi, WORD wInd, WORD nbytes, BYTE* dataptr )
{
 8001988:	defff104 	addi	sp,sp,-60
 800198c:	dfc00e15 	stw	ra,56(sp)
 8001990:	df000d15 	stw	fp,52(sp)
 8001994:	df000d04 	addi	fp,sp,52
 8001998:	2015883a 	mov	r10,r4
 800199c:	2813883a 	mov	r9,r5
 80019a0:	3011883a 	mov	r8,r6
 80019a4:	e1400217 	ldw	r5,8(fp)
 80019a8:	e1000317 	ldw	r4,12(fp)
 80019ac:	e0c00417 	ldw	r3,16(fp)
 80019b0:	e0800517 	ldw	r2,20(fp)
 80019b4:	500d883a 	mov	r6,r10
 80019b8:	e1bffb05 	stb	r6,-20(fp)
 80019bc:	480d883a 	mov	r6,r9
 80019c0:	e1bffa05 	stb	r6,-24(fp)
 80019c4:	400d883a 	mov	r6,r8
 80019c8:	e1bff905 	stb	r6,-28(fp)
 80019cc:	380d883a 	mov	r6,r7
 80019d0:	e1bff805 	stb	r6,-32(fp)
 80019d4:	e17ff705 	stb	r5,-36(fp)
 80019d8:	e13ff605 	stb	r4,-40(fp)
 80019dc:	e0fff50d 	sth	r3,-44(fp)
 80019e0:	e0bff40d 	sth	r2,-48(fp)
 BOOL direction = FALSE;        //request direction, IN or OUT
 80019e4:	e03fff15 	stw	zero,-4(fp)
 BYTE datastage = 1; //request data stage present or absent
 80019e8:	00800044 	movi	r2,1
 80019ec:	e0bffec5 	stb	r2,-5(fp)
 BYTE rcode;
 SETUP_PKT setup_pkt;
    if( dataptr == NULL ) {
 80019f0:	e0800617 	ldw	r2,24(fp)
 80019f4:	1000011e 	bne	r2,zero,80019fc <XferCtrlReq+0x74>
        datastage = 0;
 80019f8:	e03ffec5 	stb	zero,-5(fp)
    }
    MAXreg_wr( rPERADDR, addr );                    //set peripheral address
 80019fc:	e0bffb03 	ldbu	r2,-20(fp)
 8001a00:	100b883a 	mov	r5,r2
 8001a04:	01003804 	movi	r4,224
 8001a08:	80014880 	call	8001488 <MAXreg_wr>
    /* fill in setup packet */
    if( bmReqType & 0x80 ) {
 8001a0c:	e0bff903 	ldbu	r2,-28(fp)
 8001a10:	10803fcc 	andi	r2,r2,255
 8001a14:	1080201c 	xori	r2,r2,128
 8001a18:	10bfe004 	addi	r2,r2,-128
 8001a1c:	1000020e 	bge	r2,zero,8001a28 <XferCtrlReq+0xa0>
        direction = TRUE;                   		//determine request direction
 8001a20:	00800044 	movi	r2,1
 8001a24:	e0bfff15 	stw	r2,-4(fp)
    }
    /* fill in setup packet */
    setup_pkt.ReqType_u.bmRequestType = bmReqType;
 8001a28:	e0bff903 	ldbu	r2,-28(fp)
 8001a2c:	e0bffc85 	stb	r2,-14(fp)
    setup_pkt.bRequest = bRequest;
 8001a30:	e0bff803 	ldbu	r2,-32(fp)
 8001a34:	e0bffcc5 	stb	r2,-13(fp)
    setup_pkt.wVal_u.wValueLo = wValLo;
 8001a38:	e0bff703 	ldbu	r2,-36(fp)
 8001a3c:	e0bffd05 	stb	r2,-12(fp)
    setup_pkt.wVal_u.wValueHi = wValHi;
 8001a40:	e0bff603 	ldbu	r2,-40(fp)
 8001a44:	e0bffd45 	stb	r2,-11(fp)
    setup_pkt.wIndex = wInd;
 8001a48:	e0bff50b 	ldhu	r2,-44(fp)
 8001a4c:	e0bffd8d 	sth	r2,-10(fp)
    setup_pkt.wLength = nbytes;
 8001a50:	e0bff40b 	ldhu	r2,-48(fp)
 8001a54:	e0bffe0d 	sth	r2,-8(fp)
    MAXbytes_wr( rSUDFIFO, 8, (BYTE *)&setup_pkt );     //transfer to setup packet FIFO
 8001a58:	e0bffc84 	addi	r2,fp,-14
 8001a5c:	100d883a 	mov	r6,r2
 8001a60:	01400204 	movi	r5,8
 8001a64:	01000804 	movi	r4,32
 8001a68:	80014bc0 	call	80014bc <MAXbytes_wr>
    rcode = XferDispatchPkt( tokSETUP, ep );            //dispatch packet
 8001a6c:	e0bffa03 	ldbu	r2,-24(fp)
 8001a70:	100b883a 	mov	r5,r2
 8001a74:	01000404 	movi	r4,16
 8001a78:	8001c480 	call	8001c48 <XferDispatchPkt>
 8001a7c:	e0bffe85 	stb	r2,-6(fp)
    if( rcode ) {                                       //return HRSLT if not zero
 8001a80:	e0bffe83 	ldbu	r2,-6(fp)
 8001a84:	10000226 	beq	r2,zero,8001a90 <XferCtrlReq+0x108>
        return( rcode );
 8001a88:	e0bffe83 	ldbu	r2,-6(fp)
 8001a8c:	00000e06 	br	8001ac8 <XferCtrlReq+0x140>
    }
    rcode = ctrl_xfers[ datastage ]( addr, ep, nbytes, dataptr, direction );    //call data stage or no data stage transfer
 8001a90:	e0bffec3 	ldbu	r2,-5(fp)
 8001a94:	100690ba 	slli	r3,r2,2
 8001a98:	d0a00104 	addi	r2,gp,-32764
 8001a9c:	1885883a 	add	r2,r3,r2
 8001aa0:	10800017 	ldw	r2,0(r2)
 8001aa4:	e13ffb03 	ldbu	r4,-20(fp)
 8001aa8:	e17ffa03 	ldbu	r5,-24(fp)
 8001aac:	e1bff40b 	ldhu	r6,-48(fp)
 8001ab0:	e0ffff17 	ldw	r3,-4(fp)
 8001ab4:	d8c00015 	stw	r3,0(sp)
 8001ab8:	e1c00617 	ldw	r7,24(fp)
 8001abc:	103ee83a 	callr	r2
 8001ac0:	e0bffe85 	stb	r2,-6(fp)
    return( rcode );
 8001ac4:	e0bffe83 	ldbu	r2,-6(fp)
}
 8001ac8:	e037883a 	mov	sp,fp
 8001acc:	dfc00117 	ldw	ra,4(sp)
 8001ad0:	df000017 	ldw	fp,0(sp)
 8001ad4:	dec00204 	addi	sp,sp,8
 8001ad8:	f800283a 	ret

08001adc <XferCtrlData>:
/* Control transfer with data stage */
BYTE XferCtrlData( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001adc:	defff804 	addi	sp,sp,-32
 8001ae0:	dfc00715 	stw	ra,28(sp)
 8001ae4:	df000615 	stw	fp,24(sp)
 8001ae8:	df000604 	addi	fp,sp,24
 8001aec:	2005883a 	mov	r2,r4
 8001af0:	2809883a 	mov	r4,r5
 8001af4:	3007883a 	mov	r3,r6
 8001af8:	e1fffb15 	stw	r7,-20(fp)
 8001afc:	e0bffe05 	stb	r2,-8(fp)
 8001b00:	2005883a 	mov	r2,r4
 8001b04:	e0bffd05 	stb	r2,-12(fp)
 8001b08:	1805883a 	mov	r2,r3
 8001b0c:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;

    //MAXreg_wr( rHCTL, bmRCVTOG1 );       //set toggle to DATA1
    if( direction ) {   //IN transfer
 8001b10:	e0800217 	ldw	r2,8(fp)
 8001b14:	10002626 	beq	r2,zero,8001bb0 <XferCtrlData+0xd4>
        devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001b18:	e0bffe03 	ldbu	r2,-8(fp)
 8001b1c:	100690fa 	slli	r3,r2,3
 8001b20:	00820074 	movhi	r2,2049
 8001b24:	1885883a 	add	r2,r3,r2
 8001b28:	10d78517 	ldw	r3,24084(r2)
 8001b2c:	e0bffd03 	ldbu	r2,-12(fp)
 8001b30:	100490fa 	slli	r2,r2,3
 8001b34:	1885883a 	add	r2,r3,r2
 8001b38:	00c00804 	movi	r3,32
 8001b3c:	10c00185 	stb	r3,6(r2)
        rcode = XferInTransfer( addr, ep, nbytes, dataptr, devtable[ addr ].epinfo[ ep ].MaxPktSize );
 8001b40:	e13ffe03 	ldbu	r4,-8(fp)
 8001b44:	e17ffd03 	ldbu	r5,-12(fp)
 8001b48:	e1bffc0b 	ldhu	r6,-16(fp)
 8001b4c:	e0bffe03 	ldbu	r2,-8(fp)
 8001b50:	100690fa 	slli	r3,r2,3
 8001b54:	00820074 	movhi	r2,2049
 8001b58:	1885883a 	add	r2,r3,r2
 8001b5c:	10d78517 	ldw	r3,24084(r2)
 8001b60:	e0bffd03 	ldbu	r2,-12(fp)
 8001b64:	100490fa 	slli	r2,r2,3
 8001b68:	1885883a 	add	r2,r3,r2
 8001b6c:	1080008b 	ldhu	r2,2(r2)
 8001b70:	10803fcc 	andi	r2,r2,255
 8001b74:	d8800015 	stw	r2,0(sp)
 8001b78:	e1fffb17 	ldw	r7,-20(fp)
 8001b7c:	8001dc80 	call	8001dc8 <XferInTransfer>
 8001b80:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode ) {
 8001b84:	e0bfffc3 	ldbu	r2,-1(fp)
 8001b88:	10000226 	beq	r2,zero,8001b94 <XferCtrlData+0xb8>
        return( rcode );
 8001b8c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001b90:	00000806 	br	8001bb4 <XferCtrlData+0xd8>
        }
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001b94:	e0bffd03 	ldbu	r2,-12(fp)
 8001b98:	100b883a 	mov	r5,r2
 8001b9c:	01002804 	movi	r4,160
 8001ba0:	8001c480 	call	8001c48 <XferDispatchPkt>
 8001ba4:	e0bfffc5 	stb	r2,-1(fp)
        return( rcode );
 8001ba8:	e0bfffc3 	ldbu	r2,-1(fp)
 8001bac:	00000106 	br	8001bb4 <XferCtrlData+0xd8>
    }
    else {              //OUT not implemented
        return( 0xff );
 8001bb0:	00bfffc4 	movi	r2,-1
    }
}
 8001bb4:	e037883a 	mov	sp,fp
 8001bb8:	dfc00117 	ldw	ra,4(sp)
 8001bbc:	df000017 	ldw	fp,0(sp)
 8001bc0:	dec00204 	addi	sp,sp,8
 8001bc4:	f800283a 	ret

08001bc8 <XferCtrlND>:
/* Control transfer with status stage and no data stage */
BYTE XferCtrlND( BYTE addr, BYTE ep, WORD nbytes, BYTE* dataptr, BOOL direction )
{
 8001bc8:	defff904 	addi	sp,sp,-28
 8001bcc:	dfc00615 	stw	ra,24(sp)
 8001bd0:	df000515 	stw	fp,20(sp)
 8001bd4:	df000504 	addi	fp,sp,20
 8001bd8:	2005883a 	mov	r2,r4
 8001bdc:	2809883a 	mov	r4,r5
 8001be0:	3007883a 	mov	r3,r6
 8001be4:	e1fffb15 	stw	r7,-20(fp)
 8001be8:	e0bffe05 	stb	r2,-8(fp)
 8001bec:	2005883a 	mov	r2,r4
 8001bf0:	e0bffd05 	stb	r2,-12(fp)
 8001bf4:	1805883a 	mov	r2,r3
 8001bf8:	e0bffc0d 	sth	r2,-16(fp)
  BYTE rcode;
    if( direction ) { //GET
 8001bfc:	e0800217 	ldw	r2,8(fp)
 8001c00:	10000626 	beq	r2,zero,8001c1c <XferCtrlND+0x54>
        rcode = XferDispatchPkt( tokOUTHS, ep );
 8001c04:	e0bffd03 	ldbu	r2,-12(fp)
 8001c08:	100b883a 	mov	r5,r2
 8001c0c:	01002804 	movi	r4,160
 8001c10:	8001c480 	call	8001c48 <XferDispatchPkt>
 8001c14:	e0bfffc5 	stb	r2,-1(fp)
 8001c18:	00000506 	br	8001c30 <XferCtrlND+0x68>
    }
    else {
        rcode = XferDispatchPkt( tokINHS, ep );
 8001c1c:	e0bffd03 	ldbu	r2,-12(fp)
 8001c20:	100b883a 	mov	r5,r2
 8001c24:	01002004 	movi	r4,128
 8001c28:	8001c480 	call	8001c48 <XferDispatchPkt>
 8001c2c:	e0bfffc5 	stb	r2,-1(fp)
    }
    return( rcode );
 8001c30:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001c34:	e037883a 	mov	sp,fp
 8001c38:	dfc00117 	ldw	ra,4(sp)
 8001c3c:	df000017 	ldw	fp,0(sp)
 8001c40:	dec00204 	addi	sp,sp,8
 8001c44:	f800283a 	ret

08001c48 <XferDispatchPkt>:
/* Result code: 0 success, nonzero = error condition                                                */
/* If NAK, tries to re-send up to USB_NAK_LIMIT times                                               */
/* If bus timeout, re-sends up to USB_RETRY_LIMIT times                                             */
/* return codes 0x00-0x0f are HRSLT( 0x00 being success ), 0xff means timeout                       */
BYTE XferDispatchPkt( BYTE token, BYTE ep )
{
 8001c48:	defff904 	addi	sp,sp,-28
 8001c4c:	dfc00615 	stw	ra,24(sp)
 8001c50:	df000515 	stw	fp,20(sp)
 8001c54:	df000504 	addi	fp,sp,20
 8001c58:	2005883a 	mov	r2,r4
 8001c5c:	2807883a 	mov	r3,r5
 8001c60:	e0bffc05 	stb	r2,-16(fp)
 8001c64:	1805883a 	mov	r2,r3
 8001c68:	e0bffb05 	stb	r2,-20(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001c6c:	d0a72717 	ldw	r2,-25444(gp)
 DWORD timeout = (alt_nticks()*1000)/alt_ticks_per_second() + USB_XFER_TIMEOUT;
 8001c70:	0140fa04 	movi	r5,1000
 8001c74:	1009883a 	mov	r4,r2
 8001c78:	80029d40 	call	80029d4 <__mulsi3>
 8001c7c:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8001c80:	d0a72617 	ldw	r2,-25448(gp)
 8001c84:	100b883a 	mov	r5,r2
 8001c88:	1809883a 	mov	r4,r3
 8001c8c:	80029140 	call	8002914 <__udivsi3>
 8001c90:	1084e204 	addi	r2,r2,5000
 8001c94:	e0bffe15 	stw	r2,-8(fp)
 BYTE tmpdata;
 BYTE rcode;
 char retry_count = 0;
 8001c98:	e03fff85 	stb	zero,-2(fp)
 BYTE nak_count = 0;
 8001c9c:	e03fff45 	stb	zero,-3(fp)

    while( 1 ) {
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001ca0:	e0fffc03 	ldbu	r3,-16(fp)
 8001ca4:	e0bffb03 	ldbu	r2,-20(fp)
 8001ca8:	1884b03a 	or	r2,r3,r2
 8001cac:	10803fcc 	andi	r2,r2,255
 8001cb0:	100b883a 	mov	r5,r2
 8001cb4:	01003c04 	movi	r4,240
 8001cb8:	80014880 	call	8001488 <MAXreg_wr>
        rcode = 0xff;
 8001cbc:	00bfffc4 	movi	r2,-1
 8001cc0:	e0bfffc5 	stb	r2,-1(fp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001cc4:	00000d06 	br	8001cfc <XferDispatchPkt+0xb4>
            tmpdata = MAXreg_rd( rHIRQ );
 8001cc8:	01003204 	movi	r4,200
 8001ccc:	80014f40 	call	80014f4 <MAXreg_rd>
 8001cd0:	e0bffdc5 	stb	r2,-9(fp)
            if( tmpdata & bmHXFRDNIRQ ) {
 8001cd4:	e0bffdc3 	ldbu	r2,-9(fp)
 8001cd8:	10803fcc 	andi	r2,r2,255
 8001cdc:	1080201c 	xori	r2,r2,128
 8001ce0:	10bfe004 	addi	r2,r2,-128
 8001ce4:	1000050e 	bge	r2,zero,8001cfc <XferDispatchPkt+0xb4>
                MAXreg_wr( rHIRQ, bmHXFRDNIRQ );    //clear the interrupt
 8001ce8:	01402004 	movi	r5,128
 8001cec:	01003204 	movi	r4,200
 8001cf0:	80014880 	call	8001488 <MAXreg_wr>
                rcode = 0x00;
 8001cf4:	e03fffc5 	stb	zero,-1(fp)
                break;
 8001cf8:	00000c06 	br	8001d2c <XferDispatchPkt+0xe4>
  return _alt_nticks;
 8001cfc:	d0a72717 	ldw	r2,-25444(gp)
        while( (alt_nticks()*1000)/alt_ticks_per_second() < timeout ) {
 8001d00:	0140fa04 	movi	r5,1000
 8001d04:	1009883a 	mov	r4,r2
 8001d08:	80029d40 	call	80029d4 <__mulsi3>
 8001d0c:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8001d10:	d0a72617 	ldw	r2,-25448(gp)
 8001d14:	100b883a 	mov	r5,r2
 8001d18:	1809883a 	mov	r4,r3
 8001d1c:	80029140 	call	8002914 <__udivsi3>
 8001d20:	1007883a 	mov	r3,r2
 8001d24:	e0bffe17 	ldw	r2,-8(fp)
 8001d28:	18bfe736 	bltu	r3,r2,8001cc8 <XferDispatchPkt+0x80>
            }
        }
        if( rcode != 0x00 ) {               //exit if timeout
 8001d2c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001d30:	10000226 	beq	r2,zero,8001d3c <XferDispatchPkt+0xf4>
            return( rcode );
 8001d34:	e0bfffc3 	ldbu	r2,-1(fp)
 8001d38:	00001e06 	br	8001db4 <XferDispatchPkt+0x16c>
        }
        rcode = ( MAXreg_rd( rHRSL ) & 0x0f );
 8001d3c:	01003e04 	movi	r4,248
 8001d40:	80014f40 	call	80014f4 <MAXreg_rd>
 8001d44:	108003cc 	andi	r2,r2,15
 8001d48:	e0bfffc5 	stb	r2,-1(fp)
        if( rcode == hrNAK ) {
 8001d4c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001d50:	10800118 	cmpnei	r2,r2,4
 8001d54:	1000071e 	bne	r2,zero,8001d74 <XferDispatchPkt+0x12c>
            nak_count++;
 8001d58:	e0bfff43 	ldbu	r2,-3(fp)
 8001d5c:	10800044 	addi	r2,r2,1
 8001d60:	e0bfff45 	stb	r2,-3(fp)
            if( nak_count == USB_NAK_LIMIT ) {
 8001d64:	e0bfff43 	ldbu	r2,-3(fp)
 8001d68:	10803218 	cmpnei	r2,r2,200
 8001d6c:	10000b1e 	bne	r2,zero,8001d9c <XferDispatchPkt+0x154>
                break;
 8001d70:	00000f06 	br	8001db0 <XferDispatchPkt+0x168>
            }
            else {
                continue;
            }
        }
        if( rcode == hrTIMEOUT ) {
 8001d74:	e0bfffc3 	ldbu	r2,-1(fp)
 8001d78:	10800398 	cmpnei	r2,r2,14
 8001d7c:	1000091e 	bne	r2,zero,8001da4 <XferDispatchPkt+0x15c>
            retry_count++;
 8001d80:	e0bfff83 	ldbu	r2,-2(fp)
 8001d84:	10800044 	addi	r2,r2,1
 8001d88:	e0bfff85 	stb	r2,-2(fp)
            if( retry_count == USB_RETRY_LIMIT ) {
 8001d8c:	e0bfff87 	ldb	r2,-2(fp)
 8001d90:	108000d8 	cmpnei	r2,r2,3
 8001d94:	10000526 	beq	r2,zero,8001dac <XferDispatchPkt+0x164>
                break;
            }
            else {
                continue;
 8001d98:	00000106 	br	8001da0 <XferDispatchPkt+0x158>
                continue;
 8001d9c:	0001883a 	nop
        MAXreg_wr( rHXFR, ( token|ep ));            //launch the transfer
 8001da0:	003fbf06 	br	8001ca0 <XferDispatchPkt+0x58>
            }
        }
        else break;
 8001da4:	0001883a 	nop
 8001da8:	00000106 	br	8001db0 <XferDispatchPkt+0x168>
                break;
 8001dac:	0001883a 	nop
    }//while( 1 )
    return( rcode );
 8001db0:	e0bfffc3 	ldbu	r2,-1(fp)
}
 8001db4:	e037883a 	mov	sp,fp
 8001db8:	dfc00117 	ldw	ra,4(sp)
 8001dbc:	df000017 	ldw	fp,0(sp)
 8001dc0:	dec00204 	addi	sp,sp,8
 8001dc4:	f800283a 	ret

08001dc8 <XferInTransfer>:
/* IN transfer to arbitrary endpoint. Assumes PERADDR is set. Handles multiple packets if necessary. Transfers 'nbytes' bytes.
    Keep sending INs and writes data to memory area pointed by 'data' */
/* rcode 0 if no errors. rcode 01-0f is relayed from prvXferDispatchPkt(). Rcode f0 means RCVDAVIRQ error,
            fe USB xfer timeout */
BYTE XferInTransfer( BYTE addr/* not sure if it's necessary */, BYTE ep, WORD nbytes, BYTE* data, BYTE maxpktsize )
{
 8001dc8:	defff804 	addi	sp,sp,-32
 8001dcc:	dfc00715 	stw	ra,28(sp)
 8001dd0:	df000615 	stw	fp,24(sp)
 8001dd4:	df000604 	addi	fp,sp,24
 8001dd8:	2007883a 	mov	r3,r4
 8001ddc:	3009883a 	mov	r4,r6
 8001de0:	e1fffb15 	stw	r7,-20(fp)
 8001de4:	e0800217 	ldw	r2,8(fp)
 8001de8:	e0fffe05 	stb	r3,-8(fp)
 8001dec:	2807883a 	mov	r3,r5
 8001df0:	e0fffd05 	stb	r3,-12(fp)
 8001df4:	2007883a 	mov	r3,r4
 8001df8:	e0fffc0d 	sth	r3,-16(fp)
 8001dfc:	e0bffa05 	stb	r2,-24(fp)
 BYTE rcode;
 BYTE i;
 BYTE tmpbyte;
 BYTE pktsize;
 WORD xfrlen = 0;
 8001e00:	e03fff8d 	sth	zero,-2(fp)
    MAXreg_wr( rHCTL, devtable[ addr ].epinfo[ ep ].rcvToggle );    //set toggle value
 8001e04:	e0bffe03 	ldbu	r2,-8(fp)
 8001e08:	100690fa 	slli	r3,r2,3
 8001e0c:	00820074 	movhi	r2,2049
 8001e10:	1885883a 	add	r2,r3,r2
 8001e14:	10d78517 	ldw	r3,24084(r2)
 8001e18:	e0bffd03 	ldbu	r2,-12(fp)
 8001e1c:	100490fa 	slli	r2,r2,3
 8001e20:	1885883a 	add	r2,r3,r2
 8001e24:	10800183 	ldbu	r2,6(r2)
 8001e28:	10803fcc 	andi	r2,r2,255
 8001e2c:	100b883a 	mov	r5,r2
 8001e30:	01003a04 	movi	r4,232
 8001e34:	80014880 	call	8001488 <MAXreg_wr>
    while( 1 ) { // use a 'return' to exit this loop
        rcode = XferDispatchPkt( tokIN, ep );           //IN packet to EP-'endpoint'. Function takes care of NAKS.
 8001e38:	e0bffd03 	ldbu	r2,-12(fp)
 8001e3c:	100b883a 	mov	r5,r2
 8001e40:	0009883a 	mov	r4,zero
 8001e44:	8001c480 	call	8001c48 <XferDispatchPkt>
 8001e48:	e0bfff45 	stb	r2,-3(fp)
        if( rcode ) {
 8001e4c:	e0bfff43 	ldbu	r2,-3(fp)
 8001e50:	10000226 	beq	r2,zero,8001e5c <XferInTransfer+0x94>
            return( rcode );                            //should be 0, indicating ACK. Else return error code.
 8001e54:	e0bfff43 	ldbu	r2,-3(fp)
 8001e58:	00003806 	br	8001f3c <XferInTransfer+0x174>
        }
        /* check for RCVDAVIRQ and generate error if not present */
        /* the only case when absence of RCVDAVIRQ makes sense is when toggle error occurred. Need to add handling for that */
        if(( MAXreg_rd( rHIRQ ) & bmRCVDAVIRQ ) == 0 ) {
 8001e5c:	01003204 	movi	r4,200
 8001e60:	80014f40 	call	80014f4 <MAXreg_rd>
 8001e64:	10803fcc 	andi	r2,r2,255
 8001e68:	1080010c 	andi	r2,r2,4
 8001e6c:	1000021e 	bne	r2,zero,8001e78 <XferInTransfer+0xb0>
            return ( 0xf0 );                            //receive error
 8001e70:	00bffc04 	movi	r2,-16
 8001e74:	00003106 	br	8001f3c <XferInTransfer+0x174>
        }
        pktsize = MAXreg_rd( rRCVBC );                  //number of received bytes
 8001e78:	01000c04 	movi	r4,48
 8001e7c:	80014f40 	call	80014f4 <MAXreg_rd>
 8001e80:	e0bfff05 	stb	r2,-4(fp)
        //printf ("pktsize: %d\n", pktsize);
        data = MAXbytes_rd( rRCVFIFO, pktsize, data );
 8001e84:	e0bfff03 	ldbu	r2,-4(fp)
 8001e88:	e1bffb17 	ldw	r6,-20(fp)
 8001e8c:	100b883a 	mov	r5,r2
 8001e90:	01000204 	movi	r4,8
 8001e94:	800151c0 	call	800151c <MAXbytes_rd>
 8001e98:	e0bffb15 	stw	r2,-20(fp)
        MAXreg_wr( rHIRQ, bmRCVDAVIRQ );                // Clear the IRQ & free the buffer
 8001e9c:	01400104 	movi	r5,4
 8001ea0:	01003204 	movi	r4,200
 8001ea4:	80014880 	call	8001488 <MAXreg_wr>
        xfrlen += pktsize;                              // add this packet's byte count to total transfer length
 8001ea8:	e0bfff03 	ldbu	r2,-4(fp)
 8001eac:	e0ffff8b 	ldhu	r3,-2(fp)
 8001eb0:	1885883a 	add	r2,r3,r2
 8001eb4:	e0bfff8d 	sth	r2,-2(fp)
        /* The transfer is complete under two conditions:           */
        /* 1. The device sent a short packet (L.T. maxPacketSize)   */
        /* 2. 'nbytes' have been transferred.                       */
        if (( pktsize < maxpktsize ) || (xfrlen >= nbytes )) {    // have we transferred 'nbytes' bytes?
 8001eb8:	e0ffff03 	ldbu	r3,-4(fp)
 8001ebc:	e0bffa03 	ldbu	r2,-24(fp)
 8001ec0:	18800336 	bltu	r3,r2,8001ed0 <XferInTransfer+0x108>
 8001ec4:	e0ffff8b 	ldhu	r3,-2(fp)
 8001ec8:	e0bffc0b 	ldhu	r2,-16(fp)
 8001ecc:	18bfda36 	bltu	r3,r2,8001e38 <XferInTransfer+0x70>
            if( MAXreg_rd( rHRSL ) & bmRCVTOGRD ) {                 //save toggle value
 8001ed0:	01003e04 	movi	r4,248
 8001ed4:	80014f40 	call	80014f4 <MAXreg_rd>
 8001ed8:	10803fcc 	andi	r2,r2,255
 8001edc:	1080040c 	andi	r2,r2,16
 8001ee0:	10000b26 	beq	r2,zero,8001f10 <XferInTransfer+0x148>
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG1;
 8001ee4:	e0bffe03 	ldbu	r2,-8(fp)
 8001ee8:	100690fa 	slli	r3,r2,3
 8001eec:	00820074 	movhi	r2,2049
 8001ef0:	1885883a 	add	r2,r3,r2
 8001ef4:	10d78517 	ldw	r3,24084(r2)
 8001ef8:	e0bffd03 	ldbu	r2,-12(fp)
 8001efc:	100490fa 	slli	r2,r2,3
 8001f00:	1885883a 	add	r2,r3,r2
 8001f04:	00c00804 	movi	r3,32
 8001f08:	10c00185 	stb	r3,6(r2)
 8001f0c:	00000a06 	br	8001f38 <XferInTransfer+0x170>
            }
            else {
                devtable[ addr ].epinfo[ ep ].rcvToggle = bmRCVTOG0;
 8001f10:	e0bffe03 	ldbu	r2,-8(fp)
 8001f14:	100690fa 	slli	r3,r2,3
 8001f18:	00820074 	movhi	r2,2049
 8001f1c:	1885883a 	add	r2,r3,r2
 8001f20:	10d78517 	ldw	r3,24084(r2)
 8001f24:	e0bffd03 	ldbu	r2,-12(fp)
 8001f28:	100490fa 	slli	r2,r2,3
 8001f2c:	1885883a 	add	r2,r3,r2
 8001f30:	00c00404 	movi	r3,16
 8001f34:	10c00185 	stb	r3,6(r2)
            }
            return( 0 );
 8001f38:	0005883a 	mov	r2,zero
        }
  }//while( 1 )
}
 8001f3c:	e037883a 	mov	sp,fp
 8001f40:	dfc00117 	ldw	ra,4(sp)
 8001f44:	df000017 	ldw	fp,0(sp)
 8001f48:	dec00204 	addi	sp,sp,8
 8001f4c:	f800283a 	ret

08001f50 <USB_init>:
/* initialization of USB data structures */
void USB_init( void )
{
 8001f50:	defffe04 	addi	sp,sp,-8
 8001f54:	df000115 	stw	fp,4(sp)
 8001f58:	df000104 	addi	fp,sp,4
  BYTE i;
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8001f5c:	e03fffc5 	stb	zero,-1(fp)
 8001f60:	00000d06 	br	8001f98 <USB_init+0x48>
        devtable[ i ].epinfo = NULL;       //clear device table
 8001f64:	e0bfffc3 	ldbu	r2,-1(fp)
 8001f68:	100690fa 	slli	r3,r2,3
 8001f6c:	00820074 	movhi	r2,2049
 8001f70:	1885883a 	add	r2,r3,r2
 8001f74:	10178515 	stw	zero,24084(r2)
        devtable[ i ].devclass = 0;
 8001f78:	e0bfffc3 	ldbu	r2,-1(fp)
 8001f7c:	100690fa 	slli	r3,r2,3
 8001f80:	00820074 	movhi	r2,2049
 8001f84:	1885883a 	add	r2,r3,r2
 8001f88:	10178605 	stb	zero,24088(r2)
    for( i = 0; i < ( USB_NUMDEVICES + 1 ); i++ ) {
 8001f8c:	e0bfffc3 	ldbu	r2,-1(fp)
 8001f90:	10800044 	addi	r2,r2,1
 8001f94:	e0bfffc5 	stb	r2,-1(fp)
 8001f98:	e0bfffc3 	ldbu	r2,-1(fp)
 8001f9c:	10800270 	cmpltui	r2,r2,9
 8001fa0:	103ff01e 	bne	r2,zero,8001f64 <USB_init+0x14>
    }
    devtable[ 0 ].epinfo = &dev0ep;  //set single ep for uninitialized device
 8001fa4:	d0e71904 	addi	r3,gp,-25500
 8001fa8:	00820074 	movhi	r2,2049
 8001fac:	10d78515 	stw	r3,24084(r2)
    dev0ep.MaxPktSize = 0;
 8001fb0:	d027198d 	sth	zero,-25498(gp)
    dev0ep.sndToggle = bmSNDTOG0;   //set DATA0/1 toggles to 0
 8001fb4:	00801004 	movi	r2,64
 8001fb8:	d0a71a45 	stb	r2,-25495(gp)
    dev0ep.rcvToggle = bmRCVTOG0;
 8001fbc:	00800404 	movi	r2,16
 8001fc0:	d0a71a85 	stb	r2,-25494(gp)
}
 8001fc4:	0001883a 	nop
 8001fc8:	e037883a 	mov	sp,fp
 8001fcc:	df000017 	ldw	fp,0(sp)
 8001fd0:	dec00104 	addi	sp,sp,4
 8001fd4:	f800283a 	ret

08001fd8 <USB_Task>:
/* error codes: 01-0f HRSLT        */
/* ff - unsupported device         */
/* fe - no address available       */
/* fd - no client driver available */
void USB_Task( void )
{
 8001fd8:	deffb204 	addi	sp,sp,-312
 8001fdc:	dfc04d15 	stw	ra,308(sp)
 8001fe0:	df004c15 	stw	fp,304(sp)
 8001fe4:	dc004b15 	stw	r16,300(sp)
 8001fe8:	df004c04 	addi	fp,sp,304
 USB_DEVICE_DESCRIPTOR buf;

 BYTE rcode, tmpdata;
 BYTE i;

    switch( usb_task_state & USB_STATE_MASK ) {
 8001fec:	d0a00303 	ldbu	r2,-32756(gp)
 8001ff0:	10803fcc 	andi	r2,r2,255
 8001ff4:	10803c0c 	andi	r2,r2,240
 8001ff8:	10c00820 	cmpeqi	r3,r2,32
 8001ffc:	18010e1e 	bne	r3,zero,8002438 <USB_Task+0x460>
 8002000:	10c00848 	cmpgei	r3,r2,33
 8002004:	1800041e 	bne	r3,zero,8002018 <USB_Task+0x40>
 8002008:	10000a26 	beq	r2,zero,8002034 <USB_Task+0x5c>
 800200c:	10800420 	cmpeqi	r2,r2,16
 8002010:	10001a1e 	bne	r2,zero,800207c <USB_Task+0xa4>
        case( USB_STATE_ERROR ):
            //vTaskDelay( LED_RATE ); //stay here if error
            break;//( USB_STATE_ERROR )
        default:
            //Should never get here
            break;
 8002014:	00017506 	br	80025ec <USB_Task+0x614>
    switch( usb_task_state & USB_STATE_MASK ) {
 8002018:	10c01020 	cmpeqi	r3,r2,64
 800201c:	1801681e 	bne	r3,zero,80025c0 <USB_Task+0x5e8>
 8002020:	10c03fe0 	cmpeqi	r3,r2,255
 8002024:	1801681e 	bne	r3,zero,80025c8 <USB_Task+0x5f0>
 8002028:	10800c20 	cmpeqi	r2,r2,48
 800202c:	10013d1e 	bne	r2,zero,8002524 <USB_Task+0x54c>
            break;
 8002030:	00016e06 	br	80025ec <USB_Task+0x614>
            switch( usb_task_state ) {
 8002034:	d0a00303 	ldbu	r2,-32756(gp)
 8002038:	10803fcc 	andi	r2,r2,255
 800203c:	10c000e0 	cmpeqi	r3,r2,3
 8002040:	1800081e 	bne	r3,zero,8002064 <USB_Task+0x8c>
 8002044:	10c00120 	cmpeqi	r3,r2,4
 8002048:	18000a1e 	bne	r3,zero,8002074 <USB_Task+0x9c>
 800204c:	10800058 	cmpnei	r2,r2,1
 8002050:	10015f1e 	bne	r2,zero,80025d0 <USB_Task+0x5f8>
                    USB_init();
 8002054:	8001f500 	call	8001f50 <USB_init>
                    usb_task_state = USB_DETACHED_SUBSTATE_WAIT_FOR_DEVICE;
 8002058:	008000c4 	movi	r2,3
 800205c:	d0a00305 	stb	r2,-32756(gp)
                    break;
 8002060:	00000506 	br	8002078 <USB_Task+0xa0>
                    MAXreg_wr(rHCTL,bmSAMPLEBUS);
 8002064:	01400104 	movi	r5,4
 8002068:	01003a04 	movi	r4,232
 800206c:	80014880 	call	8001488 <MAXreg_wr>
                    break;
 8002070:	00000106 	br	8002078 <USB_Task+0xa0>
                    break;
 8002074:	0001883a 	nop
            break;//( USB_STATE_DETACHED ):
 8002078:	00015506 	br	80025d0 <USB_Task+0x5f8>
            switch( usb_task_state ) {
 800207c:	d0a00303 	ldbu	r2,-32756(gp)
 8002080:	10803fcc 	andi	r2,r2,255
 8002084:	10bffc04 	addi	r2,r2,-16
 8002088:	10c001a8 	cmpgeui	r3,r2,6
 800208c:	1801521e 	bne	r3,zero,80025d8 <USB_Task+0x600>
 8002090:	100690ba 	slli	r3,r2,2
 8002094:	00820034 	movhi	r2,2048
 8002098:	1885883a 	add	r2,r3,r2
 800209c:	10882917 	ldw	r2,8356(r2)
 80020a0:	1000683a 	jmp	r2
 80020a4:	080020bc 	xorhi	zero,at,130
 80020a8:	080020f4 	orhi	zero,at,131
 80020ac:	08002130 	cmpltui	zero,at,132
 80020b0:	08002154 	ori	zero,at,133
 80020b4:	08002194 	ori	zero,at,134
 80020b8:	080021a8 	cmpgeui	zero,at,134
  return _alt_nticks;
 80020bc:	d0a72717 	ldw	r2,-25444(gp)
                    usb_delay = (alt_nticks()*1000)/alt_ticks_per_second() + 200;           //initial settle 200ms
 80020c0:	0140fa04 	movi	r5,1000
 80020c4:	1009883a 	mov	r4,r2
 80020c8:	80029d40 	call	80029d4 <__mulsi3>
 80020cc:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 80020d0:	d0a72617 	ldw	r2,-25448(gp)
 80020d4:	100b883a 	mov	r5,r2
 80020d8:	1809883a 	mov	r4,r3
 80020dc:	80029140 	call	8002914 <__udivsi3>
 80020e0:	10803204 	addi	r2,r2,200
 80020e4:	d0a71c15 	stw	r2,-25488(gp)
                    usb_task_state = USB_ATTACHED_SUBSTATE_SETTLE;
 80020e8:	00800444 	movi	r2,17
 80020ec:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_STATE_ATTACHED )
 80020f0:	0000d006 	br	8002434 <USB_Task+0x45c>
  return _alt_nticks;
 80020f4:	d0a72717 	ldw	r2,-25444(gp)
                    if( (alt_nticks()*1000)/alt_ticks_per_second() > usb_delay ) {
 80020f8:	0140fa04 	movi	r5,1000
 80020fc:	1009883a 	mov	r4,r2
 8002100:	80029d40 	call	80029d4 <__mulsi3>
 8002104:	1007883a 	mov	r3,r2
  return _alt_tick_rate;
 8002108:	d0a72617 	ldw	r2,-25448(gp)
 800210c:	100b883a 	mov	r5,r2
 8002110:	1809883a 	mov	r4,r3
 8002114:	80029140 	call	8002914 <__udivsi3>
 8002118:	1007883a 	mov	r3,r2
 800211c:	d0a71c17 	ldw	r2,-25488(gp)
 8002120:	10c0c12e 	bgeu	r2,r3,8002428 <USB_Task+0x450>
                        usb_task_state = USB_ATTACHED_SUBSTATE_RESET_DEVICE;
 8002124:	00800484 	movi	r2,18
 8002128:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 800212c:	0000be06 	br	8002428 <USB_Task+0x450>
                    MAXreg_wr( rHIRQ, bmBUSEVENTIRQ );                               //clear bus event IRQ
 8002130:	01400044 	movi	r5,1
 8002134:	01003204 	movi	r4,200
 8002138:	80014880 	call	8001488 <MAXreg_wr>
                    MAXreg_wr( rHCTL, bmBUSRST );                                    //issue bus reset
 800213c:	01400044 	movi	r5,1
 8002140:	01003a04 	movi	r4,232
 8002144:	80014880 	call	8001488 <MAXreg_wr>
                    usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE;
 8002148:	008004c4 	movi	r2,19
 800214c:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_RESET_DEVICE )
 8002150:	0000b806 	br	8002434 <USB_Task+0x45c>
                    if(( MAXreg_rd( rHCTL ) & bmBUSRST ) == 0 ) {
 8002154:	01003a04 	movi	r4,232
 8002158:	80014f40 	call	80014f4 <MAXreg_rd>
 800215c:	10803fcc 	andi	r2,r2,255
 8002160:	1080004c 	andi	r2,r2,1
 8002164:	1000b21e 	bne	r2,zero,8002430 <USB_Task+0x458>
                        tmpdata = MAXreg_rd( rMODE ) | bmSOFKAENAB;                 //start SOF generation
 8002168:	01003604 	movi	r4,216
 800216c:	80014f40 	call	80014f4 <MAXreg_rd>
 8002170:	10800214 	ori	r2,r2,8
 8002174:	e0bffe85 	stb	r2,-6(fp)
                        MAXreg_wr( rMODE, tmpdata );
 8002178:	e0bffe83 	ldbu	r2,-6(fp)
 800217c:	100b883a 	mov	r5,r2
 8002180:	01003604 	movi	r4,216
 8002184:	80014880 	call	8001488 <MAXreg_wr>
                        usb_task_state = USB_ATTACHED_SUBSTATE_WAIT_SOF;
 8002188:	00800504 	movi	r2,20
 800218c:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002190:	0000a706 	br	8002430 <USB_Task+0x458>
                    if( MAXreg_rd( rHIRQ ) | bmFRAMEIRQ ) {                     //when first SOF received we can continue
 8002194:	01003204 	movi	r4,200
 8002198:	80014f40 	call	80014f4 <MAXreg_rd>
                        usb_task_state = USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE;
 800219c:	00800544 	movi	r2,21
 80021a0:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_SOF )
 80021a4:	0000a306 	br	8002434 <USB_Task+0x45c>
                    devtable[ 0 ].epinfo->MaxPktSize = 0x0008;             //fill max packet size with minimum allowed
 80021a8:	00820074 	movhi	r2,2049
 80021ac:	10978517 	ldw	r2,24084(r2)
 80021b0:	00c00204 	movi	r3,8
 80021b4:	10c0008d 	sth	r3,2(r2)
                	rcode = XferGetDevDescr( 0, 0, 8, (BYTE *)&buf );       //get device descriptor size
 80021b8:	e0bff984 	addi	r2,fp,-26
 80021bc:	d8800415 	stw	r2,16(sp)
 80021c0:	00800204 	movi	r2,8
 80021c4:	d8800315 	stw	r2,12(sp)
 80021c8:	d8000215 	stw	zero,8(sp)
 80021cc:	00800044 	movi	r2,1
 80021d0:	d8800115 	stw	r2,4(sp)
 80021d4:	d8000015 	stw	zero,0(sp)
 80021d8:	01c00184 	movi	r7,6
 80021dc:	01802004 	movi	r6,128
 80021e0:	000b883a 	mov	r5,zero
 80021e4:	0009883a 	mov	r4,zero
 80021e8:	80019880 	call	8001988 <XferCtrlReq>
 80021ec:	e0bffe45 	stb	r2,-7(fp)
                    if( rcode == 0 ) {
 80021f0:	e0bffe43 	ldbu	r2,-7(fp)
 80021f4:	1000851e 	bne	r2,zero,800240c <USB_Task+0x434>
                        devtable[ 0 ].epinfo->MaxPktSize = buf.bMaxPacketSize0;
 80021f8:	e0fffb43 	ldbu	r3,-19(fp)
 80021fc:	00820074 	movhi	r2,2049
 8002200:	10978517 	ldw	r2,24084(r2)
 8002204:	18c03fcc 	andi	r3,r3,255
 8002208:	10c0008d 	sth	r3,2(r2)
                        rcode = XferGetDevDescr( 0, 0, buf.bLength, (BYTE *)&buf );     //get full descriptor
 800220c:	e0bff983 	ldbu	r2,-26(fp)
 8002210:	10803fcc 	andi	r2,r2,255
 8002214:	e0fff984 	addi	r3,fp,-26
 8002218:	d8c00415 	stw	r3,16(sp)
 800221c:	d8800315 	stw	r2,12(sp)
 8002220:	d8000215 	stw	zero,8(sp)
 8002224:	00800044 	movi	r2,1
 8002228:	d8800115 	stw	r2,4(sp)
 800222c:	d8000015 	stw	zero,0(sp)
 8002230:	01c00184 	movi	r7,6
 8002234:	01802004 	movi	r6,128
 8002238:	000b883a 	mov	r5,zero
 800223c:	0009883a 	mov	r4,zero
 8002240:	80019880 	call	8001988 <XferCtrlReq>
 8002244:	e0bffe45 	stb	r2,-7(fp)
                        if (buf.iManufacturer != 0)
 8002248:	e0bffd03 	ldbu	r2,-12(fp)
 800224c:	10803fcc 	andi	r2,r2,255
 8002250:	10003426 	beq	r2,zero,8002324 <USB_Task+0x34c>
                			rcode = XferGetStrDescr( 0, 0, 2, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002254:	e0bffd03 	ldbu	r2,-12(fp)
 8002258:	10803fcc 	andi	r2,r2,255
 800225c:	e0ffb984 	addi	r3,fp,-282
 8002260:	d8c00415 	stw	r3,16(sp)
 8002264:	00c00084 	movi	r3,2
 8002268:	d8c00315 	stw	r3,12(sp)
 800226c:	00c10244 	movi	r3,1033
 8002270:	d8c00215 	stw	r3,8(sp)
 8002274:	00c000c4 	movi	r3,3
 8002278:	d8c00115 	stw	r3,4(sp)
 800227c:	d8800015 	stw	r2,0(sp)
 8002280:	01c00184 	movi	r7,6
 8002284:	01802004 	movi	r6,128
 8002288:	000b883a 	mov	r5,zero
 800228c:	0009883a 	mov	r4,zero
 8002290:	80019880 	call	8001988 <XferCtrlReq>
 8002294:	e0bffe45 	stb	r2,-7(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iManufacturer, LANG_EN_US, (BYTE *)&strDesc);
 8002298:	e0bffd03 	ldbu	r2,-12(fp)
 800229c:	10803fcc 	andi	r2,r2,255
 80022a0:	e0ffb983 	ldbu	r3,-282(fp)
 80022a4:	18c03fcc 	andi	r3,r3,255
 80022a8:	e13fb984 	addi	r4,fp,-282
 80022ac:	d9000415 	stw	r4,16(sp)
 80022b0:	d8c00315 	stw	r3,12(sp)
 80022b4:	00c10244 	movi	r3,1033
 80022b8:	d8c00215 	stw	r3,8(sp)
 80022bc:	00c000c4 	movi	r3,3
 80022c0:	d8c00115 	stw	r3,4(sp)
 80022c4:	d8800015 	stw	r2,0(sp)
 80022c8:	01c00184 	movi	r7,6
 80022cc:	01802004 	movi	r6,128
 80022d0:	000b883a 	mov	r5,zero
 80022d4:	0009883a 	mov	r4,zero
 80022d8:	80019880 	call	8001988 <XferCtrlReq>
 80022dc:	e0bffe45 	stb	r2,-7(fp)
                			printf ("Mfgr string(%i): %s\n", buf.iManufacturer, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 80022e0:	e0bffd03 	ldbu	r2,-12(fp)
 80022e4:	14003fcc 	andi	r16,r2,255
 80022e8:	e0bfb983 	ldbu	r2,-282(fp)
 80022ec:	10803fcc 	andi	r2,r2,255
 80022f0:	1004d07a 	srli	r2,r2,1
 80022f4:	10bfffc4 	addi	r2,r2,-1
 80022f8:	10c03fcc 	andi	r3,r2,255
 80022fc:	e0bfb984 	addi	r2,fp,-282
 8002300:	10800084 	addi	r2,r2,2
 8002304:	180b883a 	mov	r5,r3
 8002308:	1009883a 	mov	r4,r2
 800230c:	80027980 	call	8002798 <ConvUTF8ToStr>
 8002310:	100d883a 	mov	r6,r2
 8002314:	800b883a 	mov	r5,r16
 8002318:	01020074 	movhi	r4,2049
 800231c:	2107a604 	addi	r4,r4,7832
 8002320:	8002a2c0 	call	8002a2c <printf>
                		if (buf.iProduct != 0)
 8002324:	e0bffd43 	ldbu	r2,-11(fp)
 8002328:	10803fcc 	andi	r2,r2,255
 800232c:	10003426 	beq	r2,zero,8002400 <USB_Task+0x428>
                        	rcode = XferGetStrDescr( 0, 0, 2, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002330:	e0bffd43 	ldbu	r2,-11(fp)
 8002334:	10803fcc 	andi	r2,r2,255
 8002338:	e0ffb984 	addi	r3,fp,-282
 800233c:	d8c00415 	stw	r3,16(sp)
 8002340:	00c00084 	movi	r3,2
 8002344:	d8c00315 	stw	r3,12(sp)
 8002348:	00c10244 	movi	r3,1033
 800234c:	d8c00215 	stw	r3,8(sp)
 8002350:	00c000c4 	movi	r3,3
 8002354:	d8c00115 	stw	r3,4(sp)
 8002358:	d8800015 	stw	r2,0(sp)
 800235c:	01c00184 	movi	r7,6
 8002360:	01802004 	movi	r6,128
 8002364:	000b883a 	mov	r5,zero
 8002368:	0009883a 	mov	r4,zero
 800236c:	80019880 	call	8001988 <XferCtrlReq>
 8002370:	e0bffe45 	stb	r2,-7(fp)
                			rcode = XferGetStrDescr( 0, 0, strDesc.bLength, buf.iProduct, LANG_EN_US, (BYTE *)&strDesc);
 8002374:	e0bffd43 	ldbu	r2,-11(fp)
 8002378:	10803fcc 	andi	r2,r2,255
 800237c:	e0ffb983 	ldbu	r3,-282(fp)
 8002380:	18c03fcc 	andi	r3,r3,255
 8002384:	e13fb984 	addi	r4,fp,-282
 8002388:	d9000415 	stw	r4,16(sp)
 800238c:	d8c00315 	stw	r3,12(sp)
 8002390:	00c10244 	movi	r3,1033
 8002394:	d8c00215 	stw	r3,8(sp)
 8002398:	00c000c4 	movi	r3,3
 800239c:	d8c00115 	stw	r3,4(sp)
 80023a0:	d8800015 	stw	r2,0(sp)
 80023a4:	01c00184 	movi	r7,6
 80023a8:	01802004 	movi	r6,128
 80023ac:	000b883a 	mov	r5,zero
 80023b0:	0009883a 	mov	r4,zero
 80023b4:	80019880 	call	8001988 <XferCtrlReq>
 80023b8:	e0bffe45 	stb	r2,-7(fp)
                			printf ("Product string(%i): %s\n", buf.iProduct, ConvUTF8ToStr(strDesc.bString, (strDesc.bLength>>1)-1));
 80023bc:	e0bffd43 	ldbu	r2,-11(fp)
 80023c0:	14003fcc 	andi	r16,r2,255
 80023c4:	e0bfb983 	ldbu	r2,-282(fp)
 80023c8:	10803fcc 	andi	r2,r2,255
 80023cc:	1004d07a 	srli	r2,r2,1
 80023d0:	10bfffc4 	addi	r2,r2,-1
 80023d4:	10c03fcc 	andi	r3,r2,255
 80023d8:	e0bfb984 	addi	r2,fp,-282
 80023dc:	10800084 	addi	r2,r2,2
 80023e0:	180b883a 	mov	r5,r3
 80023e4:	1009883a 	mov	r4,r2
 80023e8:	80027980 	call	8002798 <ConvUTF8ToStr>
 80023ec:	100d883a 	mov	r6,r2
 80023f0:	800b883a 	mov	r5,r16
 80023f4:	01020074 	movhi	r4,2049
 80023f8:	2107ac04 	addi	r4,r4,7856
 80023fc:	8002a2c0 	call	8002a2c <printf>
                        usb_task_state = USB_STATE_ADDRESSING;
 8002400:	00800804 	movi	r2,32
 8002404:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002408:	00000a06 	br	8002434 <USB_Task+0x45c>
                        usb_error = rcode;
 800240c:	e0bffe43 	ldbu	r2,-7(fp)
 8002410:	d0a71d45 	stb	r2,-25483(gp)
                        last_usb_task_state = usb_task_state;
 8002414:	d0a00303 	ldbu	r2,-32756(gp)
 8002418:	d0a71b05 	stb	r2,-25492(gp)
                        usb_task_state = USB_STATE_ERROR;
 800241c:	00bfffc4 	movi	r2,-1
 8002420:	d0a00305 	stb	r2,-32756(gp)
                    break;//case( USB_ATTACHED_SUBSTATE_GET_DEVICE_DESCRIPTOR_SIZE ):
 8002424:	00000306 	br	8002434 <USB_Task+0x45c>
                    break;//case( USB_ATTACHED_SUBSTATE_SETTLE )
 8002428:	0001883a 	nop
 800242c:	00006a06 	br	80025d8 <USB_Task+0x600>
                    break;//case( USB_ATTACHED_SUBSTATE_WAIT_RESET_COMPLETE )
 8002430:	0001883a 	nop
            break;//case ( USB_STATE_ATTACHED )
 8002434:	00006806 	br	80025d8 <USB_Task+0x600>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 8002438:	00800044 	movi	r2,1
 800243c:	e0bffec5 	stb	r2,-5(fp)
 8002440:	00002a06 	br	80024ec <USB_Task+0x514>
                if( devtable[ i ].epinfo == NULL ) {
 8002444:	e0bffec3 	ldbu	r2,-5(fp)
 8002448:	100690fa 	slli	r3,r2,3
 800244c:	00820074 	movhi	r2,2049
 8002450:	1885883a 	add	r2,r3,r2
 8002454:	10978517 	ldw	r2,24084(r2)
 8002458:	1000211e 	bne	r2,zero,80024e0 <USB_Task+0x508>
                    devtable[ i ].epinfo = devtable[ 0 ].epinfo;        //set correct MaxPktSize
 800245c:	e0bffec3 	ldbu	r2,-5(fp)
 8002460:	00c20074 	movhi	r3,2049
 8002464:	18d78517 	ldw	r3,24084(r3)
 8002468:	100890fa 	slli	r4,r2,3
 800246c:	00820074 	movhi	r2,2049
 8002470:	2085883a 	add	r2,r4,r2
 8002474:	10d78515 	stw	r3,24084(r2)
                    rcode = XferSetAddr( 0, 0, i );
 8002478:	e0bffec3 	ldbu	r2,-5(fp)
 800247c:	d8000415 	stw	zero,16(sp)
 8002480:	d8000315 	stw	zero,12(sp)
 8002484:	d8000215 	stw	zero,8(sp)
 8002488:	d8000115 	stw	zero,4(sp)
 800248c:	d8800015 	stw	r2,0(sp)
 8002490:	01c00144 	movi	r7,5
 8002494:	000d883a 	mov	r6,zero
 8002498:	000b883a 	mov	r5,zero
 800249c:	0009883a 	mov	r4,zero
 80024a0:	80019880 	call	8001988 <XferCtrlReq>
 80024a4:	e0bffe45 	stb	r2,-7(fp)
                    if( rcode == 0 ) {
 80024a8:	e0bffe43 	ldbu	r2,-7(fp)
 80024ac:	1000051e 	bne	r2,zero,80024c4 <USB_Task+0x4ec>
                        tmp_addr = i;
 80024b0:	e0bffec3 	ldbu	r2,-5(fp)
 80024b4:	d0a71d05 	stb	r2,-25484(gp)
                        usb_task_state = USB_STATE_CONFIGURING;
 80024b8:	00800c04 	movi	r2,48
 80024bc:	d0a00305 	stb	r2,-32756(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 80024c0:	00000d06 	br	80024f8 <USB_Task+0x520>
                        usb_error = rcode;          //set address error
 80024c4:	e0bffe43 	ldbu	r2,-7(fp)
 80024c8:	d0a71d45 	stb	r2,-25483(gp)
                        last_usb_task_state = usb_task_state;
 80024cc:	d0a00303 	ldbu	r2,-32756(gp)
 80024d0:	d0a71b05 	stb	r2,-25492(gp)
                        usb_task_state = USB_STATE_ERROR;
 80024d4:	00bfffc4 	movi	r2,-1
 80024d8:	d0a00305 	stb	r2,-32756(gp)
                    break;  //break if address assigned or error occurred during address assignment attempt
 80024dc:	00000606 	br	80024f8 <USB_Task+0x520>
            for( i = 1; i < USB_NUMDEVICES; i++ ) {
 80024e0:	e0bffec3 	ldbu	r2,-5(fp)
 80024e4:	10800044 	addi	r2,r2,1
 80024e8:	e0bffec5 	stb	r2,-5(fp)
 80024ec:	e0bffec3 	ldbu	r2,-5(fp)
 80024f0:	10800230 	cmpltui	r2,r2,8
 80024f4:	103fd31e 	bne	r2,zero,8002444 <USB_Task+0x46c>
            if( usb_task_state == USB_STATE_ADDRESSING ) {
 80024f8:	d0a00303 	ldbu	r2,-32756(gp)
 80024fc:	10803fcc 	andi	r2,r2,255
 8002500:	10800818 	cmpnei	r2,r2,32
 8002504:	1000361e 	bne	r2,zero,80025e0 <USB_Task+0x608>
                usb_error = 0xfe;
 8002508:	00bfff84 	movi	r2,-2
 800250c:	d0a71d45 	stb	r2,-25483(gp)
                last_usb_task_state = usb_task_state;
 8002510:	d0a00303 	ldbu	r2,-32756(gp)
 8002514:	d0a71b05 	stb	r2,-25492(gp)
                usb_task_state = USB_STATE_ERROR;
 8002518:	00bfffc4 	movi	r2,-1
 800251c:	d0a00305 	stb	r2,-32756(gp)
            break;//case ( USB_STATE_ADDRESSING )
 8002520:	00002f06 	br	80025e0 <USB_Task+0x608>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 8002524:	e03ffec5 	stb	zero,-5(fp)
 8002528:	00001706 	br	8002588 <USB_Task+0x5b0>
                rcode = ClientDriverTable[ i ].Initialize( tmp_addr, 0 );
 800252c:	e0fffec3 	ldbu	r3,-5(fp)
 8002530:	1805883a 	mov	r2,r3
 8002534:	1085883a 	add	r2,r2,r2
 8002538:	10c5883a 	add	r2,r2,r3
 800253c:	100490ba 	slli	r2,r2,2
 8002540:	00c20074 	movhi	r3,2049
 8002544:	10c7883a 	add	r3,r2,r3
 8002548:	18891317 	ldw	r2,9292(r3)
 800254c:	d0e71d03 	ldbu	r3,-25484(gp)
 8002550:	18c03fcc 	andi	r3,r3,255
 8002554:	000b883a 	mov	r5,zero
 8002558:	1809883a 	mov	r4,r3
 800255c:	103ee83a 	callr	r2
 8002560:	e0bffe45 	stb	r2,-7(fp)
                if( rcode == TRUE ) {
 8002564:	e0bffe43 	ldbu	r2,-7(fp)
 8002568:	10800058 	cmpnei	r2,r2,1
 800256c:	1000031e 	bne	r2,zero,800257c <USB_Task+0x5a4>
			        usb_task_state = USB_STATE_RUNNING;
 8002570:	00801004 	movi	r2,64
 8002574:	d0a00305 	stb	r2,-32756(gp)
                    break;
 8002578:	00000606 	br	8002594 <USB_Task+0x5bc>
            for( i = 0; i < USB_NUMCLASSES; i++ ) {
 800257c:	e0bffec3 	ldbu	r2,-5(fp)
 8002580:	10800044 	addi	r2,r2,1
 8002584:	e0bffec5 	stb	r2,-5(fp)
 8002588:	e0bffec3 	ldbu	r2,-5(fp)
 800258c:	10800130 	cmpltui	r2,r2,4
 8002590:	103fe61e 	bne	r2,zero,800252c <USB_Task+0x554>
            if( usb_task_state == USB_STATE_CONFIGURING ) {
 8002594:	d0a00303 	ldbu	r2,-32756(gp)
 8002598:	10803fcc 	andi	r2,r2,255
 800259c:	10800c18 	cmpnei	r2,r2,48
 80025a0:	1000111e 	bne	r2,zero,80025e8 <USB_Task+0x610>
                usb_error = 0xfd;
 80025a4:	00bfff44 	movi	r2,-3
 80025a8:	d0a71d45 	stb	r2,-25483(gp)
                last_usb_task_state = usb_task_state;
 80025ac:	d0a00303 	ldbu	r2,-32756(gp)
 80025b0:	d0a71b05 	stb	r2,-25492(gp)
                usb_task_state = USB_STATE_ERROR;
 80025b4:	00bfffc4 	movi	r2,-1
 80025b8:	d0a00305 	stb	r2,-32756(gp)
            break;//( USB_STATE_CONFIGURING )
 80025bc:	00000a06 	br	80025e8 <USB_Task+0x610>
            break;//( USB_STATE_RUNNING )
 80025c0:	0001883a 	nop
 80025c4:	00000906 	br	80025ec <USB_Task+0x614>
            break;//( USB_STATE_ERROR )
 80025c8:	0001883a 	nop
 80025cc:	00000706 	br	80025ec <USB_Task+0x614>
            break;//( USB_STATE_DETACHED ):
 80025d0:	0001883a 	nop
 80025d4:	00000506 	br	80025ec <USB_Task+0x614>
            break;//case ( USB_STATE_ATTACHED )
 80025d8:	0001883a 	nop
 80025dc:	00000306 	br	80025ec <USB_Task+0x614>
            break;//case ( USB_STATE_ADDRESSING )
 80025e0:	0001883a 	nop
 80025e4:	00000106 	br	80025ec <USB_Task+0x614>
            break;//( USB_STATE_CONFIGURING )
 80025e8:	0001883a 	nop
    }//switch( usb_task_state & STATE_MASK )
}
 80025ec:	0001883a 	nop
 80025f0:	e6ffff04 	addi	sp,fp,-4
 80025f4:	dfc00217 	ldw	ra,8(sp)
 80025f8:	df000117 	ldw	fp,4(sp)
 80025fc:	dc000017 	ldw	r16,0(sp)
 8002600:	dec00304 	addi	sp,sp,12
 8002604:	f800283a 	ret

08002608 <MSDProbe>:

//place-holders for MSD (mass-storage device) drivers, we don't have them ported.
//returns TRUE if device is successfully identified and configured, otherwise returns FALSE
BOOL MSDProbe( BYTE addr, DWORD flags )
{
 8002608:	defffd04 	addi	sp,sp,-12
 800260c:	df000215 	stw	fp,8(sp)
 8002610:	df000204 	addi	fp,sp,8
 8002614:	2005883a 	mov	r2,r4
 8002618:	e17ffe15 	stw	r5,-8(fp)
 800261c:	e0bfff05 	stb	r2,-4(fp)
    return( FALSE );
 8002620:	0005883a 	mov	r2,zero
}
 8002624:	e037883a 	mov	sp,fp
 8002628:	df000017 	ldw	fp,0(sp)
 800262c:	dec00104 	addi	sp,sp,4
 8002630:	f800283a 	ret

08002634 <MSDEventHandler>:

BOOL MSDEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002634:	defffb04 	addi	sp,sp,-20
 8002638:	df000415 	stw	fp,16(sp)
 800263c:	df000404 	addi	fp,sp,16
 8002640:	2005883a 	mov	r2,r4
 8002644:	2807883a 	mov	r3,r5
 8002648:	e1bffd15 	stw	r6,-12(fp)
 800264c:	e1fffc15 	stw	r7,-16(fp)
 8002650:	e0bfff05 	stb	r2,-4(fp)
 8002654:	1805883a 	mov	r2,r3
 8002658:	e0bffe05 	stb	r2,-8(fp)

	return( FALSE );
 800265c:	0005883a 	mov	r2,zero

}
 8002660:	e037883a 	mov	sp,fp
 8002664:	df000017 	ldw	fp,0(sp)
 8002668:	dec00104 	addi	sp,sp,4
 800266c:	f800283a 	ret

08002670 <CDCProbe>:
//CDC (communication device class also not supported)
BOOL CDCProbe( BYTE address, DWORD flags )
{
 8002670:	defffd04 	addi	sp,sp,-12
 8002674:	df000215 	stw	fp,8(sp)
 8002678:	df000204 	addi	fp,sp,8
 800267c:	2005883a 	mov	r2,r4
 8002680:	e17ffe15 	stw	r5,-8(fp)
 8002684:	e0bfff05 	stb	r2,-4(fp)

	return( FALSE );
 8002688:	0005883a 	mov	r2,zero

}
 800268c:	e037883a 	mov	sp,fp
 8002690:	df000017 	ldw	fp,0(sp)
 8002694:	dec00104 	addi	sp,sp,4
 8002698:	f800283a 	ret

0800269c <CDCEventHandler>:

BOOL CDCEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 800269c:	defffb04 	addi	sp,sp,-20
 80026a0:	df000415 	stw	fp,16(sp)
 80026a4:	df000404 	addi	fp,sp,16
 80026a8:	2005883a 	mov	r2,r4
 80026ac:	2807883a 	mov	r3,r5
 80026b0:	e1bffd15 	stw	r6,-12(fp)
 80026b4:	e1fffc15 	stw	r7,-16(fp)
 80026b8:	e0bfff05 	stb	r2,-4(fp)
 80026bc:	1805883a 	mov	r2,r3
 80026c0:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 80026c4:	0005883a 	mov	r2,zero
}
 80026c8:	e037883a 	mov	sp,fp
 80026cc:	df000017 	ldw	fp,0(sp)
 80026d0:	dec00104 	addi	sp,sp,4
 80026d4:	f800283a 	ret

080026d8 <DummyProbe>:

BOOL DummyProbe( BYTE address , DWORD flags )
{
 80026d8:	defffd04 	addi	sp,sp,-12
 80026dc:	df000215 	stw	fp,8(sp)
 80026e0:	df000204 	addi	fp,sp,8
 80026e4:	2005883a 	mov	r2,r4
 80026e8:	e17ffe15 	stw	r5,-8(fp)
 80026ec:	e0bfff05 	stb	r2,-4(fp)
	return( FALSE );
 80026f0:	0005883a 	mov	r2,zero
}
 80026f4:	e037883a 	mov	sp,fp
 80026f8:	df000017 	ldw	fp,0(sp)
 80026fc:	dec00104 	addi	sp,sp,4
 8002700:	f800283a 	ret

08002704 <DummyEventHandler>:

BOOL DummyEventHandler( BYTE address, BYTE event, void *data, DWORD size )
{
 8002704:	defffb04 	addi	sp,sp,-20
 8002708:	df000415 	stw	fp,16(sp)
 800270c:	df000404 	addi	fp,sp,16
 8002710:	2005883a 	mov	r2,r4
 8002714:	2807883a 	mov	r3,r5
 8002718:	e1bffd15 	stw	r6,-12(fp)
 800271c:	e1fffc15 	stw	r7,-16(fp)
 8002720:	e0bfff05 	stb	r2,-4(fp)
 8002724:	1805883a 	mov	r2,r3
 8002728:	e0bffe05 	stb	r2,-8(fp)
	return( FALSE );
 800272c:	0005883a 	mov	r2,zero
}
 8002730:	e037883a 	mov	sp,fp
 8002734:	df000017 	ldw	fp,0(sp)
 8002738:	dec00104 	addi	sp,sp,4
 800273c:	f800283a 	ret

08002740 <GetUsbTaskState>:
/* Function to access usb_task_state variable from outside */
BYTE GetUsbTaskState( void )
{
 8002740:	deffff04 	addi	sp,sp,-4
 8002744:	df000015 	stw	fp,0(sp)
 8002748:	d839883a 	mov	fp,sp
    return( usb_task_state );
 800274c:	d0a00303 	ldbu	r2,-32756(gp)
}
 8002750:	e037883a 	mov	sp,fp
 8002754:	df000017 	ldw	fp,0(sp)
 8002758:	dec00104 	addi	sp,sp,4
 800275c:	f800283a 	ret

08002760 <GetDevtable>:
/* Function to access devtable[] from outside */
DEV_RECORD* GetDevtable( BYTE index )
{
 8002760:	defffe04 	addi	sp,sp,-8
 8002764:	df000115 	stw	fp,4(sp)
 8002768:	df000104 	addi	fp,sp,4
 800276c:	2005883a 	mov	r2,r4
 8002770:	e0bfff05 	stb	r2,-4(fp)
    return( &devtable[ index ] );
 8002774:	e0bfff03 	ldbu	r2,-4(fp)
 8002778:	100690fa 	slli	r3,r2,3
 800277c:	00820074 	movhi	r2,2049
 8002780:	10978504 	addi	r2,r2,24084
 8002784:	1885883a 	add	r2,r3,r2
}
 8002788:	e037883a 	mov	sp,fp
 800278c:	df000017 	ldw	fp,0(sp)
 8002790:	dec00104 	addi	sp,sp,4
 8002794:	f800283a 	ret

08002798 <ConvUTF8ToStr>:

char* ConvUTF8ToStr(BYTE* utf8, BYTE length)
{
 8002798:	defffc04 	addi	sp,sp,-16
 800279c:	df000315 	stw	fp,12(sp)
 80027a0:	df000304 	addi	fp,sp,12
 80027a4:	e13ffe15 	stw	r4,-8(fp)
 80027a8:	2805883a 	mov	r2,r5
 80027ac:	e0bffd05 	stb	r2,-12(fp)
	BYTE i;
	for (i = 0; i < length; i++)
 80027b0:	e03fffc5 	stb	zero,-1(fp)
 80027b4:	00000d06 	br	80027ec <ConvUTF8ToStr+0x54>
	{
		utf8[i] = utf8[2*i];
 80027b8:	e0bfffc3 	ldbu	r2,-1(fp)
 80027bc:	1085883a 	add	r2,r2,r2
 80027c0:	1007883a 	mov	r3,r2
 80027c4:	e0bffe17 	ldw	r2,-8(fp)
 80027c8:	10c7883a 	add	r3,r2,r3
 80027cc:	e0bfffc3 	ldbu	r2,-1(fp)
 80027d0:	e13ffe17 	ldw	r4,-8(fp)
 80027d4:	2085883a 	add	r2,r4,r2
 80027d8:	18c00003 	ldbu	r3,0(r3)
 80027dc:	10c00005 	stb	r3,0(r2)
	for (i = 0; i < length; i++)
 80027e0:	e0bfffc3 	ldbu	r2,-1(fp)
 80027e4:	10800044 	addi	r2,r2,1
 80027e8:	e0bfffc5 	stb	r2,-1(fp)
 80027ec:	e0ffffc3 	ldbu	r3,-1(fp)
 80027f0:	e0bffd03 	ldbu	r2,-12(fp)
 80027f4:	18bff036 	bltu	r3,r2,80027b8 <ConvUTF8ToStr+0x20>
	}
	utf8[length] = 0x00;
 80027f8:	e0bffd03 	ldbu	r2,-12(fp)
 80027fc:	e0fffe17 	ldw	r3,-8(fp)
 8002800:	1885883a 	add	r2,r3,r2
 8002804:	10000005 	stb	zero,0(r2)
	return (char*)utf8;
 8002808:	e0bffe17 	ldw	r2,-8(fp)
}
 800280c:	e037883a 	mov	sp,fp
 8002810:	df000017 	ldw	fp,0(sp)
 8002814:	dec00104 	addi	sp,sp,4
 8002818:	f800283a 	ret

0800281c <__divsi3>:
 800281c:	20001a16 	blt	r4,zero,8002888 <__divsi3+0x6c>
 8002820:	000f883a 	mov	r7,zero
 8002824:	2800020e 	bge	r5,zero,8002830 <__divsi3+0x14>
 8002828:	014bc83a 	sub	r5,zero,r5
 800282c:	39c0005c 	xori	r7,r7,1
 8002830:	200d883a 	mov	r6,r4
 8002834:	00c00044 	movi	r3,1
 8002838:	2900092e 	bgeu	r5,r4,8002860 <__divsi3+0x44>
 800283c:	00800804 	movi	r2,32
 8002840:	00c00044 	movi	r3,1
 8002844:	00000106 	br	800284c <__divsi3+0x30>
 8002848:	10001226 	beq	r2,zero,8002894 <__divsi3+0x78>
 800284c:	294b883a 	add	r5,r5,r5
 8002850:	10bfffc4 	addi	r2,r2,-1
 8002854:	18c7883a 	add	r3,r3,r3
 8002858:	293ffb36 	bltu	r5,r4,8002848 <__divsi3+0x2c>
 800285c:	18000d26 	beq	r3,zero,8002894 <__divsi3+0x78>
 8002860:	0005883a 	mov	r2,zero
 8002864:	31400236 	bltu	r6,r5,8002870 <__divsi3+0x54>
 8002868:	314dc83a 	sub	r6,r6,r5
 800286c:	10c4b03a 	or	r2,r2,r3
 8002870:	1806d07a 	srli	r3,r3,1
 8002874:	280ad07a 	srli	r5,r5,1
 8002878:	183ffa1e 	bne	r3,zero,8002864 <__divsi3+0x48>
 800287c:	38000126 	beq	r7,zero,8002884 <__divsi3+0x68>
 8002880:	0085c83a 	sub	r2,zero,r2
 8002884:	f800283a 	ret
 8002888:	0109c83a 	sub	r4,zero,r4
 800288c:	01c00044 	movi	r7,1
 8002890:	003fe406 	br	8002824 <__divsi3+0x8>
 8002894:	0005883a 	mov	r2,zero
 8002898:	003ff806 	br	800287c <__divsi3+0x60>

0800289c <__modsi3>:
 800289c:	20001a16 	blt	r4,zero,8002908 <__modsi3+0x6c>
 80028a0:	000f883a 	mov	r7,zero
 80028a4:	2005883a 	mov	r2,r4
 80028a8:	2800010e 	bge	r5,zero,80028b0 <__modsi3+0x14>
 80028ac:	014bc83a 	sub	r5,zero,r5
 80028b0:	00c00044 	movi	r3,1
 80028b4:	2900092e 	bgeu	r5,r4,80028dc <__modsi3+0x40>
 80028b8:	01800804 	movi	r6,32
 80028bc:	00c00044 	movi	r3,1
 80028c0:	00000106 	br	80028c8 <__modsi3+0x2c>
 80028c4:	30000d26 	beq	r6,zero,80028fc <__modsi3+0x60>
 80028c8:	294b883a 	add	r5,r5,r5
 80028cc:	31bfffc4 	addi	r6,r6,-1
 80028d0:	18c7883a 	add	r3,r3,r3
 80028d4:	293ffb36 	bltu	r5,r4,80028c4 <__modsi3+0x28>
 80028d8:	18000826 	beq	r3,zero,80028fc <__modsi3+0x60>
 80028dc:	1806d07a 	srli	r3,r3,1
 80028e0:	11400136 	bltu	r2,r5,80028e8 <__modsi3+0x4c>
 80028e4:	1145c83a 	sub	r2,r2,r5
 80028e8:	280ad07a 	srli	r5,r5,1
 80028ec:	183ffb1e 	bne	r3,zero,80028dc <__modsi3+0x40>
 80028f0:	38000126 	beq	r7,zero,80028f8 <__modsi3+0x5c>
 80028f4:	0085c83a 	sub	r2,zero,r2
 80028f8:	f800283a 	ret
 80028fc:	2005883a 	mov	r2,r4
 8002900:	383ffd26 	beq	r7,zero,80028f8 <__modsi3+0x5c>
 8002904:	003ffb06 	br	80028f4 <__modsi3+0x58>
 8002908:	0109c83a 	sub	r4,zero,r4
 800290c:	01c00044 	movi	r7,1
 8002910:	003fe406 	br	80028a4 <__modsi3+0x8>

08002914 <__udivsi3>:
 8002914:	200d883a 	mov	r6,r4
 8002918:	2900152e 	bgeu	r5,r4,8002970 <__udivsi3+0x5c>
 800291c:	28001416 	blt	r5,zero,8002970 <__udivsi3+0x5c>
 8002920:	00800804 	movi	r2,32
 8002924:	00c00044 	movi	r3,1
 8002928:	00000206 	br	8002934 <__udivsi3+0x20>
 800292c:	10000e26 	beq	r2,zero,8002968 <__udivsi3+0x54>
 8002930:	28000516 	blt	r5,zero,8002948 <__udivsi3+0x34>
 8002934:	294b883a 	add	r5,r5,r5
 8002938:	10bfffc4 	addi	r2,r2,-1
 800293c:	18c7883a 	add	r3,r3,r3
 8002940:	293ffa36 	bltu	r5,r4,800292c <__udivsi3+0x18>
 8002944:	18000826 	beq	r3,zero,8002968 <__udivsi3+0x54>
 8002948:	0005883a 	mov	r2,zero
 800294c:	31400236 	bltu	r6,r5,8002958 <__udivsi3+0x44>
 8002950:	314dc83a 	sub	r6,r6,r5
 8002954:	10c4b03a 	or	r2,r2,r3
 8002958:	1806d07a 	srli	r3,r3,1
 800295c:	280ad07a 	srli	r5,r5,1
 8002960:	183ffa1e 	bne	r3,zero,800294c <__udivsi3+0x38>
 8002964:	f800283a 	ret
 8002968:	0005883a 	mov	r2,zero
 800296c:	f800283a 	ret
 8002970:	00c00044 	movi	r3,1
 8002974:	003ff406 	br	8002948 <__udivsi3+0x34>

08002978 <__umodsi3>:
 8002978:	2005883a 	mov	r2,r4
 800297c:	2900132e 	bgeu	r5,r4,80029cc <__umodsi3+0x54>
 8002980:	28001216 	blt	r5,zero,80029cc <__umodsi3+0x54>
 8002984:	01800804 	movi	r6,32
 8002988:	00c00044 	movi	r3,1
 800298c:	00000206 	br	8002998 <__umodsi3+0x20>
 8002990:	30000c26 	beq	r6,zero,80029c4 <__umodsi3+0x4c>
 8002994:	28000516 	blt	r5,zero,80029ac <__umodsi3+0x34>
 8002998:	294b883a 	add	r5,r5,r5
 800299c:	31bfffc4 	addi	r6,r6,-1
 80029a0:	18c7883a 	add	r3,r3,r3
 80029a4:	293ffa36 	bltu	r5,r4,8002990 <__umodsi3+0x18>
 80029a8:	18000626 	beq	r3,zero,80029c4 <__umodsi3+0x4c>
 80029ac:	1806d07a 	srli	r3,r3,1
 80029b0:	11400136 	bltu	r2,r5,80029b8 <__umodsi3+0x40>
 80029b4:	1145c83a 	sub	r2,r2,r5
 80029b8:	280ad07a 	srli	r5,r5,1
 80029bc:	183ffb1e 	bne	r3,zero,80029ac <__umodsi3+0x34>
 80029c0:	f800283a 	ret
 80029c4:	2005883a 	mov	r2,r4
 80029c8:	f800283a 	ret
 80029cc:	00c00044 	movi	r3,1
 80029d0:	003ff606 	br	80029ac <__umodsi3+0x34>

080029d4 <__mulsi3>:
 80029d4:	0005883a 	mov	r2,zero
 80029d8:	20000726 	beq	r4,zero,80029f8 <__mulsi3+0x24>
 80029dc:	20c0004c 	andi	r3,r4,1
 80029e0:	2008d07a 	srli	r4,r4,1
 80029e4:	18000126 	beq	r3,zero,80029ec <__mulsi3+0x18>
 80029e8:	1145883a 	add	r2,r2,r5
 80029ec:	294b883a 	add	r5,r5,r5
 80029f0:	203ffa1e 	bne	r4,zero,80029dc <__mulsi3+0x8>
 80029f4:	f800283a 	ret
 80029f8:	f800283a 	ret

080029fc <_printf_r>:
 80029fc:	defffd04 	addi	sp,sp,-12
 8002a00:	2805883a 	mov	r2,r5
 8002a04:	dfc00015 	stw	ra,0(sp)
 8002a08:	d9800115 	stw	r6,4(sp)
 8002a0c:	d9c00215 	stw	r7,8(sp)
 8002a10:	21400217 	ldw	r5,8(r4)
 8002a14:	d9c00104 	addi	r7,sp,4
 8002a18:	100d883a 	mov	r6,r2
 8002a1c:	8002bf80 	call	8002bf8 <___vfprintf_internal_r>
 8002a20:	dfc00017 	ldw	ra,0(sp)
 8002a24:	dec00304 	addi	sp,sp,12
 8002a28:	f800283a 	ret

08002a2c <printf>:
 8002a2c:	defffc04 	addi	sp,sp,-16
 8002a30:	dfc00015 	stw	ra,0(sp)
 8002a34:	d9400115 	stw	r5,4(sp)
 8002a38:	d9800215 	stw	r6,8(sp)
 8002a3c:	d9c00315 	stw	r7,12(sp)
 8002a40:	00820074 	movhi	r2,2049
 8002a44:	10900c17 	ldw	r2,16432(r2)
 8002a48:	200b883a 	mov	r5,r4
 8002a4c:	d9800104 	addi	r6,sp,4
 8002a50:	11000217 	ldw	r4,8(r2)
 8002a54:	8004d800 	call	8004d80 <__vfprintf_internal>
 8002a58:	dfc00017 	ldw	ra,0(sp)
 8002a5c:	dec00404 	addi	sp,sp,16
 8002a60:	f800283a 	ret

08002a64 <_putchar_r>:
 8002a64:	21800217 	ldw	r6,8(r4)
 8002a68:	800969c1 	jmpi	800969c <_putc_r>

08002a6c <putchar>:
 8002a6c:	00820074 	movhi	r2,2049
 8002a70:	10900c17 	ldw	r2,16432(r2)
 8002a74:	200b883a 	mov	r5,r4
 8002a78:	11800217 	ldw	r6,8(r2)
 8002a7c:	1009883a 	mov	r4,r2
 8002a80:	800969c1 	jmpi	800969c <_putc_r>

08002a84 <_puts_r>:
 8002a84:	defff504 	addi	sp,sp,-44
 8002a88:	dc000815 	stw	r16,32(sp)
 8002a8c:	2021883a 	mov	r16,r4
 8002a90:	2809883a 	mov	r4,r5
 8002a94:	dc400915 	stw	r17,36(sp)
 8002a98:	dfc00a15 	stw	ra,40(sp)
 8002a9c:	2823883a 	mov	r17,r5
 8002aa0:	8002b600 	call	8002b60 <strlen>
 8002aa4:	11000044 	addi	r4,r2,1
 8002aa8:	d8800515 	stw	r2,20(sp)
 8002aac:	00800044 	movi	r2,1
 8002ab0:	00c20074 	movhi	r3,2049
 8002ab4:	d8800715 	stw	r2,28(sp)
 8002ab8:	d8800404 	addi	r2,sp,16
 8002abc:	18c7b204 	addi	r3,r3,7880
 8002ac0:	d8800115 	stw	r2,4(sp)
 8002ac4:	00800084 	movi	r2,2
 8002ac8:	dc400415 	stw	r17,16(sp)
 8002acc:	d8c00615 	stw	r3,24(sp)
 8002ad0:	d9000315 	stw	r4,12(sp)
 8002ad4:	d8800215 	stw	r2,8(sp)
 8002ad8:	81400217 	ldw	r5,8(r16)
 8002adc:	80000226 	beq	r16,zero,8002ae8 <_puts_r+0x64>
 8002ae0:	80800e17 	ldw	r2,56(r16)
 8002ae4:	10001326 	beq	r2,zero,8002b34 <_puts_r+0xb0>
 8002ae8:	2880030b 	ldhu	r2,12(r5)
 8002aec:	10c8000c 	andi	r3,r2,8192
 8002af0:	1800061e 	bne	r3,zero,8002b0c <_puts_r+0x88>
 8002af4:	28c01917 	ldw	r3,100(r5)
 8002af8:	0137ffc4 	movi	r4,-8193
 8002afc:	10880014 	ori	r2,r2,8192
 8002b00:	1906703a 	and	r3,r3,r4
 8002b04:	2880030d 	sth	r2,12(r5)
 8002b08:	28c01915 	stw	r3,100(r5)
 8002b0c:	d9800104 	addi	r6,sp,4
 8002b10:	8009883a 	mov	r4,r16
 8002b14:	80072d00 	call	80072d0 <__sfvwrite_r>
 8002b18:	10000b1e 	bne	r2,zero,8002b48 <_puts_r+0xc4>
 8002b1c:	00800284 	movi	r2,10
 8002b20:	dfc00a17 	ldw	ra,40(sp)
 8002b24:	dc400917 	ldw	r17,36(sp)
 8002b28:	dc000817 	ldw	r16,32(sp)
 8002b2c:	dec00b04 	addi	sp,sp,44
 8002b30:	f800283a 	ret
 8002b34:	8009883a 	mov	r4,r16
 8002b38:	d9400015 	stw	r5,0(sp)
 8002b3c:	8006e700 	call	8006e70 <__sinit>
 8002b40:	d9400017 	ldw	r5,0(sp)
 8002b44:	003fe806 	br	8002ae8 <_puts_r+0x64>
 8002b48:	00bfffc4 	movi	r2,-1
 8002b4c:	003ff406 	br	8002b20 <_puts_r+0x9c>

08002b50 <puts>:
 8002b50:	00820074 	movhi	r2,2049
 8002b54:	200b883a 	mov	r5,r4
 8002b58:	11100c17 	ldw	r4,16432(r2)
 8002b5c:	8002a841 	jmpi	8002a84 <_puts_r>

08002b60 <strlen>:
 8002b60:	208000cc 	andi	r2,r4,3
 8002b64:	10002026 	beq	r2,zero,8002be8 <strlen+0x88>
 8002b68:	20800007 	ldb	r2,0(r4)
 8002b6c:	10002026 	beq	r2,zero,8002bf0 <strlen+0x90>
 8002b70:	2005883a 	mov	r2,r4
 8002b74:	00000206 	br	8002b80 <strlen+0x20>
 8002b78:	10c00007 	ldb	r3,0(r2)
 8002b7c:	18001826 	beq	r3,zero,8002be0 <strlen+0x80>
 8002b80:	10800044 	addi	r2,r2,1
 8002b84:	10c000cc 	andi	r3,r2,3
 8002b88:	183ffb1e 	bne	r3,zero,8002b78 <strlen+0x18>
 8002b8c:	11400017 	ldw	r5,0(r2)
 8002b90:	01ffbff4 	movhi	r7,65279
 8002b94:	39ffbfc4 	addi	r7,r7,-257
 8002b98:	29c7883a 	add	r3,r5,r7
 8002b9c:	01a02074 	movhi	r6,32897
 8002ba0:	014a303a 	nor	r5,zero,r5
 8002ba4:	1946703a 	and	r3,r3,r5
 8002ba8:	31a02004 	addi	r6,r6,-32640
 8002bac:	1986703a 	and	r3,r3,r6
 8002bb0:	1800091e 	bne	r3,zero,8002bd8 <strlen+0x78>
 8002bb4:	10800104 	addi	r2,r2,4
 8002bb8:	11400017 	ldw	r5,0(r2)
 8002bbc:	29c7883a 	add	r3,r5,r7
 8002bc0:	014a303a 	nor	r5,zero,r5
 8002bc4:	1946703a 	and	r3,r3,r5
 8002bc8:	1986703a 	and	r3,r3,r6
 8002bcc:	183ff926 	beq	r3,zero,8002bb4 <strlen+0x54>
 8002bd0:	00000106 	br	8002bd8 <strlen+0x78>
 8002bd4:	10800044 	addi	r2,r2,1
 8002bd8:	10c00007 	ldb	r3,0(r2)
 8002bdc:	183ffd1e 	bne	r3,zero,8002bd4 <strlen+0x74>
 8002be0:	1105c83a 	sub	r2,r2,r4
 8002be4:	f800283a 	ret
 8002be8:	2005883a 	mov	r2,r4
 8002bec:	003fe706 	br	8002b8c <strlen+0x2c>
 8002bf0:	0005883a 	mov	r2,zero
 8002bf4:	f800283a 	ret

08002bf8 <___vfprintf_internal_r>:
 8002bf8:	deffbd04 	addi	sp,sp,-268
 8002bfc:	dfc04215 	stw	ra,264(sp)
 8002c00:	dd003d15 	stw	r20,244(sp)
 8002c04:	dcc03c15 	stw	r19,240(sp)
 8002c08:	dc003915 	stw	r16,228(sp)
 8002c0c:	d9000515 	stw	r4,20(sp)
 8002c10:	2021883a 	mov	r16,r4
 8002c14:	2827883a 	mov	r19,r5
 8002c18:	3029883a 	mov	r20,r6
 8002c1c:	d9c00615 	stw	r7,24(sp)
 8002c20:	df004115 	stw	fp,260(sp)
 8002c24:	ddc04015 	stw	r23,256(sp)
 8002c28:	dd803f15 	stw	r22,252(sp)
 8002c2c:	dd403e15 	stw	r21,248(sp)
 8002c30:	dc803b15 	stw	r18,236(sp)
 8002c34:	dc403a15 	stw	r17,232(sp)
 8002c38:	80079040 	call	8007904 <_localeconv_r>
 8002c3c:	10800017 	ldw	r2,0(r2)
 8002c40:	1009883a 	mov	r4,r2
 8002c44:	d8800d15 	stw	r2,52(sp)
 8002c48:	8002b600 	call	8002b60 <strlen>
 8002c4c:	d8800b15 	stw	r2,44(sp)
 8002c50:	80000226 	beq	r16,zero,8002c5c <___vfprintf_internal_r+0x64>
 8002c54:	80800e17 	ldw	r2,56(r16)
 8002c58:	1002de26 	beq	r2,zero,80037d4 <___vfprintf_internal_r+0xbdc>
 8002c5c:	9880030b 	ldhu	r2,12(r19)
 8002c60:	10c8000c 	andi	r3,r2,8192
 8002c64:	1800061e 	bne	r3,zero,8002c80 <___vfprintf_internal_r+0x88>
 8002c68:	98c01917 	ldw	r3,100(r19)
 8002c6c:	0137ffc4 	movi	r4,-8193
 8002c70:	10880014 	ori	r2,r2,8192
 8002c74:	1906703a 	and	r3,r3,r4
 8002c78:	9880030d 	sth	r2,12(r19)
 8002c7c:	98c01915 	stw	r3,100(r19)
 8002c80:	10c0020c 	andi	r3,r2,8
 8002c84:	18009a26 	beq	r3,zero,8002ef0 <___vfprintf_internal_r+0x2f8>
 8002c88:	98c00417 	ldw	r3,16(r19)
 8002c8c:	18009826 	beq	r3,zero,8002ef0 <___vfprintf_internal_r+0x2f8>
 8002c90:	1080068c 	andi	r2,r2,26
 8002c94:	10800298 	cmpnei	r2,r2,10
 8002c98:	10009d26 	beq	r2,zero,8002f10 <___vfprintf_internal_r+0x318>
 8002c9c:	ddc02904 	addi	r23,sp,164
 8002ca0:	ddc01c15 	stw	r23,112(sp)
 8002ca4:	d8001e15 	stw	zero,120(sp)
 8002ca8:	d8001d15 	stw	zero,116(sp)
 8002cac:	d8000815 	stw	zero,32(sp)
 8002cb0:	d8000915 	stw	zero,36(sp)
 8002cb4:	d8000a15 	stw	zero,40(sp)
 8002cb8:	b811883a 	mov	r8,r23
 8002cbc:	d8000c15 	stw	zero,48(sp)
 8002cc0:	d8001115 	stw	zero,68(sp)
 8002cc4:	d8000415 	stw	zero,16(sp)
 8002cc8:	a02d883a 	mov	r22,r20
 8002ccc:	b0800007 	ldb	r2,0(r22)
 8002cd0:	1000a226 	beq	r2,zero,8002f5c <___vfprintf_internal_r+0x364>
 8002cd4:	10800960 	cmpeqi	r2,r2,37
 8002cd8:	1005351e 	bne	r2,zero,80041b0 <___vfprintf_internal_r+0x15b8>
 8002cdc:	b021883a 	mov	r16,r22
 8002ce0:	00000206 	br	8002cec <___vfprintf_internal_r+0xf4>
 8002ce4:	18009326 	beq	r3,zero,8002f34 <___vfprintf_internal_r+0x33c>
 8002ce8:	8821883a 	mov	r16,r17
 8002cec:	80800047 	ldb	r2,1(r16)
 8002cf0:	84400044 	addi	r17,r16,1
 8002cf4:	10c00958 	cmpnei	r3,r2,37
 8002cf8:	103ffa1e 	bne	r2,zero,8002ce4 <___vfprintf_internal_r+0xec>
 8002cfc:	8da5c83a 	sub	r18,r17,r22
 8002d00:	90009626 	beq	r18,zero,8002f5c <___vfprintf_internal_r+0x364>
 8002d04:	d8c01e17 	ldw	r3,120(sp)
 8002d08:	d8801d17 	ldw	r2,116(sp)
 8002d0c:	45800015 	stw	r22,0(r8)
 8002d10:	1c87883a 	add	r3,r3,r18
 8002d14:	10800044 	addi	r2,r2,1
 8002d18:	d8801d15 	stw	r2,116(sp)
 8002d1c:	44800115 	stw	r18,4(r8)
 8002d20:	d8c01e15 	stw	r3,120(sp)
 8002d24:	10800208 	cmpgei	r2,r2,8
 8002d28:	1000851e 	bne	r2,zero,8002f40 <___vfprintf_internal_r+0x348>
 8002d2c:	42000204 	addi	r8,r8,8
 8002d30:	d8c00417 	ldw	r3,16(sp)
 8002d34:	80800047 	ldb	r2,1(r16)
 8002d38:	1c87883a 	add	r3,r3,r18
 8002d3c:	d8c00415 	stw	r3,16(sp)
 8002d40:	10008626 	beq	r2,zero,8002f5c <___vfprintf_internal_r+0x364>
 8002d44:	8a800047 	ldb	r10,1(r17)
 8002d48:	8d800044 	addi	r22,r17,1
 8002d4c:	d8001545 	stb	zero,85(sp)
 8002d50:	0009883a 	mov	r4,zero
 8002d54:	000b883a 	mov	r5,zero
 8002d58:	02ffffc4 	movi	r11,-1
 8002d5c:	0021883a 	mov	r16,zero
 8002d60:	0019883a 	mov	r12,zero
 8002d64:	b5800044 	addi	r22,r22,1
 8002d68:	5039883a 	mov	fp,r10
 8002d6c:	e0bff804 	addi	r2,fp,-32
 8002d70:	10c01668 	cmpgeui	r3,r2,89
 8002d74:	18009d1e 	bne	r3,zero,8002fec <___vfprintf_internal_r+0x3f4>
 8002d78:	100490ba 	slli	r2,r2,2
 8002d7c:	00c20034 	movhi	r3,2048
 8002d80:	10c7883a 	add	r3,r2,r3
 8002d84:	188b6317 	ldw	r2,11660(r3)
 8002d88:	1000683a 	jmp	r2
 8002d8c:	080030c4 	addi	zero,at,195
 8002d90:	08002fec 	andhi	zero,at,191
 8002d94:	08002fec 	andhi	zero,at,191
 8002d98:	080030b8 	rdprs	zero,at,194
 8002d9c:	08002fec 	andhi	zero,at,191
 8002da0:	08002fec 	andhi	zero,at,191
 8002da4:	08002fec 	andhi	zero,at,191
 8002da8:	08002fec 	andhi	zero,at,191
 8002dac:	08002fec 	andhi	zero,at,191
 8002db0:	08002fec 	andhi	zero,at,191
 8002db4:	08003090 	cmplti	zero,at,194
 8002db8:	08003080 	call	800308 <__alt_mem_onchip_memory2_0+0x800308>
 8002dbc:	08002fec 	andhi	zero,at,191
 8002dc0:	08003068 	cmpgeui	zero,at,193
 8002dc4:	0800301c 	xori	zero,at,192
 8002dc8:	08002fec 	andhi	zero,at,191
 8002dcc:	08003010 	cmplti	zero,at,192
 8002dd0:	08002fb4 	orhi	zero,at,190
 8002dd4:	08002fb4 	orhi	zero,at,190
 8002dd8:	08002fb4 	orhi	zero,at,190
 8002ddc:	08002fb4 	orhi	zero,at,190
 8002de0:	08002fb4 	orhi	zero,at,190
 8002de4:	08002fb4 	orhi	zero,at,190
 8002de8:	08002fb4 	orhi	zero,at,190
 8002dec:	08002fb4 	orhi	zero,at,190
 8002df0:	08002fb4 	orhi	zero,at,190
 8002df4:	08002fec 	andhi	zero,at,191
 8002df8:	08002fec 	andhi	zero,at,191
 8002dfc:	08002fec 	andhi	zero,at,191
 8002e00:	08002fec 	andhi	zero,at,191
 8002e04:	08002fec 	andhi	zero,at,191
 8002e08:	08002fec 	andhi	zero,at,191
 8002e0c:	08002fec 	andhi	zero,at,191
 8002e10:	08002fec 	andhi	zero,at,191
 8002e14:	08002fec 	andhi	zero,at,191
 8002e18:	08002fec 	andhi	zero,at,191
 8002e1c:	080035d8 	cmpnei	zero,at,215
 8002e20:	080034f8 	rdprs	zero,at,211
 8002e24:	08002fec 	andhi	zero,at,191
 8002e28:	080034f8 	rdprs	zero,at,211
 8002e2c:	08002fec 	andhi	zero,at,191
 8002e30:	08002fec 	andhi	zero,at,191
 8002e34:	08002fec 	andhi	zero,at,191
 8002e38:	08002fec 	andhi	zero,at,191
 8002e3c:	080034ec 	andhi	zero,at,211
 8002e40:	08002fec 	andhi	zero,at,191
 8002e44:	08002fec 	andhi	zero,at,191
 8002e48:	080034b8 	rdprs	zero,at,210
 8002e4c:	08002fec 	andhi	zero,at,191
 8002e50:	08002fec 	andhi	zero,at,191
 8002e54:	08002fec 	andhi	zero,at,191
 8002e58:	08002fec 	andhi	zero,at,191
 8002e5c:	08002fec 	andhi	zero,at,191
 8002e60:	080036f8 	rdprs	zero,at,219
 8002e64:	08002fec 	andhi	zero,at,191
 8002e68:	08002fec 	andhi	zero,at,191
 8002e6c:	080036b0 	cmpltui	zero,at,218
 8002e70:	08002fec 	andhi	zero,at,191
 8002e74:	08002fec 	andhi	zero,at,191
 8002e78:	08002fec 	andhi	zero,at,191
 8002e7c:	08002fec 	andhi	zero,at,191
 8002e80:	08002fec 	andhi	zero,at,191
 8002e84:	08002fec 	andhi	zero,at,191
 8002e88:	08002fec 	andhi	zero,at,191
 8002e8c:	08002fec 	andhi	zero,at,191
 8002e90:	08002fec 	andhi	zero,at,191
 8002e94:	08002fec 	andhi	zero,at,191
 8002e98:	08003248 	cmpgei	zero,at,201
 8002e9c:	080031d4 	ori	zero,at,199
 8002ea0:	080034f8 	rdprs	zero,at,211
 8002ea4:	080034f8 	rdprs	zero,at,211
 8002ea8:	080034f8 	rdprs	zero,at,211
 8002eac:	080037c8 	cmpgei	zero,at,223
 8002eb0:	080031d4 	ori	zero,at,199
 8002eb4:	08002fec 	andhi	zero,at,191
 8002eb8:	08002fec 	andhi	zero,at,191
 8002ebc:	080037b4 	orhi	zero,at,222
 8002ec0:	08002fec 	andhi	zero,at,191
 8002ec4:	08003478 	rdprs	zero,at,209
 8002ec8:	08003438 	rdprs	zero,at,208
 8002ecc:	08003738 	rdprs	zero,at,220
 8002ed0:	0800372c 	andhi	zero,at,220
 8002ed4:	08002fec 	andhi	zero,at,191
 8002ed8:	08003178 	rdprs	zero,at,197
 8002edc:	08002fec 	andhi	zero,at,191
 8002ee0:	08003138 	rdprs	zero,at,196
 8002ee4:	08002fec 	andhi	zero,at,191
 8002ee8:	08002fec 	andhi	zero,at,191
 8002eec:	080030f0 	cmpltui	zero,at,195
 8002ef0:	d9000517 	ldw	r4,20(sp)
 8002ef4:	980b883a 	mov	r5,r19
 8002ef8:	8004e580 	call	8004e58 <__swsetup_r>
 8002efc:	1007561e 	bne	r2,zero,8004c58 <___vfprintf_internal_r+0x2060>
 8002f00:	9880030b 	ldhu	r2,12(r19)
 8002f04:	1080068c 	andi	r2,r2,26
 8002f08:	10800298 	cmpnei	r2,r2,10
 8002f0c:	103f631e 	bne	r2,zero,8002c9c <___vfprintf_internal_r+0xa4>
 8002f10:	9880038f 	ldh	r2,14(r19)
 8002f14:	103f6116 	blt	r2,zero,8002c9c <___vfprintf_internal_r+0xa4>
 8002f18:	d9c00617 	ldw	r7,24(sp)
 8002f1c:	d9000517 	ldw	r4,20(sp)
 8002f20:	a00d883a 	mov	r6,r20
 8002f24:	980b883a 	mov	r5,r19
 8002f28:	8004d980 	call	8004d98 <__sbprintf>
 8002f2c:	d8800415 	stw	r2,16(sp)
 8002f30:	00001306 	br	8002f80 <___vfprintf_internal_r+0x388>
 8002f34:	8da5c83a 	sub	r18,r17,r22
 8002f38:	903f8226 	beq	r18,zero,8002d44 <___vfprintf_internal_r+0x14c>
 8002f3c:	003f7106 	br	8002d04 <___vfprintf_internal_r+0x10c>
 8002f40:	d9000517 	ldw	r4,20(sp)
 8002f44:	d9801c04 	addi	r6,sp,112
 8002f48:	980b883a 	mov	r5,r19
 8002f4c:	800a1000 	call	800a100 <__sprint_r>
 8002f50:	1000081e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8002f54:	b811883a 	mov	r8,r23
 8002f58:	003f7506 	br	8002d30 <___vfprintf_internal_r+0x138>
 8002f5c:	d8801e17 	ldw	r2,120(sp)
 8002f60:	10000426 	beq	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8002f64:	d9000517 	ldw	r4,20(sp)
 8002f68:	d9801c04 	addi	r6,sp,112
 8002f6c:	980b883a 	mov	r5,r19
 8002f70:	800a1000 	call	800a100 <__sprint_r>
 8002f74:	9880030b 	ldhu	r2,12(r19)
 8002f78:	1080100c 	andi	r2,r2,64
 8002f7c:	1007361e 	bne	r2,zero,8004c58 <___vfprintf_internal_r+0x2060>
 8002f80:	d8800417 	ldw	r2,16(sp)
 8002f84:	dfc04217 	ldw	ra,264(sp)
 8002f88:	df004117 	ldw	fp,260(sp)
 8002f8c:	ddc04017 	ldw	r23,256(sp)
 8002f90:	dd803f17 	ldw	r22,252(sp)
 8002f94:	dd403e17 	ldw	r21,248(sp)
 8002f98:	dd003d17 	ldw	r20,244(sp)
 8002f9c:	dcc03c17 	ldw	r19,240(sp)
 8002fa0:	dc803b17 	ldw	r18,236(sp)
 8002fa4:	dc403a17 	ldw	r17,232(sp)
 8002fa8:	dc003917 	ldw	r16,228(sp)
 8002fac:	dec04304 	addi	sp,sp,268
 8002fb0:	f800283a 	ret
 8002fb4:	0021883a 	mov	r16,zero
 8002fb8:	e0fff404 	addi	r3,fp,-48
 8002fbc:	800490ba 	slli	r2,r16,2
 8002fc0:	b5800044 	addi	r22,r22,1
 8002fc4:	b73fffc7 	ldb	fp,-1(r22)
 8002fc8:	1421883a 	add	r16,r2,r16
 8002fcc:	8421883a 	add	r16,r16,r16
 8002fd0:	1c21883a 	add	r16,r3,r16
 8002fd4:	e0fff404 	addi	r3,fp,-48
 8002fd8:	188002b0 	cmpltui	r2,r3,10
 8002fdc:	103ff71e 	bne	r2,zero,8002fbc <___vfprintf_internal_r+0x3c4>
 8002fe0:	e0bff804 	addi	r2,fp,-32
 8002fe4:	10c01668 	cmpgeui	r3,r2,89
 8002fe8:	183f6326 	beq	r3,zero,8002d78 <___vfprintf_internal_r+0x180>
 8002fec:	21003fcc 	andi	r4,r4,255
 8002ff0:	2006741e 	bne	r4,zero,80049c4 <___vfprintf_internal_r+0x1dcc>
 8002ff4:	e03fd926 	beq	fp,zero,8002f5c <___vfprintf_internal_r+0x364>
 8002ff8:	df001f05 	stb	fp,124(sp)
 8002ffc:	d8001545 	stb	zero,85(sp)
 8003000:	05400044 	movi	r21,1
 8003004:	05000044 	movi	r20,1
 8003008:	dc401f04 	addi	r17,sp,124
 800300c:	00009706 	br	800326c <___vfprintf_internal_r+0x674>
 8003010:	63002014 	ori	r12,r12,128
 8003014:	b2800007 	ldb	r10,0(r22)
 8003018:	003f5206 	br	8002d64 <___vfprintf_internal_r+0x16c>
 800301c:	b7000007 	ldb	fp,0(r22)
 8003020:	b0800044 	addi	r2,r22,1
 8003024:	e0c00aa0 	cmpeqi	r3,fp,42
 8003028:	1807491e 	bne	r3,zero,8004d50 <___vfprintf_internal_r+0x2158>
 800302c:	e0fff404 	addi	r3,fp,-48
 8003030:	198002b0 	cmpltui	r6,r3,10
 8003034:	102d883a 	mov	r22,r2
 8003038:	0017883a 	mov	r11,zero
 800303c:	303f4b26 	beq	r6,zero,8002d6c <___vfprintf_internal_r+0x174>
 8003040:	580490ba 	slli	r2,r11,2
 8003044:	b5800044 	addi	r22,r22,1
 8003048:	b73fffc7 	ldb	fp,-1(r22)
 800304c:	12d7883a 	add	r11,r2,r11
 8003050:	5ad7883a 	add	r11,r11,r11
 8003054:	58d7883a 	add	r11,r11,r3
 8003058:	e0fff404 	addi	r3,fp,-48
 800305c:	188002b0 	cmpltui	r2,r3,10
 8003060:	103ff71e 	bne	r2,zero,8003040 <___vfprintf_internal_r+0x448>
 8003064:	003f4106 	br	8002d6c <___vfprintf_internal_r+0x174>
 8003068:	b7000003 	ldbu	fp,0(r22)
 800306c:	e2803fcc 	andi	r10,fp,255
 8003070:	5280201c 	xori	r10,r10,128
 8003074:	63000114 	ori	r12,r12,4
 8003078:	52bfe004 	addi	r10,r10,-128
 800307c:	003f3906 	br	8002d64 <___vfprintf_internal_r+0x16c>
 8003080:	01000044 	movi	r4,1
 8003084:	01400ac4 	movi	r5,43
 8003088:	b2800007 	ldb	r10,0(r22)
 800308c:	003f3506 	br	8002d64 <___vfprintf_internal_r+0x16c>
 8003090:	d8800617 	ldw	r2,24(sp)
 8003094:	b7000003 	ldbu	fp,0(r22)
 8003098:	14000017 	ldw	r16,0(r2)
 800309c:	10800104 	addi	r2,r2,4
 80030a0:	8004da16 	blt	r16,zero,800440c <___vfprintf_internal_r+0x1814>
 80030a4:	d8800615 	stw	r2,24(sp)
 80030a8:	e2803fcc 	andi	r10,fp,255
 80030ac:	5280201c 	xori	r10,r10,128
 80030b0:	52bfe004 	addi	r10,r10,-128
 80030b4:	003f2b06 	br	8002d64 <___vfprintf_internal_r+0x16c>
 80030b8:	63000054 	ori	r12,r12,1
 80030bc:	b2800007 	ldb	r10,0(r22)
 80030c0:	003f2806 	br	8002d64 <___vfprintf_internal_r+0x16c>
 80030c4:	28803fcc 	andi	r2,r5,255
 80030c8:	1080201c 	xori	r2,r2,128
 80030cc:	10bfe004 	addi	r2,r2,-128
 80030d0:	b7000003 	ldbu	fp,0(r22)
 80030d4:	103ff41e 	bne	r2,zero,80030a8 <___vfprintf_internal_r+0x4b0>
 80030d8:	e2803fcc 	andi	r10,fp,255
 80030dc:	5280201c 	xori	r10,r10,128
 80030e0:	01000044 	movi	r4,1
 80030e4:	01400804 	movi	r5,32
 80030e8:	52bfe004 	addi	r10,r10,-128
 80030ec:	003f1d06 	br	8002d64 <___vfprintf_internal_r+0x16c>
 80030f0:	21003fcc 	andi	r4,r4,255
 80030f4:	2006b81e 	bne	r4,zero,8004bd8 <___vfprintf_internal_r+0x1fe0>
 80030f8:	00820074 	movhi	r2,2049
 80030fc:	1087bc04 	addi	r2,r2,7920
 8003100:	d8800c15 	stw	r2,48(sp)
 8003104:	6080080c 	andi	r2,r12,32
 8003108:	10017026 	beq	r2,zero,80036cc <___vfprintf_internal_r+0xad4>
 800310c:	d8800617 	ldw	r2,24(sp)
 8003110:	15400017 	ldw	r21,0(r2)
 8003114:	15000117 	ldw	r20,4(r2)
 8003118:	10800204 	addi	r2,r2,8
 800311c:	d8800615 	stw	r2,24(sp)
 8003120:	6080004c 	andi	r2,r12,1
 8003124:	10000226 	beq	r2,zero,8003130 <___vfprintf_internal_r+0x538>
 8003128:	ad04b03a 	or	r2,r21,r20
 800312c:	1004aa1e 	bne	r2,zero,80043d8 <___vfprintf_internal_r+0x17e0>
 8003130:	00800084 	movi	r2,2
 8003134:	00018f06 	br	8003774 <___vfprintf_internal_r+0xb7c>
 8003138:	21003fcc 	andi	r4,r4,255
 800313c:	2006a41e 	bne	r4,zero,8004bd0 <___vfprintf_internal_r+0x1fd8>
 8003140:	6080080c 	andi	r2,r12,32
 8003144:	1001b41e 	bne	r2,zero,8003818 <___vfprintf_internal_r+0xc20>
 8003148:	d8800617 	ldw	r2,24(sp)
 800314c:	60c0040c 	andi	r3,r12,16
 8003150:	15400017 	ldw	r21,0(r2)
 8003154:	10800104 	addi	r2,r2,4
 8003158:	18016e1e 	bne	r3,zero,8003714 <___vfprintf_internal_r+0xb1c>
 800315c:	60c0100c 	andi	r3,r12,64
 8003160:	1805a526 	beq	r3,zero,80047f8 <___vfprintf_internal_r+0x1c00>
 8003164:	d8800615 	stw	r2,24(sp)
 8003168:	ad7fffcc 	andi	r21,r21,65535
 800316c:	0029883a 	mov	r20,zero
 8003170:	00800044 	movi	r2,1
 8003174:	00017f06 	br	8003774 <___vfprintf_internal_r+0xb7c>
 8003178:	d8800617 	ldw	r2,24(sp)
 800317c:	d8001545 	stb	zero,85(sp)
 8003180:	14400017 	ldw	r17,0(r2)
 8003184:	14800104 	addi	r18,r2,4
 8003188:	8804ca26 	beq	r17,zero,80044b4 <___vfprintf_internal_r+0x18bc>
 800318c:	da000e15 	stw	r8,56(sp)
 8003190:	db000715 	stw	r12,28(sp)
 8003194:	58bfffe0 	cmpeqi	r2,r11,-1
 8003198:	10056c1e 	bne	r2,zero,800474c <___vfprintf_internal_r+0x1b54>
 800319c:	580d883a 	mov	r6,r11
 80031a0:	000b883a 	mov	r5,zero
 80031a4:	8809883a 	mov	r4,r17
 80031a8:	dac00615 	stw	r11,24(sp)
 80031ac:	80082e40 	call	80082e4 <memchr>
 80031b0:	dac00617 	ldw	r11,24(sp)
 80031b4:	db000717 	ldw	r12,28(sp)
 80031b8:	da000e17 	ldw	r8,56(sp)
 80031bc:	10066c26 	beq	r2,zero,8004b70 <___vfprintf_internal_r+0x1f78>
 80031c0:	1469c83a 	sub	r20,r2,r17
 80031c4:	a02b883a 	mov	r21,r20
 80031c8:	a005fc16 	blt	r20,zero,80049bc <___vfprintf_internal_r+0x1dc4>
 80031cc:	dc800615 	stw	r18,24(sp)
 80031d0:	00002606 	br	800326c <___vfprintf_internal_r+0x674>
 80031d4:	21003fcc 	andi	r4,r4,255
 80031d8:	20067b1e 	bne	r4,zero,8004bc8 <___vfprintf_internal_r+0x1fd0>
 80031dc:	6080080c 	andi	r2,r12,32
 80031e0:	10017f1e 	bne	r2,zero,80037e0 <___vfprintf_internal_r+0xbe8>
 80031e4:	d8800617 	ldw	r2,24(sp)
 80031e8:	60c0040c 	andi	r3,r12,16
 80031ec:	10800104 	addi	r2,r2,4
 80031f0:	1801001e 	bne	r3,zero,80035f4 <___vfprintf_internal_r+0x9fc>
 80031f4:	60c0100c 	andi	r3,r12,64
 80031f8:	1800fe26 	beq	r3,zero,80035f4 <___vfprintf_internal_r+0x9fc>
 80031fc:	d8c00617 	ldw	r3,24(sp)
 8003200:	d8800615 	stw	r2,24(sp)
 8003204:	1d40000f 	ldh	r21,0(r3)
 8003208:	a829d7fa 	srai	r20,r21,31
 800320c:	a005883a 	mov	r2,r20
 8003210:	1000fe16 	blt	r2,zero,800360c <___vfprintf_internal_r+0xa14>
 8003214:	58bfffd8 	cmpnei	r2,r11,-1
 8003218:	db401543 	ldbu	r13,85(sp)
 800321c:	10018526 	beq	r2,zero,8003834 <___vfprintf_internal_r+0xc3c>
 8003220:	00ffdfc4 	movi	r3,-129
 8003224:	ad04b03a 	or	r2,r21,r20
 8003228:	60d8703a 	and	r12,r12,r3
 800322c:	1001811e 	bne	r2,zero,8003834 <___vfprintf_internal_r+0xc3c>
 8003230:	5801831e 	bne	r11,zero,8003840 <___vfprintf_internal_r+0xc48>
 8003234:	6025883a 	mov	r18,r12
 8003238:	0017883a 	mov	r11,zero
 800323c:	0029883a 	mov	r20,zero
 8003240:	b823883a 	mov	r17,r23
 8003244:	00018306 	br	8003854 <___vfprintf_internal_r+0xc5c>
 8003248:	d8c00617 	ldw	r3,24(sp)
 800324c:	d8001545 	stb	zero,85(sp)
 8003250:	05400044 	movi	r21,1
 8003254:	18800017 	ldw	r2,0(r3)
 8003258:	18c00104 	addi	r3,r3,4
 800325c:	d8c00615 	stw	r3,24(sp)
 8003260:	d8801f05 	stb	r2,124(sp)
 8003264:	05000044 	movi	r20,1
 8003268:	dc401f04 	addi	r17,sp,124
 800326c:	6025883a 	mov	r18,r12
 8003270:	0017883a 	mov	r11,zero
 8003274:	d8000715 	stw	zero,28(sp)
 8003278:	9380008c 	andi	r14,r18,2
 800327c:	70000126 	beq	r14,zero,8003284 <___vfprintf_internal_r+0x68c>
 8003280:	ad400084 	addi	r21,r21,2
 8003284:	9340210c 	andi	r13,r18,132
 8003288:	d8c01e17 	ldw	r3,120(sp)
 800328c:	6800021e 	bne	r13,zero,8003298 <___vfprintf_internal_r+0x6a0>
 8003290:	854fc83a 	sub	r7,r16,r21
 8003294:	01c2ce16 	blt	zero,r7,8003dd0 <___vfprintf_internal_r+0x11d8>
 8003298:	d8801547 	ldb	r2,85(sp)
 800329c:	10000c26 	beq	r2,zero,80032d0 <___vfprintf_internal_r+0x6d8>
 80032a0:	d8801d17 	ldw	r2,116(sp)
 80032a4:	d9001544 	addi	r4,sp,85
 80032a8:	18c00044 	addi	r3,r3,1
 80032ac:	10800044 	addi	r2,r2,1
 80032b0:	41000015 	stw	r4,0(r8)
 80032b4:	01000044 	movi	r4,1
 80032b8:	d8801d15 	stw	r2,116(sp)
 80032bc:	41000115 	stw	r4,4(r8)
 80032c0:	d8c01e15 	stw	r3,120(sp)
 80032c4:	10800208 	cmpgei	r2,r2,8
 80032c8:	1002fb1e 	bne	r2,zero,8003eb8 <___vfprintf_internal_r+0x12c0>
 80032cc:	42000204 	addi	r8,r8,8
 80032d0:	70000c26 	beq	r14,zero,8003304 <___vfprintf_internal_r+0x70c>
 80032d4:	d8801d17 	ldw	r2,116(sp)
 80032d8:	d9001584 	addi	r4,sp,86
 80032dc:	18c00084 	addi	r3,r3,2
 80032e0:	10800044 	addi	r2,r2,1
 80032e4:	41000015 	stw	r4,0(r8)
 80032e8:	01000084 	movi	r4,2
 80032ec:	d8801d15 	stw	r2,116(sp)
 80032f0:	41000115 	stw	r4,4(r8)
 80032f4:	d8c01e15 	stw	r3,120(sp)
 80032f8:	10800208 	cmpgei	r2,r2,8
 80032fc:	1002fc1e 	bne	r2,zero,8003ef0 <___vfprintf_internal_r+0x12f8>
 8003300:	42000204 	addi	r8,r8,8
 8003304:	6b402018 	cmpnei	r13,r13,128
 8003308:	6801cf26 	beq	r13,zero,8003a48 <___vfprintf_internal_r+0xe50>
 800330c:	5d0fc83a 	sub	r7,r11,r20
 8003310:	01c20616 	blt	zero,r7,8003b2c <___vfprintf_internal_r+0xf34>
 8003314:	9080400c 	andi	r2,r18,256
 8003318:	10017c1e 	bne	r2,zero,800390c <___vfprintf_internal_r+0xd14>
 800331c:	d8801d17 	ldw	r2,116(sp)
 8003320:	1d07883a 	add	r3,r3,r20
 8003324:	44400015 	stw	r17,0(r8)
 8003328:	10800044 	addi	r2,r2,1
 800332c:	d8801d15 	stw	r2,116(sp)
 8003330:	45000115 	stw	r20,4(r8)
 8003334:	d8c01e15 	stw	r3,120(sp)
 8003338:	10800208 	cmpgei	r2,r2,8
 800333c:	1002571e 	bne	r2,zero,8003c9c <___vfprintf_internal_r+0x10a4>
 8003340:	42000204 	addi	r8,r8,8
 8003344:	9480010c 	andi	r18,r18,4
 8003348:	90000226 	beq	r18,zero,8003354 <___vfprintf_internal_r+0x75c>
 800334c:	8563c83a 	sub	r17,r16,r21
 8003350:	04400916 	blt	zero,r17,8003378 <___vfprintf_internal_r+0x780>
 8003354:	8540010e 	bge	r16,r21,800335c <___vfprintf_internal_r+0x764>
 8003358:	a821883a 	mov	r16,r21
 800335c:	d8800417 	ldw	r2,16(sp)
 8003360:	1405883a 	add	r2,r2,r16
 8003364:	d8800415 	stw	r2,16(sp)
 8003368:	1802241e 	bne	r3,zero,8003bfc <___vfprintf_internal_r+0x1004>
 800336c:	d8001d15 	stw	zero,116(sp)
 8003370:	b811883a 	mov	r8,r23
 8003374:	003e5506 	br	8002ccc <___vfprintf_internal_r+0xd4>
 8003378:	03020074 	movhi	r12,2049
 800337c:	89000450 	cmplti	r4,r17,17
 8003380:	6307c784 	addi	r12,r12,7966
 8003384:	d8801d17 	ldw	r2,116(sp)
 8003388:	20001c1e 	bne	r4,zero,80033fc <___vfprintf_internal_r+0x804>
 800338c:	04800404 	movi	r18,16
 8003390:	dd000517 	ldw	r20,20(sp)
 8003394:	6039883a 	mov	fp,r12
 8003398:	00000406 	br	80033ac <___vfprintf_internal_r+0x7b4>
 800339c:	8c7ffc04 	addi	r17,r17,-16
 80033a0:	89000448 	cmpgei	r4,r17,17
 80033a4:	42000204 	addi	r8,r8,8
 80033a8:	20001326 	beq	r4,zero,80033f8 <___vfprintf_internal_r+0x800>
 80033ac:	10800044 	addi	r2,r2,1
 80033b0:	18c00404 	addi	r3,r3,16
 80033b4:	47000015 	stw	fp,0(r8)
 80033b8:	44800115 	stw	r18,4(r8)
 80033bc:	d8c01e15 	stw	r3,120(sp)
 80033c0:	d8801d15 	stw	r2,116(sp)
 80033c4:	11000208 	cmpgei	r4,r2,8
 80033c8:	203ff426 	beq	r4,zero,800339c <___vfprintf_internal_r+0x7a4>
 80033cc:	d9801c04 	addi	r6,sp,112
 80033d0:	980b883a 	mov	r5,r19
 80033d4:	a009883a 	mov	r4,r20
 80033d8:	800a1000 	call	800a100 <__sprint_r>
 80033dc:	103ee51e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 80033e0:	8c7ffc04 	addi	r17,r17,-16
 80033e4:	89000448 	cmpgei	r4,r17,17
 80033e8:	d8c01e17 	ldw	r3,120(sp)
 80033ec:	d8801d17 	ldw	r2,116(sp)
 80033f0:	b811883a 	mov	r8,r23
 80033f4:	203fed1e 	bne	r4,zero,80033ac <___vfprintf_internal_r+0x7b4>
 80033f8:	e019883a 	mov	r12,fp
 80033fc:	10800044 	addi	r2,r2,1
 8003400:	1c47883a 	add	r3,r3,r17
 8003404:	d8801d15 	stw	r2,116(sp)
 8003408:	43000015 	stw	r12,0(r8)
 800340c:	44400115 	stw	r17,4(r8)
 8003410:	d8c01e15 	stw	r3,120(sp)
 8003414:	10800210 	cmplti	r2,r2,8
 8003418:	103fce1e 	bne	r2,zero,8003354 <___vfprintf_internal_r+0x75c>
 800341c:	d9000517 	ldw	r4,20(sp)
 8003420:	d9801c04 	addi	r6,sp,112
 8003424:	980b883a 	mov	r5,r19
 8003428:	800a1000 	call	800a100 <__sprint_r>
 800342c:	103ed11e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003430:	d8c01e17 	ldw	r3,120(sp)
 8003434:	003fc706 	br	8003354 <___vfprintf_internal_r+0x75c>
 8003438:	21003fcc 	andi	r4,r4,255
 800343c:	2005de1e 	bne	r4,zero,8004bb8 <___vfprintf_internal_r+0x1fc0>
 8003440:	6080080c 	andi	r2,r12,32
 8003444:	1000ed1e 	bne	r2,zero,80037fc <___vfprintf_internal_r+0xc04>
 8003448:	d8800617 	ldw	r2,24(sp)
 800344c:	60c0040c 	andi	r3,r12,16
 8003450:	15400017 	ldw	r21,0(r2)
 8003454:	10800104 	addi	r2,r2,4
 8003458:	18001e1e 	bne	r3,zero,80034d4 <___vfprintf_internal_r+0x8dc>
 800345c:	60c0100c 	andi	r3,r12,64
 8003460:	1804e126 	beq	r3,zero,80047e8 <___vfprintf_internal_r+0x1bf0>
 8003464:	d8800615 	stw	r2,24(sp)
 8003468:	ad7fffcc 	andi	r21,r21,65535
 800346c:	0029883a 	mov	r20,zero
 8003470:	0005883a 	mov	r2,zero
 8003474:	0000bf06 	br	8003774 <___vfprintf_internal_r+0xb7c>
 8003478:	21003fcc 	andi	r4,r4,255
 800347c:	2005d01e 	bne	r4,zero,8004bc0 <___vfprintf_internal_r+0x1fc8>
 8003480:	d9000617 	ldw	r4,24(sp)
 8003484:	6080080c 	andi	r2,r12,32
 8003488:	20c00104 	addi	r3,r4,4
 800348c:	1003d81e 	bne	r2,zero,80043f0 <___vfprintf_internal_r+0x17f8>
 8003490:	6080040c 	andi	r2,r12,16
 8003494:	1004321e 	bne	r2,zero,8004560 <___vfprintf_internal_r+0x1968>
 8003498:	6300100c 	andi	r12,r12,64
 800349c:	60043026 	beq	r12,zero,8004560 <___vfprintf_internal_r+0x1968>
 80034a0:	d8800617 	ldw	r2,24(sp)
 80034a4:	d8c00615 	stw	r3,24(sp)
 80034a8:	d8c00417 	ldw	r3,16(sp)
 80034ac:	10800017 	ldw	r2,0(r2)
 80034b0:	10c0000d 	sth	r3,0(r2)
 80034b4:	003e0506 	br	8002ccc <___vfprintf_internal_r+0xd4>
 80034b8:	21003fcc 	andi	r4,r4,255
 80034bc:	2005c81e 	bne	r4,zero,8004be0 <___vfprintf_internal_r+0x1fe8>
 80034c0:	6080080c 	andi	r2,r12,32
 80034c4:	63000414 	ori	r12,r12,16
 80034c8:	1000cc1e 	bne	r2,zero,80037fc <___vfprintf_internal_r+0xc04>
 80034cc:	d8800617 	ldw	r2,24(sp)
 80034d0:	10800104 	addi	r2,r2,4
 80034d4:	d8c00617 	ldw	r3,24(sp)
 80034d8:	0029883a 	mov	r20,zero
 80034dc:	d8800615 	stw	r2,24(sp)
 80034e0:	1d400017 	ldw	r21,0(r3)
 80034e4:	0005883a 	mov	r2,zero
 80034e8:	0000a206 	br	8003774 <___vfprintf_internal_r+0xb7c>
 80034ec:	63000214 	ori	r12,r12,8
 80034f0:	b2800007 	ldb	r10,0(r22)
 80034f4:	003e1b06 	br	8002d64 <___vfprintf_internal_r+0x16c>
 80034f8:	21003fcc 	andi	r4,r4,255
 80034fc:	2005bc1e 	bne	r4,zero,8004bf0 <___vfprintf_internal_r+0x1ff8>
 8003500:	d8c00617 	ldw	r3,24(sp)
 8003504:	00a00034 	movhi	r2,32768
 8003508:	10bfffc4 	addi	r2,r2,-1
 800350c:	1d000117 	ldw	r20,4(r3)
 8003510:	1c800017 	ldw	r18,0(r3)
 8003514:	01dffc34 	movhi	r7,32752
 8003518:	a0a2703a 	and	r17,r20,r2
 800351c:	01bfffc4 	movi	r6,-1
 8003520:	18800204 	addi	r2,r3,8
 8003524:	39ffffc4 	addi	r7,r7,-1
 8003528:	9009883a 	mov	r4,r18
 800352c:	880b883a 	mov	r5,r17
 8003530:	da000f15 	stw	r8,60(sp)
 8003534:	dac00e15 	stw	r11,56(sp)
 8003538:	db000715 	stw	r12,28(sp)
 800353c:	dd000a15 	stw	r20,40(sp)
 8003540:	dc800915 	stw	r18,36(sp)
 8003544:	d8800615 	stw	r2,24(sp)
 8003548:	800f2000 	call	800f200 <__unorddf2>
 800354c:	db000717 	ldw	r12,28(sp)
 8003550:	dac00e17 	ldw	r11,56(sp)
 8003554:	da000f17 	ldw	r8,60(sp)
 8003558:	1003191e 	bne	r2,zero,80041c0 <___vfprintf_internal_r+0x15c8>
 800355c:	01dffc34 	movhi	r7,32752
 8003560:	01bfffc4 	movi	r6,-1
 8003564:	39ffffc4 	addi	r7,r7,-1
 8003568:	9009883a 	mov	r4,r18
 800356c:	880b883a 	mov	r5,r17
 8003570:	800dfc40 	call	800dfc4 <__ledf2>
 8003574:	db000717 	ldw	r12,28(sp)
 8003578:	dac00e17 	ldw	r11,56(sp)
 800357c:	da000f17 	ldw	r8,60(sp)
 8003580:	00830f0e 	bge	zero,r2,80041c0 <___vfprintf_internal_r+0x15c8>
 8003584:	000d883a 	mov	r6,zero
 8003588:	000f883a 	mov	r7,zero
 800358c:	9009883a 	mov	r4,r18
 8003590:	a00b883a 	mov	r5,r20
 8003594:	da000e15 	stw	r8,56(sp)
 8003598:	800dfc40 	call	800dfc4 <__ledf2>
 800359c:	db000717 	ldw	r12,28(sp)
 80035a0:	da000e17 	ldw	r8,56(sp)
 80035a4:	1004e716 	blt	r2,zero,8004944 <___vfprintf_internal_r+0x1d4c>
 80035a8:	db401543 	ldbu	r13,85(sp)
 80035ac:	e0801210 	cmplti	r2,fp,72
 80035b0:	1004d11e 	bne	r2,zero,80048f8 <___vfprintf_internal_r+0x1d00>
 80035b4:	04420074 	movhi	r17,2049
 80035b8:	8c47b404 	addi	r17,r17,7888
 80035bc:	04bfdfc4 	movi	r18,-129
 80035c0:	64a4703a 	and	r18,r12,r18
 80035c4:	054000c4 	movi	r21,3
 80035c8:	050000c4 	movi	r20,3
 80035cc:	0017883a 	mov	r11,zero
 80035d0:	d8000715 	stw	zero,28(sp)
 80035d4:	0000a306 	br	8003864 <___vfprintf_internal_r+0xc6c>
 80035d8:	21003fcc 	andi	r4,r4,255
 80035dc:	2005821e 	bne	r4,zero,8004be8 <___vfprintf_internal_r+0x1ff0>
 80035e0:	6080080c 	andi	r2,r12,32
 80035e4:	63000414 	ori	r12,r12,16
 80035e8:	10007d1e 	bne	r2,zero,80037e0 <___vfprintf_internal_r+0xbe8>
 80035ec:	d8800617 	ldw	r2,24(sp)
 80035f0:	10800104 	addi	r2,r2,4
 80035f4:	d8c00617 	ldw	r3,24(sp)
 80035f8:	1d400017 	ldw	r21,0(r3)
 80035fc:	d8800615 	stw	r2,24(sp)
 8003600:	a829d7fa 	srai	r20,r21,31
 8003604:	a005883a 	mov	r2,r20
 8003608:	103f020e 	bge	r2,zero,8003214 <___vfprintf_internal_r+0x61c>
 800360c:	056bc83a 	sub	r21,zero,r21
 8003610:	a804c03a 	cmpne	r2,r21,zero
 8003614:	0529c83a 	sub	r20,zero,r20
 8003618:	a0a9c83a 	sub	r20,r20,r2
 800361c:	00800b44 	movi	r2,45
 8003620:	d8801545 	stb	r2,85(sp)
 8003624:	58ffffe0 	cmpeqi	r3,r11,-1
 8003628:	03400b44 	movi	r13,45
 800362c:	00800044 	movi	r2,1
 8003630:	18005426 	beq	r3,zero,8003784 <___vfprintf_internal_r+0xb8c>
 8003634:	10c00060 	cmpeqi	r3,r2,1
 8003638:	18007e1e 	bne	r3,zero,8003834 <___vfprintf_internal_r+0xc3c>
 800363c:	108000a0 	cmpeqi	r2,r2,2
 8003640:	1002371e 	bne	r2,zero,8003f20 <___vfprintf_internal_r+0x1328>
 8003644:	b807883a 	mov	r3,r23
 8003648:	00000106 	br	8003650 <___vfprintf_internal_r+0xa58>
 800364c:	8807883a 	mov	r3,r17
 8003650:	a808d0fa 	srli	r4,r21,3
 8003654:	a00a977a 	slli	r5,r20,29
 8003658:	a028d0fa 	srli	r20,r20,3
 800365c:	ad4001cc 	andi	r21,r21,7
 8003660:	a8800c04 	addi	r2,r21,48
 8003664:	292ab03a 	or	r21,r5,r4
 8003668:	18bfffc5 	stb	r2,-1(r3)
 800366c:	ad08b03a 	or	r4,r21,r20
 8003670:	1c7fffc4 	addi	r17,r3,-1
 8003674:	203ff51e 	bne	r4,zero,800364c <___vfprintf_internal_r+0xa54>
 8003678:	6100004c 	andi	r4,r12,1
 800367c:	2000a026 	beq	r4,zero,8003900 <___vfprintf_internal_r+0xd08>
 8003680:	10803fcc 	andi	r2,r2,255
 8003684:	1080201c 	xori	r2,r2,128
 8003688:	10bfe004 	addi	r2,r2,-128
 800368c:	10800c18 	cmpnei	r2,r2,48
 8003690:	10009b26 	beq	r2,zero,8003900 <___vfprintf_internal_r+0xd08>
 8003694:	18ffff84 	addi	r3,r3,-2
 8003698:	00800c04 	movi	r2,48
 800369c:	88bfffc5 	stb	r2,-1(r17)
 80036a0:	b8e9c83a 	sub	r20,r23,r3
 80036a4:	6025883a 	mov	r18,r12
 80036a8:	1823883a 	mov	r17,r3
 80036ac:	00006906 	br	8003854 <___vfprintf_internal_r+0xc5c>
 80036b0:	21003fcc 	andi	r4,r4,255
 80036b4:	20053e1e 	bne	r4,zero,8004bb0 <___vfprintf_internal_r+0x1fb8>
 80036b8:	00820074 	movhi	r2,2049
 80036bc:	1087b704 	addi	r2,r2,7900
 80036c0:	d8800c15 	stw	r2,48(sp)
 80036c4:	6080080c 	andi	r2,r12,32
 80036c8:	103e901e 	bne	r2,zero,800310c <___vfprintf_internal_r+0x514>
 80036cc:	d8c00617 	ldw	r3,24(sp)
 80036d0:	6080040c 	andi	r2,r12,16
 80036d4:	1d400017 	ldw	r21,0(r3)
 80036d8:	18c00104 	addi	r3,r3,4
 80036dc:	d8c00615 	stw	r3,24(sp)
 80036e0:	1002b11e 	bne	r2,zero,80041a8 <___vfprintf_internal_r+0x15b0>
 80036e4:	6080100c 	andi	r2,r12,64
 80036e8:	1002af26 	beq	r2,zero,80041a8 <___vfprintf_internal_r+0x15b0>
 80036ec:	ad7fffcc 	andi	r21,r21,65535
 80036f0:	0029883a 	mov	r20,zero
 80036f4:	003e8a06 	br	8003120 <___vfprintf_internal_r+0x528>
 80036f8:	21003fcc 	andi	r4,r4,255
 80036fc:	20053e1e 	bne	r4,zero,8004bf8 <___vfprintf_internal_r+0x2000>
 8003700:	6080080c 	andi	r2,r12,32
 8003704:	63000414 	ori	r12,r12,16
 8003708:	1000431e 	bne	r2,zero,8003818 <___vfprintf_internal_r+0xc20>
 800370c:	d8800617 	ldw	r2,24(sp)
 8003710:	10800104 	addi	r2,r2,4
 8003714:	d8c00617 	ldw	r3,24(sp)
 8003718:	0029883a 	mov	r20,zero
 800371c:	d8800615 	stw	r2,24(sp)
 8003720:	1d400017 	ldw	r21,0(r3)
 8003724:	00800044 	movi	r2,1
 8003728:	00001206 	br	8003774 <___vfprintf_internal_r+0xb7c>
 800372c:	63000814 	ori	r12,r12,32
 8003730:	b2800007 	ldb	r10,0(r22)
 8003734:	003d8b06 	br	8002d64 <___vfprintf_internal_r+0x16c>
 8003738:	d8c00617 	ldw	r3,24(sp)
 800373c:	00800c04 	movi	r2,48
 8003740:	d8801585 	stb	r2,86(sp)
 8003744:	00801e04 	movi	r2,120
 8003748:	01020074 	movhi	r4,2049
 800374c:	d88015c5 	stb	r2,87(sp)
 8003750:	1d400017 	ldw	r21,0(r3)
 8003754:	18800104 	addi	r2,r3,4
 8003758:	d8800615 	stw	r2,24(sp)
 800375c:	2087bc04 	addi	r2,r4,7920
 8003760:	d8800c15 	stw	r2,48(sp)
 8003764:	0029883a 	mov	r20,zero
 8003768:	63000094 	ori	r12,r12,2
 800376c:	00800084 	movi	r2,2
 8003770:	07001e04 	movi	fp,120
 8003774:	d8001545 	stb	zero,85(sp)
 8003778:	58ffffe0 	cmpeqi	r3,r11,-1
 800377c:	001b883a 	mov	r13,zero
 8003780:	183fac1e 	bne	r3,zero,8003634 <___vfprintf_internal_r+0xa3c>
 8003784:	04bfdfc4 	movi	r18,-129
 8003788:	ad06b03a 	or	r3,r21,r20
 800378c:	64a4703a 	and	r18,r12,r18
 8003790:	18018d1e 	bne	r3,zero,8003dc8 <___vfprintf_internal_r+0x11d0>
 8003794:	5803bb1e 	bne	r11,zero,8004684 <___vfprintf_internal_r+0x1a8c>
 8003798:	103ea71e 	bne	r2,zero,8003238 <___vfprintf_internal_r+0x640>
 800379c:	6500004c 	andi	r20,r12,1
 80037a0:	a0028526 	beq	r20,zero,80041b8 <___vfprintf_internal_r+0x15c0>
 80037a4:	00800c04 	movi	r2,48
 80037a8:	d88028c5 	stb	r2,163(sp)
 80037ac:	dc4028c4 	addi	r17,sp,163
 80037b0:	00002806 	br	8003854 <___vfprintf_internal_r+0xc5c>
 80037b4:	b2800007 	ldb	r10,0(r22)
 80037b8:	50801b18 	cmpnei	r2,r10,108
 80037bc:	10032c26 	beq	r2,zero,8004470 <___vfprintf_internal_r+0x1878>
 80037c0:	63000414 	ori	r12,r12,16
 80037c4:	003d6706 	br	8002d64 <___vfprintf_internal_r+0x16c>
 80037c8:	63001014 	ori	r12,r12,64
 80037cc:	b2800007 	ldb	r10,0(r22)
 80037d0:	003d6406 	br	8002d64 <___vfprintf_internal_r+0x16c>
 80037d4:	d9000517 	ldw	r4,20(sp)
 80037d8:	8006e700 	call	8006e70 <__sinit>
 80037dc:	003d1f06 	br	8002c5c <___vfprintf_internal_r+0x64>
 80037e0:	d8c00617 	ldw	r3,24(sp)
 80037e4:	18800117 	ldw	r2,4(r3)
 80037e8:	1d400017 	ldw	r21,0(r3)
 80037ec:	18c00204 	addi	r3,r3,8
 80037f0:	d8c00615 	stw	r3,24(sp)
 80037f4:	1029883a 	mov	r20,r2
 80037f8:	003e8506 	br	8003210 <___vfprintf_internal_r+0x618>
 80037fc:	d8c00617 	ldw	r3,24(sp)
 8003800:	0005883a 	mov	r2,zero
 8003804:	1d400017 	ldw	r21,0(r3)
 8003808:	1d000117 	ldw	r20,4(r3)
 800380c:	18c00204 	addi	r3,r3,8
 8003810:	d8c00615 	stw	r3,24(sp)
 8003814:	003fd706 	br	8003774 <___vfprintf_internal_r+0xb7c>
 8003818:	d8c00617 	ldw	r3,24(sp)
 800381c:	00800044 	movi	r2,1
 8003820:	1d400017 	ldw	r21,0(r3)
 8003824:	1d000117 	ldw	r20,4(r3)
 8003828:	18c00204 	addi	r3,r3,8
 800382c:	d8c00615 	stw	r3,24(sp)
 8003830:	003fd006 	br	8003774 <___vfprintf_internal_r+0xb7c>
 8003834:	a000111e 	bne	r20,zero,800387c <___vfprintf_internal_r+0xc84>
 8003838:	a88002a8 	cmpgeui	r2,r21,10
 800383c:	10000f1e 	bne	r2,zero,800387c <___vfprintf_internal_r+0xc84>
 8003840:	ad400c04 	addi	r21,r21,48
 8003844:	dd4028c5 	stb	r21,163(sp)
 8003848:	6025883a 	mov	r18,r12
 800384c:	05000044 	movi	r20,1
 8003850:	dc4028c4 	addi	r17,sp,163
 8003854:	582b883a 	mov	r21,r11
 8003858:	5d00010e 	bge	r11,r20,8003860 <___vfprintf_internal_r+0xc68>
 800385c:	a02b883a 	mov	r21,r20
 8003860:	d8000715 	stw	zero,28(sp)
 8003864:	6b403fcc 	andi	r13,r13,255
 8003868:	6b40201c 	xori	r13,r13,128
 800386c:	6b7fe004 	addi	r13,r13,-128
 8003870:	683e8126 	beq	r13,zero,8003278 <___vfprintf_internal_r+0x680>
 8003874:	ad400044 	addi	r21,r21,1
 8003878:	003e7f06 	br	8003278 <___vfprintf_internal_r+0x680>
 800387c:	dc000e15 	stw	r16,56(sp)
 8003880:	b823883a 	mov	r17,r23
 8003884:	a021883a 	mov	r16,r20
 8003888:	db000715 	stw	r12,28(sp)
 800388c:	9829883a 	mov	r20,r19
 8003890:	dac00f15 	stw	r11,60(sp)
 8003894:	4025883a 	mov	r18,r8
 8003898:	6827883a 	mov	r19,r13
 800389c:	00000206 	br	80038a8 <___vfprintf_internal_r+0xcb0>
 80038a0:	102b883a 	mov	r21,r2
 80038a4:	1821883a 	mov	r16,r3
 80038a8:	a809883a 	mov	r4,r21
 80038ac:	800b883a 	mov	r5,r16
 80038b0:	01800284 	movi	r6,10
 80038b4:	000f883a 	mov	r7,zero
 80038b8:	800c5880 	call	800c588 <__umoddi3>
 80038bc:	10800c04 	addi	r2,r2,48
 80038c0:	8c7fffc4 	addi	r17,r17,-1
 80038c4:	a809883a 	mov	r4,r21
 80038c8:	800b883a 	mov	r5,r16
 80038cc:	88800005 	stb	r2,0(r17)
 80038d0:	01800284 	movi	r6,10
 80038d4:	000f883a 	mov	r7,zero
 80038d8:	800bf6c0 	call	800bf6c <__udivdi3>
 80038dc:	803ff01e 	bne	r16,zero,80038a0 <___vfprintf_internal_r+0xca8>
 80038e0:	ad4002a8 	cmpgeui	r21,r21,10
 80038e4:	a83fee1e 	bne	r21,zero,80038a0 <___vfprintf_internal_r+0xca8>
 80038e8:	db000717 	ldw	r12,28(sp)
 80038ec:	dc000e17 	ldw	r16,56(sp)
 80038f0:	dac00f17 	ldw	r11,60(sp)
 80038f4:	981b883a 	mov	r13,r19
 80038f8:	9011883a 	mov	r8,r18
 80038fc:	a027883a 	mov	r19,r20
 8003900:	bc69c83a 	sub	r20,r23,r17
 8003904:	6025883a 	mov	r18,r12
 8003908:	003fd206 	br	8003854 <___vfprintf_internal_r+0xc5c>
 800390c:	e2801990 	cmplti	r10,fp,102
 8003910:	5000ea1e 	bne	r10,zero,8003cbc <___vfprintf_internal_r+0x10c4>
 8003914:	d9000917 	ldw	r4,36(sp)
 8003918:	d9400a17 	ldw	r5,40(sp)
 800391c:	000d883a 	mov	r6,zero
 8003920:	000f883a 	mov	r7,zero
 8003924:	da000f15 	stw	r8,60(sp)
 8003928:	d8c00e15 	stw	r3,56(sp)
 800392c:	800de540 	call	800de54 <__eqdf2>
 8003930:	d8c00e17 	ldw	r3,56(sp)
 8003934:	da000f17 	ldw	r8,60(sp)
 8003938:	1001891e 	bne	r2,zero,8003f60 <___vfprintf_internal_r+0x1368>
 800393c:	d8801d17 	ldw	r2,116(sp)
 8003940:	01020074 	movhi	r4,2049
 8003944:	2107c304 	addi	r4,r4,7948
 8003948:	10800044 	addi	r2,r2,1
 800394c:	18c00044 	addi	r3,r3,1
 8003950:	41000015 	stw	r4,0(r8)
 8003954:	01000044 	movi	r4,1
 8003958:	d8801d15 	stw	r2,116(sp)
 800395c:	41000115 	stw	r4,4(r8)
 8003960:	d8c01e15 	stw	r3,120(sp)
 8003964:	10800208 	cmpgei	r2,r2,8
 8003968:	1003351e 	bne	r2,zero,8004640 <___vfprintf_internal_r+0x1a48>
 800396c:	42000204 	addi	r8,r8,8
 8003970:	d8801617 	ldw	r2,88(sp)
 8003974:	d8c00817 	ldw	r3,32(sp)
 8003978:	10c00416 	blt	r2,r3,800398c <___vfprintf_internal_r+0xd94>
 800397c:	9080004c 	andi	r2,r18,1
 8003980:	1000021e 	bne	r2,zero,800398c <___vfprintf_internal_r+0xd94>
 8003984:	d8c01e17 	ldw	r3,120(sp)
 8003988:	003e6e06 	br	8003344 <___vfprintf_internal_r+0x74c>
 800398c:	d8800d17 	ldw	r2,52(sp)
 8003990:	d8c01e17 	ldw	r3,120(sp)
 8003994:	d9000b17 	ldw	r4,44(sp)
 8003998:	40800015 	stw	r2,0(r8)
 800399c:	d8801d17 	ldw	r2,116(sp)
 80039a0:	20c7883a 	add	r3,r4,r3
 80039a4:	41000115 	stw	r4,4(r8)
 80039a8:	10800044 	addi	r2,r2,1
 80039ac:	d8801d15 	stw	r2,116(sp)
 80039b0:	d8c01e15 	stw	r3,120(sp)
 80039b4:	10800208 	cmpgei	r2,r2,8
 80039b8:	1002b41e 	bne	r2,zero,800448c <___vfprintf_internal_r+0x1894>
 80039bc:	42000204 	addi	r8,r8,8
 80039c0:	d8800817 	ldw	r2,32(sp)
 80039c4:	147fffc4 	addi	r17,r2,-1
 80039c8:	047e5e0e 	bge	zero,r17,8003344 <___vfprintf_internal_r+0x74c>
 80039cc:	03020074 	movhi	r12,2049
 80039d0:	89000450 	cmplti	r4,r17,17
 80039d4:	6307c384 	addi	r12,r12,7950
 80039d8:	d8801d17 	ldw	r2,116(sp)
 80039dc:	2003791e 	bne	r4,zero,80047c4 <___vfprintf_internal_r+0x1bcc>
 80039e0:	dc000715 	stw	r16,28(sp)
 80039e4:	05000404 	movi	r20,16
 80039e8:	df000517 	ldw	fp,20(sp)
 80039ec:	6021883a 	mov	r16,r12
 80039f0:	00000406 	br	8003a04 <___vfprintf_internal_r+0xe0c>
 80039f4:	42000204 	addi	r8,r8,8
 80039f8:	8c7ffc04 	addi	r17,r17,-16
 80039fc:	89000448 	cmpgei	r4,r17,17
 8003a00:	20036e26 	beq	r4,zero,80047bc <___vfprintf_internal_r+0x1bc4>
 8003a04:	10800044 	addi	r2,r2,1
 8003a08:	18c00404 	addi	r3,r3,16
 8003a0c:	44000015 	stw	r16,0(r8)
 8003a10:	45000115 	stw	r20,4(r8)
 8003a14:	d8c01e15 	stw	r3,120(sp)
 8003a18:	d8801d15 	stw	r2,116(sp)
 8003a1c:	11000208 	cmpgei	r4,r2,8
 8003a20:	203ff426 	beq	r4,zero,80039f4 <___vfprintf_internal_r+0xdfc>
 8003a24:	d9801c04 	addi	r6,sp,112
 8003a28:	980b883a 	mov	r5,r19
 8003a2c:	e009883a 	mov	r4,fp
 8003a30:	800a1000 	call	800a100 <__sprint_r>
 8003a34:	103d4f1e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003a38:	d8c01e17 	ldw	r3,120(sp)
 8003a3c:	d8801d17 	ldw	r2,116(sp)
 8003a40:	b811883a 	mov	r8,r23
 8003a44:	003fec06 	br	80039f8 <___vfprintf_internal_r+0xe00>
 8003a48:	854fc83a 	sub	r7,r16,r21
 8003a4c:	01fe2f0e 	bge	zero,r7,800330c <___vfprintf_internal_r+0x714>
 8003a50:	03020074 	movhi	r12,2049
 8003a54:	39000450 	cmplti	r4,r7,17
 8003a58:	6307c384 	addi	r12,r12,7950
 8003a5c:	d8801d17 	ldw	r2,116(sp)
 8003a60:	2000271e 	bne	r4,zero,8003b00 <___vfprintf_internal_r+0xf08>
 8003a64:	dc400e15 	stw	r17,56(sp)
 8003a68:	dc800f15 	stw	r18,60(sp)
 8003a6c:	dc001015 	stw	r16,64(sp)
 8003a70:	03400404 	movi	r13,16
 8003a74:	3821883a 	mov	r16,r7
 8003a78:	dac01215 	stw	r11,72(sp)
 8003a7c:	dc400517 	ldw	r17,20(sp)
 8003a80:	6025883a 	mov	r18,r12
 8003a84:	00000406 	br	8003a98 <___vfprintf_internal_r+0xea0>
 8003a88:	843ffc04 	addi	r16,r16,-16
 8003a8c:	81000448 	cmpgei	r4,r16,17
 8003a90:	42000204 	addi	r8,r8,8
 8003a94:	20001426 	beq	r4,zero,8003ae8 <___vfprintf_internal_r+0xef0>
 8003a98:	10800044 	addi	r2,r2,1
 8003a9c:	18c00404 	addi	r3,r3,16
 8003aa0:	44800015 	stw	r18,0(r8)
 8003aa4:	43400115 	stw	r13,4(r8)
 8003aa8:	d8c01e15 	stw	r3,120(sp)
 8003aac:	d8801d15 	stw	r2,116(sp)
 8003ab0:	11000208 	cmpgei	r4,r2,8
 8003ab4:	203ff426 	beq	r4,zero,8003a88 <___vfprintf_internal_r+0xe90>
 8003ab8:	d9801c04 	addi	r6,sp,112
 8003abc:	980b883a 	mov	r5,r19
 8003ac0:	8809883a 	mov	r4,r17
 8003ac4:	800a1000 	call	800a100 <__sprint_r>
 8003ac8:	103d2a1e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003acc:	843ffc04 	addi	r16,r16,-16
 8003ad0:	81000448 	cmpgei	r4,r16,17
 8003ad4:	d8c01e17 	ldw	r3,120(sp)
 8003ad8:	d8801d17 	ldw	r2,116(sp)
 8003adc:	b811883a 	mov	r8,r23
 8003ae0:	03400404 	movi	r13,16
 8003ae4:	203fec1e 	bne	r4,zero,8003a98 <___vfprintf_internal_r+0xea0>
 8003ae8:	800f883a 	mov	r7,r16
 8003aec:	9019883a 	mov	r12,r18
 8003af0:	dc400e17 	ldw	r17,56(sp)
 8003af4:	dc001017 	ldw	r16,64(sp)
 8003af8:	dac01217 	ldw	r11,72(sp)
 8003afc:	dc800f17 	ldw	r18,60(sp)
 8003b00:	10800044 	addi	r2,r2,1
 8003b04:	19c7883a 	add	r3,r3,r7
 8003b08:	d8801d15 	stw	r2,116(sp)
 8003b0c:	43000015 	stw	r12,0(r8)
 8003b10:	41c00115 	stw	r7,4(r8)
 8003b14:	d8c01e15 	stw	r3,120(sp)
 8003b18:	10800208 	cmpgei	r2,r2,8
 8003b1c:	1002cf1e 	bne	r2,zero,800465c <___vfprintf_internal_r+0x1a64>
 8003b20:	5d0fc83a 	sub	r7,r11,r20
 8003b24:	42000204 	addi	r8,r8,8
 8003b28:	01fdfa0e 	bge	zero,r7,8003314 <___vfprintf_internal_r+0x71c>
 8003b2c:	03020074 	movhi	r12,2049
 8003b30:	39000450 	cmplti	r4,r7,17
 8003b34:	6307c384 	addi	r12,r12,7950
 8003b38:	d8801d17 	ldw	r2,116(sp)
 8003b3c:	2000251e 	bne	r4,zero,8003bd4 <___vfprintf_internal_r+0xfdc>
 8003b40:	dc400e15 	stw	r17,56(sp)
 8003b44:	dc800f15 	stw	r18,60(sp)
 8003b48:	dc001015 	stw	r16,64(sp)
 8003b4c:	02c00404 	movi	r11,16
 8003b50:	3821883a 	mov	r16,r7
 8003b54:	dc400517 	ldw	r17,20(sp)
 8003b58:	6025883a 	mov	r18,r12
 8003b5c:	00000406 	br	8003b70 <___vfprintf_internal_r+0xf78>
 8003b60:	843ffc04 	addi	r16,r16,-16
 8003b64:	81000448 	cmpgei	r4,r16,17
 8003b68:	42000204 	addi	r8,r8,8
 8003b6c:	20001426 	beq	r4,zero,8003bc0 <___vfprintf_internal_r+0xfc8>
 8003b70:	10800044 	addi	r2,r2,1
 8003b74:	18c00404 	addi	r3,r3,16
 8003b78:	44800015 	stw	r18,0(r8)
 8003b7c:	42c00115 	stw	r11,4(r8)
 8003b80:	d8c01e15 	stw	r3,120(sp)
 8003b84:	d8801d15 	stw	r2,116(sp)
 8003b88:	11000208 	cmpgei	r4,r2,8
 8003b8c:	203ff426 	beq	r4,zero,8003b60 <___vfprintf_internal_r+0xf68>
 8003b90:	d9801c04 	addi	r6,sp,112
 8003b94:	980b883a 	mov	r5,r19
 8003b98:	8809883a 	mov	r4,r17
 8003b9c:	800a1000 	call	800a100 <__sprint_r>
 8003ba0:	103cf41e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003ba4:	843ffc04 	addi	r16,r16,-16
 8003ba8:	81000448 	cmpgei	r4,r16,17
 8003bac:	d8c01e17 	ldw	r3,120(sp)
 8003bb0:	d8801d17 	ldw	r2,116(sp)
 8003bb4:	b811883a 	mov	r8,r23
 8003bb8:	02c00404 	movi	r11,16
 8003bbc:	203fec1e 	bne	r4,zero,8003b70 <___vfprintf_internal_r+0xf78>
 8003bc0:	800f883a 	mov	r7,r16
 8003bc4:	9019883a 	mov	r12,r18
 8003bc8:	dc400e17 	ldw	r17,56(sp)
 8003bcc:	dc001017 	ldw	r16,64(sp)
 8003bd0:	dc800f17 	ldw	r18,60(sp)
 8003bd4:	10800044 	addi	r2,r2,1
 8003bd8:	19c7883a 	add	r3,r3,r7
 8003bdc:	d8801d15 	stw	r2,116(sp)
 8003be0:	43000015 	stw	r12,0(r8)
 8003be4:	41c00115 	stw	r7,4(r8)
 8003be8:	d8c01e15 	stw	r3,120(sp)
 8003bec:	10800208 	cmpgei	r2,r2,8
 8003bf0:	1001651e 	bne	r2,zero,8004188 <___vfprintf_internal_r+0x1590>
 8003bf4:	42000204 	addi	r8,r8,8
 8003bf8:	003dc606 	br	8003314 <___vfprintf_internal_r+0x71c>
 8003bfc:	d9000517 	ldw	r4,20(sp)
 8003c00:	d9801c04 	addi	r6,sp,112
 8003c04:	980b883a 	mov	r5,r19
 8003c08:	800a1000 	call	800a100 <__sprint_r>
 8003c0c:	103dd726 	beq	r2,zero,800336c <___vfprintf_internal_r+0x774>
 8003c10:	003cd806 	br	8002f74 <___vfprintf_internal_r+0x37c>
 8003c14:	d9000517 	ldw	r4,20(sp)
 8003c18:	d9801c04 	addi	r6,sp,112
 8003c1c:	980b883a 	mov	r5,r19
 8003c20:	800a1000 	call	800a100 <__sprint_r>
 8003c24:	103cd31e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003c28:	d9001617 	ldw	r4,88(sp)
 8003c2c:	d8c01e17 	ldw	r3,120(sp)
 8003c30:	b811883a 	mov	r8,r23
 8003c34:	2002971e 	bne	r4,zero,8004694 <___vfprintf_internal_r+0x1a9c>
 8003c38:	d9000817 	ldw	r4,32(sp)
 8003c3c:	9080004c 	andi	r2,r18,1
 8003c40:	1104b03a 	or	r2,r2,r4
 8003c44:	103dbf26 	beq	r2,zero,8003344 <___vfprintf_internal_r+0x74c>
 8003c48:	d8800d17 	ldw	r2,52(sp)
 8003c4c:	d9000b17 	ldw	r4,44(sp)
 8003c50:	40800015 	stw	r2,0(r8)
 8003c54:	d8801d17 	ldw	r2,116(sp)
 8003c58:	20c7883a 	add	r3,r4,r3
 8003c5c:	41000115 	stw	r4,4(r8)
 8003c60:	10800044 	addi	r2,r2,1
 8003c64:	d8c01e15 	stw	r3,120(sp)
 8003c68:	d8801d15 	stw	r2,116(sp)
 8003c6c:	11000208 	cmpgei	r4,r2,8
 8003c70:	2003691e 	bne	r4,zero,8004a18 <___vfprintf_internal_r+0x1e20>
 8003c74:	42000204 	addi	r8,r8,8
 8003c78:	d9000817 	ldw	r4,32(sp)
 8003c7c:	10800044 	addi	r2,r2,1
 8003c80:	d8801d15 	stw	r2,116(sp)
 8003c84:	20c7883a 	add	r3,r4,r3
 8003c88:	44400015 	stw	r17,0(r8)
 8003c8c:	41000115 	stw	r4,4(r8)
 8003c90:	d8c01e15 	stw	r3,120(sp)
 8003c94:	10800208 	cmpgei	r2,r2,8
 8003c98:	103da926 	beq	r2,zero,8003340 <___vfprintf_internal_r+0x748>
 8003c9c:	d9000517 	ldw	r4,20(sp)
 8003ca0:	d9801c04 	addi	r6,sp,112
 8003ca4:	980b883a 	mov	r5,r19
 8003ca8:	800a1000 	call	800a100 <__sprint_r>
 8003cac:	103cb11e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003cb0:	d8c01e17 	ldw	r3,120(sp)
 8003cb4:	b811883a 	mov	r8,r23
 8003cb8:	003da206 	br	8003344 <___vfprintf_internal_r+0x74c>
 8003cbc:	d8800817 	ldw	r2,32(sp)
 8003cc0:	da801d17 	ldw	r10,116(sp)
 8003cc4:	18c00044 	addi	r3,r3,1
 8003cc8:	10800088 	cmpgei	r2,r2,2
 8003ccc:	55000044 	addi	r20,r10,1
 8003cd0:	47000204 	addi	fp,r8,8
 8003cd4:	1000fb26 	beq	r2,zero,80040c4 <___vfprintf_internal_r+0x14cc>
 8003cd8:	00800044 	movi	r2,1
 8003cdc:	40800115 	stw	r2,4(r8)
 8003ce0:	44400015 	stw	r17,0(r8)
 8003ce4:	d8c01e15 	stw	r3,120(sp)
 8003ce8:	dd001d15 	stw	r20,116(sp)
 8003cec:	a0800210 	cmplti	r2,r20,8
 8003cf0:	10022e26 	beq	r2,zero,80045ac <___vfprintf_internal_r+0x19b4>
 8003cf4:	d8800b17 	ldw	r2,44(sp)
 8003cf8:	d9000d17 	ldw	r4,52(sp)
 8003cfc:	a5000044 	addi	r20,r20,1
 8003d00:	1887883a 	add	r3,r3,r2
 8003d04:	e0800115 	stw	r2,4(fp)
 8003d08:	e1000015 	stw	r4,0(fp)
 8003d0c:	d8c01e15 	stw	r3,120(sp)
 8003d10:	dd001d15 	stw	r20,116(sp)
 8003d14:	a0800208 	cmpgei	r2,r20,8
 8003d18:	10021b1e 	bne	r2,zero,8004588 <___vfprintf_internal_r+0x1990>
 8003d1c:	e7000204 	addi	fp,fp,8
 8003d20:	d8800817 	ldw	r2,32(sp)
 8003d24:	d9000917 	ldw	r4,36(sp)
 8003d28:	d9400a17 	ldw	r5,40(sp)
 8003d2c:	a2800044 	addi	r10,r20,1
 8003d30:	e2000204 	addi	r8,fp,8
 8003d34:	12ffffc4 	addi	r11,r2,-1
 8003d38:	000d883a 	mov	r6,zero
 8003d3c:	000f883a 	mov	r7,zero
 8003d40:	d8c01215 	stw	r3,72(sp)
 8003d44:	da801015 	stw	r10,64(sp)
 8003d48:	da800f15 	stw	r10,60(sp)
 8003d4c:	da000e15 	stw	r8,56(sp)
 8003d50:	dac00715 	stw	r11,28(sp)
 8003d54:	800de540 	call	800de54 <__eqdf2>
 8003d58:	dac00717 	ldw	r11,28(sp)
 8003d5c:	da000e17 	ldw	r8,56(sp)
 8003d60:	db400f17 	ldw	r13,60(sp)
 8003d64:	da801017 	ldw	r10,64(sp)
 8003d68:	d8c01217 	ldw	r3,72(sp)
 8003d6c:	1000e126 	beq	r2,zero,80040f4 <___vfprintf_internal_r+0x14fc>
 8003d70:	8c400044 	addi	r17,r17,1
 8003d74:	1ac7883a 	add	r3,r3,r11
 8003d78:	da801d15 	stw	r10,116(sp)
 8003d7c:	e4400015 	stw	r17,0(fp)
 8003d80:	e2c00115 	stw	r11,4(fp)
 8003d84:	d8c01e15 	stw	r3,120(sp)
 8003d88:	52800208 	cmpgei	r10,r10,8
 8003d8c:	5001ad1e 	bne	r10,zero,8004444 <___vfprintf_internal_r+0x184c>
 8003d90:	e0800404 	addi	r2,fp,16
 8003d94:	a2800084 	addi	r10,r20,2
 8003d98:	4039883a 	mov	fp,r8
 8003d9c:	1011883a 	mov	r8,r2
 8003da0:	d9001117 	ldw	r4,68(sp)
 8003da4:	d8801844 	addi	r2,sp,97
 8003da8:	da801d15 	stw	r10,116(sp)
 8003dac:	20c7883a 	add	r3,r4,r3
 8003db0:	e0800015 	stw	r2,0(fp)
 8003db4:	e1000115 	stw	r4,4(fp)
 8003db8:	d8c01e15 	stw	r3,120(sp)
 8003dbc:	52800210 	cmplti	r10,r10,8
 8003dc0:	503d601e 	bne	r10,zero,8003344 <___vfprintf_internal_r+0x74c>
 8003dc4:	003fb506 	br	8003c9c <___vfprintf_internal_r+0x10a4>
 8003dc8:	9019883a 	mov	r12,r18
 8003dcc:	003e1906 	br	8003634 <___vfprintf_internal_r+0xa3c>
 8003dd0:	03020074 	movhi	r12,2049
 8003dd4:	39000450 	cmplti	r4,r7,17
 8003dd8:	6307c784 	addi	r12,r12,7966
 8003ddc:	d8801d17 	ldw	r2,116(sp)
 8003de0:	20002b1e 	bne	r4,zero,8003e90 <___vfprintf_internal_r+0x1298>
 8003de4:	dc401015 	stw	r17,64(sp)
 8003de8:	dc801215 	stw	r18,72(sp)
 8003dec:	dc001315 	stw	r16,76(sp)
 8003df0:	03c00404 	movi	r15,16
 8003df4:	db800e15 	stw	r14,56(sp)
 8003df8:	db400f15 	stw	r13,60(sp)
 8003dfc:	dac01415 	stw	r11,80(sp)
 8003e00:	3821883a 	mov	r16,r7
 8003e04:	dc400517 	ldw	r17,20(sp)
 8003e08:	6025883a 	mov	r18,r12
 8003e0c:	00000406 	br	8003e20 <___vfprintf_internal_r+0x1228>
 8003e10:	843ffc04 	addi	r16,r16,-16
 8003e14:	81000448 	cmpgei	r4,r16,17
 8003e18:	42000204 	addi	r8,r8,8
 8003e1c:	20001426 	beq	r4,zero,8003e70 <___vfprintf_internal_r+0x1278>
 8003e20:	10800044 	addi	r2,r2,1
 8003e24:	18c00404 	addi	r3,r3,16
 8003e28:	44800015 	stw	r18,0(r8)
 8003e2c:	43c00115 	stw	r15,4(r8)
 8003e30:	d8c01e15 	stw	r3,120(sp)
 8003e34:	d8801d15 	stw	r2,116(sp)
 8003e38:	11000208 	cmpgei	r4,r2,8
 8003e3c:	203ff426 	beq	r4,zero,8003e10 <___vfprintf_internal_r+0x1218>
 8003e40:	d9801c04 	addi	r6,sp,112
 8003e44:	980b883a 	mov	r5,r19
 8003e48:	8809883a 	mov	r4,r17
 8003e4c:	800a1000 	call	800a100 <__sprint_r>
 8003e50:	103c481e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003e54:	843ffc04 	addi	r16,r16,-16
 8003e58:	81000448 	cmpgei	r4,r16,17
 8003e5c:	d8c01e17 	ldw	r3,120(sp)
 8003e60:	d8801d17 	ldw	r2,116(sp)
 8003e64:	b811883a 	mov	r8,r23
 8003e68:	03c00404 	movi	r15,16
 8003e6c:	203fec1e 	bne	r4,zero,8003e20 <___vfprintf_internal_r+0x1228>
 8003e70:	800f883a 	mov	r7,r16
 8003e74:	9019883a 	mov	r12,r18
 8003e78:	db800e17 	ldw	r14,56(sp)
 8003e7c:	db400f17 	ldw	r13,60(sp)
 8003e80:	dc401017 	ldw	r17,64(sp)
 8003e84:	dac01417 	ldw	r11,80(sp)
 8003e88:	dc001317 	ldw	r16,76(sp)
 8003e8c:	dc801217 	ldw	r18,72(sp)
 8003e90:	10800044 	addi	r2,r2,1
 8003e94:	19c7883a 	add	r3,r3,r7
 8003e98:	d8801d15 	stw	r2,116(sp)
 8003e9c:	43000015 	stw	r12,0(r8)
 8003ea0:	41c00115 	stw	r7,4(r8)
 8003ea4:	d8c01e15 	stw	r3,120(sp)
 8003ea8:	10800208 	cmpgei	r2,r2,8
 8003eac:	1001d61e 	bne	r2,zero,8004608 <___vfprintf_internal_r+0x1a10>
 8003eb0:	42000204 	addi	r8,r8,8
 8003eb4:	003cf806 	br	8003298 <___vfprintf_internal_r+0x6a0>
 8003eb8:	d9000517 	ldw	r4,20(sp)
 8003ebc:	d9801c04 	addi	r6,sp,112
 8003ec0:	980b883a 	mov	r5,r19
 8003ec4:	dac01015 	stw	r11,64(sp)
 8003ec8:	db400f15 	stw	r13,60(sp)
 8003ecc:	db800e15 	stw	r14,56(sp)
 8003ed0:	800a1000 	call	800a100 <__sprint_r>
 8003ed4:	103c271e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003ed8:	d8c01e17 	ldw	r3,120(sp)
 8003edc:	b811883a 	mov	r8,r23
 8003ee0:	dac01017 	ldw	r11,64(sp)
 8003ee4:	db400f17 	ldw	r13,60(sp)
 8003ee8:	db800e17 	ldw	r14,56(sp)
 8003eec:	003cf806 	br	80032d0 <___vfprintf_internal_r+0x6d8>
 8003ef0:	d9000517 	ldw	r4,20(sp)
 8003ef4:	d9801c04 	addi	r6,sp,112
 8003ef8:	980b883a 	mov	r5,r19
 8003efc:	dac00f15 	stw	r11,60(sp)
 8003f00:	db400e15 	stw	r13,56(sp)
 8003f04:	800a1000 	call	800a100 <__sprint_r>
 8003f08:	103c1a1e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8003f0c:	d8c01e17 	ldw	r3,120(sp)
 8003f10:	b811883a 	mov	r8,r23
 8003f14:	dac00f17 	ldw	r11,60(sp)
 8003f18:	db400e17 	ldw	r13,56(sp)
 8003f1c:	003cf906 	br	8003304 <___vfprintf_internal_r+0x70c>
 8003f20:	d9000c17 	ldw	r4,48(sp)
 8003f24:	b823883a 	mov	r17,r23
 8003f28:	a88003cc 	andi	r2,r21,15
 8003f2c:	a006973a 	slli	r3,r20,28
 8003f30:	2085883a 	add	r2,r4,r2
 8003f34:	a82ad13a 	srli	r21,r21,4
 8003f38:	10800003 	ldbu	r2,0(r2)
 8003f3c:	a028d13a 	srli	r20,r20,4
 8003f40:	8c7fffc4 	addi	r17,r17,-1
 8003f44:	1d6ab03a 	or	r21,r3,r21
 8003f48:	88800005 	stb	r2,0(r17)
 8003f4c:	ad04b03a 	or	r2,r21,r20
 8003f50:	103ff51e 	bne	r2,zero,8003f28 <___vfprintf_internal_r+0x1330>
 8003f54:	bc69c83a 	sub	r20,r23,r17
 8003f58:	6025883a 	mov	r18,r12
 8003f5c:	003e3d06 	br	8003854 <___vfprintf_internal_r+0xc5c>
 8003f60:	d9001617 	ldw	r4,88(sp)
 8003f64:	01019a0e 	bge	zero,r4,80045d0 <___vfprintf_internal_r+0x19d8>
 8003f68:	d8800717 	ldw	r2,28(sp)
 8003f6c:	d9000817 	ldw	r4,32(sp)
 8003f70:	1039883a 	mov	fp,r2
 8003f74:	20812816 	blt	r4,r2,8004418 <___vfprintf_internal_r+0x1820>
 8003f78:	07000a0e 	bge	zero,fp,8003fa4 <___vfprintf_internal_r+0x13ac>
 8003f7c:	d8801d17 	ldw	r2,116(sp)
 8003f80:	1f07883a 	add	r3,r3,fp
 8003f84:	44400015 	stw	r17,0(r8)
 8003f88:	10800044 	addi	r2,r2,1
 8003f8c:	d8801d15 	stw	r2,116(sp)
 8003f90:	47000115 	stw	fp,4(r8)
 8003f94:	d8c01e15 	stw	r3,120(sp)
 8003f98:	10800208 	cmpgei	r2,r2,8
 8003f9c:	1002de1e 	bne	r2,zero,8004b18 <___vfprintf_internal_r+0x1f20>
 8003fa0:	42000204 	addi	r8,r8,8
 8003fa4:	e0014116 	blt	fp,zero,80044ac <___vfprintf_internal_r+0x18b4>
 8003fa8:	d8800717 	ldw	r2,28(sp)
 8003fac:	1739c83a 	sub	fp,r2,fp
 8003fb0:	07014816 	blt	zero,fp,80044d4 <___vfprintf_internal_r+0x18dc>
 8003fb4:	d9001617 	ldw	r4,88(sp)
 8003fb8:	d8800817 	ldw	r2,32(sp)
 8003fbc:	2081190e 	bge	r4,r2,8004424 <___vfprintf_internal_r+0x182c>
 8003fc0:	d8800d17 	ldw	r2,52(sp)
 8003fc4:	d9400b17 	ldw	r5,44(sp)
 8003fc8:	40800015 	stw	r2,0(r8)
 8003fcc:	d8801d17 	ldw	r2,116(sp)
 8003fd0:	1947883a 	add	r3,r3,r5
 8003fd4:	41400115 	stw	r5,4(r8)
 8003fd8:	10800044 	addi	r2,r2,1
 8003fdc:	d8801d15 	stw	r2,116(sp)
 8003fe0:	d8c01e15 	stw	r3,120(sp)
 8003fe4:	10800208 	cmpgei	r2,r2,8
 8003fe8:	1002651e 	bne	r2,zero,8004980 <___vfprintf_internal_r+0x1d88>
 8003fec:	42000204 	addi	r8,r8,8
 8003ff0:	d8800817 	ldw	r2,32(sp)
 8003ff4:	d9400717 	ldw	r5,28(sp)
 8003ff8:	1105c83a 	sub	r2,r2,r4
 8003ffc:	29015e0e 	bge	r5,r4,8004578 <___vfprintf_internal_r+0x1980>
 8004000:	1039883a 	mov	fp,r2
 8004004:	07000c0e 	bge	zero,fp,8004038 <___vfprintf_internal_r+0x1440>
 8004008:	d9000717 	ldw	r4,28(sp)
 800400c:	1f07883a 	add	r3,r3,fp
 8004010:	47000115 	stw	fp,4(r8)
 8004014:	8923883a 	add	r17,r17,r4
 8004018:	d9001d17 	ldw	r4,116(sp)
 800401c:	44400015 	stw	r17,0(r8)
 8004020:	d8c01e15 	stw	r3,120(sp)
 8004024:	21000044 	addi	r4,r4,1
 8004028:	d9001d15 	stw	r4,116(sp)
 800402c:	21000208 	cmpgei	r4,r4,8
 8004030:	2002c41e 	bne	r4,zero,8004b44 <___vfprintf_internal_r+0x1f4c>
 8004034:	42000204 	addi	r8,r8,8
 8004038:	e000010e 	bge	fp,zero,8004040 <___vfprintf_internal_r+0x1448>
 800403c:	0039883a 	mov	fp,zero
 8004040:	1739c83a 	sub	fp,r2,fp
 8004044:	073cbf0e 	bge	zero,fp,8003344 <___vfprintf_internal_r+0x74c>
 8004048:	03020074 	movhi	r12,2049
 800404c:	e1000450 	cmplti	r4,fp,17
 8004050:	6307c384 	addi	r12,r12,7950
 8004054:	d8801d17 	ldw	r2,116(sp)
 8004058:	2002401e 	bne	r4,zero,800495c <___vfprintf_internal_r+0x1d64>
 800405c:	dc000715 	stw	r16,28(sp)
 8004060:	05000404 	movi	r20,16
 8004064:	dc400517 	ldw	r17,20(sp)
 8004068:	6021883a 	mov	r16,r12
 800406c:	00000406 	br	8004080 <___vfprintf_internal_r+0x1488>
 8004070:	42000204 	addi	r8,r8,8
 8004074:	e73ffc04 	addi	fp,fp,-16
 8004078:	e1000448 	cmpgei	r4,fp,17
 800407c:	20023526 	beq	r4,zero,8004954 <___vfprintf_internal_r+0x1d5c>
 8004080:	10800044 	addi	r2,r2,1
 8004084:	18c00404 	addi	r3,r3,16
 8004088:	44000015 	stw	r16,0(r8)
 800408c:	45000115 	stw	r20,4(r8)
 8004090:	d8c01e15 	stw	r3,120(sp)
 8004094:	d8801d15 	stw	r2,116(sp)
 8004098:	11000208 	cmpgei	r4,r2,8
 800409c:	203ff426 	beq	r4,zero,8004070 <___vfprintf_internal_r+0x1478>
 80040a0:	d9801c04 	addi	r6,sp,112
 80040a4:	980b883a 	mov	r5,r19
 80040a8:	8809883a 	mov	r4,r17
 80040ac:	800a1000 	call	800a100 <__sprint_r>
 80040b0:	103bb01e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 80040b4:	d8c01e17 	ldw	r3,120(sp)
 80040b8:	d8801d17 	ldw	r2,116(sp)
 80040bc:	b811883a 	mov	r8,r23
 80040c0:	003fec06 	br	8004074 <___vfprintf_internal_r+0x147c>
 80040c4:	9080004c 	andi	r2,r18,1
 80040c8:	103f031e 	bne	r2,zero,8003cd8 <___vfprintf_internal_r+0x10e0>
 80040cc:	00800044 	movi	r2,1
 80040d0:	dd001d15 	stw	r20,116(sp)
 80040d4:	44400015 	stw	r17,0(r8)
 80040d8:	40800115 	stw	r2,4(r8)
 80040dc:	d8c01e15 	stw	r3,120(sp)
 80040e0:	a5000208 	cmpgei	r20,r20,8
 80040e4:	a000d71e 	bne	r20,zero,8004444 <___vfprintf_internal_r+0x184c>
 80040e8:	52800084 	addi	r10,r10,2
 80040ec:	42000404 	addi	r8,r8,16
 80040f0:	003f2b06 	br	8003da0 <___vfprintf_internal_r+0x11a8>
 80040f4:	02ff2a0e 	bge	zero,r11,8003da0 <___vfprintf_internal_r+0x11a8>
 80040f8:	58800450 	cmplti	r2,r11,17
 80040fc:	03020074 	movhi	r12,2049
 8004100:	1002fe1e 	bne	r2,zero,8004cfc <___vfprintf_internal_r+0x2104>
 8004104:	6307c384 	addi	r12,r12,7950
 8004108:	dd400715 	stw	r21,28(sp)
 800410c:	dc800e15 	stw	r18,56(sp)
 8004110:	e005883a 	mov	r2,fp
 8004114:	04400404 	movi	r17,16
 8004118:	b039883a 	mov	fp,r22
 800411c:	5825883a 	mov	r18,r11
 8004120:	802d883a 	mov	r22,r16
 8004124:	602b883a 	mov	r21,r12
 8004128:	dc000517 	ldw	r16,20(sp)
 800412c:	6829883a 	mov	r20,r13
 8004130:	00000506 	br	8004148 <___vfprintf_internal_r+0x1550>
 8004134:	10800204 	addi	r2,r2,8
 8004138:	94bffc04 	addi	r18,r18,-16
 800413c:	91000448 	cmpgei	r4,r18,17
 8004140:	20018a26 	beq	r4,zero,800476c <___vfprintf_internal_r+0x1b74>
 8004144:	a5000044 	addi	r20,r20,1
 8004148:	18c00404 	addi	r3,r3,16
 800414c:	15400015 	stw	r21,0(r2)
 8004150:	14400115 	stw	r17,4(r2)
 8004154:	d8c01e15 	stw	r3,120(sp)
 8004158:	dd001d15 	stw	r20,116(sp)
 800415c:	a1000208 	cmpgei	r4,r20,8
 8004160:	203ff426 	beq	r4,zero,8004134 <___vfprintf_internal_r+0x153c>
 8004164:	d9801c04 	addi	r6,sp,112
 8004168:	980b883a 	mov	r5,r19
 800416c:	8009883a 	mov	r4,r16
 8004170:	800a1000 	call	800a100 <__sprint_r>
 8004174:	103b7f1e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004178:	dd001d17 	ldw	r20,116(sp)
 800417c:	d8c01e17 	ldw	r3,120(sp)
 8004180:	b805883a 	mov	r2,r23
 8004184:	003fec06 	br	8004138 <___vfprintf_internal_r+0x1540>
 8004188:	d9000517 	ldw	r4,20(sp)
 800418c:	d9801c04 	addi	r6,sp,112
 8004190:	980b883a 	mov	r5,r19
 8004194:	800a1000 	call	800a100 <__sprint_r>
 8004198:	103b761e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 800419c:	d8c01e17 	ldw	r3,120(sp)
 80041a0:	b811883a 	mov	r8,r23
 80041a4:	003c5b06 	br	8003314 <___vfprintf_internal_r+0x71c>
 80041a8:	0029883a 	mov	r20,zero
 80041ac:	003bdc06 	br	8003120 <___vfprintf_internal_r+0x528>
 80041b0:	b023883a 	mov	r17,r22
 80041b4:	003ae306 	br	8002d44 <___vfprintf_internal_r+0x14c>
 80041b8:	b823883a 	mov	r17,r23
 80041bc:	003da506 	br	8003854 <___vfprintf_internal_r+0xc5c>
 80041c0:	d9000917 	ldw	r4,36(sp)
 80041c4:	d9400a17 	ldw	r5,40(sp)
 80041c8:	da000f15 	stw	r8,60(sp)
 80041cc:	200d883a 	mov	r6,r4
 80041d0:	280f883a 	mov	r7,r5
 80041d4:	dac00e15 	stw	r11,56(sp)
 80041d8:	db000715 	stw	r12,28(sp)
 80041dc:	800f2000 	call	800f200 <__unorddf2>
 80041e0:	db000717 	ldw	r12,28(sp)
 80041e4:	dac00e17 	ldw	r11,56(sp)
 80041e8:	da000f17 	ldw	r8,60(sp)
 80041ec:	1002b21e 	bne	r2,zero,8004cb8 <___vfprintf_internal_r+0x20c0>
 80041f0:	00fff7c4 	movi	r3,-33
 80041f4:	e0c6703a 	and	r3,fp,r3
 80041f8:	58bfffe0 	cmpeqi	r2,r11,-1
 80041fc:	d8c00715 	stw	r3,28(sp)
 8004200:	10024e1e 	bne	r2,zero,8004b3c <___vfprintf_internal_r+0x1f44>
 8004204:	188011d8 	cmpnei	r2,r3,71
 8004208:	10020026 	beq	r2,zero,8004a0c <___vfprintf_internal_r+0x1e14>
 800420c:	d8800a17 	ldw	r2,40(sp)
 8004210:	64804014 	ori	r18,r12,256
 8004214:	1001e316 	blt	r2,zero,80049a4 <___vfprintf_internal_r+0x1dac>
 8004218:	dd400a17 	ldw	r21,40(sp)
 800421c:	d8000e05 	stb	zero,56(sp)
 8004220:	e08019a0 	cmpeqi	r2,fp,102
 8004224:	d8800f15 	stw	r2,60(sp)
 8004228:	1001771e 	bne	r2,zero,8004808 <___vfprintf_internal_r+0x1c10>
 800422c:	e08011a0 	cmpeqi	r2,fp,70
 8004230:	1001751e 	bne	r2,zero,8004808 <___vfprintf_internal_r+0x1c10>
 8004234:	d8800717 	ldw	r2,28(sp)
 8004238:	da001215 	stw	r8,72(sp)
 800423c:	db001015 	stw	r12,64(sp)
 8004240:	10801158 	cmpnei	r2,r2,69
 8004244:	10020726 	beq	r2,zero,8004a64 <___vfprintf_internal_r+0x1e6c>
 8004248:	d8801a04 	addi	r2,sp,104
 800424c:	d8800315 	stw	r2,12(sp)
 8004250:	d9400917 	ldw	r5,36(sp)
 8004254:	d8801704 	addi	r2,sp,92
 8004258:	d9000517 	ldw	r4,20(sp)
 800425c:	d8800215 	stw	r2,8(sp)
 8004260:	d8801604 	addi	r2,sp,88
 8004264:	dac00015 	stw	r11,0(sp)
 8004268:	d8800115 	stw	r2,4(sp)
 800426c:	01c00084 	movi	r7,2
 8004270:	a80d883a 	mov	r6,r21
 8004274:	dac00815 	stw	r11,32(sp)
 8004278:	80051ec0 	call	80051ec <_dtoa_r>
 800427c:	dac00817 	ldw	r11,32(sp)
 8004280:	1023883a 	mov	r17,r2
 8004284:	e08019d8 	cmpnei	r2,fp,103
 8004288:	db001017 	ldw	r12,64(sp)
 800428c:	da001217 	ldw	r8,72(sp)
 8004290:	5829883a 	mov	r20,r11
 8004294:	1002051e 	bne	r2,zero,8004aac <___vfprintf_internal_r+0x1eb4>
 8004298:	6080004c 	andi	r2,r12,1
 800429c:	1002051e 	bne	r2,zero,8004ab4 <___vfprintf_internal_r+0x1ebc>
 80042a0:	d8c01617 	ldw	r3,88(sp)
 80042a4:	d8800717 	ldw	r2,28(sp)
 80042a8:	d8c00715 	stw	r3,28(sp)
 80042ac:	d8c01a17 	ldw	r3,104(sp)
 80042b0:	108011e0 	cmpeqi	r2,r2,71
 80042b4:	1c47c83a 	sub	r3,r3,r17
 80042b8:	d8c00815 	stw	r3,32(sp)
 80042bc:	10000526 	beq	r2,zero,80042d4 <___vfprintf_internal_r+0x16dc>
 80042c0:	d8c00717 	ldw	r3,28(sp)
 80042c4:	18bfff50 	cmplti	r2,r3,-3
 80042c8:	1000011e 	bne	r2,zero,80042d0 <___vfprintf_internal_r+0x16d8>
 80042cc:	58c2070e 	bge	r11,r3,8004aec <___vfprintf_internal_r+0x1ef4>
 80042d0:	e73fff84 	addi	fp,fp,-2
 80042d4:	d8800717 	ldw	r2,28(sp)
 80042d8:	df001845 	stb	fp,97(sp)
 80042dc:	153fffc4 	addi	r20,r2,-1
 80042e0:	dd001615 	stw	r20,88(sp)
 80042e4:	a0027c16 	blt	r20,zero,8004cd8 <___vfprintf_internal_r+0x20e0>
 80042e8:	00800ac4 	movi	r2,43
 80042ec:	d8801885 	stb	r2,98(sp)
 80042f0:	a0800290 	cmplti	r2,r20,10
 80042f4:	10025b1e 	bne	r2,zero,8004c64 <___vfprintf_internal_r+0x206c>
 80042f8:	dc000f15 	stw	r16,60(sp)
 80042fc:	dd401bc4 	addi	r21,sp,111
 8004300:	a021883a 	mov	r16,r20
 8004304:	db000715 	stw	r12,28(sp)
 8004308:	9829883a 	mov	r20,r19
 800430c:	4027883a 	mov	r19,r8
 8004310:	00000206 	br	800431c <___vfprintf_internal_r+0x1724>
 8004314:	202b883a 	mov	r21,r4
 8004318:	1021883a 	mov	r16,r2
 800431c:	8009883a 	mov	r4,r16
 8004320:	01400284 	movi	r5,10
 8004324:	800289c0 	call	800289c <__modsi3>
 8004328:	10800c04 	addi	r2,r2,48
 800432c:	8009883a 	mov	r4,r16
 8004330:	a8bfffc5 	stb	r2,-1(r21)
 8004334:	01400284 	movi	r5,10
 8004338:	800281c0 	call	800281c <__divsi3>
 800433c:	80c01908 	cmpgei	r3,r16,100
 8004340:	a93fffc4 	addi	r4,r21,-1
 8004344:	183ff31e 	bne	r3,zero,8004314 <___vfprintf_internal_r+0x171c>
 8004348:	10800c04 	addi	r2,r2,48
 800434c:	20bfffc5 	stb	r2,-1(r4)
 8004350:	a8ffff84 	addi	r3,r21,-2
 8004354:	d9001bc4 	addi	r4,sp,111
 8004358:	9811883a 	mov	r8,r19
 800435c:	db000717 	ldw	r12,28(sp)
 8004360:	dc000f17 	ldw	r16,60(sp)
 8004364:	a027883a 	mov	r19,r20
 8004368:	1902762e 	bgeu	r3,r4,8004d44 <___vfprintf_internal_r+0x214c>
 800436c:	d90018c4 	addi	r4,sp,99
 8004370:	00000106 	br	8004378 <___vfprintf_internal_r+0x1780>
 8004374:	18800003 	ldbu	r2,0(r3)
 8004378:	21000044 	addi	r4,r4,1
 800437c:	20bfffc5 	stb	r2,-1(r4)
 8004380:	18c00044 	addi	r3,r3,1
 8004384:	d8801bc4 	addi	r2,sp,111
 8004388:	18bffa1e 	bne	r3,r2,8004374 <___vfprintf_internal_r+0x177c>
 800438c:	d8801c44 	addi	r2,sp,113
 8004390:	d8c018c4 	addi	r3,sp,99
 8004394:	1545c83a 	sub	r2,r2,r21
 8004398:	1885883a 	add	r2,r3,r2
 800439c:	d8c01844 	addi	r3,sp,97
 80043a0:	10c5c83a 	sub	r2,r2,r3
 80043a4:	d8801115 	stw	r2,68(sp)
 80043a8:	d8c00817 	ldw	r3,32(sp)
 80043ac:	d9001117 	ldw	r4,68(sp)
 80043b0:	18800088 	cmpgei	r2,r3,2
 80043b4:	1929883a 	add	r20,r3,r4
 80043b8:	10024c26 	beq	r2,zero,8004cec <___vfprintf_internal_r+0x20f4>
 80043bc:	d8800b17 	ldw	r2,44(sp)
 80043c0:	a0a9883a 	add	r20,r20,r2
 80043c4:	a02b883a 	mov	r21,r20
 80043c8:	a000010e 	bge	r20,zero,80043d0 <___vfprintf_internal_r+0x17d8>
 80043cc:	002b883a 	mov	r21,zero
 80043d0:	d8000715 	stw	zero,28(sp)
 80043d4:	00014206 	br	80048e0 <___vfprintf_internal_r+0x1ce8>
 80043d8:	00800c04 	movi	r2,48
 80043dc:	d8801585 	stb	r2,86(sp)
 80043e0:	df0015c5 	stb	fp,87(sp)
 80043e4:	63000094 	ori	r12,r12,2
 80043e8:	00800084 	movi	r2,2
 80043ec:	003ce106 	br	8003774 <___vfprintf_internal_r+0xb7c>
 80043f0:	d9400417 	ldw	r5,16(sp)
 80043f4:	20800017 	ldw	r2,0(r4)
 80043f8:	d8c00615 	stw	r3,24(sp)
 80043fc:	2809d7fa 	srai	r4,r5,31
 8004400:	11400015 	stw	r5,0(r2)
 8004404:	11000115 	stw	r4,4(r2)
 8004408:	003a3006 	br	8002ccc <___vfprintf_internal_r+0xd4>
 800440c:	0421c83a 	sub	r16,zero,r16
 8004410:	d8800615 	stw	r2,24(sp)
 8004414:	003b1506 	br	800306c <___vfprintf_internal_r+0x474>
 8004418:	2039883a 	mov	fp,r4
 800441c:	073ed716 	blt	zero,fp,8003f7c <___vfprintf_internal_r+0x1384>
 8004420:	003ee006 	br	8003fa4 <___vfprintf_internal_r+0x13ac>
 8004424:	9080004c 	andi	r2,r18,1
 8004428:	103ee51e 	bne	r2,zero,8003fc0 <___vfprintf_internal_r+0x13c8>
 800442c:	d8800817 	ldw	r2,32(sp)
 8004430:	d9400717 	ldw	r5,28(sp)
 8004434:	1105c83a 	sub	r2,r2,r4
 8004438:	29004f0e 	bge	r5,r4,8004578 <___vfprintf_internal_r+0x1980>
 800443c:	1039883a 	mov	fp,r2
 8004440:	003efd06 	br	8004038 <___vfprintf_internal_r+0x1440>
 8004444:	d9000517 	ldw	r4,20(sp)
 8004448:	d9801c04 	addi	r6,sp,112
 800444c:	980b883a 	mov	r5,r19
 8004450:	800a1000 	call	800a100 <__sprint_r>
 8004454:	103ac71e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004458:	da801d17 	ldw	r10,116(sp)
 800445c:	d8c01e17 	ldw	r3,120(sp)
 8004460:	da002b04 	addi	r8,sp,172
 8004464:	52800044 	addi	r10,r10,1
 8004468:	b839883a 	mov	fp,r23
 800446c:	003e4c06 	br	8003da0 <___vfprintf_internal_r+0x11a8>
 8004470:	b7000043 	ldbu	fp,1(r22)
 8004474:	63000814 	ori	r12,r12,32
 8004478:	b5800044 	addi	r22,r22,1
 800447c:	e2803fcc 	andi	r10,fp,255
 8004480:	5280201c 	xori	r10,r10,128
 8004484:	52bfe004 	addi	r10,r10,-128
 8004488:	003a3606 	br	8002d64 <___vfprintf_internal_r+0x16c>
 800448c:	d9000517 	ldw	r4,20(sp)
 8004490:	d9801c04 	addi	r6,sp,112
 8004494:	980b883a 	mov	r5,r19
 8004498:	800a1000 	call	800a100 <__sprint_r>
 800449c:	103ab51e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 80044a0:	d8c01e17 	ldw	r3,120(sp)
 80044a4:	b811883a 	mov	r8,r23
 80044a8:	003d4506 	br	80039c0 <___vfprintf_internal_r+0xdc8>
 80044ac:	0039883a 	mov	fp,zero
 80044b0:	003ebd06 	br	8003fa8 <___vfprintf_internal_r+0x13b0>
 80044b4:	588001f0 	cmpltui	r2,r11,7
 80044b8:	5829883a 	mov	r20,r11
 80044bc:	10013d26 	beq	r2,zero,80049b4 <___vfprintf_internal_r+0x1dbc>
 80044c0:	04420074 	movhi	r17,2049
 80044c4:	a02b883a 	mov	r21,r20
 80044c8:	dc800615 	stw	r18,24(sp)
 80044cc:	8c47c104 	addi	r17,r17,7940
 80044d0:	003b6606 	br	800326c <___vfprintf_internal_r+0x674>
 80044d4:	03020074 	movhi	r12,2049
 80044d8:	e1000450 	cmplti	r4,fp,17
 80044dc:	6307c384 	addi	r12,r12,7950
 80044e0:	d8801d17 	ldw	r2,116(sp)
 80044e4:	20010d1e 	bne	r4,zero,800491c <___vfprintf_internal_r+0x1d24>
 80044e8:	dc400e15 	stw	r17,56(sp)
 80044ec:	dc800f15 	stw	r18,60(sp)
 80044f0:	e023883a 	mov	r17,fp
 80044f4:	05000404 	movi	r20,16
 80044f8:	b039883a 	mov	fp,r22
 80044fc:	6025883a 	mov	r18,r12
 8004500:	802d883a 	mov	r22,r16
 8004504:	dc000517 	ldw	r16,20(sp)
 8004508:	00000406 	br	800451c <___vfprintf_internal_r+0x1924>
 800450c:	42000204 	addi	r8,r8,8
 8004510:	8c7ffc04 	addi	r17,r17,-16
 8004514:	89000448 	cmpgei	r4,r17,17
 8004518:	2000fa26 	beq	r4,zero,8004904 <___vfprintf_internal_r+0x1d0c>
 800451c:	10800044 	addi	r2,r2,1
 8004520:	18c00404 	addi	r3,r3,16
 8004524:	44800015 	stw	r18,0(r8)
 8004528:	45000115 	stw	r20,4(r8)
 800452c:	d8c01e15 	stw	r3,120(sp)
 8004530:	d8801d15 	stw	r2,116(sp)
 8004534:	11000208 	cmpgei	r4,r2,8
 8004538:	203ff426 	beq	r4,zero,800450c <___vfprintf_internal_r+0x1914>
 800453c:	d9801c04 	addi	r6,sp,112
 8004540:	980b883a 	mov	r5,r19
 8004544:	8009883a 	mov	r4,r16
 8004548:	800a1000 	call	800a100 <__sprint_r>
 800454c:	103a891e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004550:	d8c01e17 	ldw	r3,120(sp)
 8004554:	d8801d17 	ldw	r2,116(sp)
 8004558:	b811883a 	mov	r8,r23
 800455c:	003fec06 	br	8004510 <___vfprintf_internal_r+0x1918>
 8004560:	d8800617 	ldw	r2,24(sp)
 8004564:	10800017 	ldw	r2,0(r2)
 8004568:	d8c00615 	stw	r3,24(sp)
 800456c:	d8c00417 	ldw	r3,16(sp)
 8004570:	10c00015 	stw	r3,0(r2)
 8004574:	0039d506 	br	8002ccc <___vfprintf_internal_r+0xd4>
 8004578:	d9000817 	ldw	r4,32(sp)
 800457c:	d9400717 	ldw	r5,28(sp)
 8004580:	2179c83a 	sub	fp,r4,r5
 8004584:	003e9f06 	br	8004004 <___vfprintf_internal_r+0x140c>
 8004588:	d9000517 	ldw	r4,20(sp)
 800458c:	d9801c04 	addi	r6,sp,112
 8004590:	980b883a 	mov	r5,r19
 8004594:	800a1000 	call	800a100 <__sprint_r>
 8004598:	103a761e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 800459c:	d8c01e17 	ldw	r3,120(sp)
 80045a0:	dd001d17 	ldw	r20,116(sp)
 80045a4:	b839883a 	mov	fp,r23
 80045a8:	003ddd06 	br	8003d20 <___vfprintf_internal_r+0x1128>
 80045ac:	d9000517 	ldw	r4,20(sp)
 80045b0:	d9801c04 	addi	r6,sp,112
 80045b4:	980b883a 	mov	r5,r19
 80045b8:	800a1000 	call	800a100 <__sprint_r>
 80045bc:	103a6d1e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 80045c0:	d8c01e17 	ldw	r3,120(sp)
 80045c4:	dd001d17 	ldw	r20,116(sp)
 80045c8:	b839883a 	mov	fp,r23
 80045cc:	003dc906 	br	8003cf4 <___vfprintf_internal_r+0x10fc>
 80045d0:	d8801d17 	ldw	r2,116(sp)
 80045d4:	01420074 	movhi	r5,2049
 80045d8:	2947c304 	addi	r5,r5,7948
 80045dc:	10800044 	addi	r2,r2,1
 80045e0:	18c00044 	addi	r3,r3,1
 80045e4:	41400015 	stw	r5,0(r8)
 80045e8:	01400044 	movi	r5,1
 80045ec:	d8801d15 	stw	r2,116(sp)
 80045f0:	41400115 	stw	r5,4(r8)
 80045f4:	d8c01e15 	stw	r3,120(sp)
 80045f8:	10800208 	cmpgei	r2,r2,8
 80045fc:	103d851e 	bne	r2,zero,8003c14 <___vfprintf_internal_r+0x101c>
 8004600:	42000204 	addi	r8,r8,8
 8004604:	003d8b06 	br	8003c34 <___vfprintf_internal_r+0x103c>
 8004608:	d9000517 	ldw	r4,20(sp)
 800460c:	d9801c04 	addi	r6,sp,112
 8004610:	980b883a 	mov	r5,r19
 8004614:	dac01015 	stw	r11,64(sp)
 8004618:	db400f15 	stw	r13,60(sp)
 800461c:	db800e15 	stw	r14,56(sp)
 8004620:	800a1000 	call	800a100 <__sprint_r>
 8004624:	103a531e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004628:	d8c01e17 	ldw	r3,120(sp)
 800462c:	b811883a 	mov	r8,r23
 8004630:	dac01017 	ldw	r11,64(sp)
 8004634:	db400f17 	ldw	r13,60(sp)
 8004638:	db800e17 	ldw	r14,56(sp)
 800463c:	003b1606 	br	8003298 <___vfprintf_internal_r+0x6a0>
 8004640:	d9000517 	ldw	r4,20(sp)
 8004644:	d9801c04 	addi	r6,sp,112
 8004648:	980b883a 	mov	r5,r19
 800464c:	800a1000 	call	800a100 <__sprint_r>
 8004650:	103a481e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004654:	b811883a 	mov	r8,r23
 8004658:	003cc506 	br	8003970 <___vfprintf_internal_r+0xd78>
 800465c:	d9000517 	ldw	r4,20(sp)
 8004660:	d9801c04 	addi	r6,sp,112
 8004664:	980b883a 	mov	r5,r19
 8004668:	dac00e15 	stw	r11,56(sp)
 800466c:	800a1000 	call	800a100 <__sprint_r>
 8004670:	103a401e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004674:	d8c01e17 	ldw	r3,120(sp)
 8004678:	b811883a 	mov	r8,r23
 800467c:	dac00e17 	ldw	r11,56(sp)
 8004680:	003b2206 	br	800330c <___vfprintf_internal_r+0x714>
 8004684:	10c00060 	cmpeqi	r3,r2,1
 8004688:	9019883a 	mov	r12,r18
 800468c:	183beb26 	beq	r3,zero,800363c <___vfprintf_internal_r+0xa44>
 8004690:	003c6b06 	br	8003840 <___vfprintf_internal_r+0xc48>
 8004694:	d8800d17 	ldw	r2,52(sp)
 8004698:	d9400b17 	ldw	r5,44(sp)
 800469c:	40800015 	stw	r2,0(r8)
 80046a0:	d8801d17 	ldw	r2,116(sp)
 80046a4:	28c7883a 	add	r3,r5,r3
 80046a8:	41400115 	stw	r5,4(r8)
 80046ac:	10800044 	addi	r2,r2,1
 80046b0:	d8c01e15 	stw	r3,120(sp)
 80046b4:	d8801d15 	stw	r2,116(sp)
 80046b8:	11400208 	cmpgei	r5,r2,8
 80046bc:	2800d61e 	bne	r5,zero,8004a18 <___vfprintf_internal_r+0x1e20>
 80046c0:	42000204 	addi	r8,r8,8
 80046c4:	203d6c0e 	bge	r4,zero,8003c78 <___vfprintf_internal_r+0x1080>
 80046c8:	03020074 	movhi	r12,2049
 80046cc:	217ffc08 	cmpgei	r5,r4,-16
 80046d0:	6307c384 	addi	r12,r12,7950
 80046d4:	0129c83a 	sub	r20,zero,r4
 80046d8:	28014e1e 	bne	r5,zero,8004c14 <___vfprintf_internal_r+0x201c>
 80046dc:	8009883a 	mov	r4,r16
 80046e0:	dc400715 	stw	r17,28(sp)
 80046e4:	a021883a 	mov	r16,r20
 80046e8:	07000404 	movi	fp,16
 80046ec:	6023883a 	mov	r17,r12
 80046f0:	2029883a 	mov	r20,r4
 80046f4:	00000406 	br	8004708 <___vfprintf_internal_r+0x1b10>
 80046f8:	42000204 	addi	r8,r8,8
 80046fc:	843ffc04 	addi	r16,r16,-16
 8004700:	81000448 	cmpgei	r4,r16,17
 8004704:	20013e26 	beq	r4,zero,8004c00 <___vfprintf_internal_r+0x2008>
 8004708:	10800044 	addi	r2,r2,1
 800470c:	18c00404 	addi	r3,r3,16
 8004710:	44400015 	stw	r17,0(r8)
 8004714:	47000115 	stw	fp,4(r8)
 8004718:	d8c01e15 	stw	r3,120(sp)
 800471c:	d8801d15 	stw	r2,116(sp)
 8004720:	11000208 	cmpgei	r4,r2,8
 8004724:	203ff426 	beq	r4,zero,80046f8 <___vfprintf_internal_r+0x1b00>
 8004728:	d9000517 	ldw	r4,20(sp)
 800472c:	d9801c04 	addi	r6,sp,112
 8004730:	980b883a 	mov	r5,r19
 8004734:	800a1000 	call	800a100 <__sprint_r>
 8004738:	103a0e1e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 800473c:	d8c01e17 	ldw	r3,120(sp)
 8004740:	d8801d17 	ldw	r2,116(sp)
 8004744:	b811883a 	mov	r8,r23
 8004748:	003fec06 	br	80046fc <___vfprintf_internal_r+0x1b04>
 800474c:	8809883a 	mov	r4,r17
 8004750:	8002b600 	call	8002b60 <strlen>
 8004754:	1029883a 	mov	r20,r2
 8004758:	102b883a 	mov	r21,r2
 800475c:	dc800615 	stw	r18,24(sp)
 8004760:	db000717 	ldw	r12,28(sp)
 8004764:	da000e17 	ldw	r8,56(sp)
 8004768:	003ac006 	br	800326c <___vfprintf_internal_r+0x674>
 800476c:	9017883a 	mov	r11,r18
 8004770:	a819883a 	mov	r12,r21
 8004774:	dc800e17 	ldw	r18,56(sp)
 8004778:	dd400717 	ldw	r21,28(sp)
 800477c:	b021883a 	mov	r16,r22
 8004780:	a2800044 	addi	r10,r20,1
 8004784:	e02d883a 	mov	r22,fp
 8004788:	1039883a 	mov	fp,r2
 800478c:	10800204 	addi	r2,r2,8
 8004790:	1ac7883a 	add	r3,r3,r11
 8004794:	e3000015 	stw	r12,0(fp)
 8004798:	e2c00115 	stw	r11,4(fp)
 800479c:	d8c01e15 	stw	r3,120(sp)
 80047a0:	da801d15 	stw	r10,116(sp)
 80047a4:	51000208 	cmpgei	r4,r10,8
 80047a8:	203f261e 	bne	r4,zero,8004444 <___vfprintf_internal_r+0x184c>
 80047ac:	52800044 	addi	r10,r10,1
 80047b0:	12000204 	addi	r8,r2,8
 80047b4:	1039883a 	mov	fp,r2
 80047b8:	003d7906 	br	8003da0 <___vfprintf_internal_r+0x11a8>
 80047bc:	8019883a 	mov	r12,r16
 80047c0:	dc000717 	ldw	r16,28(sp)
 80047c4:	10800044 	addi	r2,r2,1
 80047c8:	1c47883a 	add	r3,r3,r17
 80047cc:	d8801d15 	stw	r2,116(sp)
 80047d0:	43000015 	stw	r12,0(r8)
 80047d4:	44400115 	stw	r17,4(r8)
 80047d8:	d8c01e15 	stw	r3,120(sp)
 80047dc:	10800208 	cmpgei	r2,r2,8
 80047e0:	103ad726 	beq	r2,zero,8003340 <___vfprintf_internal_r+0x748>
 80047e4:	003d2d06 	br	8003c9c <___vfprintf_internal_r+0x10a4>
 80047e8:	d8800615 	stw	r2,24(sp)
 80047ec:	0029883a 	mov	r20,zero
 80047f0:	0005883a 	mov	r2,zero
 80047f4:	003bdf06 	br	8003774 <___vfprintf_internal_r+0xb7c>
 80047f8:	d8800615 	stw	r2,24(sp)
 80047fc:	0029883a 	mov	r20,zero
 8004800:	00800044 	movi	r2,1
 8004804:	003bdb06 	br	8003774 <___vfprintf_internal_r+0xb7c>
 8004808:	d8801a04 	addi	r2,sp,104
 800480c:	d8800315 	stw	r2,12(sp)
 8004810:	d9400917 	ldw	r5,36(sp)
 8004814:	d8801704 	addi	r2,sp,92
 8004818:	d9000517 	ldw	r4,20(sp)
 800481c:	d8800215 	stw	r2,8(sp)
 8004820:	d8801604 	addi	r2,sp,88
 8004824:	dac00015 	stw	r11,0(sp)
 8004828:	d8800115 	stw	r2,4(sp)
 800482c:	01c000c4 	movi	r7,3
 8004830:	a80d883a 	mov	r6,r21
 8004834:	da001215 	stw	r8,72(sp)
 8004838:	db001015 	stw	r12,64(sp)
 800483c:	dac00815 	stw	r11,32(sp)
 8004840:	80051ec0 	call	80051ec <_dtoa_r>
 8004844:	dac00817 	ldw	r11,32(sp)
 8004848:	1023883a 	mov	r17,r2
 800484c:	db001017 	ldw	r12,64(sp)
 8004850:	12e9883a 	add	r20,r2,r11
 8004854:	88800007 	ldb	r2,0(r17)
 8004858:	da001217 	ldw	r8,72(sp)
 800485c:	10800c20 	cmpeqi	r2,r2,48
 8004860:	10005a1e 	bne	r2,zero,80049cc <___vfprintf_internal_r+0x1dd4>
 8004864:	d8801617 	ldw	r2,88(sp)
 8004868:	a0a9883a 	add	r20,r20,r2
 800486c:	d9000917 	ldw	r4,36(sp)
 8004870:	000d883a 	mov	r6,zero
 8004874:	000f883a 	mov	r7,zero
 8004878:	a80b883a 	mov	r5,r21
 800487c:	da001215 	stw	r8,72(sp)
 8004880:	dac01015 	stw	r11,64(sp)
 8004884:	db000815 	stw	r12,32(sp)
 8004888:	800de540 	call	800de54 <__eqdf2>
 800488c:	db000817 	ldw	r12,32(sp)
 8004890:	dac01017 	ldw	r11,64(sp)
 8004894:	da001217 	ldw	r8,72(sp)
 8004898:	1000881e 	bne	r2,zero,8004abc <___vfprintf_internal_r+0x1ec4>
 800489c:	a005883a 	mov	r2,r20
 80048a0:	1445c83a 	sub	r2,r2,r17
 80048a4:	d8c00717 	ldw	r3,28(sp)
 80048a8:	d8800815 	stw	r2,32(sp)
 80048ac:	d8801617 	ldw	r2,88(sp)
 80048b0:	18c011d8 	cmpnei	r3,r3,71
 80048b4:	d8800715 	stw	r2,28(sp)
 80048b8:	183e8126 	beq	r3,zero,80042c0 <___vfprintf_internal_r+0x16c8>
 80048bc:	d8800f17 	ldw	r2,60(sp)
 80048c0:	103e8426 	beq	r2,zero,80042d4 <___vfprintf_internal_r+0x16dc>
 80048c4:	d8c00717 	ldw	r3,28(sp)
 80048c8:	6080004c 	andi	r2,r12,1
 80048cc:	12c4b03a 	or	r2,r2,r11
 80048d0:	00c10d0e 	bge	zero,r3,8004d08 <___vfprintf_internal_r+0x2110>
 80048d4:	1000f11e 	bne	r2,zero,8004c9c <___vfprintf_internal_r+0x20a4>
 80048d8:	dd000717 	ldw	r20,28(sp)
 80048dc:	a02b883a 	mov	r21,r20
 80048e0:	d8800e07 	ldb	r2,56(sp)
 80048e4:	10007e26 	beq	r2,zero,8004ae0 <___vfprintf_internal_r+0x1ee8>
 80048e8:	00800b44 	movi	r2,45
 80048ec:	d8801545 	stb	r2,85(sp)
 80048f0:	0017883a 	mov	r11,zero
 80048f4:	003bdf06 	br	8003874 <___vfprintf_internal_r+0xc7c>
 80048f8:	04420074 	movhi	r17,2049
 80048fc:	8c47b304 	addi	r17,r17,7884
 8004900:	003b2e06 	br	80035bc <___vfprintf_internal_r+0x9c4>
 8004904:	b021883a 	mov	r16,r22
 8004908:	9019883a 	mov	r12,r18
 800490c:	e02d883a 	mov	r22,fp
 8004910:	dc800f17 	ldw	r18,60(sp)
 8004914:	8839883a 	mov	fp,r17
 8004918:	dc400e17 	ldw	r17,56(sp)
 800491c:	10800044 	addi	r2,r2,1
 8004920:	1f07883a 	add	r3,r3,fp
 8004924:	d8801d15 	stw	r2,116(sp)
 8004928:	43000015 	stw	r12,0(r8)
 800492c:	47000115 	stw	fp,4(r8)
 8004930:	d8c01e15 	stw	r3,120(sp)
 8004934:	10800208 	cmpgei	r2,r2,8
 8004938:	1000421e 	bne	r2,zero,8004a44 <___vfprintf_internal_r+0x1e4c>
 800493c:	42000204 	addi	r8,r8,8
 8004940:	003d9c06 	br	8003fb4 <___vfprintf_internal_r+0x13bc>
 8004944:	00800b44 	movi	r2,45
 8004948:	d8801545 	stb	r2,85(sp)
 800494c:	03400b44 	movi	r13,45
 8004950:	003b1606 	br	80035ac <___vfprintf_internal_r+0x9b4>
 8004954:	8019883a 	mov	r12,r16
 8004958:	dc000717 	ldw	r16,28(sp)
 800495c:	10800044 	addi	r2,r2,1
 8004960:	1f07883a 	add	r3,r3,fp
 8004964:	d8801d15 	stw	r2,116(sp)
 8004968:	43000015 	stw	r12,0(r8)
 800496c:	47000115 	stw	fp,4(r8)
 8004970:	d8c01e15 	stw	r3,120(sp)
 8004974:	10800208 	cmpgei	r2,r2,8
 8004978:	103a7126 	beq	r2,zero,8003340 <___vfprintf_internal_r+0x748>
 800497c:	003cc706 	br	8003c9c <___vfprintf_internal_r+0x10a4>
 8004980:	d9000517 	ldw	r4,20(sp)
 8004984:	d9801c04 	addi	r6,sp,112
 8004988:	980b883a 	mov	r5,r19
 800498c:	800a1000 	call	800a100 <__sprint_r>
 8004990:	1039781e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004994:	d9001617 	ldw	r4,88(sp)
 8004998:	d8c01e17 	ldw	r3,120(sp)
 800499c:	b811883a 	mov	r8,r23
 80049a0:	003d9306 	br	8003ff0 <___vfprintf_internal_r+0x13f8>
 80049a4:	1560003c 	xorhi	r21,r2,32768
 80049a8:	00800b44 	movi	r2,45
 80049ac:	d8800e05 	stb	r2,56(sp)
 80049b0:	003e1b06 	br	8004220 <___vfprintf_internal_r+0x1628>
 80049b4:	05000184 	movi	r20,6
 80049b8:	003ec106 	br	80044c0 <___vfprintf_internal_r+0x18c8>
 80049bc:	002b883a 	mov	r21,zero
 80049c0:	003a0206 	br	80031cc <___vfprintf_internal_r+0x5d4>
 80049c4:	d9401545 	stb	r5,85(sp)
 80049c8:	00398a06 	br	8002ff4 <___vfprintf_internal_r+0x3fc>
 80049cc:	d9000917 	ldw	r4,36(sp)
 80049d0:	000d883a 	mov	r6,zero
 80049d4:	000f883a 	mov	r7,zero
 80049d8:	a80b883a 	mov	r5,r21
 80049dc:	da001215 	stw	r8,72(sp)
 80049e0:	dac01015 	stw	r11,64(sp)
 80049e4:	db000815 	stw	r12,32(sp)
 80049e8:	800de540 	call	800de54 <__eqdf2>
 80049ec:	db000817 	ldw	r12,32(sp)
 80049f0:	dac01017 	ldw	r11,64(sp)
 80049f4:	da001217 	ldw	r8,72(sp)
 80049f8:	103f9a26 	beq	r2,zero,8004864 <___vfprintf_internal_r+0x1c6c>
 80049fc:	00800044 	movi	r2,1
 8004a00:	12c5c83a 	sub	r2,r2,r11
 8004a04:	d8801615 	stw	r2,88(sp)
 8004a08:	003f9706 	br	8004868 <___vfprintf_internal_r+0x1c70>
 8004a0c:	583dff1e 	bne	r11,zero,800420c <___vfprintf_internal_r+0x1614>
 8004a10:	02c00044 	movi	r11,1
 8004a14:	003dfd06 	br	800420c <___vfprintf_internal_r+0x1614>
 8004a18:	d9000517 	ldw	r4,20(sp)
 8004a1c:	d9801c04 	addi	r6,sp,112
 8004a20:	980b883a 	mov	r5,r19
 8004a24:	800a1000 	call	800a100 <__sprint_r>
 8004a28:	1039521e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004a2c:	d9001617 	ldw	r4,88(sp)
 8004a30:	d8c01e17 	ldw	r3,120(sp)
 8004a34:	d8801d17 	ldw	r2,116(sp)
 8004a38:	b811883a 	mov	r8,r23
 8004a3c:	203c8e0e 	bge	r4,zero,8003c78 <___vfprintf_internal_r+0x1080>
 8004a40:	003f2106 	br	80046c8 <___vfprintf_internal_r+0x1ad0>
 8004a44:	d9000517 	ldw	r4,20(sp)
 8004a48:	d9801c04 	addi	r6,sp,112
 8004a4c:	980b883a 	mov	r5,r19
 8004a50:	800a1000 	call	800a100 <__sprint_r>
 8004a54:	1039471e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004a58:	d8c01e17 	ldw	r3,120(sp)
 8004a5c:	b811883a 	mov	r8,r23
 8004a60:	003d5406 	br	8003fb4 <___vfprintf_internal_r+0x13bc>
 8004a64:	d8801a04 	addi	r2,sp,104
 8004a68:	d8800315 	stw	r2,12(sp)
 8004a6c:	d9400917 	ldw	r5,36(sp)
 8004a70:	d8801704 	addi	r2,sp,92
 8004a74:	d9000517 	ldw	r4,20(sp)
 8004a78:	5d000044 	addi	r20,r11,1
 8004a7c:	d8800215 	stw	r2,8(sp)
 8004a80:	d8801604 	addi	r2,sp,88
 8004a84:	d8800115 	stw	r2,4(sp)
 8004a88:	dd000015 	stw	r20,0(sp)
 8004a8c:	01c00084 	movi	r7,2
 8004a90:	a80d883a 	mov	r6,r21
 8004a94:	dac00815 	stw	r11,32(sp)
 8004a98:	80051ec0 	call	80051ec <_dtoa_r>
 8004a9c:	dac00817 	ldw	r11,32(sp)
 8004aa0:	db001017 	ldw	r12,64(sp)
 8004aa4:	da001217 	ldw	r8,72(sp)
 8004aa8:	1023883a 	mov	r17,r2
 8004aac:	e08011d8 	cmpnei	r2,fp,71
 8004ab0:	103df926 	beq	r2,zero,8004298 <___vfprintf_internal_r+0x16a0>
 8004ab4:	8d29883a 	add	r20,r17,r20
 8004ab8:	003f6c06 	br	800486c <___vfprintf_internal_r+0x1c74>
 8004abc:	d8801a17 	ldw	r2,104(sp)
 8004ac0:	01000c04 	movi	r4,48
 8004ac4:	153f762e 	bgeu	r2,r20,80048a0 <___vfprintf_internal_r+0x1ca8>
 8004ac8:	10c00044 	addi	r3,r2,1
 8004acc:	d8c01a15 	stw	r3,104(sp)
 8004ad0:	11000005 	stb	r4,0(r2)
 8004ad4:	d8801a17 	ldw	r2,104(sp)
 8004ad8:	153ffb36 	bltu	r2,r20,8004ac8 <___vfprintf_internal_r+0x1ed0>
 8004adc:	003f7006 	br	80048a0 <___vfprintf_internal_r+0x1ca8>
 8004ae0:	db401543 	ldbu	r13,85(sp)
 8004ae4:	0017883a 	mov	r11,zero
 8004ae8:	003b5e06 	br	8003864 <___vfprintf_internal_r+0xc6c>
 8004aec:	d8800717 	ldw	r2,28(sp)
 8004af0:	d8c00817 	ldw	r3,32(sp)
 8004af4:	10c02216 	blt	r2,r3,8004b80 <___vfprintf_internal_r+0x1f88>
 8004af8:	6300004c 	andi	r12,r12,1
 8004afc:	6000601e 	bne	r12,zero,8004c80 <___vfprintf_internal_r+0x2088>
 8004b00:	102b883a 	mov	r21,r2
 8004b04:	1000010e 	bge	r2,zero,8004b0c <___vfprintf_internal_r+0x1f14>
 8004b08:	002b883a 	mov	r21,zero
 8004b0c:	dd000717 	ldw	r20,28(sp)
 8004b10:	070019c4 	movi	fp,103
 8004b14:	003f7206 	br	80048e0 <___vfprintf_internal_r+0x1ce8>
 8004b18:	d9000517 	ldw	r4,20(sp)
 8004b1c:	d9801c04 	addi	r6,sp,112
 8004b20:	980b883a 	mov	r5,r19
 8004b24:	800a1000 	call	800a100 <__sprint_r>
 8004b28:	1039121e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004b2c:	d8c01e17 	ldw	r3,120(sp)
 8004b30:	b811883a 	mov	r8,r23
 8004b34:	e03d1c0e 	bge	fp,zero,8003fa8 <___vfprintf_internal_r+0x13b0>
 8004b38:	003e5c06 	br	80044ac <___vfprintf_internal_r+0x18b4>
 8004b3c:	02c00184 	movi	r11,6
 8004b40:	003db206 	br	800420c <___vfprintf_internal_r+0x1614>
 8004b44:	d9000517 	ldw	r4,20(sp)
 8004b48:	d9801c04 	addi	r6,sp,112
 8004b4c:	980b883a 	mov	r5,r19
 8004b50:	800a1000 	call	800a100 <__sprint_r>
 8004b54:	1039071e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004b58:	d8801617 	ldw	r2,88(sp)
 8004b5c:	d9000817 	ldw	r4,32(sp)
 8004b60:	d8c01e17 	ldw	r3,120(sp)
 8004b64:	b811883a 	mov	r8,r23
 8004b68:	2085c83a 	sub	r2,r4,r2
 8004b6c:	003d3206 	br	8004038 <___vfprintf_internal_r+0x1440>
 8004b70:	582b883a 	mov	r21,r11
 8004b74:	dc800615 	stw	r18,24(sp)
 8004b78:	5829883a 	mov	r20,r11
 8004b7c:	0039bb06 	br	800326c <___vfprintf_internal_r+0x674>
 8004b80:	d8800817 	ldw	r2,32(sp)
 8004b84:	d8c00b17 	ldw	r3,44(sp)
 8004b88:	10e9883a 	add	r20,r2,r3
 8004b8c:	d8800717 	ldw	r2,28(sp)
 8004b90:	00800316 	blt	zero,r2,8004ba0 <___vfprintf_internal_r+0x1fa8>
 8004b94:	d8800717 	ldw	r2,28(sp)
 8004b98:	a0b9c83a 	sub	fp,r20,r2
 8004b9c:	e5000044 	addi	r20,fp,1
 8004ba0:	a02b883a 	mov	r21,r20
 8004ba4:	a0003b16 	blt	r20,zero,8004c94 <___vfprintf_internal_r+0x209c>
 8004ba8:	070019c4 	movi	fp,103
 8004bac:	003f4c06 	br	80048e0 <___vfprintf_internal_r+0x1ce8>
 8004bb0:	d9401545 	stb	r5,85(sp)
 8004bb4:	003ac006 	br	80036b8 <___vfprintf_internal_r+0xac0>
 8004bb8:	d9401545 	stb	r5,85(sp)
 8004bbc:	003a2006 	br	8003440 <___vfprintf_internal_r+0x848>
 8004bc0:	d9401545 	stb	r5,85(sp)
 8004bc4:	003a2e06 	br	8003480 <___vfprintf_internal_r+0x888>
 8004bc8:	d9401545 	stb	r5,85(sp)
 8004bcc:	00398306 	br	80031dc <___vfprintf_internal_r+0x5e4>
 8004bd0:	d9401545 	stb	r5,85(sp)
 8004bd4:	00395a06 	br	8003140 <___vfprintf_internal_r+0x548>
 8004bd8:	d9401545 	stb	r5,85(sp)
 8004bdc:	00394606 	br	80030f8 <___vfprintf_internal_r+0x500>
 8004be0:	d9401545 	stb	r5,85(sp)
 8004be4:	003a3606 	br	80034c0 <___vfprintf_internal_r+0x8c8>
 8004be8:	d9401545 	stb	r5,85(sp)
 8004bec:	003a7c06 	br	80035e0 <___vfprintf_internal_r+0x9e8>
 8004bf0:	d9401545 	stb	r5,85(sp)
 8004bf4:	003a4206 	br	8003500 <___vfprintf_internal_r+0x908>
 8004bf8:	d9401545 	stb	r5,85(sp)
 8004bfc:	003ac006 	br	8003700 <___vfprintf_internal_r+0xb08>
 8004c00:	8819883a 	mov	r12,r17
 8004c04:	dc400717 	ldw	r17,28(sp)
 8004c08:	a009883a 	mov	r4,r20
 8004c0c:	8029883a 	mov	r20,r16
 8004c10:	2021883a 	mov	r16,r4
 8004c14:	10800044 	addi	r2,r2,1
 8004c18:	1d07883a 	add	r3,r3,r20
 8004c1c:	43000015 	stw	r12,0(r8)
 8004c20:	45000115 	stw	r20,4(r8)
 8004c24:	d8c01e15 	stw	r3,120(sp)
 8004c28:	d8801d15 	stw	r2,116(sp)
 8004c2c:	11000208 	cmpgei	r4,r2,8
 8004c30:	203c1026 	beq	r4,zero,8003c74 <___vfprintf_internal_r+0x107c>
 8004c34:	d9000517 	ldw	r4,20(sp)
 8004c38:	d9801c04 	addi	r6,sp,112
 8004c3c:	980b883a 	mov	r5,r19
 8004c40:	800a1000 	call	800a100 <__sprint_r>
 8004c44:	1038cb1e 	bne	r2,zero,8002f74 <___vfprintf_internal_r+0x37c>
 8004c48:	d8c01e17 	ldw	r3,120(sp)
 8004c4c:	d8801d17 	ldw	r2,116(sp)
 8004c50:	b811883a 	mov	r8,r23
 8004c54:	003c0806 	br	8003c78 <___vfprintf_internal_r+0x1080>
 8004c58:	00bfffc4 	movi	r2,-1
 8004c5c:	d8800415 	stw	r2,16(sp)
 8004c60:	0038c706 	br	8002f80 <___vfprintf_internal_r+0x388>
 8004c64:	00800c04 	movi	r2,48
 8004c68:	a0c00c04 	addi	r3,r20,48
 8004c6c:	d88018c5 	stb	r2,99(sp)
 8004c70:	00800104 	movi	r2,4
 8004c74:	d8c01905 	stb	r3,100(sp)
 8004c78:	d8801115 	stw	r2,68(sp)
 8004c7c:	003dca06 	br	80043a8 <___vfprintf_internal_r+0x17b0>
 8004c80:	d8800717 	ldw	r2,28(sp)
 8004c84:	d8c00b17 	ldw	r3,44(sp)
 8004c88:	10e9883a 	add	r20,r2,r3
 8004c8c:	a02b883a 	mov	r21,r20
 8004c90:	a03fc50e 	bge	r20,zero,8004ba8 <___vfprintf_internal_r+0x1fb0>
 8004c94:	002b883a 	mov	r21,zero
 8004c98:	003fc306 	br	8004ba8 <___vfprintf_internal_r+0x1fb0>
 8004c9c:	d8800b17 	ldw	r2,44(sp)
 8004ca0:	1885883a 	add	r2,r3,r2
 8004ca4:	12e9883a 	add	r20,r2,r11
 8004ca8:	a02b883a 	mov	r21,r20
 8004cac:	a03f0c0e 	bge	r20,zero,80048e0 <___vfprintf_internal_r+0x1ce8>
 8004cb0:	002b883a 	mov	r21,zero
 8004cb4:	003f0a06 	br	80048e0 <___vfprintf_internal_r+0x1ce8>
 8004cb8:	d8800a17 	ldw	r2,40(sp)
 8004cbc:	10001d16 	blt	r2,zero,8004d34 <___vfprintf_internal_r+0x213c>
 8004cc0:	db401543 	ldbu	r13,85(sp)
 8004cc4:	e0801210 	cmplti	r2,fp,72
 8004cc8:	1000171e 	bne	r2,zero,8004d28 <___vfprintf_internal_r+0x2130>
 8004ccc:	04420074 	movhi	r17,2049
 8004cd0:	8c47b604 	addi	r17,r17,7896
 8004cd4:	003a3906 	br	80035bc <___vfprintf_internal_r+0x9c4>
 8004cd8:	00c00044 	movi	r3,1
 8004cdc:	18a9c83a 	sub	r20,r3,r2
 8004ce0:	00800b44 	movi	r2,45
 8004ce4:	d8801885 	stb	r2,98(sp)
 8004ce8:	003d8106 	br	80042f0 <___vfprintf_internal_r+0x16f8>
 8004cec:	6080004c 	andi	r2,r12,1
 8004cf0:	d8800715 	stw	r2,28(sp)
 8004cf4:	103db11e 	bne	r2,zero,80043bc <___vfprintf_internal_r+0x17c4>
 8004cf8:	003feb06 	br	8004ca8 <___vfprintf_internal_r+0x20b0>
 8004cfc:	4005883a 	mov	r2,r8
 8004d00:	6307c384 	addi	r12,r12,7950
 8004d04:	003ea206 	br	8004790 <___vfprintf_internal_r+0x1b98>
 8004d08:	1000031e 	bne	r2,zero,8004d18 <___vfprintf_internal_r+0x2120>
 8004d0c:	05400044 	movi	r21,1
 8004d10:	05000044 	movi	r20,1
 8004d14:	003ef206 	br	80048e0 <___vfprintf_internal_r+0x1ce8>
 8004d18:	d8800b17 	ldw	r2,44(sp)
 8004d1c:	10800044 	addi	r2,r2,1
 8004d20:	12e9883a 	add	r20,r2,r11
 8004d24:	003fe006 	br	8004ca8 <___vfprintf_internal_r+0x20b0>
 8004d28:	04420074 	movhi	r17,2049
 8004d2c:	8c47b504 	addi	r17,r17,7892
 8004d30:	003a2206 	br	80035bc <___vfprintf_internal_r+0x9c4>
 8004d34:	00800b44 	movi	r2,45
 8004d38:	d8801545 	stb	r2,85(sp)
 8004d3c:	03400b44 	movi	r13,45
 8004d40:	003fe006 	br	8004cc4 <___vfprintf_internal_r+0x20cc>
 8004d44:	00800084 	movi	r2,2
 8004d48:	d8801115 	stw	r2,68(sp)
 8004d4c:	003d9606 	br	80043a8 <___vfprintf_internal_r+0x17b0>
 8004d50:	d8c00617 	ldw	r3,24(sp)
 8004d54:	1ac00017 	ldw	r11,0(r3)
 8004d58:	18c00104 	addi	r3,r3,4
 8004d5c:	5800010e 	bge	r11,zero,8004d64 <___vfprintf_internal_r+0x216c>
 8004d60:	02ffffc4 	movi	r11,-1
 8004d64:	b7000043 	ldbu	fp,1(r22)
 8004d68:	d8c00615 	stw	r3,24(sp)
 8004d6c:	102d883a 	mov	r22,r2
 8004d70:	e2803fcc 	andi	r10,fp,255
 8004d74:	5280201c 	xori	r10,r10,128
 8004d78:	52bfe004 	addi	r10,r10,-128
 8004d7c:	0037f906 	br	8002d64 <___vfprintf_internal_r+0x16c>

08004d80 <__vfprintf_internal>:
 8004d80:	00820074 	movhi	r2,2049
 8004d84:	300f883a 	mov	r7,r6
 8004d88:	280d883a 	mov	r6,r5
 8004d8c:	200b883a 	mov	r5,r4
 8004d90:	11100c17 	ldw	r4,16432(r2)
 8004d94:	8002bf81 	jmpi	8002bf8 <___vfprintf_internal_r>

08004d98 <__sbprintf>:
 8004d98:	2880030b 	ldhu	r2,12(r5)
 8004d9c:	2b001917 	ldw	r12,100(r5)
 8004da0:	2ac0038b 	ldhu	r11,14(r5)
 8004da4:	2a800717 	ldw	r10,28(r5)
 8004da8:	2a400917 	ldw	r9,36(r5)
 8004dac:	defee204 	addi	sp,sp,-1144
 8004db0:	da001a04 	addi	r8,sp,104
 8004db4:	00c10004 	movi	r3,1024
 8004db8:	dc011a15 	stw	r16,1128(sp)
 8004dbc:	10bfff4c 	andi	r2,r2,65533
 8004dc0:	2821883a 	mov	r16,r5
 8004dc4:	d80b883a 	mov	r5,sp
 8004dc8:	dc811c15 	stw	r18,1136(sp)
 8004dcc:	dc411b15 	stw	r17,1132(sp)
 8004dd0:	dfc11d15 	stw	ra,1140(sp)
 8004dd4:	2025883a 	mov	r18,r4
 8004dd8:	d880030d 	sth	r2,12(sp)
 8004ddc:	db001915 	stw	r12,100(sp)
 8004de0:	dac0038d 	sth	r11,14(sp)
 8004de4:	da800715 	stw	r10,28(sp)
 8004de8:	da400915 	stw	r9,36(sp)
 8004dec:	da000015 	stw	r8,0(sp)
 8004df0:	da000415 	stw	r8,16(sp)
 8004df4:	d8c00215 	stw	r3,8(sp)
 8004df8:	d8c00515 	stw	r3,20(sp)
 8004dfc:	d8000615 	stw	zero,24(sp)
 8004e00:	8002bf80 	call	8002bf8 <___vfprintf_internal_r>
 8004e04:	1023883a 	mov	r17,r2
 8004e08:	10000d0e 	bge	r2,zero,8004e40 <__sbprintf+0xa8>
 8004e0c:	d880030b 	ldhu	r2,12(sp)
 8004e10:	1080100c 	andi	r2,r2,64
 8004e14:	10000326 	beq	r2,zero,8004e24 <__sbprintf+0x8c>
 8004e18:	8080030b 	ldhu	r2,12(r16)
 8004e1c:	10801014 	ori	r2,r2,64
 8004e20:	8080030d 	sth	r2,12(r16)
 8004e24:	8805883a 	mov	r2,r17
 8004e28:	dfc11d17 	ldw	ra,1140(sp)
 8004e2c:	dc811c17 	ldw	r18,1136(sp)
 8004e30:	dc411b17 	ldw	r17,1132(sp)
 8004e34:	dc011a17 	ldw	r16,1128(sp)
 8004e38:	dec11e04 	addi	sp,sp,1144
 8004e3c:	f800283a 	ret
 8004e40:	d80b883a 	mov	r5,sp
 8004e44:	9009883a 	mov	r4,r18
 8004e48:	8006adc0 	call	8006adc <_fflush_r>
 8004e4c:	103fef26 	beq	r2,zero,8004e0c <__sbprintf+0x74>
 8004e50:	047fffc4 	movi	r17,-1
 8004e54:	003fed06 	br	8004e0c <__sbprintf+0x74>

08004e58 <__swsetup_r>:
 8004e58:	00820074 	movhi	r2,2049
 8004e5c:	10900c17 	ldw	r2,16432(r2)
 8004e60:	defffd04 	addi	sp,sp,-12
 8004e64:	dc400115 	stw	r17,4(sp)
 8004e68:	dc000015 	stw	r16,0(sp)
 8004e6c:	dfc00215 	stw	ra,8(sp)
 8004e70:	2023883a 	mov	r17,r4
 8004e74:	2821883a 	mov	r16,r5
 8004e78:	10000226 	beq	r2,zero,8004e84 <__swsetup_r+0x2c>
 8004e7c:	10c00e17 	ldw	r3,56(r2)
 8004e80:	18002026 	beq	r3,zero,8004f04 <__swsetup_r+0xac>
 8004e84:	8080030b 	ldhu	r2,12(r16)
 8004e88:	10c0020c 	andi	r3,r2,8
 8004e8c:	1009883a 	mov	r4,r2
 8004e90:	18002226 	beq	r3,zero,8004f1c <__swsetup_r+0xc4>
 8004e94:	80c00417 	ldw	r3,16(r16)
 8004e98:	18002826 	beq	r3,zero,8004f3c <__swsetup_r+0xe4>
 8004e9c:	1100004c 	andi	r4,r2,1
 8004ea0:	20000b1e 	bne	r4,zero,8004ed0 <__swsetup_r+0x78>
 8004ea4:	1080008c 	andi	r2,r2,2
 8004ea8:	10002d1e 	bne	r2,zero,8004f60 <__swsetup_r+0x108>
 8004eac:	80800517 	ldw	r2,20(r16)
 8004eb0:	80800215 	stw	r2,8(r16)
 8004eb4:	18000b26 	beq	r3,zero,8004ee4 <__swsetup_r+0x8c>
 8004eb8:	0005883a 	mov	r2,zero
 8004ebc:	dfc00217 	ldw	ra,8(sp)
 8004ec0:	dc400117 	ldw	r17,4(sp)
 8004ec4:	dc000017 	ldw	r16,0(sp)
 8004ec8:	dec00304 	addi	sp,sp,12
 8004ecc:	f800283a 	ret
 8004ed0:	80800517 	ldw	r2,20(r16)
 8004ed4:	80000215 	stw	zero,8(r16)
 8004ed8:	0085c83a 	sub	r2,zero,r2
 8004edc:	80800615 	stw	r2,24(r16)
 8004ee0:	183ff51e 	bne	r3,zero,8004eb8 <__swsetup_r+0x60>
 8004ee4:	80c0030b 	ldhu	r3,12(r16)
 8004ee8:	0005883a 	mov	r2,zero
 8004eec:	1900200c 	andi	r4,r3,128
 8004ef0:	203ff226 	beq	r4,zero,8004ebc <__swsetup_r+0x64>
 8004ef4:	18c01014 	ori	r3,r3,64
 8004ef8:	80c0030d 	sth	r3,12(r16)
 8004efc:	00bfffc4 	movi	r2,-1
 8004f00:	003fee06 	br	8004ebc <__swsetup_r+0x64>
 8004f04:	1009883a 	mov	r4,r2
 8004f08:	8006e700 	call	8006e70 <__sinit>
 8004f0c:	8080030b 	ldhu	r2,12(r16)
 8004f10:	10c0020c 	andi	r3,r2,8
 8004f14:	1009883a 	mov	r4,r2
 8004f18:	183fde1e 	bne	r3,zero,8004e94 <__swsetup_r+0x3c>
 8004f1c:	2080040c 	andi	r2,r4,16
 8004f20:	10001f26 	beq	r2,zero,8004fa0 <__swsetup_r+0x148>
 8004f24:	2080010c 	andi	r2,r4,4
 8004f28:	10000f1e 	bne	r2,zero,8004f68 <__swsetup_r+0x110>
 8004f2c:	80c00417 	ldw	r3,16(r16)
 8004f30:	20800214 	ori	r2,r4,8
 8004f34:	8080030d 	sth	r2,12(r16)
 8004f38:	183fd81e 	bne	r3,zero,8004e9c <__swsetup_r+0x44>
 8004f3c:	1100a00c 	andi	r4,r2,640
 8004f40:	21008020 	cmpeqi	r4,r4,512
 8004f44:	203fd51e 	bne	r4,zero,8004e9c <__swsetup_r+0x44>
 8004f48:	800b883a 	mov	r5,r16
 8004f4c:	8809883a 	mov	r4,r17
 8004f50:	80079b40 	call	80079b4 <__smakebuf_r>
 8004f54:	8080030b 	ldhu	r2,12(r16)
 8004f58:	80c00417 	ldw	r3,16(r16)
 8004f5c:	003fcf06 	br	8004e9c <__swsetup_r+0x44>
 8004f60:	0005883a 	mov	r2,zero
 8004f64:	003fd206 	br	8004eb0 <__swsetup_r+0x58>
 8004f68:	81400c17 	ldw	r5,48(r16)
 8004f6c:	28000626 	beq	r5,zero,8004f88 <__swsetup_r+0x130>
 8004f70:	80801004 	addi	r2,r16,64
 8004f74:	28800326 	beq	r5,r2,8004f84 <__swsetup_r+0x12c>
 8004f78:	8809883a 	mov	r4,r17
 8004f7c:	8006fd40 	call	8006fd4 <_free_r>
 8004f80:	8100030b 	ldhu	r4,12(r16)
 8004f84:	80000c15 	stw	zero,48(r16)
 8004f88:	80c00417 	ldw	r3,16(r16)
 8004f8c:	00bff6c4 	movi	r2,-37
 8004f90:	1108703a 	and	r4,r2,r4
 8004f94:	80000115 	stw	zero,4(r16)
 8004f98:	80c00015 	stw	r3,0(r16)
 8004f9c:	003fe406 	br	8004f30 <__swsetup_r+0xd8>
 8004fa0:	00800244 	movi	r2,9
 8004fa4:	88800015 	stw	r2,0(r17)
 8004fa8:	20801014 	ori	r2,r4,64
 8004fac:	8080030d 	sth	r2,12(r16)
 8004fb0:	00bfffc4 	movi	r2,-1
 8004fb4:	003fc106 	br	8004ebc <__swsetup_r+0x64>

08004fb8 <quorem>:
 8004fb8:	defff204 	addi	sp,sp,-56
 8004fbc:	dc000415 	stw	r16,16(sp)
 8004fc0:	20800417 	ldw	r2,16(r4)
 8004fc4:	2c000417 	ldw	r16,16(r5)
 8004fc8:	dfc00d15 	stw	ra,52(sp)
 8004fcc:	df000c15 	stw	fp,48(sp)
 8004fd0:	ddc00b15 	stw	r23,44(sp)
 8004fd4:	dd800a15 	stw	r22,40(sp)
 8004fd8:	dd400915 	stw	r21,36(sp)
 8004fdc:	dd000815 	stw	r20,32(sp)
 8004fe0:	dcc00715 	stw	r19,28(sp)
 8004fe4:	dc800615 	stw	r18,24(sp)
 8004fe8:	dc400515 	stw	r17,20(sp)
 8004fec:	14007d16 	blt	r2,r16,80051e4 <quorem+0x22c>
 8004ff0:	843fffc4 	addi	r16,r16,-1
 8004ff4:	802c90ba 	slli	r22,r16,2
 8004ff8:	2f000504 	addi	fp,r5,20
 8004ffc:	24c00504 	addi	r19,r4,20
 8005000:	e5a5883a 	add	r18,fp,r22
 8005004:	9d85883a 	add	r2,r19,r22
 8005008:	95c00017 	ldw	r23,0(r18)
 800500c:	15000017 	ldw	r20,0(r2)
 8005010:	d9400215 	stw	r5,8(sp)
 8005014:	bdc00044 	addi	r23,r23,1
 8005018:	d9000115 	stw	r4,4(sp)
 800501c:	b80b883a 	mov	r5,r23
 8005020:	a009883a 	mov	r4,r20
 8005024:	dcc00015 	stw	r19,0(sp)
 8005028:	d8800315 	stw	r2,12(sp)
 800502c:	80029140 	call	8002914 <__udivsi3>
 8005030:	1023883a 	mov	r17,r2
 8005034:	a5c03236 	bltu	r20,r23,8005100 <quorem+0x148>
 8005038:	e02d883a 	mov	r22,fp
 800503c:	9829883a 	mov	r20,r19
 8005040:	002b883a 	mov	r21,zero
 8005044:	002f883a 	mov	r23,zero
 8005048:	b5800104 	addi	r22,r22,4
 800504c:	b4ffff17 	ldw	r19,-4(r22)
 8005050:	880b883a 	mov	r5,r17
 8005054:	a5000104 	addi	r20,r20,4
 8005058:	993fffcc 	andi	r4,r19,65535
 800505c:	80029d40 	call	80029d4 <__mulsi3>
 8005060:	9808d43a 	srli	r4,r19,16
 8005064:	880b883a 	mov	r5,r17
 8005068:	156b883a 	add	r21,r2,r21
 800506c:	80029d40 	call	80029d4 <__mulsi3>
 8005070:	a0ffff17 	ldw	r3,-4(r20)
 8005074:	a80ad43a 	srli	r5,r21,16
 8005078:	a93fffcc 	andi	r4,r21,65535
 800507c:	b909c83a 	sub	r4,r23,r4
 8005080:	19bfffcc 	andi	r6,r3,65535
 8005084:	2189883a 	add	r4,r4,r6
 8005088:	1806d43a 	srli	r3,r3,16
 800508c:	116b883a 	add	r21,r2,r5
 8005090:	2005d43a 	srai	r2,r4,16
 8005094:	a97fffcc 	andi	r5,r21,65535
 8005098:	1947c83a 	sub	r3,r3,r5
 800509c:	1887883a 	add	r3,r3,r2
 80050a0:	1804943a 	slli	r2,r3,16
 80050a4:	213fffcc 	andi	r4,r4,65535
 80050a8:	a82ad43a 	srli	r21,r21,16
 80050ac:	1108b03a 	or	r4,r2,r4
 80050b0:	a13fff15 	stw	r4,-4(r20)
 80050b4:	182fd43a 	srai	r23,r3,16
 80050b8:	95bfe32e 	bgeu	r18,r22,8005048 <quorem+0x90>
 80050bc:	d8c00317 	ldw	r3,12(sp)
 80050c0:	18800017 	ldw	r2,0(r3)
 80050c4:	10000e1e 	bne	r2,zero,8005100 <quorem+0x148>
 80050c8:	d9000017 	ldw	r4,0(sp)
 80050cc:	18bfff04 	addi	r2,r3,-4
 80050d0:	2080092e 	bgeu	r4,r2,80050f8 <quorem+0x140>
 80050d4:	18ffff17 	ldw	r3,-4(r3)
 80050d8:	18000326 	beq	r3,zero,80050e8 <quorem+0x130>
 80050dc:	00000606 	br	80050f8 <quorem+0x140>
 80050e0:	10c00017 	ldw	r3,0(r2)
 80050e4:	1800041e 	bne	r3,zero,80050f8 <quorem+0x140>
 80050e8:	d8c00017 	ldw	r3,0(sp)
 80050ec:	10bfff04 	addi	r2,r2,-4
 80050f0:	843fffc4 	addi	r16,r16,-1
 80050f4:	18bffa36 	bltu	r3,r2,80050e0 <quorem+0x128>
 80050f8:	d8800117 	ldw	r2,4(sp)
 80050fc:	14000415 	stw	r16,16(r2)
 8005100:	d9400217 	ldw	r5,8(sp)
 8005104:	d9000117 	ldw	r4,4(sp)
 8005108:	8008fe80 	call	8008fe8 <__mcmp>
 800510c:	10002816 	blt	r2,zero,80051b0 <quorem+0x1f8>
 8005110:	d9800017 	ldw	r6,0(sp)
 8005114:	8c400044 	addi	r17,r17,1
 8005118:	0007883a 	mov	r3,zero
 800511c:	e7000104 	addi	fp,fp,4
 8005120:	e13fff17 	ldw	r4,-4(fp)
 8005124:	31400017 	ldw	r5,0(r6)
 8005128:	31800104 	addi	r6,r6,4
 800512c:	20bfffcc 	andi	r2,r4,65535
 8005130:	1887c83a 	sub	r3,r3,r2
 8005134:	28bfffcc 	andi	r2,r5,65535
 8005138:	1885883a 	add	r2,r3,r2
 800513c:	2008d43a 	srli	r4,r4,16
 8005140:	2806d43a 	srli	r3,r5,16
 8005144:	100fd43a 	srai	r7,r2,16
 8005148:	117fffcc 	andi	r5,r2,65535
 800514c:	1907c83a 	sub	r3,r3,r4
 8005150:	19c7883a 	add	r3,r3,r7
 8005154:	1804943a 	slli	r2,r3,16
 8005158:	1807d43a 	srai	r3,r3,16
 800515c:	1144b03a 	or	r2,r2,r5
 8005160:	30bfff15 	stw	r2,-4(r6)
 8005164:	973fed2e 	bgeu	r18,fp,800511c <quorem+0x164>
 8005168:	800690ba 	slli	r3,r16,2
 800516c:	d9000017 	ldw	r4,0(sp)
 8005170:	20c7883a 	add	r3,r4,r3
 8005174:	18800017 	ldw	r2,0(r3)
 8005178:	10000d1e 	bne	r2,zero,80051b0 <quorem+0x1f8>
 800517c:	18bfff04 	addi	r2,r3,-4
 8005180:	2080092e 	bgeu	r4,r2,80051a8 <quorem+0x1f0>
 8005184:	18ffff17 	ldw	r3,-4(r3)
 8005188:	18000326 	beq	r3,zero,8005198 <quorem+0x1e0>
 800518c:	00000606 	br	80051a8 <quorem+0x1f0>
 8005190:	10c00017 	ldw	r3,0(r2)
 8005194:	1800041e 	bne	r3,zero,80051a8 <quorem+0x1f0>
 8005198:	d8c00017 	ldw	r3,0(sp)
 800519c:	10bfff04 	addi	r2,r2,-4
 80051a0:	843fffc4 	addi	r16,r16,-1
 80051a4:	18bffa36 	bltu	r3,r2,8005190 <quorem+0x1d8>
 80051a8:	d8800117 	ldw	r2,4(sp)
 80051ac:	14000415 	stw	r16,16(r2)
 80051b0:	8805883a 	mov	r2,r17
 80051b4:	dfc00d17 	ldw	ra,52(sp)
 80051b8:	df000c17 	ldw	fp,48(sp)
 80051bc:	ddc00b17 	ldw	r23,44(sp)
 80051c0:	dd800a17 	ldw	r22,40(sp)
 80051c4:	dd400917 	ldw	r21,36(sp)
 80051c8:	dd000817 	ldw	r20,32(sp)
 80051cc:	dcc00717 	ldw	r19,28(sp)
 80051d0:	dc800617 	ldw	r18,24(sp)
 80051d4:	dc400517 	ldw	r17,20(sp)
 80051d8:	dc000417 	ldw	r16,16(sp)
 80051dc:	dec00e04 	addi	sp,sp,56
 80051e0:	f800283a 	ret
 80051e4:	0005883a 	mov	r2,zero
 80051e8:	003ff206 	br	80051b4 <quorem+0x1fc>

080051ec <_dtoa_r>:
 80051ec:	20801017 	ldw	r2,64(r4)
 80051f0:	deffe204 	addi	sp,sp,-120
 80051f4:	df001c15 	stw	fp,112(sp)
 80051f8:	dcc01715 	stw	r19,92(sp)
 80051fc:	dc401515 	stw	r17,84(sp)
 8005200:	dc001415 	stw	r16,80(sp)
 8005204:	dfc01d15 	stw	ra,116(sp)
 8005208:	ddc01b15 	stw	r23,108(sp)
 800520c:	dd801a15 	stw	r22,104(sp)
 8005210:	dd401915 	stw	r21,100(sp)
 8005214:	dd001815 	stw	r20,96(sp)
 8005218:	dc801615 	stw	r18,88(sp)
 800521c:	d9400115 	stw	r5,4(sp)
 8005220:	d9c00215 	stw	r7,8(sp)
 8005224:	2039883a 	mov	fp,r4
 8005228:	3027883a 	mov	r19,r6
 800522c:	dc002017 	ldw	r16,128(sp)
 8005230:	3023883a 	mov	r17,r6
 8005234:	10000826 	beq	r2,zero,8005258 <_dtoa_r+0x6c>
 8005238:	21801117 	ldw	r6,68(r4)
 800523c:	00c00044 	movi	r3,1
 8005240:	100b883a 	mov	r5,r2
 8005244:	1986983a 	sll	r3,r3,r6
 8005248:	11800115 	stw	r6,4(r2)
 800524c:	10c00215 	stw	r3,8(r2)
 8005250:	800878c0 	call	800878c <_Bfree>
 8005254:	e0001015 	stw	zero,64(fp)
 8005258:	98018116 	blt	r19,zero,8005860 <_dtoa_r+0x674>
 800525c:	80000015 	stw	zero,0(r16)
 8005260:	989ffc2c 	andhi	r2,r19,32752
 8005264:	00dffc34 	movhi	r3,32752
 8005268:	10c18626 	beq	r2,r3,8005884 <_dtoa_r+0x698>
 800526c:	d9000117 	ldw	r4,4(sp)
 8005270:	000d883a 	mov	r6,zero
 8005274:	000f883a 	mov	r7,zero
 8005278:	880b883a 	mov	r5,r17
 800527c:	800de540 	call	800de54 <__eqdf2>
 8005280:	1000191e 	bne	r2,zero,80052e8 <_dtoa_r+0xfc>
 8005284:	d8c01f17 	ldw	r3,124(sp)
 8005288:	00800044 	movi	r2,1
 800528c:	18800015 	stw	r2,0(r3)
 8005290:	d8802117 	ldw	r2,132(sp)
 8005294:	10032426 	beq	r2,zero,8005f28 <_dtoa_r+0xd3c>
 8005298:	d9002117 	ldw	r4,132(sp)
 800529c:	00820074 	movhi	r2,2049
 80052a0:	1087c344 	addi	r2,r2,7949
 80052a4:	00c20074 	movhi	r3,2049
 80052a8:	20800015 	stw	r2,0(r4)
 80052ac:	1887c304 	addi	r2,r3,7948
 80052b0:	d8800315 	stw	r2,12(sp)
 80052b4:	d8800317 	ldw	r2,12(sp)
 80052b8:	dfc01d17 	ldw	ra,116(sp)
 80052bc:	df001c17 	ldw	fp,112(sp)
 80052c0:	ddc01b17 	ldw	r23,108(sp)
 80052c4:	dd801a17 	ldw	r22,104(sp)
 80052c8:	dd401917 	ldw	r21,100(sp)
 80052cc:	dd001817 	ldw	r20,96(sp)
 80052d0:	dcc01717 	ldw	r19,92(sp)
 80052d4:	dc801617 	ldw	r18,88(sp)
 80052d8:	dc401517 	ldw	r17,84(sp)
 80052dc:	dc001417 	ldw	r16,80(sp)
 80052e0:	dec01e04 	addi	sp,sp,120
 80052e4:	f800283a 	ret
 80052e8:	dc800117 	ldw	r18,4(sp)
 80052ec:	d8801204 	addi	r2,sp,72
 80052f0:	9820d53a 	srli	r16,r19,20
 80052f4:	d8800015 	stw	r2,0(sp)
 80052f8:	d9c01304 	addi	r7,sp,76
 80052fc:	900b883a 	mov	r5,r18
 8005300:	880d883a 	mov	r6,r17
 8005304:	e009883a 	mov	r4,fp
 8005308:	800935c0 	call	800935c <__d2b>
 800530c:	102b883a 	mov	r21,r2
 8005310:	8001701e 	bne	r16,zero,80058d4 <_dtoa_r+0x6e8>
 8005314:	dc801217 	ldw	r18,72(sp)
 8005318:	dc001317 	ldw	r16,76(sp)
 800531c:	9421883a 	add	r16,r18,r16
 8005320:	80810c84 	addi	r2,r16,1074
 8005324:	10c00850 	cmplti	r3,r2,33
 8005328:	18030f1e 	bne	r3,zero,8005f68 <_dtoa_r+0xd7c>
 800532c:	01001004 	movi	r4,64
 8005330:	2085c83a 	sub	r2,r4,r2
 8005334:	98a6983a 	sll	r19,r19,r2
 8005338:	d8800117 	ldw	r2,4(sp)
 800533c:	81010484 	addi	r4,r16,1042
 8005340:	1108d83a 	srl	r4,r2,r4
 8005344:	9908b03a 	or	r4,r19,r4
 8005348:	800f39c0 	call	800f39c <__floatunsidf>
 800534c:	1009883a 	mov	r4,r2
 8005350:	017f8434 	movhi	r5,65040
 8005354:	00800044 	movi	r2,1
 8005358:	194b883a 	add	r5,r3,r5
 800535c:	843fffc4 	addi	r16,r16,-1
 8005360:	d8800a15 	stw	r2,40(sp)
 8005364:	000d883a 	mov	r6,zero
 8005368:	01cffe34 	movhi	r7,16376
 800536c:	800e8940 	call	800e894 <__subdf3>
 8005370:	0198dbf4 	movhi	r6,25455
 8005374:	01cff4f4 	movhi	r7,16339
 8005378:	3190d844 	addi	r6,r6,17249
 800537c:	39e1e9c4 	addi	r7,r7,-30809
 8005380:	1009883a 	mov	r4,r2
 8005384:	180b883a 	mov	r5,r3
 8005388:	800e0b40 	call	800e0b4 <__muldf3>
 800538c:	01a2d874 	movhi	r6,35681
 8005390:	01cff1f4 	movhi	r7,16327
 8005394:	31b22cc4 	addi	r6,r6,-14157
 8005398:	39e28a04 	addi	r7,r7,-30168
 800539c:	180b883a 	mov	r5,r3
 80053a0:	1009883a 	mov	r4,r2
 80053a4:	800cb500 	call	800cb50 <__adddf3>
 80053a8:	8009883a 	mov	r4,r16
 80053ac:	1029883a 	mov	r20,r2
 80053b0:	1827883a 	mov	r19,r3
 80053b4:	800f2d40 	call	800f2d4 <__floatsidf>
 80053b8:	019427f4 	movhi	r6,20639
 80053bc:	01cff4f4 	movhi	r7,16339
 80053c0:	319e7ec4 	addi	r6,r6,31227
 80053c4:	39d104c4 	addi	r7,r7,17427
 80053c8:	1009883a 	mov	r4,r2
 80053cc:	180b883a 	mov	r5,r3
 80053d0:	800e0b40 	call	800e0b4 <__muldf3>
 80053d4:	100d883a 	mov	r6,r2
 80053d8:	180f883a 	mov	r7,r3
 80053dc:	a009883a 	mov	r4,r20
 80053e0:	980b883a 	mov	r5,r19
 80053e4:	800cb500 	call	800cb50 <__adddf3>
 80053e8:	1009883a 	mov	r4,r2
 80053ec:	180b883a 	mov	r5,r3
 80053f0:	1029883a 	mov	r20,r2
 80053f4:	1827883a 	mov	r19,r3
 80053f8:	800f2540 	call	800f254 <__fixdfsi>
 80053fc:	000d883a 	mov	r6,zero
 8005400:	000f883a 	mov	r7,zero
 8005404:	a009883a 	mov	r4,r20
 8005408:	980b883a 	mov	r5,r19
 800540c:	102d883a 	mov	r22,r2
 8005410:	800dfc40 	call	800dfc4 <__ledf2>
 8005414:	1002ba16 	blt	r2,zero,8005f00 <_dtoa_r+0xd14>
 8005418:	9421c83a 	sub	r16,r18,r16
 800541c:	b08005e8 	cmpgeui	r2,r22,23
 8005420:	853fffc4 	addi	r20,r16,-1
 8005424:	1002ae1e 	bne	r2,zero,8005ee0 <_dtoa_r+0xcf4>
 8005428:	b00690fa 	slli	r3,r22,3
 800542c:	00820074 	movhi	r2,2049
 8005430:	1087e704 	addi	r2,r2,8092
 8005434:	10c5883a 	add	r2,r2,r3
 8005438:	11800017 	ldw	r6,0(r2)
 800543c:	11c00117 	ldw	r7,4(r2)
 8005440:	d9000117 	ldw	r4,4(sp)
 8005444:	880b883a 	mov	r5,r17
 8005448:	800dfc40 	call	800dfc4 <__ledf2>
 800544c:	10026f0e 	bge	r2,zero,8005e0c <_dtoa_r+0xc20>
 8005450:	d8000915 	stw	zero,36(sp)
 8005454:	b5bfffc4 	addi	r22,r22,-1
 8005458:	a002a416 	blt	r20,zero,8005eec <_dtoa_r+0xd00>
 800545c:	d8000515 	stw	zero,20(sp)
 8005460:	b0026d0e 	bge	r22,zero,8005e18 <_dtoa_r+0xc2c>
 8005464:	d8800517 	ldw	r2,20(sp)
 8005468:	d8c00217 	ldw	r3,8(sp)
 800546c:	dd800415 	stw	r22,16(sp)
 8005470:	1585c83a 	sub	r2,r2,r22
 8005474:	d8800515 	stw	r2,20(sp)
 8005478:	0585c83a 	sub	r2,zero,r22
 800547c:	d8800815 	stw	r2,32(sp)
 8005480:	188002a8 	cmpgeui	r2,r3,10
 8005484:	002d883a 	mov	r22,zero
 8005488:	1002691e 	bne	r2,zero,8005e30 <_dtoa_r+0xc44>
 800548c:	18800190 	cmplti	r2,r3,6
 8005490:	1002ba1e 	bne	r2,zero,8005f7c <_dtoa_r+0xd90>
 8005494:	18bfff04 	addi	r2,r3,-4
 8005498:	d8800215 	stw	r2,8(sp)
 800549c:	0021883a 	mov	r16,zero
 80054a0:	d8c00217 	ldw	r3,8(sp)
 80054a4:	188000e0 	cmpeqi	r2,r3,3
 80054a8:	10039d1e 	bne	r2,zero,8006320 <_dtoa_r+0x1134>
 80054ac:	18800108 	cmpgei	r2,r3,4
 80054b0:	10027a26 	beq	r2,zero,8005e9c <_dtoa_r+0xcb0>
 80054b4:	d8c00217 	ldw	r3,8(sp)
 80054b8:	18800120 	cmpeqi	r2,r3,4
 80054bc:	10026926 	beq	r2,zero,8005e64 <_dtoa_r+0xc78>
 80054c0:	00800044 	movi	r2,1
 80054c4:	d8800715 	stw	r2,28(sp)
 80054c8:	d8801e17 	ldw	r2,120(sp)
 80054cc:	0083670e 	bge	zero,r2,800626c <_dtoa_r+0x1080>
 80054d0:	d8800b15 	stw	r2,44(sp)
 80054d4:	d8800615 	stw	r2,24(sp)
 80054d8:	100d883a 	mov	r6,r2
 80054dc:	e0001115 	stw	zero,68(fp)
 80054e0:	30800610 	cmplti	r2,r6,24
 80054e4:	dc800617 	ldw	r18,24(sp)
 80054e8:	1004eb1e 	bne	r2,zero,8006898 <_dtoa_r+0x16ac>
 80054ec:	00c00044 	movi	r3,1
 80054f0:	00800104 	movi	r2,4
 80054f4:	1085883a 	add	r2,r2,r2
 80054f8:	11000504 	addi	r4,r2,20
 80054fc:	180b883a 	mov	r5,r3
 8005500:	18c00044 	addi	r3,r3,1
 8005504:	313ffb2e 	bgeu	r6,r4,80054f4 <_dtoa_r+0x308>
 8005508:	e1401115 	stw	r5,68(fp)
 800550c:	e009883a 	mov	r4,fp
 8005510:	80086e80 	call	80086e8 <_Balloc>
 8005514:	d8800315 	stw	r2,12(sp)
 8005518:	e0801015 	stw	r2,64(fp)
 800551c:	948003e8 	cmpgeui	r18,r18,15
 8005520:	9000fe1e 	bne	r18,zero,800591c <_dtoa_r+0x730>
 8005524:	8000fd26 	beq	r16,zero,800591c <_dtoa_r+0x730>
 8005528:	d9000417 	ldw	r4,16(sp)
 800552c:	0103c60e 	bge	zero,r4,8006448 <_dtoa_r+0x125c>
 8005530:	208003cc 	andi	r2,r4,15
 8005534:	100690fa 	slli	r3,r2,3
 8005538:	202fd13a 	srai	r23,r4,4
 800553c:	00820074 	movhi	r2,2049
 8005540:	1087e704 	addi	r2,r2,8092
 8005544:	10c5883a 	add	r2,r2,r3
 8005548:	b8c0040c 	andi	r3,r23,16
 800554c:	12800017 	ldw	r10,0(r2)
 8005550:	12400117 	ldw	r9,4(r2)
 8005554:	1803621e 	bne	r3,zero,80062e0 <_dtoa_r+0x10f4>
 8005558:	d8800117 	ldw	r2,4(sp)
 800555c:	8827883a 	mov	r19,r17
 8005560:	04000084 	movi	r16,2
 8005564:	d8800c15 	stw	r2,48(sp)
 8005568:	04820074 	movhi	r18,2049
 800556c:	9487dd04 	addi	r18,r18,8052
 8005570:	b8000f26 	beq	r23,zero,80055b0 <_dtoa_r+0x3c4>
 8005574:	5005883a 	mov	r2,r10
 8005578:	4807883a 	mov	r3,r9
 800557c:	b980004c 	andi	r6,r23,1
 8005580:	1009883a 	mov	r4,r2
 8005584:	b82fd07a 	srai	r23,r23,1
 8005588:	180b883a 	mov	r5,r3
 800558c:	30000426 	beq	r6,zero,80055a0 <_dtoa_r+0x3b4>
 8005590:	91800017 	ldw	r6,0(r18)
 8005594:	91c00117 	ldw	r7,4(r18)
 8005598:	84000044 	addi	r16,r16,1
 800559c:	800e0b40 	call	800e0b4 <__muldf3>
 80055a0:	94800204 	addi	r18,r18,8
 80055a4:	b83ff51e 	bne	r23,zero,800557c <_dtoa_r+0x390>
 80055a8:	1015883a 	mov	r10,r2
 80055ac:	1813883a 	mov	r9,r3
 80055b0:	d9000c17 	ldw	r4,48(sp)
 80055b4:	980b883a 	mov	r5,r19
 80055b8:	500d883a 	mov	r6,r10
 80055bc:	480f883a 	mov	r7,r9
 80055c0:	800d4f00 	call	800d4f0 <__divdf3>
 80055c4:	1025883a 	mov	r18,r2
 80055c8:	1827883a 	mov	r19,r3
 80055cc:	d8800917 	ldw	r2,36(sp)
 80055d0:	10000626 	beq	r2,zero,80055ec <_dtoa_r+0x400>
 80055d4:	000d883a 	mov	r6,zero
 80055d8:	01cffc34 	movhi	r7,16368
 80055dc:	9009883a 	mov	r4,r18
 80055e0:	980b883a 	mov	r5,r19
 80055e4:	800dfc40 	call	800dfc4 <__ledf2>
 80055e8:	10042616 	blt	r2,zero,8006684 <_dtoa_r+0x1498>
 80055ec:	8009883a 	mov	r4,r16
 80055f0:	800f2d40 	call	800f2d4 <__floatsidf>
 80055f4:	900d883a 	mov	r6,r18
 80055f8:	980f883a 	mov	r7,r19
 80055fc:	1009883a 	mov	r4,r2
 8005600:	180b883a 	mov	r5,r3
 8005604:	800e0b40 	call	800e0b4 <__muldf3>
 8005608:	000d883a 	mov	r6,zero
 800560c:	01d00734 	movhi	r7,16412
 8005610:	1009883a 	mov	r4,r2
 8005614:	180b883a 	mov	r5,r3
 8005618:	800cb500 	call	800cb50 <__adddf3>
 800561c:	d8800c15 	stw	r2,48(sp)
 8005620:	00bf3034 	movhi	r2,64704
 8005624:	1885883a 	add	r2,r3,r2
 8005628:	d8800d15 	stw	r2,52(sp)
 800562c:	d8800617 	ldw	r2,24(sp)
 8005630:	10036d26 	beq	r2,zero,80063e8 <_dtoa_r+0x11fc>
 8005634:	d8800417 	ldw	r2,16(sp)
 8005638:	d8800f15 	stw	r2,60(sp)
 800563c:	d8800617 	ldw	r2,24(sp)
 8005640:	d8800e15 	stw	r2,56(sp)
 8005644:	980b883a 	mov	r5,r19
 8005648:	9009883a 	mov	r4,r18
 800564c:	800f2540 	call	800f254 <__fixdfsi>
 8005650:	1009883a 	mov	r4,r2
 8005654:	102f883a 	mov	r23,r2
 8005658:	800f2d40 	call	800f2d4 <__floatsidf>
 800565c:	100d883a 	mov	r6,r2
 8005660:	180f883a 	mov	r7,r3
 8005664:	9009883a 	mov	r4,r18
 8005668:	980b883a 	mov	r5,r19
 800566c:	800e8940 	call	800e894 <__subdf3>
 8005670:	1025883a 	mov	r18,r2
 8005674:	d8800e17 	ldw	r2,56(sp)
 8005678:	1821883a 	mov	r16,r3
 800567c:	ba400c04 	addi	r9,r23,48
 8005680:	10bfffc4 	addi	r2,r2,-1
 8005684:	100690fa 	slli	r3,r2,3
 8005688:	00820074 	movhi	r2,2049
 800568c:	1087e704 	addi	r2,r2,8092
 8005690:	10c5883a 	add	r2,r2,r3
 8005694:	11800017 	ldw	r6,0(r2)
 8005698:	d8c00317 	ldw	r3,12(sp)
 800569c:	11c00117 	ldw	r7,4(r2)
 80056a0:	d8800717 	ldw	r2,28(sp)
 80056a4:	4811883a 	mov	r8,r9
 80056a8:	da001015 	stw	r8,64(sp)
 80056ac:	1dc00044 	addi	r23,r3,1
 80056b0:	1003a226 	beq	r2,zero,800653c <_dtoa_r+0x1350>
 80056b4:	0009883a 	mov	r4,zero
 80056b8:	014ff834 	movhi	r5,16352
 80056bc:	da401115 	stw	r9,68(sp)
 80056c0:	800d4f00 	call	800d4f0 <__divdf3>
 80056c4:	d9800c17 	ldw	r6,48(sp)
 80056c8:	d9c00d17 	ldw	r7,52(sp)
 80056cc:	1009883a 	mov	r4,r2
 80056d0:	180b883a 	mov	r5,r3
 80056d4:	800e8940 	call	800e894 <__subdf3>
 80056d8:	1827883a 	mov	r19,r3
 80056dc:	da401117 	ldw	r9,68(sp)
 80056e0:	d8c00317 	ldw	r3,12(sp)
 80056e4:	900d883a 	mov	r6,r18
 80056e8:	800f883a 	mov	r7,r16
 80056ec:	1a400005 	stb	r9,0(r3)
 80056f0:	1009883a 	mov	r4,r2
 80056f4:	980b883a 	mov	r5,r19
 80056f8:	d8800c15 	stw	r2,48(sp)
 80056fc:	800ded40 	call	800ded4 <__gedf2>
 8005700:	da001017 	ldw	r8,64(sp)
 8005704:	00804816 	blt	zero,r2,8005828 <_dtoa_r+0x63c>
 8005708:	900d883a 	mov	r6,r18
 800570c:	800f883a 	mov	r7,r16
 8005710:	0009883a 	mov	r4,zero
 8005714:	014ffc34 	movhi	r5,16368
 8005718:	da000d15 	stw	r8,52(sp)
 800571c:	800e8940 	call	800e894 <__subdf3>
 8005720:	d9000c17 	ldw	r4,48(sp)
 8005724:	100d883a 	mov	r6,r2
 8005728:	180f883a 	mov	r7,r3
 800572c:	980b883a 	mov	r5,r19
 8005730:	800ded40 	call	800ded4 <__gedf2>
 8005734:	da000d17 	ldw	r8,52(sp)
 8005738:	00844e16 	blt	zero,r2,8006874 <_dtoa_r+0x1688>
 800573c:	d8c00e17 	ldw	r3,56(sp)
 8005740:	18800060 	cmpeqi	r2,r3,1
 8005744:	1000751e 	bne	r2,zero,800591c <_dtoa_r+0x730>
 8005748:	d8800317 	ldw	r2,12(sp)
 800574c:	dd800d15 	stw	r22,52(sp)
 8005750:	dd000e15 	stw	r20,56(sp)
 8005754:	10c5883a 	add	r2,r2,r3
 8005758:	dd000c17 	ldw	r20,48(sp)
 800575c:	102d883a 	mov	r22,r2
 8005760:	dc400c15 	stw	r17,48(sp)
 8005764:	00000806 	br	8005788 <_dtoa_r+0x59c>
 8005768:	800e8940 	call	800e894 <__subdf3>
 800576c:	a00d883a 	mov	r6,r20
 8005770:	980f883a 	mov	r7,r19
 8005774:	1009883a 	mov	r4,r2
 8005778:	180b883a 	mov	r5,r3
 800577c:	800dfc40 	call	800dfc4 <__ledf2>
 8005780:	10042316 	blt	r2,zero,8006810 <_dtoa_r+0x1624>
 8005784:	bd806226 	beq	r23,r22,8005910 <_dtoa_r+0x724>
 8005788:	a009883a 	mov	r4,r20
 800578c:	980b883a 	mov	r5,r19
 8005790:	000d883a 	mov	r6,zero
 8005794:	01d00934 	movhi	r7,16420
 8005798:	800e0b40 	call	800e0b4 <__muldf3>
 800579c:	000d883a 	mov	r6,zero
 80057a0:	01d00934 	movhi	r7,16420
 80057a4:	9009883a 	mov	r4,r18
 80057a8:	800b883a 	mov	r5,r16
 80057ac:	1029883a 	mov	r20,r2
 80057b0:	1827883a 	mov	r19,r3
 80057b4:	800e0b40 	call	800e0b4 <__muldf3>
 80057b8:	180b883a 	mov	r5,r3
 80057bc:	1009883a 	mov	r4,r2
 80057c0:	1821883a 	mov	r16,r3
 80057c4:	1025883a 	mov	r18,r2
 80057c8:	800f2540 	call	800f254 <__fixdfsi>
 80057cc:	1009883a 	mov	r4,r2
 80057d0:	1023883a 	mov	r17,r2
 80057d4:	800f2d40 	call	800f2d4 <__floatsidf>
 80057d8:	9009883a 	mov	r4,r18
 80057dc:	800b883a 	mov	r5,r16
 80057e0:	100d883a 	mov	r6,r2
 80057e4:	180f883a 	mov	r7,r3
 80057e8:	800e8940 	call	800e894 <__subdf3>
 80057ec:	bdc00044 	addi	r23,r23,1
 80057f0:	8c400c04 	addi	r17,r17,48
 80057f4:	a00d883a 	mov	r6,r20
 80057f8:	980f883a 	mov	r7,r19
 80057fc:	1009883a 	mov	r4,r2
 8005800:	180b883a 	mov	r5,r3
 8005804:	bc7fffc5 	stb	r17,-1(r23)
 8005808:	1025883a 	mov	r18,r2
 800580c:	1821883a 	mov	r16,r3
 8005810:	800dfc40 	call	800dfc4 <__ledf2>
 8005814:	900d883a 	mov	r6,r18
 8005818:	800f883a 	mov	r7,r16
 800581c:	0009883a 	mov	r4,zero
 8005820:	014ffc34 	movhi	r5,16368
 8005824:	103fd00e 	bge	r2,zero,8005768 <_dtoa_r+0x57c>
 8005828:	d8800f17 	ldw	r2,60(sp)
 800582c:	10800044 	addi	r2,r2,1
 8005830:	d8800415 	stw	r2,16(sp)
 8005834:	a80b883a 	mov	r5,r21
 8005838:	e009883a 	mov	r4,fp
 800583c:	800878c0 	call	800878c <_Bfree>
 8005840:	d8801f17 	ldw	r2,124(sp)
 8005844:	d8c00417 	ldw	r3,16(sp)
 8005848:	b8000005 	stb	zero,0(r23)
 800584c:	10c00015 	stw	r3,0(r2)
 8005850:	d8802117 	ldw	r2,132(sp)
 8005854:	103e9726 	beq	r2,zero,80052b4 <_dtoa_r+0xc8>
 8005858:	15c00015 	stw	r23,0(r2)
 800585c:	003e9506 	br	80052b4 <_dtoa_r+0xc8>
 8005860:	04600034 	movhi	r17,32768
 8005864:	8c7fffc4 	addi	r17,r17,-1
 8005868:	9c62703a 	and	r17,r19,r17
 800586c:	00800044 	movi	r2,1
 8005870:	8827883a 	mov	r19,r17
 8005874:	80800015 	stw	r2,0(r16)
 8005878:	00dffc34 	movhi	r3,32752
 800587c:	989ffc2c 	andhi	r2,r19,32752
 8005880:	10fe7a1e 	bne	r2,r3,800526c <_dtoa_r+0x80>
 8005884:	00800434 	movhi	r2,16
 8005888:	d8c01f17 	ldw	r3,124(sp)
 800588c:	10bfffc4 	addi	r2,r2,-1
 8005890:	98a6703a 	and	r19,r19,r2
 8005894:	0089c3c4 	movi	r2,9999
 8005898:	18800015 	stw	r2,0(r3)
 800589c:	d8800117 	ldw	r2,4(sp)
 80058a0:	98aab03a 	or	r21,r19,r2
 80058a4:	a800141e 	bne	r21,zero,80058f8 <_dtoa_r+0x70c>
 80058a8:	d8802117 	ldw	r2,132(sp)
 80058ac:	1003f626 	beq	r2,zero,8006888 <_dtoa_r+0x169c>
 80058b0:	00820074 	movhi	r2,2049
 80058b4:	1007883a 	mov	r3,r2
 80058b8:	18c7cd04 	addi	r3,r3,7988
 80058bc:	00820074 	movhi	r2,2049
 80058c0:	d8c00315 	stw	r3,12(sp)
 80058c4:	1087cf04 	addi	r2,r2,7996
 80058c8:	d8c02117 	ldw	r3,132(sp)
 80058cc:	18800015 	stw	r2,0(r3)
 80058d0:	003e7806 	br	80052b4 <_dtoa_r+0xc8>
 80058d4:	01400434 	movhi	r5,16
 80058d8:	297fffc4 	addi	r5,r5,-1
 80058dc:	894a703a 	and	r5,r17,r5
 80058e0:	9009883a 	mov	r4,r18
 80058e4:	294ffc34 	orhi	r5,r5,16368
 80058e8:	843f0044 	addi	r16,r16,-1023
 80058ec:	dc801217 	ldw	r18,72(sp)
 80058f0:	d8000a15 	stw	zero,40(sp)
 80058f4:	003e9b06 	br	8005364 <_dtoa_r+0x178>
 80058f8:	d8802117 	ldw	r2,132(sp)
 80058fc:	1002461e 	bne	r2,zero,8006218 <_dtoa_r+0x102c>
 8005900:	00820074 	movhi	r2,2049
 8005904:	1087cc04 	addi	r2,r2,7984
 8005908:	d8800315 	stw	r2,12(sp)
 800590c:	003e6906 	br	80052b4 <_dtoa_r+0xc8>
 8005910:	dd800d17 	ldw	r22,52(sp)
 8005914:	dd000e17 	ldw	r20,56(sp)
 8005918:	dc400c17 	ldw	r17,48(sp)
 800591c:	d8801317 	ldw	r2,76(sp)
 8005920:	10009f16 	blt	r2,zero,8005ba0 <_dtoa_r+0x9b4>
 8005924:	d9000417 	ldw	r4,16(sp)
 8005928:	20c003c8 	cmpgei	r3,r4,15
 800592c:	18009c1e 	bne	r3,zero,8005ba0 <_dtoa_r+0x9b4>
 8005930:	200690fa 	slli	r3,r4,3
 8005934:	00820074 	movhi	r2,2049
 8005938:	1087e704 	addi	r2,r2,8092
 800593c:	10c5883a 	add	r2,r2,r3
 8005940:	14000017 	ldw	r16,0(r2)
 8005944:	14800117 	ldw	r18,4(r2)
 8005948:	d8801e17 	ldw	r2,120(sp)
 800594c:	1000140e 	bge	r2,zero,80059a0 <_dtoa_r+0x7b4>
 8005950:	d8800617 	ldw	r2,24(sp)
 8005954:	00801216 	blt	zero,r2,80059a0 <_dtoa_r+0x7b4>
 8005958:	1002b81e 	bne	r2,zero,800643c <_dtoa_r+0x1250>
 800595c:	8009883a 	mov	r4,r16
 8005960:	900b883a 	mov	r5,r18
 8005964:	000d883a 	mov	r6,zero
 8005968:	01d00534 	movhi	r7,16404
 800596c:	800e0b40 	call	800e0b4 <__muldf3>
 8005970:	d9800117 	ldw	r6,4(sp)
 8005974:	880f883a 	mov	r7,r17
 8005978:	1009883a 	mov	r4,r2
 800597c:	180b883a 	mov	r5,r3
 8005980:	800ded40 	call	800ded4 <__gedf2>
 8005984:	0025883a 	mov	r18,zero
 8005988:	0021883a 	mov	r16,zero
 800598c:	1001fd16 	blt	r2,zero,8006184 <_dtoa_r+0xf98>
 8005990:	d8801e17 	ldw	r2,120(sp)
 8005994:	ddc00317 	ldw	r23,12(sp)
 8005998:	00a2303a 	nor	r17,zero,r2
 800599c:	0001ff06 	br	800619c <_dtoa_r+0xfb0>
 80059a0:	dcc00117 	ldw	r19,4(sp)
 80059a4:	800d883a 	mov	r6,r16
 80059a8:	900f883a 	mov	r7,r18
 80059ac:	880b883a 	mov	r5,r17
 80059b0:	9809883a 	mov	r4,r19
 80059b4:	800d4f00 	call	800d4f0 <__divdf3>
 80059b8:	180b883a 	mov	r5,r3
 80059bc:	1009883a 	mov	r4,r2
 80059c0:	800f2540 	call	800f254 <__fixdfsi>
 80059c4:	1009883a 	mov	r4,r2
 80059c8:	102d883a 	mov	r22,r2
 80059cc:	800f2d40 	call	800f2d4 <__floatsidf>
 80059d0:	800d883a 	mov	r6,r16
 80059d4:	900f883a 	mov	r7,r18
 80059d8:	1009883a 	mov	r4,r2
 80059dc:	180b883a 	mov	r5,r3
 80059e0:	800e0b40 	call	800e0b4 <__muldf3>
 80059e4:	880b883a 	mov	r5,r17
 80059e8:	100d883a 	mov	r6,r2
 80059ec:	180f883a 	mov	r7,r3
 80059f0:	9809883a 	mov	r4,r19
 80059f4:	800e8940 	call	800e894 <__subdf3>
 80059f8:	dc400317 	ldw	r17,12(sp)
 80059fc:	1009883a 	mov	r4,r2
 8005a00:	d9c00417 	ldw	r7,16(sp)
 8005a04:	b0800c04 	addi	r2,r22,48
 8005a08:	88800005 	stb	r2,0(r17)
 8005a0c:	d8800617 	ldw	r2,24(sp)
 8005a10:	39c00044 	addi	r7,r7,1
 8005a14:	d9c00415 	stw	r7,16(sp)
 8005a18:	11800060 	cmpeqi	r6,r2,1
 8005a1c:	180b883a 	mov	r5,r3
 8005a20:	2005883a 	mov	r2,r4
 8005a24:	8dc00044 	addi	r23,r17,1
 8005a28:	3000391e 	bne	r6,zero,8005b10 <_dtoa_r+0x924>
 8005a2c:	01d00934 	movhi	r7,16420
 8005a30:	800e0b40 	call	800e0b4 <__muldf3>
 8005a34:	000d883a 	mov	r6,zero
 8005a38:	000f883a 	mov	r7,zero
 8005a3c:	1009883a 	mov	r4,r2
 8005a40:	180b883a 	mov	r5,r3
 8005a44:	1027883a 	mov	r19,r2
 8005a48:	1829883a 	mov	r20,r3
 8005a4c:	800de540 	call	800de54 <__eqdf2>
 8005a50:	103f7826 	beq	r2,zero,8005834 <_dtoa_r+0x648>
 8005a54:	d8c00617 	ldw	r3,24(sp)
 8005a58:	8805883a 	mov	r2,r17
 8005a5c:	dd400115 	stw	r21,4(sp)
 8005a60:	8c400084 	addi	r17,r17,2
 8005a64:	10ed883a 	add	r22,r2,r3
 8005a68:	00000a06 	br	8005a94 <_dtoa_r+0x8a8>
 8005a6c:	800e0b40 	call	800e0b4 <__muldf3>
 8005a70:	000d883a 	mov	r6,zero
 8005a74:	000f883a 	mov	r7,zero
 8005a78:	1009883a 	mov	r4,r2
 8005a7c:	180b883a 	mov	r5,r3
 8005a80:	1027883a 	mov	r19,r2
 8005a84:	1829883a 	mov	r20,r3
 8005a88:	8c400044 	addi	r17,r17,1
 8005a8c:	800de540 	call	800de54 <__eqdf2>
 8005a90:	10029d26 	beq	r2,zero,8006508 <_dtoa_r+0x131c>
 8005a94:	800d883a 	mov	r6,r16
 8005a98:	900f883a 	mov	r7,r18
 8005a9c:	9809883a 	mov	r4,r19
 8005aa0:	a00b883a 	mov	r5,r20
 8005aa4:	800d4f00 	call	800d4f0 <__divdf3>
 8005aa8:	180b883a 	mov	r5,r3
 8005aac:	1009883a 	mov	r4,r2
 8005ab0:	800f2540 	call	800f254 <__fixdfsi>
 8005ab4:	1009883a 	mov	r4,r2
 8005ab8:	102b883a 	mov	r21,r2
 8005abc:	800f2d40 	call	800f2d4 <__floatsidf>
 8005ac0:	800d883a 	mov	r6,r16
 8005ac4:	900f883a 	mov	r7,r18
 8005ac8:	1009883a 	mov	r4,r2
 8005acc:	180b883a 	mov	r5,r3
 8005ad0:	800e0b40 	call	800e0b4 <__muldf3>
 8005ad4:	100d883a 	mov	r6,r2
 8005ad8:	180f883a 	mov	r7,r3
 8005adc:	9809883a 	mov	r4,r19
 8005ae0:	a00b883a 	mov	r5,r20
 8005ae4:	800e8940 	call	800e894 <__subdf3>
 8005ae8:	aa400c04 	addi	r9,r21,48
 8005aec:	8a7fffc5 	stb	r9,-1(r17)
 8005af0:	000d883a 	mov	r6,zero
 8005af4:	01d00934 	movhi	r7,16420
 8005af8:	1009883a 	mov	r4,r2
 8005afc:	180b883a 	mov	r5,r3
 8005b00:	882f883a 	mov	r23,r17
 8005b04:	b47fd91e 	bne	r22,r17,8005a6c <_dtoa_r+0x880>
 8005b08:	a82d883a 	mov	r22,r21
 8005b0c:	dd400117 	ldw	r21,4(sp)
 8005b10:	100d883a 	mov	r6,r2
 8005b14:	180f883a 	mov	r7,r3
 8005b18:	1009883a 	mov	r4,r2
 8005b1c:	180b883a 	mov	r5,r3
 8005b20:	800cb500 	call	800cb50 <__adddf3>
 8005b24:	800d883a 	mov	r6,r16
 8005b28:	900f883a 	mov	r7,r18
 8005b2c:	1009883a 	mov	r4,r2
 8005b30:	180b883a 	mov	r5,r3
 8005b34:	1027883a 	mov	r19,r2
 8005b38:	1823883a 	mov	r17,r3
 8005b3c:	800ded40 	call	800ded4 <__gedf2>
 8005b40:	00800816 	blt	zero,r2,8005b64 <_dtoa_r+0x978>
 8005b44:	800d883a 	mov	r6,r16
 8005b48:	900f883a 	mov	r7,r18
 8005b4c:	9809883a 	mov	r4,r19
 8005b50:	880b883a 	mov	r5,r17
 8005b54:	800de540 	call	800de54 <__eqdf2>
 8005b58:	103f361e 	bne	r2,zero,8005834 <_dtoa_r+0x648>
 8005b5c:	b580004c 	andi	r22,r22,1
 8005b60:	b03f3426 	beq	r22,zero,8005834 <_dtoa_r+0x648>
 8005b64:	ba3fffc3 	ldbu	r8,-1(r23)
 8005b68:	d9000317 	ldw	r4,12(sp)
 8005b6c:	00000306 	br	8005b7c <_dtoa_r+0x990>
 8005b70:	20c30e26 	beq	r4,r3,80067ac <_dtoa_r+0x15c0>
 8005b74:	1a3fffc3 	ldbu	r8,-1(r3)
 8005b78:	182f883a 	mov	r23,r3
 8005b7c:	40803fcc 	andi	r2,r8,255
 8005b80:	1080201c 	xori	r2,r2,128
 8005b84:	10bfe004 	addi	r2,r2,-128
 8005b88:	10800e60 	cmpeqi	r2,r2,57
 8005b8c:	b8ffffc4 	addi	r3,r23,-1
 8005b90:	103ff71e 	bne	r2,zero,8005b70 <_dtoa_r+0x984>
 8005b94:	42000044 	addi	r8,r8,1
 8005b98:	1a000005 	stb	r8,0(r3)
 8005b9c:	003f2506 	br	8005834 <_dtoa_r+0x648>
 8005ba0:	d8c00717 	ldw	r3,28(sp)
 8005ba4:	1800e426 	beq	r3,zero,8005f38 <_dtoa_r+0xd4c>
 8005ba8:	d8c00217 	ldw	r3,8(sp)
 8005bac:	18c00088 	cmpgei	r3,r3,2
 8005bb0:	1801ec26 	beq	r3,zero,8006364 <_dtoa_r+0x1178>
 8005bb4:	d8800617 	ldw	r2,24(sp)
 8005bb8:	14bfffc4 	addi	r18,r2,-1
 8005bbc:	d8800817 	ldw	r2,32(sp)
 8005bc0:	1481c50e 	bge	r2,r18,80062d8 <_dtoa_r+0x10ec>
 8005bc4:	d8800817 	ldw	r2,32(sp)
 8005bc8:	dc800815 	stw	r18,32(sp)
 8005bcc:	9085c83a 	sub	r2,r18,r2
 8005bd0:	b0ad883a 	add	r22,r22,r2
 8005bd4:	0025883a 	mov	r18,zero
 8005bd8:	d8800617 	ldw	r2,24(sp)
 8005bdc:	10024c16 	blt	r2,zero,8006510 <_dtoa_r+0x1324>
 8005be0:	d8c00517 	ldw	r3,20(sp)
 8005be4:	a0a9883a 	add	r20,r20,r2
 8005be8:	1885883a 	add	r2,r3,r2
 8005bec:	1827883a 	mov	r19,r3
 8005bf0:	d8800515 	stw	r2,20(sp)
 8005bf4:	01400044 	movi	r5,1
 8005bf8:	e009883a 	mov	r4,fp
 8005bfc:	8008b100 	call	8008b10 <__i2b>
 8005c00:	1021883a 	mov	r16,r2
 8005c04:	04c0080e 	bge	zero,r19,8005c28 <_dtoa_r+0xa3c>
 8005c08:	0500070e 	bge	zero,r20,8005c28 <_dtoa_r+0xa3c>
 8005c0c:	9805883a 	mov	r2,r19
 8005c10:	a4c1a916 	blt	r20,r19,80062b8 <_dtoa_r+0x10cc>
 8005c14:	d8c00517 	ldw	r3,20(sp)
 8005c18:	98a7c83a 	sub	r19,r19,r2
 8005c1c:	a0a9c83a 	sub	r20,r20,r2
 8005c20:	1887c83a 	sub	r3,r3,r2
 8005c24:	d8c00515 	stw	r3,20(sp)
 8005c28:	d8800817 	ldw	r2,32(sp)
 8005c2c:	10001426 	beq	r2,zero,8005c80 <_dtoa_r+0xa94>
 8005c30:	d8800717 	ldw	r2,28(sp)
 8005c34:	10017226 	beq	r2,zero,8006200 <_dtoa_r+0x1014>
 8005c38:	04800e0e 	bge	zero,r18,8005c74 <_dtoa_r+0xa88>
 8005c3c:	800b883a 	mov	r5,r16
 8005c40:	900d883a 	mov	r6,r18
 8005c44:	e009883a 	mov	r4,fp
 8005c48:	8008d840 	call	8008d84 <__pow5mult>
 8005c4c:	a80d883a 	mov	r6,r21
 8005c50:	100b883a 	mov	r5,r2
 8005c54:	e009883a 	mov	r4,fp
 8005c58:	1021883a 	mov	r16,r2
 8005c5c:	8008b440 	call	8008b44 <__multiply>
 8005c60:	102f883a 	mov	r23,r2
 8005c64:	a80b883a 	mov	r5,r21
 8005c68:	e009883a 	mov	r4,fp
 8005c6c:	800878c0 	call	800878c <_Bfree>
 8005c70:	b82b883a 	mov	r21,r23
 8005c74:	d8800817 	ldw	r2,32(sp)
 8005c78:	148dc83a 	sub	r6,r2,r18
 8005c7c:	3001611e 	bne	r6,zero,8006204 <_dtoa_r+0x1018>
 8005c80:	01400044 	movi	r5,1
 8005c84:	e009883a 	mov	r4,fp
 8005c88:	8008b100 	call	8008b10 <__i2b>
 8005c8c:	1025883a 	mov	r18,r2
 8005c90:	0580bc16 	blt	zero,r22,8005f84 <_dtoa_r+0xd98>
 8005c94:	d8800217 	ldw	r2,8(sp)
 8005c98:	10800088 	cmpgei	r2,r2,2
 8005c9c:	10016526 	beq	r2,zero,8006234 <_dtoa_r+0x1048>
 8005ca0:	0023883a 	mov	r17,zero
 8005ca4:	00800044 	movi	r2,1
 8005ca8:	b000bf1e 	bne	r22,zero,8005fa8 <_dtoa_r+0xdbc>
 8005cac:	1505883a 	add	r2,r2,r20
 8005cb0:	108007cc 	andi	r2,r2,31
 8005cb4:	1000aa26 	beq	r2,zero,8005f60 <_dtoa_r+0xd74>
 8005cb8:	00c00804 	movi	r3,32
 8005cbc:	1887c83a 	sub	r3,r3,r2
 8005cc0:	19000150 	cmplti	r4,r3,5
 8005cc4:	2002f61e 	bne	r4,zero,80068a0 <_dtoa_r+0x16b4>
 8005cc8:	00c00704 	movi	r3,28
 8005ccc:	1885c83a 	sub	r2,r3,r2
 8005cd0:	d8c00517 	ldw	r3,20(sp)
 8005cd4:	98a7883a 	add	r19,r19,r2
 8005cd8:	a0a9883a 	add	r20,r20,r2
 8005cdc:	1887883a 	add	r3,r3,r2
 8005ce0:	d8c00515 	stw	r3,20(sp)
 8005ce4:	d8800517 	ldw	r2,20(sp)
 8005ce8:	00809716 	blt	zero,r2,8005f48 <_dtoa_r+0xd5c>
 8005cec:	0500050e 	bge	zero,r20,8005d04 <_dtoa_r+0xb18>
 8005cf0:	900b883a 	mov	r5,r18
 8005cf4:	a00d883a 	mov	r6,r20
 8005cf8:	e009883a 	mov	r4,fp
 8005cfc:	8008eac0 	call	8008eac <__lshift>
 8005d00:	1025883a 	mov	r18,r2
 8005d04:	d8800917 	ldw	r2,36(sp)
 8005d08:	10012b1e 	bne	r2,zero,80061b8 <_dtoa_r+0xfcc>
 8005d0c:	d8800617 	ldw	r2,24(sp)
 8005d10:	00810d0e 	bge	zero,r2,8006148 <_dtoa_r+0xf5c>
 8005d14:	d8800417 	ldw	r2,16(sp)
 8005d18:	10800044 	addi	r2,r2,1
 8005d1c:	d8800415 	stw	r2,16(sp)
 8005d20:	d8800717 	ldw	r2,28(sp)
 8005d24:	1000b21e 	bne	r2,zero,8005ff0 <_dtoa_r+0xe04>
 8005d28:	ddc00317 	ldw	r23,12(sp)
 8005d2c:	04400044 	movi	r17,1
 8005d30:	dcc00617 	ldw	r19,24(sp)
 8005d34:	00000306 	br	8005d44 <_dtoa_r+0xb58>
 8005d38:	80087b00 	call	80087b0 <__multadd>
 8005d3c:	102b883a 	mov	r21,r2
 8005d40:	8c400044 	addi	r17,r17,1
 8005d44:	900b883a 	mov	r5,r18
 8005d48:	a809883a 	mov	r4,r21
 8005d4c:	8004fb80 	call	8004fb8 <quorem>
 8005d50:	10800c04 	addi	r2,r2,48
 8005d54:	bdc00044 	addi	r23,r23,1
 8005d58:	b8bfffc5 	stb	r2,-1(r23)
 8005d5c:	000f883a 	mov	r7,zero
 8005d60:	01800284 	movi	r6,10
 8005d64:	a80b883a 	mov	r5,r21
 8005d68:	e009883a 	mov	r4,fp
 8005d6c:	8cfff216 	blt	r17,r19,8005d38 <_dtoa_r+0xb4c>
 8005d70:	1011883a 	mov	r8,r2
 8005d74:	0029883a 	mov	r20,zero
 8005d78:	a80b883a 	mov	r5,r21
 8005d7c:	01800044 	movi	r6,1
 8005d80:	e009883a 	mov	r4,fp
 8005d84:	da000115 	stw	r8,4(sp)
 8005d88:	8008eac0 	call	8008eac <__lshift>
 8005d8c:	900b883a 	mov	r5,r18
 8005d90:	1009883a 	mov	r4,r2
 8005d94:	102b883a 	mov	r21,r2
 8005d98:	8008fe80 	call	8008fe8 <__mcmp>
 8005d9c:	b8ffffc3 	ldbu	r3,-1(r23)
 8005da0:	0081610e 	bge	zero,r2,8006328 <_dtoa_r+0x113c>
 8005da4:	d9400317 	ldw	r5,12(sp)
 8005da8:	00000306 	br	8005db8 <_dtoa_r+0xbcc>
 8005dac:	29017726 	beq	r5,r4,800638c <_dtoa_r+0x11a0>
 8005db0:	20ffffc3 	ldbu	r3,-1(r4)
 8005db4:	202f883a 	mov	r23,r4
 8005db8:	18803fcc 	andi	r2,r3,255
 8005dbc:	1080201c 	xori	r2,r2,128
 8005dc0:	10bfe004 	addi	r2,r2,-128
 8005dc4:	10800e60 	cmpeqi	r2,r2,57
 8005dc8:	b93fffc4 	addi	r4,r23,-1
 8005dcc:	103ff71e 	bne	r2,zero,8005dac <_dtoa_r+0xbc0>
 8005dd0:	18c00044 	addi	r3,r3,1
 8005dd4:	20c00005 	stb	r3,0(r4)
 8005dd8:	900b883a 	mov	r5,r18
 8005ddc:	e009883a 	mov	r4,fp
 8005de0:	800878c0 	call	800878c <_Bfree>
 8005de4:	803e9326 	beq	r16,zero,8005834 <_dtoa_r+0x648>
 8005de8:	a0000426 	beq	r20,zero,8005dfc <_dtoa_r+0xc10>
 8005dec:	a4000326 	beq	r20,r16,8005dfc <_dtoa_r+0xc10>
 8005df0:	a00b883a 	mov	r5,r20
 8005df4:	e009883a 	mov	r4,fp
 8005df8:	800878c0 	call	800878c <_Bfree>
 8005dfc:	800b883a 	mov	r5,r16
 8005e00:	e009883a 	mov	r4,fp
 8005e04:	800878c0 	call	800878c <_Bfree>
 8005e08:	003e8a06 	br	8005834 <_dtoa_r+0x648>
 8005e0c:	d8000915 	stw	zero,36(sp)
 8005e10:	a0003616 	blt	r20,zero,8005eec <_dtoa_r+0xd00>
 8005e14:	d8000515 	stw	zero,20(sp)
 8005e18:	d8c00217 	ldw	r3,8(sp)
 8005e1c:	dd800415 	stw	r22,16(sp)
 8005e20:	d8000815 	stw	zero,32(sp)
 8005e24:	188002a8 	cmpgeui	r2,r3,10
 8005e28:	a5a9883a 	add	r20,r20,r22
 8005e2c:	103d9726 	beq	r2,zero,800548c <_dtoa_r+0x2a0>
 8005e30:	00800044 	movi	r2,1
 8005e34:	d8800715 	stw	r2,28(sp)
 8005e38:	00bfffc4 	movi	r2,-1
 8005e3c:	04bfffc4 	movi	r18,-1
 8005e40:	04000044 	movi	r16,1
 8005e44:	d8000215 	stw	zero,8(sp)
 8005e48:	d8800615 	stw	r2,24(sp)
 8005e4c:	d8001e15 	stw	zero,120(sp)
 8005e50:	d8800617 	ldw	r2,24(sp)
 8005e54:	e0001115 	stw	zero,68(fp)
 8005e58:	000b883a 	mov	r5,zero
 8005e5c:	d8800b15 	stw	r2,44(sp)
 8005e60:	003daa06 	br	800550c <_dtoa_r+0x320>
 8005e64:	18800160 	cmpeqi	r2,r3,5
 8005e68:	00c00044 	movi	r3,1
 8005e6c:	d8c00715 	stw	r3,28(sp)
 8005e70:	10000d26 	beq	r2,zero,8005ea8 <_dtoa_r+0xcbc>
 8005e74:	d8801e17 	ldw	r2,120(sp)
 8005e78:	d8c00417 	ldw	r3,16(sp)
 8005e7c:	10c5883a 	add	r2,r2,r3
 8005e80:	d8800b15 	stw	r2,44(sp)
 8005e84:	10800044 	addi	r2,r2,1
 8005e88:	d8800615 	stw	r2,24(sp)
 8005e8c:	100d883a 	mov	r6,r2
 8005e90:	00bd9216 	blt	zero,r2,80054dc <_dtoa_r+0x2f0>
 8005e94:	01800044 	movi	r6,1
 8005e98:	003d9006 	br	80054dc <_dtoa_r+0x2f0>
 8005e9c:	188000a0 	cmpeqi	r2,r3,2
 8005ea0:	d8000715 	stw	zero,28(sp)
 8005ea4:	103d881e 	bne	r2,zero,80054c8 <_dtoa_r+0x2dc>
 8005ea8:	e0001115 	stw	zero,68(fp)
 8005eac:	000b883a 	mov	r5,zero
 8005eb0:	e009883a 	mov	r4,fp
 8005eb4:	80086e80 	call	80086e8 <_Balloc>
 8005eb8:	d8800315 	stw	r2,12(sp)
 8005ebc:	e0801015 	stw	r2,64(fp)
 8005ec0:	00bfffc4 	movi	r2,-1
 8005ec4:	d8800b15 	stw	r2,44(sp)
 8005ec8:	00800044 	movi	r2,1
 8005ecc:	d8800715 	stw	r2,28(sp)
 8005ed0:	00bfffc4 	movi	r2,-1
 8005ed4:	d8001e15 	stw	zero,120(sp)
 8005ed8:	d8800615 	stw	r2,24(sp)
 8005edc:	003e8f06 	br	800591c <_dtoa_r+0x730>
 8005ee0:	00800044 	movi	r2,1
 8005ee4:	d8800915 	stw	r2,36(sp)
 8005ee8:	a03d5c0e 	bge	r20,zero,800545c <_dtoa_r+0x270>
 8005eec:	04800044 	movi	r18,1
 8005ef0:	9405c83a 	sub	r2,r18,r16
 8005ef4:	d8800515 	stw	r2,20(sp)
 8005ef8:	0029883a 	mov	r20,zero
 8005efc:	003d5806 	br	8005460 <_dtoa_r+0x274>
 8005f00:	b009883a 	mov	r4,r22
 8005f04:	800f2d40 	call	800f2d4 <__floatsidf>
 8005f08:	a00d883a 	mov	r6,r20
 8005f0c:	980f883a 	mov	r7,r19
 8005f10:	1009883a 	mov	r4,r2
 8005f14:	180b883a 	mov	r5,r3
 8005f18:	800de540 	call	800de54 <__eqdf2>
 8005f1c:	103d3e26 	beq	r2,zero,8005418 <_dtoa_r+0x22c>
 8005f20:	b5bfffc4 	addi	r22,r22,-1
 8005f24:	003d3c06 	br	8005418 <_dtoa_r+0x22c>
 8005f28:	00820074 	movhi	r2,2049
 8005f2c:	1087c304 	addi	r2,r2,7948
 8005f30:	d8800315 	stw	r2,12(sp)
 8005f34:	003cdf06 	br	80052b4 <_dtoa_r+0xc8>
 8005f38:	dc800817 	ldw	r18,32(sp)
 8005f3c:	dcc00517 	ldw	r19,20(sp)
 8005f40:	0021883a 	mov	r16,zero
 8005f44:	003f2f06 	br	8005c04 <_dtoa_r+0xa18>
 8005f48:	a80b883a 	mov	r5,r21
 8005f4c:	100d883a 	mov	r6,r2
 8005f50:	e009883a 	mov	r4,fp
 8005f54:	8008eac0 	call	8008eac <__lshift>
 8005f58:	102b883a 	mov	r21,r2
 8005f5c:	003f6306 	br	8005cec <_dtoa_r+0xb00>
 8005f60:	00800704 	movi	r2,28
 8005f64:	003f5a06 	br	8005cd0 <_dtoa_r+0xae4>
 8005f68:	01000804 	movi	r4,32
 8005f6c:	2089c83a 	sub	r4,r4,r2
 8005f70:	d8800117 	ldw	r2,4(sp)
 8005f74:	1108983a 	sll	r4,r2,r4
 8005f78:	003cf306 	br	8005348 <_dtoa_r+0x15c>
 8005f7c:	04000044 	movi	r16,1
 8005f80:	003d4706 	br	80054a0 <_dtoa_r+0x2b4>
 8005f84:	b00d883a 	mov	r6,r22
 8005f88:	100b883a 	mov	r5,r2
 8005f8c:	e009883a 	mov	r4,fp
 8005f90:	8008d840 	call	8008d84 <__pow5mult>
 8005f94:	1025883a 	mov	r18,r2
 8005f98:	d8800217 	ldw	r2,8(sp)
 8005f9c:	10800090 	cmplti	r2,r2,2
 8005fa0:	10012f1e 	bne	r2,zero,8006460 <_dtoa_r+0x1274>
 8005fa4:	0023883a 	mov	r17,zero
 8005fa8:	90800417 	ldw	r2,16(r18)
 8005fac:	10800104 	addi	r2,r2,4
 8005fb0:	100490ba 	slli	r2,r2,2
 8005fb4:	9085883a 	add	r2,r18,r2
 8005fb8:	11000017 	ldw	r4,0(r2)
 8005fbc:	80089fc0 	call	80089fc <__hi0bits>
 8005fc0:	00c00804 	movi	r3,32
 8005fc4:	1885c83a 	sub	r2,r3,r2
 8005fc8:	003f3806 	br	8005cac <_dtoa_r+0xac0>
 8005fcc:	800b883a 	mov	r5,r16
 8005fd0:	000f883a 	mov	r7,zero
 8005fd4:	01800284 	movi	r6,10
 8005fd8:	e009883a 	mov	r4,fp
 8005fdc:	80087b00 	call	80087b0 <__multadd>
 8005fe0:	1021883a 	mov	r16,r2
 8005fe4:	d8800b17 	ldw	r2,44(sp)
 8005fe8:	00821b0e 	bge	zero,r2,8006858 <_dtoa_r+0x166c>
 8005fec:	d8800615 	stw	r2,24(sp)
 8005ff0:	04c0b316 	blt	zero,r19,80062c0 <_dtoa_r+0x10d4>
 8005ff4:	8801341e 	bne	r17,zero,80064c8 <_dtoa_r+0x12dc>
 8005ff8:	8027883a 	mov	r19,r16
 8005ffc:	dc400317 	ldw	r17,12(sp)
 8006000:	d8c00617 	ldw	r3,24(sp)
 8006004:	d8800117 	ldw	r2,4(sp)
 8006008:	8dffffc4 	addi	r23,r17,-1
 800600c:	b8c7883a 	add	r3,r23,r3
 8006010:	d8c00615 	stw	r3,24(sp)
 8006014:	d8c00217 	ldw	r3,8(sp)
 8006018:	1080004c 	andi	r2,r2,1
 800601c:	d8800815 	stw	r2,32(sp)
 8006020:	10c4b03a 	or	r2,r2,r3
 8006024:	d8800715 	stw	r2,28(sp)
 8006028:	00002c06 	br	80060dc <_dtoa_r+0xef0>
 800602c:	b80b883a 	mov	r5,r23
 8006030:	a809883a 	mov	r4,r21
 8006034:	da000515 	stw	r8,20(sp)
 8006038:	8008fe80 	call	8008fe8 <__mcmp>
 800603c:	b80b883a 	mov	r5,r23
 8006040:	e009883a 	mov	r4,fp
 8006044:	d8800115 	stw	r2,4(sp)
 8006048:	800878c0 	call	800878c <_Bfree>
 800604c:	d8800117 	ldw	r2,4(sp)
 8006050:	da000517 	ldw	r8,20(sp)
 8006054:	1000021e 	bne	r2,zero,8006060 <_dtoa_r+0xe74>
 8006058:	d8c00717 	ldw	r3,28(sp)
 800605c:	1801f226 	beq	r3,zero,8006828 <_dtoa_r+0x163c>
 8006060:	8dc00044 	addi	r23,r17,1
 8006064:	a0010516 	blt	r20,zero,800647c <_dtoa_r+0x1290>
 8006068:	d8c00217 	ldw	r3,8(sp)
 800606c:	a0e8b03a 	or	r20,r20,r3
 8006070:	d8c00817 	ldw	r3,32(sp)
 8006074:	1d28b03a 	or	r20,r3,r20
 8006078:	a0010026 	beq	r20,zero,800647c <_dtoa_r+0x1290>
 800607c:	00812816 	blt	zero,r2,8006520 <_dtoa_r+0x1334>
 8006080:	d8800617 	ldw	r2,24(sp)
 8006084:	8a000005 	stb	r8,0(r17)
 8006088:	14412926 	beq	r2,r17,8006530 <_dtoa_r+0x1344>
 800608c:	a80b883a 	mov	r5,r21
 8006090:	000f883a 	mov	r7,zero
 8006094:	01800284 	movi	r6,10
 8006098:	e009883a 	mov	r4,fp
 800609c:	80087b00 	call	80087b0 <__multadd>
 80060a0:	102b883a 	mov	r21,r2
 80060a4:	000f883a 	mov	r7,zero
 80060a8:	01800284 	movi	r6,10
 80060ac:	800b883a 	mov	r5,r16
 80060b0:	e009883a 	mov	r4,fp
 80060b4:	84c02026 	beq	r16,r19,8006138 <_dtoa_r+0xf4c>
 80060b8:	80087b00 	call	80087b0 <__multadd>
 80060bc:	980b883a 	mov	r5,r19
 80060c0:	000f883a 	mov	r7,zero
 80060c4:	01800284 	movi	r6,10
 80060c8:	e009883a 	mov	r4,fp
 80060cc:	1021883a 	mov	r16,r2
 80060d0:	80087b00 	call	80087b0 <__multadd>
 80060d4:	1027883a 	mov	r19,r2
 80060d8:	b823883a 	mov	r17,r23
 80060dc:	900b883a 	mov	r5,r18
 80060e0:	a809883a 	mov	r4,r21
 80060e4:	8004fb80 	call	8004fb8 <quorem>
 80060e8:	800b883a 	mov	r5,r16
 80060ec:	a809883a 	mov	r4,r21
 80060f0:	102d883a 	mov	r22,r2
 80060f4:	8008fe80 	call	8008fe8 <__mcmp>
 80060f8:	980d883a 	mov	r6,r19
 80060fc:	900b883a 	mov	r5,r18
 8006100:	e009883a 	mov	r4,fp
 8006104:	1029883a 	mov	r20,r2
 8006108:	80090400 	call	8009040 <__mdiff>
 800610c:	102f883a 	mov	r23,r2
 8006110:	10800317 	ldw	r2,12(r2)
 8006114:	b2000c04 	addi	r8,r22,48
 8006118:	103fc426 	beq	r2,zero,800602c <_dtoa_r+0xe40>
 800611c:	b80b883a 	mov	r5,r23
 8006120:	e009883a 	mov	r4,fp
 8006124:	da000115 	stw	r8,4(sp)
 8006128:	800878c0 	call	800878c <_Bfree>
 800612c:	00800044 	movi	r2,1
 8006130:	da000117 	ldw	r8,4(sp)
 8006134:	003fca06 	br	8006060 <_dtoa_r+0xe74>
 8006138:	80087b00 	call	80087b0 <__multadd>
 800613c:	1021883a 	mov	r16,r2
 8006140:	1027883a 	mov	r19,r2
 8006144:	003fe406 	br	80060d8 <_dtoa_r+0xeec>
 8006148:	d8800217 	ldw	r2,8(sp)
 800614c:	108000d0 	cmplti	r2,r2,3
 8006150:	10004b1e 	bne	r2,zero,8006280 <_dtoa_r+0x1094>
 8006154:	d8800617 	ldw	r2,24(sp)
 8006158:	103e0d1e 	bne	r2,zero,8005990 <_dtoa_r+0x7a4>
 800615c:	900b883a 	mov	r5,r18
 8006160:	e009883a 	mov	r4,fp
 8006164:	000f883a 	mov	r7,zero
 8006168:	01800144 	movi	r6,5
 800616c:	80087b00 	call	80087b0 <__multadd>
 8006170:	100b883a 	mov	r5,r2
 8006174:	a809883a 	mov	r4,r21
 8006178:	1025883a 	mov	r18,r2
 800617c:	8008fe80 	call	8008fe8 <__mcmp>
 8006180:	00be030e 	bge	zero,r2,8005990 <_dtoa_r+0x7a4>
 8006184:	d8c00317 	ldw	r3,12(sp)
 8006188:	00800c44 	movi	r2,49
 800618c:	18800005 	stb	r2,0(r3)
 8006190:	d8800417 	ldw	r2,16(sp)
 8006194:	1dc00044 	addi	r23,r3,1
 8006198:	14400044 	addi	r17,r2,1
 800619c:	900b883a 	mov	r5,r18
 80061a0:	e009883a 	mov	r4,fp
 80061a4:	800878c0 	call	800878c <_Bfree>
 80061a8:	88800044 	addi	r2,r17,1
 80061ac:	d8800415 	stw	r2,16(sp)
 80061b0:	803f121e 	bne	r16,zero,8005dfc <_dtoa_r+0xc10>
 80061b4:	003d9f06 	br	8005834 <_dtoa_r+0x648>
 80061b8:	900b883a 	mov	r5,r18
 80061bc:	a809883a 	mov	r4,r21
 80061c0:	8008fe80 	call	8008fe8 <__mcmp>
 80061c4:	103ed10e 	bge	r2,zero,8005d0c <_dtoa_r+0xb20>
 80061c8:	a80b883a 	mov	r5,r21
 80061cc:	000f883a 	mov	r7,zero
 80061d0:	01800284 	movi	r6,10
 80061d4:	e009883a 	mov	r4,fp
 80061d8:	80087b00 	call	80087b0 <__multadd>
 80061dc:	102b883a 	mov	r21,r2
 80061e0:	d8800417 	ldw	r2,16(sp)
 80061e4:	153fffc4 	addi	r20,r2,-1
 80061e8:	d8800717 	ldw	r2,28(sp)
 80061ec:	103f771e 	bne	r2,zero,8005fcc <_dtoa_r+0xde0>
 80061f0:	d8800b17 	ldw	r2,44(sp)
 80061f4:	0081910e 	bge	zero,r2,800683c <_dtoa_r+0x1650>
 80061f8:	d8800615 	stw	r2,24(sp)
 80061fc:	003eca06 	br	8005d28 <_dtoa_r+0xb3c>
 8006200:	d9800817 	ldw	r6,32(sp)
 8006204:	a80b883a 	mov	r5,r21
 8006208:	e009883a 	mov	r4,fp
 800620c:	8008d840 	call	8008d84 <__pow5mult>
 8006210:	102b883a 	mov	r21,r2
 8006214:	003e9a06 	br	8005c80 <_dtoa_r+0xa94>
 8006218:	00820074 	movhi	r2,2049
 800621c:	1007883a 	mov	r3,r2
 8006220:	18c7cc04 	addi	r3,r3,7984
 8006224:	00820074 	movhi	r2,2049
 8006228:	d8c00315 	stw	r3,12(sp)
 800622c:	1087ccc4 	addi	r2,r2,7987
 8006230:	003da506 	br	80058c8 <_dtoa_r+0x6dc>
 8006234:	d8800117 	ldw	r2,4(sp)
 8006238:	103e991e 	bne	r2,zero,8005ca0 <_dtoa_r+0xab4>
 800623c:	00800434 	movhi	r2,16
 8006240:	10bfffc4 	addi	r2,r2,-1
 8006244:	8884703a 	and	r2,r17,r2
 8006248:	103e951e 	bne	r2,zero,8005ca0 <_dtoa_r+0xab4>
 800624c:	8c5ffc2c 	andhi	r17,r17,32752
 8006250:	883e9326 	beq	r17,zero,8005ca0 <_dtoa_r+0xab4>
 8006254:	d8800517 	ldw	r2,20(sp)
 8006258:	a5000044 	addi	r20,r20,1
 800625c:	04400044 	movi	r17,1
 8006260:	10800044 	addi	r2,r2,1
 8006264:	d8800515 	stw	r2,20(sp)
 8006268:	003e8e06 	br	8005ca4 <_dtoa_r+0xab8>
 800626c:	00800044 	movi	r2,1
 8006270:	04800044 	movi	r18,1
 8006274:	d8800615 	stw	r2,24(sp)
 8006278:	d8801e15 	stw	r2,120(sp)
 800627c:	003ef406 	br	8005e50 <_dtoa_r+0xc64>
 8006280:	d8800417 	ldw	r2,16(sp)
 8006284:	10800044 	addi	r2,r2,1
 8006288:	d8800415 	stw	r2,16(sp)
 800628c:	d8800717 	ldw	r2,28(sp)
 8006290:	103f571e 	bne	r2,zero,8005ff0 <_dtoa_r+0xe04>
 8006294:	900b883a 	mov	r5,r18
 8006298:	a809883a 	mov	r4,r21
 800629c:	8004fb80 	call	8004fb8 <quorem>
 80062a0:	12000c04 	addi	r8,r2,48
 80062a4:	d8800317 	ldw	r2,12(sp)
 80062a8:	0029883a 	mov	r20,zero
 80062ac:	15c00044 	addi	r23,r2,1
 80062b0:	12000005 	stb	r8,0(r2)
 80062b4:	003eb006 	br	8005d78 <_dtoa_r+0xb8c>
 80062b8:	a005883a 	mov	r2,r20
 80062bc:	003e5506 	br	8005c14 <_dtoa_r+0xa28>
 80062c0:	800b883a 	mov	r5,r16
 80062c4:	980d883a 	mov	r6,r19
 80062c8:	e009883a 	mov	r4,fp
 80062cc:	8008eac0 	call	8008eac <__lshift>
 80062d0:	1021883a 	mov	r16,r2
 80062d4:	003f4706 	br	8005ff4 <_dtoa_r+0xe08>
 80062d8:	14a5c83a 	sub	r18,r2,r18
 80062dc:	003e3e06 	br	8005bd8 <_dtoa_r+0x9ec>
 80062e0:	00820074 	movhi	r2,2049
 80062e4:	1087dd04 	addi	r2,r2,8052
 80062e8:	11800817 	ldw	r6,32(r2)
 80062ec:	11c00917 	ldw	r7,36(r2)
 80062f0:	d9000117 	ldw	r4,4(sp)
 80062f4:	880b883a 	mov	r5,r17
 80062f8:	da400e15 	stw	r9,56(sp)
 80062fc:	da800d15 	stw	r10,52(sp)
 8006300:	800d4f00 	call	800d4f0 <__divdf3>
 8006304:	d8800c15 	stw	r2,48(sp)
 8006308:	1827883a 	mov	r19,r3
 800630c:	bdc003cc 	andi	r23,r23,15
 8006310:	040000c4 	movi	r16,3
 8006314:	da800d17 	ldw	r10,52(sp)
 8006318:	da400e17 	ldw	r9,56(sp)
 800631c:	003c9206 	br	8005568 <_dtoa_r+0x37c>
 8006320:	d8000715 	stw	zero,28(sp)
 8006324:	003ed306 	br	8005e74 <_dtoa_r+0xc88>
 8006328:	1000031e 	bne	r2,zero,8006338 <_dtoa_r+0x114c>
 800632c:	da000117 	ldw	r8,4(sp)
 8006330:	4200004c 	andi	r8,r8,1
 8006334:	403e9b1e 	bne	r8,zero,8005da4 <_dtoa_r+0xbb8>
 8006338:	1805883a 	mov	r2,r3
 800633c:	00000206 	br	8006348 <_dtoa_r+0x115c>
 8006340:	b8bfff83 	ldbu	r2,-2(r23)
 8006344:	182f883a 	mov	r23,r3
 8006348:	10803fcc 	andi	r2,r2,255
 800634c:	1080201c 	xori	r2,r2,128
 8006350:	10bfe004 	addi	r2,r2,-128
 8006354:	10800c18 	cmpnei	r2,r2,48
 8006358:	b8ffffc4 	addi	r3,r23,-1
 800635c:	103ff826 	beq	r2,zero,8006340 <_dtoa_r+0x1154>
 8006360:	003e9d06 	br	8005dd8 <_dtoa_r+0xbec>
 8006364:	d8c00a17 	ldw	r3,40(sp)
 8006368:	1800bc26 	beq	r3,zero,800665c <_dtoa_r+0x1470>
 800636c:	d8c00517 	ldw	r3,20(sp)
 8006370:	10810cc4 	addi	r2,r2,1075
 8006374:	a0a9883a 	add	r20,r20,r2
 8006378:	1885883a 	add	r2,r3,r2
 800637c:	1827883a 	mov	r19,r3
 8006380:	dc800817 	ldw	r18,32(sp)
 8006384:	d8800515 	stw	r2,20(sp)
 8006388:	003e1a06 	br	8005bf4 <_dtoa_r+0xa08>
 800638c:	d8c00317 	ldw	r3,12(sp)
 8006390:	00800c44 	movi	r2,49
 8006394:	18800005 	stb	r2,0(r3)
 8006398:	d8800417 	ldw	r2,16(sp)
 800639c:	10800044 	addi	r2,r2,1
 80063a0:	d8800415 	stw	r2,16(sp)
 80063a4:	003e8c06 	br	8005dd8 <_dtoa_r+0xbec>
 80063a8:	8009883a 	mov	r4,r16
 80063ac:	800f2d40 	call	800f2d4 <__floatsidf>
 80063b0:	900d883a 	mov	r6,r18
 80063b4:	980f883a 	mov	r7,r19
 80063b8:	1009883a 	mov	r4,r2
 80063bc:	180b883a 	mov	r5,r3
 80063c0:	800e0b40 	call	800e0b4 <__muldf3>
 80063c4:	000d883a 	mov	r6,zero
 80063c8:	01d00734 	movhi	r7,16412
 80063cc:	1009883a 	mov	r4,r2
 80063d0:	180b883a 	mov	r5,r3
 80063d4:	800cb500 	call	800cb50 <__adddf3>
 80063d8:	d8800c15 	stw	r2,48(sp)
 80063dc:	00bf3034 	movhi	r2,64704
 80063e0:	1885883a 	add	r2,r3,r2
 80063e4:	d8800d15 	stw	r2,52(sp)
 80063e8:	9009883a 	mov	r4,r18
 80063ec:	980b883a 	mov	r5,r19
 80063f0:	000d883a 	mov	r6,zero
 80063f4:	01d00534 	movhi	r7,16404
 80063f8:	800e8940 	call	800e894 <__subdf3>
 80063fc:	ddc00c17 	ldw	r23,48(sp)
 8006400:	dcc00d17 	ldw	r19,52(sp)
 8006404:	1009883a 	mov	r4,r2
 8006408:	b80d883a 	mov	r6,r23
 800640c:	980f883a 	mov	r7,r19
 8006410:	180b883a 	mov	r5,r3
 8006414:	1025883a 	mov	r18,r2
 8006418:	1821883a 	mov	r16,r3
 800641c:	800ded40 	call	800ded4 <__gedf2>
 8006420:	0080ee16 	blt	zero,r2,80067dc <_dtoa_r+0x15f0>
 8006424:	99e0003c 	xorhi	r7,r19,32768
 8006428:	b80d883a 	mov	r6,r23
 800642c:	9009883a 	mov	r4,r18
 8006430:	800b883a 	mov	r5,r16
 8006434:	800dfc40 	call	800dfc4 <__ledf2>
 8006438:	103d380e 	bge	r2,zero,800591c <_dtoa_r+0x730>
 800643c:	0025883a 	mov	r18,zero
 8006440:	0021883a 	mov	r16,zero
 8006444:	003d5206 	br	8005990 <_dtoa_r+0x7a4>
 8006448:	d8800417 	ldw	r2,16(sp)
 800644c:	1000ad1e 	bne	r2,zero,8006704 <_dtoa_r+0x1518>
 8006450:	dc800117 	ldw	r18,4(sp)
 8006454:	8827883a 	mov	r19,r17
 8006458:	04000084 	movi	r16,2
 800645c:	003c5b06 	br	80055cc <_dtoa_r+0x3e0>
 8006460:	d8800117 	ldw	r2,4(sp)
 8006464:	103ecf1e 	bne	r2,zero,8005fa4 <_dtoa_r+0xdb8>
 8006468:	00800434 	movhi	r2,16
 800646c:	10bfffc4 	addi	r2,r2,-1
 8006470:	8884703a 	and	r2,r17,r2
 8006474:	103f7526 	beq	r2,zero,800624c <_dtoa_r+0x1060>
 8006478:	003eca06 	br	8005fa4 <_dtoa_r+0xdb8>
 800647c:	00800e0e 	bge	zero,r2,80064b8 <_dtoa_r+0x12cc>
 8006480:	a80b883a 	mov	r5,r21
 8006484:	01800044 	movi	r6,1
 8006488:	e009883a 	mov	r4,fp
 800648c:	da000115 	stw	r8,4(sp)
 8006490:	8008eac0 	call	8008eac <__lshift>
 8006494:	900b883a 	mov	r5,r18
 8006498:	1009883a 	mov	r4,r2
 800649c:	102b883a 	mov	r21,r2
 80064a0:	8008fe80 	call	8008fe8 <__mcmp>
 80064a4:	da000117 	ldw	r8,4(sp)
 80064a8:	0080d50e 	bge	zero,r2,8006800 <_dtoa_r+0x1614>
 80064ac:	42000e60 	cmpeqi	r8,r8,57
 80064b0:	4000c31e 	bne	r8,zero,80067c0 <_dtoa_r+0x15d4>
 80064b4:	b2000c44 	addi	r8,r22,49
 80064b8:	8029883a 	mov	r20,r16
 80064bc:	8a000005 	stb	r8,0(r17)
 80064c0:	9821883a 	mov	r16,r19
 80064c4:	003e4406 	br	8005dd8 <_dtoa_r+0xbec>
 80064c8:	81400117 	ldw	r5,4(r16)
 80064cc:	e009883a 	mov	r4,fp
 80064d0:	80086e80 	call	80086e8 <_Balloc>
 80064d4:	81800417 	ldw	r6,16(r16)
 80064d8:	81400304 	addi	r5,r16,12
 80064dc:	11000304 	addi	r4,r2,12
 80064e0:	31800084 	addi	r6,r6,2
 80064e4:	300c90ba 	slli	r6,r6,2
 80064e8:	1023883a 	mov	r17,r2
 80064ec:	80083cc0 	call	80083cc <memcpy>
 80064f0:	01800044 	movi	r6,1
 80064f4:	880b883a 	mov	r5,r17
 80064f8:	e009883a 	mov	r4,fp
 80064fc:	8008eac0 	call	8008eac <__lshift>
 8006500:	1027883a 	mov	r19,r2
 8006504:	003ebd06 	br	8005ffc <_dtoa_r+0xe10>
 8006508:	dd400117 	ldw	r21,4(sp)
 800650c:	003cc906 	br	8005834 <_dtoa_r+0x648>
 8006510:	d8800517 	ldw	r2,20(sp)
 8006514:	d8c00617 	ldw	r3,24(sp)
 8006518:	10e7c83a 	sub	r19,r2,r3
 800651c:	003db506 	br	8005bf4 <_dtoa_r+0xa08>
 8006520:	40800e58 	cmpnei	r2,r8,57
 8006524:	1000a626 	beq	r2,zero,80067c0 <_dtoa_r+0x15d4>
 8006528:	42000044 	addi	r8,r8,1
 800652c:	003fe206 	br	80064b8 <_dtoa_r+0x12cc>
 8006530:	8029883a 	mov	r20,r16
 8006534:	9821883a 	mov	r16,r19
 8006538:	003e0f06 	br	8005d78 <_dtoa_r+0xb8c>
 800653c:	d9000c17 	ldw	r4,48(sp)
 8006540:	d9400d17 	ldw	r5,52(sp)
 8006544:	da401015 	stw	r9,64(sp)
 8006548:	800e0b40 	call	800e0b4 <__muldf3>
 800654c:	d9000e17 	ldw	r4,56(sp)
 8006550:	d8c00d15 	stw	r3,52(sp)
 8006554:	da401017 	ldw	r9,64(sp)
 8006558:	d8c00317 	ldw	r3,12(sp)
 800655c:	d8800c15 	stw	r2,48(sp)
 8006560:	20800058 	cmpnei	r2,r4,1
 8006564:	1a400005 	stb	r9,0(r3)
 8006568:	1907883a 	add	r3,r3,r4
 800656c:	1809883a 	mov	r4,r3
 8006570:	10001d26 	beq	r2,zero,80065e8 <_dtoa_r+0x13fc>
 8006574:	8007883a 	mov	r3,r16
 8006578:	9005883a 	mov	r2,r18
 800657c:	dc400e15 	stw	r17,56(sp)
 8006580:	2021883a 	mov	r16,r4
 8006584:	000d883a 	mov	r6,zero
 8006588:	01d00934 	movhi	r7,16420
 800658c:	1009883a 	mov	r4,r2
 8006590:	180b883a 	mov	r5,r3
 8006594:	800e0b40 	call	800e0b4 <__muldf3>
 8006598:	180b883a 	mov	r5,r3
 800659c:	1009883a 	mov	r4,r2
 80065a0:	1825883a 	mov	r18,r3
 80065a4:	1023883a 	mov	r17,r2
 80065a8:	800f2540 	call	800f254 <__fixdfsi>
 80065ac:	1009883a 	mov	r4,r2
 80065b0:	1027883a 	mov	r19,r2
 80065b4:	800f2d40 	call	800f2d4 <__floatsidf>
 80065b8:	100d883a 	mov	r6,r2
 80065bc:	180f883a 	mov	r7,r3
 80065c0:	8809883a 	mov	r4,r17
 80065c4:	900b883a 	mov	r5,r18
 80065c8:	bdc00044 	addi	r23,r23,1
 80065cc:	9cc00c04 	addi	r19,r19,48
 80065d0:	800e8940 	call	800e894 <__subdf3>
 80065d4:	bcffffc5 	stb	r19,-1(r23)
 80065d8:	bc3fea1e 	bne	r23,r16,8006584 <_dtoa_r+0x1398>
 80065dc:	dc400e17 	ldw	r17,56(sp)
 80065e0:	1025883a 	mov	r18,r2
 80065e4:	1821883a 	mov	r16,r3
 80065e8:	d9000c17 	ldw	r4,48(sp)
 80065ec:	d9400d17 	ldw	r5,52(sp)
 80065f0:	000d883a 	mov	r6,zero
 80065f4:	01cff834 	movhi	r7,16352
 80065f8:	800cb500 	call	800cb50 <__adddf3>
 80065fc:	100d883a 	mov	r6,r2
 8006600:	180f883a 	mov	r7,r3
 8006604:	9009883a 	mov	r4,r18
 8006608:	800b883a 	mov	r5,r16
 800660c:	800ded40 	call	800ded4 <__gedf2>
 8006610:	00807516 	blt	zero,r2,80067e8 <_dtoa_r+0x15fc>
 8006614:	d9800c17 	ldw	r6,48(sp)
 8006618:	d9c00d17 	ldw	r7,52(sp)
 800661c:	0009883a 	mov	r4,zero
 8006620:	014ff834 	movhi	r5,16352
 8006624:	800e8940 	call	800e894 <__subdf3>
 8006628:	100d883a 	mov	r6,r2
 800662c:	180f883a 	mov	r7,r3
 8006630:	9009883a 	mov	r4,r18
 8006634:	800b883a 	mov	r5,r16
 8006638:	800dfc40 	call	800dfc4 <__ledf2>
 800663c:	103cb70e 	bge	r2,zero,800591c <_dtoa_r+0x730>
 8006640:	00000106 	br	8006648 <_dtoa_r+0x145c>
 8006644:	182f883a 	mov	r23,r3
 8006648:	b8bfffc7 	ldb	r2,-1(r23)
 800664c:	b8ffffc4 	addi	r3,r23,-1
 8006650:	10800c20 	cmpeqi	r2,r2,48
 8006654:	103ffb1e 	bne	r2,zero,8006644 <_dtoa_r+0x1458>
 8006658:	003c7306 	br	8005828 <_dtoa_r+0x63c>
 800665c:	d8c01217 	ldw	r3,72(sp)
 8006660:	d9000517 	ldw	r4,20(sp)
 8006664:	00800d84 	movi	r2,54
 8006668:	10c5c83a 	sub	r2,r2,r3
 800666c:	a0a9883a 	add	r20,r20,r2
 8006670:	2085883a 	add	r2,r4,r2
 8006674:	2027883a 	mov	r19,r4
 8006678:	dc800817 	ldw	r18,32(sp)
 800667c:	d8800515 	stw	r2,20(sp)
 8006680:	003d5c06 	br	8005bf4 <_dtoa_r+0xa08>
 8006684:	d8800617 	ldw	r2,24(sp)
 8006688:	103f4726 	beq	r2,zero,80063a8 <_dtoa_r+0x11bc>
 800668c:	ddc00b17 	ldw	r23,44(sp)
 8006690:	05fca20e 	bge	zero,r23,800591c <_dtoa_r+0x730>
 8006694:	980b883a 	mov	r5,r19
 8006698:	000d883a 	mov	r6,zero
 800669c:	01d00934 	movhi	r7,16420
 80066a0:	9009883a 	mov	r4,r18
 80066a4:	800e0b40 	call	800e0b4 <__muldf3>
 80066a8:	81000044 	addi	r4,r16,1
 80066ac:	1025883a 	mov	r18,r2
 80066b0:	1827883a 	mov	r19,r3
 80066b4:	800f2d40 	call	800f2d4 <__floatsidf>
 80066b8:	900d883a 	mov	r6,r18
 80066bc:	980f883a 	mov	r7,r19
 80066c0:	1009883a 	mov	r4,r2
 80066c4:	180b883a 	mov	r5,r3
 80066c8:	800e0b40 	call	800e0b4 <__muldf3>
 80066cc:	000d883a 	mov	r6,zero
 80066d0:	01d00734 	movhi	r7,16412
 80066d4:	1009883a 	mov	r4,r2
 80066d8:	180b883a 	mov	r5,r3
 80066dc:	800cb500 	call	800cb50 <__adddf3>
 80066e0:	d8800c15 	stw	r2,48(sp)
 80066e4:	d8800417 	ldw	r2,16(sp)
 80066e8:	ddc00e15 	stw	r23,56(sp)
 80066ec:	10bfffc4 	addi	r2,r2,-1
 80066f0:	d8800f15 	stw	r2,60(sp)
 80066f4:	00bf3034 	movhi	r2,64704
 80066f8:	1885883a 	add	r2,r3,r2
 80066fc:	d8800d15 	stw	r2,52(sp)
 8006700:	003bd006 	br	8005644 <_dtoa_r+0x458>
 8006704:	d8800417 	ldw	r2,16(sp)
 8006708:	d9000117 	ldw	r4,4(sp)
 800670c:	880b883a 	mov	r5,r17
 8006710:	00afc83a 	sub	r23,zero,r2
 8006714:	b88003cc 	andi	r2,r23,15
 8006718:	100690fa 	slli	r3,r2,3
 800671c:	00820074 	movhi	r2,2049
 8006720:	1087e704 	addi	r2,r2,8092
 8006724:	10c5883a 	add	r2,r2,r3
 8006728:	11800017 	ldw	r6,0(r2)
 800672c:	11c00117 	ldw	r7,4(r2)
 8006730:	b82fd13a 	srai	r23,r23,4
 8006734:	800e0b40 	call	800e0b4 <__muldf3>
 8006738:	1025883a 	mov	r18,r2
 800673c:	1827883a 	mov	r19,r3
 8006740:	b8004a26 	beq	r23,zero,800686c <_dtoa_r+0x1680>
 8006744:	02020074 	movhi	r8,2049
 8006748:	04000084 	movi	r16,2
 800674c:	4207dd04 	addi	r8,r8,8052
 8006750:	dc400c15 	stw	r17,48(sp)
 8006754:	000f883a 	mov	r7,zero
 8006758:	8023883a 	mov	r17,r16
 800675c:	4021883a 	mov	r16,r8
 8006760:	b980004c 	andi	r6,r23,1
 8006764:	1009883a 	mov	r4,r2
 8006768:	b82fd07a 	srai	r23,r23,1
 800676c:	180b883a 	mov	r5,r3
 8006770:	30000526 	beq	r6,zero,8006788 <_dtoa_r+0x159c>
 8006774:	81c00117 	ldw	r7,4(r16)
 8006778:	81800017 	ldw	r6,0(r16)
 800677c:	8c400044 	addi	r17,r17,1
 8006780:	800e0b40 	call	800e0b4 <__muldf3>
 8006784:	01c00044 	movi	r7,1
 8006788:	84000204 	addi	r16,r16,8
 800678c:	b83ff41e 	bne	r23,zero,8006760 <_dtoa_r+0x1574>
 8006790:	39c03fcc 	andi	r7,r7,255
 8006794:	8821883a 	mov	r16,r17
 8006798:	dc400c17 	ldw	r17,48(sp)
 800679c:	383b8b26 	beq	r7,zero,80055cc <_dtoa_r+0x3e0>
 80067a0:	1025883a 	mov	r18,r2
 80067a4:	1827883a 	mov	r19,r3
 80067a8:	003b8806 	br	80055cc <_dtoa_r+0x3e0>
 80067ac:	d8800417 	ldw	r2,16(sp)
 80067b0:	02000c44 	movi	r8,49
 80067b4:	10800044 	addi	r2,r2,1
 80067b8:	d8800415 	stw	r2,16(sp)
 80067bc:	003cf606 	br	8005b98 <_dtoa_r+0x9ac>
 80067c0:	00800e44 	movi	r2,57
 80067c4:	8029883a 	mov	r20,r16
 80067c8:	88800005 	stb	r2,0(r17)
 80067cc:	9821883a 	mov	r16,r19
 80067d0:	00c00e44 	movi	r3,57
 80067d4:	d9400317 	ldw	r5,12(sp)
 80067d8:	003d7706 	br	8005db8 <_dtoa_r+0xbcc>
 80067dc:	0025883a 	mov	r18,zero
 80067e0:	0021883a 	mov	r16,zero
 80067e4:	003e6706 	br	8006184 <_dtoa_r+0xf98>
 80067e8:	d8800f17 	ldw	r2,60(sp)
 80067ec:	ba3fffc3 	ldbu	r8,-1(r23)
 80067f0:	d9000317 	ldw	r4,12(sp)
 80067f4:	10800044 	addi	r2,r2,1
 80067f8:	d8800415 	stw	r2,16(sp)
 80067fc:	003cdf06 	br	8005b7c <_dtoa_r+0x990>
 8006800:	103f2d1e 	bne	r2,zero,80064b8 <_dtoa_r+0x12cc>
 8006804:	4080004c 	andi	r2,r8,1
 8006808:	103f281e 	bne	r2,zero,80064ac <_dtoa_r+0x12c0>
 800680c:	003f2a06 	br	80064b8 <_dtoa_r+0x12cc>
 8006810:	d8800f17 	ldw	r2,60(sp)
 8006814:	8811883a 	mov	r8,r17
 8006818:	d9000317 	ldw	r4,12(sp)
 800681c:	10800044 	addi	r2,r2,1
 8006820:	d8800415 	stw	r2,16(sp)
 8006824:	003cd506 	br	8005b7c <_dtoa_r+0x990>
 8006828:	40800e60 	cmpeqi	r2,r8,57
 800682c:	8dc00044 	addi	r23,r17,1
 8006830:	103fe31e 	bne	r2,zero,80067c0 <_dtoa_r+0x15d4>
 8006834:	053f1f16 	blt	zero,r20,80064b4 <_dtoa_r+0x12c8>
 8006838:	003f1f06 	br	80064b8 <_dtoa_r+0x12cc>
 800683c:	d8800217 	ldw	r2,8(sp)
 8006840:	108000c8 	cmpgei	r2,r2,3
 8006844:	103e9326 	beq	r2,zero,8006294 <_dtoa_r+0x10a8>
 8006848:	d8800b17 	ldw	r2,44(sp)
 800684c:	dd000415 	stw	r20,16(sp)
 8006850:	d8800615 	stw	r2,24(sp)
 8006854:	003e3f06 	br	8006154 <_dtoa_r+0xf68>
 8006858:	d8800217 	ldw	r2,8(sp)
 800685c:	108000c8 	cmpgei	r2,r2,3
 8006860:	103ff91e 	bne	r2,zero,8006848 <_dtoa_r+0x165c>
 8006864:	d8800b17 	ldw	r2,44(sp)
 8006868:	003de006 	br	8005fec <_dtoa_r+0xe00>
 800686c:	04000084 	movi	r16,2
 8006870:	003b5606 	br	80055cc <_dtoa_r+0x3e0>
 8006874:	d8800f17 	ldw	r2,60(sp)
 8006878:	d9000317 	ldw	r4,12(sp)
 800687c:	10800044 	addi	r2,r2,1
 8006880:	d8800415 	stw	r2,16(sp)
 8006884:	003cbd06 	br	8005b7c <_dtoa_r+0x990>
 8006888:	00820074 	movhi	r2,2049
 800688c:	1087cd04 	addi	r2,r2,7988
 8006890:	d8800315 	stw	r2,12(sp)
 8006894:	003a8706 	br	80052b4 <_dtoa_r+0xc8>
 8006898:	000b883a 	mov	r5,zero
 800689c:	003b1b06 	br	800550c <_dtoa_r+0x320>
 80068a0:	18c00120 	cmpeqi	r3,r3,4
 80068a4:	183d0f1e 	bne	r3,zero,8005ce4 <_dtoa_r+0xaf8>
 80068a8:	00c00f04 	movi	r3,60
 80068ac:	1885c83a 	sub	r2,r3,r2
 80068b0:	003d0706 	br	8005cd0 <_dtoa_r+0xae4>

080068b4 <__sflush_r>:
 80068b4:	2880030b 	ldhu	r2,12(r5)
 80068b8:	defffb04 	addi	sp,sp,-20
 80068bc:	dcc00315 	stw	r19,12(sp)
 80068c0:	dc000015 	stw	r16,0(sp)
 80068c4:	dfc00415 	stw	ra,16(sp)
 80068c8:	dc800215 	stw	r18,8(sp)
 80068cc:	dc400115 	stw	r17,4(sp)
 80068d0:	10c0020c 	andi	r3,r2,8
 80068d4:	2821883a 	mov	r16,r5
 80068d8:	2027883a 	mov	r19,r4
 80068dc:	18003f1e 	bne	r3,zero,80069dc <__sflush_r+0x128>
 80068e0:	28c00117 	ldw	r3,4(r5)
 80068e4:	10820014 	ori	r2,r2,2048
 80068e8:	2880030d 	sth	r2,12(r5)
 80068ec:	00c0550e 	bge	zero,r3,8006a44 <__sflush_r+0x190>
 80068f0:	82000a17 	ldw	r8,40(r16)
 80068f4:	40003126 	beq	r8,zero,80069bc <__sflush_r+0x108>
 80068f8:	9c400017 	ldw	r17,0(r19)
 80068fc:	1104000c 	andi	r4,r2,4096
 8006900:	98000015 	stw	zero,0(r19)
 8006904:	1007883a 	mov	r3,r2
 8006908:	81400717 	ldw	r5,28(r16)
 800690c:	2000521e 	bne	r4,zero,8006a58 <__sflush_r+0x1a4>
 8006910:	01c00044 	movi	r7,1
 8006914:	000d883a 	mov	r6,zero
 8006918:	9809883a 	mov	r4,r19
 800691c:	403ee83a 	callr	r8
 8006920:	10ffffd8 	cmpnei	r3,r2,-1
 8006924:	18005826 	beq	r3,zero,8006a88 <__sflush_r+0x1d4>
 8006928:	80c0030b 	ldhu	r3,12(r16)
 800692c:	82000a17 	ldw	r8,40(r16)
 8006930:	81400717 	ldw	r5,28(r16)
 8006934:	18c0010c 	andi	r3,r3,4
 8006938:	18000626 	beq	r3,zero,8006954 <__sflush_r+0xa0>
 800693c:	81000117 	ldw	r4,4(r16)
 8006940:	80c00c17 	ldw	r3,48(r16)
 8006944:	1105c83a 	sub	r2,r2,r4
 8006948:	18000226 	beq	r3,zero,8006954 <__sflush_r+0xa0>
 800694c:	80c00f17 	ldw	r3,60(r16)
 8006950:	10c5c83a 	sub	r2,r2,r3
 8006954:	000f883a 	mov	r7,zero
 8006958:	100d883a 	mov	r6,r2
 800695c:	9809883a 	mov	r4,r19
 8006960:	403ee83a 	callr	r8
 8006964:	10ffffd8 	cmpnei	r3,r2,-1
 8006968:	18003d1e 	bne	r3,zero,8006a60 <__sflush_r+0x1ac>
 800696c:	99000017 	ldw	r4,0(r19)
 8006970:	80c0030b 	ldhu	r3,12(r16)
 8006974:	20004e26 	beq	r4,zero,8006ab0 <__sflush_r+0x1fc>
 8006978:	21400760 	cmpeqi	r5,r4,29
 800697c:	2800021e 	bne	r5,zero,8006988 <__sflush_r+0xd4>
 8006980:	210005a0 	cmpeqi	r4,r4,22
 8006984:	20002c26 	beq	r4,zero,8006a38 <__sflush_r+0x184>
 8006988:	80800417 	ldw	r2,16(r16)
 800698c:	18fdffcc 	andi	r3,r3,63487
 8006990:	80c0030d 	sth	r3,12(r16)
 8006994:	80000115 	stw	zero,4(r16)
 8006998:	80800015 	stw	r2,0(r16)
 800699c:	81400c17 	ldw	r5,48(r16)
 80069a0:	9c400015 	stw	r17,0(r19)
 80069a4:	28000526 	beq	r5,zero,80069bc <__sflush_r+0x108>
 80069a8:	80801004 	addi	r2,r16,64
 80069ac:	28800226 	beq	r5,r2,80069b8 <__sflush_r+0x104>
 80069b0:	9809883a 	mov	r4,r19
 80069b4:	8006fd40 	call	8006fd4 <_free_r>
 80069b8:	80000c15 	stw	zero,48(r16)
 80069bc:	0005883a 	mov	r2,zero
 80069c0:	dfc00417 	ldw	ra,16(sp)
 80069c4:	dcc00317 	ldw	r19,12(sp)
 80069c8:	dc800217 	ldw	r18,8(sp)
 80069cc:	dc400117 	ldw	r17,4(sp)
 80069d0:	dc000017 	ldw	r16,0(sp)
 80069d4:	dec00504 	addi	sp,sp,20
 80069d8:	f800283a 	ret
 80069dc:	2c800417 	ldw	r18,16(r5)
 80069e0:	903ff626 	beq	r18,zero,80069bc <__sflush_r+0x108>
 80069e4:	2c400017 	ldw	r17,0(r5)
 80069e8:	108000cc 	andi	r2,r2,3
 80069ec:	2c800015 	stw	r18,0(r5)
 80069f0:	8ca3c83a 	sub	r17,r17,r18
 80069f4:	1000161e 	bne	r2,zero,8006a50 <__sflush_r+0x19c>
 80069f8:	28800517 	ldw	r2,20(r5)
 80069fc:	80800215 	stw	r2,8(r16)
 8006a00:	04400316 	blt	zero,r17,8006a10 <__sflush_r+0x15c>
 8006a04:	003fed06 	br	80069bc <__sflush_r+0x108>
 8006a08:	90a5883a 	add	r18,r18,r2
 8006a0c:	047feb0e 	bge	zero,r17,80069bc <__sflush_r+0x108>
 8006a10:	80800917 	ldw	r2,36(r16)
 8006a14:	81400717 	ldw	r5,28(r16)
 8006a18:	880f883a 	mov	r7,r17
 8006a1c:	900d883a 	mov	r6,r18
 8006a20:	9809883a 	mov	r4,r19
 8006a24:	103ee83a 	callr	r2
 8006a28:	88a3c83a 	sub	r17,r17,r2
 8006a2c:	00bff616 	blt	zero,r2,8006a08 <__sflush_r+0x154>
 8006a30:	80c0030b 	ldhu	r3,12(r16)
 8006a34:	00bfffc4 	movi	r2,-1
 8006a38:	18c01014 	ori	r3,r3,64
 8006a3c:	80c0030d 	sth	r3,12(r16)
 8006a40:	003fdf06 	br	80069c0 <__sflush_r+0x10c>
 8006a44:	28c00f17 	ldw	r3,60(r5)
 8006a48:	00ffa916 	blt	zero,r3,80068f0 <__sflush_r+0x3c>
 8006a4c:	003fdb06 	br	80069bc <__sflush_r+0x108>
 8006a50:	0005883a 	mov	r2,zero
 8006a54:	003fe906 	br	80069fc <__sflush_r+0x148>
 8006a58:	80801417 	ldw	r2,80(r16)
 8006a5c:	003fb506 	br	8006934 <__sflush_r+0x80>
 8006a60:	80c0030b 	ldhu	r3,12(r16)
 8006a64:	81000417 	ldw	r4,16(r16)
 8006a68:	80000115 	stw	zero,4(r16)
 8006a6c:	197dffcc 	andi	r5,r3,63487
 8006a70:	8140030d 	sth	r5,12(r16)
 8006a74:	81000015 	stw	r4,0(r16)
 8006a78:	18c4000c 	andi	r3,r3,4096
 8006a7c:	183fc726 	beq	r3,zero,800699c <__sflush_r+0xe8>
 8006a80:	80801415 	stw	r2,80(r16)
 8006a84:	003fc506 	br	800699c <__sflush_r+0xe8>
 8006a88:	98c00017 	ldw	r3,0(r19)
 8006a8c:	183fa626 	beq	r3,zero,8006928 <__sflush_r+0x74>
 8006a90:	19000760 	cmpeqi	r4,r3,29
 8006a94:	20000e1e 	bne	r4,zero,8006ad0 <__sflush_r+0x21c>
 8006a98:	18c00598 	cmpnei	r3,r3,22
 8006a9c:	18000c26 	beq	r3,zero,8006ad0 <__sflush_r+0x21c>
 8006aa0:	80c0030b 	ldhu	r3,12(r16)
 8006aa4:	18c01014 	ori	r3,r3,64
 8006aa8:	80c0030d 	sth	r3,12(r16)
 8006aac:	003fc406 	br	80069c0 <__sflush_r+0x10c>
 8006ab0:	81000417 	ldw	r4,16(r16)
 8006ab4:	197dffcc 	andi	r5,r3,63487
 8006ab8:	8140030d 	sth	r5,12(r16)
 8006abc:	80000115 	stw	zero,4(r16)
 8006ac0:	81000015 	stw	r4,0(r16)
 8006ac4:	18c4000c 	andi	r3,r3,4096
 8006ac8:	183fb426 	beq	r3,zero,800699c <__sflush_r+0xe8>
 8006acc:	003fec06 	br	8006a80 <__sflush_r+0x1cc>
 8006ad0:	9c400015 	stw	r17,0(r19)
 8006ad4:	0005883a 	mov	r2,zero
 8006ad8:	003fb906 	br	80069c0 <__sflush_r+0x10c>

08006adc <_fflush_r>:
 8006adc:	defffd04 	addi	sp,sp,-12
 8006ae0:	dc000115 	stw	r16,4(sp)
 8006ae4:	dfc00215 	stw	ra,8(sp)
 8006ae8:	2021883a 	mov	r16,r4
 8006aec:	20000226 	beq	r4,zero,8006af8 <_fflush_r+0x1c>
 8006af0:	20800e17 	ldw	r2,56(r4)
 8006af4:	10000726 	beq	r2,zero,8006b14 <_fflush_r+0x38>
 8006af8:	2880030f 	ldh	r2,12(r5)
 8006afc:	10000a1e 	bne	r2,zero,8006b28 <_fflush_r+0x4c>
 8006b00:	0005883a 	mov	r2,zero
 8006b04:	dfc00217 	ldw	ra,8(sp)
 8006b08:	dc000117 	ldw	r16,4(sp)
 8006b0c:	dec00304 	addi	sp,sp,12
 8006b10:	f800283a 	ret
 8006b14:	d9400015 	stw	r5,0(sp)
 8006b18:	8006e700 	call	8006e70 <__sinit>
 8006b1c:	d9400017 	ldw	r5,0(sp)
 8006b20:	2880030f 	ldh	r2,12(r5)
 8006b24:	103ff626 	beq	r2,zero,8006b00 <_fflush_r+0x24>
 8006b28:	8009883a 	mov	r4,r16
 8006b2c:	dfc00217 	ldw	ra,8(sp)
 8006b30:	dc000117 	ldw	r16,4(sp)
 8006b34:	dec00304 	addi	sp,sp,12
 8006b38:	80068b41 	jmpi	80068b4 <__sflush_r>

08006b3c <fflush>:
 8006b3c:	200b883a 	mov	r5,r4
 8006b40:	20000326 	beq	r4,zero,8006b50 <fflush+0x14>
 8006b44:	00820074 	movhi	r2,2049
 8006b48:	11100c17 	ldw	r4,16432(r2)
 8006b4c:	8006adc1 	jmpi	8006adc <_fflush_r>
 8006b50:	00820074 	movhi	r2,2049
 8006b54:	11100b17 	ldw	r4,16428(r2)
 8006b58:	01420034 	movhi	r5,2048
 8006b5c:	295ab704 	addi	r5,r5,27356
 8006b60:	80078481 	jmpi	8007848 <_fwalk_reent>

08006b64 <__fp_lock>:
 8006b64:	0005883a 	mov	r2,zero
 8006b68:	f800283a 	ret

08006b6c <_cleanup_r>:
 8006b6c:	01420074 	movhi	r5,2049
 8006b70:	296e0404 	addi	r5,r5,-18416
 8006b74:	80078481 	jmpi	8007848 <_fwalk_reent>

08006b78 <__sinit.part.0>:
 8006b78:	00c20034 	movhi	r3,2048
 8006b7c:	20800117 	ldw	r2,4(r4)
 8006b80:	18dadb04 	addi	r3,r3,27500
 8006b84:	20c00f15 	stw	r3,60(r4)
 8006b88:	2140bb04 	addi	r5,r4,748
 8006b8c:	00c000c4 	movi	r3,3
 8006b90:	20c0b915 	stw	r3,740(r4)
 8006b94:	2140ba15 	stw	r5,744(r4)
 8006b98:	2000b815 	stw	zero,736(r4)
 8006b9c:	10001705 	stb	zero,92(r2)
 8006ba0:	10001745 	stb	zero,93(r2)
 8006ba4:	10001785 	stb	zero,94(r2)
 8006ba8:	100017c5 	stb	zero,95(r2)
 8006bac:	10001805 	stb	zero,96(r2)
 8006bb0:	10001845 	stb	zero,97(r2)
 8006bb4:	10001885 	stb	zero,98(r2)
 8006bb8:	100018c5 	stb	zero,99(r2)
 8006bbc:	00c00104 	movi	r3,4
 8006bc0:	10c00315 	stw	r3,12(r2)
 8006bc4:	02020074 	movhi	r8,2049
 8006bc8:	20c00217 	ldw	r3,8(r4)
 8006bcc:	01c20074 	movhi	r7,2049
 8006bd0:	01820074 	movhi	r6,2049
 8006bd4:	01420074 	movhi	r5,2049
 8006bd8:	4227b304 	addi	r8,r8,-24884
 8006bdc:	39e7ca04 	addi	r7,r7,-24792
 8006be0:	31a7ea04 	addi	r6,r6,-24664
 8006be4:	29680104 	addi	r5,r5,-24572
 8006be8:	02400074 	movhi	r9,1
 8006bec:	10001915 	stw	zero,100(r2)
 8006bf0:	10000015 	stw	zero,0(r2)
 8006bf4:	10000115 	stw	zero,4(r2)
 8006bf8:	10000215 	stw	zero,8(r2)
 8006bfc:	10000415 	stw	zero,16(r2)
 8006c00:	10000515 	stw	zero,20(r2)
 8006c04:	10000615 	stw	zero,24(r2)
 8006c08:	10800715 	stw	r2,28(r2)
 8006c0c:	12000815 	stw	r8,32(r2)
 8006c10:	11c00915 	stw	r7,36(r2)
 8006c14:	11800a15 	stw	r6,40(r2)
 8006c18:	11400b15 	stw	r5,44(r2)
 8006c1c:	4a400284 	addi	r9,r9,10
 8006c20:	1a400315 	stw	r9,12(r3)
 8006c24:	18001915 	stw	zero,100(r3)
 8006c28:	18000015 	stw	zero,0(r3)
 8006c2c:	18000115 	stw	zero,4(r3)
 8006c30:	18000215 	stw	zero,8(r3)
 8006c34:	18000415 	stw	zero,16(r3)
 8006c38:	18001705 	stb	zero,92(r3)
 8006c3c:	18001745 	stb	zero,93(r3)
 8006c40:	18001785 	stb	zero,94(r3)
 8006c44:	180017c5 	stb	zero,95(r3)
 8006c48:	18001805 	stb	zero,96(r3)
 8006c4c:	18001845 	stb	zero,97(r3)
 8006c50:	18001885 	stb	zero,98(r3)
 8006c54:	180018c5 	stb	zero,99(r3)
 8006c58:	20800317 	ldw	r2,12(r4)
 8006c5c:	024000b4 	movhi	r9,2
 8006c60:	18000515 	stw	zero,20(r3)
 8006c64:	18000615 	stw	zero,24(r3)
 8006c68:	18c00715 	stw	r3,28(r3)
 8006c6c:	1a000815 	stw	r8,32(r3)
 8006c70:	19c00915 	stw	r7,36(r3)
 8006c74:	19800a15 	stw	r6,40(r3)
 8006c78:	19400b15 	stw	r5,44(r3)
 8006c7c:	4a400484 	addi	r9,r9,18
 8006c80:	10001915 	stw	zero,100(r2)
 8006c84:	10000015 	stw	zero,0(r2)
 8006c88:	10000115 	stw	zero,4(r2)
 8006c8c:	10000215 	stw	zero,8(r2)
 8006c90:	12400315 	stw	r9,12(r2)
 8006c94:	10000415 	stw	zero,16(r2)
 8006c98:	10000515 	stw	zero,20(r2)
 8006c9c:	10000615 	stw	zero,24(r2)
 8006ca0:	10001705 	stb	zero,92(r2)
 8006ca4:	10001745 	stb	zero,93(r2)
 8006ca8:	10001785 	stb	zero,94(r2)
 8006cac:	100017c5 	stb	zero,95(r2)
 8006cb0:	10001805 	stb	zero,96(r2)
 8006cb4:	10001845 	stb	zero,97(r2)
 8006cb8:	10001885 	stb	zero,98(r2)
 8006cbc:	100018c5 	stb	zero,99(r2)
 8006cc0:	10800715 	stw	r2,28(r2)
 8006cc4:	12000815 	stw	r8,32(r2)
 8006cc8:	11c00915 	stw	r7,36(r2)
 8006ccc:	11800a15 	stw	r6,40(r2)
 8006cd0:	11400b15 	stw	r5,44(r2)
 8006cd4:	00800044 	movi	r2,1
 8006cd8:	20800e15 	stw	r2,56(r4)
 8006cdc:	f800283a 	ret

08006ce0 <__fp_unlock>:
 8006ce0:	0005883a 	mov	r2,zero
 8006ce4:	f800283a 	ret

08006ce8 <__sfmoreglue>:
 8006ce8:	defffc04 	addi	sp,sp,-16
 8006cec:	dc800215 	stw	r18,8(sp)
 8006cf0:	2825883a 	mov	r18,r5
 8006cf4:	dc000015 	stw	r16,0(sp)
 8006cf8:	01401a04 	movi	r5,104
 8006cfc:	2021883a 	mov	r16,r4
 8006d00:	913fffc4 	addi	r4,r18,-1
 8006d04:	dfc00315 	stw	ra,12(sp)
 8006d08:	dc400115 	stw	r17,4(sp)
 8006d0c:	80029d40 	call	80029d4 <__mulsi3>
 8006d10:	8009883a 	mov	r4,r16
 8006d14:	11401d04 	addi	r5,r2,116
 8006d18:	1023883a 	mov	r17,r2
 8006d1c:	8007af00 	call	8007af0 <_malloc_r>
 8006d20:	1021883a 	mov	r16,r2
 8006d24:	10000726 	beq	r2,zero,8006d44 <__sfmoreglue+0x5c>
 8006d28:	11000304 	addi	r4,r2,12
 8006d2c:	10000015 	stw	zero,0(r2)
 8006d30:	14800115 	stw	r18,4(r2)
 8006d34:	11000215 	stw	r4,8(r2)
 8006d38:	89801a04 	addi	r6,r17,104
 8006d3c:	000b883a 	mov	r5,zero
 8006d40:	80085f80 	call	80085f8 <memset>
 8006d44:	8005883a 	mov	r2,r16
 8006d48:	dfc00317 	ldw	ra,12(sp)
 8006d4c:	dc800217 	ldw	r18,8(sp)
 8006d50:	dc400117 	ldw	r17,4(sp)
 8006d54:	dc000017 	ldw	r16,0(sp)
 8006d58:	dec00404 	addi	sp,sp,16
 8006d5c:	f800283a 	ret

08006d60 <__sfp>:
 8006d60:	defffd04 	addi	sp,sp,-12
 8006d64:	00820074 	movhi	r2,2049
 8006d68:	dc000015 	stw	r16,0(sp)
 8006d6c:	14100b17 	ldw	r16,16428(r2)
 8006d70:	dc400115 	stw	r17,4(sp)
 8006d74:	dfc00215 	stw	ra,8(sp)
 8006d78:	80800e17 	ldw	r2,56(r16)
 8006d7c:	2023883a 	mov	r17,r4
 8006d80:	10002b26 	beq	r2,zero,8006e30 <__sfp+0xd0>
 8006d84:	8400b804 	addi	r16,r16,736
 8006d88:	80c00117 	ldw	r3,4(r16)
 8006d8c:	80800217 	ldw	r2,8(r16)
 8006d90:	18ffffc4 	addi	r3,r3,-1
 8006d94:	1800050e 	bge	r3,zero,8006dac <__sfp+0x4c>
 8006d98:	00002106 	br	8006e20 <__sfp+0xc0>
 8006d9c:	18ffffc4 	addi	r3,r3,-1
 8006da0:	193fffd8 	cmpnei	r4,r3,-1
 8006da4:	10801a04 	addi	r2,r2,104
 8006da8:	20001d26 	beq	r4,zero,8006e20 <__sfp+0xc0>
 8006dac:	1100030f 	ldh	r4,12(r2)
 8006db0:	203ffa1e 	bne	r4,zero,8006d9c <__sfp+0x3c>
 8006db4:	00fffff4 	movhi	r3,65535
 8006db8:	18c00044 	addi	r3,r3,1
 8006dbc:	10001915 	stw	zero,100(r2)
 8006dc0:	10000015 	stw	zero,0(r2)
 8006dc4:	10000115 	stw	zero,4(r2)
 8006dc8:	10000215 	stw	zero,8(r2)
 8006dcc:	10c00315 	stw	r3,12(r2)
 8006dd0:	10000415 	stw	zero,16(r2)
 8006dd4:	10000515 	stw	zero,20(r2)
 8006dd8:	10000615 	stw	zero,24(r2)
 8006ddc:	10001705 	stb	zero,92(r2)
 8006de0:	10001745 	stb	zero,93(r2)
 8006de4:	10001785 	stb	zero,94(r2)
 8006de8:	100017c5 	stb	zero,95(r2)
 8006dec:	10001805 	stb	zero,96(r2)
 8006df0:	10001845 	stb	zero,97(r2)
 8006df4:	10001885 	stb	zero,98(r2)
 8006df8:	100018c5 	stb	zero,99(r2)
 8006dfc:	10000c15 	stw	zero,48(r2)
 8006e00:	10000d15 	stw	zero,52(r2)
 8006e04:	10001115 	stw	zero,68(r2)
 8006e08:	10001215 	stw	zero,72(r2)
 8006e0c:	dfc00217 	ldw	ra,8(sp)
 8006e10:	dc400117 	ldw	r17,4(sp)
 8006e14:	dc000017 	ldw	r16,0(sp)
 8006e18:	dec00304 	addi	sp,sp,12
 8006e1c:	f800283a 	ret
 8006e20:	80800017 	ldw	r2,0(r16)
 8006e24:	10000526 	beq	r2,zero,8006e3c <__sfp+0xdc>
 8006e28:	1021883a 	mov	r16,r2
 8006e2c:	003fd606 	br	8006d88 <__sfp+0x28>
 8006e30:	8009883a 	mov	r4,r16
 8006e34:	8006b780 	call	8006b78 <__sinit.part.0>
 8006e38:	003fd206 	br	8006d84 <__sfp+0x24>
 8006e3c:	01400104 	movi	r5,4
 8006e40:	8809883a 	mov	r4,r17
 8006e44:	8006ce80 	call	8006ce8 <__sfmoreglue>
 8006e48:	80800015 	stw	r2,0(r16)
 8006e4c:	103ff61e 	bne	r2,zero,8006e28 <__sfp+0xc8>
 8006e50:	00c00304 	movi	r3,12
 8006e54:	88c00015 	stw	r3,0(r17)
 8006e58:	003fec06 	br	8006e0c <__sfp+0xac>

08006e5c <_cleanup>:
 8006e5c:	00820074 	movhi	r2,2049
 8006e60:	11100b17 	ldw	r4,16428(r2)
 8006e64:	01420074 	movhi	r5,2049
 8006e68:	296e0404 	addi	r5,r5,-18416
 8006e6c:	80078481 	jmpi	8007848 <_fwalk_reent>

08006e70 <__sinit>:
 8006e70:	20800e17 	ldw	r2,56(r4)
 8006e74:	10000126 	beq	r2,zero,8006e7c <__sinit+0xc>
 8006e78:	f800283a 	ret
 8006e7c:	8006b781 	jmpi	8006b78 <__sinit.part.0>

08006e80 <__sfp_lock_acquire>:
 8006e80:	f800283a 	ret

08006e84 <__sfp_lock_release>:
 8006e84:	f800283a 	ret

08006e88 <__sinit_lock_acquire>:
 8006e88:	f800283a 	ret

08006e8c <__sinit_lock_release>:
 8006e8c:	f800283a 	ret

08006e90 <__fp_lock_all>:
 8006e90:	00820074 	movhi	r2,2049
 8006e94:	11100c17 	ldw	r4,16432(r2)
 8006e98:	01420034 	movhi	r5,2048
 8006e9c:	295ad904 	addi	r5,r5,27492
 8006ea0:	80077a41 	jmpi	80077a4 <_fwalk>

08006ea4 <__fp_unlock_all>:
 8006ea4:	00820074 	movhi	r2,2049
 8006ea8:	11100c17 	ldw	r4,16432(r2)
 8006eac:	01420034 	movhi	r5,2048
 8006eb0:	295b3804 	addi	r5,r5,27872
 8006eb4:	80077a41 	jmpi	80077a4 <_fwalk>

08006eb8 <_malloc_trim_r>:
 8006eb8:	defffb04 	addi	sp,sp,-20
 8006ebc:	dcc00315 	stw	r19,12(sp)
 8006ec0:	04c20074 	movhi	r19,2049
 8006ec4:	dc800215 	stw	r18,8(sp)
 8006ec8:	dc400115 	stw	r17,4(sp)
 8006ecc:	dc000015 	stw	r16,0(sp)
 8006ed0:	dfc00415 	stw	ra,16(sp)
 8006ed4:	2821883a 	mov	r16,r5
 8006ed8:	9cca2804 	addi	r19,r19,10400
 8006edc:	2025883a 	mov	r18,r4
 8006ee0:	800fa380 	call	800fa38 <__malloc_lock>
 8006ee4:	98800217 	ldw	r2,8(r19)
 8006ee8:	14400117 	ldw	r17,4(r2)
 8006eec:	00bfff04 	movi	r2,-4
 8006ef0:	88a2703a 	and	r17,r17,r2
 8006ef4:	8c21c83a 	sub	r16,r17,r16
 8006ef8:	8403fbc4 	addi	r16,r16,4079
 8006efc:	8020d33a 	srli	r16,r16,12
 8006f00:	843fffc4 	addi	r16,r16,-1
 8006f04:	8020933a 	slli	r16,r16,12
 8006f08:	80840008 	cmpgei	r2,r16,4096
 8006f0c:	10000626 	beq	r2,zero,8006f28 <_malloc_trim_r+0x70>
 8006f10:	000b883a 	mov	r5,zero
 8006f14:	9009883a 	mov	r4,r18
 8006f18:	8009e740 	call	8009e74 <_sbrk_r>
 8006f1c:	98c00217 	ldw	r3,8(r19)
 8006f20:	1c47883a 	add	r3,r3,r17
 8006f24:	10c00a26 	beq	r2,r3,8006f50 <_malloc_trim_r+0x98>
 8006f28:	9009883a 	mov	r4,r18
 8006f2c:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8006f30:	0005883a 	mov	r2,zero
 8006f34:	dfc00417 	ldw	ra,16(sp)
 8006f38:	dcc00317 	ldw	r19,12(sp)
 8006f3c:	dc800217 	ldw	r18,8(sp)
 8006f40:	dc400117 	ldw	r17,4(sp)
 8006f44:	dc000017 	ldw	r16,0(sp)
 8006f48:	dec00504 	addi	sp,sp,20
 8006f4c:	f800283a 	ret
 8006f50:	040bc83a 	sub	r5,zero,r16
 8006f54:	9009883a 	mov	r4,r18
 8006f58:	8009e740 	call	8009e74 <_sbrk_r>
 8006f5c:	10bfffd8 	cmpnei	r2,r2,-1
 8006f60:	10000d26 	beq	r2,zero,8006f98 <_malloc_trim_r+0xe0>
 8006f64:	00820074 	movhi	r2,2049
 8006f68:	10973b17 	ldw	r2,23788(r2)
 8006f6c:	98c00217 	ldw	r3,8(r19)
 8006f70:	8c23c83a 	sub	r17,r17,r16
 8006f74:	8c400054 	ori	r17,r17,1
 8006f78:	1421c83a 	sub	r16,r2,r16
 8006f7c:	1c400115 	stw	r17,4(r3)
 8006f80:	00820074 	movhi	r2,2049
 8006f84:	9009883a 	mov	r4,r18
 8006f88:	14173b15 	stw	r16,23788(r2)
 8006f8c:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8006f90:	00800044 	movi	r2,1
 8006f94:	003fe706 	br	8006f34 <_malloc_trim_r+0x7c>
 8006f98:	000b883a 	mov	r5,zero
 8006f9c:	9009883a 	mov	r4,r18
 8006fa0:	8009e740 	call	8009e74 <_sbrk_r>
 8006fa4:	99000217 	ldw	r4,8(r19)
 8006fa8:	1107c83a 	sub	r3,r2,r4
 8006fac:	19400410 	cmplti	r5,r3,16
 8006fb0:	283fdd1e 	bne	r5,zero,8006f28 <_malloc_trim_r+0x70>
 8006fb4:	01420074 	movhi	r5,2049
 8006fb8:	29500d17 	ldw	r5,16436(r5)
 8006fbc:	18c00054 	ori	r3,r3,1
 8006fc0:	20c00115 	stw	r3,4(r4)
 8006fc4:	1145c83a 	sub	r2,r2,r5
 8006fc8:	01420074 	movhi	r5,2049
 8006fcc:	28973b15 	stw	r2,23788(r5)
 8006fd0:	003fd506 	br	8006f28 <_malloc_trim_r+0x70>

08006fd4 <_free_r>:
 8006fd4:	28004f26 	beq	r5,zero,8007114 <_free_r+0x140>
 8006fd8:	defffd04 	addi	sp,sp,-12
 8006fdc:	dc400115 	stw	r17,4(sp)
 8006fe0:	dc000015 	stw	r16,0(sp)
 8006fe4:	2023883a 	mov	r17,r4
 8006fe8:	2821883a 	mov	r16,r5
 8006fec:	dfc00215 	stw	ra,8(sp)
 8006ff0:	800fa380 	call	800fa38 <__malloc_lock>
 8006ff4:	81ffff17 	ldw	r7,-4(r16)
 8006ff8:	00bfff84 	movi	r2,-2
 8006ffc:	80fffe04 	addi	r3,r16,-8
 8007000:	3884703a 	and	r2,r7,r2
 8007004:	01820074 	movhi	r6,2049
 8007008:	1889883a 	add	r4,r3,r2
 800700c:	318a2804 	addi	r6,r6,10400
 8007010:	21400117 	ldw	r5,4(r4)
 8007014:	32000217 	ldw	r8,8(r6)
 8007018:	027fff04 	movi	r9,-4
 800701c:	2a4a703a 	and	r5,r5,r9
 8007020:	41006426 	beq	r8,r4,80071b4 <_free_r+0x1e0>
 8007024:	21400115 	stw	r5,4(r4)
 8007028:	39c0004c 	andi	r7,r7,1
 800702c:	2151883a 	add	r8,r4,r5
 8007030:	3800281e 	bne	r7,zero,80070d4 <_free_r+0x100>
 8007034:	82bffe17 	ldw	r10,-8(r16)
 8007038:	42000117 	ldw	r8,4(r8)
 800703c:	01c20074 	movhi	r7,2049
 8007040:	1a87c83a 	sub	r3,r3,r10
 8007044:	1a400217 	ldw	r9,8(r3)
 8007048:	39ca2a04 	addi	r7,r7,10408
 800704c:	1285883a 	add	r2,r2,r10
 8007050:	4200004c 	andi	r8,r8,1
 8007054:	49c04c26 	beq	r9,r7,8007188 <_free_r+0x1b4>
 8007058:	1a800317 	ldw	r10,12(r3)
 800705c:	4a800315 	stw	r10,12(r9)
 8007060:	52400215 	stw	r9,8(r10)
 8007064:	40007126 	beq	r8,zero,800722c <_free_r+0x258>
 8007068:	11400054 	ori	r5,r2,1
 800706c:	19400115 	stw	r5,4(r3)
 8007070:	20800015 	stw	r2,0(r4)
 8007074:	11008028 	cmpgeui	r4,r2,512
 8007078:	20002c1e 	bne	r4,zero,800712c <_free_r+0x158>
 800707c:	1008d0fa 	srli	r4,r2,3
 8007080:	31c00117 	ldw	r7,4(r6)
 8007084:	20800044 	addi	r2,r4,1
 8007088:	200bd0ba 	srai	r5,r4,2
 800708c:	100490fa 	slli	r2,r2,3
 8007090:	01000044 	movi	r4,1
 8007094:	2148983a 	sll	r4,r4,r5
 8007098:	3085883a 	add	r2,r6,r2
 800709c:	11400017 	ldw	r5,0(r2)
 80070a0:	21c8b03a 	or	r4,r4,r7
 80070a4:	11fffe04 	addi	r7,r2,-8
 80070a8:	19c00315 	stw	r7,12(r3)
 80070ac:	19400215 	stw	r5,8(r3)
 80070b0:	31000115 	stw	r4,4(r6)
 80070b4:	10c00015 	stw	r3,0(r2)
 80070b8:	28c00315 	stw	r3,12(r5)
 80070bc:	8809883a 	mov	r4,r17
 80070c0:	dfc00217 	ldw	ra,8(sp)
 80070c4:	dc400117 	ldw	r17,4(sp)
 80070c8:	dc000017 	ldw	r16,0(sp)
 80070cc:	dec00304 	addi	sp,sp,12
 80070d0:	800fa5c1 	jmpi	800fa5c <__malloc_unlock>
 80070d4:	41c00117 	ldw	r7,4(r8)
 80070d8:	39c0004c 	andi	r7,r7,1
 80070dc:	38000e1e 	bne	r7,zero,8007118 <_free_r+0x144>
 80070e0:	01c20074 	movhi	r7,2049
 80070e4:	1145883a 	add	r2,r2,r5
 80070e8:	39ca2a04 	addi	r7,r7,10408
 80070ec:	21400217 	ldw	r5,8(r4)
 80070f0:	12400054 	ori	r9,r2,1
 80070f4:	1891883a 	add	r8,r3,r2
 80070f8:	29c05226 	beq	r5,r7,8007244 <_free_r+0x270>
 80070fc:	21000317 	ldw	r4,12(r4)
 8007100:	29000315 	stw	r4,12(r5)
 8007104:	21400215 	stw	r5,8(r4)
 8007108:	1a400115 	stw	r9,4(r3)
 800710c:	40800015 	stw	r2,0(r8)
 8007110:	003fd806 	br	8007074 <_free_r+0xa0>
 8007114:	f800283a 	ret
 8007118:	11400054 	ori	r5,r2,1
 800711c:	817fff15 	stw	r5,-4(r16)
 8007120:	20800015 	stw	r2,0(r4)
 8007124:	11008028 	cmpgeui	r4,r2,512
 8007128:	203fd426 	beq	r4,zero,800707c <_free_r+0xa8>
 800712c:	1008d27a 	srli	r4,r2,9
 8007130:	21400168 	cmpgeui	r5,r4,5
 8007134:	2800341e 	bne	r5,zero,8007208 <_free_r+0x234>
 8007138:	1008d1ba 	srli	r4,r2,6
 800713c:	21c00e44 	addi	r7,r4,57
 8007140:	380e90fa 	slli	r7,r7,3
 8007144:	21400e04 	addi	r5,r4,56
 8007148:	31cf883a 	add	r7,r6,r7
 800714c:	39000017 	ldw	r4,0(r7)
 8007150:	39fffe04 	addi	r7,r7,-8
 8007154:	39004226 	beq	r7,r4,8007260 <_free_r+0x28c>
 8007158:	01bfff04 	movi	r6,-4
 800715c:	21400117 	ldw	r5,4(r4)
 8007160:	298a703a 	and	r5,r5,r6
 8007164:	1140022e 	bgeu	r2,r5,8007170 <_free_r+0x19c>
 8007168:	21000217 	ldw	r4,8(r4)
 800716c:	393ffb1e 	bne	r7,r4,800715c <_free_r+0x188>
 8007170:	21c00317 	ldw	r7,12(r4)
 8007174:	19c00315 	stw	r7,12(r3)
 8007178:	19000215 	stw	r4,8(r3)
 800717c:	38c00215 	stw	r3,8(r7)
 8007180:	20c00315 	stw	r3,12(r4)
 8007184:	003fcd06 	br	80070bc <_free_r+0xe8>
 8007188:	40004d1e 	bne	r8,zero,80072c0 <_free_r+0x2ec>
 800718c:	21800317 	ldw	r6,12(r4)
 8007190:	21000217 	ldw	r4,8(r4)
 8007194:	2885883a 	add	r2,r5,r2
 8007198:	11400054 	ori	r5,r2,1
 800719c:	21800315 	stw	r6,12(r4)
 80071a0:	31000215 	stw	r4,8(r6)
 80071a4:	19400115 	stw	r5,4(r3)
 80071a8:	1887883a 	add	r3,r3,r2
 80071ac:	18800015 	stw	r2,0(r3)
 80071b0:	003fc206 	br	80070bc <_free_r+0xe8>
 80071b4:	39c0004c 	andi	r7,r7,1
 80071b8:	1145883a 	add	r2,r2,r5
 80071bc:	3800071e 	bne	r7,zero,80071dc <_free_r+0x208>
 80071c0:	81fffe17 	ldw	r7,-8(r16)
 80071c4:	19c7c83a 	sub	r3,r3,r7
 80071c8:	19000317 	ldw	r4,12(r3)
 80071cc:	19400217 	ldw	r5,8(r3)
 80071d0:	11c5883a 	add	r2,r2,r7
 80071d4:	29000315 	stw	r4,12(r5)
 80071d8:	21400215 	stw	r5,8(r4)
 80071dc:	01020074 	movhi	r4,2049
 80071e0:	11400054 	ori	r5,r2,1
 80071e4:	21100e17 	ldw	r4,16440(r4)
 80071e8:	19400115 	stw	r5,4(r3)
 80071ec:	30c00215 	stw	r3,8(r6)
 80071f0:	113fb236 	bltu	r2,r4,80070bc <_free_r+0xe8>
 80071f4:	00820074 	movhi	r2,2049
 80071f8:	11572717 	ldw	r5,23708(r2)
 80071fc:	8809883a 	mov	r4,r17
 8007200:	8006eb80 	call	8006eb8 <_malloc_trim_r>
 8007204:	003fad06 	br	80070bc <_free_r+0xe8>
 8007208:	21400568 	cmpgeui	r5,r4,21
 800720c:	28000926 	beq	r5,zero,8007234 <_free_r+0x260>
 8007210:	21401568 	cmpgeui	r5,r4,85
 8007214:	2800191e 	bne	r5,zero,800727c <_free_r+0x2a8>
 8007218:	1008d33a 	srli	r4,r2,12
 800721c:	21c01bc4 	addi	r7,r4,111
 8007220:	21401b84 	addi	r5,r4,110
 8007224:	380e90fa 	slli	r7,r7,3
 8007228:	003fc706 	br	8007148 <_free_r+0x174>
 800722c:	1145883a 	add	r2,r2,r5
 8007230:	003fae06 	br	80070ec <_free_r+0x118>
 8007234:	21c01704 	addi	r7,r4,92
 8007238:	214016c4 	addi	r5,r4,91
 800723c:	380e90fa 	slli	r7,r7,3
 8007240:	003fc106 	br	8007148 <_free_r+0x174>
 8007244:	30c00515 	stw	r3,20(r6)
 8007248:	30c00415 	stw	r3,16(r6)
 800724c:	19c00315 	stw	r7,12(r3)
 8007250:	19c00215 	stw	r7,8(r3)
 8007254:	1a400115 	stw	r9,4(r3)
 8007258:	40800015 	stw	r2,0(r8)
 800725c:	003f9706 	br	80070bc <_free_r+0xe8>
 8007260:	280bd0ba 	srai	r5,r5,2
 8007264:	00800044 	movi	r2,1
 8007268:	32000117 	ldw	r8,4(r6)
 800726c:	114a983a 	sll	r5,r2,r5
 8007270:	2a0ab03a 	or	r5,r5,r8
 8007274:	31400115 	stw	r5,4(r6)
 8007278:	003fbe06 	br	8007174 <_free_r+0x1a0>
 800727c:	21405568 	cmpgeui	r5,r4,341
 8007280:	2800051e 	bne	r5,zero,8007298 <_free_r+0x2c4>
 8007284:	1008d3fa 	srli	r4,r2,15
 8007288:	21c01e04 	addi	r7,r4,120
 800728c:	21401dc4 	addi	r5,r4,119
 8007290:	380e90fa 	slli	r7,r7,3
 8007294:	003fac06 	br	8007148 <_free_r+0x174>
 8007298:	21015568 	cmpgeui	r4,r4,1365
 800729c:	2000051e 	bne	r4,zero,80072b4 <_free_r+0x2e0>
 80072a0:	1008d4ba 	srli	r4,r2,18
 80072a4:	21c01f44 	addi	r7,r4,125
 80072a8:	21401f04 	addi	r5,r4,124
 80072ac:	380e90fa 	slli	r7,r7,3
 80072b0:	003fa506 	br	8007148 <_free_r+0x174>
 80072b4:	01c0fe04 	movi	r7,1016
 80072b8:	01401f84 	movi	r5,126
 80072bc:	003fa206 	br	8007148 <_free_r+0x174>
 80072c0:	11400054 	ori	r5,r2,1
 80072c4:	19400115 	stw	r5,4(r3)
 80072c8:	20800015 	stw	r2,0(r4)
 80072cc:	003f7b06 	br	80070bc <_free_r+0xe8>

080072d0 <__sfvwrite_r>:
 80072d0:	30800217 	ldw	r2,8(r6)
 80072d4:	1000ca26 	beq	r2,zero,8007600 <__sfvwrite_r+0x330>
 80072d8:	2880030b 	ldhu	r2,12(r5)
 80072dc:	defff304 	addi	sp,sp,-52
 80072e0:	dd000715 	stw	r20,28(sp)
 80072e4:	dc000315 	stw	r16,12(sp)
 80072e8:	dfc00c15 	stw	ra,48(sp)
 80072ec:	df000b15 	stw	fp,44(sp)
 80072f0:	ddc00a15 	stw	r23,40(sp)
 80072f4:	dd800915 	stw	r22,36(sp)
 80072f8:	dd400815 	stw	r21,32(sp)
 80072fc:	dcc00615 	stw	r19,24(sp)
 8007300:	dc800515 	stw	r18,20(sp)
 8007304:	dc400415 	stw	r17,16(sp)
 8007308:	d9000015 	stw	r4,0(sp)
 800730c:	10c0020c 	andi	r3,r2,8
 8007310:	2821883a 	mov	r16,r5
 8007314:	3029883a 	mov	r20,r6
 8007318:	18002426 	beq	r3,zero,80073ac <__sfvwrite_r+0xdc>
 800731c:	28c00417 	ldw	r3,16(r5)
 8007320:	18002226 	beq	r3,zero,80073ac <__sfvwrite_r+0xdc>
 8007324:	10c0008c 	andi	r3,r2,2
 8007328:	a4400017 	ldw	r17,0(r20)
 800732c:	18002726 	beq	r3,zero,80073cc <__sfvwrite_r+0xfc>
 8007330:	80c00917 	ldw	r3,36(r16)
 8007334:	80800717 	ldw	r2,28(r16)
 8007338:	05600034 	movhi	r21,32768
 800733c:	0027883a 	mov	r19,zero
 8007340:	0025883a 	mov	r18,zero
 8007344:	ad7f0004 	addi	r21,r21,-1024
 8007348:	980d883a 	mov	r6,r19
 800734c:	100b883a 	mov	r5,r2
 8007350:	d9000017 	ldw	r4,0(sp)
 8007354:	90001126 	beq	r18,zero,800739c <__sfvwrite_r+0xcc>
 8007358:	900f883a 	mov	r7,r18
 800735c:	ac80012e 	bgeu	r21,r18,8007364 <__sfvwrite_r+0x94>
 8007360:	a80f883a 	mov	r7,r21
 8007364:	183ee83a 	callr	r3
 8007368:	0080a00e 	bge	zero,r2,80075ec <__sfvwrite_r+0x31c>
 800736c:	a0c00217 	ldw	r3,8(r20)
 8007370:	98a7883a 	add	r19,r19,r2
 8007374:	90a5c83a 	sub	r18,r18,r2
 8007378:	1885c83a 	sub	r2,r3,r2
 800737c:	a0800215 	stw	r2,8(r20)
 8007380:	10006426 	beq	r2,zero,8007514 <__sfvwrite_r+0x244>
 8007384:	80800717 	ldw	r2,28(r16)
 8007388:	80c00917 	ldw	r3,36(r16)
 800738c:	980d883a 	mov	r6,r19
 8007390:	100b883a 	mov	r5,r2
 8007394:	d9000017 	ldw	r4,0(sp)
 8007398:	903fef1e 	bne	r18,zero,8007358 <__sfvwrite_r+0x88>
 800739c:	8cc00017 	ldw	r19,0(r17)
 80073a0:	8c800117 	ldw	r18,4(r17)
 80073a4:	8c400204 	addi	r17,r17,8
 80073a8:	003fe706 	br	8007348 <__sfvwrite_r+0x78>
 80073ac:	d9000017 	ldw	r4,0(sp)
 80073b0:	800b883a 	mov	r5,r16
 80073b4:	8004e580 	call	8004e58 <__swsetup_r>
 80073b8:	1000f81e 	bne	r2,zero,800779c <__sfvwrite_r+0x4cc>
 80073bc:	8080030b 	ldhu	r2,12(r16)
 80073c0:	a4400017 	ldw	r17,0(r20)
 80073c4:	10c0008c 	andi	r3,r2,2
 80073c8:	183fd91e 	bne	r3,zero,8007330 <__sfvwrite_r+0x60>
 80073cc:	10c0004c 	andi	r3,r2,1
 80073d0:	84800217 	ldw	r18,8(r16)
 80073d4:	87000017 	ldw	fp,0(r16)
 80073d8:	18008b1e 	bne	r3,zero,8007608 <__sfvwrite_r+0x338>
 80073dc:	00e00034 	movhi	r3,32768
 80073e0:	18ffff84 	addi	r3,r3,-2
 80073e4:	01200034 	movhi	r4,32768
 80073e8:	d8c00115 	stw	r3,4(sp)
 80073ec:	20ffffc4 	addi	r3,r4,-1
 80073f0:	002d883a 	mov	r22,zero
 80073f4:	002f883a 	mov	r23,zero
 80073f8:	d8c00215 	stw	r3,8(sp)
 80073fc:	b8004126 	beq	r23,zero,8007504 <__sfvwrite_r+0x234>
 8007400:	1100800c 	andi	r4,r2,512
 8007404:	20009126 	beq	r4,zero,800764c <__sfvwrite_r+0x37c>
 8007408:	902b883a 	mov	r21,r18
 800740c:	bc80b836 	bltu	r23,r18,80076f0 <__sfvwrite_r+0x420>
 8007410:	1101200c 	andi	r4,r2,1152
 8007414:	20002626 	beq	r4,zero,80074b0 <__sfvwrite_r+0x1e0>
 8007418:	84800517 	ldw	r18,20(r16)
 800741c:	81400417 	ldw	r5,16(r16)
 8007420:	b9000044 	addi	r4,r23,1
 8007424:	948d883a 	add	r6,r18,r18
 8007428:	348d883a 	add	r6,r6,r18
 800742c:	3024d7fa 	srli	r18,r6,31
 8007430:	e167c83a 	sub	r19,fp,r5
 8007434:	24c9883a 	add	r4,r4,r19
 8007438:	91a5883a 	add	r18,r18,r6
 800743c:	9025d07a 	srai	r18,r18,1
 8007440:	900d883a 	mov	r6,r18
 8007444:	9100022e 	bgeu	r18,r4,8007450 <__sfvwrite_r+0x180>
 8007448:	2025883a 	mov	r18,r4
 800744c:	200d883a 	mov	r6,r4
 8007450:	1081000c 	andi	r2,r2,1024
 8007454:	1000bf26 	beq	r2,zero,8007754 <__sfvwrite_r+0x484>
 8007458:	d9000017 	ldw	r4,0(sp)
 800745c:	300b883a 	mov	r5,r6
 8007460:	8007af00 	call	8007af0 <_malloc_r>
 8007464:	1000c826 	beq	r2,zero,8007788 <__sfvwrite_r+0x4b8>
 8007468:	81400417 	ldw	r5,16(r16)
 800746c:	980d883a 	mov	r6,r19
 8007470:	1009883a 	mov	r4,r2
 8007474:	80083cc0 	call	80083cc <memcpy>
 8007478:	100f883a 	mov	r7,r2
 800747c:	8080030b 	ldhu	r2,12(r16)
 8007480:	00fedfc4 	movi	r3,-1153
 8007484:	10c4703a 	and	r2,r2,r3
 8007488:	10802014 	ori	r2,r2,128
 800748c:	8080030d 	sth	r2,12(r16)
 8007490:	94c5c83a 	sub	r2,r18,r19
 8007494:	3cf9883a 	add	fp,r7,r19
 8007498:	84800515 	stw	r18,20(r16)
 800749c:	81c00415 	stw	r7,16(r16)
 80074a0:	87000015 	stw	fp,0(r16)
 80074a4:	b825883a 	mov	r18,r23
 80074a8:	80800215 	stw	r2,8(r16)
 80074ac:	b82b883a 	mov	r21,r23
 80074b0:	a80d883a 	mov	r6,r21
 80074b4:	b00b883a 	mov	r5,r22
 80074b8:	e009883a 	mov	r4,fp
 80074bc:	80084cc0 	call	80084cc <memmove>
 80074c0:	80800217 	ldw	r2,8(r16)
 80074c4:	81800017 	ldw	r6,0(r16)
 80074c8:	b827883a 	mov	r19,r23
 80074cc:	14a5c83a 	sub	r18,r2,r18
 80074d0:	354d883a 	add	r6,r6,r21
 80074d4:	84800215 	stw	r18,8(r16)
 80074d8:	81800015 	stw	r6,0(r16)
 80074dc:	002f883a 	mov	r23,zero
 80074e0:	a0800217 	ldw	r2,8(r20)
 80074e4:	b4ed883a 	add	r22,r22,r19
 80074e8:	14e7c83a 	sub	r19,r2,r19
 80074ec:	a4c00215 	stw	r19,8(r20)
 80074f0:	98000826 	beq	r19,zero,8007514 <__sfvwrite_r+0x244>
 80074f4:	8080030b 	ldhu	r2,12(r16)
 80074f8:	84800217 	ldw	r18,8(r16)
 80074fc:	87000017 	ldw	fp,0(r16)
 8007500:	b83fbf1e 	bne	r23,zero,8007400 <__sfvwrite_r+0x130>
 8007504:	8d800017 	ldw	r22,0(r17)
 8007508:	8dc00117 	ldw	r23,4(r17)
 800750c:	8c400204 	addi	r17,r17,8
 8007510:	003fba06 	br	80073fc <__sfvwrite_r+0x12c>
 8007514:	0005883a 	mov	r2,zero
 8007518:	dfc00c17 	ldw	ra,48(sp)
 800751c:	df000b17 	ldw	fp,44(sp)
 8007520:	ddc00a17 	ldw	r23,40(sp)
 8007524:	dd800917 	ldw	r22,36(sp)
 8007528:	dd400817 	ldw	r21,32(sp)
 800752c:	dd000717 	ldw	r20,28(sp)
 8007530:	dcc00617 	ldw	r19,24(sp)
 8007534:	dc800517 	ldw	r18,20(sp)
 8007538:	dc400417 	ldw	r17,16(sp)
 800753c:	dc000317 	ldw	r16,12(sp)
 8007540:	dec00d04 	addi	sp,sp,52
 8007544:	f800283a 	ret
 8007548:	b1c07116 	blt	r22,r7,8007710 <__sfvwrite_r+0x440>
 800754c:	80800917 	ldw	r2,36(r16)
 8007550:	81400717 	ldw	r5,28(r16)
 8007554:	d9000017 	ldw	r4,0(sp)
 8007558:	b80d883a 	mov	r6,r23
 800755c:	103ee83a 	callr	r2
 8007560:	1025883a 	mov	r18,r2
 8007564:	0080210e 	bge	zero,r2,80075ec <__sfvwrite_r+0x31c>
 8007568:	acabc83a 	sub	r21,r21,r18
 800756c:	a8006326 	beq	r21,zero,80076fc <__sfvwrite_r+0x42c>
 8007570:	00800044 	movi	r2,1
 8007574:	a0c00217 	ldw	r3,8(r20)
 8007578:	bcaf883a 	add	r23,r23,r18
 800757c:	9ca7c83a 	sub	r19,r19,r18
 8007580:	1ca5c83a 	sub	r18,r3,r18
 8007584:	a4800215 	stw	r18,8(r20)
 8007588:	903fe226 	beq	r18,zero,8007514 <__sfvwrite_r+0x244>
 800758c:	84800217 	ldw	r18,8(r16)
 8007590:	87000017 	ldw	fp,0(r16)
 8007594:	98002126 	beq	r19,zero,800761c <__sfvwrite_r+0x34c>
 8007598:	10002426 	beq	r2,zero,800762c <__sfvwrite_r+0x35c>
 800759c:	a805883a 	mov	r2,r21
 80075a0:	982d883a 	mov	r22,r19
 80075a4:	14c0012e 	bgeu	r2,r19,80075ac <__sfvwrite_r+0x2dc>
 80075a8:	102d883a 	mov	r22,r2
 80075ac:	80800417 	ldw	r2,16(r16)
 80075b0:	81c00517 	ldw	r7,20(r16)
 80075b4:	173fe42e 	bgeu	r2,fp,8007548 <__sfvwrite_r+0x278>
 80075b8:	3ca5883a 	add	r18,r7,r18
 80075bc:	95bfe20e 	bge	r18,r22,8007548 <__sfvwrite_r+0x278>
 80075c0:	b80b883a 	mov	r5,r23
 80075c4:	e009883a 	mov	r4,fp
 80075c8:	900d883a 	mov	r6,r18
 80075cc:	80084cc0 	call	80084cc <memmove>
 80075d0:	80800017 	ldw	r2,0(r16)
 80075d4:	d9000017 	ldw	r4,0(sp)
 80075d8:	800b883a 	mov	r5,r16
 80075dc:	1485883a 	add	r2,r2,r18
 80075e0:	80800015 	stw	r2,0(r16)
 80075e4:	8006adc0 	call	8006adc <_fflush_r>
 80075e8:	103fdf26 	beq	r2,zero,8007568 <__sfvwrite_r+0x298>
 80075ec:	8080030b 	ldhu	r2,12(r16)
 80075f0:	10801014 	ori	r2,r2,64
 80075f4:	8080030d 	sth	r2,12(r16)
 80075f8:	00bfffc4 	movi	r2,-1
 80075fc:	003fc606 	br	8007518 <__sfvwrite_r+0x248>
 8007600:	0005883a 	mov	r2,zero
 8007604:	f800283a 	ret
 8007608:	0027883a 	mov	r19,zero
 800760c:	002b883a 	mov	r21,zero
 8007610:	0005883a 	mov	r2,zero
 8007614:	002f883a 	mov	r23,zero
 8007618:	983fdf1e 	bne	r19,zero,8007598 <__sfvwrite_r+0x2c8>
 800761c:	8cc00117 	ldw	r19,4(r17)
 8007620:	8dc00017 	ldw	r23,0(r17)
 8007624:	8c400204 	addi	r17,r17,8
 8007628:	983ffc26 	beq	r19,zero,800761c <__sfvwrite_r+0x34c>
 800762c:	980d883a 	mov	r6,r19
 8007630:	01400284 	movi	r5,10
 8007634:	b809883a 	mov	r4,r23
 8007638:	80082e40 	call	80082e4 <memchr>
 800763c:	10004226 	beq	r2,zero,8007748 <__sfvwrite_r+0x478>
 8007640:	10800044 	addi	r2,r2,1
 8007644:	15ebc83a 	sub	r21,r2,r23
 8007648:	003fd406 	br	800759c <__sfvwrite_r+0x2cc>
 800764c:	80800417 	ldw	r2,16(r16)
 8007650:	17001436 	bltu	r2,fp,80076a4 <__sfvwrite_r+0x3d4>
 8007654:	84c00517 	ldw	r19,20(r16)
 8007658:	bcc01236 	bltu	r23,r19,80076a4 <__sfvwrite_r+0x3d4>
 800765c:	d8800117 	ldw	r2,4(sp)
 8007660:	15c0372e 	bgeu	r2,r23,8007740 <__sfvwrite_r+0x470>
 8007664:	d9000217 	ldw	r4,8(sp)
 8007668:	980b883a 	mov	r5,r19
 800766c:	800281c0 	call	800281c <__divsi3>
 8007670:	980b883a 	mov	r5,r19
 8007674:	1009883a 	mov	r4,r2
 8007678:	80029d40 	call	80029d4 <__mulsi3>
 800767c:	81400717 	ldw	r5,28(r16)
 8007680:	82800917 	ldw	r10,36(r16)
 8007684:	d9000017 	ldw	r4,0(sp)
 8007688:	100f883a 	mov	r7,r2
 800768c:	b00d883a 	mov	r6,r22
 8007690:	503ee83a 	callr	r10
 8007694:	00bfd50e 	bge	zero,r2,80075ec <__sfvwrite_r+0x31c>
 8007698:	1027883a 	mov	r19,r2
 800769c:	bcefc83a 	sub	r23,r23,r19
 80076a0:	003f8f06 	br	80074e0 <__sfvwrite_r+0x210>
 80076a4:	9027883a 	mov	r19,r18
 80076a8:	bc80012e 	bgeu	r23,r18,80076b0 <__sfvwrite_r+0x3e0>
 80076ac:	b827883a 	mov	r19,r23
 80076b0:	e009883a 	mov	r4,fp
 80076b4:	980d883a 	mov	r6,r19
 80076b8:	b00b883a 	mov	r5,r22
 80076bc:	80084cc0 	call	80084cc <memmove>
 80076c0:	80800217 	ldw	r2,8(r16)
 80076c4:	81000017 	ldw	r4,0(r16)
 80076c8:	14c5c83a 	sub	r2,r2,r19
 80076cc:	24c9883a 	add	r4,r4,r19
 80076d0:	80800215 	stw	r2,8(r16)
 80076d4:	81000015 	stw	r4,0(r16)
 80076d8:	103ff01e 	bne	r2,zero,800769c <__sfvwrite_r+0x3cc>
 80076dc:	d9000017 	ldw	r4,0(sp)
 80076e0:	800b883a 	mov	r5,r16
 80076e4:	8006adc0 	call	8006adc <_fflush_r>
 80076e8:	103fec26 	beq	r2,zero,800769c <__sfvwrite_r+0x3cc>
 80076ec:	003fbf06 	br	80075ec <__sfvwrite_r+0x31c>
 80076f0:	b825883a 	mov	r18,r23
 80076f4:	b82b883a 	mov	r21,r23
 80076f8:	003f6d06 	br	80074b0 <__sfvwrite_r+0x1e0>
 80076fc:	d9000017 	ldw	r4,0(sp)
 8007700:	800b883a 	mov	r5,r16
 8007704:	8006adc0 	call	8006adc <_fflush_r>
 8007708:	103f9a26 	beq	r2,zero,8007574 <__sfvwrite_r+0x2a4>
 800770c:	003fb706 	br	80075ec <__sfvwrite_r+0x31c>
 8007710:	b00d883a 	mov	r6,r22
 8007714:	b80b883a 	mov	r5,r23
 8007718:	e009883a 	mov	r4,fp
 800771c:	80084cc0 	call	80084cc <memmove>
 8007720:	80c00217 	ldw	r3,8(r16)
 8007724:	80800017 	ldw	r2,0(r16)
 8007728:	b025883a 	mov	r18,r22
 800772c:	1d87c83a 	sub	r3,r3,r22
 8007730:	15ad883a 	add	r22,r2,r22
 8007734:	80c00215 	stw	r3,8(r16)
 8007738:	85800015 	stw	r22,0(r16)
 800773c:	003f8a06 	br	8007568 <__sfvwrite_r+0x298>
 8007740:	b809883a 	mov	r4,r23
 8007744:	003fc806 	br	8007668 <__sfvwrite_r+0x398>
 8007748:	98800044 	addi	r2,r19,1
 800774c:	102b883a 	mov	r21,r2
 8007750:	003f9306 	br	80075a0 <__sfvwrite_r+0x2d0>
 8007754:	d9000017 	ldw	r4,0(sp)
 8007758:	80098480 	call	8009848 <_realloc_r>
 800775c:	100f883a 	mov	r7,r2
 8007760:	103f4b1e 	bne	r2,zero,8007490 <__sfvwrite_r+0x1c0>
 8007764:	dc400017 	ldw	r17,0(sp)
 8007768:	81400417 	ldw	r5,16(r16)
 800776c:	8809883a 	mov	r4,r17
 8007770:	8006fd40 	call	8006fd4 <_free_r>
 8007774:	8080030b 	ldhu	r2,12(r16)
 8007778:	00c00304 	movi	r3,12
 800777c:	88c00015 	stw	r3,0(r17)
 8007780:	10bfdfcc 	andi	r2,r2,65407
 8007784:	003f9a06 	br	80075f0 <__sfvwrite_r+0x320>
 8007788:	d8c00017 	ldw	r3,0(sp)
 800778c:	00800304 	movi	r2,12
 8007790:	18800015 	stw	r2,0(r3)
 8007794:	8080030b 	ldhu	r2,12(r16)
 8007798:	003f9506 	br	80075f0 <__sfvwrite_r+0x320>
 800779c:	00bfffc4 	movi	r2,-1
 80077a0:	003f5d06 	br	8007518 <__sfvwrite_r+0x248>

080077a4 <_fwalk>:
 80077a4:	defffa04 	addi	sp,sp,-24
 80077a8:	dc800215 	stw	r18,8(sp)
 80077ac:	dfc00515 	stw	ra,20(sp)
 80077b0:	dd000415 	stw	r20,16(sp)
 80077b4:	dcc00315 	stw	r19,12(sp)
 80077b8:	dc400115 	stw	r17,4(sp)
 80077bc:	dc000015 	stw	r16,0(sp)
 80077c0:	2480b804 	addi	r18,r4,736
 80077c4:	90001e26 	beq	r18,zero,8007840 <_fwalk+0x9c>
 80077c8:	2827883a 	mov	r19,r5
 80077cc:	0029883a 	mov	r20,zero
 80077d0:	94400117 	ldw	r17,4(r18)
 80077d4:	94000217 	ldw	r16,8(r18)
 80077d8:	8c7fffc4 	addi	r17,r17,-1
 80077dc:	88000d16 	blt	r17,zero,8007814 <_fwalk+0x70>
 80077e0:	8080030b 	ldhu	r2,12(r16)
 80077e4:	8c7fffc4 	addi	r17,r17,-1
 80077e8:	108000b0 	cmpltui	r2,r2,2
 80077ec:	1000061e 	bne	r2,zero,8007808 <_fwalk+0x64>
 80077f0:	8080038f 	ldh	r2,14(r16)
 80077f4:	8009883a 	mov	r4,r16
 80077f8:	10bfffe0 	cmpeqi	r2,r2,-1
 80077fc:	1000021e 	bne	r2,zero,8007808 <_fwalk+0x64>
 8007800:	983ee83a 	callr	r19
 8007804:	a0a8b03a 	or	r20,r20,r2
 8007808:	88bfffd8 	cmpnei	r2,r17,-1
 800780c:	84001a04 	addi	r16,r16,104
 8007810:	103ff31e 	bne	r2,zero,80077e0 <_fwalk+0x3c>
 8007814:	94800017 	ldw	r18,0(r18)
 8007818:	903fed1e 	bne	r18,zero,80077d0 <_fwalk+0x2c>
 800781c:	a005883a 	mov	r2,r20
 8007820:	dfc00517 	ldw	ra,20(sp)
 8007824:	dd000417 	ldw	r20,16(sp)
 8007828:	dcc00317 	ldw	r19,12(sp)
 800782c:	dc800217 	ldw	r18,8(sp)
 8007830:	dc400117 	ldw	r17,4(sp)
 8007834:	dc000017 	ldw	r16,0(sp)
 8007838:	dec00604 	addi	sp,sp,24
 800783c:	f800283a 	ret
 8007840:	0029883a 	mov	r20,zero
 8007844:	003ff506 	br	800781c <_fwalk+0x78>

08007848 <_fwalk_reent>:
 8007848:	defff904 	addi	sp,sp,-28
 800784c:	dc800215 	stw	r18,8(sp)
 8007850:	dfc00615 	stw	ra,24(sp)
 8007854:	dd400515 	stw	r21,20(sp)
 8007858:	dd000415 	stw	r20,16(sp)
 800785c:	dcc00315 	stw	r19,12(sp)
 8007860:	dc400115 	stw	r17,4(sp)
 8007864:	dc000015 	stw	r16,0(sp)
 8007868:	2480b804 	addi	r18,r4,736
 800786c:	90002126 	beq	r18,zero,80078f4 <_fwalk_reent+0xac>
 8007870:	2829883a 	mov	r20,r5
 8007874:	2027883a 	mov	r19,r4
 8007878:	002b883a 	mov	r21,zero
 800787c:	94400117 	ldw	r17,4(r18)
 8007880:	94000217 	ldw	r16,8(r18)
 8007884:	8c7fffc4 	addi	r17,r17,-1
 8007888:	88000e16 	blt	r17,zero,80078c4 <_fwalk_reent+0x7c>
 800788c:	8080030b 	ldhu	r2,12(r16)
 8007890:	8c7fffc4 	addi	r17,r17,-1
 8007894:	108000b0 	cmpltui	r2,r2,2
 8007898:	1000071e 	bne	r2,zero,80078b8 <_fwalk_reent+0x70>
 800789c:	8080038f 	ldh	r2,14(r16)
 80078a0:	800b883a 	mov	r5,r16
 80078a4:	9809883a 	mov	r4,r19
 80078a8:	10bfffe0 	cmpeqi	r2,r2,-1
 80078ac:	1000021e 	bne	r2,zero,80078b8 <_fwalk_reent+0x70>
 80078b0:	a03ee83a 	callr	r20
 80078b4:	a8aab03a 	or	r21,r21,r2
 80078b8:	88bfffd8 	cmpnei	r2,r17,-1
 80078bc:	84001a04 	addi	r16,r16,104
 80078c0:	103ff21e 	bne	r2,zero,800788c <_fwalk_reent+0x44>
 80078c4:	94800017 	ldw	r18,0(r18)
 80078c8:	903fec1e 	bne	r18,zero,800787c <_fwalk_reent+0x34>
 80078cc:	a805883a 	mov	r2,r21
 80078d0:	dfc00617 	ldw	ra,24(sp)
 80078d4:	dd400517 	ldw	r21,20(sp)
 80078d8:	dd000417 	ldw	r20,16(sp)
 80078dc:	dcc00317 	ldw	r19,12(sp)
 80078e0:	dc800217 	ldw	r18,8(sp)
 80078e4:	dc400117 	ldw	r17,4(sp)
 80078e8:	dc000017 	ldw	r16,0(sp)
 80078ec:	dec00704 	addi	sp,sp,28
 80078f0:	f800283a 	ret
 80078f4:	002b883a 	mov	r21,zero
 80078f8:	003ff406 	br	80078cc <_fwalk_reent+0x84>

080078fc <__localeconv_l>:
 80078fc:	20803c04 	addi	r2,r4,240
 8007900:	f800283a 	ret

08007904 <_localeconv_r>:
 8007904:	00820074 	movhi	r2,2049
 8007908:	108b6604 	addi	r2,r2,11672
 800790c:	f800283a 	ret

08007910 <localeconv>:
 8007910:	00820074 	movhi	r2,2049
 8007914:	108b6604 	addi	r2,r2,11672
 8007918:	f800283a 	ret

0800791c <__swhatbuf_r>:
 800791c:	deffea04 	addi	sp,sp,-88
 8007920:	dc001215 	stw	r16,72(sp)
 8007924:	2821883a 	mov	r16,r5
 8007928:	2940038f 	ldh	r5,14(r5)
 800792c:	dc801415 	stw	r18,80(sp)
 8007930:	dc401315 	stw	r17,76(sp)
 8007934:	dfc01515 	stw	ra,84(sp)
 8007938:	3023883a 	mov	r17,r6
 800793c:	3825883a 	mov	r18,r7
 8007940:	28001016 	blt	r5,zero,8007984 <__swhatbuf_r+0x68>
 8007944:	d80d883a 	mov	r6,sp
 8007948:	800bb080 	call	800bb08 <_fstat_r>
 800794c:	10000d16 	blt	r2,zero,8007984 <__swhatbuf_r+0x68>
 8007950:	d8c00117 	ldw	r3,4(sp)
 8007954:	00820004 	movi	r2,2048
 8007958:	18fc000c 	andi	r3,r3,61440
 800795c:	18c80020 	cmpeqi	r3,r3,8192
 8007960:	90c00015 	stw	r3,0(r18)
 8007964:	00c10004 	movi	r3,1024
 8007968:	88c00015 	stw	r3,0(r17)
 800796c:	dfc01517 	ldw	ra,84(sp)
 8007970:	dc801417 	ldw	r18,80(sp)
 8007974:	dc401317 	ldw	r17,76(sp)
 8007978:	dc001217 	ldw	r16,72(sp)
 800797c:	dec01604 	addi	sp,sp,88
 8007980:	f800283a 	ret
 8007984:	8080030b 	ldhu	r2,12(r16)
 8007988:	90000015 	stw	zero,0(r18)
 800798c:	1080200c 	andi	r2,r2,128
 8007990:	10000426 	beq	r2,zero,80079a4 <__swhatbuf_r+0x88>
 8007994:	00801004 	movi	r2,64
 8007998:	88800015 	stw	r2,0(r17)
 800799c:	0005883a 	mov	r2,zero
 80079a0:	003ff206 	br	800796c <__swhatbuf_r+0x50>
 80079a4:	00810004 	movi	r2,1024
 80079a8:	88800015 	stw	r2,0(r17)
 80079ac:	0005883a 	mov	r2,zero
 80079b0:	003fee06 	br	800796c <__swhatbuf_r+0x50>

080079b4 <__smakebuf_r>:
 80079b4:	28c0030b 	ldhu	r3,12(r5)
 80079b8:	defffa04 	addi	sp,sp,-24
 80079bc:	dc000215 	stw	r16,8(sp)
 80079c0:	dfc00515 	stw	ra,20(sp)
 80079c4:	dc800415 	stw	r18,16(sp)
 80079c8:	dc400315 	stw	r17,12(sp)
 80079cc:	18c0008c 	andi	r3,r3,2
 80079d0:	2821883a 	mov	r16,r5
 80079d4:	18000b26 	beq	r3,zero,8007a04 <__smakebuf_r+0x50>
 80079d8:	28c010c4 	addi	r3,r5,67
 80079dc:	28c00015 	stw	r3,0(r5)
 80079e0:	28c00415 	stw	r3,16(r5)
 80079e4:	00c00044 	movi	r3,1
 80079e8:	28c00515 	stw	r3,20(r5)
 80079ec:	dfc00517 	ldw	ra,20(sp)
 80079f0:	dc800417 	ldw	r18,16(sp)
 80079f4:	dc400317 	ldw	r17,12(sp)
 80079f8:	dc000217 	ldw	r16,8(sp)
 80079fc:	dec00604 	addi	sp,sp,24
 8007a00:	f800283a 	ret
 8007a04:	d9c00104 	addi	r7,sp,4
 8007a08:	d80d883a 	mov	r6,sp
 8007a0c:	2023883a 	mov	r17,r4
 8007a10:	800791c0 	call	800791c <__swhatbuf_r>
 8007a14:	1025883a 	mov	r18,r2
 8007a18:	d8800117 	ldw	r2,4(sp)
 8007a1c:	1000131e 	bne	r2,zero,8007a6c <__smakebuf_r+0xb8>
 8007a20:	d9400017 	ldw	r5,0(sp)
 8007a24:	8809883a 	mov	r4,r17
 8007a28:	8007af00 	call	8007af0 <_malloc_r>
 8007a2c:	10001c26 	beq	r2,zero,8007aa0 <__smakebuf_r+0xec>
 8007a30:	01020034 	movhi	r4,2048
 8007a34:	211adb04 	addi	r4,r4,27500
 8007a38:	80c0030b 	ldhu	r3,12(r16)
 8007a3c:	89000f15 	stw	r4,60(r17)
 8007a40:	80800015 	stw	r2,0(r16)
 8007a44:	80800415 	stw	r2,16(r16)
 8007a48:	d8800017 	ldw	r2,0(sp)
 8007a4c:	d9400117 	ldw	r5,4(sp)
 8007a50:	18c02014 	ori	r3,r3,128
 8007a54:	80c0030d 	sth	r3,12(r16)
 8007a58:	80800515 	stw	r2,20(r16)
 8007a5c:	28001c1e 	bne	r5,zero,8007ad0 <__smakebuf_r+0x11c>
 8007a60:	90c6b03a 	or	r3,r18,r3
 8007a64:	80c0030d 	sth	r3,12(r16)
 8007a68:	003fe006 	br	80079ec <__smakebuf_r+0x38>
 8007a6c:	8140038f 	ldh	r5,14(r16)
 8007a70:	8809883a 	mov	r4,r17
 8007a74:	800bb680 	call	800bb68 <_isatty_r>
 8007a78:	103fe926 	beq	r2,zero,8007a20 <__smakebuf_r+0x6c>
 8007a7c:	8080030b 	ldhu	r2,12(r16)
 8007a80:	80c010c4 	addi	r3,r16,67
 8007a84:	80c00015 	stw	r3,0(r16)
 8007a88:	10800054 	ori	r2,r2,1
 8007a8c:	8080030d 	sth	r2,12(r16)
 8007a90:	00800044 	movi	r2,1
 8007a94:	80c00415 	stw	r3,16(r16)
 8007a98:	80800515 	stw	r2,20(r16)
 8007a9c:	003fe006 	br	8007a20 <__smakebuf_r+0x6c>
 8007aa0:	8080030b 	ldhu	r2,12(r16)
 8007aa4:	10c0800c 	andi	r3,r2,512
 8007aa8:	183fd01e 	bne	r3,zero,80079ec <__smakebuf_r+0x38>
 8007aac:	10bfff0c 	andi	r2,r2,65532
 8007ab0:	10800094 	ori	r2,r2,2
 8007ab4:	80c010c4 	addi	r3,r16,67
 8007ab8:	8080030d 	sth	r2,12(r16)
 8007abc:	00800044 	movi	r2,1
 8007ac0:	80c00015 	stw	r3,0(r16)
 8007ac4:	80c00415 	stw	r3,16(r16)
 8007ac8:	80800515 	stw	r2,20(r16)
 8007acc:	003fc706 	br	80079ec <__smakebuf_r+0x38>
 8007ad0:	8140038f 	ldh	r5,14(r16)
 8007ad4:	8809883a 	mov	r4,r17
 8007ad8:	800bb680 	call	800bb68 <_isatty_r>
 8007adc:	80c0030b 	ldhu	r3,12(r16)
 8007ae0:	103fdf26 	beq	r2,zero,8007a60 <__smakebuf_r+0xac>
 8007ae4:	18ffff0c 	andi	r3,r3,65532
 8007ae8:	18c00054 	ori	r3,r3,1
 8007aec:	003fdc06 	br	8007a60 <__smakebuf_r+0xac>

08007af0 <_malloc_r>:
 8007af0:	defff604 	addi	sp,sp,-40
 8007af4:	dc400115 	stw	r17,4(sp)
 8007af8:	2c4002c4 	addi	r17,r5,11
 8007afc:	dc800215 	stw	r18,8(sp)
 8007b00:	dfc00915 	stw	ra,36(sp)
 8007b04:	df000815 	stw	fp,32(sp)
 8007b08:	ddc00715 	stw	r23,28(sp)
 8007b0c:	dd800615 	stw	r22,24(sp)
 8007b10:	dd400515 	stw	r21,20(sp)
 8007b14:	dd000415 	stw	r20,16(sp)
 8007b18:	dcc00315 	stw	r19,12(sp)
 8007b1c:	dc000015 	stw	r16,0(sp)
 8007b20:	888005e8 	cmpgeui	r2,r17,23
 8007b24:	2025883a 	mov	r18,r4
 8007b28:	10001b1e 	bne	r2,zero,8007b98 <_malloc_r+0xa8>
 8007b2c:	29400468 	cmpgeui	r5,r5,17
 8007b30:	2800951e 	bne	r5,zero,8007d88 <_malloc_r+0x298>
 8007b34:	800fa380 	call	800fa38 <__malloc_lock>
 8007b38:	04400404 	movi	r17,16
 8007b3c:	00800604 	movi	r2,24
 8007b40:	01800084 	movi	r6,2
 8007b44:	04c20074 	movhi	r19,2049
 8007b48:	9cca2804 	addi	r19,r19,10400
 8007b4c:	9885883a 	add	r2,r19,r2
 8007b50:	14000117 	ldw	r16,4(r2)
 8007b54:	10fffe04 	addi	r3,r2,-8
 8007b58:	80c09e26 	beq	r16,r3,8007dd4 <_malloc_r+0x2e4>
 8007b5c:	80800117 	ldw	r2,4(r16)
 8007b60:	81000317 	ldw	r4,12(r16)
 8007b64:	00ffff04 	movi	r3,-4
 8007b68:	10c4703a 	and	r2,r2,r3
 8007b6c:	81400217 	ldw	r5,8(r16)
 8007b70:	8085883a 	add	r2,r16,r2
 8007b74:	10c00117 	ldw	r3,4(r2)
 8007b78:	29000315 	stw	r4,12(r5)
 8007b7c:	21400215 	stw	r5,8(r4)
 8007b80:	18c00054 	ori	r3,r3,1
 8007b84:	10c00115 	stw	r3,4(r2)
 8007b88:	9009883a 	mov	r4,r18
 8007b8c:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8007b90:	80800204 	addi	r2,r16,8
 8007b94:	00007f06 	br	8007d94 <_malloc_r+0x2a4>
 8007b98:	00bffe04 	movi	r2,-8
 8007b9c:	88a2703a 	and	r17,r17,r2
 8007ba0:	88007916 	blt	r17,zero,8007d88 <_malloc_r+0x298>
 8007ba4:	89407836 	bltu	r17,r5,8007d88 <_malloc_r+0x298>
 8007ba8:	800fa380 	call	800fa38 <__malloc_lock>
 8007bac:	88807e28 	cmpgeui	r2,r17,504
 8007bb0:	10013326 	beq	r2,zero,8008080 <_malloc_r+0x590>
 8007bb4:	8804d27a 	srli	r2,r17,9
 8007bb8:	10008226 	beq	r2,zero,8007dc4 <_malloc_r+0x2d4>
 8007bbc:	10c00168 	cmpgeui	r3,r2,5
 8007bc0:	1801151e 	bne	r3,zero,8008018 <_malloc_r+0x528>
 8007bc4:	8804d1ba 	srli	r2,r17,6
 8007bc8:	11800e44 	addi	r6,r2,57
 8007bcc:	300a90fa 	slli	r5,r6,3
 8007bd0:	12000e04 	addi	r8,r2,56
 8007bd4:	04c20074 	movhi	r19,2049
 8007bd8:	9cca2804 	addi	r19,r19,10400
 8007bdc:	994b883a 	add	r5,r19,r5
 8007be0:	2c000117 	ldw	r16,4(r5)
 8007be4:	297ffe04 	addi	r5,r5,-8
 8007be8:	2c001126 	beq	r5,r16,8007c30 <_malloc_r+0x140>
 8007bec:	80800117 	ldw	r2,4(r16)
 8007bf0:	00ffff04 	movi	r3,-4
 8007bf4:	10c4703a 	and	r2,r2,r3
 8007bf8:	1447c83a 	sub	r3,r2,r17
 8007bfc:	19000408 	cmpgei	r4,r3,16
 8007c00:	2000e81e 	bne	r4,zero,8007fa4 <_malloc_r+0x4b4>
 8007c04:	1800e90e 	bge	r3,zero,8007fac <_malloc_r+0x4bc>
 8007c08:	01ffff04 	movi	r7,-4
 8007c0c:	00000606 	br	8007c28 <_malloc_r+0x138>
 8007c10:	80800117 	ldw	r2,4(r16)
 8007c14:	11c4703a 	and	r2,r2,r7
 8007c18:	1447c83a 	sub	r3,r2,r17
 8007c1c:	19000408 	cmpgei	r4,r3,16
 8007c20:	2000e01e 	bne	r4,zero,8007fa4 <_malloc_r+0x4b4>
 8007c24:	1800e10e 	bge	r3,zero,8007fac <_malloc_r+0x4bc>
 8007c28:	84000317 	ldw	r16,12(r16)
 8007c2c:	2c3ff81e 	bne	r5,r16,8007c10 <_malloc_r+0x120>
 8007c30:	9c000417 	ldw	r16,16(r19)
 8007c34:	02020074 	movhi	r8,2049
 8007c38:	420a2a04 	addi	r8,r8,10408
 8007c3c:	82006c26 	beq	r16,r8,8007df0 <_malloc_r+0x300>
 8007c40:	80c00117 	ldw	r3,4(r16)
 8007c44:	00bfff04 	movi	r2,-4
 8007c48:	1884703a 	and	r2,r3,r2
 8007c4c:	1447c83a 	sub	r3,r2,r17
 8007c50:	19000410 	cmplti	r4,r3,16
 8007c54:	20011526 	beq	r4,zero,80080ac <_malloc_r+0x5bc>
 8007c58:	9a000515 	stw	r8,20(r19)
 8007c5c:	9a000415 	stw	r8,16(r19)
 8007c60:	18010a0e 	bge	r3,zero,800808c <_malloc_r+0x59c>
 8007c64:	10c08028 	cmpgeui	r3,r2,512
 8007c68:	1800d21e 	bne	r3,zero,8007fb4 <_malloc_r+0x4c4>
 8007c6c:	1004d0fa 	srli	r2,r2,3
 8007c70:	99400117 	ldw	r5,4(r19)
 8007c74:	10c00044 	addi	r3,r2,1
 8007c78:	1009d0ba 	srai	r4,r2,2
 8007c7c:	180690fa 	slli	r3,r3,3
 8007c80:	00800044 	movi	r2,1
 8007c84:	1104983a 	sll	r2,r2,r4
 8007c88:	98c7883a 	add	r3,r19,r3
 8007c8c:	19000017 	ldw	r4,0(r3)
 8007c90:	1144b03a 	or	r2,r2,r5
 8007c94:	197ffe04 	addi	r5,r3,-8
 8007c98:	81400315 	stw	r5,12(r16)
 8007c9c:	81000215 	stw	r4,8(r16)
 8007ca0:	98800115 	stw	r2,4(r19)
 8007ca4:	1c000015 	stw	r16,0(r3)
 8007ca8:	24000315 	stw	r16,12(r4)
 8007cac:	3007d0ba 	srai	r3,r6,2
 8007cb0:	01000044 	movi	r4,1
 8007cb4:	20c8983a 	sll	r4,r4,r3
 8007cb8:	11005236 	bltu	r2,r4,8007e04 <_malloc_r+0x314>
 8007cbc:	2086703a 	and	r3,r4,r2
 8007cc0:	18000a1e 	bne	r3,zero,8007cec <_malloc_r+0x1fc>
 8007cc4:	00ffff04 	movi	r3,-4
 8007cc8:	2109883a 	add	r4,r4,r4
 8007ccc:	30cc703a 	and	r6,r6,r3
 8007cd0:	2086703a 	and	r3,r4,r2
 8007cd4:	31800104 	addi	r6,r6,4
 8007cd8:	1800041e 	bne	r3,zero,8007cec <_malloc_r+0x1fc>
 8007cdc:	2109883a 	add	r4,r4,r4
 8007ce0:	2086703a 	and	r3,r4,r2
 8007ce4:	31800104 	addi	r6,r6,4
 8007ce8:	183ffc26 	beq	r3,zero,8007cdc <_malloc_r+0x1ec>
 8007cec:	027fff04 	movi	r9,-4
 8007cf0:	301490fa 	slli	r10,r6,3
 8007cf4:	3017883a 	mov	r11,r6
 8007cf8:	9a95883a 	add	r10,r19,r10
 8007cfc:	500f883a 	mov	r7,r10
 8007d00:	3c000317 	ldw	r16,12(r7)
 8007d04:	3c00cd26 	beq	r7,r16,800803c <_malloc_r+0x54c>
 8007d08:	80800117 	ldw	r2,4(r16)
 8007d0c:	1244703a 	and	r2,r2,r9
 8007d10:	1447c83a 	sub	r3,r2,r17
 8007d14:	19400408 	cmpgei	r5,r3,16
 8007d18:	2800081e 	bne	r5,zero,8007d3c <_malloc_r+0x24c>
 8007d1c:	1800cc0e 	bge	r3,zero,8008050 <_malloc_r+0x560>
 8007d20:	84000317 	ldw	r16,12(r16)
 8007d24:	3c00c526 	beq	r7,r16,800803c <_malloc_r+0x54c>
 8007d28:	80800117 	ldw	r2,4(r16)
 8007d2c:	1244703a 	and	r2,r2,r9
 8007d30:	1447c83a 	sub	r3,r2,r17
 8007d34:	19400410 	cmplti	r5,r3,16
 8007d38:	283ff81e 	bne	r5,zero,8007d1c <_malloc_r+0x22c>
 8007d3c:	81000317 	ldw	r4,12(r16)
 8007d40:	81400217 	ldw	r5,8(r16)
 8007d44:	89800054 	ori	r6,r17,1
 8007d48:	81800115 	stw	r6,4(r16)
 8007d4c:	29000315 	stw	r4,12(r5)
 8007d50:	21400215 	stw	r5,8(r4)
 8007d54:	8463883a 	add	r17,r16,r17
 8007d58:	9c400515 	stw	r17,20(r19)
 8007d5c:	9c400415 	stw	r17,16(r19)
 8007d60:	19000054 	ori	r4,r3,1
 8007d64:	89000115 	stw	r4,4(r17)
 8007d68:	8085883a 	add	r2,r16,r2
 8007d6c:	8a000315 	stw	r8,12(r17)
 8007d70:	8a000215 	stw	r8,8(r17)
 8007d74:	10c00015 	stw	r3,0(r2)
 8007d78:	9009883a 	mov	r4,r18
 8007d7c:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8007d80:	80800204 	addi	r2,r16,8
 8007d84:	00000306 	br	8007d94 <_malloc_r+0x2a4>
 8007d88:	00800304 	movi	r2,12
 8007d8c:	90800015 	stw	r2,0(r18)
 8007d90:	0005883a 	mov	r2,zero
 8007d94:	dfc00917 	ldw	ra,36(sp)
 8007d98:	df000817 	ldw	fp,32(sp)
 8007d9c:	ddc00717 	ldw	r23,28(sp)
 8007da0:	dd800617 	ldw	r22,24(sp)
 8007da4:	dd400517 	ldw	r21,20(sp)
 8007da8:	dd000417 	ldw	r20,16(sp)
 8007dac:	dcc00317 	ldw	r19,12(sp)
 8007db0:	dc800217 	ldw	r18,8(sp)
 8007db4:	dc400117 	ldw	r17,4(sp)
 8007db8:	dc000017 	ldw	r16,0(sp)
 8007dbc:	dec00a04 	addi	sp,sp,40
 8007dc0:	f800283a 	ret
 8007dc4:	01408004 	movi	r5,512
 8007dc8:	01801004 	movi	r6,64
 8007dcc:	02000fc4 	movi	r8,63
 8007dd0:	003f8006 	br	8007bd4 <_malloc_r+0xe4>
 8007dd4:	14000317 	ldw	r16,12(r2)
 8007dd8:	31800084 	addi	r6,r6,2
 8007ddc:	143f5f1e 	bne	r2,r16,8007b5c <_malloc_r+0x6c>
 8007de0:	9c000417 	ldw	r16,16(r19)
 8007de4:	02020074 	movhi	r8,2049
 8007de8:	420a2a04 	addi	r8,r8,10408
 8007dec:	823f941e 	bne	r16,r8,8007c40 <_malloc_r+0x150>
 8007df0:	3007d0ba 	srai	r3,r6,2
 8007df4:	01000044 	movi	r4,1
 8007df8:	98800117 	ldw	r2,4(r19)
 8007dfc:	20c8983a 	sll	r4,r4,r3
 8007e00:	113fae2e 	bgeu	r2,r4,8007cbc <_malloc_r+0x1cc>
 8007e04:	9c000217 	ldw	r16,8(r19)
 8007e08:	00bfff04 	movi	r2,-4
 8007e0c:	85000117 	ldw	r20,4(r16)
 8007e10:	a0ac703a 	and	r22,r20,r2
 8007e14:	b4400336 	bltu	r22,r17,8007e24 <_malloc_r+0x334>
 8007e18:	b445c83a 	sub	r2,r22,r17
 8007e1c:	10c00408 	cmpgei	r3,r2,16
 8007e20:	1800561e 	bne	r3,zero,8007f7c <_malloc_r+0x48c>
 8007e24:	00820074 	movhi	r2,2049
 8007e28:	10900d17 	ldw	r2,16436(r2)
 8007e2c:	00c20074 	movhi	r3,2049
 8007e30:	1d172717 	ldw	r20,23708(r3)
 8007e34:	10bfffd8 	cmpnei	r2,r2,-1
 8007e38:	85ab883a 	add	r21,r16,r22
 8007e3c:	8d29883a 	add	r20,r17,r20
 8007e40:	1000c826 	beq	r2,zero,8008164 <_malloc_r+0x674>
 8007e44:	a50403c4 	addi	r20,r20,4111
 8007e48:	00bc0004 	movi	r2,-4096
 8007e4c:	a0a8703a 	and	r20,r20,r2
 8007e50:	a00b883a 	mov	r5,r20
 8007e54:	9009883a 	mov	r4,r18
 8007e58:	8009e740 	call	8009e74 <_sbrk_r>
 8007e5c:	102f883a 	mov	r23,r2
 8007e60:	10bfffd8 	cmpnei	r2,r2,-1
 8007e64:	10009a26 	beq	r2,zero,80080d0 <_malloc_r+0x5e0>
 8007e68:	bd409836 	bltu	r23,r21,80080cc <_malloc_r+0x5dc>
 8007e6c:	00820074 	movhi	r2,2049
 8007e70:	10973b17 	ldw	r2,23788(r2)
 8007e74:	00c20074 	movhi	r3,2049
 8007e78:	a085883a 	add	r2,r20,r2
 8007e7c:	18973b15 	stw	r2,23788(r3)
 8007e80:	1007883a 	mov	r3,r2
 8007e84:	adc0dd26 	beq	r21,r23,80081fc <_malloc_r+0x70c>
 8007e88:	00820074 	movhi	r2,2049
 8007e8c:	10900d17 	ldw	r2,16436(r2)
 8007e90:	10bfffd8 	cmpnei	r2,r2,-1
 8007e94:	1000e026 	beq	r2,zero,8008218 <_malloc_r+0x728>
 8007e98:	bd6bc83a 	sub	r21,r23,r21
 8007e9c:	a8c7883a 	add	r3,r21,r3
 8007ea0:	00820074 	movhi	r2,2049
 8007ea4:	10d73b15 	stw	r3,23788(r2)
 8007ea8:	bf0001cc 	andi	fp,r23,7
 8007eac:	e000b626 	beq	fp,zero,8008188 <_malloc_r+0x698>
 8007eb0:	bf2fc83a 	sub	r23,r23,fp
 8007eb4:	bdc00204 	addi	r23,r23,8
 8007eb8:	00840204 	movi	r2,4104
 8007ebc:	1705c83a 	sub	r2,r2,fp
 8007ec0:	bd29883a 	add	r20,r23,r20
 8007ec4:	1505c83a 	sub	r2,r2,r20
 8007ec8:	1543ffcc 	andi	r21,r2,4095
 8007ecc:	a80b883a 	mov	r5,r21
 8007ed0:	9009883a 	mov	r4,r18
 8007ed4:	8009e740 	call	8009e74 <_sbrk_r>
 8007ed8:	10ffffe0 	cmpeqi	r3,r2,-1
 8007edc:	1800e41e 	bne	r3,zero,8008270 <_malloc_r+0x780>
 8007ee0:	15c5c83a 	sub	r2,r2,r23
 8007ee4:	1569883a 	add	r20,r2,r21
 8007ee8:	00820074 	movhi	r2,2049
 8007eec:	10973b17 	ldw	r2,23788(r2)
 8007ef0:	9dc00215 	stw	r23,8(r19)
 8007ef4:	a5000054 	ori	r20,r20,1
 8007ef8:	a885883a 	add	r2,r21,r2
 8007efc:	00c20074 	movhi	r3,2049
 8007f00:	18973b15 	stw	r2,23788(r3)
 8007f04:	bd000115 	stw	r20,4(r23)
 8007f08:	84c0c626 	beq	r16,r19,8008224 <_malloc_r+0x734>
 8007f0c:	b0c00428 	cmpgeui	r3,r22,16
 8007f10:	1800c626 	beq	r3,zero,800822c <_malloc_r+0x73c>
 8007f14:	81000117 	ldw	r4,4(r16)
 8007f18:	017ffe04 	movi	r5,-8
 8007f1c:	b0fffd04 	addi	r3,r22,-12
 8007f20:	1946703a 	and	r3,r3,r5
 8007f24:	2100004c 	andi	r4,r4,1
 8007f28:	20c8b03a 	or	r4,r4,r3
 8007f2c:	81000115 	stw	r4,4(r16)
 8007f30:	01400144 	movi	r5,5
 8007f34:	80c9883a 	add	r4,r16,r3
 8007f38:	21400115 	stw	r5,4(r4)
 8007f3c:	21400215 	stw	r5,8(r4)
 8007f40:	18c00428 	cmpgeui	r3,r3,16
 8007f44:	1800cf1e 	bne	r3,zero,8008284 <_malloc_r+0x794>
 8007f48:	bd000117 	ldw	r20,4(r23)
 8007f4c:	b821883a 	mov	r16,r23
 8007f50:	00c20074 	movhi	r3,2049
 8007f54:	18d72617 	ldw	r3,23704(r3)
 8007f58:	1880022e 	bgeu	r3,r2,8007f64 <_malloc_r+0x474>
 8007f5c:	00c20074 	movhi	r3,2049
 8007f60:	18972615 	stw	r2,23704(r3)
 8007f64:	00c20074 	movhi	r3,2049
 8007f68:	18d72517 	ldw	r3,23700(r3)
 8007f6c:	18805a2e 	bgeu	r3,r2,80080d8 <_malloc_r+0x5e8>
 8007f70:	00c20074 	movhi	r3,2049
 8007f74:	18972515 	stw	r2,23700(r3)
 8007f78:	00005706 	br	80080d8 <_malloc_r+0x5e8>
 8007f7c:	88c00054 	ori	r3,r17,1
 8007f80:	80c00115 	stw	r3,4(r16)
 8007f84:	8463883a 	add	r17,r16,r17
 8007f88:	10800054 	ori	r2,r2,1
 8007f8c:	9c400215 	stw	r17,8(r19)
 8007f90:	88800115 	stw	r2,4(r17)
 8007f94:	9009883a 	mov	r4,r18
 8007f98:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8007f9c:	80800204 	addi	r2,r16,8
 8007fa0:	003f7c06 	br	8007d94 <_malloc_r+0x2a4>
 8007fa4:	400d883a 	mov	r6,r8
 8007fa8:	003f2106 	br	8007c30 <_malloc_r+0x140>
 8007fac:	81000317 	ldw	r4,12(r16)
 8007fb0:	003eee06 	br	8007b6c <_malloc_r+0x7c>
 8007fb4:	1006d27a 	srli	r3,r2,9
 8007fb8:	19000168 	cmpgeui	r4,r3,5
 8007fbc:	20003e26 	beq	r4,zero,80080b8 <_malloc_r+0x5c8>
 8007fc0:	19000568 	cmpgeui	r4,r3,21
 8007fc4:	20007a1e 	bne	r4,zero,80081b0 <_malloc_r+0x6c0>
 8007fc8:	19401704 	addi	r5,r3,92
 8007fcc:	280a90fa 	slli	r5,r5,3
 8007fd0:	190016c4 	addi	r4,r3,91
 8007fd4:	994b883a 	add	r5,r19,r5
 8007fd8:	28c00017 	ldw	r3,0(r5)
 8007fdc:	297ffe04 	addi	r5,r5,-8
 8007fe0:	28c06226 	beq	r5,r3,800816c <_malloc_r+0x67c>
 8007fe4:	01ffff04 	movi	r7,-4
 8007fe8:	19000117 	ldw	r4,4(r3)
 8007fec:	21c8703a 	and	r4,r4,r7
 8007ff0:	1100022e 	bgeu	r2,r4,8007ffc <_malloc_r+0x50c>
 8007ff4:	18c00217 	ldw	r3,8(r3)
 8007ff8:	28fffb1e 	bne	r5,r3,8007fe8 <_malloc_r+0x4f8>
 8007ffc:	19400317 	ldw	r5,12(r3)
 8008000:	98800117 	ldw	r2,4(r19)
 8008004:	81400315 	stw	r5,12(r16)
 8008008:	80c00215 	stw	r3,8(r16)
 800800c:	2c000215 	stw	r16,8(r5)
 8008010:	1c000315 	stw	r16,12(r3)
 8008014:	003f2506 	br	8007cac <_malloc_r+0x1bc>
 8008018:	10c00568 	cmpgeui	r3,r2,21
 800801c:	18003826 	beq	r3,zero,8008100 <_malloc_r+0x610>
 8008020:	10c01568 	cmpgeui	r3,r2,85
 8008024:	1800691e 	bne	r3,zero,80081cc <_malloc_r+0x6dc>
 8008028:	8804d33a 	srli	r2,r17,12
 800802c:	11801bc4 	addi	r6,r2,111
 8008030:	12001b84 	addi	r8,r2,110
 8008034:	300a90fa 	slli	r5,r6,3
 8008038:	003ee606 	br	8007bd4 <_malloc_r+0xe4>
 800803c:	5ac00044 	addi	r11,r11,1
 8008040:	588000cc 	andi	r2,r11,3
 8008044:	39c00204 	addi	r7,r7,8
 8008048:	103f2d1e 	bne	r2,zero,8007d00 <_malloc_r+0x210>
 800804c:	00003306 	br	800811c <_malloc_r+0x62c>
 8008050:	8085883a 	add	r2,r16,r2
 8008054:	10c00117 	ldw	r3,4(r2)
 8008058:	81000317 	ldw	r4,12(r16)
 800805c:	81400217 	ldw	r5,8(r16)
 8008060:	18c00054 	ori	r3,r3,1
 8008064:	10c00115 	stw	r3,4(r2)
 8008068:	29000315 	stw	r4,12(r5)
 800806c:	21400215 	stw	r5,8(r4)
 8008070:	9009883a 	mov	r4,r18
 8008074:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8008078:	80800204 	addi	r2,r16,8
 800807c:	003f4506 	br	8007d94 <_malloc_r+0x2a4>
 8008080:	880cd0fa 	srli	r6,r17,3
 8008084:	88800204 	addi	r2,r17,8
 8008088:	003eae06 	br	8007b44 <_malloc_r+0x54>
 800808c:	8085883a 	add	r2,r16,r2
 8008090:	10c00117 	ldw	r3,4(r2)
 8008094:	9009883a 	mov	r4,r18
 8008098:	18c00054 	ori	r3,r3,1
 800809c:	10c00115 	stw	r3,4(r2)
 80080a0:	800fa5c0 	call	800fa5c <__malloc_unlock>
 80080a4:	80800204 	addi	r2,r16,8
 80080a8:	003f3a06 	br	8007d94 <_malloc_r+0x2a4>
 80080ac:	89000054 	ori	r4,r17,1
 80080b0:	81000115 	stw	r4,4(r16)
 80080b4:	003f2706 	br	8007d54 <_malloc_r+0x264>
 80080b8:	1006d1ba 	srli	r3,r2,6
 80080bc:	19400e44 	addi	r5,r3,57
 80080c0:	19000e04 	addi	r4,r3,56
 80080c4:	280a90fa 	slli	r5,r5,3
 80080c8:	003fc206 	br	8007fd4 <_malloc_r+0x4e4>
 80080cc:	84c04626 	beq	r16,r19,80081e8 <_malloc_r+0x6f8>
 80080d0:	9c000217 	ldw	r16,8(r19)
 80080d4:	85000117 	ldw	r20,4(r16)
 80080d8:	00bfff04 	movi	r2,-4
 80080dc:	a0a8703a 	and	r20,r20,r2
 80080e0:	a445c83a 	sub	r2,r20,r17
 80080e4:	a4400236 	bltu	r20,r17,80080f0 <_malloc_r+0x600>
 80080e8:	10c00408 	cmpgei	r3,r2,16
 80080ec:	183fa31e 	bne	r3,zero,8007f7c <_malloc_r+0x48c>
 80080f0:	9009883a 	mov	r4,r18
 80080f4:	800fa5c0 	call	800fa5c <__malloc_unlock>
 80080f8:	0005883a 	mov	r2,zero
 80080fc:	003f2506 	br	8007d94 <_malloc_r+0x2a4>
 8008100:	11801704 	addi	r6,r2,92
 8008104:	120016c4 	addi	r8,r2,91
 8008108:	300a90fa 	slli	r5,r6,3
 800810c:	003eb106 	br	8007bd4 <_malloc_r+0xe4>
 8008110:	50800217 	ldw	r2,8(r10)
 8008114:	31bfffc4 	addi	r6,r6,-1
 8008118:	1280701e 	bne	r2,r10,80082dc <_malloc_r+0x7ec>
 800811c:	308000cc 	andi	r2,r6,3
 8008120:	52bffe04 	addi	r10,r10,-8
 8008124:	103ffa1e 	bne	r2,zero,8008110 <_malloc_r+0x620>
 8008128:	98c00117 	ldw	r3,4(r19)
 800812c:	0104303a 	nor	r2,zero,r4
 8008130:	10c4703a 	and	r2,r2,r3
 8008134:	98800115 	stw	r2,4(r19)
 8008138:	2109883a 	add	r4,r4,r4
 800813c:	113f3136 	bltu	r2,r4,8007e04 <_malloc_r+0x314>
 8008140:	203f3026 	beq	r4,zero,8007e04 <_malloc_r+0x314>
 8008144:	2086703a 	and	r3,r4,r2
 8008148:	1800041e 	bne	r3,zero,800815c <_malloc_r+0x66c>
 800814c:	2109883a 	add	r4,r4,r4
 8008150:	2086703a 	and	r3,r4,r2
 8008154:	5ac00104 	addi	r11,r11,4
 8008158:	183ffc26 	beq	r3,zero,800814c <_malloc_r+0x65c>
 800815c:	580d883a 	mov	r6,r11
 8008160:	003ee306 	br	8007cf0 <_malloc_r+0x200>
 8008164:	a5000404 	addi	r20,r20,16
 8008168:	003f3906 	br	8007e50 <_malloc_r+0x360>
 800816c:	2009d0ba 	srai	r4,r4,2
 8008170:	00800044 	movi	r2,1
 8008174:	99c00117 	ldw	r7,4(r19)
 8008178:	1104983a 	sll	r2,r2,r4
 800817c:	11c4b03a 	or	r2,r2,r7
 8008180:	98800115 	stw	r2,4(r19)
 8008184:	003f9f06 	br	8008004 <_malloc_r+0x514>
 8008188:	bd05883a 	add	r2,r23,r20
 800818c:	0085c83a 	sub	r2,zero,r2
 8008190:	1543ffcc 	andi	r21,r2,4095
 8008194:	a80b883a 	mov	r5,r21
 8008198:	9009883a 	mov	r4,r18
 800819c:	8009e740 	call	8009e74 <_sbrk_r>
 80081a0:	10ffffe0 	cmpeqi	r3,r2,-1
 80081a4:	183f4e26 	beq	r3,zero,8007ee0 <_malloc_r+0x3f0>
 80081a8:	002b883a 	mov	r21,zero
 80081ac:	003f4e06 	br	8007ee8 <_malloc_r+0x3f8>
 80081b0:	19001568 	cmpgeui	r4,r3,85
 80081b4:	2000201e 	bne	r4,zero,8008238 <_malloc_r+0x748>
 80081b8:	1006d33a 	srli	r3,r2,12
 80081bc:	19401bc4 	addi	r5,r3,111
 80081c0:	19001b84 	addi	r4,r3,110
 80081c4:	280a90fa 	slli	r5,r5,3
 80081c8:	003f8206 	br	8007fd4 <_malloc_r+0x4e4>
 80081cc:	10c05568 	cmpgeui	r3,r2,341
 80081d0:	1800201e 	bne	r3,zero,8008254 <_malloc_r+0x764>
 80081d4:	8804d3fa 	srli	r2,r17,15
 80081d8:	11801e04 	addi	r6,r2,120
 80081dc:	12001dc4 	addi	r8,r2,119
 80081e0:	300a90fa 	slli	r5,r6,3
 80081e4:	003e7b06 	br	8007bd4 <_malloc_r+0xe4>
 80081e8:	00820074 	movhi	r2,2049
 80081ec:	10d73b17 	ldw	r3,23788(r2)
 80081f0:	a0c7883a 	add	r3,r20,r3
 80081f4:	10d73b15 	stw	r3,23788(r2)
 80081f8:	003f2306 	br	8007e88 <_malloc_r+0x398>
 80081fc:	a903ffcc 	andi	r4,r21,4095
 8008200:	203f211e 	bne	r4,zero,8007e88 <_malloc_r+0x398>
 8008204:	9c000217 	ldw	r16,8(r19)
 8008208:	b529883a 	add	r20,r22,r20
 800820c:	a5000054 	ori	r20,r20,1
 8008210:	85000115 	stw	r20,4(r16)
 8008214:	003f4e06 	br	8007f50 <_malloc_r+0x460>
 8008218:	00820074 	movhi	r2,2049
 800821c:	15d00d15 	stw	r23,16436(r2)
 8008220:	003f2106 	br	8007ea8 <_malloc_r+0x3b8>
 8008224:	b821883a 	mov	r16,r23
 8008228:	003f4906 	br	8007f50 <_malloc_r+0x460>
 800822c:	00800044 	movi	r2,1
 8008230:	b8800115 	stw	r2,4(r23)
 8008234:	003fae06 	br	80080f0 <_malloc_r+0x600>
 8008238:	19005568 	cmpgeui	r4,r3,341
 800823c:	2000191e 	bne	r4,zero,80082a4 <_malloc_r+0x7b4>
 8008240:	1006d3fa 	srli	r3,r2,15
 8008244:	19401e04 	addi	r5,r3,120
 8008248:	19001dc4 	addi	r4,r3,119
 800824c:	280a90fa 	slli	r5,r5,3
 8008250:	003f6006 	br	8007fd4 <_malloc_r+0x4e4>
 8008254:	10815568 	cmpgeui	r2,r2,1365
 8008258:	1000191e 	bne	r2,zero,80082c0 <_malloc_r+0x7d0>
 800825c:	8804d4ba 	srli	r2,r17,18
 8008260:	11801f44 	addi	r6,r2,125
 8008264:	12001f04 	addi	r8,r2,124
 8008268:	300a90fa 	slli	r5,r6,3
 800826c:	003e5906 	br	8007bd4 <_malloc_r+0xe4>
 8008270:	e73ffe04 	addi	fp,fp,-8
 8008274:	a729883a 	add	r20,r20,fp
 8008278:	a5e9c83a 	sub	r20,r20,r23
 800827c:	002b883a 	mov	r21,zero
 8008280:	003f1906 	br	8007ee8 <_malloc_r+0x3f8>
 8008284:	81400204 	addi	r5,r16,8
 8008288:	9009883a 	mov	r4,r18
 800828c:	8006fd40 	call	8006fd4 <_free_r>
 8008290:	9c000217 	ldw	r16,8(r19)
 8008294:	00820074 	movhi	r2,2049
 8008298:	10973b17 	ldw	r2,23788(r2)
 800829c:	85000117 	ldw	r20,4(r16)
 80082a0:	003f2b06 	br	8007f50 <_malloc_r+0x460>
 80082a4:	18c15568 	cmpgeui	r3,r3,1365
 80082a8:	1800091e 	bne	r3,zero,80082d0 <_malloc_r+0x7e0>
 80082ac:	1006d4ba 	srli	r3,r2,18
 80082b0:	19401f44 	addi	r5,r3,125
 80082b4:	19001f04 	addi	r4,r3,124
 80082b8:	280a90fa 	slli	r5,r5,3
 80082bc:	003f4506 	br	8007fd4 <_malloc_r+0x4e4>
 80082c0:	0140fe04 	movi	r5,1016
 80082c4:	01801fc4 	movi	r6,127
 80082c8:	02001f84 	movi	r8,126
 80082cc:	003e4106 	br	8007bd4 <_malloc_r+0xe4>
 80082d0:	0140fe04 	movi	r5,1016
 80082d4:	01001f84 	movi	r4,126
 80082d8:	003f3e06 	br	8007fd4 <_malloc_r+0x4e4>
 80082dc:	98800117 	ldw	r2,4(r19)
 80082e0:	003f9506 	br	8008138 <_malloc_r+0x648>

080082e4 <memchr>:
 80082e4:	208000cc 	andi	r2,r4,3
 80082e8:	280f883a 	mov	r7,r5
 80082ec:	10003526 	beq	r2,zero,80083c4 <memchr+0xe0>
 80082f0:	30bfffc4 	addi	r2,r6,-1
 80082f4:	30001926 	beq	r6,zero,800835c <memchr+0x78>
 80082f8:	20c00003 	ldbu	r3,0(r4)
 80082fc:	29803fcc 	andi	r6,r5,255
 8008300:	30c0061e 	bne	r6,r3,800831c <memchr+0x38>
 8008304:	00001706 	br	8008364 <memchr+0x80>
 8008308:	10bfffc4 	addi	r2,r2,-1
 800830c:	10ffffe0 	cmpeqi	r3,r2,-1
 8008310:	1800121e 	bne	r3,zero,800835c <memchr+0x78>
 8008314:	20c00003 	ldbu	r3,0(r4)
 8008318:	19801226 	beq	r3,r6,8008364 <memchr+0x80>
 800831c:	21000044 	addi	r4,r4,1
 8008320:	20c000cc 	andi	r3,r4,3
 8008324:	183ff81e 	bne	r3,zero,8008308 <memchr+0x24>
 8008328:	10c00128 	cmpgeui	r3,r2,4
 800832c:	18000f1e 	bne	r3,zero,800836c <memchr+0x88>
 8008330:	10000a26 	beq	r2,zero,800835c <memchr+0x78>
 8008334:	20c00003 	ldbu	r3,0(r4)
 8008338:	29403fcc 	andi	r5,r5,255
 800833c:	19400926 	beq	r3,r5,8008364 <memchr+0x80>
 8008340:	2085883a 	add	r2,r4,r2
 8008344:	39403fcc 	andi	r5,r7,255
 8008348:	00000206 	br	8008354 <memchr+0x70>
 800834c:	20c00003 	ldbu	r3,0(r4)
 8008350:	19400426 	beq	r3,r5,8008364 <memchr+0x80>
 8008354:	21000044 	addi	r4,r4,1
 8008358:	113ffc1e 	bne	r2,r4,800834c <memchr+0x68>
 800835c:	0005883a 	mov	r2,zero
 8008360:	f800283a 	ret
 8008364:	2005883a 	mov	r2,r4
 8008368:	f800283a 	ret
 800836c:	280c923a 	slli	r6,r5,8
 8008370:	2a403fcc 	andi	r9,r5,255
 8008374:	02bfbff4 	movhi	r10,65279
 8008378:	31bfffcc 	andi	r6,r6,65535
 800837c:	3246b03a 	or	r3,r6,r9
 8008380:	1812943a 	slli	r9,r3,16
 8008384:	02202074 	movhi	r8,32897
 8008388:	52bfbfc4 	addi	r10,r10,-257
 800838c:	48d2b03a 	or	r9,r9,r3
 8008390:	42202004 	addi	r8,r8,-32640
 8008394:	20c00017 	ldw	r3,0(r4)
 8008398:	48c6f03a 	xor	r3,r9,r3
 800839c:	1a8d883a 	add	r6,r3,r10
 80083a0:	00c6303a 	nor	r3,zero,r3
 80083a4:	30c6703a 	and	r3,r6,r3
 80083a8:	1a06703a 	and	r3,r3,r8
 80083ac:	183fe11e 	bne	r3,zero,8008334 <memchr+0x50>
 80083b0:	10bfff04 	addi	r2,r2,-4
 80083b4:	10c00128 	cmpgeui	r3,r2,4
 80083b8:	21000104 	addi	r4,r4,4
 80083bc:	183ff51e 	bne	r3,zero,8008394 <memchr+0xb0>
 80083c0:	003fdb06 	br	8008330 <memchr+0x4c>
 80083c4:	3005883a 	mov	r2,r6
 80083c8:	003fd706 	br	8008328 <memchr+0x44>

080083cc <memcpy>:
 80083cc:	30c00430 	cmpltui	r3,r6,16
 80083d0:	2005883a 	mov	r2,r4
 80083d4:	18002d1e 	bne	r3,zero,800848c <memcpy+0xc0>
 80083d8:	2906b03a 	or	r3,r5,r4
 80083dc:	18c000cc 	andi	r3,r3,3
 80083e0:	1800351e 	bne	r3,zero,80084b8 <memcpy+0xec>
 80083e4:	32fffc04 	addi	r11,r6,-16
 80083e8:	5816d13a 	srli	r11,r11,4
 80083ec:	2007883a 	mov	r3,r4
 80083f0:	280f883a 	mov	r7,r5
 80083f4:	5ac00044 	addi	r11,r11,1
 80083f8:	5816913a 	slli	r11,r11,4
 80083fc:	22c9883a 	add	r4,r4,r11
 8008400:	3a000017 	ldw	r8,0(r7)
 8008404:	3a800117 	ldw	r10,4(r7)
 8008408:	3a400217 	ldw	r9,8(r7)
 800840c:	39c00404 	addi	r7,r7,16
 8008410:	1a000015 	stw	r8,0(r3)
 8008414:	3a3fff17 	ldw	r8,-4(r7)
 8008418:	1a800115 	stw	r10,4(r3)
 800841c:	1a400215 	stw	r9,8(r3)
 8008420:	18c00404 	addi	r3,r3,16
 8008424:	1a3fff15 	stw	r8,-4(r3)
 8008428:	20fff51e 	bne	r4,r3,8008400 <memcpy+0x34>
 800842c:	3100030c 	andi	r4,r6,12
 8008430:	2acb883a 	add	r5,r5,r11
 8008434:	320003cc 	andi	r8,r6,15
 8008438:	20002226 	beq	r4,zero,80084c4 <memcpy+0xf8>
 800843c:	2809883a 	mov	r4,r5
 8008440:	1813883a 	mov	r9,r3
 8008444:	21000104 	addi	r4,r4,4
 8008448:	22bfff17 	ldw	r10,-4(r4)
 800844c:	410fc83a 	sub	r7,r8,r4
 8008450:	4a400104 	addi	r9,r9,4
 8008454:	29cf883a 	add	r7,r5,r7
 8008458:	4abfff15 	stw	r10,-4(r9)
 800845c:	39c00128 	cmpgeui	r7,r7,4
 8008460:	383ff81e 	bne	r7,zero,8008444 <memcpy+0x78>
 8008464:	413fff04 	addi	r4,r8,-4
 8008468:	2008d0ba 	srli	r4,r4,2
 800846c:	318000cc 	andi	r6,r6,3
 8008470:	31ffffc4 	addi	r7,r6,-1
 8008474:	21000044 	addi	r4,r4,1
 8008478:	200890ba 	slli	r4,r4,2
 800847c:	1907883a 	add	r3,r3,r4
 8008480:	290b883a 	add	r5,r5,r4
 8008484:	3000041e 	bne	r6,zero,8008498 <memcpy+0xcc>
 8008488:	f800283a 	ret
 800848c:	2007883a 	mov	r3,r4
 8008490:	31ffffc4 	addi	r7,r6,-1
 8008494:	303ffc26 	beq	r6,zero,8008488 <memcpy+0xbc>
 8008498:	39c00044 	addi	r7,r7,1
 800849c:	19cf883a 	add	r7,r3,r7
 80084a0:	29400044 	addi	r5,r5,1
 80084a4:	29bfffc3 	ldbu	r6,-1(r5)
 80084a8:	18c00044 	addi	r3,r3,1
 80084ac:	19bfffc5 	stb	r6,-1(r3)
 80084b0:	19fffb1e 	bne	r3,r7,80084a0 <memcpy+0xd4>
 80084b4:	f800283a 	ret
 80084b8:	31ffffc4 	addi	r7,r6,-1
 80084bc:	2007883a 	mov	r3,r4
 80084c0:	003ff506 	br	8008498 <memcpy+0xcc>
 80084c4:	400d883a 	mov	r6,r8
 80084c8:	003ff106 	br	8008490 <memcpy+0xc4>

080084cc <memmove>:
 80084cc:	2005883a 	mov	r2,r4
 80084d0:	29000a2e 	bgeu	r5,r4,80084fc <memmove+0x30>
 80084d4:	2989883a 	add	r4,r5,r6
 80084d8:	1100082e 	bgeu	r2,r4,80084fc <memmove+0x30>
 80084dc:	1187883a 	add	r3,r2,r6
 80084e0:	30003e26 	beq	r6,zero,80085dc <memmove+0x110>
 80084e4:	213fffc4 	addi	r4,r4,-1
 80084e8:	21400003 	ldbu	r5,0(r4)
 80084ec:	18ffffc4 	addi	r3,r3,-1
 80084f0:	19400005 	stb	r5,0(r3)
 80084f4:	10fffb1e 	bne	r2,r3,80084e4 <memmove+0x18>
 80084f8:	f800283a 	ret
 80084fc:	30c00430 	cmpltui	r3,r6,16
 8008500:	18000b26 	beq	r3,zero,8008530 <memmove+0x64>
 8008504:	1007883a 	mov	r3,r2
 8008508:	31ffffc4 	addi	r7,r6,-1
 800850c:	30003726 	beq	r6,zero,80085ec <memmove+0x120>
 8008510:	39c00044 	addi	r7,r7,1
 8008514:	29cf883a 	add	r7,r5,r7
 8008518:	29400044 	addi	r5,r5,1
 800851c:	29bfffc3 	ldbu	r6,-1(r5)
 8008520:	18c00044 	addi	r3,r3,1
 8008524:	19bfffc5 	stb	r6,-1(r3)
 8008528:	29fffb1e 	bne	r5,r7,8008518 <memmove+0x4c>
 800852c:	f800283a 	ret
 8008530:	2886b03a 	or	r3,r5,r2
 8008534:	18c000cc 	andi	r3,r3,3
 8008538:	1800291e 	bne	r3,zero,80085e0 <memmove+0x114>
 800853c:	327ffc04 	addi	r9,r6,-16
 8008540:	4812d13a 	srli	r9,r9,4
 8008544:	280f883a 	mov	r7,r5
 8008548:	1007883a 	mov	r3,r2
 800854c:	4a400044 	addi	r9,r9,1
 8008550:	4812913a 	slli	r9,r9,4
 8008554:	1251883a 	add	r8,r2,r9
 8008558:	39000017 	ldw	r4,0(r7)
 800855c:	18c00404 	addi	r3,r3,16
 8008560:	39c00404 	addi	r7,r7,16
 8008564:	193ffc15 	stw	r4,-16(r3)
 8008568:	393ffd17 	ldw	r4,-12(r7)
 800856c:	193ffd15 	stw	r4,-12(r3)
 8008570:	393ffe17 	ldw	r4,-8(r7)
 8008574:	193ffe15 	stw	r4,-8(r3)
 8008578:	393fff17 	ldw	r4,-4(r7)
 800857c:	193fff15 	stw	r4,-4(r3)
 8008580:	40fff51e 	bne	r8,r3,8008558 <memmove+0x8c>
 8008584:	3100030c 	andi	r4,r6,12
 8008588:	2a4b883a 	add	r5,r5,r9
 800858c:	320003cc 	andi	r8,r6,15
 8008590:	20001726 	beq	r4,zero,80085f0 <memmove+0x124>
 8008594:	2813883a 	mov	r9,r5
 8008598:	180f883a 	mov	r7,r3
 800859c:	4a400104 	addi	r9,r9,4
 80085a0:	39c00104 	addi	r7,r7,4
 80085a4:	4abfff17 	ldw	r10,-4(r9)
 80085a8:	41c9c83a 	sub	r4,r8,r7
 80085ac:	1909883a 	add	r4,r3,r4
 80085b0:	3abfff15 	stw	r10,-4(r7)
 80085b4:	21000128 	cmpgeui	r4,r4,4
 80085b8:	203ff81e 	bne	r4,zero,800859c <memmove+0xd0>
 80085bc:	413fff04 	addi	r4,r8,-4
 80085c0:	2008d0ba 	srli	r4,r4,2
 80085c4:	318000cc 	andi	r6,r6,3
 80085c8:	21000044 	addi	r4,r4,1
 80085cc:	200890ba 	slli	r4,r4,2
 80085d0:	1907883a 	add	r3,r3,r4
 80085d4:	290b883a 	add	r5,r5,r4
 80085d8:	003fcb06 	br	8008508 <memmove+0x3c>
 80085dc:	f800283a 	ret
 80085e0:	31ffffc4 	addi	r7,r6,-1
 80085e4:	1007883a 	mov	r3,r2
 80085e8:	003fc906 	br	8008510 <memmove+0x44>
 80085ec:	f800283a 	ret
 80085f0:	400d883a 	mov	r6,r8
 80085f4:	003fc406 	br	8008508 <memmove+0x3c>

080085f8 <memset>:
 80085f8:	20c000cc 	andi	r3,r4,3
 80085fc:	2005883a 	mov	r2,r4
 8008600:	18003626 	beq	r3,zero,80086dc <memset+0xe4>
 8008604:	31ffffc4 	addi	r7,r6,-1
 8008608:	30003326 	beq	r6,zero,80086d8 <memset+0xe0>
 800860c:	2811883a 	mov	r8,r5
 8008610:	2007883a 	mov	r3,r4
 8008614:	00000306 	br	8008624 <memset+0x2c>
 8008618:	39ffffc4 	addi	r7,r7,-1
 800861c:	39bfffe0 	cmpeqi	r6,r7,-1
 8008620:	30002d1e 	bne	r6,zero,80086d8 <memset+0xe0>
 8008624:	18c00044 	addi	r3,r3,1
 8008628:	1a3fffc5 	stb	r8,-1(r3)
 800862c:	198000cc 	andi	r6,r3,3
 8008630:	303ff91e 	bne	r6,zero,8008618 <memset+0x20>
 8008634:	39000130 	cmpltui	r4,r7,4
 8008638:	2000221e 	bne	r4,zero,80086c4 <memset+0xcc>
 800863c:	29003fcc 	andi	r4,r5,255
 8008640:	200c923a 	slli	r6,r4,8
 8008644:	3a000430 	cmpltui	r8,r7,16
 8008648:	3108b03a 	or	r4,r6,r4
 800864c:	200c943a 	slli	r6,r4,16
 8008650:	310cb03a 	or	r6,r6,r4
 8008654:	40000e1e 	bne	r8,zero,8008690 <memset+0x98>
 8008658:	3a3ffc04 	addi	r8,r7,-16
 800865c:	4010d13a 	srli	r8,r8,4
 8008660:	42000044 	addi	r8,r8,1
 8008664:	4010913a 	slli	r8,r8,4
 8008668:	1a11883a 	add	r8,r3,r8
 800866c:	19800015 	stw	r6,0(r3)
 8008670:	19800115 	stw	r6,4(r3)
 8008674:	19800215 	stw	r6,8(r3)
 8008678:	18c00404 	addi	r3,r3,16
 800867c:	19bfff15 	stw	r6,-4(r3)
 8008680:	40fffa1e 	bne	r8,r3,800866c <memset+0x74>
 8008684:	3900030c 	andi	r4,r7,12
 8008688:	39c003cc 	andi	r7,r7,15
 800868c:	20000d26 	beq	r4,zero,80086c4 <memset+0xcc>
 8008690:	1809883a 	mov	r4,r3
 8008694:	21000104 	addi	r4,r4,4
 8008698:	3911c83a 	sub	r8,r7,r4
 800869c:	1a11883a 	add	r8,r3,r8
 80086a0:	21bfff15 	stw	r6,-4(r4)
 80086a4:	42000128 	cmpgeui	r8,r8,4
 80086a8:	403ffa1e 	bne	r8,zero,8008694 <memset+0x9c>
 80086ac:	393fff04 	addi	r4,r7,-4
 80086b0:	2008d0ba 	srli	r4,r4,2
 80086b4:	39c000cc 	andi	r7,r7,3
 80086b8:	21000044 	addi	r4,r4,1
 80086bc:	200890ba 	slli	r4,r4,2
 80086c0:	1907883a 	add	r3,r3,r4
 80086c4:	38000426 	beq	r7,zero,80086d8 <memset+0xe0>
 80086c8:	19cf883a 	add	r7,r3,r7
 80086cc:	18c00044 	addi	r3,r3,1
 80086d0:	197fffc5 	stb	r5,-1(r3)
 80086d4:	38fffd1e 	bne	r7,r3,80086cc <memset+0xd4>
 80086d8:	f800283a 	ret
 80086dc:	2007883a 	mov	r3,r4
 80086e0:	300f883a 	mov	r7,r6
 80086e4:	003fd306 	br	8008634 <memset+0x3c>

080086e8 <_Balloc>:
 80086e8:	20801317 	ldw	r2,76(r4)
 80086ec:	defffc04 	addi	sp,sp,-16
 80086f0:	dc400115 	stw	r17,4(sp)
 80086f4:	dc000015 	stw	r16,0(sp)
 80086f8:	dfc00315 	stw	ra,12(sp)
 80086fc:	dc800215 	stw	r18,8(sp)
 8008700:	2021883a 	mov	r16,r4
 8008704:	2823883a 	mov	r17,r5
 8008708:	10000e26 	beq	r2,zero,8008744 <_Balloc+0x5c>
 800870c:	880690ba 	slli	r3,r17,2
 8008710:	10c7883a 	add	r3,r2,r3
 8008714:	18800017 	ldw	r2,0(r3)
 8008718:	10001126 	beq	r2,zero,8008760 <_Balloc+0x78>
 800871c:	11000017 	ldw	r4,0(r2)
 8008720:	19000015 	stw	r4,0(r3)
 8008724:	10000415 	stw	zero,16(r2)
 8008728:	10000315 	stw	zero,12(r2)
 800872c:	dfc00317 	ldw	ra,12(sp)
 8008730:	dc800217 	ldw	r18,8(sp)
 8008734:	dc400117 	ldw	r17,4(sp)
 8008738:	dc000017 	ldw	r16,0(sp)
 800873c:	dec00404 	addi	sp,sp,16
 8008740:	f800283a 	ret
 8008744:	01800844 	movi	r6,33
 8008748:	01400104 	movi	r5,4
 800874c:	800b7440 	call	800b744 <_calloc_r>
 8008750:	80801315 	stw	r2,76(r16)
 8008754:	103fed1e 	bne	r2,zero,800870c <_Balloc+0x24>
 8008758:	0005883a 	mov	r2,zero
 800875c:	003ff306 	br	800872c <_Balloc+0x44>
 8008760:	04800044 	movi	r18,1
 8008764:	9464983a 	sll	r18,r18,r17
 8008768:	01400044 	movi	r5,1
 800876c:	8009883a 	mov	r4,r16
 8008770:	91800144 	addi	r6,r18,5
 8008774:	300c90ba 	slli	r6,r6,2
 8008778:	800b7440 	call	800b744 <_calloc_r>
 800877c:	103ff626 	beq	r2,zero,8008758 <_Balloc+0x70>
 8008780:	14400115 	stw	r17,4(r2)
 8008784:	14800215 	stw	r18,8(r2)
 8008788:	003fe606 	br	8008724 <_Balloc+0x3c>

0800878c <_Bfree>:
 800878c:	28000726 	beq	r5,zero,80087ac <_Bfree+0x20>
 8008790:	28c00117 	ldw	r3,4(r5)
 8008794:	20801317 	ldw	r2,76(r4)
 8008798:	180690ba 	slli	r3,r3,2
 800879c:	10c5883a 	add	r2,r2,r3
 80087a0:	10c00017 	ldw	r3,0(r2)
 80087a4:	28c00015 	stw	r3,0(r5)
 80087a8:	11400015 	stw	r5,0(r2)
 80087ac:	f800283a 	ret

080087b0 <__multadd>:
 80087b0:	defff704 	addi	sp,sp,-36
 80087b4:	dcc00315 	stw	r19,12(sp)
 80087b8:	2cc00417 	ldw	r19,16(r5)
 80087bc:	ddc00715 	stw	r23,28(sp)
 80087c0:	dd800615 	stw	r22,24(sp)
 80087c4:	dd400515 	stw	r21,20(sp)
 80087c8:	dd000415 	stw	r20,16(sp)
 80087cc:	dc800215 	stw	r18,8(sp)
 80087d0:	dc400115 	stw	r17,4(sp)
 80087d4:	dfc00815 	stw	ra,32(sp)
 80087d8:	dc000015 	stw	r16,0(sp)
 80087dc:	2829883a 	mov	r20,r5
 80087e0:	202b883a 	mov	r21,r4
 80087e4:	3025883a 	mov	r18,r6
 80087e8:	3823883a 	mov	r17,r7
 80087ec:	2d800504 	addi	r22,r5,20
 80087f0:	002f883a 	mov	r23,zero
 80087f4:	b4000017 	ldw	r16,0(r22)
 80087f8:	900b883a 	mov	r5,r18
 80087fc:	b5800104 	addi	r22,r22,4
 8008800:	813fffcc 	andi	r4,r16,65535
 8008804:	80029d40 	call	80029d4 <__mulsi3>
 8008808:	8008d43a 	srli	r4,r16,16
 800880c:	900b883a 	mov	r5,r18
 8008810:	1461883a 	add	r16,r2,r17
 8008814:	80029d40 	call	80029d4 <__mulsi3>
 8008818:	800ed43a 	srli	r7,r16,16
 800881c:	843fffcc 	andi	r16,r16,65535
 8008820:	bdc00044 	addi	r23,r23,1
 8008824:	11c5883a 	add	r2,r2,r7
 8008828:	1006943a 	slli	r3,r2,16
 800882c:	1022d43a 	srli	r17,r2,16
 8008830:	1c21883a 	add	r16,r3,r16
 8008834:	b43fff15 	stw	r16,-4(r22)
 8008838:	bcffee16 	blt	r23,r19,80087f4 <__multadd+0x44>
 800883c:	88000826 	beq	r17,zero,8008860 <__multadd+0xb0>
 8008840:	a0800217 	ldw	r2,8(r20)
 8008844:	9880120e 	bge	r19,r2,8008890 <__multadd+0xe0>
 8008848:	98800144 	addi	r2,r19,5
 800884c:	100490ba 	slli	r2,r2,2
 8008850:	9cc00044 	addi	r19,r19,1
 8008854:	a085883a 	add	r2,r20,r2
 8008858:	14400015 	stw	r17,0(r2)
 800885c:	a4c00415 	stw	r19,16(r20)
 8008860:	a005883a 	mov	r2,r20
 8008864:	dfc00817 	ldw	ra,32(sp)
 8008868:	ddc00717 	ldw	r23,28(sp)
 800886c:	dd800617 	ldw	r22,24(sp)
 8008870:	dd400517 	ldw	r21,20(sp)
 8008874:	dd000417 	ldw	r20,16(sp)
 8008878:	dcc00317 	ldw	r19,12(sp)
 800887c:	dc800217 	ldw	r18,8(sp)
 8008880:	dc400117 	ldw	r17,4(sp)
 8008884:	dc000017 	ldw	r16,0(sp)
 8008888:	dec00904 	addi	sp,sp,36
 800888c:	f800283a 	ret
 8008890:	a1400117 	ldw	r5,4(r20)
 8008894:	a809883a 	mov	r4,r21
 8008898:	29400044 	addi	r5,r5,1
 800889c:	80086e80 	call	80086e8 <_Balloc>
 80088a0:	a1800417 	ldw	r6,16(r20)
 80088a4:	a1400304 	addi	r5,r20,12
 80088a8:	11000304 	addi	r4,r2,12
 80088ac:	31800084 	addi	r6,r6,2
 80088b0:	300c90ba 	slli	r6,r6,2
 80088b4:	1021883a 	mov	r16,r2
 80088b8:	80083cc0 	call	80083cc <memcpy>
 80088bc:	a0000926 	beq	r20,zero,80088e4 <__multadd+0x134>
 80088c0:	a0c00117 	ldw	r3,4(r20)
 80088c4:	a8801317 	ldw	r2,76(r21)
 80088c8:	180690ba 	slli	r3,r3,2
 80088cc:	10c5883a 	add	r2,r2,r3
 80088d0:	10c00017 	ldw	r3,0(r2)
 80088d4:	a0c00015 	stw	r3,0(r20)
 80088d8:	15000015 	stw	r20,0(r2)
 80088dc:	8029883a 	mov	r20,r16
 80088e0:	003fd906 	br	8008848 <__multadd+0x98>
 80088e4:	8029883a 	mov	r20,r16
 80088e8:	003fd706 	br	8008848 <__multadd+0x98>

080088ec <__s2b>:
 80088ec:	defff904 	addi	sp,sp,-28
 80088f0:	dc800215 	stw	r18,8(sp)
 80088f4:	dc000015 	stw	r16,0(sp)
 80088f8:	2025883a 	mov	r18,r4
 80088fc:	2821883a 	mov	r16,r5
 8008900:	39000204 	addi	r4,r7,8
 8008904:	01400244 	movi	r5,9
 8008908:	dcc00315 	stw	r19,12(sp)
 800890c:	dc400115 	stw	r17,4(sp)
 8008910:	dfc00615 	stw	ra,24(sp)
 8008914:	3823883a 	mov	r17,r7
 8008918:	dd400515 	stw	r21,20(sp)
 800891c:	dd000415 	stw	r20,16(sp)
 8008920:	3027883a 	mov	r19,r6
 8008924:	800281c0 	call	800281c <__divsi3>
 8008928:	88c00290 	cmplti	r3,r17,10
 800892c:	1800311e 	bne	r3,zero,80089f4 <__s2b+0x108>
 8008930:	00c00044 	movi	r3,1
 8008934:	000b883a 	mov	r5,zero
 8008938:	18c7883a 	add	r3,r3,r3
 800893c:	29400044 	addi	r5,r5,1
 8008940:	18bffd16 	blt	r3,r2,8008938 <__s2b+0x4c>
 8008944:	9009883a 	mov	r4,r18
 8008948:	80086e80 	call	80086e8 <_Balloc>
 800894c:	d8c00717 	ldw	r3,28(sp)
 8008950:	10c00515 	stw	r3,20(r2)
 8008954:	00c00044 	movi	r3,1
 8008958:	10c00415 	stw	r3,16(r2)
 800895c:	98c00290 	cmplti	r3,r19,10
 8008960:	1800211e 	bne	r3,zero,80089e8 <__s2b+0xfc>
 8008964:	85400244 	addi	r21,r16,9
 8008968:	84e9883a 	add	r20,r16,r19
 800896c:	a821883a 	mov	r16,r21
 8008970:	84000044 	addi	r16,r16,1
 8008974:	81ffffc7 	ldb	r7,-1(r16)
 8008978:	01800284 	movi	r6,10
 800897c:	100b883a 	mov	r5,r2
 8008980:	39fff404 	addi	r7,r7,-48
 8008984:	9009883a 	mov	r4,r18
 8008988:	80087b00 	call	80087b0 <__multadd>
 800898c:	a43ff81e 	bne	r20,r16,8008970 <__s2b+0x84>
 8008990:	9c3ffe04 	addi	r16,r19,-8
 8008994:	ac21883a 	add	r16,r21,r16
 8008998:	9c400a0e 	bge	r19,r17,80089c4 <__s2b+0xd8>
 800899c:	8ce3c83a 	sub	r17,r17,r19
 80089a0:	8463883a 	add	r17,r16,r17
 80089a4:	84000044 	addi	r16,r16,1
 80089a8:	81ffffc7 	ldb	r7,-1(r16)
 80089ac:	01800284 	movi	r6,10
 80089b0:	100b883a 	mov	r5,r2
 80089b4:	39fff404 	addi	r7,r7,-48
 80089b8:	9009883a 	mov	r4,r18
 80089bc:	80087b00 	call	80087b0 <__multadd>
 80089c0:	8c3ff81e 	bne	r17,r16,80089a4 <__s2b+0xb8>
 80089c4:	dfc00617 	ldw	ra,24(sp)
 80089c8:	dd400517 	ldw	r21,20(sp)
 80089cc:	dd000417 	ldw	r20,16(sp)
 80089d0:	dcc00317 	ldw	r19,12(sp)
 80089d4:	dc800217 	ldw	r18,8(sp)
 80089d8:	dc400117 	ldw	r17,4(sp)
 80089dc:	dc000017 	ldw	r16,0(sp)
 80089e0:	dec00704 	addi	sp,sp,28
 80089e4:	f800283a 	ret
 80089e8:	84000284 	addi	r16,r16,10
 80089ec:	04c00244 	movi	r19,9
 80089f0:	003fe906 	br	8008998 <__s2b+0xac>
 80089f4:	000b883a 	mov	r5,zero
 80089f8:	003fd206 	br	8008944 <__s2b+0x58>

080089fc <__hi0bits>:
 80089fc:	20bfffec 	andhi	r2,r4,65535
 8008a00:	1000131e 	bne	r2,zero,8008a50 <__hi0bits+0x54>
 8008a04:	2008943a 	slli	r4,r4,16
 8008a08:	00800404 	movi	r2,16
 8008a0c:	20ffc02c 	andhi	r3,r4,65280
 8008a10:	1800021e 	bne	r3,zero,8008a1c <__hi0bits+0x20>
 8008a14:	2008923a 	slli	r4,r4,8
 8008a18:	10800204 	addi	r2,r2,8
 8008a1c:	20fc002c 	andhi	r3,r4,61440
 8008a20:	1800021e 	bne	r3,zero,8008a2c <__hi0bits+0x30>
 8008a24:	2008913a 	slli	r4,r4,4
 8008a28:	10800104 	addi	r2,r2,4
 8008a2c:	20f0002c 	andhi	r3,r4,49152
 8008a30:	1800021e 	bne	r3,zero,8008a3c <__hi0bits+0x40>
 8008a34:	200890ba 	slli	r4,r4,2
 8008a38:	10800084 	addi	r2,r2,2
 8008a3c:	20000316 	blt	r4,zero,8008a4c <__hi0bits+0x50>
 8008a40:	2110002c 	andhi	r4,r4,16384
 8008a44:	10800044 	addi	r2,r2,1
 8008a48:	20000326 	beq	r4,zero,8008a58 <__hi0bits+0x5c>
 8008a4c:	f800283a 	ret
 8008a50:	0005883a 	mov	r2,zero
 8008a54:	003fed06 	br	8008a0c <__hi0bits+0x10>
 8008a58:	00800804 	movi	r2,32
 8008a5c:	f800283a 	ret

08008a60 <__lo0bits>:
 8008a60:	20c00017 	ldw	r3,0(r4)
 8008a64:	188001cc 	andi	r2,r3,7
 8008a68:	10000826 	beq	r2,zero,8008a8c <__lo0bits+0x2c>
 8008a6c:	1880004c 	andi	r2,r3,1
 8008a70:	10001f1e 	bne	r2,zero,8008af0 <__lo0bits+0x90>
 8008a74:	1880008c 	andi	r2,r3,2
 8008a78:	10002126 	beq	r2,zero,8008b00 <__lo0bits+0xa0>
 8008a7c:	1806d07a 	srli	r3,r3,1
 8008a80:	00800044 	movi	r2,1
 8008a84:	20c00015 	stw	r3,0(r4)
 8008a88:	f800283a 	ret
 8008a8c:	18bfffcc 	andi	r2,r3,65535
 8008a90:	1000151e 	bne	r2,zero,8008ae8 <__lo0bits+0x88>
 8008a94:	1806d43a 	srli	r3,r3,16
 8008a98:	00800404 	movi	r2,16
 8008a9c:	19403fcc 	andi	r5,r3,255
 8008aa0:	2800021e 	bne	r5,zero,8008aac <__lo0bits+0x4c>
 8008aa4:	1806d23a 	srli	r3,r3,8
 8008aa8:	10800204 	addi	r2,r2,8
 8008aac:	194003cc 	andi	r5,r3,15
 8008ab0:	2800021e 	bne	r5,zero,8008abc <__lo0bits+0x5c>
 8008ab4:	1806d13a 	srli	r3,r3,4
 8008ab8:	10800104 	addi	r2,r2,4
 8008abc:	194000cc 	andi	r5,r3,3
 8008ac0:	2800021e 	bne	r5,zero,8008acc <__lo0bits+0x6c>
 8008ac4:	1806d0ba 	srli	r3,r3,2
 8008ac8:	10800084 	addi	r2,r2,2
 8008acc:	1940004c 	andi	r5,r3,1
 8008ad0:	2800031e 	bne	r5,zero,8008ae0 <__lo0bits+0x80>
 8008ad4:	1806d07a 	srli	r3,r3,1
 8008ad8:	10800044 	addi	r2,r2,1
 8008adc:	18000626 	beq	r3,zero,8008af8 <__lo0bits+0x98>
 8008ae0:	20c00015 	stw	r3,0(r4)
 8008ae4:	f800283a 	ret
 8008ae8:	0005883a 	mov	r2,zero
 8008aec:	003feb06 	br	8008a9c <__lo0bits+0x3c>
 8008af0:	0005883a 	mov	r2,zero
 8008af4:	f800283a 	ret
 8008af8:	00800804 	movi	r2,32
 8008afc:	f800283a 	ret
 8008b00:	1806d0ba 	srli	r3,r3,2
 8008b04:	00800084 	movi	r2,2
 8008b08:	20c00015 	stw	r3,0(r4)
 8008b0c:	f800283a 	ret

08008b10 <__i2b>:
 8008b10:	defffe04 	addi	sp,sp,-8
 8008b14:	dc000015 	stw	r16,0(sp)
 8008b18:	2821883a 	mov	r16,r5
 8008b1c:	01400044 	movi	r5,1
 8008b20:	dfc00115 	stw	ra,4(sp)
 8008b24:	80086e80 	call	80086e8 <_Balloc>
 8008b28:	01000044 	movi	r4,1
 8008b2c:	14000515 	stw	r16,20(r2)
 8008b30:	11000415 	stw	r4,16(r2)
 8008b34:	dfc00117 	ldw	ra,4(sp)
 8008b38:	dc000017 	ldw	r16,0(sp)
 8008b3c:	dec00204 	addi	sp,sp,8
 8008b40:	f800283a 	ret

08008b44 <__multiply>:
 8008b44:	defff104 	addi	sp,sp,-60
 8008b48:	dd800b15 	stw	r22,44(sp)
 8008b4c:	dc400615 	stw	r17,24(sp)
 8008b50:	2d800417 	ldw	r22,16(r5)
 8008b54:	34400417 	ldw	r17,16(r6)
 8008b58:	ddc00c15 	stw	r23,48(sp)
 8008b5c:	dc800715 	stw	r18,28(sp)
 8008b60:	dfc00e15 	stw	ra,56(sp)
 8008b64:	df000d15 	stw	fp,52(sp)
 8008b68:	dd400a15 	stw	r21,40(sp)
 8008b6c:	dd000915 	stw	r20,36(sp)
 8008b70:	dcc00815 	stw	r19,32(sp)
 8008b74:	dc000515 	stw	r16,20(sp)
 8008b78:	2825883a 	mov	r18,r5
 8008b7c:	302f883a 	mov	r23,r6
 8008b80:	b4400516 	blt	r22,r17,8008b98 <__multiply+0x54>
 8008b84:	8807883a 	mov	r3,r17
 8008b88:	282f883a 	mov	r23,r5
 8008b8c:	b023883a 	mov	r17,r22
 8008b90:	3025883a 	mov	r18,r6
 8008b94:	182d883a 	mov	r22,r3
 8008b98:	b8800217 	ldw	r2,8(r23)
 8008b9c:	8da9883a 	add	r20,r17,r22
 8008ba0:	b9400117 	ldw	r5,4(r23)
 8008ba4:	1500010e 	bge	r2,r20,8008bac <__multiply+0x68>
 8008ba8:	29400044 	addi	r5,r5,1
 8008bac:	a02690ba 	slli	r19,r20,2
 8008bb0:	80086e80 	call	80086e8 <_Balloc>
 8008bb4:	10c00504 	addi	r3,r2,20
 8008bb8:	1cc9883a 	add	r4,r3,r19
 8008bbc:	d8800415 	stw	r2,16(sp)
 8008bc0:	d8c00015 	stw	r3,0(sp)
 8008bc4:	d9000115 	stw	r4,4(sp)
 8008bc8:	1805883a 	mov	r2,r3
 8008bcc:	1900042e 	bgeu	r3,r4,8008be0 <__multiply+0x9c>
 8008bd0:	d8c00117 	ldw	r3,4(sp)
 8008bd4:	10000015 	stw	zero,0(r2)
 8008bd8:	10800104 	addi	r2,r2,4
 8008bdc:	10fffc36 	bltu	r2,r3,8008bd0 <__multiply+0x8c>
 8008be0:	b02c90ba 	slli	r22,r22,2
 8008be4:	882290ba 	slli	r17,r17,2
 8008be8:	94800504 	addi	r18,r18,20
 8008bec:	b8800504 	addi	r2,r23,20
 8008bf0:	9587883a 	add	r3,r18,r22
 8008bf4:	d8800315 	stw	r2,12(sp)
 8008bf8:	d8c00215 	stw	r3,8(sp)
 8008bfc:	1463883a 	add	r17,r2,r17
 8008c00:	90c00936 	bltu	r18,r3,8008c28 <__multiply+0xe4>
 8008c04:	00004606 	br	8008d20 <__multiply+0x1dc>
 8008c08:	8020d43a 	srli	r16,r16,16
 8008c0c:	8000271e 	bne	r16,zero,8008cac <__multiply+0x168>
 8008c10:	d8800017 	ldw	r2,0(sp)
 8008c14:	94800104 	addi	r18,r18,4
 8008c18:	10800104 	addi	r2,r2,4
 8008c1c:	d8800015 	stw	r2,0(sp)
 8008c20:	d8800217 	ldw	r2,8(sp)
 8008c24:	90803e2e 	bgeu	r18,r2,8008d20 <__multiply+0x1dc>
 8008c28:	94000017 	ldw	r16,0(r18)
 8008c2c:	873fffcc 	andi	fp,r16,65535
 8008c30:	e03ff526 	beq	fp,zero,8008c08 <__multiply+0xc4>
 8008c34:	dcc00017 	ldw	r19,0(sp)
 8008c38:	dd800317 	ldw	r22,12(sp)
 8008c3c:	002b883a 	mov	r21,zero
 8008c40:	b5c00017 	ldw	r23,0(r22)
 8008c44:	9c000017 	ldw	r16,0(r19)
 8008c48:	e00b883a 	mov	r5,fp
 8008c4c:	b93fffcc 	andi	r4,r23,65535
 8008c50:	80029d40 	call	80029d4 <__mulsi3>
 8008c54:	b808d43a 	srli	r4,r23,16
 8008c58:	80ffffcc 	andi	r3,r16,65535
 8008c5c:	10c5883a 	add	r2,r2,r3
 8008c60:	e00b883a 	mov	r5,fp
 8008c64:	156b883a 	add	r21,r2,r21
 8008c68:	8020d43a 	srli	r16,r16,16
 8008c6c:	80029d40 	call	80029d4 <__mulsi3>
 8008c70:	a808d43a 	srli	r4,r21,16
 8008c74:	1405883a 	add	r2,r2,r16
 8008c78:	a8ffffcc 	andi	r3,r21,65535
 8008c7c:	1105883a 	add	r2,r2,r4
 8008c80:	1008943a 	slli	r4,r2,16
 8008c84:	9cc00104 	addi	r19,r19,4
 8008c88:	b5800104 	addi	r22,r22,4
 8008c8c:	20c6b03a 	or	r3,r4,r3
 8008c90:	98ffff15 	stw	r3,-4(r19)
 8008c94:	102ad43a 	srli	r21,r2,16
 8008c98:	b47fe936 	bltu	r22,r17,8008c40 <__multiply+0xfc>
 8008c9c:	9d400015 	stw	r21,0(r19)
 8008ca0:	94000017 	ldw	r16,0(r18)
 8008ca4:	8020d43a 	srli	r16,r16,16
 8008ca8:	803fd926 	beq	r16,zero,8008c10 <__multiply+0xcc>
 8008cac:	ddc00017 	ldw	r23,0(sp)
 8008cb0:	dd400317 	ldw	r21,12(sp)
 8008cb4:	0027883a 	mov	r19,zero
 8008cb8:	bd800017 	ldw	r22,0(r23)
 8008cbc:	b039883a 	mov	fp,r22
 8008cc0:	a900000b 	ldhu	r4,0(r21)
 8008cc4:	e038d43a 	srli	fp,fp,16
 8008cc8:	800b883a 	mov	r5,r16
 8008ccc:	80029d40 	call	80029d4 <__mulsi3>
 8008cd0:	1739883a 	add	fp,r2,fp
 8008cd4:	e4e7883a 	add	r19,fp,r19
 8008cd8:	9804943a 	slli	r2,r19,16
 8008cdc:	b0ffffcc 	andi	r3,r22,65535
 8008ce0:	bdc00104 	addi	r23,r23,4
 8008ce4:	10c6b03a 	or	r3,r2,r3
 8008ce8:	b8ffff15 	stw	r3,-4(r23)
 8008cec:	ad400104 	addi	r21,r21,4
 8008cf0:	a93fff8b 	ldhu	r4,-2(r21)
 8008cf4:	bf000017 	ldw	fp,0(r23)
 8008cf8:	800b883a 	mov	r5,r16
 8008cfc:	80029d40 	call	80029d4 <__mulsi3>
 8008d00:	980cd43a 	srli	r6,r19,16
 8008d04:	e0ffffcc 	andi	r3,fp,65535
 8008d08:	10c7883a 	add	r3,r2,r3
 8008d0c:	19ad883a 	add	r22,r3,r6
 8008d10:	b026d43a 	srli	r19,r22,16
 8008d14:	ac7fea36 	bltu	r21,r17,8008cc0 <__multiply+0x17c>
 8008d18:	bd800015 	stw	r22,0(r23)
 8008d1c:	003fbc06 	br	8008c10 <__multiply+0xcc>
 8008d20:	05000a0e 	bge	zero,r20,8008d4c <__multiply+0x208>
 8008d24:	d8c00117 	ldw	r3,4(sp)
 8008d28:	18bfff17 	ldw	r2,-4(r3)
 8008d2c:	1cffff04 	addi	r19,r3,-4
 8008d30:	10000326 	beq	r2,zero,8008d40 <__multiply+0x1fc>
 8008d34:	00000506 	br	8008d4c <__multiply+0x208>
 8008d38:	98800017 	ldw	r2,0(r19)
 8008d3c:	1000031e 	bne	r2,zero,8008d4c <__multiply+0x208>
 8008d40:	a53fffc4 	addi	r20,r20,-1
 8008d44:	9cffff04 	addi	r19,r19,-4
 8008d48:	a03ffb1e 	bne	r20,zero,8008d38 <__multiply+0x1f4>
 8008d4c:	d8800417 	ldw	r2,16(sp)
 8008d50:	15000415 	stw	r20,16(r2)
 8008d54:	dfc00e17 	ldw	ra,56(sp)
 8008d58:	df000d17 	ldw	fp,52(sp)
 8008d5c:	ddc00c17 	ldw	r23,48(sp)
 8008d60:	dd800b17 	ldw	r22,44(sp)
 8008d64:	dd400a17 	ldw	r21,40(sp)
 8008d68:	dd000917 	ldw	r20,36(sp)
 8008d6c:	dcc00817 	ldw	r19,32(sp)
 8008d70:	dc800717 	ldw	r18,28(sp)
 8008d74:	dc400617 	ldw	r17,24(sp)
 8008d78:	dc000517 	ldw	r16,20(sp)
 8008d7c:	dec00f04 	addi	sp,sp,60
 8008d80:	f800283a 	ret

08008d84 <__pow5mult>:
 8008d84:	defffb04 	addi	sp,sp,-20
 8008d88:	dcc00315 	stw	r19,12(sp)
 8008d8c:	dc000015 	stw	r16,0(sp)
 8008d90:	dfc00415 	stw	ra,16(sp)
 8008d94:	dc800215 	stw	r18,8(sp)
 8008d98:	dc400115 	stw	r17,4(sp)
 8008d9c:	308000cc 	andi	r2,r6,3
 8008da0:	3021883a 	mov	r16,r6
 8008da4:	2027883a 	mov	r19,r4
 8008da8:	10002d1e 	bne	r2,zero,8008e60 <__pow5mult+0xdc>
 8008dac:	2825883a 	mov	r18,r5
 8008db0:	8021d0ba 	srai	r16,r16,2
 8008db4:	80001926 	beq	r16,zero,8008e1c <__pow5mult+0x98>
 8008db8:	9c401217 	ldw	r17,72(r19)
 8008dbc:	8800061e 	bne	r17,zero,8008dd8 <__pow5mult+0x54>
 8008dc0:	00002f06 	br	8008e80 <__pow5mult+0xfc>
 8008dc4:	8021d07a 	srai	r16,r16,1
 8008dc8:	80001426 	beq	r16,zero,8008e1c <__pow5mult+0x98>
 8008dcc:	88800017 	ldw	r2,0(r17)
 8008dd0:	10001a26 	beq	r2,zero,8008e3c <__pow5mult+0xb8>
 8008dd4:	1023883a 	mov	r17,r2
 8008dd8:	8080004c 	andi	r2,r16,1
 8008ddc:	103ff926 	beq	r2,zero,8008dc4 <__pow5mult+0x40>
 8008de0:	880d883a 	mov	r6,r17
 8008de4:	900b883a 	mov	r5,r18
 8008de8:	9809883a 	mov	r4,r19
 8008dec:	8008b440 	call	8008b44 <__multiply>
 8008df0:	90001926 	beq	r18,zero,8008e58 <__pow5mult+0xd4>
 8008df4:	91000117 	ldw	r4,4(r18)
 8008df8:	98c01317 	ldw	r3,76(r19)
 8008dfc:	8021d07a 	srai	r16,r16,1
 8008e00:	200890ba 	slli	r4,r4,2
 8008e04:	1907883a 	add	r3,r3,r4
 8008e08:	19000017 	ldw	r4,0(r3)
 8008e0c:	91000015 	stw	r4,0(r18)
 8008e10:	1c800015 	stw	r18,0(r3)
 8008e14:	1025883a 	mov	r18,r2
 8008e18:	803fec1e 	bne	r16,zero,8008dcc <__pow5mult+0x48>
 8008e1c:	9005883a 	mov	r2,r18
 8008e20:	dfc00417 	ldw	ra,16(sp)
 8008e24:	dcc00317 	ldw	r19,12(sp)
 8008e28:	dc800217 	ldw	r18,8(sp)
 8008e2c:	dc400117 	ldw	r17,4(sp)
 8008e30:	dc000017 	ldw	r16,0(sp)
 8008e34:	dec00504 	addi	sp,sp,20
 8008e38:	f800283a 	ret
 8008e3c:	880d883a 	mov	r6,r17
 8008e40:	880b883a 	mov	r5,r17
 8008e44:	9809883a 	mov	r4,r19
 8008e48:	8008b440 	call	8008b44 <__multiply>
 8008e4c:	88800015 	stw	r2,0(r17)
 8008e50:	10000015 	stw	zero,0(r2)
 8008e54:	003fdf06 	br	8008dd4 <__pow5mult+0x50>
 8008e58:	1025883a 	mov	r18,r2
 8008e5c:	003fd906 	br	8008dc4 <__pow5mult+0x40>
 8008e60:	100490ba 	slli	r2,r2,2
 8008e64:	00c20074 	movhi	r3,2049
 8008e68:	000f883a 	mov	r7,zero
 8008e6c:	10c7883a 	add	r3,r2,r3
 8008e70:	1987cf17 	ldw	r6,7996(r3)
 8008e74:	80087b00 	call	80087b0 <__multadd>
 8008e78:	1025883a 	mov	r18,r2
 8008e7c:	003fcc06 	br	8008db0 <__pow5mult+0x2c>
 8008e80:	01400044 	movi	r5,1
 8008e84:	9809883a 	mov	r4,r19
 8008e88:	80086e80 	call	80086e8 <_Balloc>
 8008e8c:	1023883a 	mov	r17,r2
 8008e90:	00809c44 	movi	r2,625
 8008e94:	88800515 	stw	r2,20(r17)
 8008e98:	00800044 	movi	r2,1
 8008e9c:	88800415 	stw	r2,16(r17)
 8008ea0:	9c401215 	stw	r17,72(r19)
 8008ea4:	88000015 	stw	zero,0(r17)
 8008ea8:	003fcb06 	br	8008dd8 <__pow5mult+0x54>

08008eac <__lshift>:
 8008eac:	defff904 	addi	sp,sp,-28
 8008eb0:	dcc00315 	stw	r19,12(sp)
 8008eb4:	dc400115 	stw	r17,4(sp)
 8008eb8:	2cc00417 	ldw	r19,16(r5)
 8008ebc:	3023d17a 	srai	r17,r6,5
 8008ec0:	28800217 	ldw	r2,8(r5)
 8008ec4:	dd400515 	stw	r21,20(sp)
 8008ec8:	8ce7883a 	add	r19,r17,r19
 8008ecc:	dd000415 	stw	r20,16(sp)
 8008ed0:	dc800215 	stw	r18,8(sp)
 8008ed4:	dc000015 	stw	r16,0(sp)
 8008ed8:	dfc00615 	stw	ra,24(sp)
 8008edc:	9c000044 	addi	r16,r19,1
 8008ee0:	2825883a 	mov	r18,r5
 8008ee4:	302b883a 	mov	r21,r6
 8008ee8:	2029883a 	mov	r20,r4
 8008eec:	29400117 	ldw	r5,4(r5)
 8008ef0:	1400030e 	bge	r2,r16,8008f00 <__lshift+0x54>
 8008ef4:	1085883a 	add	r2,r2,r2
 8008ef8:	29400044 	addi	r5,r5,1
 8008efc:	143ffd16 	blt	r2,r16,8008ef4 <__lshift+0x48>
 8008f00:	a009883a 	mov	r4,r20
 8008f04:	80086e80 	call	80086e8 <_Balloc>
 8008f08:	11000504 	addi	r4,r2,20
 8008f0c:	0440090e 	bge	zero,r17,8008f34 <__lshift+0x88>
 8008f10:	8c400144 	addi	r17,r17,5
 8008f14:	882290ba 	slli	r17,r17,2
 8008f18:	2007883a 	mov	r3,r4
 8008f1c:	144b883a 	add	r5,r2,r17
 8008f20:	18c00104 	addi	r3,r3,4
 8008f24:	183fff15 	stw	zero,-4(r3)
 8008f28:	28fffd1e 	bne	r5,r3,8008f20 <__lshift+0x74>
 8008f2c:	8c7ffb04 	addi	r17,r17,-20
 8008f30:	2449883a 	add	r4,r4,r17
 8008f34:	92000417 	ldw	r8,16(r18)
 8008f38:	90c00504 	addi	r3,r18,20
 8008f3c:	a98007cc 	andi	r6,r21,31
 8008f40:	401090ba 	slli	r8,r8,2
 8008f44:	1a11883a 	add	r8,r3,r8
 8008f48:	30002126 	beq	r6,zero,8008fd0 <__lshift+0x124>
 8008f4c:	02400804 	movi	r9,32
 8008f50:	4993c83a 	sub	r9,r9,r6
 8008f54:	000f883a 	mov	r7,zero
 8008f58:	19400017 	ldw	r5,0(r3)
 8008f5c:	21000104 	addi	r4,r4,4
 8008f60:	18c00104 	addi	r3,r3,4
 8008f64:	298a983a 	sll	r5,r5,r6
 8008f68:	29cab03a 	or	r5,r5,r7
 8008f6c:	217fff15 	stw	r5,-4(r4)
 8008f70:	197fff17 	ldw	r5,-4(r3)
 8008f74:	2a4ed83a 	srl	r7,r5,r9
 8008f78:	1a3ff736 	bltu	r3,r8,8008f58 <__lshift+0xac>
 8008f7c:	21c00015 	stw	r7,0(r4)
 8008f80:	38000126 	beq	r7,zero,8008f88 <__lshift+0xdc>
 8008f84:	8027883a 	mov	r19,r16
 8008f88:	14c00415 	stw	r19,16(r2)
 8008f8c:	90000726 	beq	r18,zero,8008fac <__lshift+0x100>
 8008f90:	91000117 	ldw	r4,4(r18)
 8008f94:	a0c01317 	ldw	r3,76(r20)
 8008f98:	200890ba 	slli	r4,r4,2
 8008f9c:	1907883a 	add	r3,r3,r4
 8008fa0:	19000017 	ldw	r4,0(r3)
 8008fa4:	91000015 	stw	r4,0(r18)
 8008fa8:	1c800015 	stw	r18,0(r3)
 8008fac:	dfc00617 	ldw	ra,24(sp)
 8008fb0:	dd400517 	ldw	r21,20(sp)
 8008fb4:	dd000417 	ldw	r20,16(sp)
 8008fb8:	dcc00317 	ldw	r19,12(sp)
 8008fbc:	dc800217 	ldw	r18,8(sp)
 8008fc0:	dc400117 	ldw	r17,4(sp)
 8008fc4:	dc000017 	ldw	r16,0(sp)
 8008fc8:	dec00704 	addi	sp,sp,28
 8008fcc:	f800283a 	ret
 8008fd0:	18c00104 	addi	r3,r3,4
 8008fd4:	197fff17 	ldw	r5,-4(r3)
 8008fd8:	21000104 	addi	r4,r4,4
 8008fdc:	217fff15 	stw	r5,-4(r4)
 8008fe0:	1a3ffb36 	bltu	r3,r8,8008fd0 <__lshift+0x124>
 8008fe4:	003fe806 	br	8008f88 <__lshift+0xdc>

08008fe8 <__mcmp>:
 8008fe8:	20800417 	ldw	r2,16(r4)
 8008fec:	28c00417 	ldw	r3,16(r5)
 8008ff0:	10c5c83a 	sub	r2,r2,r3
 8008ff4:	10000e1e 	bne	r2,zero,8009030 <__mcmp+0x48>
 8008ff8:	180c90ba 	slli	r6,r3,2
 8008ffc:	21000504 	addi	r4,r4,20
 8009000:	29400504 	addi	r5,r5,20
 8009004:	2187883a 	add	r3,r4,r6
 8009008:	298b883a 	add	r5,r5,r6
 800900c:	00000106 	br	8009014 <__mcmp+0x2c>
 8009010:	20c0082e 	bgeu	r4,r3,8009034 <__mcmp+0x4c>
 8009014:	18ffff04 	addi	r3,r3,-4
 8009018:	297fff04 	addi	r5,r5,-4
 800901c:	19c00017 	ldw	r7,0(r3)
 8009020:	29800017 	ldw	r6,0(r5)
 8009024:	39bffa26 	beq	r7,r6,8009010 <__mcmp+0x28>
 8009028:	3980032e 	bgeu	r7,r6,8009038 <__mcmp+0x50>
 800902c:	00bfffc4 	movi	r2,-1
 8009030:	f800283a 	ret
 8009034:	f800283a 	ret
 8009038:	00800044 	movi	r2,1
 800903c:	f800283a 	ret

08009040 <__mdiff>:
 8009040:	defffa04 	addi	sp,sp,-24
 8009044:	dc800215 	stw	r18,8(sp)
 8009048:	30c00417 	ldw	r3,16(r6)
 800904c:	2c800417 	ldw	r18,16(r5)
 8009050:	dd000415 	stw	r20,16(sp)
 8009054:	dcc00315 	stw	r19,12(sp)
 8009058:	dc400115 	stw	r17,4(sp)
 800905c:	dc000015 	stw	r16,0(sp)
 8009060:	dfc00515 	stw	ra,20(sp)
 8009064:	90e5c83a 	sub	r18,r18,r3
 8009068:	2827883a 	mov	r19,r5
 800906c:	3029883a 	mov	r20,r6
 8009070:	2c000504 	addi	r16,r5,20
 8009074:	34400504 	addi	r17,r6,20
 8009078:	9000131e 	bne	r18,zero,80090c8 <__mdiff+0x88>
 800907c:	180690ba 	slli	r3,r3,2
 8009080:	80c5883a 	add	r2,r16,r3
 8009084:	88c7883a 	add	r3,r17,r3
 8009088:	00000106 	br	8009090 <__mdiff+0x50>
 800908c:	8080552e 	bgeu	r16,r2,80091e4 <__mdiff+0x1a4>
 8009090:	10bfff04 	addi	r2,r2,-4
 8009094:	18ffff04 	addi	r3,r3,-4
 8009098:	11c00017 	ldw	r7,0(r2)
 800909c:	19400017 	ldw	r5,0(r3)
 80090a0:	397ffa26 	beq	r7,r5,800908c <__mdiff+0x4c>
 80090a4:	39400a2e 	bgeu	r7,r5,80090d0 <__mdiff+0x90>
 80090a8:	8007883a 	mov	r3,r16
 80090ac:	9805883a 	mov	r2,r19
 80090b0:	8821883a 	mov	r16,r17
 80090b4:	a027883a 	mov	r19,r20
 80090b8:	1823883a 	mov	r17,r3
 80090bc:	1029883a 	mov	r20,r2
 80090c0:	04800044 	movi	r18,1
 80090c4:	00000206 	br	80090d0 <__mdiff+0x90>
 80090c8:	903ff716 	blt	r18,zero,80090a8 <__mdiff+0x68>
 80090cc:	0025883a 	mov	r18,zero
 80090d0:	99400117 	ldw	r5,4(r19)
 80090d4:	80086e80 	call	80086e8 <_Balloc>
 80090d8:	9a400417 	ldw	r9,16(r19)
 80090dc:	a2c00417 	ldw	r11,16(r20)
 80090e0:	12800504 	addi	r10,r2,20
 80090e4:	481090ba 	slli	r8,r9,2
 80090e8:	581690ba 	slli	r11,r11,2
 80090ec:	14800315 	stw	r18,12(r2)
 80090f0:	8211883a 	add	r8,r16,r8
 80090f4:	8ad7883a 	add	r11,r17,r11
 80090f8:	0007883a 	mov	r3,zero
 80090fc:	00000106 	br	8009104 <__mdiff+0xc4>
 8009100:	3815883a 	mov	r10,r7
 8009104:	81000017 	ldw	r4,0(r16)
 8009108:	89800017 	ldw	r6,0(r17)
 800910c:	51c00104 	addi	r7,r10,4
 8009110:	217fffcc 	andi	r5,r4,65535
 8009114:	28cb883a 	add	r5,r5,r3
 8009118:	30ffffcc 	andi	r3,r6,65535
 800911c:	28cbc83a 	sub	r5,r5,r3
 8009120:	300cd43a 	srli	r6,r6,16
 8009124:	2006d43a 	srli	r3,r4,16
 8009128:	2809d43a 	srai	r4,r5,16
 800912c:	297fffcc 	andi	r5,r5,65535
 8009130:	1987c83a 	sub	r3,r3,r6
 8009134:	1907883a 	add	r3,r3,r4
 8009138:	1808943a 	slli	r4,r3,16
 800913c:	8c400104 	addi	r17,r17,4
 8009140:	84000104 	addi	r16,r16,4
 8009144:	214ab03a 	or	r5,r4,r5
 8009148:	397fff15 	stw	r5,-4(r7)
 800914c:	1807d43a 	srai	r3,r3,16
 8009150:	8affeb36 	bltu	r17,r11,8009100 <__mdiff+0xc0>
 8009154:	8200152e 	bgeu	r16,r8,80091ac <__mdiff+0x16c>
 8009158:	3815883a 	mov	r10,r7
 800915c:	800d883a 	mov	r6,r16
 8009160:	31000017 	ldw	r4,0(r6)
 8009164:	52800104 	addi	r10,r10,4
 8009168:	31800104 	addi	r6,r6,4
 800916c:	217fffcc 	andi	r5,r4,65535
 8009170:	28cb883a 	add	r5,r5,r3
 8009174:	2817d43a 	srai	r11,r5,16
 8009178:	2006d43a 	srli	r3,r4,16
 800917c:	293fffcc 	andi	r4,r5,65535
 8009180:	1ac7883a 	add	r3,r3,r11
 8009184:	180a943a 	slli	r5,r3,16
 8009188:	1807d43a 	srai	r3,r3,16
 800918c:	290ab03a 	or	r5,r5,r4
 8009190:	517fff15 	stw	r5,-4(r10)
 8009194:	323ff236 	bltu	r6,r8,8009160 <__mdiff+0x120>
 8009198:	42bfffc4 	addi	r10,r8,-1
 800919c:	5415c83a 	sub	r10,r10,r16
 80091a0:	5014d0ba 	srli	r10,r10,2
 80091a4:	501490ba 	slli	r10,r10,2
 80091a8:	3a95883a 	add	r10,r7,r10
 80091ac:	2800041e 	bne	r5,zero,80091c0 <__mdiff+0x180>
 80091b0:	52bfff04 	addi	r10,r10,-4
 80091b4:	50c00017 	ldw	r3,0(r10)
 80091b8:	4a7fffc4 	addi	r9,r9,-1
 80091bc:	183ffc26 	beq	r3,zero,80091b0 <__mdiff+0x170>
 80091c0:	12400415 	stw	r9,16(r2)
 80091c4:	dfc00517 	ldw	ra,20(sp)
 80091c8:	dd000417 	ldw	r20,16(sp)
 80091cc:	dcc00317 	ldw	r19,12(sp)
 80091d0:	dc800217 	ldw	r18,8(sp)
 80091d4:	dc400117 	ldw	r17,4(sp)
 80091d8:	dc000017 	ldw	r16,0(sp)
 80091dc:	dec00604 	addi	sp,sp,24
 80091e0:	f800283a 	ret
 80091e4:	000b883a 	mov	r5,zero
 80091e8:	80086e80 	call	80086e8 <_Balloc>
 80091ec:	00c00044 	movi	r3,1
 80091f0:	10c00415 	stw	r3,16(r2)
 80091f4:	10000515 	stw	zero,20(r2)
 80091f8:	003ff206 	br	80091c4 <__mdiff+0x184>

080091fc <__ulp>:
 80091fc:	295ffc2c 	andhi	r5,r5,32752
 8009200:	00ff3034 	movhi	r3,64704
 8009204:	28c7883a 	add	r3,r5,r3
 8009208:	00c0020e 	bge	zero,r3,8009214 <__ulp+0x18>
 800920c:	0005883a 	mov	r2,zero
 8009210:	f800283a 	ret
 8009214:	00c7c83a 	sub	r3,zero,r3
 8009218:	1807d53a 	srai	r3,r3,20
 800921c:	18800508 	cmpgei	r2,r3,20
 8009220:	1000041e 	bne	r2,zero,8009234 <__ulp+0x38>
 8009224:	01400234 	movhi	r5,8
 8009228:	28c7d83a 	sra	r3,r5,r3
 800922c:	0005883a 	mov	r2,zero
 8009230:	f800283a 	ret
 8009234:	193ffb04 	addi	r4,r3,-20
 8009238:	208007c8 	cmpgei	r2,r4,31
 800923c:	0007883a 	mov	r3,zero
 8009240:	1000031e 	bne	r2,zero,8009250 <__ulp+0x54>
 8009244:	00a00034 	movhi	r2,32768
 8009248:	1104d83a 	srl	r2,r2,r4
 800924c:	f800283a 	ret
 8009250:	00800044 	movi	r2,1
 8009254:	f800283a 	ret

08009258 <__b2d>:
 8009258:	defffa04 	addi	sp,sp,-24
 800925c:	dc000015 	stw	r16,0(sp)
 8009260:	24000417 	ldw	r16,16(r4)
 8009264:	dc800215 	stw	r18,8(sp)
 8009268:	24800504 	addi	r18,r4,20
 800926c:	802090ba 	slli	r16,r16,2
 8009270:	dc400115 	stw	r17,4(sp)
 8009274:	dd000415 	stw	r20,16(sp)
 8009278:	9421883a 	add	r16,r18,r16
 800927c:	847fff17 	ldw	r17,-4(r16)
 8009280:	dcc00315 	stw	r19,12(sp)
 8009284:	2829883a 	mov	r20,r5
 8009288:	8809883a 	mov	r4,r17
 800928c:	dfc00515 	stw	ra,20(sp)
 8009290:	80089fc0 	call	80089fc <__hi0bits>
 8009294:	01000804 	movi	r4,32
 8009298:	2087c83a 	sub	r3,r4,r2
 800929c:	a0c00015 	stw	r3,0(r20)
 80092a0:	10c002c8 	cmpgei	r3,r2,11
 80092a4:	84ffff04 	addi	r19,r16,-4
 80092a8:	18001f26 	beq	r3,zero,8009328 <__b2d+0xd0>
 80092ac:	10fffd44 	addi	r3,r2,-11
 80092b0:	94c00e2e 	bgeu	r18,r19,80092ec <__b2d+0x94>
 80092b4:	80bffe17 	ldw	r2,-8(r16)
 80092b8:	18001226 	beq	r3,zero,8009304 <__b2d+0xac>
 80092bc:	20c9c83a 	sub	r4,r4,r3
 80092c0:	110cd83a 	srl	r6,r2,r4
 80092c4:	88e2983a 	sll	r17,r17,r3
 80092c8:	10c4983a 	sll	r2,r2,r3
 80092cc:	817ffe04 	addi	r5,r16,-8
 80092d0:	8986b03a 	or	r3,r17,r6
 80092d4:	18cffc34 	orhi	r3,r3,16368
 80092d8:	91400b2e 	bgeu	r18,r5,8009308 <__b2d+0xb0>
 80092dc:	817ffd17 	ldw	r5,-12(r16)
 80092e0:	2908d83a 	srl	r4,r5,r4
 80092e4:	1104b03a 	or	r2,r2,r4
 80092e8:	00000706 	br	8009308 <__b2d+0xb0>
 80092ec:	18000426 	beq	r3,zero,8009300 <__b2d+0xa8>
 80092f0:	88c6983a 	sll	r3,r17,r3
 80092f4:	0005883a 	mov	r2,zero
 80092f8:	18cffc34 	orhi	r3,r3,16368
 80092fc:	00000206 	br	8009308 <__b2d+0xb0>
 8009300:	0005883a 	mov	r2,zero
 8009304:	88cffc34 	orhi	r3,r17,16368
 8009308:	dfc00517 	ldw	ra,20(sp)
 800930c:	dd000417 	ldw	r20,16(sp)
 8009310:	dcc00317 	ldw	r19,12(sp)
 8009314:	dc800217 	ldw	r18,8(sp)
 8009318:	dc400117 	ldw	r17,4(sp)
 800931c:	dc000017 	ldw	r16,0(sp)
 8009320:	dec00604 	addi	sp,sp,24
 8009324:	f800283a 	ret
 8009328:	014002c4 	movi	r5,11
 800932c:	2889c83a 	sub	r4,r5,r2
 8009330:	8906d83a 	srl	r3,r17,r4
 8009334:	18cffc34 	orhi	r3,r3,16368
 8009338:	94c00536 	bltu	r18,r19,8009350 <__b2d+0xf8>
 800933c:	000b883a 	mov	r5,zero
 8009340:	10800544 	addi	r2,r2,21
 8009344:	8884983a 	sll	r2,r17,r2
 8009348:	1144b03a 	or	r2,r2,r5
 800934c:	003fee06 	br	8009308 <__b2d+0xb0>
 8009350:	817ffe17 	ldw	r5,-8(r16)
 8009354:	290ad83a 	srl	r5,r5,r4
 8009358:	003ff906 	br	8009340 <__b2d+0xe8>

0800935c <__d2b>:
 800935c:	defff804 	addi	sp,sp,-32
 8009360:	dc400315 	stw	r17,12(sp)
 8009364:	3023883a 	mov	r17,r6
 8009368:	dd000615 	stw	r20,24(sp)
 800936c:	dc000215 	stw	r16,8(sp)
 8009370:	2829883a 	mov	r20,r5
 8009374:	8820d53a 	srli	r16,r17,20
 8009378:	01400044 	movi	r5,1
 800937c:	dcc00515 	stw	r19,20(sp)
 8009380:	dc800415 	stw	r18,16(sp)
 8009384:	dfc00715 	stw	ra,28(sp)
 8009388:	3825883a 	mov	r18,r7
 800938c:	80086e80 	call	80086e8 <_Balloc>
 8009390:	01800434 	movhi	r6,16
 8009394:	31bfffc4 	addi	r6,r6,-1
 8009398:	8401ffcc 	andi	r16,r16,2047
 800939c:	1027883a 	mov	r19,r2
 80093a0:	89a2703a 	and	r17,r17,r6
 80093a4:	80000126 	beq	r16,zero,80093ac <__d2b+0x50>
 80093a8:	8c400434 	orhi	r17,r17,16
 80093ac:	dc400115 	stw	r17,4(sp)
 80093b0:	a0002826 	beq	r20,zero,8009454 <__d2b+0xf8>
 80093b4:	d809883a 	mov	r4,sp
 80093b8:	dd000015 	stw	r20,0(sp)
 80093bc:	8008a600 	call	8008a60 <__lo0bits>
 80093c0:	d8c00117 	ldw	r3,4(sp)
 80093c4:	1000171e 	bne	r2,zero,8009424 <__d2b+0xc8>
 80093c8:	d9000017 	ldw	r4,0(sp)
 80093cc:	98c00615 	stw	r3,24(r19)
 80093d0:	99000515 	stw	r4,20(r19)
 80093d4:	18001d1e 	bne	r3,zero,800944c <__d2b+0xf0>
 80093d8:	04400044 	movi	r17,1
 80093dc:	9c400415 	stw	r17,16(r19)
 80093e0:	80002526 	beq	r16,zero,8009478 <__d2b+0x11c>
 80093e4:	00c00d44 	movi	r3,53
 80093e8:	843ef344 	addi	r16,r16,-1075
 80093ec:	80a1883a 	add	r16,r16,r2
 80093f0:	1885c83a 	sub	r2,r3,r2
 80093f4:	d8c00817 	ldw	r3,32(sp)
 80093f8:	94000015 	stw	r16,0(r18)
 80093fc:	18800015 	stw	r2,0(r3)
 8009400:	9805883a 	mov	r2,r19
 8009404:	dfc00717 	ldw	ra,28(sp)
 8009408:	dd000617 	ldw	r20,24(sp)
 800940c:	dcc00517 	ldw	r19,20(sp)
 8009410:	dc800417 	ldw	r18,16(sp)
 8009414:	dc400317 	ldw	r17,12(sp)
 8009418:	dc000217 	ldw	r16,8(sp)
 800941c:	dec00804 	addi	sp,sp,32
 8009420:	f800283a 	ret
 8009424:	01000804 	movi	r4,32
 8009428:	2089c83a 	sub	r4,r4,r2
 800942c:	1908983a 	sll	r4,r3,r4
 8009430:	d9400017 	ldw	r5,0(sp)
 8009434:	1886d83a 	srl	r3,r3,r2
 8009438:	2148b03a 	or	r4,r4,r5
 800943c:	99000515 	stw	r4,20(r19)
 8009440:	d8c00115 	stw	r3,4(sp)
 8009444:	98c00615 	stw	r3,24(r19)
 8009448:	183fe326 	beq	r3,zero,80093d8 <__d2b+0x7c>
 800944c:	04400084 	movi	r17,2
 8009450:	003fe206 	br	80093dc <__d2b+0x80>
 8009454:	d9000104 	addi	r4,sp,4
 8009458:	8008a600 	call	8008a60 <__lo0bits>
 800945c:	00c00044 	movi	r3,1
 8009460:	98c00415 	stw	r3,16(r19)
 8009464:	d8c00117 	ldw	r3,4(sp)
 8009468:	10800804 	addi	r2,r2,32
 800946c:	04400044 	movi	r17,1
 8009470:	98c00515 	stw	r3,20(r19)
 8009474:	803fdb1e 	bne	r16,zero,80093e4 <__d2b+0x88>
 8009478:	880690ba 	slli	r3,r17,2
 800947c:	10bef384 	addi	r2,r2,-1074
 8009480:	8822917a 	slli	r17,r17,5
 8009484:	98c7883a 	add	r3,r19,r3
 8009488:	19000417 	ldw	r4,16(r3)
 800948c:	90800015 	stw	r2,0(r18)
 8009490:	80089fc0 	call	80089fc <__hi0bits>
 8009494:	88a3c83a 	sub	r17,r17,r2
 8009498:	d8800817 	ldw	r2,32(sp)
 800949c:	14400015 	stw	r17,0(r2)
 80094a0:	003fd706 	br	8009400 <__d2b+0xa4>

080094a4 <__ratio>:
 80094a4:	defff904 	addi	sp,sp,-28
 80094a8:	dc400315 	stw	r17,12(sp)
 80094ac:	2823883a 	mov	r17,r5
 80094b0:	d80b883a 	mov	r5,sp
 80094b4:	dfc00615 	stw	ra,24(sp)
 80094b8:	dcc00515 	stw	r19,20(sp)
 80094bc:	dc800415 	stw	r18,16(sp)
 80094c0:	2027883a 	mov	r19,r4
 80094c4:	dc000215 	stw	r16,8(sp)
 80094c8:	80092580 	call	8009258 <__b2d>
 80094cc:	d9400104 	addi	r5,sp,4
 80094d0:	8809883a 	mov	r4,r17
 80094d4:	1025883a 	mov	r18,r2
 80094d8:	1821883a 	mov	r16,r3
 80094dc:	80092580 	call	8009258 <__b2d>
 80094e0:	89400417 	ldw	r5,16(r17)
 80094e4:	99000417 	ldw	r4,16(r19)
 80094e8:	d9800117 	ldw	r6,4(sp)
 80094ec:	2149c83a 	sub	r4,r4,r5
 80094f0:	d9400017 	ldw	r5,0(sp)
 80094f4:	2008917a 	slli	r4,r4,5
 80094f8:	298bc83a 	sub	r5,r5,r6
 80094fc:	2149883a 	add	r4,r4,r5
 8009500:	01000e0e 	bge	zero,r4,800953c <__ratio+0x98>
 8009504:	2008953a 	slli	r4,r4,20
 8009508:	2421883a 	add	r16,r4,r16
 800950c:	100d883a 	mov	r6,r2
 8009510:	180f883a 	mov	r7,r3
 8009514:	9009883a 	mov	r4,r18
 8009518:	800b883a 	mov	r5,r16
 800951c:	800d4f00 	call	800d4f0 <__divdf3>
 8009520:	dfc00617 	ldw	ra,24(sp)
 8009524:	dcc00517 	ldw	r19,20(sp)
 8009528:	dc800417 	ldw	r18,16(sp)
 800952c:	dc400317 	ldw	r17,12(sp)
 8009530:	dc000217 	ldw	r16,8(sp)
 8009534:	dec00704 	addi	sp,sp,28
 8009538:	f800283a 	ret
 800953c:	2008953a 	slli	r4,r4,20
 8009540:	1907c83a 	sub	r3,r3,r4
 8009544:	003ff106 	br	800950c <__ratio+0x68>

08009548 <_mprec_log10>:
 8009548:	defffe04 	addi	sp,sp,-8
 800954c:	dc000015 	stw	r16,0(sp)
 8009550:	dfc00115 	stw	ra,4(sp)
 8009554:	20800608 	cmpgei	r2,r4,24
 8009558:	2021883a 	mov	r16,r4
 800955c:	10000d26 	beq	r2,zero,8009594 <_mprec_log10+0x4c>
 8009560:	0005883a 	mov	r2,zero
 8009564:	00cffc34 	movhi	r3,16368
 8009568:	843fffc4 	addi	r16,r16,-1
 800956c:	000d883a 	mov	r6,zero
 8009570:	01d00934 	movhi	r7,16420
 8009574:	1009883a 	mov	r4,r2
 8009578:	180b883a 	mov	r5,r3
 800957c:	800e0b40 	call	800e0b4 <__muldf3>
 8009580:	803ff91e 	bne	r16,zero,8009568 <_mprec_log10+0x20>
 8009584:	dfc00117 	ldw	ra,4(sp)
 8009588:	dc000017 	ldw	r16,0(sp)
 800958c:	dec00204 	addi	sp,sp,8
 8009590:	f800283a 	ret
 8009594:	202090fa 	slli	r16,r4,3
 8009598:	00820074 	movhi	r2,2049
 800959c:	1087e704 	addi	r2,r2,8092
 80095a0:	1421883a 	add	r16,r2,r16
 80095a4:	80800017 	ldw	r2,0(r16)
 80095a8:	80c00117 	ldw	r3,4(r16)
 80095ac:	dfc00117 	ldw	ra,4(sp)
 80095b0:	dc000017 	ldw	r16,0(sp)
 80095b4:	dec00204 	addi	sp,sp,8
 80095b8:	f800283a 	ret

080095bc <__copybits>:
 80095bc:	29ffffc4 	addi	r7,r5,-1
 80095c0:	380fd17a 	srai	r7,r7,5
 80095c4:	31400417 	ldw	r5,16(r6)
 80095c8:	30800504 	addi	r2,r6,20
 80095cc:	39c00044 	addi	r7,r7,1
 80095d0:	280a90ba 	slli	r5,r5,2
 80095d4:	380e90ba 	slli	r7,r7,2
 80095d8:	114b883a 	add	r5,r2,r5
 80095dc:	21cf883a 	add	r7,r4,r7
 80095e0:	11400c2e 	bgeu	r2,r5,8009614 <__copybits+0x58>
 80095e4:	2007883a 	mov	r3,r4
 80095e8:	10800104 	addi	r2,r2,4
 80095ec:	123fff17 	ldw	r8,-4(r2)
 80095f0:	18c00104 	addi	r3,r3,4
 80095f4:	1a3fff15 	stw	r8,-4(r3)
 80095f8:	117ffb36 	bltu	r2,r5,80095e8 <__copybits+0x2c>
 80095fc:	2985c83a 	sub	r2,r5,r6
 8009600:	10bffac4 	addi	r2,r2,-21
 8009604:	1004d0ba 	srli	r2,r2,2
 8009608:	10800044 	addi	r2,r2,1
 800960c:	100490ba 	slli	r2,r2,2
 8009610:	2089883a 	add	r4,r4,r2
 8009614:	21c0032e 	bgeu	r4,r7,8009624 <__copybits+0x68>
 8009618:	21000104 	addi	r4,r4,4
 800961c:	203fff15 	stw	zero,-4(r4)
 8009620:	21fffd36 	bltu	r4,r7,8009618 <__copybits+0x5c>
 8009624:	f800283a 	ret

08009628 <__any_on>:
 8009628:	20800417 	ldw	r2,16(r4)
 800962c:	280dd17a 	srai	r6,r5,5
 8009630:	21000504 	addi	r4,r4,20
 8009634:	11800c0e 	bge	r2,r6,8009668 <__any_on+0x40>
 8009638:	100690ba 	slli	r3,r2,2
 800963c:	20c7883a 	add	r3,r4,r3
 8009640:	20c0142e 	bgeu	r4,r3,8009694 <__any_on+0x6c>
 8009644:	18bfff17 	ldw	r2,-4(r3)
 8009648:	18ffff04 	addi	r3,r3,-4
 800964c:	1000041e 	bne	r2,zero,8009660 <__any_on+0x38>
 8009650:	20c00f2e 	bgeu	r4,r3,8009690 <__any_on+0x68>
 8009654:	18ffff04 	addi	r3,r3,-4
 8009658:	19400017 	ldw	r5,0(r3)
 800965c:	283ffc26 	beq	r5,zero,8009650 <__any_on+0x28>
 8009660:	00800044 	movi	r2,1
 8009664:	f800283a 	ret
 8009668:	300690ba 	slli	r3,r6,2
 800966c:	20c7883a 	add	r3,r4,r3
 8009670:	30bff30e 	bge	r6,r2,8009640 <__any_on+0x18>
 8009674:	294007cc 	andi	r5,r5,31
 8009678:	283ff126 	beq	r5,zero,8009640 <__any_on+0x18>
 800967c:	19800017 	ldw	r6,0(r3)
 8009680:	3144d83a 	srl	r2,r6,r5
 8009684:	114a983a 	sll	r5,r2,r5
 8009688:	317ff51e 	bne	r6,r5,8009660 <__any_on+0x38>
 800968c:	003fec06 	br	8009640 <__any_on+0x18>
 8009690:	f800283a 	ret
 8009694:	0005883a 	mov	r2,zero
 8009698:	f800283a 	ret

0800969c <_putc_r>:
 800969c:	defffc04 	addi	sp,sp,-16
 80096a0:	dc000215 	stw	r16,8(sp)
 80096a4:	dfc00315 	stw	ra,12(sp)
 80096a8:	2021883a 	mov	r16,r4
 80096ac:	20000226 	beq	r4,zero,80096b8 <_putc_r+0x1c>
 80096b0:	20800e17 	ldw	r2,56(r4)
 80096b4:	10000e26 	beq	r2,zero,80096f0 <_putc_r+0x54>
 80096b8:	30800217 	ldw	r2,8(r6)
 80096bc:	10bfffc4 	addi	r2,r2,-1
 80096c0:	30800215 	stw	r2,8(r6)
 80096c4:	10001316 	blt	r2,zero,8009714 <_putc_r+0x78>
 80096c8:	30800017 	ldw	r2,0(r6)
 80096cc:	11400005 	stb	r5,0(r2)
 80096d0:	30800017 	ldw	r2,0(r6)
 80096d4:	10c00044 	addi	r3,r2,1
 80096d8:	30c00015 	stw	r3,0(r6)
 80096dc:	10800003 	ldbu	r2,0(r2)
 80096e0:	dfc00317 	ldw	ra,12(sp)
 80096e4:	dc000217 	ldw	r16,8(sp)
 80096e8:	dec00404 	addi	sp,sp,16
 80096ec:	f800283a 	ret
 80096f0:	d9800115 	stw	r6,4(sp)
 80096f4:	d9400015 	stw	r5,0(sp)
 80096f8:	8006e700 	call	8006e70 <__sinit>
 80096fc:	d9800117 	ldw	r6,4(sp)
 8009700:	d9400017 	ldw	r5,0(sp)
 8009704:	30800217 	ldw	r2,8(r6)
 8009708:	10bfffc4 	addi	r2,r2,-1
 800970c:	30800215 	stw	r2,8(r6)
 8009710:	103fed0e 	bge	r2,zero,80096c8 <_putc_r+0x2c>
 8009714:	30c00617 	ldw	r3,24(r6)
 8009718:	10c00e16 	blt	r2,r3,8009754 <_putc_r+0xb8>
 800971c:	30800017 	ldw	r2,0(r6)
 8009720:	11400005 	stb	r5,0(r2)
 8009724:	30c00017 	ldw	r3,0(r6)
 8009728:	18800003 	ldbu	r2,0(r3)
 800972c:	108002a0 	cmpeqi	r2,r2,10
 8009730:	1000071e 	bne	r2,zero,8009750 <_putc_r+0xb4>
 8009734:	18800044 	addi	r2,r3,1
 8009738:	30800015 	stw	r2,0(r6)
 800973c:	18800003 	ldbu	r2,0(r3)
 8009740:	dfc00317 	ldw	ra,12(sp)
 8009744:	dc000217 	ldw	r16,8(sp)
 8009748:	dec00404 	addi	sp,sp,16
 800974c:	f800283a 	ret
 8009750:	01400284 	movi	r5,10
 8009754:	8009883a 	mov	r4,r16
 8009758:	dfc00317 	ldw	ra,12(sp)
 800975c:	dc000217 	ldw	r16,8(sp)
 8009760:	dec00404 	addi	sp,sp,16
 8009764:	800b52c1 	jmpi	800b52c <__swbuf_r>

08009768 <putc>:
 8009768:	defffc04 	addi	sp,sp,-16
 800976c:	00820074 	movhi	r2,2049
 8009770:	dc000115 	stw	r16,4(sp)
 8009774:	14100c17 	ldw	r16,16432(r2)
 8009778:	dc400215 	stw	r17,8(sp)
 800977c:	dfc00315 	stw	ra,12(sp)
 8009780:	2023883a 	mov	r17,r4
 8009784:	80000226 	beq	r16,zero,8009790 <putc+0x28>
 8009788:	80800e17 	ldw	r2,56(r16)
 800978c:	10000f26 	beq	r2,zero,80097cc <putc+0x64>
 8009790:	28800217 	ldw	r2,8(r5)
 8009794:	10bfffc4 	addi	r2,r2,-1
 8009798:	28800215 	stw	r2,8(r5)
 800979c:	10001316 	blt	r2,zero,80097ec <putc+0x84>
 80097a0:	28800017 	ldw	r2,0(r5)
 80097a4:	14400005 	stb	r17,0(r2)
 80097a8:	28800017 	ldw	r2,0(r5)
 80097ac:	10c00044 	addi	r3,r2,1
 80097b0:	28c00015 	stw	r3,0(r5)
 80097b4:	10800003 	ldbu	r2,0(r2)
 80097b8:	dfc00317 	ldw	ra,12(sp)
 80097bc:	dc400217 	ldw	r17,8(sp)
 80097c0:	dc000117 	ldw	r16,4(sp)
 80097c4:	dec00404 	addi	sp,sp,16
 80097c8:	f800283a 	ret
 80097cc:	8009883a 	mov	r4,r16
 80097d0:	d9400015 	stw	r5,0(sp)
 80097d4:	8006e700 	call	8006e70 <__sinit>
 80097d8:	d9400017 	ldw	r5,0(sp)
 80097dc:	28800217 	ldw	r2,8(r5)
 80097e0:	10bfffc4 	addi	r2,r2,-1
 80097e4:	28800215 	stw	r2,8(r5)
 80097e8:	103fed0e 	bge	r2,zero,80097a0 <putc+0x38>
 80097ec:	28c00617 	ldw	r3,24(r5)
 80097f0:	10c00a16 	blt	r2,r3,800981c <putc+0xb4>
 80097f4:	28800017 	ldw	r2,0(r5)
 80097f8:	14400005 	stb	r17,0(r2)
 80097fc:	28c00017 	ldw	r3,0(r5)
 8009800:	18800003 	ldbu	r2,0(r3)
 8009804:	108002a0 	cmpeqi	r2,r2,10
 8009808:	10000c1e 	bne	r2,zero,800983c <putc+0xd4>
 800980c:	18800044 	addi	r2,r3,1
 8009810:	28800015 	stw	r2,0(r5)
 8009814:	18800003 	ldbu	r2,0(r3)
 8009818:	003fe706 	br	80097b8 <putc+0x50>
 800981c:	280d883a 	mov	r6,r5
 8009820:	880b883a 	mov	r5,r17
 8009824:	8009883a 	mov	r4,r16
 8009828:	dfc00317 	ldw	ra,12(sp)
 800982c:	dc400217 	ldw	r17,8(sp)
 8009830:	dc000117 	ldw	r16,4(sp)
 8009834:	dec00404 	addi	sp,sp,16
 8009838:	800b52c1 	jmpi	800b52c <__swbuf_r>
 800983c:	280d883a 	mov	r6,r5
 8009840:	01400284 	movi	r5,10
 8009844:	003ff706 	br	8009824 <putc+0xbc>

08009848 <_realloc_r>:
 8009848:	defff504 	addi	sp,sp,-44
 800984c:	dcc00415 	stw	r19,16(sp)
 8009850:	dfc00a15 	stw	ra,40(sp)
 8009854:	df000915 	stw	fp,36(sp)
 8009858:	ddc00815 	stw	r23,32(sp)
 800985c:	dd800715 	stw	r22,28(sp)
 8009860:	dd400615 	stw	r21,24(sp)
 8009864:	dd000515 	stw	r20,20(sp)
 8009868:	dc800315 	stw	r18,12(sp)
 800986c:	dc400215 	stw	r17,8(sp)
 8009870:	dc000115 	stw	r16,4(sp)
 8009874:	3027883a 	mov	r19,r6
 8009878:	28008b26 	beq	r5,zero,8009aa8 <_realloc_r+0x260>
 800987c:	282d883a 	mov	r22,r5
 8009880:	202b883a 	mov	r21,r4
 8009884:	9c0002c4 	addi	r16,r19,11
 8009888:	800fa380 	call	800fa38 <__malloc_lock>
 800988c:	808005f0 	cmpltui	r2,r16,23
 8009890:	1000521e 	bne	r2,zero,80099dc <_realloc_r+0x194>
 8009894:	017ffe04 	movi	r5,-8
 8009898:	8160703a 	and	r16,r16,r5
 800989c:	8007883a 	mov	r3,r16
 80098a0:	80005116 	blt	r16,zero,80099e8 <_realloc_r+0x1a0>
 80098a4:	84c05036 	bltu	r16,r19,80099e8 <_realloc_r+0x1a0>
 80098a8:	b0bfff17 	ldw	r2,-4(r22)
 80098ac:	017fff04 	movi	r5,-4
 80098b0:	b4bffe04 	addi	r18,r22,-8
 80098b4:	1162703a 	and	r17,r2,r5
 80098b8:	9469883a 	add	r20,r18,r17
 80098bc:	88c0390e 	bge	r17,r3,80099a4 <_realloc_r+0x15c>
 80098c0:	07020074 	movhi	fp,2049
 80098c4:	e70a2804 	addi	fp,fp,10400
 80098c8:	e2000217 	ldw	r8,8(fp)
 80098cc:	a1000117 	ldw	r4,4(r20)
 80098d0:	45008e26 	beq	r8,r20,8009b0c <_realloc_r+0x2c4>
 80098d4:	01bfff84 	movi	r6,-2
 80098d8:	218c703a 	and	r6,r4,r6
 80098dc:	a18d883a 	add	r6,r20,r6
 80098e0:	31800117 	ldw	r6,4(r6)
 80098e4:	3180004c 	andi	r6,r6,1
 80098e8:	30004f1e 	bne	r6,zero,8009a28 <_realloc_r+0x1e0>
 80098ec:	2148703a 	and	r4,r4,r5
 80098f0:	890b883a 	add	r5,r17,r4
 80098f4:	28c0cb0e 	bge	r5,r3,8009c24 <_realloc_r+0x3dc>
 80098f8:	1080004c 	andi	r2,r2,1
 80098fc:	10004c1e 	bne	r2,zero,8009a30 <_realloc_r+0x1e8>
 8009900:	b1fffe17 	ldw	r7,-8(r22)
 8009904:	00bfff04 	movi	r2,-4
 8009908:	91cfc83a 	sub	r7,r18,r7
 800990c:	39400117 	ldw	r5,4(r7)
 8009910:	288a703a 	and	r5,r5,r2
 8009914:	a0000426 	beq	r20,zero,8009928 <_realloc_r+0xe0>
 8009918:	896f883a 	add	r23,r17,r5
 800991c:	b92f883a 	add	r23,r23,r4
 8009920:	4500cb26 	beq	r8,r20,8009c50 <_realloc_r+0x408>
 8009924:	b8c0930e 	bge	r23,r3,8009b74 <_realloc_r+0x32c>
 8009928:	38004126 	beq	r7,zero,8009a30 <_realloc_r+0x1e8>
 800992c:	896f883a 	add	r23,r17,r5
 8009930:	b8c03f16 	blt	r23,r3,8009a30 <_realloc_r+0x1e8>
 8009934:	38c00217 	ldw	r3,8(r7)
 8009938:	38800317 	ldw	r2,12(r7)
 800993c:	89bfff04 	addi	r6,r17,-4
 8009940:	31000968 	cmpgeui	r4,r6,37
 8009944:	18800315 	stw	r2,12(r3)
 8009948:	10c00215 	stw	r3,8(r2)
 800994c:	3de9883a 	add	r20,r7,r23
 8009950:	38c00204 	addi	r3,r7,8
 8009954:	2000f81e 	bne	r4,zero,8009d38 <_realloc_r+0x4f0>
 8009958:	30800530 	cmpltui	r2,r6,20
 800995c:	b1000017 	ldw	r4,0(r22)
 8009960:	1000eb1e 	bne	r2,zero,8009d10 <_realloc_r+0x4c8>
 8009964:	39000215 	stw	r4,8(r7)
 8009968:	b1000117 	ldw	r4,4(r22)
 800996c:	30800728 	cmpgeui	r2,r6,28
 8009970:	39000315 	stw	r4,12(r7)
 8009974:	1001041e 	bne	r2,zero,8009d88 <_realloc_r+0x540>
 8009978:	b1000217 	ldw	r4,8(r22)
 800997c:	38800404 	addi	r2,r7,16
 8009980:	b5800204 	addi	r22,r22,8
 8009984:	11000015 	stw	r4,0(r2)
 8009988:	b1000117 	ldw	r4,4(r22)
 800998c:	b823883a 	mov	r17,r23
 8009990:	3825883a 	mov	r18,r7
 8009994:	11000115 	stw	r4,4(r2)
 8009998:	b1000217 	ldw	r4,8(r22)
 800999c:	182d883a 	mov	r22,r3
 80099a0:	11000215 	stw	r4,8(r2)
 80099a4:	91800117 	ldw	r6,4(r18)
 80099a8:	8c05c83a 	sub	r2,r17,r16
 80099ac:	10c00430 	cmpltui	r3,r2,16
 80099b0:	3180004c 	andi	r6,r6,1
 80099b4:	18004926 	beq	r3,zero,8009adc <_realloc_r+0x294>
 80099b8:	898cb03a 	or	r6,r17,r6
 80099bc:	91800115 	stw	r6,4(r18)
 80099c0:	a0800117 	ldw	r2,4(r20)
 80099c4:	10800054 	ori	r2,r2,1
 80099c8:	a0800115 	stw	r2,4(r20)
 80099cc:	a809883a 	mov	r4,r21
 80099d0:	800fa5c0 	call	800fa5c <__malloc_unlock>
 80099d4:	b027883a 	mov	r19,r22
 80099d8:	00000606 	br	80099f4 <_realloc_r+0x1ac>
 80099dc:	04000404 	movi	r16,16
 80099e0:	00c00404 	movi	r3,16
 80099e4:	84ffb02e 	bgeu	r16,r19,80098a8 <_realloc_r+0x60>
 80099e8:	00800304 	movi	r2,12
 80099ec:	a8800015 	stw	r2,0(r21)
 80099f0:	0027883a 	mov	r19,zero
 80099f4:	9805883a 	mov	r2,r19
 80099f8:	dfc00a17 	ldw	ra,40(sp)
 80099fc:	df000917 	ldw	fp,36(sp)
 8009a00:	ddc00817 	ldw	r23,32(sp)
 8009a04:	dd800717 	ldw	r22,28(sp)
 8009a08:	dd400617 	ldw	r21,24(sp)
 8009a0c:	dd000517 	ldw	r20,20(sp)
 8009a10:	dcc00417 	ldw	r19,16(sp)
 8009a14:	dc800317 	ldw	r18,12(sp)
 8009a18:	dc400217 	ldw	r17,8(sp)
 8009a1c:	dc000117 	ldw	r16,4(sp)
 8009a20:	dec00b04 	addi	sp,sp,44
 8009a24:	f800283a 	ret
 8009a28:	1080004c 	andi	r2,r2,1
 8009a2c:	10007826 	beq	r2,zero,8009c10 <_realloc_r+0x3c8>
 8009a30:	980b883a 	mov	r5,r19
 8009a34:	a809883a 	mov	r4,r21
 8009a38:	8007af00 	call	8007af0 <_malloc_r>
 8009a3c:	1027883a 	mov	r19,r2
 8009a40:	10001626 	beq	r2,zero,8009a9c <_realloc_r+0x254>
 8009a44:	b0bfff17 	ldw	r2,-4(r22)
 8009a48:	013fff84 	movi	r4,-2
 8009a4c:	98fffe04 	addi	r3,r19,-8
 8009a50:	1104703a 	and	r2,r2,r4
 8009a54:	9085883a 	add	r2,r18,r2
 8009a58:	10c06726 	beq	r2,r3,8009bf8 <_realloc_r+0x3b0>
 8009a5c:	89bfff04 	addi	r6,r17,-4
 8009a60:	30800968 	cmpgeui	r2,r6,37
 8009a64:	1000761e 	bne	r2,zero,8009c40 <_realloc_r+0x3f8>
 8009a68:	30800530 	cmpltui	r2,r6,20
 8009a6c:	b1000017 	ldw	r4,0(r22)
 8009a70:	10003726 	beq	r2,zero,8009b50 <_realloc_r+0x308>
 8009a74:	9805883a 	mov	r2,r19
 8009a78:	b007883a 	mov	r3,r22
 8009a7c:	11000015 	stw	r4,0(r2)
 8009a80:	19000117 	ldw	r4,4(r3)
 8009a84:	11000115 	stw	r4,4(r2)
 8009a88:	18c00217 	ldw	r3,8(r3)
 8009a8c:	10c00215 	stw	r3,8(r2)
 8009a90:	b00b883a 	mov	r5,r22
 8009a94:	a809883a 	mov	r4,r21
 8009a98:	8006fd40 	call	8006fd4 <_free_r>
 8009a9c:	a809883a 	mov	r4,r21
 8009aa0:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8009aa4:	003fd306 	br	80099f4 <_realloc_r+0x1ac>
 8009aa8:	300b883a 	mov	r5,r6
 8009aac:	dfc00a17 	ldw	ra,40(sp)
 8009ab0:	df000917 	ldw	fp,36(sp)
 8009ab4:	ddc00817 	ldw	r23,32(sp)
 8009ab8:	dd800717 	ldw	r22,28(sp)
 8009abc:	dd400617 	ldw	r21,24(sp)
 8009ac0:	dd000517 	ldw	r20,20(sp)
 8009ac4:	dcc00417 	ldw	r19,16(sp)
 8009ac8:	dc800317 	ldw	r18,12(sp)
 8009acc:	dc400217 	ldw	r17,8(sp)
 8009ad0:	dc000117 	ldw	r16,4(sp)
 8009ad4:	dec00b04 	addi	sp,sp,44
 8009ad8:	8007af01 	jmpi	8007af0 <_malloc_r>
 8009adc:	340cb03a 	or	r6,r6,r16
 8009ae0:	91800115 	stw	r6,4(r18)
 8009ae4:	940b883a 	add	r5,r18,r16
 8009ae8:	10800054 	ori	r2,r2,1
 8009aec:	28800115 	stw	r2,4(r5)
 8009af0:	a0800117 	ldw	r2,4(r20)
 8009af4:	29400204 	addi	r5,r5,8
 8009af8:	a809883a 	mov	r4,r21
 8009afc:	10800054 	ori	r2,r2,1
 8009b00:	a0800115 	stw	r2,4(r20)
 8009b04:	8006fd40 	call	8006fd4 <_free_r>
 8009b08:	003fb006 	br	80099cc <_realloc_r+0x184>
 8009b0c:	2148703a 	and	r4,r4,r5
 8009b10:	890b883a 	add	r5,r17,r4
 8009b14:	81800404 	addi	r6,r16,16
 8009b18:	29bf7716 	blt	r5,r6,80098f8 <_realloc_r+0xb0>
 8009b1c:	9425883a 	add	r18,r18,r16
 8009b20:	2c05c83a 	sub	r2,r5,r16
 8009b24:	e4800215 	stw	r18,8(fp)
 8009b28:	10800054 	ori	r2,r2,1
 8009b2c:	90800115 	stw	r2,4(r18)
 8009b30:	b0bfff17 	ldw	r2,-4(r22)
 8009b34:	a809883a 	mov	r4,r21
 8009b38:	b027883a 	mov	r19,r22
 8009b3c:	1080004c 	andi	r2,r2,1
 8009b40:	1420b03a 	or	r16,r2,r16
 8009b44:	b43fff15 	stw	r16,-4(r22)
 8009b48:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8009b4c:	003fa906 	br	80099f4 <_realloc_r+0x1ac>
 8009b50:	99000015 	stw	r4,0(r19)
 8009b54:	b0c00117 	ldw	r3,4(r22)
 8009b58:	30800728 	cmpgeui	r2,r6,28
 8009b5c:	98c00115 	stw	r3,4(r19)
 8009b60:	1000611e 	bne	r2,zero,8009ce8 <_realloc_r+0x4a0>
 8009b64:	b0c00204 	addi	r3,r22,8
 8009b68:	98800204 	addi	r2,r19,8
 8009b6c:	b1000217 	ldw	r4,8(r22)
 8009b70:	003fc206 	br	8009a7c <_realloc_r+0x234>
 8009b74:	a0800317 	ldw	r2,12(r20)
 8009b78:	a0c00217 	ldw	r3,8(r20)
 8009b7c:	89bfff04 	addi	r6,r17,-4
 8009b80:	31000968 	cmpgeui	r4,r6,37
 8009b84:	18800315 	stw	r2,12(r3)
 8009b88:	10c00215 	stw	r3,8(r2)
 8009b8c:	38c00217 	ldw	r3,8(r7)
 8009b90:	38800317 	ldw	r2,12(r7)
 8009b94:	3a000204 	addi	r8,r7,8
 8009b98:	3de9883a 	add	r20,r7,r23
 8009b9c:	18800315 	stw	r2,12(r3)
 8009ba0:	10c00215 	stw	r3,8(r2)
 8009ba4:	20006f1e 	bne	r4,zero,8009d64 <_realloc_r+0x51c>
 8009ba8:	30800530 	cmpltui	r2,r6,20
 8009bac:	b0c00017 	ldw	r3,0(r22)
 8009bb0:	10006a1e 	bne	r2,zero,8009d5c <_realloc_r+0x514>
 8009bb4:	38c00215 	stw	r3,8(r7)
 8009bb8:	b0c00117 	ldw	r3,4(r22)
 8009bbc:	30800728 	cmpgeui	r2,r6,28
 8009bc0:	38c00315 	stw	r3,12(r7)
 8009bc4:	10007a1e 	bne	r2,zero,8009db0 <_realloc_r+0x568>
 8009bc8:	b0c00217 	ldw	r3,8(r22)
 8009bcc:	38800404 	addi	r2,r7,16
 8009bd0:	b5800204 	addi	r22,r22,8
 8009bd4:	10c00015 	stw	r3,0(r2)
 8009bd8:	b0c00117 	ldw	r3,4(r22)
 8009bdc:	b823883a 	mov	r17,r23
 8009be0:	3825883a 	mov	r18,r7
 8009be4:	10c00115 	stw	r3,4(r2)
 8009be8:	b0c00217 	ldw	r3,8(r22)
 8009bec:	402d883a 	mov	r22,r8
 8009bf0:	10c00215 	stw	r3,8(r2)
 8009bf4:	003f6b06 	br	80099a4 <_realloc_r+0x15c>
 8009bf8:	98bfff17 	ldw	r2,-4(r19)
 8009bfc:	00ffff04 	movi	r3,-4
 8009c00:	10c4703a 	and	r2,r2,r3
 8009c04:	88a3883a 	add	r17,r17,r2
 8009c08:	9469883a 	add	r20,r18,r17
 8009c0c:	003f6506 	br	80099a4 <_realloc_r+0x15c>
 8009c10:	b1fffe17 	ldw	r7,-8(r22)
 8009c14:	91cfc83a 	sub	r7,r18,r7
 8009c18:	39000117 	ldw	r4,4(r7)
 8009c1c:	214a703a 	and	r5,r4,r5
 8009c20:	003f4106 	br	8009928 <_realloc_r+0xe0>
 8009c24:	a0800317 	ldw	r2,12(r20)
 8009c28:	a0c00217 	ldw	r3,8(r20)
 8009c2c:	2823883a 	mov	r17,r5
 8009c30:	9169883a 	add	r20,r18,r5
 8009c34:	18800315 	stw	r2,12(r3)
 8009c38:	10c00215 	stw	r3,8(r2)
 8009c3c:	003f5906 	br	80099a4 <_realloc_r+0x15c>
 8009c40:	b00b883a 	mov	r5,r22
 8009c44:	9809883a 	mov	r4,r19
 8009c48:	80084cc0 	call	80084cc <memmove>
 8009c4c:	003f9006 	br	8009a90 <_realloc_r+0x248>
 8009c50:	80800404 	addi	r2,r16,16
 8009c54:	b8bf3416 	blt	r23,r2,8009928 <_realloc_r+0xe0>
 8009c58:	38800317 	ldw	r2,12(r7)
 8009c5c:	38c00217 	ldw	r3,8(r7)
 8009c60:	89bfff04 	addi	r6,r17,-4
 8009c64:	31000968 	cmpgeui	r4,r6,37
 8009c68:	18800315 	stw	r2,12(r3)
 8009c6c:	10c00215 	stw	r3,8(r2)
 8009c70:	3cc00204 	addi	r19,r7,8
 8009c74:	20005a1e 	bne	r4,zero,8009de0 <_realloc_r+0x598>
 8009c78:	30800530 	cmpltui	r2,r6,20
 8009c7c:	b0c00017 	ldw	r3,0(r22)
 8009c80:	1000551e 	bne	r2,zero,8009dd8 <_realloc_r+0x590>
 8009c84:	38c00215 	stw	r3,8(r7)
 8009c88:	b0c00117 	ldw	r3,4(r22)
 8009c8c:	30800728 	cmpgeui	r2,r6,28
 8009c90:	38c00315 	stw	r3,12(r7)
 8009c94:	1000661e 	bne	r2,zero,8009e30 <_realloc_r+0x5e8>
 8009c98:	b0c00217 	ldw	r3,8(r22)
 8009c9c:	38800404 	addi	r2,r7,16
 8009ca0:	b5800204 	addi	r22,r22,8
 8009ca4:	10c00015 	stw	r3,0(r2)
 8009ca8:	b0c00117 	ldw	r3,4(r22)
 8009cac:	10c00115 	stw	r3,4(r2)
 8009cb0:	b0c00217 	ldw	r3,8(r22)
 8009cb4:	10c00215 	stw	r3,8(r2)
 8009cb8:	3c07883a 	add	r3,r7,r16
 8009cbc:	bc05c83a 	sub	r2,r23,r16
 8009cc0:	e0c00215 	stw	r3,8(fp)
 8009cc4:	10800054 	ori	r2,r2,1
 8009cc8:	18800115 	stw	r2,4(r3)
 8009ccc:	38800117 	ldw	r2,4(r7)
 8009cd0:	a809883a 	mov	r4,r21
 8009cd4:	1080004c 	andi	r2,r2,1
 8009cd8:	1420b03a 	or	r16,r2,r16
 8009cdc:	3c000115 	stw	r16,4(r7)
 8009ce0:	800fa5c0 	call	800fa5c <__malloc_unlock>
 8009ce4:	003f4306 	br	80099f4 <_realloc_r+0x1ac>
 8009ce8:	b0800217 	ldw	r2,8(r22)
 8009cec:	31800920 	cmpeqi	r6,r6,36
 8009cf0:	98800215 	stw	r2,8(r19)
 8009cf4:	b0800317 	ldw	r2,12(r22)
 8009cf8:	98800315 	stw	r2,12(r19)
 8009cfc:	3000061e 	bne	r6,zero,8009d18 <_realloc_r+0x4d0>
 8009d00:	b0c00404 	addi	r3,r22,16
 8009d04:	98800404 	addi	r2,r19,16
 8009d08:	b1000417 	ldw	r4,16(r22)
 8009d0c:	003f5b06 	br	8009a7c <_realloc_r+0x234>
 8009d10:	1805883a 	mov	r2,r3
 8009d14:	003f1b06 	br	8009984 <_realloc_r+0x13c>
 8009d18:	b1000417 	ldw	r4,16(r22)
 8009d1c:	b0c00604 	addi	r3,r22,24
 8009d20:	98800604 	addi	r2,r19,24
 8009d24:	99000415 	stw	r4,16(r19)
 8009d28:	b1000517 	ldw	r4,20(r22)
 8009d2c:	99000515 	stw	r4,20(r19)
 8009d30:	b1000617 	ldw	r4,24(r22)
 8009d34:	003f5106 	br	8009a7c <_realloc_r+0x234>
 8009d38:	b00b883a 	mov	r5,r22
 8009d3c:	1809883a 	mov	r4,r3
 8009d40:	d9c00015 	stw	r7,0(sp)
 8009d44:	80084cc0 	call	80084cc <memmove>
 8009d48:	d9c00017 	ldw	r7,0(sp)
 8009d4c:	102d883a 	mov	r22,r2
 8009d50:	b823883a 	mov	r17,r23
 8009d54:	3825883a 	mov	r18,r7
 8009d58:	003f1206 	br	80099a4 <_realloc_r+0x15c>
 8009d5c:	4005883a 	mov	r2,r8
 8009d60:	003f9c06 	br	8009bd4 <_realloc_r+0x38c>
 8009d64:	b00b883a 	mov	r5,r22
 8009d68:	4009883a 	mov	r4,r8
 8009d6c:	d9c00015 	stw	r7,0(sp)
 8009d70:	80084cc0 	call	80084cc <memmove>
 8009d74:	d9c00017 	ldw	r7,0(sp)
 8009d78:	102d883a 	mov	r22,r2
 8009d7c:	b823883a 	mov	r17,r23
 8009d80:	3825883a 	mov	r18,r7
 8009d84:	003f0706 	br	80099a4 <_realloc_r+0x15c>
 8009d88:	b0800217 	ldw	r2,8(r22)
 8009d8c:	31800920 	cmpeqi	r6,r6,36
 8009d90:	38800415 	stw	r2,16(r7)
 8009d94:	b0800317 	ldw	r2,12(r22)
 8009d98:	38800515 	stw	r2,20(r7)
 8009d9c:	b1000417 	ldw	r4,16(r22)
 8009da0:	3000151e 	bne	r6,zero,8009df8 <_realloc_r+0x5b0>
 8009da4:	38800604 	addi	r2,r7,24
 8009da8:	b5800404 	addi	r22,r22,16
 8009dac:	003ef506 	br	8009984 <_realloc_r+0x13c>
 8009db0:	b0800217 	ldw	r2,8(r22)
 8009db4:	31800920 	cmpeqi	r6,r6,36
 8009db8:	38800415 	stw	r2,16(r7)
 8009dbc:	b0800317 	ldw	r2,12(r22)
 8009dc0:	38800515 	stw	r2,20(r7)
 8009dc4:	b0c00417 	ldw	r3,16(r22)
 8009dc8:	3000121e 	bne	r6,zero,8009e14 <_realloc_r+0x5cc>
 8009dcc:	38800604 	addi	r2,r7,24
 8009dd0:	b5800404 	addi	r22,r22,16
 8009dd4:	003f7f06 	br	8009bd4 <_realloc_r+0x38c>
 8009dd8:	9805883a 	mov	r2,r19
 8009ddc:	003fb106 	br	8009ca4 <_realloc_r+0x45c>
 8009de0:	b00b883a 	mov	r5,r22
 8009de4:	9809883a 	mov	r4,r19
 8009de8:	d9c00015 	stw	r7,0(sp)
 8009dec:	80084cc0 	call	80084cc <memmove>
 8009df0:	d9c00017 	ldw	r7,0(sp)
 8009df4:	003fb006 	br	8009cb8 <_realloc_r+0x470>
 8009df8:	b5800604 	addi	r22,r22,24
 8009dfc:	39000615 	stw	r4,24(r7)
 8009e00:	b13fff17 	ldw	r4,-4(r22)
 8009e04:	38800804 	addi	r2,r7,32
 8009e08:	39000715 	stw	r4,28(r7)
 8009e0c:	b1000017 	ldw	r4,0(r22)
 8009e10:	003edc06 	br	8009984 <_realloc_r+0x13c>
 8009e14:	b5800604 	addi	r22,r22,24
 8009e18:	38c00615 	stw	r3,24(r7)
 8009e1c:	b0ffff17 	ldw	r3,-4(r22)
 8009e20:	38800804 	addi	r2,r7,32
 8009e24:	38c00715 	stw	r3,28(r7)
 8009e28:	b0c00017 	ldw	r3,0(r22)
 8009e2c:	003f6906 	br	8009bd4 <_realloc_r+0x38c>
 8009e30:	b0800217 	ldw	r2,8(r22)
 8009e34:	31800920 	cmpeqi	r6,r6,36
 8009e38:	38800415 	stw	r2,16(r7)
 8009e3c:	b0800317 	ldw	r2,12(r22)
 8009e40:	38800515 	stw	r2,20(r7)
 8009e44:	b0c00417 	ldw	r3,16(r22)
 8009e48:	3000031e 	bne	r6,zero,8009e58 <_realloc_r+0x610>
 8009e4c:	38800604 	addi	r2,r7,24
 8009e50:	b5800404 	addi	r22,r22,16
 8009e54:	003f9306 	br	8009ca4 <_realloc_r+0x45c>
 8009e58:	b5800604 	addi	r22,r22,24
 8009e5c:	38c00615 	stw	r3,24(r7)
 8009e60:	b0ffff17 	ldw	r3,-4(r22)
 8009e64:	38800804 	addi	r2,r7,32
 8009e68:	38c00715 	stw	r3,28(r7)
 8009e6c:	b0c00017 	ldw	r3,0(r22)
 8009e70:	003f8c06 	br	8009ca4 <_realloc_r+0x45c>

08009e74 <_sbrk_r>:
 8009e74:	defffe04 	addi	sp,sp,-8
 8009e78:	dc000015 	stw	r16,0(sp)
 8009e7c:	00820074 	movhi	r2,2049
 8009e80:	2021883a 	mov	r16,r4
 8009e84:	2809883a 	mov	r4,r5
 8009e88:	dfc00115 	stw	ra,4(sp)
 8009e8c:	10172815 	stw	zero,23712(r2)
 8009e90:	800fc340 	call	800fc34 <sbrk>
 8009e94:	10ffffd8 	cmpnei	r3,r2,-1
 8009e98:	18000426 	beq	r3,zero,8009eac <_sbrk_r+0x38>
 8009e9c:	dfc00117 	ldw	ra,4(sp)
 8009ea0:	dc000017 	ldw	r16,0(sp)
 8009ea4:	dec00204 	addi	sp,sp,8
 8009ea8:	f800283a 	ret
 8009eac:	00c20074 	movhi	r3,2049
 8009eb0:	18d72817 	ldw	r3,23712(r3)
 8009eb4:	183ff926 	beq	r3,zero,8009e9c <_sbrk_r+0x28>
 8009eb8:	80c00015 	stw	r3,0(r16)
 8009ebc:	dfc00117 	ldw	ra,4(sp)
 8009ec0:	dc000017 	ldw	r16,0(sp)
 8009ec4:	dec00204 	addi	sp,sp,8
 8009ec8:	f800283a 	ret

08009ecc <__sread>:
 8009ecc:	defffe04 	addi	sp,sp,-8
 8009ed0:	dc000015 	stw	r16,0(sp)
 8009ed4:	2821883a 	mov	r16,r5
 8009ed8:	2940038f 	ldh	r5,14(r5)
 8009edc:	dfc00115 	stw	ra,4(sp)
 8009ee0:	800bd040 	call	800bd04 <_read_r>
 8009ee4:	10000716 	blt	r2,zero,8009f04 <__sread+0x38>
 8009ee8:	80c01417 	ldw	r3,80(r16)
 8009eec:	1887883a 	add	r3,r3,r2
 8009ef0:	80c01415 	stw	r3,80(r16)
 8009ef4:	dfc00117 	ldw	ra,4(sp)
 8009ef8:	dc000017 	ldw	r16,0(sp)
 8009efc:	dec00204 	addi	sp,sp,8
 8009f00:	f800283a 	ret
 8009f04:	80c0030b 	ldhu	r3,12(r16)
 8009f08:	18fbffcc 	andi	r3,r3,61439
 8009f0c:	80c0030d 	sth	r3,12(r16)
 8009f10:	dfc00117 	ldw	ra,4(sp)
 8009f14:	dc000017 	ldw	r16,0(sp)
 8009f18:	dec00204 	addi	sp,sp,8
 8009f1c:	f800283a 	ret

08009f20 <__seofread>:
 8009f20:	0005883a 	mov	r2,zero
 8009f24:	f800283a 	ret

08009f28 <__swrite>:
 8009f28:	2880030b 	ldhu	r2,12(r5)
 8009f2c:	defffb04 	addi	sp,sp,-20
 8009f30:	dcc00315 	stw	r19,12(sp)
 8009f34:	dc800215 	stw	r18,8(sp)
 8009f38:	dc400115 	stw	r17,4(sp)
 8009f3c:	dc000015 	stw	r16,0(sp)
 8009f40:	dfc00415 	stw	ra,16(sp)
 8009f44:	10c0400c 	andi	r3,r2,256
 8009f48:	2821883a 	mov	r16,r5
 8009f4c:	2023883a 	mov	r17,r4
 8009f50:	3025883a 	mov	r18,r6
 8009f54:	3827883a 	mov	r19,r7
 8009f58:	2940038f 	ldh	r5,14(r5)
 8009f5c:	18000c1e 	bne	r3,zero,8009f90 <__swrite+0x68>
 8009f60:	10bbffcc 	andi	r2,r2,61439
 8009f64:	980f883a 	mov	r7,r19
 8009f68:	900d883a 	mov	r6,r18
 8009f6c:	8809883a 	mov	r4,r17
 8009f70:	8080030d 	sth	r2,12(r16)
 8009f74:	dfc00417 	ldw	ra,16(sp)
 8009f78:	dcc00317 	ldw	r19,12(sp)
 8009f7c:	dc800217 	ldw	r18,8(sp)
 8009f80:	dc400117 	ldw	r17,4(sp)
 8009f84:	dc000017 	ldw	r16,0(sp)
 8009f88:	dec00504 	addi	sp,sp,20
 8009f8c:	800b6881 	jmpi	800b688 <_write_r>
 8009f90:	01c00084 	movi	r7,2
 8009f94:	000d883a 	mov	r6,zero
 8009f98:	800bc500 	call	800bc50 <_lseek_r>
 8009f9c:	8080030b 	ldhu	r2,12(r16)
 8009fa0:	8140038f 	ldh	r5,14(r16)
 8009fa4:	003fee06 	br	8009f60 <__swrite+0x38>

08009fa8 <__sseek>:
 8009fa8:	defffe04 	addi	sp,sp,-8
 8009fac:	dc000015 	stw	r16,0(sp)
 8009fb0:	2821883a 	mov	r16,r5
 8009fb4:	2940038f 	ldh	r5,14(r5)
 8009fb8:	dfc00115 	stw	ra,4(sp)
 8009fbc:	800bc500 	call	800bc50 <_lseek_r>
 8009fc0:	10ffffd8 	cmpnei	r3,r2,-1
 8009fc4:	18000826 	beq	r3,zero,8009fe8 <__sseek+0x40>
 8009fc8:	80c0030b 	ldhu	r3,12(r16)
 8009fcc:	80801415 	stw	r2,80(r16)
 8009fd0:	18c40014 	ori	r3,r3,4096
 8009fd4:	80c0030d 	sth	r3,12(r16)
 8009fd8:	dfc00117 	ldw	ra,4(sp)
 8009fdc:	dc000017 	ldw	r16,0(sp)
 8009fe0:	dec00204 	addi	sp,sp,8
 8009fe4:	f800283a 	ret
 8009fe8:	80c0030b 	ldhu	r3,12(r16)
 8009fec:	18fbffcc 	andi	r3,r3,61439
 8009ff0:	80c0030d 	sth	r3,12(r16)
 8009ff4:	dfc00117 	ldw	ra,4(sp)
 8009ff8:	dc000017 	ldw	r16,0(sp)
 8009ffc:	dec00204 	addi	sp,sp,8
 800a000:	f800283a 	ret

0800a004 <__sclose>:
 800a004:	2940038f 	ldh	r5,14(r5)
 800a008:	800b6ec1 	jmpi	800b6ec <_close_r>

0800a00c <__sprint_r.part.0>:
 800a00c:	28801917 	ldw	r2,100(r5)
 800a010:	defff604 	addi	sp,sp,-40
 800a014:	dd000415 	stw	r20,16(sp)
 800a018:	dfc00915 	stw	ra,36(sp)
 800a01c:	df000815 	stw	fp,32(sp)
 800a020:	ddc00715 	stw	r23,28(sp)
 800a024:	dd800615 	stw	r22,24(sp)
 800a028:	dd400515 	stw	r21,20(sp)
 800a02c:	dcc00315 	stw	r19,12(sp)
 800a030:	dc800215 	stw	r18,8(sp)
 800a034:	dc400115 	stw	r17,4(sp)
 800a038:	dc000015 	stw	r16,0(sp)
 800a03c:	1088000c 	andi	r2,r2,8192
 800a040:	3029883a 	mov	r20,r6
 800a044:	10002c26 	beq	r2,zero,800a0f8 <__sprint_r.part.0+0xec>
 800a048:	30800217 	ldw	r2,8(r6)
 800a04c:	2823883a 	mov	r17,r5
 800a050:	2027883a 	mov	r19,r4
 800a054:	35400017 	ldw	r21,0(r6)
 800a058:	05ffff04 	movi	r23,-4
 800a05c:	10002426 	beq	r2,zero,800a0f0 <__sprint_r.part.0+0xe4>
 800a060:	ad800117 	ldw	r22,4(r21)
 800a064:	ac000017 	ldw	r16,0(r21)
 800a068:	b024d0ba 	srli	r18,r22,2
 800a06c:	90001b26 	beq	r18,zero,800a0dc <__sprint_r.part.0+0xd0>
 800a070:	0039883a 	mov	fp,zero
 800a074:	00000206 	br	800a080 <__sprint_r.part.0+0x74>
 800a078:	84000104 	addi	r16,r16,4
 800a07c:	97001626 	beq	r18,fp,800a0d8 <__sprint_r.part.0+0xcc>
 800a080:	81400017 	ldw	r5,0(r16)
 800a084:	880d883a 	mov	r6,r17
 800a088:	9809883a 	mov	r4,r19
 800a08c:	800ba680 	call	800ba68 <_fputwc_r>
 800a090:	10bfffe0 	cmpeqi	r2,r2,-1
 800a094:	e7000044 	addi	fp,fp,1
 800a098:	103ff726 	beq	r2,zero,800a078 <__sprint_r.part.0+0x6c>
 800a09c:	00bfffc4 	movi	r2,-1
 800a0a0:	a0000215 	stw	zero,8(r20)
 800a0a4:	a0000115 	stw	zero,4(r20)
 800a0a8:	dfc00917 	ldw	ra,36(sp)
 800a0ac:	df000817 	ldw	fp,32(sp)
 800a0b0:	ddc00717 	ldw	r23,28(sp)
 800a0b4:	dd800617 	ldw	r22,24(sp)
 800a0b8:	dd400517 	ldw	r21,20(sp)
 800a0bc:	dd000417 	ldw	r20,16(sp)
 800a0c0:	dcc00317 	ldw	r19,12(sp)
 800a0c4:	dc800217 	ldw	r18,8(sp)
 800a0c8:	dc400117 	ldw	r17,4(sp)
 800a0cc:	dc000017 	ldw	r16,0(sp)
 800a0d0:	dec00a04 	addi	sp,sp,40
 800a0d4:	f800283a 	ret
 800a0d8:	a0800217 	ldw	r2,8(r20)
 800a0dc:	b5ec703a 	and	r22,r22,r23
 800a0e0:	1585c83a 	sub	r2,r2,r22
 800a0e4:	a0800215 	stw	r2,8(r20)
 800a0e8:	ad400204 	addi	r21,r21,8
 800a0ec:	103fdc1e 	bne	r2,zero,800a060 <__sprint_r.part.0+0x54>
 800a0f0:	0005883a 	mov	r2,zero
 800a0f4:	003fea06 	br	800a0a0 <__sprint_r.part.0+0x94>
 800a0f8:	80072d00 	call	80072d0 <__sfvwrite_r>
 800a0fc:	003fe806 	br	800a0a0 <__sprint_r.part.0+0x94>

0800a100 <__sprint_r>:
 800a100:	30c00217 	ldw	r3,8(r6)
 800a104:	18000126 	beq	r3,zero,800a10c <__sprint_r+0xc>
 800a108:	800a00c1 	jmpi	800a00c <__sprint_r.part.0>
 800a10c:	30000115 	stw	zero,4(r6)
 800a110:	0005883a 	mov	r2,zero
 800a114:	f800283a 	ret

0800a118 <___vfiprintf_internal_r>:
 800a118:	deffd004 	addi	sp,sp,-192
 800a11c:	df002e15 	stw	fp,184(sp)
 800a120:	dcc02915 	stw	r19,164(sp)
 800a124:	dc802815 	stw	r18,160(sp)
 800a128:	dfc02f15 	stw	ra,188(sp)
 800a12c:	ddc02d15 	stw	r23,180(sp)
 800a130:	dd802c15 	stw	r22,176(sp)
 800a134:	dd402b15 	stw	r21,172(sp)
 800a138:	dd002a15 	stw	r20,168(sp)
 800a13c:	dc402715 	stw	r17,156(sp)
 800a140:	dc002615 	stw	r16,152(sp)
 800a144:	d9c00315 	stw	r7,12(sp)
 800a148:	2027883a 	mov	r19,r4
 800a14c:	2825883a 	mov	r18,r5
 800a150:	3039883a 	mov	fp,r6
 800a154:	20000226 	beq	r4,zero,800a160 <___vfiprintf_internal_r+0x48>
 800a158:	20800e17 	ldw	r2,56(r4)
 800a15c:	1002ba26 	beq	r2,zero,800ac48 <___vfiprintf_internal_r+0xb30>
 800a160:	9080030b 	ldhu	r2,12(r18)
 800a164:	10c8000c 	andi	r3,r2,8192
 800a168:	1800061e 	bne	r3,zero,800a184 <___vfiprintf_internal_r+0x6c>
 800a16c:	90c01917 	ldw	r3,100(r18)
 800a170:	0137ffc4 	movi	r4,-8193
 800a174:	10880014 	ori	r2,r2,8192
 800a178:	1906703a 	and	r3,r3,r4
 800a17c:	9080030d 	sth	r2,12(r18)
 800a180:	90c01915 	stw	r3,100(r18)
 800a184:	10c0020c 	andi	r3,r2,8
 800a188:	18009426 	beq	r3,zero,800a3dc <___vfiprintf_internal_r+0x2c4>
 800a18c:	90c00417 	ldw	r3,16(r18)
 800a190:	18009226 	beq	r3,zero,800a3dc <___vfiprintf_internal_r+0x2c4>
 800a194:	1080068c 	andi	r2,r2,26
 800a198:	10800298 	cmpnei	r2,r2,10
 800a19c:	10009726 	beq	r2,zero,800a3fc <___vfiprintf_internal_r+0x2e4>
 800a1a0:	dc401604 	addi	r17,sp,88
 800a1a4:	dc400915 	stw	r17,36(sp)
 800a1a8:	d8000b15 	stw	zero,44(sp)
 800a1ac:	d8000a15 	stw	zero,40(sp)
 800a1b0:	8811883a 	mov	r8,r17
 800a1b4:	d8000415 	stw	zero,16(sp)
 800a1b8:	d8000015 	stw	zero,0(sp)
 800a1bc:	e0800007 	ldb	r2,0(fp)
 800a1c0:	1000a226 	beq	r2,zero,800a44c <___vfiprintf_internal_r+0x334>
 800a1c4:	10800960 	cmpeqi	r2,r2,37
 800a1c8:	1003eb1e 	bne	r2,zero,800b178 <___vfiprintf_internal_r+0x1060>
 800a1cc:	e021883a 	mov	r16,fp
 800a1d0:	00000206 	br	800a1dc <___vfiprintf_internal_r+0xc4>
 800a1d4:	18009226 	beq	r3,zero,800a420 <___vfiprintf_internal_r+0x308>
 800a1d8:	a021883a 	mov	r16,r20
 800a1dc:	80800047 	ldb	r2,1(r16)
 800a1e0:	85000044 	addi	r20,r16,1
 800a1e4:	10c00958 	cmpnei	r3,r2,37
 800a1e8:	103ffa1e 	bne	r2,zero,800a1d4 <___vfiprintf_internal_r+0xbc>
 800a1ec:	a72bc83a 	sub	r21,r20,fp
 800a1f0:	a8009626 	beq	r21,zero,800a44c <___vfiprintf_internal_r+0x334>
 800a1f4:	d8c00b17 	ldw	r3,44(sp)
 800a1f8:	d8800a17 	ldw	r2,40(sp)
 800a1fc:	47000015 	stw	fp,0(r8)
 800a200:	a8c7883a 	add	r3,r21,r3
 800a204:	10800044 	addi	r2,r2,1
 800a208:	d8800a15 	stw	r2,40(sp)
 800a20c:	45400115 	stw	r21,4(r8)
 800a210:	d8c00b15 	stw	r3,44(sp)
 800a214:	10800208 	cmpgei	r2,r2,8
 800a218:	1000841e 	bne	r2,zero,800a42c <___vfiprintf_internal_r+0x314>
 800a21c:	42000204 	addi	r8,r8,8
 800a220:	d8c00017 	ldw	r3,0(sp)
 800a224:	80800047 	ldb	r2,1(r16)
 800a228:	1d47883a 	add	r3,r3,r21
 800a22c:	d8c00015 	stw	r3,0(sp)
 800a230:	10008626 	beq	r2,zero,800a44c <___vfiprintf_internal_r+0x334>
 800a234:	a0800047 	ldb	r2,1(r20)
 800a238:	a7000044 	addi	fp,r20,1
 800a23c:	d8000845 	stb	zero,33(sp)
 800a240:	000b883a 	mov	r5,zero
 800a244:	000d883a 	mov	r6,zero
 800a248:	027fffc4 	movi	r9,-1
 800a24c:	0021883a 	mov	r16,zero
 800a250:	0019883a 	mov	r12,zero
 800a254:	e7000044 	addi	fp,fp,1
 800a258:	10fff804 	addi	r3,r2,-32
 800a25c:	19001668 	cmpgeui	r4,r3,89
 800a260:	20009e1e 	bne	r4,zero,800a4dc <___vfiprintf_internal_r+0x3c4>
 800a264:	180690ba 	slli	r3,r3,2
 800a268:	01020074 	movhi	r4,2049
 800a26c:	1909883a 	add	r4,r3,r4
 800a270:	20e89e17 	ldw	r3,-23944(r4)
 800a274:	1800683a 	jmp	r3
 800a278:	0800a5b4 	orhi	zero,at,662
 800a27c:	0800a4dc 	xori	zero,at,659
 800a280:	0800a4dc 	xori	zero,at,659
 800a284:	0800a5a8 	cmpgeui	zero,at,662
 800a288:	0800a4dc 	xori	zero,at,659
 800a28c:	0800a4dc 	xori	zero,at,659
 800a290:	0800a4dc 	xori	zero,at,659
 800a294:	0800a4dc 	xori	zero,at,659
 800a298:	0800a4dc 	xori	zero,at,659
 800a29c:	0800a4dc 	xori	zero,at,659
 800a2a0:	0800a580 	call	800a58 <__alt_mem_onchip_memory2_0+0x800a58>
 800a2a4:	0800a570 	cmpltui	zero,at,661
 800a2a8:	0800a4dc 	xori	zero,at,659
 800a2ac:	0800a558 	cmpnei	zero,at,661
 800a2b0:	0800a50c 	andi	zero,at,660
 800a2b4:	0800a4dc 	xori	zero,at,659
 800a2b8:	0800a500 	call	800a50 <__alt_mem_onchip_memory2_0+0x800a50>
 800a2bc:	0800a4a4 	muli	zero,at,658
 800a2c0:	0800a4a4 	muli	zero,at,658
 800a2c4:	0800a4a4 	muli	zero,at,658
 800a2c8:	0800a4a4 	muli	zero,at,658
 800a2cc:	0800a4a4 	muli	zero,at,658
 800a2d0:	0800a4a4 	muli	zero,at,658
 800a2d4:	0800a4a4 	muli	zero,at,658
 800a2d8:	0800a4a4 	muli	zero,at,658
 800a2dc:	0800a4a4 	muli	zero,at,658
 800a2e0:	0800a4dc 	xori	zero,at,659
 800a2e4:	0800a4dc 	xori	zero,at,659
 800a2e8:	0800a4dc 	xori	zero,at,659
 800a2ec:	0800a4dc 	xori	zero,at,659
 800a2f0:	0800a4dc 	xori	zero,at,659
 800a2f4:	0800a4dc 	xori	zero,at,659
 800a2f8:	0800a4dc 	xori	zero,at,659
 800a2fc:	0800a4dc 	xori	zero,at,659
 800a300:	0800a4dc 	xori	zero,at,659
 800a304:	0800a4dc 	xori	zero,at,659
 800a308:	0800ab70 	cmpltui	zero,at,685
 800a30c:	0800a4dc 	xori	zero,at,659
 800a310:	0800a4dc 	xori	zero,at,659
 800a314:	0800a4dc 	xori	zero,at,659
 800a318:	0800a4dc 	xori	zero,at,659
 800a31c:	0800a4dc 	xori	zero,at,659
 800a320:	0800a4dc 	xori	zero,at,659
 800a324:	0800a4dc 	xori	zero,at,659
 800a328:	0800a4dc 	xori	zero,at,659
 800a32c:	0800a4dc 	xori	zero,at,659
 800a330:	0800a4dc 	xori	zero,at,659
 800a334:	0800ab08 	cmpgei	zero,at,684
 800a338:	0800a4dc 	xori	zero,at,659
 800a33c:	0800a4dc 	xori	zero,at,659
 800a340:	0800a4dc 	xori	zero,at,659
 800a344:	0800a4dc 	xori	zero,at,659
 800a348:	0800a4dc 	xori	zero,at,659
 800a34c:	0800ab3c 	xorhi	zero,at,684
 800a350:	0800a4dc 	xori	zero,at,659
 800a354:	0800a4dc 	xori	zero,at,659
 800a358:	0800a70c 	andi	zero,at,668
 800a35c:	0800a4dc 	xori	zero,at,659
 800a360:	0800a4dc 	xori	zero,at,659
 800a364:	0800a4dc 	xori	zero,at,659
 800a368:	0800a4dc 	xori	zero,at,659
 800a36c:	0800a4dc 	xori	zero,at,659
 800a370:	0800a4dc 	xori	zero,at,659
 800a374:	0800a4dc 	xori	zero,at,659
 800a378:	0800a4dc 	xori	zero,at,659
 800a37c:	0800a4dc 	xori	zero,at,659
 800a380:	0800a4dc 	xori	zero,at,659
 800a384:	0800a8a8 	cmpgeui	zero,at,674
 800a388:	0800a834 	orhi	zero,at,672
 800a38c:	0800a4dc 	xori	zero,at,659
 800a390:	0800a4dc 	xori	zero,at,659
 800a394:	0800a4dc 	xori	zero,at,659
 800a398:	0800a63c 	xorhi	zero,at,664
 800a39c:	0800a834 	orhi	zero,at,672
 800a3a0:	0800a4dc 	xori	zero,at,659
 800a3a4:	0800a4dc 	xori	zero,at,659
 800a3a8:	0800a628 	cmpgeui	zero,at,664
 800a3ac:	0800a4dc 	xori	zero,at,659
 800a3b0:	0800a7f4 	orhi	zero,at,671
 800a3b4:	0800a6cc 	andi	zero,at,667
 800a3b8:	0800a654 	ori	zero,at,665
 800a3bc:	0800a648 	cmpgei	zero,at,665
 800a3c0:	0800a4dc 	xori	zero,at,659
 800a3c4:	0800a794 	ori	zero,at,670
 800a3c8:	0800a4dc 	xori	zero,at,659
 800a3cc:	0800a754 	ori	zero,at,669
 800a3d0:	0800a4dc 	xori	zero,at,659
 800a3d4:	0800a4dc 	xori	zero,at,659
 800a3d8:	0800a5e0 	cmpeqi	zero,at,663
 800a3dc:	900b883a 	mov	r5,r18
 800a3e0:	9809883a 	mov	r4,r19
 800a3e4:	8004e580 	call	8004e58 <__swsetup_r>
 800a3e8:	10040b1e 	bne	r2,zero,800b418 <___vfiprintf_internal_r+0x1300>
 800a3ec:	9080030b 	ldhu	r2,12(r18)
 800a3f0:	1080068c 	andi	r2,r2,26
 800a3f4:	10800298 	cmpnei	r2,r2,10
 800a3f8:	103f691e 	bne	r2,zero,800a1a0 <___vfiprintf_internal_r+0x88>
 800a3fc:	9080038f 	ldh	r2,14(r18)
 800a400:	103f6716 	blt	r2,zero,800a1a0 <___vfiprintf_internal_r+0x88>
 800a404:	d9c00317 	ldw	r7,12(sp)
 800a408:	e00d883a 	mov	r6,fp
 800a40c:	900b883a 	mov	r5,r18
 800a410:	9809883a 	mov	r4,r19
 800a414:	800b46c0 	call	800b46c <__sbprintf>
 800a418:	d8800015 	stw	r2,0(sp)
 800a41c:	00001406 	br	800a470 <___vfiprintf_internal_r+0x358>
 800a420:	a72bc83a 	sub	r21,r20,fp
 800a424:	a83f8326 	beq	r21,zero,800a234 <___vfiprintf_internal_r+0x11c>
 800a428:	003f7206 	br	800a1f4 <___vfiprintf_internal_r+0xdc>
 800a42c:	18032f26 	beq	r3,zero,800b0ec <___vfiprintf_internal_r+0xfd4>
 800a430:	d9800904 	addi	r6,sp,36
 800a434:	900b883a 	mov	r5,r18
 800a438:	9809883a 	mov	r4,r19
 800a43c:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800a440:	1000081e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800a444:	8811883a 	mov	r8,r17
 800a448:	003f7506 	br	800a220 <___vfiprintf_internal_r+0x108>
 800a44c:	d8800b17 	ldw	r2,44(sp)
 800a450:	10000426 	beq	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800a454:	d9800904 	addi	r6,sp,36
 800a458:	900b883a 	mov	r5,r18
 800a45c:	9809883a 	mov	r4,r19
 800a460:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800a464:	9080030b 	ldhu	r2,12(r18)
 800a468:	1080100c 	andi	r2,r2,64
 800a46c:	1003ea1e 	bne	r2,zero,800b418 <___vfiprintf_internal_r+0x1300>
 800a470:	d8800017 	ldw	r2,0(sp)
 800a474:	dfc02f17 	ldw	ra,188(sp)
 800a478:	df002e17 	ldw	fp,184(sp)
 800a47c:	ddc02d17 	ldw	r23,180(sp)
 800a480:	dd802c17 	ldw	r22,176(sp)
 800a484:	dd402b17 	ldw	r21,172(sp)
 800a488:	dd002a17 	ldw	r20,168(sp)
 800a48c:	dcc02917 	ldw	r19,164(sp)
 800a490:	dc802817 	ldw	r18,160(sp)
 800a494:	dc402717 	ldw	r17,156(sp)
 800a498:	dc002617 	ldw	r16,152(sp)
 800a49c:	dec03004 	addi	sp,sp,192
 800a4a0:	f800283a 	ret
 800a4a4:	0021883a 	mov	r16,zero
 800a4a8:	113ff404 	addi	r4,r2,-48
 800a4ac:	800690ba 	slli	r3,r16,2
 800a4b0:	e7000044 	addi	fp,fp,1
 800a4b4:	e0bfffc7 	ldb	r2,-1(fp)
 800a4b8:	1c21883a 	add	r16,r3,r16
 800a4bc:	8421883a 	add	r16,r16,r16
 800a4c0:	2421883a 	add	r16,r4,r16
 800a4c4:	113ff404 	addi	r4,r2,-48
 800a4c8:	20c002b0 	cmpltui	r3,r4,10
 800a4cc:	183ff71e 	bne	r3,zero,800a4ac <___vfiprintf_internal_r+0x394>
 800a4d0:	10fff804 	addi	r3,r2,-32
 800a4d4:	19001668 	cmpgeui	r4,r3,89
 800a4d8:	203f6226 	beq	r4,zero,800a264 <___vfiprintf_internal_r+0x14c>
 800a4dc:	29403fcc 	andi	r5,r5,255
 800a4e0:	2803ab1e 	bne	r5,zero,800b390 <___vfiprintf_internal_r+0x1278>
 800a4e4:	103fd926 	beq	r2,zero,800a44c <___vfiprintf_internal_r+0x334>
 800a4e8:	d8800c05 	stb	r2,48(sp)
 800a4ec:	d8000845 	stb	zero,33(sp)
 800a4f0:	05400044 	movi	r21,1
 800a4f4:	05800044 	movi	r22,1
 800a4f8:	ddc00c04 	addi	r23,sp,48
 800a4fc:	0000f306 	br	800a8cc <___vfiprintf_internal_r+0x7b4>
 800a500:	63002014 	ori	r12,r12,128
 800a504:	e0800007 	ldb	r2,0(fp)
 800a508:	003f5206 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a50c:	e0800007 	ldb	r2,0(fp)
 800a510:	e0c00044 	addi	r3,fp,1
 800a514:	11000aa0 	cmpeqi	r4,r2,42
 800a518:	2003c21e 	bne	r4,zero,800b424 <___vfiprintf_internal_r+0x130c>
 800a51c:	113ff404 	addi	r4,r2,-48
 800a520:	21c002b0 	cmpltui	r7,r4,10
 800a524:	1839883a 	mov	fp,r3
 800a528:	0013883a 	mov	r9,zero
 800a52c:	383f4a26 	beq	r7,zero,800a258 <___vfiprintf_internal_r+0x140>
 800a530:	480690ba 	slli	r3,r9,2
 800a534:	e7000044 	addi	fp,fp,1
 800a538:	e0bfffc7 	ldb	r2,-1(fp)
 800a53c:	1a53883a 	add	r9,r3,r9
 800a540:	4a53883a 	add	r9,r9,r9
 800a544:	4913883a 	add	r9,r9,r4
 800a548:	113ff404 	addi	r4,r2,-48
 800a54c:	20c002b0 	cmpltui	r3,r4,10
 800a550:	183ff71e 	bne	r3,zero,800a530 <___vfiprintf_internal_r+0x418>
 800a554:	003f4006 	br	800a258 <___vfiprintf_internal_r+0x140>
 800a558:	e0800003 	ldbu	r2,0(fp)
 800a55c:	10803fcc 	andi	r2,r2,255
 800a560:	1080201c 	xori	r2,r2,128
 800a564:	63000114 	ori	r12,r12,4
 800a568:	10bfe004 	addi	r2,r2,-128
 800a56c:	003f3906 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a570:	01400044 	movi	r5,1
 800a574:	01800ac4 	movi	r6,43
 800a578:	e0800007 	ldb	r2,0(fp)
 800a57c:	003f3506 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a580:	d8800317 	ldw	r2,12(sp)
 800a584:	14000017 	ldw	r16,0(r2)
 800a588:	15c00104 	addi	r23,r2,4
 800a58c:	e0800003 	ldbu	r2,0(fp)
 800a590:	80031416 	blt	r16,zero,800b1e4 <___vfiprintf_internal_r+0x10cc>
 800a594:	ddc00315 	stw	r23,12(sp)
 800a598:	10803fcc 	andi	r2,r2,255
 800a59c:	1080201c 	xori	r2,r2,128
 800a5a0:	10bfe004 	addi	r2,r2,-128
 800a5a4:	003f2b06 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a5a8:	63000054 	ori	r12,r12,1
 800a5ac:	e0800007 	ldb	r2,0(fp)
 800a5b0:	003f2806 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a5b4:	30c03fcc 	andi	r3,r6,255
 800a5b8:	18c0201c 	xori	r3,r3,128
 800a5bc:	18ffe004 	addi	r3,r3,-128
 800a5c0:	e0800003 	ldbu	r2,0(fp)
 800a5c4:	183ff41e 	bne	r3,zero,800a598 <___vfiprintf_internal_r+0x480>
 800a5c8:	10803fcc 	andi	r2,r2,255
 800a5cc:	1080201c 	xori	r2,r2,128
 800a5d0:	01400044 	movi	r5,1
 800a5d4:	01800804 	movi	r6,32
 800a5d8:	10bfe004 	addi	r2,r2,-128
 800a5dc:	003f1d06 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a5e0:	29403fcc 	andi	r5,r5,255
 800a5e4:	2803741e 	bne	r5,zero,800b3b8 <___vfiprintf_internal_r+0x12a0>
 800a5e8:	00c20074 	movhi	r3,2049
 800a5ec:	18c7bc04 	addi	r3,r3,7920
 800a5f0:	d8c00415 	stw	r3,16(sp)
 800a5f4:	60c0080c 	andi	r3,r12,32
 800a5f8:	18004b26 	beq	r3,zero,800a728 <___vfiprintf_internal_r+0x610>
 800a5fc:	d8c00317 	ldw	r3,12(sp)
 800a600:	1d400017 	ldw	r21,0(r3)
 800a604:	1d800117 	ldw	r22,4(r3)
 800a608:	18c00204 	addi	r3,r3,8
 800a60c:	d8c00315 	stw	r3,12(sp)
 800a610:	60c0004c 	andi	r3,r12,1
 800a614:	18000226 	beq	r3,zero,800a620 <___vfiprintf_internal_r+0x508>
 800a618:	ad86b03a 	or	r3,r21,r22
 800a61c:	1802df1e 	bne	r3,zero,800b19c <___vfiprintf_internal_r+0x1084>
 800a620:	00800084 	movi	r2,2
 800a624:	00001906 	br	800a68c <___vfiprintf_internal_r+0x574>
 800a628:	e0800007 	ldb	r2,0(fp)
 800a62c:	10c01b18 	cmpnei	r3,r2,108
 800a630:	18033026 	beq	r3,zero,800b2f4 <___vfiprintf_internal_r+0x11dc>
 800a634:	63000414 	ori	r12,r12,16
 800a638:	003f0606 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a63c:	63001014 	ori	r12,r12,64
 800a640:	e0800007 	ldb	r2,0(fp)
 800a644:	003f0306 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a648:	63000814 	ori	r12,r12,32
 800a64c:	e0800007 	ldb	r2,0(fp)
 800a650:	003f0006 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800a654:	d8c00317 	ldw	r3,12(sp)
 800a658:	00800c04 	movi	r2,48
 800a65c:	d8800885 	stb	r2,34(sp)
 800a660:	00801e04 	movi	r2,120
 800a664:	01020074 	movhi	r4,2049
 800a668:	d88008c5 	stb	r2,35(sp)
 800a66c:	1d400017 	ldw	r21,0(r3)
 800a670:	18800104 	addi	r2,r3,4
 800a674:	d8800315 	stw	r2,12(sp)
 800a678:	2087bc04 	addi	r2,r4,7920
 800a67c:	d8800415 	stw	r2,16(sp)
 800a680:	002d883a 	mov	r22,zero
 800a684:	63000094 	ori	r12,r12,2
 800a688:	00800084 	movi	r2,2
 800a68c:	d8000845 	stb	zero,33(sp)
 800a690:	48ffffe0 	cmpeqi	r3,r9,-1
 800a694:	001b883a 	mov	r13,zero
 800a698:	18014c1e 	bne	r3,zero,800abcc <___vfiprintf_internal_r+0xab4>
 800a69c:	053fdfc4 	movi	r20,-129
 800a6a0:	ad86b03a 	or	r3,r21,r22
 800a6a4:	6528703a 	and	r20,r12,r20
 800a6a8:	1802411e 	bne	r3,zero,800afb0 <___vfiprintf_internal_r+0xe98>
 800a6ac:	48030d1e 	bne	r9,zero,800b2e4 <___vfiprintf_internal_r+0x11cc>
 800a6b0:	1000791e 	bne	r2,zero,800a898 <___vfiprintf_internal_r+0x780>
 800a6b4:	6580004c 	andi	r22,r12,1
 800a6b8:	b002b126 	beq	r22,zero,800b180 <___vfiprintf_internal_r+0x1068>
 800a6bc:	00800c04 	movi	r2,48
 800a6c0:	d88015c5 	stb	r2,87(sp)
 800a6c4:	ddc015c4 	addi	r23,sp,87
 800a6c8:	00017e06 	br	800acc4 <___vfiprintf_internal_r+0xbac>
 800a6cc:	29403fcc 	andi	r5,r5,255
 800a6d0:	2803461e 	bne	r5,zero,800b3ec <___vfiprintf_internal_r+0x12d4>
 800a6d4:	6080080c 	andi	r2,r12,32
 800a6d8:	10016b1e 	bne	r2,zero,800ac88 <___vfiprintf_internal_r+0xb70>
 800a6dc:	d8800317 	ldw	r2,12(sp)
 800a6e0:	60c0040c 	andi	r3,r12,16
 800a6e4:	15400017 	ldw	r21,0(r2)
 800a6e8:	10800104 	addi	r2,r2,4
 800a6ec:	18010d1e 	bne	r3,zero,800ab24 <___vfiprintf_internal_r+0xa0c>
 800a6f0:	60c0100c 	andi	r3,r12,64
 800a6f4:	18031326 	beq	r3,zero,800b344 <___vfiprintf_internal_r+0x122c>
 800a6f8:	d8800315 	stw	r2,12(sp)
 800a6fc:	ad7fffcc 	andi	r21,r21,65535
 800a700:	002d883a 	mov	r22,zero
 800a704:	0005883a 	mov	r2,zero
 800a708:	003fe006 	br	800a68c <___vfiprintf_internal_r+0x574>
 800a70c:	29403fcc 	andi	r5,r5,255
 800a710:	2803251e 	bne	r5,zero,800b3a8 <___vfiprintf_internal_r+0x1290>
 800a714:	00c20074 	movhi	r3,2049
 800a718:	18c7b704 	addi	r3,r3,7900
 800a71c:	d8c00415 	stw	r3,16(sp)
 800a720:	60c0080c 	andi	r3,r12,32
 800a724:	183fb51e 	bne	r3,zero,800a5fc <___vfiprintf_internal_r+0x4e4>
 800a728:	d9000317 	ldw	r4,12(sp)
 800a72c:	60c0040c 	andi	r3,r12,16
 800a730:	25400017 	ldw	r21,0(r4)
 800a734:	21000104 	addi	r4,r4,4
 800a738:	d9000315 	stw	r4,12(sp)
 800a73c:	18026e1e 	bne	r3,zero,800b0f8 <___vfiprintf_internal_r+0xfe0>
 800a740:	60c0100c 	andi	r3,r12,64
 800a744:	18026c26 	beq	r3,zero,800b0f8 <___vfiprintf_internal_r+0xfe0>
 800a748:	ad7fffcc 	andi	r21,r21,65535
 800a74c:	002d883a 	mov	r22,zero
 800a750:	003faf06 	br	800a610 <___vfiprintf_internal_r+0x4f8>
 800a754:	29403fcc 	andi	r5,r5,255
 800a758:	2803151e 	bne	r5,zero,800b3b0 <___vfiprintf_internal_r+0x1298>
 800a75c:	6080080c 	andi	r2,r12,32
 800a760:	10013b1e 	bne	r2,zero,800ac50 <___vfiprintf_internal_r+0xb38>
 800a764:	d8800317 	ldw	r2,12(sp)
 800a768:	60c0040c 	andi	r3,r12,16
 800a76c:	15400017 	ldw	r21,0(r2)
 800a770:	10800104 	addi	r2,r2,4
 800a774:	1800f81e 	bne	r3,zero,800ab58 <___vfiprintf_internal_r+0xa40>
 800a778:	60c0100c 	andi	r3,r12,64
 800a77c:	1802ed26 	beq	r3,zero,800b334 <___vfiprintf_internal_r+0x121c>
 800a780:	d8800315 	stw	r2,12(sp)
 800a784:	ad7fffcc 	andi	r21,r21,65535
 800a788:	002d883a 	mov	r22,zero
 800a78c:	00800044 	movi	r2,1
 800a790:	003fbe06 	br	800a68c <___vfiprintf_internal_r+0x574>
 800a794:	d8800317 	ldw	r2,12(sp)
 800a798:	d8000845 	stb	zero,33(sp)
 800a79c:	15c00017 	ldw	r23,0(r2)
 800a7a0:	15000104 	addi	r20,r2,4
 800a7a4:	b802da26 	beq	r23,zero,800b310 <___vfiprintf_internal_r+0x11f8>
 800a7a8:	48bfffe0 	cmpeqi	r2,r9,-1
 800a7ac:	1002901e 	bne	r2,zero,800b1f0 <___vfiprintf_internal_r+0x10d8>
 800a7b0:	480d883a 	mov	r6,r9
 800a7b4:	000b883a 	mov	r5,zero
 800a7b8:	b809883a 	mov	r4,r23
 800a7bc:	da000315 	stw	r8,12(sp)
 800a7c0:	db000215 	stw	r12,8(sp)
 800a7c4:	da400115 	stw	r9,4(sp)
 800a7c8:	80082e40 	call	80082e4 <memchr>
 800a7cc:	da400117 	ldw	r9,4(sp)
 800a7d0:	db000217 	ldw	r12,8(sp)
 800a7d4:	da000317 	ldw	r8,12(sp)
 800a7d8:	1002ef26 	beq	r2,zero,800b398 <___vfiprintf_internal_r+0x1280>
 800a7dc:	15edc83a 	sub	r22,r2,r23
 800a7e0:	b02b883a 	mov	r21,r22
 800a7e4:	b000010e 	bge	r22,zero,800a7ec <___vfiprintf_internal_r+0x6d4>
 800a7e8:	002b883a 	mov	r21,zero
 800a7ec:	dd000315 	stw	r20,12(sp)
 800a7f0:	00003606 	br	800a8cc <___vfiprintf_internal_r+0x7b4>
 800a7f4:	29403fcc 	andi	r5,r5,255
 800a7f8:	2802fa1e 	bne	r5,zero,800b3e4 <___vfiprintf_internal_r+0x12cc>
 800a7fc:	d9000317 	ldw	r4,12(sp)
 800a800:	6080080c 	andi	r2,r12,32
 800a804:	20c00104 	addi	r3,r4,4
 800a808:	10026a1e 	bne	r2,zero,800b1b4 <___vfiprintf_internal_r+0x109c>
 800a80c:	6080040c 	andi	r2,r12,16
 800a810:	1002891e 	bne	r2,zero,800b238 <___vfiprintf_internal_r+0x1120>
 800a814:	6300100c 	andi	r12,r12,64
 800a818:	60028726 	beq	r12,zero,800b238 <___vfiprintf_internal_r+0x1120>
 800a81c:	d8800317 	ldw	r2,12(sp)
 800a820:	d8c00315 	stw	r3,12(sp)
 800a824:	d8c00017 	ldw	r3,0(sp)
 800a828:	10800017 	ldw	r2,0(r2)
 800a82c:	10c0000d 	sth	r3,0(r2)
 800a830:	003e6206 	br	800a1bc <___vfiprintf_internal_r+0xa4>
 800a834:	29403fcc 	andi	r5,r5,255
 800a838:	2802e81e 	bne	r5,zero,800b3dc <___vfiprintf_internal_r+0x12c4>
 800a83c:	6080080c 	andi	r2,r12,32
 800a840:	10010a1e 	bne	r2,zero,800ac6c <___vfiprintf_internal_r+0xb54>
 800a844:	d8800317 	ldw	r2,12(sp)
 800a848:	60c0040c 	andi	r3,r12,16
 800a84c:	10800104 	addi	r2,r2,4
 800a850:	1800ce1e 	bne	r3,zero,800ab8c <___vfiprintf_internal_r+0xa74>
 800a854:	60c0100c 	andi	r3,r12,64
 800a858:	1800cc26 	beq	r3,zero,800ab8c <___vfiprintf_internal_r+0xa74>
 800a85c:	d8c00317 	ldw	r3,12(sp)
 800a860:	d8800315 	stw	r2,12(sp)
 800a864:	1d40000f 	ldh	r21,0(r3)
 800a868:	a82dd7fa 	srai	r22,r21,31
 800a86c:	b005883a 	mov	r2,r22
 800a870:	1000cc16 	blt	r2,zero,800aba4 <___vfiprintf_internal_r+0xa8c>
 800a874:	48bfffd8 	cmpnei	r2,r9,-1
 800a878:	db400843 	ldbu	r13,33(sp)
 800a87c:	10010926 	beq	r2,zero,800aca4 <___vfiprintf_internal_r+0xb8c>
 800a880:	00ffdfc4 	movi	r3,-129
 800a884:	ad84b03a 	or	r2,r21,r22
 800a888:	60d8703a 	and	r12,r12,r3
 800a88c:	1001051e 	bne	r2,zero,800aca4 <___vfiprintf_internal_r+0xb8c>
 800a890:	4801071e 	bne	r9,zero,800acb0 <___vfiprintf_internal_r+0xb98>
 800a894:	6029883a 	mov	r20,r12
 800a898:	0013883a 	mov	r9,zero
 800a89c:	002d883a 	mov	r22,zero
 800a8a0:	882f883a 	mov	r23,r17
 800a8a4:	00010706 	br	800acc4 <___vfiprintf_internal_r+0xbac>
 800a8a8:	d8c00317 	ldw	r3,12(sp)
 800a8ac:	d8000845 	stb	zero,33(sp)
 800a8b0:	05400044 	movi	r21,1
 800a8b4:	18800017 	ldw	r2,0(r3)
 800a8b8:	18c00104 	addi	r3,r3,4
 800a8bc:	d8c00315 	stw	r3,12(sp)
 800a8c0:	d8800c05 	stb	r2,48(sp)
 800a8c4:	05800044 	movi	r22,1
 800a8c8:	ddc00c04 	addi	r23,sp,48
 800a8cc:	6029883a 	mov	r20,r12
 800a8d0:	0013883a 	mov	r9,zero
 800a8d4:	a340008c 	andi	r13,r20,2
 800a8d8:	68000126 	beq	r13,zero,800a8e0 <___vfiprintf_internal_r+0x7c8>
 800a8dc:	ad400084 	addi	r21,r21,2
 800a8e0:	d9000a17 	ldw	r4,40(sp)
 800a8e4:	a300210c 	andi	r12,r20,132
 800a8e8:	d8800b17 	ldw	r2,44(sp)
 800a8ec:	21800044 	addi	r6,r4,1
 800a8f0:	300b883a 	mov	r5,r6
 800a8f4:	6000021e 	bne	r12,zero,800a900 <___vfiprintf_internal_r+0x7e8>
 800a8f8:	8547c83a 	sub	r3,r16,r21
 800a8fc:	00c1ae16 	blt	zero,r3,800afb8 <___vfiprintf_internal_r+0xea0>
 800a900:	d9800847 	ldb	r6,33(sp)
 800a904:	40c00204 	addi	r3,r8,8
 800a908:	30000d26 	beq	r6,zero,800a940 <___vfiprintf_internal_r+0x828>
 800a90c:	d9000844 	addi	r4,sp,33
 800a910:	10800044 	addi	r2,r2,1
 800a914:	41000015 	stw	r4,0(r8)
 800a918:	01000044 	movi	r4,1
 800a91c:	41000115 	stw	r4,4(r8)
 800a920:	d8800b15 	stw	r2,44(sp)
 800a924:	d9400a15 	stw	r5,40(sp)
 800a928:	29000208 	cmpgei	r4,r5,8
 800a92c:	2001831e 	bne	r4,zero,800af3c <___vfiprintf_internal_r+0xe24>
 800a930:	2809883a 	mov	r4,r5
 800a934:	1811883a 	mov	r8,r3
 800a938:	29400044 	addi	r5,r5,1
 800a93c:	18c00204 	addi	r3,r3,8
 800a940:	68001826 	beq	r13,zero,800a9a4 <___vfiprintf_internal_r+0x88c>
 800a944:	d9000884 	addi	r4,sp,34
 800a948:	10800084 	addi	r2,r2,2
 800a94c:	41000015 	stw	r4,0(r8)
 800a950:	01000084 	movi	r4,2
 800a954:	41000115 	stw	r4,4(r8)
 800a958:	d8800b15 	stw	r2,44(sp)
 800a95c:	d9400a15 	stw	r5,40(sp)
 800a960:	29000208 	cmpgei	r4,r5,8
 800a964:	20018d26 	beq	r4,zero,800af9c <___vfiprintf_internal_r+0xe84>
 800a968:	1001ed26 	beq	r2,zero,800b120 <___vfiprintf_internal_r+0x1008>
 800a96c:	d9800904 	addi	r6,sp,36
 800a970:	900b883a 	mov	r5,r18
 800a974:	9809883a 	mov	r4,r19
 800a978:	da400215 	stw	r9,8(sp)
 800a97c:	db000115 	stw	r12,4(sp)
 800a980:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800a984:	103eb71e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800a988:	d9000a17 	ldw	r4,40(sp)
 800a98c:	d8800b17 	ldw	r2,44(sp)
 800a990:	da400217 	ldw	r9,8(sp)
 800a994:	db000117 	ldw	r12,4(sp)
 800a998:	d8c01804 	addi	r3,sp,96
 800a99c:	21400044 	addi	r5,r4,1
 800a9a0:	8811883a 	mov	r8,r17
 800a9a4:	63002018 	cmpnei	r12,r12,128
 800a9a8:	6000e326 	beq	r12,zero,800ad38 <___vfiprintf_internal_r+0xc20>
 800a9ac:	4d93c83a 	sub	r9,r9,r22
 800a9b0:	02412216 	blt	zero,r9,800ae3c <___vfiprintf_internal_r+0xd24>
 800a9b4:	b085883a 	add	r2,r22,r2
 800a9b8:	d9400a15 	stw	r5,40(sp)
 800a9bc:	45c00015 	stw	r23,0(r8)
 800a9c0:	45800115 	stw	r22,4(r8)
 800a9c4:	d8800b15 	stw	r2,44(sp)
 800a9c8:	29400210 	cmplti	r5,r5,8
 800a9cc:	2800081e 	bne	r5,zero,800a9f0 <___vfiprintf_internal_r+0x8d8>
 800a9d0:	10001426 	beq	r2,zero,800aa24 <___vfiprintf_internal_r+0x90c>
 800a9d4:	d9800904 	addi	r6,sp,36
 800a9d8:	900b883a 	mov	r5,r18
 800a9dc:	9809883a 	mov	r4,r19
 800a9e0:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800a9e4:	103e9f1e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800a9e8:	d8800b17 	ldw	r2,44(sp)
 800a9ec:	8807883a 	mov	r3,r17
 800a9f0:	a500010c 	andi	r20,r20,4
 800a9f4:	a0000226 	beq	r20,zero,800aa00 <___vfiprintf_internal_r+0x8e8>
 800a9f8:	8569c83a 	sub	r20,r16,r21
 800a9fc:	05000f16 	blt	zero,r20,800aa3c <___vfiprintf_internal_r+0x924>
 800aa00:	8540010e 	bge	r16,r21,800aa08 <___vfiprintf_internal_r+0x8f0>
 800aa04:	a821883a 	mov	r16,r21
 800aa08:	d8c00017 	ldw	r3,0(sp)
 800aa0c:	1c07883a 	add	r3,r3,r16
 800aa10:	d8c00015 	stw	r3,0(sp)
 800aa14:	10013f1e 	bne	r2,zero,800af14 <___vfiprintf_internal_r+0xdfc>
 800aa18:	d8000a15 	stw	zero,40(sp)
 800aa1c:	8811883a 	mov	r8,r17
 800aa20:	003de606 	br	800a1bc <___vfiprintf_internal_r+0xa4>
 800aa24:	d8000a15 	stw	zero,40(sp)
 800aa28:	a500010c 	andi	r20,r20,4
 800aa2c:	a0019d26 	beq	r20,zero,800b0a4 <___vfiprintf_internal_r+0xf8c>
 800aa30:	8569c83a 	sub	r20,r16,r21
 800aa34:	05019b0e 	bge	zero,r20,800b0a4 <___vfiprintf_internal_r+0xf8c>
 800aa38:	8807883a 	mov	r3,r17
 800aa3c:	a1000450 	cmplti	r4,r20,17
 800aa40:	01c20074 	movhi	r7,2049
 800aa44:	d9400a17 	ldw	r5,40(sp)
 800aa48:	20026c1e 	bne	r4,zero,800b3fc <___vfiprintf_internal_r+0x12e4>
 800aa4c:	39c81d04 	addi	r7,r7,8308
 800aa50:	05800404 	movi	r22,16
 800aa54:	00000606 	br	800aa70 <___vfiprintf_internal_r+0x958>
 800aa58:	29800084 	addi	r6,r5,2
 800aa5c:	18c00204 	addi	r3,r3,8
 800aa60:	200b883a 	mov	r5,r4
 800aa64:	a53ffc04 	addi	r20,r20,-16
 800aa68:	a1000448 	cmpgei	r4,r20,17
 800aa6c:	20001726 	beq	r4,zero,800aacc <___vfiprintf_internal_r+0x9b4>
 800aa70:	29000044 	addi	r4,r5,1
 800aa74:	10800404 	addi	r2,r2,16
 800aa78:	19c00015 	stw	r7,0(r3)
 800aa7c:	1d800115 	stw	r22,4(r3)
 800aa80:	d8800b15 	stw	r2,44(sp)
 800aa84:	d9000a15 	stw	r4,40(sp)
 800aa88:	21800208 	cmpgei	r6,r4,8
 800aa8c:	303ff226 	beq	r6,zero,800aa58 <___vfiprintf_internal_r+0x940>
 800aa90:	d9800904 	addi	r6,sp,36
 800aa94:	900b883a 	mov	r5,r18
 800aa98:	9809883a 	mov	r4,r19
 800aa9c:	1000a226 	beq	r2,zero,800ad28 <___vfiprintf_internal_r+0xc10>
 800aaa0:	d9c00115 	stw	r7,4(sp)
 800aaa4:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800aaa8:	103e6e1e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800aaac:	d9400a17 	ldw	r5,40(sp)
 800aab0:	a53ffc04 	addi	r20,r20,-16
 800aab4:	a1000448 	cmpgei	r4,r20,17
 800aab8:	d8800b17 	ldw	r2,44(sp)
 800aabc:	8807883a 	mov	r3,r17
 800aac0:	29800044 	addi	r6,r5,1
 800aac4:	d9c00117 	ldw	r7,4(sp)
 800aac8:	203fe91e 	bne	r4,zero,800aa70 <___vfiprintf_internal_r+0x958>
 800aacc:	1505883a 	add	r2,r2,r20
 800aad0:	d9800a15 	stw	r6,40(sp)
 800aad4:	19c00015 	stw	r7,0(r3)
 800aad8:	1d000115 	stw	r20,4(r3)
 800aadc:	d8800b15 	stw	r2,44(sp)
 800aae0:	31800210 	cmplti	r6,r6,8
 800aae4:	303fc61e 	bne	r6,zero,800aa00 <___vfiprintf_internal_r+0x8e8>
 800aae8:	10016e26 	beq	r2,zero,800b0a4 <___vfiprintf_internal_r+0xf8c>
 800aaec:	d9800904 	addi	r6,sp,36
 800aaf0:	900b883a 	mov	r5,r18
 800aaf4:	9809883a 	mov	r4,r19
 800aaf8:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800aafc:	103e591e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800ab00:	d8800b17 	ldw	r2,44(sp)
 800ab04:	003fbe06 	br	800aa00 <___vfiprintf_internal_r+0x8e8>
 800ab08:	29403fcc 	andi	r5,r5,255
 800ab0c:	28022c1e 	bne	r5,zero,800b3c0 <___vfiprintf_internal_r+0x12a8>
 800ab10:	6080080c 	andi	r2,r12,32
 800ab14:	63000414 	ori	r12,r12,16
 800ab18:	10005b1e 	bne	r2,zero,800ac88 <___vfiprintf_internal_r+0xb70>
 800ab1c:	d8800317 	ldw	r2,12(sp)
 800ab20:	10800104 	addi	r2,r2,4
 800ab24:	d8c00317 	ldw	r3,12(sp)
 800ab28:	002d883a 	mov	r22,zero
 800ab2c:	d8800315 	stw	r2,12(sp)
 800ab30:	1d400017 	ldw	r21,0(r3)
 800ab34:	0005883a 	mov	r2,zero
 800ab38:	003ed406 	br	800a68c <___vfiprintf_internal_r+0x574>
 800ab3c:	29403fcc 	andi	r5,r5,255
 800ab40:	2802211e 	bne	r5,zero,800b3c8 <___vfiprintf_internal_r+0x12b0>
 800ab44:	6080080c 	andi	r2,r12,32
 800ab48:	63000414 	ori	r12,r12,16
 800ab4c:	1000401e 	bne	r2,zero,800ac50 <___vfiprintf_internal_r+0xb38>
 800ab50:	d8800317 	ldw	r2,12(sp)
 800ab54:	10800104 	addi	r2,r2,4
 800ab58:	d8c00317 	ldw	r3,12(sp)
 800ab5c:	002d883a 	mov	r22,zero
 800ab60:	d8800315 	stw	r2,12(sp)
 800ab64:	1d400017 	ldw	r21,0(r3)
 800ab68:	00800044 	movi	r2,1
 800ab6c:	003ec706 	br	800a68c <___vfiprintf_internal_r+0x574>
 800ab70:	29403fcc 	andi	r5,r5,255
 800ab74:	28021f1e 	bne	r5,zero,800b3f4 <___vfiprintf_internal_r+0x12dc>
 800ab78:	6080080c 	andi	r2,r12,32
 800ab7c:	63000414 	ori	r12,r12,16
 800ab80:	10003a1e 	bne	r2,zero,800ac6c <___vfiprintf_internal_r+0xb54>
 800ab84:	d8800317 	ldw	r2,12(sp)
 800ab88:	10800104 	addi	r2,r2,4
 800ab8c:	d8c00317 	ldw	r3,12(sp)
 800ab90:	1d400017 	ldw	r21,0(r3)
 800ab94:	d8800315 	stw	r2,12(sp)
 800ab98:	a82dd7fa 	srai	r22,r21,31
 800ab9c:	b005883a 	mov	r2,r22
 800aba0:	103f340e 	bge	r2,zero,800a874 <___vfiprintf_internal_r+0x75c>
 800aba4:	056bc83a 	sub	r21,zero,r21
 800aba8:	a804c03a 	cmpne	r2,r21,zero
 800abac:	05adc83a 	sub	r22,zero,r22
 800abb0:	b0adc83a 	sub	r22,r22,r2
 800abb4:	00800b44 	movi	r2,45
 800abb8:	d8800845 	stb	r2,33(sp)
 800abbc:	48ffffe0 	cmpeqi	r3,r9,-1
 800abc0:	03400b44 	movi	r13,45
 800abc4:	00800044 	movi	r2,1
 800abc8:	183eb426 	beq	r3,zero,800a69c <___vfiprintf_internal_r+0x584>
 800abcc:	10c00060 	cmpeqi	r3,r2,1
 800abd0:	1800341e 	bne	r3,zero,800aca4 <___vfiprintf_internal_r+0xb8c>
 800abd4:	108000a0 	cmpeqi	r2,r2,2
 800abd8:	1000431e 	bne	r2,zero,800ace8 <___vfiprintf_internal_r+0xbd0>
 800abdc:	8807883a 	mov	r3,r17
 800abe0:	00000106 	br	800abe8 <___vfiprintf_internal_r+0xad0>
 800abe4:	b807883a 	mov	r3,r23
 800abe8:	a808d0fa 	srli	r4,r21,3
 800abec:	b00a977a 	slli	r5,r22,29
 800abf0:	b02cd0fa 	srli	r22,r22,3
 800abf4:	ad4001cc 	andi	r21,r21,7
 800abf8:	a8800c04 	addi	r2,r21,48
 800abfc:	292ab03a 	or	r21,r5,r4
 800ac00:	18bfffc5 	stb	r2,-1(r3)
 800ac04:	ad88b03a 	or	r4,r21,r22
 800ac08:	1dffffc4 	addi	r23,r3,-1
 800ac0c:	203ff51e 	bne	r4,zero,800abe4 <___vfiprintf_internal_r+0xacc>
 800ac10:	6100004c 	andi	r4,r12,1
 800ac14:	20004126 	beq	r4,zero,800ad1c <___vfiprintf_internal_r+0xc04>
 800ac18:	10803fcc 	andi	r2,r2,255
 800ac1c:	1080201c 	xori	r2,r2,128
 800ac20:	10bfe004 	addi	r2,r2,-128
 800ac24:	10800c18 	cmpnei	r2,r2,48
 800ac28:	10003c26 	beq	r2,zero,800ad1c <___vfiprintf_internal_r+0xc04>
 800ac2c:	18ffff84 	addi	r3,r3,-2
 800ac30:	00800c04 	movi	r2,48
 800ac34:	b8bfffc5 	stb	r2,-1(r23)
 800ac38:	88edc83a 	sub	r22,r17,r3
 800ac3c:	6029883a 	mov	r20,r12
 800ac40:	182f883a 	mov	r23,r3
 800ac44:	00001f06 	br	800acc4 <___vfiprintf_internal_r+0xbac>
 800ac48:	8006e700 	call	8006e70 <__sinit>
 800ac4c:	003d4406 	br	800a160 <___vfiprintf_internal_r+0x48>
 800ac50:	d8c00317 	ldw	r3,12(sp)
 800ac54:	00800044 	movi	r2,1
 800ac58:	1d400017 	ldw	r21,0(r3)
 800ac5c:	1d800117 	ldw	r22,4(r3)
 800ac60:	18c00204 	addi	r3,r3,8
 800ac64:	d8c00315 	stw	r3,12(sp)
 800ac68:	003e8806 	br	800a68c <___vfiprintf_internal_r+0x574>
 800ac6c:	d8c00317 	ldw	r3,12(sp)
 800ac70:	18800117 	ldw	r2,4(r3)
 800ac74:	1d400017 	ldw	r21,0(r3)
 800ac78:	18c00204 	addi	r3,r3,8
 800ac7c:	d8c00315 	stw	r3,12(sp)
 800ac80:	102d883a 	mov	r22,r2
 800ac84:	003efa06 	br	800a870 <___vfiprintf_internal_r+0x758>
 800ac88:	d8c00317 	ldw	r3,12(sp)
 800ac8c:	0005883a 	mov	r2,zero
 800ac90:	1d400017 	ldw	r21,0(r3)
 800ac94:	1d800117 	ldw	r22,4(r3)
 800ac98:	18c00204 	addi	r3,r3,8
 800ac9c:	d8c00315 	stw	r3,12(sp)
 800aca0:	003e7a06 	br	800a68c <___vfiprintf_internal_r+0x574>
 800aca4:	b0016a1e 	bne	r22,zero,800b250 <___vfiprintf_internal_r+0x1138>
 800aca8:	a88002a8 	cmpgeui	r2,r21,10
 800acac:	1001681e 	bne	r2,zero,800b250 <___vfiprintf_internal_r+0x1138>
 800acb0:	ad400c04 	addi	r21,r21,48
 800acb4:	dd4015c5 	stb	r21,87(sp)
 800acb8:	6029883a 	mov	r20,r12
 800acbc:	05800044 	movi	r22,1
 800acc0:	ddc015c4 	addi	r23,sp,87
 800acc4:	482b883a 	mov	r21,r9
 800acc8:	4d80010e 	bge	r9,r22,800acd0 <___vfiprintf_internal_r+0xbb8>
 800accc:	b02b883a 	mov	r21,r22
 800acd0:	6b403fcc 	andi	r13,r13,255
 800acd4:	6b40201c 	xori	r13,r13,128
 800acd8:	6b7fe004 	addi	r13,r13,-128
 800acdc:	683efd26 	beq	r13,zero,800a8d4 <___vfiprintf_internal_r+0x7bc>
 800ace0:	ad400044 	addi	r21,r21,1
 800ace4:	003efb06 	br	800a8d4 <___vfiprintf_internal_r+0x7bc>
 800ace8:	882f883a 	mov	r23,r17
 800acec:	d9000417 	ldw	r4,16(sp)
 800acf0:	a88003cc 	andi	r2,r21,15
 800acf4:	b006973a 	slli	r3,r22,28
 800acf8:	2085883a 	add	r2,r4,r2
 800acfc:	a82ad13a 	srli	r21,r21,4
 800ad00:	10800003 	ldbu	r2,0(r2)
 800ad04:	b02cd13a 	srli	r22,r22,4
 800ad08:	bdffffc4 	addi	r23,r23,-1
 800ad0c:	1d6ab03a 	or	r21,r3,r21
 800ad10:	b8800005 	stb	r2,0(r23)
 800ad14:	ad84b03a 	or	r2,r21,r22
 800ad18:	103ff41e 	bne	r2,zero,800acec <___vfiprintf_internal_r+0xbd4>
 800ad1c:	8dedc83a 	sub	r22,r17,r23
 800ad20:	6029883a 	mov	r20,r12
 800ad24:	003fe706 	br	800acc4 <___vfiprintf_internal_r+0xbac>
 800ad28:	01800044 	movi	r6,1
 800ad2c:	000b883a 	mov	r5,zero
 800ad30:	8807883a 	mov	r3,r17
 800ad34:	003f4b06 	br	800aa64 <___vfiprintf_internal_r+0x94c>
 800ad38:	8559c83a 	sub	r12,r16,r21
 800ad3c:	033f1b0e 	bge	zero,r12,800a9ac <___vfiprintf_internal_r+0x894>
 800ad40:	61800450 	cmplti	r6,r12,17
 800ad44:	01c20074 	movhi	r7,2049
 800ad48:	3001af1e 	bne	r6,zero,800b408 <___vfiprintf_internal_r+0x12f0>
 800ad4c:	39c81904 	addi	r7,r7,8292
 800ad50:	03400404 	movi	r13,16
 800ad54:	00000606 	br	800ad70 <___vfiprintf_internal_r+0xc58>
 800ad58:	21800084 	addi	r6,r4,2
 800ad5c:	42000204 	addi	r8,r8,8
 800ad60:	1809883a 	mov	r4,r3
 800ad64:	633ffc04 	addi	r12,r12,-16
 800ad68:	60c00448 	cmpgei	r3,r12,17
 800ad6c:	18001c26 	beq	r3,zero,800ade0 <___vfiprintf_internal_r+0xcc8>
 800ad70:	20c00044 	addi	r3,r4,1
 800ad74:	10800404 	addi	r2,r2,16
 800ad78:	41c00015 	stw	r7,0(r8)
 800ad7c:	43400115 	stw	r13,4(r8)
 800ad80:	d8800b15 	stw	r2,44(sp)
 800ad84:	d8c00a15 	stw	r3,40(sp)
 800ad88:	19400208 	cmpgei	r5,r3,8
 800ad8c:	283ff226 	beq	r5,zero,800ad58 <___vfiprintf_internal_r+0xc40>
 800ad90:	d9800904 	addi	r6,sp,36
 800ad94:	900b883a 	mov	r5,r18
 800ad98:	9809883a 	mov	r4,r19
 800ad9c:	10006326 	beq	r2,zero,800af2c <___vfiprintf_internal_r+0xe14>
 800ada0:	d9c00515 	stw	r7,20(sp)
 800ada4:	db000215 	stw	r12,8(sp)
 800ada8:	da400115 	stw	r9,4(sp)
 800adac:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800adb0:	103dac1e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800adb4:	db000217 	ldw	r12,8(sp)
 800adb8:	d9000a17 	ldw	r4,40(sp)
 800adbc:	d8800b17 	ldw	r2,44(sp)
 800adc0:	633ffc04 	addi	r12,r12,-16
 800adc4:	60c00448 	cmpgei	r3,r12,17
 800adc8:	8811883a 	mov	r8,r17
 800adcc:	21800044 	addi	r6,r4,1
 800add0:	d9c00517 	ldw	r7,20(sp)
 800add4:	03400404 	movi	r13,16
 800add8:	da400117 	ldw	r9,4(sp)
 800addc:	183fe41e 	bne	r3,zero,800ad70 <___vfiprintf_internal_r+0xc58>
 800ade0:	43400204 	addi	r13,r8,8
 800ade4:	1305883a 	add	r2,r2,r12
 800ade8:	41c00015 	stw	r7,0(r8)
 800adec:	43000115 	stw	r12,4(r8)
 800adf0:	d8800b15 	stw	r2,44(sp)
 800adf4:	d9800a15 	stw	r6,40(sp)
 800adf8:	30c00208 	cmpgei	r3,r6,8
 800adfc:	1800e226 	beq	r3,zero,800b188 <___vfiprintf_internal_r+0x1070>
 800ae00:	10015726 	beq	r2,zero,800b360 <___vfiprintf_internal_r+0x1248>
 800ae04:	d9800904 	addi	r6,sp,36
 800ae08:	900b883a 	mov	r5,r18
 800ae0c:	9809883a 	mov	r4,r19
 800ae10:	da400115 	stw	r9,4(sp)
 800ae14:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800ae18:	103d921e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800ae1c:	da400117 	ldw	r9,4(sp)
 800ae20:	d9000a17 	ldw	r4,40(sp)
 800ae24:	d8800b17 	ldw	r2,44(sp)
 800ae28:	4d93c83a 	sub	r9,r9,r22
 800ae2c:	d8c01804 	addi	r3,sp,96
 800ae30:	21400044 	addi	r5,r4,1
 800ae34:	8811883a 	mov	r8,r17
 800ae38:	027ede0e 	bge	zero,r9,800a9b4 <___vfiprintf_internal_r+0x89c>
 800ae3c:	49800450 	cmplti	r6,r9,17
 800ae40:	01c20074 	movhi	r7,2049
 800ae44:	3001431e 	bne	r6,zero,800b354 <___vfiprintf_internal_r+0x123c>
 800ae48:	39c81904 	addi	r7,r7,8292
 800ae4c:	03000404 	movi	r12,16
 800ae50:	00000606 	br	800ae6c <___vfiprintf_internal_r+0xd54>
 800ae54:	21400084 	addi	r5,r4,2
 800ae58:	42000204 	addi	r8,r8,8
 800ae5c:	1809883a 	mov	r4,r3
 800ae60:	4a7ffc04 	addi	r9,r9,-16
 800ae64:	48c00448 	cmpgei	r3,r9,17
 800ae68:	18001a26 	beq	r3,zero,800aed4 <___vfiprintf_internal_r+0xdbc>
 800ae6c:	20c00044 	addi	r3,r4,1
 800ae70:	10800404 	addi	r2,r2,16
 800ae74:	41c00015 	stw	r7,0(r8)
 800ae78:	43000115 	stw	r12,4(r8)
 800ae7c:	d8800b15 	stw	r2,44(sp)
 800ae80:	d8c00a15 	stw	r3,40(sp)
 800ae84:	19400208 	cmpgei	r5,r3,8
 800ae88:	283ff226 	beq	r5,zero,800ae54 <___vfiprintf_internal_r+0xd3c>
 800ae8c:	d9800904 	addi	r6,sp,36
 800ae90:	900b883a 	mov	r5,r18
 800ae94:	9809883a 	mov	r4,r19
 800ae98:	10001a26 	beq	r2,zero,800af04 <___vfiprintf_internal_r+0xdec>
 800ae9c:	d9c00215 	stw	r7,8(sp)
 800aea0:	da400115 	stw	r9,4(sp)
 800aea4:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800aea8:	103d6e1e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800aeac:	da400117 	ldw	r9,4(sp)
 800aeb0:	d9000a17 	ldw	r4,40(sp)
 800aeb4:	d8800b17 	ldw	r2,44(sp)
 800aeb8:	4a7ffc04 	addi	r9,r9,-16
 800aebc:	48c00448 	cmpgei	r3,r9,17
 800aec0:	8811883a 	mov	r8,r17
 800aec4:	21400044 	addi	r5,r4,1
 800aec8:	d9c00217 	ldw	r7,8(sp)
 800aecc:	03000404 	movi	r12,16
 800aed0:	183fe61e 	bne	r3,zero,800ae6c <___vfiprintf_internal_r+0xd54>
 800aed4:	41000204 	addi	r4,r8,8
 800aed8:	1245883a 	add	r2,r2,r9
 800aedc:	41c00015 	stw	r7,0(r8)
 800aee0:	42400115 	stw	r9,4(r8)
 800aee4:	d8800b15 	stw	r2,44(sp)
 800aee8:	d9400a15 	stw	r5,40(sp)
 800aeec:	28c00208 	cmpgei	r3,r5,8
 800aef0:	1800721e 	bne	r3,zero,800b0bc <___vfiprintf_internal_r+0xfa4>
 800aef4:	29400044 	addi	r5,r5,1
 800aef8:	20c00204 	addi	r3,r4,8
 800aefc:	2011883a 	mov	r8,r4
 800af00:	003eac06 	br	800a9b4 <___vfiprintf_internal_r+0x89c>
 800af04:	01400044 	movi	r5,1
 800af08:	0009883a 	mov	r4,zero
 800af0c:	8811883a 	mov	r8,r17
 800af10:	003fd306 	br	800ae60 <___vfiprintf_internal_r+0xd48>
 800af14:	d9800904 	addi	r6,sp,36
 800af18:	900b883a 	mov	r5,r18
 800af1c:	9809883a 	mov	r4,r19
 800af20:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800af24:	103ebc26 	beq	r2,zero,800aa18 <___vfiprintf_internal_r+0x900>
 800af28:	003d4e06 	br	800a464 <___vfiprintf_internal_r+0x34c>
 800af2c:	01800044 	movi	r6,1
 800af30:	0009883a 	mov	r4,zero
 800af34:	8811883a 	mov	r8,r17
 800af38:	003f8a06 	br	800ad64 <___vfiprintf_internal_r+0xc4c>
 800af3c:	10007026 	beq	r2,zero,800b100 <___vfiprintf_internal_r+0xfe8>
 800af40:	d9800904 	addi	r6,sp,36
 800af44:	900b883a 	mov	r5,r18
 800af48:	9809883a 	mov	r4,r19
 800af4c:	da400515 	stw	r9,20(sp)
 800af50:	db000215 	stw	r12,8(sp)
 800af54:	db400115 	stw	r13,4(sp)
 800af58:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800af5c:	103d411e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800af60:	d9000a17 	ldw	r4,40(sp)
 800af64:	d8800b17 	ldw	r2,44(sp)
 800af68:	d8c01804 	addi	r3,sp,96
 800af6c:	21400044 	addi	r5,r4,1
 800af70:	8811883a 	mov	r8,r17
 800af74:	da400517 	ldw	r9,20(sp)
 800af78:	db000217 	ldw	r12,8(sp)
 800af7c:	db400117 	ldw	r13,4(sp)
 800af80:	003e6f06 	br	800a940 <___vfiprintf_internal_r+0x828>
 800af84:	d8800884 	addi	r2,sp,34
 800af88:	d8801615 	stw	r2,88(sp)
 800af8c:	00800084 	movi	r2,2
 800af90:	d8801715 	stw	r2,92(sp)
 800af94:	d8c01804 	addi	r3,sp,96
 800af98:	01400044 	movi	r5,1
 800af9c:	1811883a 	mov	r8,r3
 800afa0:	2809883a 	mov	r4,r5
 800afa4:	21400044 	addi	r5,r4,1
 800afa8:	40c00204 	addi	r3,r8,8
 800afac:	003e7d06 	br	800a9a4 <___vfiprintf_internal_r+0x88c>
 800afb0:	a019883a 	mov	r12,r20
 800afb4:	003f0506 	br	800abcc <___vfiprintf_internal_r+0xab4>
 800afb8:	19400450 	cmplti	r5,r3,17
 800afbc:	01c20074 	movhi	r7,2049
 800afc0:	2801031e 	bne	r5,zero,800b3d0 <___vfiprintf_internal_r+0x12b8>
 800afc4:	39c81d04 	addi	r7,r7,8308
 800afc8:	03800404 	movi	r14,16
 800afcc:	00000706 	br	800afec <___vfiprintf_internal_r+0xed4>
 800afd0:	23c00084 	addi	r15,r4,2
 800afd4:	42000204 	addi	r8,r8,8
 800afd8:	3009883a 	mov	r4,r6
 800afdc:	18fffc04 	addi	r3,r3,-16
 800afe0:	19400448 	cmpgei	r5,r3,17
 800afe4:	28002026 	beq	r5,zero,800b068 <___vfiprintf_internal_r+0xf50>
 800afe8:	21800044 	addi	r6,r4,1
 800afec:	10800404 	addi	r2,r2,16
 800aff0:	41c00015 	stw	r7,0(r8)
 800aff4:	43800115 	stw	r14,4(r8)
 800aff8:	d8800b15 	stw	r2,44(sp)
 800affc:	d9800a15 	stw	r6,40(sp)
 800b000:	31400208 	cmpgei	r5,r6,8
 800b004:	283ff226 	beq	r5,zero,800afd0 <___vfiprintf_internal_r+0xeb8>
 800b008:	d9800904 	addi	r6,sp,36
 800b00c:	900b883a 	mov	r5,r18
 800b010:	9809883a 	mov	r4,r19
 800b014:	10001f26 	beq	r2,zero,800b094 <___vfiprintf_internal_r+0xf7c>
 800b018:	d9c00715 	stw	r7,28(sp)
 800b01c:	d8c00615 	stw	r3,24(sp)
 800b020:	da400515 	stw	r9,20(sp)
 800b024:	db000215 	stw	r12,8(sp)
 800b028:	db400115 	stw	r13,4(sp)
 800b02c:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800b030:	103d0c1e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800b034:	d8c00617 	ldw	r3,24(sp)
 800b038:	d9000a17 	ldw	r4,40(sp)
 800b03c:	d8800b17 	ldw	r2,44(sp)
 800b040:	18fffc04 	addi	r3,r3,-16
 800b044:	19400448 	cmpgei	r5,r3,17
 800b048:	8811883a 	mov	r8,r17
 800b04c:	23c00044 	addi	r15,r4,1
 800b050:	d9c00717 	ldw	r7,28(sp)
 800b054:	03800404 	movi	r14,16
 800b058:	da400517 	ldw	r9,20(sp)
 800b05c:	db000217 	ldw	r12,8(sp)
 800b060:	db400117 	ldw	r13,4(sp)
 800b064:	283fe01e 	bne	r5,zero,800afe8 <___vfiprintf_internal_r+0xed0>
 800b068:	10c5883a 	add	r2,r2,r3
 800b06c:	40c00115 	stw	r3,4(r8)
 800b070:	41c00015 	stw	r7,0(r8)
 800b074:	d8800b15 	stw	r2,44(sp)
 800b078:	dbc00a15 	stw	r15,40(sp)
 800b07c:	78c00208 	cmpgei	r3,r15,8
 800b080:	18002c1e 	bne	r3,zero,800b134 <___vfiprintf_internal_r+0x101c>
 800b084:	42000204 	addi	r8,r8,8
 800b088:	79400044 	addi	r5,r15,1
 800b08c:	7809883a 	mov	r4,r15
 800b090:	003e1b06 	br	800a900 <___vfiprintf_internal_r+0x7e8>
 800b094:	0009883a 	mov	r4,zero
 800b098:	03c00044 	movi	r15,1
 800b09c:	8811883a 	mov	r8,r17
 800b0a0:	003fce06 	br	800afdc <___vfiprintf_internal_r+0xec4>
 800b0a4:	8540010e 	bge	r16,r21,800b0ac <___vfiprintf_internal_r+0xf94>
 800b0a8:	a821883a 	mov	r16,r21
 800b0ac:	d8800017 	ldw	r2,0(sp)
 800b0b0:	1405883a 	add	r2,r2,r16
 800b0b4:	d8800015 	stw	r2,0(sp)
 800b0b8:	003e5706 	br	800aa18 <___vfiprintf_internal_r+0x900>
 800b0bc:	10008126 	beq	r2,zero,800b2c4 <___vfiprintf_internal_r+0x11ac>
 800b0c0:	d9800904 	addi	r6,sp,36
 800b0c4:	900b883a 	mov	r5,r18
 800b0c8:	9809883a 	mov	r4,r19
 800b0cc:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800b0d0:	103ce41e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800b0d4:	d9400a17 	ldw	r5,40(sp)
 800b0d8:	d8800b17 	ldw	r2,44(sp)
 800b0dc:	d8c01804 	addi	r3,sp,96
 800b0e0:	29400044 	addi	r5,r5,1
 800b0e4:	8811883a 	mov	r8,r17
 800b0e8:	003e3206 	br	800a9b4 <___vfiprintf_internal_r+0x89c>
 800b0ec:	d8000a15 	stw	zero,40(sp)
 800b0f0:	8811883a 	mov	r8,r17
 800b0f4:	003c4a06 	br	800a220 <___vfiprintf_internal_r+0x108>
 800b0f8:	002d883a 	mov	r22,zero
 800b0fc:	003d4406 	br	800a610 <___vfiprintf_internal_r+0x4f8>
 800b100:	68003326 	beq	r13,zero,800b1d0 <___vfiprintf_internal_r+0x10b8>
 800b104:	d8800884 	addi	r2,sp,34
 800b108:	d8801615 	stw	r2,88(sp)
 800b10c:	00800084 	movi	r2,2
 800b110:	d8801715 	stw	r2,92(sp)
 800b114:	da001804 	addi	r8,sp,96
 800b118:	01000044 	movi	r4,1
 800b11c:	003fa106 	br	800afa4 <___vfiprintf_internal_r+0xe8c>
 800b120:	d8c01804 	addi	r3,sp,96
 800b124:	01400044 	movi	r5,1
 800b128:	0009883a 	mov	r4,zero
 800b12c:	8811883a 	mov	r8,r17
 800b130:	003e1c06 	br	800a9a4 <___vfiprintf_internal_r+0x88c>
 800b134:	10003826 	beq	r2,zero,800b218 <___vfiprintf_internal_r+0x1100>
 800b138:	d9800904 	addi	r6,sp,36
 800b13c:	900b883a 	mov	r5,r18
 800b140:	9809883a 	mov	r4,r19
 800b144:	da400515 	stw	r9,20(sp)
 800b148:	db000215 	stw	r12,8(sp)
 800b14c:	db400115 	stw	r13,4(sp)
 800b150:	800a00c0 	call	800a00c <__sprint_r.part.0>
 800b154:	103cc31e 	bne	r2,zero,800a464 <___vfiprintf_internal_r+0x34c>
 800b158:	d9000a17 	ldw	r4,40(sp)
 800b15c:	d8800b17 	ldw	r2,44(sp)
 800b160:	8811883a 	mov	r8,r17
 800b164:	21400044 	addi	r5,r4,1
 800b168:	da400517 	ldw	r9,20(sp)
 800b16c:	db000217 	ldw	r12,8(sp)
 800b170:	db400117 	ldw	r13,4(sp)
 800b174:	003de206 	br	800a900 <___vfiprintf_internal_r+0x7e8>
 800b178:	e029883a 	mov	r20,fp
 800b17c:	003c2d06 	br	800a234 <___vfiprintf_internal_r+0x11c>
 800b180:	882f883a 	mov	r23,r17
 800b184:	003ecf06 	br	800acc4 <___vfiprintf_internal_r+0xbac>
 800b188:	31400044 	addi	r5,r6,1
 800b18c:	68c00204 	addi	r3,r13,8
 800b190:	3009883a 	mov	r4,r6
 800b194:	6811883a 	mov	r8,r13
 800b198:	003e0406 	br	800a9ac <___vfiprintf_internal_r+0x894>
 800b19c:	00c00c04 	movi	r3,48
 800b1a0:	d88008c5 	stb	r2,35(sp)
 800b1a4:	d8c00885 	stb	r3,34(sp)
 800b1a8:	63000094 	ori	r12,r12,2
 800b1ac:	00800084 	movi	r2,2
 800b1b0:	003d3606 	br	800a68c <___vfiprintf_internal_r+0x574>
 800b1b4:	d9400017 	ldw	r5,0(sp)
 800b1b8:	20800017 	ldw	r2,0(r4)
 800b1bc:	d8c00315 	stw	r3,12(sp)
 800b1c0:	2809d7fa 	srai	r4,r5,31
 800b1c4:	11400015 	stw	r5,0(r2)
 800b1c8:	11000115 	stw	r4,4(r2)
 800b1cc:	003bfb06 	br	800a1bc <___vfiprintf_internal_r+0xa4>
 800b1d0:	0009883a 	mov	r4,zero
 800b1d4:	d8c01804 	addi	r3,sp,96
 800b1d8:	01400044 	movi	r5,1
 800b1dc:	8811883a 	mov	r8,r17
 800b1e0:	003df006 	br	800a9a4 <___vfiprintf_internal_r+0x88c>
 800b1e4:	0421c83a 	sub	r16,zero,r16
 800b1e8:	ddc00315 	stw	r23,12(sp)
 800b1ec:	003cdb06 	br	800a55c <___vfiprintf_internal_r+0x444>
 800b1f0:	b809883a 	mov	r4,r23
 800b1f4:	da000215 	stw	r8,8(sp)
 800b1f8:	db000115 	stw	r12,4(sp)
 800b1fc:	8002b600 	call	8002b60 <strlen>
 800b200:	102d883a 	mov	r22,r2
 800b204:	102b883a 	mov	r21,r2
 800b208:	dd000315 	stw	r20,12(sp)
 800b20c:	db000117 	ldw	r12,4(sp)
 800b210:	da000217 	ldw	r8,8(sp)
 800b214:	003dad06 	br	800a8cc <___vfiprintf_internal_r+0x7b4>
 800b218:	d8c00847 	ldb	r3,33(sp)
 800b21c:	1800551e 	bne	r3,zero,800b374 <___vfiprintf_internal_r+0x125c>
 800b220:	683f581e 	bne	r13,zero,800af84 <___vfiprintf_internal_r+0xe6c>
 800b224:	0009883a 	mov	r4,zero
 800b228:	d8c01804 	addi	r3,sp,96
 800b22c:	01400044 	movi	r5,1
 800b230:	8811883a 	mov	r8,r17
 800b234:	003ddd06 	br	800a9ac <___vfiprintf_internal_r+0x894>
 800b238:	d8800317 	ldw	r2,12(sp)
 800b23c:	10800017 	ldw	r2,0(r2)
 800b240:	d8c00315 	stw	r3,12(sp)
 800b244:	d8c00017 	ldw	r3,0(sp)
 800b248:	10c00015 	stw	r3,0(r2)
 800b24c:	003bdb06 	br	800a1bc <___vfiprintf_internal_r+0xa4>
 800b250:	882f883a 	mov	r23,r17
 800b254:	00000206 	br	800b260 <___vfiprintf_internal_r+0x1148>
 800b258:	102b883a 	mov	r21,r2
 800b25c:	182d883a 	mov	r22,r3
 800b260:	a809883a 	mov	r4,r21
 800b264:	b00b883a 	mov	r5,r22
 800b268:	01800284 	movi	r6,10
 800b26c:	000f883a 	mov	r7,zero
 800b270:	db400615 	stw	r13,24(sp)
 800b274:	da000515 	stw	r8,20(sp)
 800b278:	da400215 	stw	r9,8(sp)
 800b27c:	db000115 	stw	r12,4(sp)
 800b280:	800c5880 	call	800c588 <__umoddi3>
 800b284:	10800c04 	addi	r2,r2,48
 800b288:	bdffffc4 	addi	r23,r23,-1
 800b28c:	a809883a 	mov	r4,r21
 800b290:	b00b883a 	mov	r5,r22
 800b294:	b8800005 	stb	r2,0(r23)
 800b298:	01800284 	movi	r6,10
 800b29c:	000f883a 	mov	r7,zero
 800b2a0:	800bf6c0 	call	800bf6c <__udivdi3>
 800b2a4:	db000117 	ldw	r12,4(sp)
 800b2a8:	da400217 	ldw	r9,8(sp)
 800b2ac:	da000517 	ldw	r8,20(sp)
 800b2b0:	db400617 	ldw	r13,24(sp)
 800b2b4:	b03fe81e 	bne	r22,zero,800b258 <___vfiprintf_internal_r+0x1140>
 800b2b8:	ad4002a8 	cmpgeui	r21,r21,10
 800b2bc:	a83fe61e 	bne	r21,zero,800b258 <___vfiprintf_internal_r+0x1140>
 800b2c0:	003e9606 	br	800ad1c <___vfiprintf_internal_r+0xc04>
 800b2c4:	00c00044 	movi	r3,1
 800b2c8:	d8c00a15 	stw	r3,40(sp)
 800b2cc:	b005883a 	mov	r2,r22
 800b2d0:	ddc01615 	stw	r23,88(sp)
 800b2d4:	dd801715 	stw	r22,92(sp)
 800b2d8:	dd800b15 	stw	r22,44(sp)
 800b2dc:	d8c01804 	addi	r3,sp,96
 800b2e0:	003dc306 	br	800a9f0 <___vfiprintf_internal_r+0x8d8>
 800b2e4:	10c00060 	cmpeqi	r3,r2,1
 800b2e8:	a019883a 	mov	r12,r20
 800b2ec:	183e3926 	beq	r3,zero,800abd4 <___vfiprintf_internal_r+0xabc>
 800b2f0:	003e6f06 	br	800acb0 <___vfiprintf_internal_r+0xb98>
 800b2f4:	e0800043 	ldbu	r2,1(fp)
 800b2f8:	63000814 	ori	r12,r12,32
 800b2fc:	e7000044 	addi	fp,fp,1
 800b300:	10803fcc 	andi	r2,r2,255
 800b304:	1080201c 	xori	r2,r2,128
 800b308:	10bfe004 	addi	r2,r2,-128
 800b30c:	003bd106 	br	800a254 <___vfiprintf_internal_r+0x13c>
 800b310:	488001f0 	cmpltui	r2,r9,7
 800b314:	482d883a 	mov	r22,r9
 800b318:	1000011e 	bne	r2,zero,800b320 <___vfiprintf_internal_r+0x1208>
 800b31c:	05800184 	movi	r22,6
 800b320:	05c20074 	movhi	r23,2049
 800b324:	b02b883a 	mov	r21,r22
 800b328:	dd000315 	stw	r20,12(sp)
 800b32c:	bdc7c104 	addi	r23,r23,7940
 800b330:	003d6606 	br	800a8cc <___vfiprintf_internal_r+0x7b4>
 800b334:	d8800315 	stw	r2,12(sp)
 800b338:	002d883a 	mov	r22,zero
 800b33c:	00800044 	movi	r2,1
 800b340:	003cd206 	br	800a68c <___vfiprintf_internal_r+0x574>
 800b344:	d8800315 	stw	r2,12(sp)
 800b348:	002d883a 	mov	r22,zero
 800b34c:	0005883a 	mov	r2,zero
 800b350:	003cce06 	br	800a68c <___vfiprintf_internal_r+0x574>
 800b354:	1809883a 	mov	r4,r3
 800b358:	39c81904 	addi	r7,r7,8292
 800b35c:	003ede06 	br	800aed8 <___vfiprintf_internal_r+0xdc0>
 800b360:	d8c01804 	addi	r3,sp,96
 800b364:	01400044 	movi	r5,1
 800b368:	0009883a 	mov	r4,zero
 800b36c:	8811883a 	mov	r8,r17
 800b370:	003d8e06 	br	800a9ac <___vfiprintf_internal_r+0x894>
 800b374:	d8800844 	addi	r2,sp,33
 800b378:	d8801615 	stw	r2,88(sp)
 800b37c:	00800044 	movi	r2,1
 800b380:	d8801715 	stw	r2,92(sp)
 800b384:	d8c01804 	addi	r3,sp,96
 800b388:	01400044 	movi	r5,1
 800b38c:	003d6806 	br	800a930 <___vfiprintf_internal_r+0x818>
 800b390:	d9800845 	stb	r6,33(sp)
 800b394:	003c5306 	br	800a4e4 <___vfiprintf_internal_r+0x3cc>
 800b398:	482b883a 	mov	r21,r9
 800b39c:	dd000315 	stw	r20,12(sp)
 800b3a0:	482d883a 	mov	r22,r9
 800b3a4:	003d4906 	br	800a8cc <___vfiprintf_internal_r+0x7b4>
 800b3a8:	d9800845 	stb	r6,33(sp)
 800b3ac:	003cd906 	br	800a714 <___vfiprintf_internal_r+0x5fc>
 800b3b0:	d9800845 	stb	r6,33(sp)
 800b3b4:	003ce906 	br	800a75c <___vfiprintf_internal_r+0x644>
 800b3b8:	d9800845 	stb	r6,33(sp)
 800b3bc:	003c8a06 	br	800a5e8 <___vfiprintf_internal_r+0x4d0>
 800b3c0:	d9800845 	stb	r6,33(sp)
 800b3c4:	003dd206 	br	800ab10 <___vfiprintf_internal_r+0x9f8>
 800b3c8:	d9800845 	stb	r6,33(sp)
 800b3cc:	003ddd06 	br	800ab44 <___vfiprintf_internal_r+0xa2c>
 800b3d0:	301f883a 	mov	r15,r6
 800b3d4:	39c81d04 	addi	r7,r7,8308
 800b3d8:	003f2306 	br	800b068 <___vfiprintf_internal_r+0xf50>
 800b3dc:	d9800845 	stb	r6,33(sp)
 800b3e0:	003d1606 	br	800a83c <___vfiprintf_internal_r+0x724>
 800b3e4:	d9800845 	stb	r6,33(sp)
 800b3e8:	003d0406 	br	800a7fc <___vfiprintf_internal_r+0x6e4>
 800b3ec:	d9800845 	stb	r6,33(sp)
 800b3f0:	003cb806 	br	800a6d4 <___vfiprintf_internal_r+0x5bc>
 800b3f4:	d9800845 	stb	r6,33(sp)
 800b3f8:	003ddf06 	br	800ab78 <___vfiprintf_internal_r+0xa60>
 800b3fc:	29800044 	addi	r6,r5,1
 800b400:	39c81d04 	addi	r7,r7,8308
 800b404:	003db106 	br	800aacc <___vfiprintf_internal_r+0x9b4>
 800b408:	181b883a 	mov	r13,r3
 800b40c:	280d883a 	mov	r6,r5
 800b410:	39c81904 	addi	r7,r7,8292
 800b414:	003e7306 	br	800ade4 <___vfiprintf_internal_r+0xccc>
 800b418:	00bfffc4 	movi	r2,-1
 800b41c:	d8800015 	stw	r2,0(sp)
 800b420:	003c1306 	br	800a470 <___vfiprintf_internal_r+0x358>
 800b424:	d8800317 	ldw	r2,12(sp)
 800b428:	12400017 	ldw	r9,0(r2)
 800b42c:	15c00104 	addi	r23,r2,4
 800b430:	4800010e 	bge	r9,zero,800b438 <___vfiprintf_internal_r+0x1320>
 800b434:	027fffc4 	movi	r9,-1
 800b438:	e0800043 	ldbu	r2,1(fp)
 800b43c:	ddc00315 	stw	r23,12(sp)
 800b440:	1839883a 	mov	fp,r3
 800b444:	10803fcc 	andi	r2,r2,255
 800b448:	1080201c 	xori	r2,r2,128
 800b44c:	10bfe004 	addi	r2,r2,-128
 800b450:	003b8006 	br	800a254 <___vfiprintf_internal_r+0x13c>

0800b454 <__vfiprintf_internal>:
 800b454:	00820074 	movhi	r2,2049
 800b458:	300f883a 	mov	r7,r6
 800b45c:	280d883a 	mov	r6,r5
 800b460:	200b883a 	mov	r5,r4
 800b464:	11100c17 	ldw	r4,16432(r2)
 800b468:	800a1181 	jmpi	800a118 <___vfiprintf_internal_r>

0800b46c <__sbprintf>:
 800b46c:	2880030b 	ldhu	r2,12(r5)
 800b470:	2b001917 	ldw	r12,100(r5)
 800b474:	2ac0038b 	ldhu	r11,14(r5)
 800b478:	2a800717 	ldw	r10,28(r5)
 800b47c:	2a400917 	ldw	r9,36(r5)
 800b480:	defee204 	addi	sp,sp,-1144
 800b484:	da001a04 	addi	r8,sp,104
 800b488:	00c10004 	movi	r3,1024
 800b48c:	dc011a15 	stw	r16,1128(sp)
 800b490:	10bfff4c 	andi	r2,r2,65533
 800b494:	2821883a 	mov	r16,r5
 800b498:	d80b883a 	mov	r5,sp
 800b49c:	dc811c15 	stw	r18,1136(sp)
 800b4a0:	dc411b15 	stw	r17,1132(sp)
 800b4a4:	dfc11d15 	stw	ra,1140(sp)
 800b4a8:	2025883a 	mov	r18,r4
 800b4ac:	d880030d 	sth	r2,12(sp)
 800b4b0:	db001915 	stw	r12,100(sp)
 800b4b4:	dac0038d 	sth	r11,14(sp)
 800b4b8:	da800715 	stw	r10,28(sp)
 800b4bc:	da400915 	stw	r9,36(sp)
 800b4c0:	da000015 	stw	r8,0(sp)
 800b4c4:	da000415 	stw	r8,16(sp)
 800b4c8:	d8c00215 	stw	r3,8(sp)
 800b4cc:	d8c00515 	stw	r3,20(sp)
 800b4d0:	d8000615 	stw	zero,24(sp)
 800b4d4:	800a1180 	call	800a118 <___vfiprintf_internal_r>
 800b4d8:	1023883a 	mov	r17,r2
 800b4dc:	10000d0e 	bge	r2,zero,800b514 <__sbprintf+0xa8>
 800b4e0:	d880030b 	ldhu	r2,12(sp)
 800b4e4:	1080100c 	andi	r2,r2,64
 800b4e8:	10000326 	beq	r2,zero,800b4f8 <__sbprintf+0x8c>
 800b4ec:	8080030b 	ldhu	r2,12(r16)
 800b4f0:	10801014 	ori	r2,r2,64
 800b4f4:	8080030d 	sth	r2,12(r16)
 800b4f8:	8805883a 	mov	r2,r17
 800b4fc:	dfc11d17 	ldw	ra,1140(sp)
 800b500:	dc811c17 	ldw	r18,1136(sp)
 800b504:	dc411b17 	ldw	r17,1132(sp)
 800b508:	dc011a17 	ldw	r16,1128(sp)
 800b50c:	dec11e04 	addi	sp,sp,1144
 800b510:	f800283a 	ret
 800b514:	d80b883a 	mov	r5,sp
 800b518:	9009883a 	mov	r4,r18
 800b51c:	8006adc0 	call	8006adc <_fflush_r>
 800b520:	103fef26 	beq	r2,zero,800b4e0 <__sbprintf+0x74>
 800b524:	047fffc4 	movi	r17,-1
 800b528:	003fed06 	br	800b4e0 <__sbprintf+0x74>

0800b52c <__swbuf_r>:
 800b52c:	defffb04 	addi	sp,sp,-20
 800b530:	dc800215 	stw	r18,8(sp)
 800b534:	dc400115 	stw	r17,4(sp)
 800b538:	dc000015 	stw	r16,0(sp)
 800b53c:	dfc00415 	stw	ra,16(sp)
 800b540:	dcc00315 	stw	r19,12(sp)
 800b544:	2023883a 	mov	r17,r4
 800b548:	2825883a 	mov	r18,r5
 800b54c:	3021883a 	mov	r16,r6
 800b550:	20000226 	beq	r4,zero,800b55c <__swbuf_r+0x30>
 800b554:	20800e17 	ldw	r2,56(r4)
 800b558:	10003e26 	beq	r2,zero,800b654 <__swbuf_r+0x128>
 800b55c:	80800617 	ldw	r2,24(r16)
 800b560:	80c0030b 	ldhu	r3,12(r16)
 800b564:	80800215 	stw	r2,8(r16)
 800b568:	1880020c 	andi	r2,r3,8
 800b56c:	10001f26 	beq	r2,zero,800b5ec <__swbuf_r+0xc0>
 800b570:	80800417 	ldw	r2,16(r16)
 800b574:	10001d26 	beq	r2,zero,800b5ec <__swbuf_r+0xc0>
 800b578:	1908000c 	andi	r4,r3,8192
 800b57c:	94c03fcc 	andi	r19,r18,255
 800b580:	20002326 	beq	r4,zero,800b610 <__swbuf_r+0xe4>
 800b584:	80c00017 	ldw	r3,0(r16)
 800b588:	81000517 	ldw	r4,20(r16)
 800b58c:	1885c83a 	sub	r2,r3,r2
 800b590:	1100290e 	bge	r2,r4,800b638 <__swbuf_r+0x10c>
 800b594:	10800044 	addi	r2,r2,1
 800b598:	81000217 	ldw	r4,8(r16)
 800b59c:	19400044 	addi	r5,r3,1
 800b5a0:	81400015 	stw	r5,0(r16)
 800b5a4:	213fffc4 	addi	r4,r4,-1
 800b5a8:	81000215 	stw	r4,8(r16)
 800b5ac:	1c800005 	stb	r18,0(r3)
 800b5b0:	80c00517 	ldw	r3,20(r16)
 800b5b4:	18802926 	beq	r3,r2,800b65c <__swbuf_r+0x130>
 800b5b8:	8080030b 	ldhu	r2,12(r16)
 800b5bc:	1080004c 	andi	r2,r2,1
 800b5c0:	10000226 	beq	r2,zero,800b5cc <__swbuf_r+0xa0>
 800b5c4:	98800298 	cmpnei	r2,r19,10
 800b5c8:	10002426 	beq	r2,zero,800b65c <__swbuf_r+0x130>
 800b5cc:	9805883a 	mov	r2,r19
 800b5d0:	dfc00417 	ldw	ra,16(sp)
 800b5d4:	dcc00317 	ldw	r19,12(sp)
 800b5d8:	dc800217 	ldw	r18,8(sp)
 800b5dc:	dc400117 	ldw	r17,4(sp)
 800b5e0:	dc000017 	ldw	r16,0(sp)
 800b5e4:	dec00504 	addi	sp,sp,20
 800b5e8:	f800283a 	ret
 800b5ec:	800b883a 	mov	r5,r16
 800b5f0:	8809883a 	mov	r4,r17
 800b5f4:	8004e580 	call	8004e58 <__swsetup_r>
 800b5f8:	10001c1e 	bne	r2,zero,800b66c <__swbuf_r+0x140>
 800b5fc:	80c0030b 	ldhu	r3,12(r16)
 800b600:	80800417 	ldw	r2,16(r16)
 800b604:	94c03fcc 	andi	r19,r18,255
 800b608:	1908000c 	andi	r4,r3,8192
 800b60c:	203fdd1e 	bne	r4,zero,800b584 <__swbuf_r+0x58>
 800b610:	81001917 	ldw	r4,100(r16)
 800b614:	18c80014 	ori	r3,r3,8192
 800b618:	0177ffc4 	movi	r5,-8193
 800b61c:	2148703a 	and	r4,r4,r5
 800b620:	80c0030d 	sth	r3,12(r16)
 800b624:	80c00017 	ldw	r3,0(r16)
 800b628:	81001915 	stw	r4,100(r16)
 800b62c:	81000517 	ldw	r4,20(r16)
 800b630:	1885c83a 	sub	r2,r3,r2
 800b634:	113fd716 	blt	r2,r4,800b594 <__swbuf_r+0x68>
 800b638:	800b883a 	mov	r5,r16
 800b63c:	8809883a 	mov	r4,r17
 800b640:	8006adc0 	call	8006adc <_fflush_r>
 800b644:	1000091e 	bne	r2,zero,800b66c <__swbuf_r+0x140>
 800b648:	80c00017 	ldw	r3,0(r16)
 800b64c:	00800044 	movi	r2,1
 800b650:	003fd106 	br	800b598 <__swbuf_r+0x6c>
 800b654:	8006e700 	call	8006e70 <__sinit>
 800b658:	003fc006 	br	800b55c <__swbuf_r+0x30>
 800b65c:	800b883a 	mov	r5,r16
 800b660:	8809883a 	mov	r4,r17
 800b664:	8006adc0 	call	8006adc <_fflush_r>
 800b668:	103fd826 	beq	r2,zero,800b5cc <__swbuf_r+0xa0>
 800b66c:	04ffffc4 	movi	r19,-1
 800b670:	003fd606 	br	800b5cc <__swbuf_r+0xa0>

0800b674 <__swbuf>:
 800b674:	00820074 	movhi	r2,2049
 800b678:	280d883a 	mov	r6,r5
 800b67c:	200b883a 	mov	r5,r4
 800b680:	11100c17 	ldw	r4,16432(r2)
 800b684:	800b52c1 	jmpi	800b52c <__swbuf_r>

0800b688 <_write_r>:
 800b688:	defffe04 	addi	sp,sp,-8
 800b68c:	2805883a 	mov	r2,r5
 800b690:	dc000015 	stw	r16,0(sp)
 800b694:	300b883a 	mov	r5,r6
 800b698:	2021883a 	mov	r16,r4
 800b69c:	380d883a 	mov	r6,r7
 800b6a0:	1009883a 	mov	r4,r2
 800b6a4:	00820074 	movhi	r2,2049
 800b6a8:	dfc00115 	stw	ra,4(sp)
 800b6ac:	10172815 	stw	zero,23712(r2)
 800b6b0:	800fef40 	call	800fef4 <write>
 800b6b4:	10ffffd8 	cmpnei	r3,r2,-1
 800b6b8:	18000426 	beq	r3,zero,800b6cc <_write_r+0x44>
 800b6bc:	dfc00117 	ldw	ra,4(sp)
 800b6c0:	dc000017 	ldw	r16,0(sp)
 800b6c4:	dec00204 	addi	sp,sp,8
 800b6c8:	f800283a 	ret
 800b6cc:	00c20074 	movhi	r3,2049
 800b6d0:	18d72817 	ldw	r3,23712(r3)
 800b6d4:	183ff926 	beq	r3,zero,800b6bc <_write_r+0x34>
 800b6d8:	80c00015 	stw	r3,0(r16)
 800b6dc:	dfc00117 	ldw	ra,4(sp)
 800b6e0:	dc000017 	ldw	r16,0(sp)
 800b6e4:	dec00204 	addi	sp,sp,8
 800b6e8:	f800283a 	ret

0800b6ec <_close_r>:
 800b6ec:	defffe04 	addi	sp,sp,-8
 800b6f0:	dc000015 	stw	r16,0(sp)
 800b6f4:	00820074 	movhi	r2,2049
 800b6f8:	2021883a 	mov	r16,r4
 800b6fc:	2809883a 	mov	r4,r5
 800b700:	dfc00115 	stw	ra,4(sp)
 800b704:	10172815 	stw	zero,23712(r2)
 800b708:	800f4c80 	call	800f4c8 <close>
 800b70c:	10ffffd8 	cmpnei	r3,r2,-1
 800b710:	18000426 	beq	r3,zero,800b724 <_close_r+0x38>
 800b714:	dfc00117 	ldw	ra,4(sp)
 800b718:	dc000017 	ldw	r16,0(sp)
 800b71c:	dec00204 	addi	sp,sp,8
 800b720:	f800283a 	ret
 800b724:	00c20074 	movhi	r3,2049
 800b728:	18d72817 	ldw	r3,23712(r3)
 800b72c:	183ff926 	beq	r3,zero,800b714 <_close_r+0x28>
 800b730:	80c00015 	stw	r3,0(r16)
 800b734:	dfc00117 	ldw	ra,4(sp)
 800b738:	dc000017 	ldw	r16,0(sp)
 800b73c:	dec00204 	addi	sp,sp,8
 800b740:	f800283a 	ret

0800b744 <_calloc_r>:
 800b744:	defffe04 	addi	sp,sp,-8
 800b748:	2805883a 	mov	r2,r5
 800b74c:	dc000015 	stw	r16,0(sp)
 800b750:	300b883a 	mov	r5,r6
 800b754:	2021883a 	mov	r16,r4
 800b758:	1009883a 	mov	r4,r2
 800b75c:	dfc00115 	stw	ra,4(sp)
 800b760:	80029d40 	call	80029d4 <__mulsi3>
 800b764:	100b883a 	mov	r5,r2
 800b768:	8009883a 	mov	r4,r16
 800b76c:	8007af00 	call	8007af0 <_malloc_r>
 800b770:	1007883a 	mov	r3,r2
 800b774:	10000c26 	beq	r2,zero,800b7a8 <_calloc_r+0x64>
 800b778:	11bfff17 	ldw	r6,-4(r2)
 800b77c:	00bfff04 	movi	r2,-4
 800b780:	308c703a 	and	r6,r6,r2
 800b784:	31bfff04 	addi	r6,r6,-4
 800b788:	30800968 	cmpgeui	r2,r6,37
 800b78c:	1000151e 	bne	r2,zero,800b7e4 <_calloc_r+0xa0>
 800b790:	30800530 	cmpltui	r2,r6,20
 800b794:	10000926 	beq	r2,zero,800b7bc <_calloc_r+0x78>
 800b798:	1805883a 	mov	r2,r3
 800b79c:	10000015 	stw	zero,0(r2)
 800b7a0:	10000115 	stw	zero,4(r2)
 800b7a4:	10000215 	stw	zero,8(r2)
 800b7a8:	1805883a 	mov	r2,r3
 800b7ac:	dfc00117 	ldw	ra,4(sp)
 800b7b0:	dc000017 	ldw	r16,0(sp)
 800b7b4:	dec00204 	addi	sp,sp,8
 800b7b8:	f800283a 	ret
 800b7bc:	18000015 	stw	zero,0(r3)
 800b7c0:	18000115 	stw	zero,4(r3)
 800b7c4:	30800728 	cmpgeui	r2,r6,28
 800b7c8:	10000b26 	beq	r2,zero,800b7f8 <_calloc_r+0xb4>
 800b7cc:	18000215 	stw	zero,8(r3)
 800b7d0:	18000315 	stw	zero,12(r3)
 800b7d4:	31800920 	cmpeqi	r6,r6,36
 800b7d8:	3000091e 	bne	r6,zero,800b800 <_calloc_r+0xbc>
 800b7dc:	18800404 	addi	r2,r3,16
 800b7e0:	003fee06 	br	800b79c <_calloc_r+0x58>
 800b7e4:	1809883a 	mov	r4,r3
 800b7e8:	000b883a 	mov	r5,zero
 800b7ec:	80085f80 	call	80085f8 <memset>
 800b7f0:	1007883a 	mov	r3,r2
 800b7f4:	003fec06 	br	800b7a8 <_calloc_r+0x64>
 800b7f8:	18800204 	addi	r2,r3,8
 800b7fc:	003fe706 	br	800b79c <_calloc_r+0x58>
 800b800:	18000415 	stw	zero,16(r3)
 800b804:	18800604 	addi	r2,r3,24
 800b808:	18000515 	stw	zero,20(r3)
 800b80c:	003fe306 	br	800b79c <_calloc_r+0x58>

0800b810 <_fclose_r>:
 800b810:	defffc04 	addi	sp,sp,-16
 800b814:	dfc00315 	stw	ra,12(sp)
 800b818:	dc800215 	stw	r18,8(sp)
 800b81c:	dc400115 	stw	r17,4(sp)
 800b820:	dc000015 	stw	r16,0(sp)
 800b824:	28000726 	beq	r5,zero,800b844 <_fclose_r+0x34>
 800b828:	2023883a 	mov	r17,r4
 800b82c:	2821883a 	mov	r16,r5
 800b830:	20000226 	beq	r4,zero,800b83c <_fclose_r+0x2c>
 800b834:	20800e17 	ldw	r2,56(r4)
 800b838:	10002726 	beq	r2,zero,800b8d8 <_fclose_r+0xc8>
 800b83c:	8080030f 	ldh	r2,12(r16)
 800b840:	1000081e 	bne	r2,zero,800b864 <_fclose_r+0x54>
 800b844:	0025883a 	mov	r18,zero
 800b848:	9005883a 	mov	r2,r18
 800b84c:	dfc00317 	ldw	ra,12(sp)
 800b850:	dc800217 	ldw	r18,8(sp)
 800b854:	dc400117 	ldw	r17,4(sp)
 800b858:	dc000017 	ldw	r16,0(sp)
 800b85c:	dec00404 	addi	sp,sp,16
 800b860:	f800283a 	ret
 800b864:	800b883a 	mov	r5,r16
 800b868:	8809883a 	mov	r4,r17
 800b86c:	80068b40 	call	80068b4 <__sflush_r>
 800b870:	1025883a 	mov	r18,r2
 800b874:	80800b17 	ldw	r2,44(r16)
 800b878:	10000426 	beq	r2,zero,800b88c <_fclose_r+0x7c>
 800b87c:	81400717 	ldw	r5,28(r16)
 800b880:	8809883a 	mov	r4,r17
 800b884:	103ee83a 	callr	r2
 800b888:	10001716 	blt	r2,zero,800b8e8 <_fclose_r+0xd8>
 800b88c:	8080030b 	ldhu	r2,12(r16)
 800b890:	1080200c 	andi	r2,r2,128
 800b894:	1000181e 	bne	r2,zero,800b8f8 <_fclose_r+0xe8>
 800b898:	81400c17 	ldw	r5,48(r16)
 800b89c:	28000526 	beq	r5,zero,800b8b4 <_fclose_r+0xa4>
 800b8a0:	80801004 	addi	r2,r16,64
 800b8a4:	28800226 	beq	r5,r2,800b8b0 <_fclose_r+0xa0>
 800b8a8:	8809883a 	mov	r4,r17
 800b8ac:	8006fd40 	call	8006fd4 <_free_r>
 800b8b0:	80000c15 	stw	zero,48(r16)
 800b8b4:	81401117 	ldw	r5,68(r16)
 800b8b8:	28000326 	beq	r5,zero,800b8c8 <_fclose_r+0xb8>
 800b8bc:	8809883a 	mov	r4,r17
 800b8c0:	8006fd40 	call	8006fd4 <_free_r>
 800b8c4:	80001115 	stw	zero,68(r16)
 800b8c8:	8006e800 	call	8006e80 <__sfp_lock_acquire>
 800b8cc:	8000030d 	sth	zero,12(r16)
 800b8d0:	8006e840 	call	8006e84 <__sfp_lock_release>
 800b8d4:	003fdc06 	br	800b848 <_fclose_r+0x38>
 800b8d8:	8006e700 	call	8006e70 <__sinit>
 800b8dc:	8080030f 	ldh	r2,12(r16)
 800b8e0:	103fd826 	beq	r2,zero,800b844 <_fclose_r+0x34>
 800b8e4:	003fdf06 	br	800b864 <_fclose_r+0x54>
 800b8e8:	8080030b 	ldhu	r2,12(r16)
 800b8ec:	04bfffc4 	movi	r18,-1
 800b8f0:	1080200c 	andi	r2,r2,128
 800b8f4:	103fe826 	beq	r2,zero,800b898 <_fclose_r+0x88>
 800b8f8:	81400417 	ldw	r5,16(r16)
 800b8fc:	8809883a 	mov	r4,r17
 800b900:	8006fd40 	call	8006fd4 <_free_r>
 800b904:	003fe406 	br	800b898 <_fclose_r+0x88>

0800b908 <fclose>:
 800b908:	00820074 	movhi	r2,2049
 800b90c:	200b883a 	mov	r5,r4
 800b910:	11100c17 	ldw	r4,16432(r2)
 800b914:	800b8101 	jmpi	800b810 <_fclose_r>

0800b918 <__fputwc>:
 800b918:	defff904 	addi	sp,sp,-28
 800b91c:	dcc00415 	stw	r19,16(sp)
 800b920:	dc800315 	stw	r18,12(sp)
 800b924:	dc000115 	stw	r16,4(sp)
 800b928:	dfc00615 	stw	ra,24(sp)
 800b92c:	dd000515 	stw	r20,20(sp)
 800b930:	dc400215 	stw	r17,8(sp)
 800b934:	2025883a 	mov	r18,r4
 800b938:	2827883a 	mov	r19,r5
 800b93c:	3021883a 	mov	r16,r6
 800b940:	800bc300 	call	800bc30 <__locale_mb_cur_max>
 800b944:	10800058 	cmpnei	r2,r2,1
 800b948:	1000071e 	bne	r2,zero,800b968 <__fputwc+0x50>
 800b94c:	98bfffc4 	addi	r2,r19,-1
 800b950:	10803fe8 	cmpgeui	r2,r2,255
 800b954:	1000041e 	bne	r2,zero,800b968 <__fputwc+0x50>
 800b958:	980b883a 	mov	r5,r19
 800b95c:	dcc000c5 	stb	r19,3(sp)
 800b960:	05000044 	movi	r20,1
 800b964:	00000a06 	br	800b990 <__fputwc+0x78>
 800b968:	81c01704 	addi	r7,r16,92
 800b96c:	980d883a 	mov	r6,r19
 800b970:	d94000c4 	addi	r5,sp,3
 800b974:	9009883a 	mov	r4,r18
 800b978:	800be400 	call	800be40 <_wcrtomb_r>
 800b97c:	1029883a 	mov	r20,r2
 800b980:	10bfffd8 	cmpnei	r2,r2,-1
 800b984:	10003426 	beq	r2,zero,800ba58 <__fputwc+0x140>
 800b988:	a0002926 	beq	r20,zero,800ba30 <__fputwc+0x118>
 800b98c:	d94000c3 	ldbu	r5,3(sp)
 800b990:	0023883a 	mov	r17,zero
 800b994:	00000a06 	br	800b9c0 <__fputwc+0xa8>
 800b998:	80800017 	ldw	r2,0(r16)
 800b99c:	11400005 	stb	r5,0(r2)
 800b9a0:	80800017 	ldw	r2,0(r16)
 800b9a4:	10800044 	addi	r2,r2,1
 800b9a8:	80800015 	stw	r2,0(r16)
 800b9ac:	8c400044 	addi	r17,r17,1
 800b9b0:	d88000c4 	addi	r2,sp,3
 800b9b4:	1445883a 	add	r2,r2,r17
 800b9b8:	8d001d2e 	bgeu	r17,r20,800ba30 <__fputwc+0x118>
 800b9bc:	11400003 	ldbu	r5,0(r2)
 800b9c0:	80800217 	ldw	r2,8(r16)
 800b9c4:	10bfffc4 	addi	r2,r2,-1
 800b9c8:	80800215 	stw	r2,8(r16)
 800b9cc:	103ff20e 	bge	r2,zero,800b998 <__fputwc+0x80>
 800b9d0:	80c00617 	ldw	r3,24(r16)
 800b9d4:	10c01016 	blt	r2,r3,800ba18 <__fputwc+0x100>
 800b9d8:	80800017 	ldw	r2,0(r16)
 800b9dc:	11400005 	stb	r5,0(r2)
 800b9e0:	80800017 	ldw	r2,0(r16)
 800b9e4:	10c00003 	ldbu	r3,0(r2)
 800b9e8:	10800044 	addi	r2,r2,1
 800b9ec:	18c002a0 	cmpeqi	r3,r3,10
 800b9f0:	183fed26 	beq	r3,zero,800b9a8 <__fputwc+0x90>
 800b9f4:	800d883a 	mov	r6,r16
 800b9f8:	01400284 	movi	r5,10
 800b9fc:	9009883a 	mov	r4,r18
 800ba00:	800b52c0 	call	800b52c <__swbuf_r>
 800ba04:	10bfffe0 	cmpeqi	r2,r2,-1
 800ba08:	10803fcc 	andi	r2,r2,255
 800ba0c:	103fe726 	beq	r2,zero,800b9ac <__fputwc+0x94>
 800ba10:	053fffc4 	movi	r20,-1
 800ba14:	00000706 	br	800ba34 <__fputwc+0x11c>
 800ba18:	29403fcc 	andi	r5,r5,255
 800ba1c:	800d883a 	mov	r6,r16
 800ba20:	9009883a 	mov	r4,r18
 800ba24:	800b52c0 	call	800b52c <__swbuf_r>
 800ba28:	10bfffe0 	cmpeqi	r2,r2,-1
 800ba2c:	003ff606 	br	800ba08 <__fputwc+0xf0>
 800ba30:	9829883a 	mov	r20,r19
 800ba34:	a005883a 	mov	r2,r20
 800ba38:	dfc00617 	ldw	ra,24(sp)
 800ba3c:	dd000517 	ldw	r20,20(sp)
 800ba40:	dcc00417 	ldw	r19,16(sp)
 800ba44:	dc800317 	ldw	r18,12(sp)
 800ba48:	dc400217 	ldw	r17,8(sp)
 800ba4c:	dc000117 	ldw	r16,4(sp)
 800ba50:	dec00704 	addi	sp,sp,28
 800ba54:	f800283a 	ret
 800ba58:	8080030b 	ldhu	r2,12(r16)
 800ba5c:	10801014 	ori	r2,r2,64
 800ba60:	8080030d 	sth	r2,12(r16)
 800ba64:	003ff306 	br	800ba34 <__fputwc+0x11c>

0800ba68 <_fputwc_r>:
 800ba68:	3080030b 	ldhu	r2,12(r6)
 800ba6c:	10c8000c 	andi	r3,r2,8192
 800ba70:	1800051e 	bne	r3,zero,800ba88 <_fputwc_r+0x20>
 800ba74:	30c01917 	ldw	r3,100(r6)
 800ba78:	10880014 	ori	r2,r2,8192
 800ba7c:	3080030d 	sth	r2,12(r6)
 800ba80:	18880014 	ori	r2,r3,8192
 800ba84:	30801915 	stw	r2,100(r6)
 800ba88:	800b9181 	jmpi	800b918 <__fputwc>

0800ba8c <fputwc>:
 800ba8c:	defffc04 	addi	sp,sp,-16
 800ba90:	00820074 	movhi	r2,2049
 800ba94:	dc000115 	stw	r16,4(sp)
 800ba98:	14100c17 	ldw	r16,16432(r2)
 800ba9c:	dc400215 	stw	r17,8(sp)
 800baa0:	dfc00315 	stw	ra,12(sp)
 800baa4:	2023883a 	mov	r17,r4
 800baa8:	80000226 	beq	r16,zero,800bab4 <fputwc+0x28>
 800baac:	80800e17 	ldw	r2,56(r16)
 800bab0:	10001026 	beq	r2,zero,800baf4 <fputwc+0x68>
 800bab4:	2880030b 	ldhu	r2,12(r5)
 800bab8:	10c8000c 	andi	r3,r2,8192
 800babc:	1800051e 	bne	r3,zero,800bad4 <fputwc+0x48>
 800bac0:	28c01917 	ldw	r3,100(r5)
 800bac4:	10880014 	ori	r2,r2,8192
 800bac8:	2880030d 	sth	r2,12(r5)
 800bacc:	18880014 	ori	r2,r3,8192
 800bad0:	28801915 	stw	r2,100(r5)
 800bad4:	280d883a 	mov	r6,r5
 800bad8:	8009883a 	mov	r4,r16
 800badc:	880b883a 	mov	r5,r17
 800bae0:	dfc00317 	ldw	ra,12(sp)
 800bae4:	dc400217 	ldw	r17,8(sp)
 800bae8:	dc000117 	ldw	r16,4(sp)
 800baec:	dec00404 	addi	sp,sp,16
 800baf0:	800b9181 	jmpi	800b918 <__fputwc>
 800baf4:	8009883a 	mov	r4,r16
 800baf8:	d9400015 	stw	r5,0(sp)
 800bafc:	8006e700 	call	8006e70 <__sinit>
 800bb00:	d9400017 	ldw	r5,0(sp)
 800bb04:	003feb06 	br	800bab4 <fputwc+0x28>

0800bb08 <_fstat_r>:
 800bb08:	defffe04 	addi	sp,sp,-8
 800bb0c:	2805883a 	mov	r2,r5
 800bb10:	dc000015 	stw	r16,0(sp)
 800bb14:	300b883a 	mov	r5,r6
 800bb18:	2021883a 	mov	r16,r4
 800bb1c:	1009883a 	mov	r4,r2
 800bb20:	00820074 	movhi	r2,2049
 800bb24:	dfc00115 	stw	ra,4(sp)
 800bb28:	10172815 	stw	zero,23712(r2)
 800bb2c:	800f60c0 	call	800f60c <fstat>
 800bb30:	10ffffd8 	cmpnei	r3,r2,-1
 800bb34:	18000426 	beq	r3,zero,800bb48 <_fstat_r+0x40>
 800bb38:	dfc00117 	ldw	ra,4(sp)
 800bb3c:	dc000017 	ldw	r16,0(sp)
 800bb40:	dec00204 	addi	sp,sp,8
 800bb44:	f800283a 	ret
 800bb48:	00c20074 	movhi	r3,2049
 800bb4c:	18d72817 	ldw	r3,23712(r3)
 800bb50:	183ff926 	beq	r3,zero,800bb38 <_fstat_r+0x30>
 800bb54:	80c00015 	stw	r3,0(r16)
 800bb58:	dfc00117 	ldw	ra,4(sp)
 800bb5c:	dc000017 	ldw	r16,0(sp)
 800bb60:	dec00204 	addi	sp,sp,8
 800bb64:	f800283a 	ret

0800bb68 <_isatty_r>:
 800bb68:	defffe04 	addi	sp,sp,-8
 800bb6c:	dc000015 	stw	r16,0(sp)
 800bb70:	00820074 	movhi	r2,2049
 800bb74:	2021883a 	mov	r16,r4
 800bb78:	2809883a 	mov	r4,r5
 800bb7c:	dfc00115 	stw	ra,4(sp)
 800bb80:	10172815 	stw	zero,23712(r2)
 800bb84:	800f7040 	call	800f704 <isatty>
 800bb88:	10ffffd8 	cmpnei	r3,r2,-1
 800bb8c:	18000426 	beq	r3,zero,800bba0 <_isatty_r+0x38>
 800bb90:	dfc00117 	ldw	ra,4(sp)
 800bb94:	dc000017 	ldw	r16,0(sp)
 800bb98:	dec00204 	addi	sp,sp,8
 800bb9c:	f800283a 	ret
 800bba0:	00c20074 	movhi	r3,2049
 800bba4:	18d72817 	ldw	r3,23712(r3)
 800bba8:	183ff926 	beq	r3,zero,800bb90 <_isatty_r+0x28>
 800bbac:	80c00015 	stw	r3,0(r16)
 800bbb0:	dfc00117 	ldw	ra,4(sp)
 800bbb4:	dc000017 	ldw	r16,0(sp)
 800bbb8:	dec00204 	addi	sp,sp,8
 800bbbc:	f800283a 	ret

0800bbc0 <_setlocale_r>:
 800bbc0:	30001826 	beq	r6,zero,800bc24 <_setlocale_r+0x64>
 800bbc4:	01420074 	movhi	r5,2049
 800bbc8:	defffe04 	addi	sp,sp,-8
 800bbcc:	29482204 	addi	r5,r5,8328
 800bbd0:	3009883a 	mov	r4,r6
 800bbd4:	dc000015 	stw	r16,0(sp)
 800bbd8:	dfc00115 	stw	ra,4(sp)
 800bbdc:	3021883a 	mov	r16,r6
 800bbe0:	800bd680 	call	800bd68 <strcmp>
 800bbe4:	1000061e 	bne	r2,zero,800bc00 <_setlocale_r+0x40>
 800bbe8:	00820074 	movhi	r2,2049
 800bbec:	10882104 	addi	r2,r2,8324
 800bbf0:	dfc00117 	ldw	ra,4(sp)
 800bbf4:	dc000017 	ldw	r16,0(sp)
 800bbf8:	dec00204 	addi	sp,sp,8
 800bbfc:	f800283a 	ret
 800bc00:	01420074 	movhi	r5,2049
 800bc04:	29482104 	addi	r5,r5,8324
 800bc08:	8009883a 	mov	r4,r16
 800bc0c:	800bd680 	call	800bd68 <strcmp>
 800bc10:	103ff526 	beq	r2,zero,800bbe8 <_setlocale_r+0x28>
 800bc14:	80800003 	ldbu	r2,0(r16)
 800bc18:	103ff326 	beq	r2,zero,800bbe8 <_setlocale_r+0x28>
 800bc1c:	0005883a 	mov	r2,zero
 800bc20:	003ff306 	br	800bbf0 <_setlocale_r+0x30>
 800bc24:	00820074 	movhi	r2,2049
 800bc28:	10882104 	addi	r2,r2,8324
 800bc2c:	f800283a 	ret

0800bc30 <__locale_mb_cur_max>:
 800bc30:	00820074 	movhi	r2,2049
 800bc34:	108b7407 	ldb	r2,11728(r2)
 800bc38:	f800283a 	ret

0800bc3c <setlocale>:
 800bc3c:	00820074 	movhi	r2,2049
 800bc40:	280d883a 	mov	r6,r5
 800bc44:	200b883a 	mov	r5,r4
 800bc48:	11100c17 	ldw	r4,16432(r2)
 800bc4c:	800bbc01 	jmpi	800bbc0 <_setlocale_r>

0800bc50 <_lseek_r>:
 800bc50:	defffe04 	addi	sp,sp,-8
 800bc54:	2805883a 	mov	r2,r5
 800bc58:	dc000015 	stw	r16,0(sp)
 800bc5c:	300b883a 	mov	r5,r6
 800bc60:	2021883a 	mov	r16,r4
 800bc64:	380d883a 	mov	r6,r7
 800bc68:	1009883a 	mov	r4,r2
 800bc6c:	00820074 	movhi	r2,2049
 800bc70:	dfc00115 	stw	ra,4(sp)
 800bc74:	10172815 	stw	zero,23712(r2)
 800bc78:	800f8dc0 	call	800f8dc <lseek>
 800bc7c:	10ffffd8 	cmpnei	r3,r2,-1
 800bc80:	18000426 	beq	r3,zero,800bc94 <_lseek_r+0x44>
 800bc84:	dfc00117 	ldw	ra,4(sp)
 800bc88:	dc000017 	ldw	r16,0(sp)
 800bc8c:	dec00204 	addi	sp,sp,8
 800bc90:	f800283a 	ret
 800bc94:	00c20074 	movhi	r3,2049
 800bc98:	18d72817 	ldw	r3,23712(r3)
 800bc9c:	183ff926 	beq	r3,zero,800bc84 <_lseek_r+0x34>
 800bca0:	80c00015 	stw	r3,0(r16)
 800bca4:	dfc00117 	ldw	ra,4(sp)
 800bca8:	dc000017 	ldw	r16,0(sp)
 800bcac:	dec00204 	addi	sp,sp,8
 800bcb0:	f800283a 	ret

0800bcb4 <_mbtowc_r>:
 800bcb4:	00820074 	movhi	r2,2049
 800bcb8:	108b6317 	ldw	r2,11660(r2)
 800bcbc:	1000683a 	jmp	r2

0800bcc0 <__ascii_mbtowc>:
 800bcc0:	deffff04 	addi	sp,sp,-4
 800bcc4:	28000826 	beq	r5,zero,800bce8 <__ascii_mbtowc+0x28>
 800bcc8:	30000926 	beq	r6,zero,800bcf0 <__ascii_mbtowc+0x30>
 800bccc:	38000b26 	beq	r7,zero,800bcfc <__ascii_mbtowc+0x3c>
 800bcd0:	30800003 	ldbu	r2,0(r6)
 800bcd4:	28800015 	stw	r2,0(r5)
 800bcd8:	30800003 	ldbu	r2,0(r6)
 800bcdc:	1004c03a 	cmpne	r2,r2,zero
 800bce0:	dec00104 	addi	sp,sp,4
 800bce4:	f800283a 	ret
 800bce8:	d80b883a 	mov	r5,sp
 800bcec:	303ff71e 	bne	r6,zero,800bccc <__ascii_mbtowc+0xc>
 800bcf0:	0005883a 	mov	r2,zero
 800bcf4:	dec00104 	addi	sp,sp,4
 800bcf8:	f800283a 	ret
 800bcfc:	00bfff84 	movi	r2,-2
 800bd00:	003ff706 	br	800bce0 <__ascii_mbtowc+0x20>

0800bd04 <_read_r>:
 800bd04:	defffe04 	addi	sp,sp,-8
 800bd08:	2805883a 	mov	r2,r5
 800bd0c:	dc000015 	stw	r16,0(sp)
 800bd10:	300b883a 	mov	r5,r6
 800bd14:	2021883a 	mov	r16,r4
 800bd18:	380d883a 	mov	r6,r7
 800bd1c:	1009883a 	mov	r4,r2
 800bd20:	00820074 	movhi	r2,2049
 800bd24:	dfc00115 	stw	ra,4(sp)
 800bd28:	10172815 	stw	zero,23712(r2)
 800bd2c:	800fabc0 	call	800fabc <read>
 800bd30:	10ffffd8 	cmpnei	r3,r2,-1
 800bd34:	18000426 	beq	r3,zero,800bd48 <_read_r+0x44>
 800bd38:	dfc00117 	ldw	ra,4(sp)
 800bd3c:	dc000017 	ldw	r16,0(sp)
 800bd40:	dec00204 	addi	sp,sp,8
 800bd44:	f800283a 	ret
 800bd48:	00c20074 	movhi	r3,2049
 800bd4c:	18d72817 	ldw	r3,23712(r3)
 800bd50:	183ff926 	beq	r3,zero,800bd38 <_read_r+0x34>
 800bd54:	80c00015 	stw	r3,0(r16)
 800bd58:	dfc00117 	ldw	ra,4(sp)
 800bd5c:	dc000017 	ldw	r16,0(sp)
 800bd60:	dec00204 	addi	sp,sp,8
 800bd64:	f800283a 	ret

0800bd68 <strcmp>:
 800bd68:	2144b03a 	or	r2,r4,r5
 800bd6c:	108000cc 	andi	r2,r2,3
 800bd70:	1000171e 	bne	r2,zero,800bdd0 <strcmp+0x68>
 800bd74:	20800017 	ldw	r2,0(r4)
 800bd78:	28c00017 	ldw	r3,0(r5)
 800bd7c:	10c0141e 	bne	r2,r3,800bdd0 <strcmp+0x68>
 800bd80:	027fbff4 	movhi	r9,65279
 800bd84:	4a7fbfc4 	addi	r9,r9,-257
 800bd88:	1247883a 	add	r3,r2,r9
 800bd8c:	02202074 	movhi	r8,32897
 800bd90:	0084303a 	nor	r2,zero,r2
 800bd94:	1884703a 	and	r2,r3,r2
 800bd98:	42202004 	addi	r8,r8,-32640
 800bd9c:	1204703a 	and	r2,r2,r8
 800bda0:	10000226 	beq	r2,zero,800bdac <strcmp+0x44>
 800bda4:	00002406 	br	800be38 <strcmp+0xd0>
 800bda8:	1000231e 	bne	r2,zero,800be38 <strcmp+0xd0>
 800bdac:	21000104 	addi	r4,r4,4
 800bdb0:	20c00017 	ldw	r3,0(r4)
 800bdb4:	29400104 	addi	r5,r5,4
 800bdb8:	29800017 	ldw	r6,0(r5)
 800bdbc:	1a45883a 	add	r2,r3,r9
 800bdc0:	00ce303a 	nor	r7,zero,r3
 800bdc4:	11c4703a 	and	r2,r2,r7
 800bdc8:	1204703a 	and	r2,r2,r8
 800bdcc:	19bff626 	beq	r3,r6,800bda8 <strcmp+0x40>
 800bdd0:	20800003 	ldbu	r2,0(r4)
 800bdd4:	10c03fcc 	andi	r3,r2,255
 800bdd8:	18c0201c 	xori	r3,r3,128
 800bddc:	18ffe004 	addi	r3,r3,-128
 800bde0:	18000d26 	beq	r3,zero,800be18 <strcmp+0xb0>
 800bde4:	29800007 	ldb	r6,0(r5)
 800bde8:	10803fcc 	andi	r2,r2,255
 800bdec:	19800326 	beq	r3,r6,800bdfc <strcmp+0x94>
 800bdf0:	00000a06 	br	800be1c <strcmp+0xb4>
 800bdf4:	29800007 	ldb	r6,0(r5)
 800bdf8:	11800b1e 	bne	r2,r6,800be28 <strcmp+0xc0>
 800bdfc:	21000044 	addi	r4,r4,1
 800be00:	20c00003 	ldbu	r3,0(r4)
 800be04:	29400044 	addi	r5,r5,1
 800be08:	18803fcc 	andi	r2,r3,255
 800be0c:	1080201c 	xori	r2,r2,128
 800be10:	10bfe004 	addi	r2,r2,-128
 800be14:	103ff71e 	bne	r2,zero,800bdf4 <strcmp+0x8c>
 800be18:	0005883a 	mov	r2,zero
 800be1c:	28c00003 	ldbu	r3,0(r5)
 800be20:	10c5c83a 	sub	r2,r2,r3
 800be24:	f800283a 	ret
 800be28:	18803fcc 	andi	r2,r3,255
 800be2c:	28c00003 	ldbu	r3,0(r5)
 800be30:	10c5c83a 	sub	r2,r2,r3
 800be34:	f800283a 	ret
 800be38:	0005883a 	mov	r2,zero
 800be3c:	f800283a 	ret

0800be40 <_wcrtomb_r>:
 800be40:	defffa04 	addi	sp,sp,-24
 800be44:	dc400415 	stw	r17,16(sp)
 800be48:	dc000315 	stw	r16,12(sp)
 800be4c:	00820074 	movhi	r2,2049
 800be50:	dfc00515 	stw	ra,20(sp)
 800be54:	2021883a 	mov	r16,r4
 800be58:	3823883a 	mov	r17,r7
 800be5c:	108b6217 	ldw	r2,11656(r2)
 800be60:	28000826 	beq	r5,zero,800be84 <_wcrtomb_r+0x44>
 800be64:	103ee83a 	callr	r2
 800be68:	10ffffd8 	cmpnei	r3,r2,-1
 800be6c:	18000a26 	beq	r3,zero,800be98 <_wcrtomb_r+0x58>
 800be70:	dfc00517 	ldw	ra,20(sp)
 800be74:	dc400417 	ldw	r17,16(sp)
 800be78:	dc000317 	ldw	r16,12(sp)
 800be7c:	dec00604 	addi	sp,sp,24
 800be80:	f800283a 	ret
 800be84:	000d883a 	mov	r6,zero
 800be88:	d9400084 	addi	r5,sp,2
 800be8c:	103ee83a 	callr	r2
 800be90:	10ffffd8 	cmpnei	r3,r2,-1
 800be94:	183ff61e 	bne	r3,zero,800be70 <_wcrtomb_r+0x30>
 800be98:	00802284 	movi	r2,138
 800be9c:	88000015 	stw	zero,0(r17)
 800bea0:	80800015 	stw	r2,0(r16)
 800bea4:	00bfffc4 	movi	r2,-1
 800bea8:	003ff106 	br	800be70 <_wcrtomb_r+0x30>

0800beac <wcrtomb>:
 800beac:	defffa04 	addi	sp,sp,-24
 800beb0:	00820074 	movhi	r2,2049
 800beb4:	dc400415 	stw	r17,16(sp)
 800beb8:	dc000315 	stw	r16,12(sp)
 800bebc:	dfc00515 	stw	ra,20(sp)
 800bec0:	14100c17 	ldw	r16,16432(r2)
 800bec4:	00820074 	movhi	r2,2049
 800bec8:	3023883a 	mov	r17,r6
 800becc:	108b6217 	ldw	r2,11656(r2)
 800bed0:	300f883a 	mov	r7,r6
 800bed4:	20000b26 	beq	r4,zero,800bf04 <wcrtomb+0x58>
 800bed8:	280d883a 	mov	r6,r5
 800bedc:	200b883a 	mov	r5,r4
 800bee0:	8009883a 	mov	r4,r16
 800bee4:	103ee83a 	callr	r2
 800bee8:	10ffffd8 	cmpnei	r3,r2,-1
 800beec:	18000b26 	beq	r3,zero,800bf1c <wcrtomb+0x70>
 800bef0:	dfc00517 	ldw	ra,20(sp)
 800bef4:	dc400417 	ldw	r17,16(sp)
 800bef8:	dc000317 	ldw	r16,12(sp)
 800befc:	dec00604 	addi	sp,sp,24
 800bf00:	f800283a 	ret
 800bf04:	000d883a 	mov	r6,zero
 800bf08:	d9400084 	addi	r5,sp,2
 800bf0c:	8009883a 	mov	r4,r16
 800bf10:	103ee83a 	callr	r2
 800bf14:	10ffffd8 	cmpnei	r3,r2,-1
 800bf18:	183ff51e 	bne	r3,zero,800bef0 <wcrtomb+0x44>
 800bf1c:	00802284 	movi	r2,138
 800bf20:	88000015 	stw	zero,0(r17)
 800bf24:	80800015 	stw	r2,0(r16)
 800bf28:	00bfffc4 	movi	r2,-1
 800bf2c:	003ff006 	br	800bef0 <wcrtomb+0x44>

0800bf30 <_wctomb_r>:
 800bf30:	00820074 	movhi	r2,2049
 800bf34:	108b6217 	ldw	r2,11656(r2)
 800bf38:	1000683a 	jmp	r2

0800bf3c <__ascii_wctomb>:
 800bf3c:	28000926 	beq	r5,zero,800bf64 <__ascii_wctomb+0x28>
 800bf40:	30804030 	cmpltui	r2,r6,256
 800bf44:	10000326 	beq	r2,zero,800bf54 <__ascii_wctomb+0x18>
 800bf48:	29800005 	stb	r6,0(r5)
 800bf4c:	00800044 	movi	r2,1
 800bf50:	f800283a 	ret
 800bf54:	00802284 	movi	r2,138
 800bf58:	20800015 	stw	r2,0(r4)
 800bf5c:	00bfffc4 	movi	r2,-1
 800bf60:	f800283a 	ret
 800bf64:	0005883a 	mov	r2,zero
 800bf68:	f800283a 	ret

0800bf6c <__udivdi3>:
 800bf6c:	defff504 	addi	sp,sp,-44
 800bf70:	dd000515 	stw	r20,20(sp)
 800bf74:	dc000115 	stw	r16,4(sp)
 800bf78:	dfc00a15 	stw	ra,40(sp)
 800bf7c:	df000915 	stw	fp,36(sp)
 800bf80:	ddc00815 	stw	r23,32(sp)
 800bf84:	dd800715 	stw	r22,28(sp)
 800bf88:	dd400615 	stw	r21,24(sp)
 800bf8c:	dcc00415 	stw	r19,16(sp)
 800bf90:	dc800315 	stw	r18,12(sp)
 800bf94:	dc400215 	stw	r17,8(sp)
 800bf98:	2029883a 	mov	r20,r4
 800bf9c:	2821883a 	mov	r16,r5
 800bfa0:	38008c1e 	bne	r7,zero,800c1d4 <__udivdi3+0x268>
 800bfa4:	3827883a 	mov	r19,r7
 800bfa8:	3023883a 	mov	r17,r6
 800bfac:	2025883a 	mov	r18,r4
 800bfb0:	2980422e 	bgeu	r5,r6,800c0bc <__udivdi3+0x150>
 800bfb4:	00bfffd4 	movui	r2,65535
 800bfb8:	282f883a 	mov	r23,r5
 800bfbc:	1180af2e 	bgeu	r2,r6,800c27c <__udivdi3+0x310>
 800bfc0:	00804034 	movhi	r2,256
 800bfc4:	30815936 	bltu	r6,r2,800c52c <__udivdi3+0x5c0>
 800bfc8:	3006d63a 	srli	r3,r6,24
 800bfcc:	04c00604 	movi	r19,24
 800bfd0:	00820074 	movhi	r2,2049
 800bfd4:	1885883a 	add	r2,r3,r2
 800bfd8:	1088c543 	ldbu	r2,8981(r2)
 800bfdc:	14e7883a 	add	r19,r2,r19
 800bfe0:	00800804 	movi	r2,32
 800bfe4:	14c5c83a 	sub	r2,r2,r19
 800bfe8:	10000526 	beq	r2,zero,800c000 <__udivdi3+0x94>
 800bfec:	80a0983a 	sll	r16,r16,r2
 800bff0:	a4e6d83a 	srl	r19,r20,r19
 800bff4:	30a2983a 	sll	r17,r6,r2
 800bff8:	a0a4983a 	sll	r18,r20,r2
 800bffc:	9c2eb03a 	or	r23,r19,r16
 800c000:	882ad43a 	srli	r21,r17,16
 800c004:	b809883a 	mov	r4,r23
 800c008:	8dbfffcc 	andi	r22,r17,65535
 800c00c:	a80b883a 	mov	r5,r21
 800c010:	80029780 	call	8002978 <__umodsi3>
 800c014:	a80b883a 	mov	r5,r21
 800c018:	b809883a 	mov	r4,r23
 800c01c:	1029883a 	mov	r20,r2
 800c020:	80029140 	call	8002914 <__udivsi3>
 800c024:	100b883a 	mov	r5,r2
 800c028:	b009883a 	mov	r4,r22
 800c02c:	1021883a 	mov	r16,r2
 800c030:	80029d40 	call	80029d4 <__mulsi3>
 800c034:	a028943a 	slli	r20,r20,16
 800c038:	9006d43a 	srli	r3,r18,16
 800c03c:	a0c6b03a 	or	r3,r20,r3
 800c040:	1880052e 	bgeu	r3,r2,800c058 <__udivdi3+0xec>
 800c044:	1c47883a 	add	r3,r3,r17
 800c048:	813fffc4 	addi	r4,r16,-1
 800c04c:	1c400136 	bltu	r3,r17,800c054 <__udivdi3+0xe8>
 800c050:	18814736 	bltu	r3,r2,800c570 <__udivdi3+0x604>
 800c054:	2021883a 	mov	r16,r4
 800c058:	18a7c83a 	sub	r19,r3,r2
 800c05c:	9809883a 	mov	r4,r19
 800c060:	a80b883a 	mov	r5,r21
 800c064:	80029780 	call	8002978 <__umodsi3>
 800c068:	1029883a 	mov	r20,r2
 800c06c:	9809883a 	mov	r4,r19
 800c070:	a80b883a 	mov	r5,r21
 800c074:	a028943a 	slli	r20,r20,16
 800c078:	80029140 	call	8002914 <__udivsi3>
 800c07c:	100b883a 	mov	r5,r2
 800c080:	b009883a 	mov	r4,r22
 800c084:	94bfffcc 	andi	r18,r18,65535
 800c088:	1027883a 	mov	r19,r2
 800c08c:	a4a4b03a 	or	r18,r20,r18
 800c090:	80029d40 	call	80029d4 <__mulsi3>
 800c094:	9080052e 	bgeu	r18,r2,800c0ac <__udivdi3+0x140>
 800c098:	8ca5883a 	add	r18,r17,r18
 800c09c:	98ffffc4 	addi	r3,r19,-1
 800c0a0:	94400136 	bltu	r18,r17,800c0a8 <__udivdi3+0x13c>
 800c0a4:	90813036 	bltu	r18,r2,800c568 <__udivdi3+0x5fc>
 800c0a8:	1827883a 	mov	r19,r3
 800c0ac:	8004943a 	slli	r2,r16,16
 800c0b0:	0007883a 	mov	r3,zero
 800c0b4:	14c4b03a 	or	r2,r2,r19
 800c0b8:	00005a06 	br	800c224 <__udivdi3+0x2b8>
 800c0bc:	3000041e 	bne	r6,zero,800c0d0 <__udivdi3+0x164>
 800c0c0:	000b883a 	mov	r5,zero
 800c0c4:	01000044 	movi	r4,1
 800c0c8:	80029140 	call	8002914 <__udivsi3>
 800c0cc:	1023883a 	mov	r17,r2
 800c0d0:	00bfffd4 	movui	r2,65535
 800c0d4:	1440642e 	bgeu	r2,r17,800c268 <__udivdi3+0x2fc>
 800c0d8:	00804034 	movhi	r2,256
 800c0dc:	88811036 	bltu	r17,r2,800c520 <__udivdi3+0x5b4>
 800c0e0:	8806d63a 	srli	r3,r17,24
 800c0e4:	04c00604 	movi	r19,24
 800c0e8:	00820074 	movhi	r2,2049
 800c0ec:	1885883a 	add	r2,r3,r2
 800c0f0:	1088c543 	ldbu	r2,8981(r2)
 800c0f4:	00c00804 	movi	r3,32
 800c0f8:	14e7883a 	add	r19,r2,r19
 800c0fc:	1cc7c83a 	sub	r3,r3,r19
 800c100:	1800631e 	bne	r3,zero,800c290 <__udivdi3+0x324>
 800c104:	882ad43a 	srli	r21,r17,16
 800c108:	8461c83a 	sub	r16,r16,r17
 800c10c:	8dbfffcc 	andi	r22,r17,65535
 800c110:	00c00044 	movi	r3,1
 800c114:	8009883a 	mov	r4,r16
 800c118:	a80b883a 	mov	r5,r21
 800c11c:	d8c00015 	stw	r3,0(sp)
 800c120:	80029780 	call	8002978 <__umodsi3>
 800c124:	8009883a 	mov	r4,r16
 800c128:	a80b883a 	mov	r5,r21
 800c12c:	1029883a 	mov	r20,r2
 800c130:	80029140 	call	8002914 <__udivsi3>
 800c134:	1009883a 	mov	r4,r2
 800c138:	b00b883a 	mov	r5,r22
 800c13c:	1021883a 	mov	r16,r2
 800c140:	80029d40 	call	80029d4 <__mulsi3>
 800c144:	a028943a 	slli	r20,r20,16
 800c148:	9008d43a 	srli	r4,r18,16
 800c14c:	d8c00017 	ldw	r3,0(sp)
 800c150:	a108b03a 	or	r4,r20,r4
 800c154:	2080052e 	bgeu	r4,r2,800c16c <__udivdi3+0x200>
 800c158:	2449883a 	add	r4,r4,r17
 800c15c:	817fffc4 	addi	r5,r16,-1
 800c160:	24400136 	bltu	r4,r17,800c168 <__udivdi3+0x1fc>
 800c164:	20810536 	bltu	r4,r2,800c57c <__udivdi3+0x610>
 800c168:	2821883a 	mov	r16,r5
 800c16c:	20a7c83a 	sub	r19,r4,r2
 800c170:	9809883a 	mov	r4,r19
 800c174:	a80b883a 	mov	r5,r21
 800c178:	d8c00015 	stw	r3,0(sp)
 800c17c:	80029780 	call	8002978 <__umodsi3>
 800c180:	1029883a 	mov	r20,r2
 800c184:	9809883a 	mov	r4,r19
 800c188:	a80b883a 	mov	r5,r21
 800c18c:	a028943a 	slli	r20,r20,16
 800c190:	80029140 	call	8002914 <__udivsi3>
 800c194:	b00b883a 	mov	r5,r22
 800c198:	1009883a 	mov	r4,r2
 800c19c:	94bfffcc 	andi	r18,r18,65535
 800c1a0:	1027883a 	mov	r19,r2
 800c1a4:	a4a4b03a 	or	r18,r20,r18
 800c1a8:	80029d40 	call	80029d4 <__mulsi3>
 800c1ac:	d8c00017 	ldw	r3,0(sp)
 800c1b0:	9080052e 	bgeu	r18,r2,800c1c8 <__udivdi3+0x25c>
 800c1b4:	8ca5883a 	add	r18,r17,r18
 800c1b8:	993fffc4 	addi	r4,r19,-1
 800c1bc:	94400136 	bltu	r18,r17,800c1c4 <__udivdi3+0x258>
 800c1c0:	9080e736 	bltu	r18,r2,800c560 <__udivdi3+0x5f4>
 800c1c4:	2027883a 	mov	r19,r4
 800c1c8:	8004943a 	slli	r2,r16,16
 800c1cc:	14c4b03a 	or	r2,r2,r19
 800c1d0:	00001406 	br	800c224 <__udivdi3+0x2b8>
 800c1d4:	29c01136 	bltu	r5,r7,800c21c <__udivdi3+0x2b0>
 800c1d8:	00bfffd4 	movui	r2,65535
 800c1dc:	11c01d2e 	bgeu	r2,r7,800c254 <__udivdi3+0x2e8>
 800c1e0:	00804034 	movhi	r2,256
 800c1e4:	3880c336 	bltu	r7,r2,800c4f4 <__udivdi3+0x588>
 800c1e8:	3808d63a 	srli	r4,r7,24
 800c1ec:	00c00604 	movi	r3,24
 800c1f0:	00820074 	movhi	r2,2049
 800c1f4:	2085883a 	add	r2,r4,r2
 800c1f8:	1108c543 	ldbu	r4,8981(r2)
 800c1fc:	20c9883a 	add	r4,r4,r3
 800c200:	00c00804 	movi	r3,32
 800c204:	192fc83a 	sub	r23,r3,r4
 800c208:	b800581e 	bne	r23,zero,800c36c <__udivdi3+0x400>
 800c20c:	3c00bc36 	bltu	r7,r16,800c500 <__udivdi3+0x594>
 800c210:	a185403a 	cmpgeu	r2,r20,r6
 800c214:	0007883a 	mov	r3,zero
 800c218:	00000206 	br	800c224 <__udivdi3+0x2b8>
 800c21c:	0007883a 	mov	r3,zero
 800c220:	0005883a 	mov	r2,zero
 800c224:	dfc00a17 	ldw	ra,40(sp)
 800c228:	df000917 	ldw	fp,36(sp)
 800c22c:	ddc00817 	ldw	r23,32(sp)
 800c230:	dd800717 	ldw	r22,28(sp)
 800c234:	dd400617 	ldw	r21,24(sp)
 800c238:	dd000517 	ldw	r20,20(sp)
 800c23c:	dcc00417 	ldw	r19,16(sp)
 800c240:	dc800317 	ldw	r18,12(sp)
 800c244:	dc400217 	ldw	r17,8(sp)
 800c248:	dc000117 	ldw	r16,4(sp)
 800c24c:	dec00b04 	addi	sp,sp,44
 800c250:	f800283a 	ret
 800c254:	38804030 	cmpltui	r2,r7,256
 800c258:	1000ac1e 	bne	r2,zero,800c50c <__udivdi3+0x5a0>
 800c25c:	3808d23a 	srli	r4,r7,8
 800c260:	00c00204 	movi	r3,8
 800c264:	003fe206 	br	800c1f0 <__udivdi3+0x284>
 800c268:	88804030 	cmpltui	r2,r17,256
 800c26c:	1000b21e 	bne	r2,zero,800c538 <__udivdi3+0x5cc>
 800c270:	8806d23a 	srli	r3,r17,8
 800c274:	04c00204 	movi	r19,8
 800c278:	003f9b06 	br	800c0e8 <__udivdi3+0x17c>
 800c27c:	30804030 	cmpltui	r2,r6,256
 800c280:	1000a51e 	bne	r2,zero,800c518 <__udivdi3+0x5ac>
 800c284:	3006d23a 	srli	r3,r6,8
 800c288:	04c00204 	movi	r19,8
 800c28c:	003f5006 	br	800bfd0 <__udivdi3+0x64>
 800c290:	88e2983a 	sll	r17,r17,r3
 800c294:	84eed83a 	srl	r23,r16,r19
 800c298:	a0e4983a 	sll	r18,r20,r3
 800c29c:	882ad43a 	srli	r21,r17,16
 800c2a0:	b809883a 	mov	r4,r23
 800c2a4:	80e0983a 	sll	r16,r16,r3
 800c2a8:	a80b883a 	mov	r5,r21
 800c2ac:	80029780 	call	8002978 <__umodsi3>
 800c2b0:	b809883a 	mov	r4,r23
 800c2b4:	a4e6d83a 	srl	r19,r20,r19
 800c2b8:	a80b883a 	mov	r5,r21
 800c2bc:	1029883a 	mov	r20,r2
 800c2c0:	8dbfffcc 	andi	r22,r17,65535
 800c2c4:	80029140 	call	8002914 <__udivsi3>
 800c2c8:	b009883a 	mov	r4,r22
 800c2cc:	100b883a 	mov	r5,r2
 800c2d0:	9c26b03a 	or	r19,r19,r16
 800c2d4:	102f883a 	mov	r23,r2
 800c2d8:	80029d40 	call	80029d4 <__mulsi3>
 800c2dc:	a028943a 	slli	r20,r20,16
 800c2e0:	9808d43a 	srli	r4,r19,16
 800c2e4:	a108b03a 	or	r4,r20,r4
 800c2e8:	2080062e 	bgeu	r4,r2,800c304 <__udivdi3+0x398>
 800c2ec:	2449883a 	add	r4,r4,r17
 800c2f0:	b8ffffc4 	addi	r3,r23,-1
 800c2f4:	24409836 	bltu	r4,r17,800c558 <__udivdi3+0x5ec>
 800c2f8:	2080972e 	bgeu	r4,r2,800c558 <__udivdi3+0x5ec>
 800c2fc:	bdffff84 	addi	r23,r23,-2
 800c300:	2449883a 	add	r4,r4,r17
 800c304:	20a1c83a 	sub	r16,r4,r2
 800c308:	8009883a 	mov	r4,r16
 800c30c:	a80b883a 	mov	r5,r21
 800c310:	80029780 	call	8002978 <__umodsi3>
 800c314:	1029883a 	mov	r20,r2
 800c318:	8009883a 	mov	r4,r16
 800c31c:	a80b883a 	mov	r5,r21
 800c320:	a020943a 	slli	r16,r20,16
 800c324:	80029140 	call	8002914 <__udivsi3>
 800c328:	100b883a 	mov	r5,r2
 800c32c:	b009883a 	mov	r4,r22
 800c330:	9cffffcc 	andi	r19,r19,65535
 800c334:	1039883a 	mov	fp,r2
 800c338:	84e0b03a 	or	r16,r16,r19
 800c33c:	80029d40 	call	80029d4 <__mulsi3>
 800c340:	8080062e 	bgeu	r16,r2,800c35c <__udivdi3+0x3f0>
 800c344:	8461883a 	add	r16,r16,r17
 800c348:	e0ffffc4 	addi	r3,fp,-1
 800c34c:	84407e36 	bltu	r16,r17,800c548 <__udivdi3+0x5dc>
 800c350:	80807d2e 	bgeu	r16,r2,800c548 <__udivdi3+0x5dc>
 800c354:	e73fff84 	addi	fp,fp,-2
 800c358:	8461883a 	add	r16,r16,r17
 800c35c:	b806943a 	slli	r3,r23,16
 800c360:	80a1c83a 	sub	r16,r16,r2
 800c364:	1f06b03a 	or	r3,r3,fp
 800c368:	003f6a06 	br	800c114 <__udivdi3+0x1a8>
 800c36c:	3106d83a 	srl	r3,r6,r4
 800c370:	3dce983a 	sll	r7,r7,r23
 800c374:	8122d83a 	srl	r17,r16,r4
 800c378:	a104d83a 	srl	r2,r20,r4
 800c37c:	19ecb03a 	or	r22,r3,r7
 800c380:	b024d43a 	srli	r18,r22,16
 800c384:	85e0983a 	sll	r16,r16,r23
 800c388:	8809883a 	mov	r4,r17
 800c38c:	900b883a 	mov	r5,r18
 800c390:	1420b03a 	or	r16,r2,r16
 800c394:	b0bfffcc 	andi	r2,r22,65535
 800c398:	35ea983a 	sll	r21,r6,r23
 800c39c:	d8800015 	stw	r2,0(sp)
 800c3a0:	80029780 	call	8002978 <__umodsi3>
 800c3a4:	900b883a 	mov	r5,r18
 800c3a8:	8809883a 	mov	r4,r17
 800c3ac:	1027883a 	mov	r19,r2
 800c3b0:	80029140 	call	8002914 <__udivsi3>
 800c3b4:	b13fffcc 	andi	r4,r22,65535
 800c3b8:	100b883a 	mov	r5,r2
 800c3bc:	1039883a 	mov	fp,r2
 800c3c0:	80029d40 	call	80029d4 <__mulsi3>
 800c3c4:	9826943a 	slli	r19,r19,16
 800c3c8:	8008d43a 	srli	r4,r16,16
 800c3cc:	9908b03a 	or	r4,r19,r4
 800c3d0:	2080062e 	bgeu	r4,r2,800c3ec <__udivdi3+0x480>
 800c3d4:	2589883a 	add	r4,r4,r22
 800c3d8:	e0ffffc4 	addi	r3,fp,-1
 800c3dc:	25805c36 	bltu	r4,r22,800c550 <__udivdi3+0x5e4>
 800c3e0:	20805b2e 	bgeu	r4,r2,800c550 <__udivdi3+0x5e4>
 800c3e4:	e73fff84 	addi	fp,fp,-2
 800c3e8:	2589883a 	add	r4,r4,r22
 800c3ec:	20a3c83a 	sub	r17,r4,r2
 800c3f0:	8809883a 	mov	r4,r17
 800c3f4:	900b883a 	mov	r5,r18
 800c3f8:	80029780 	call	8002978 <__umodsi3>
 800c3fc:	1027883a 	mov	r19,r2
 800c400:	8809883a 	mov	r4,r17
 800c404:	900b883a 	mov	r5,r18
 800c408:	9826943a 	slli	r19,r19,16
 800c40c:	80029140 	call	8002914 <__udivsi3>
 800c410:	100b883a 	mov	r5,r2
 800c414:	b13fffcc 	andi	r4,r22,65535
 800c418:	843fffcc 	andi	r16,r16,65535
 800c41c:	1023883a 	mov	r17,r2
 800c420:	9c20b03a 	or	r16,r19,r16
 800c424:	80029d40 	call	80029d4 <__mulsi3>
 800c428:	8080062e 	bgeu	r16,r2,800c444 <__udivdi3+0x4d8>
 800c42c:	85a1883a 	add	r16,r16,r22
 800c430:	88ffffc4 	addi	r3,r17,-1
 800c434:	85804236 	bltu	r16,r22,800c540 <__udivdi3+0x5d4>
 800c438:	8080412e 	bgeu	r16,r2,800c540 <__udivdi3+0x5d4>
 800c43c:	8c7fff84 	addi	r17,r17,-2
 800c440:	85a1883a 	add	r16,r16,r22
 800c444:	e038943a 	slli	fp,fp,16
 800c448:	adbfffcc 	andi	r22,r21,65535
 800c44c:	b00b883a 	mov	r5,r22
 800c450:	e478b03a 	or	fp,fp,r17
 800c454:	e024d43a 	srli	r18,fp,16
 800c458:	e4ffffcc 	andi	r19,fp,65535
 800c45c:	9809883a 	mov	r4,r19
 800c460:	a82ad43a 	srli	r21,r21,16
 800c464:	80a1c83a 	sub	r16,r16,r2
 800c468:	80029d40 	call	80029d4 <__mulsi3>
 800c46c:	9009883a 	mov	r4,r18
 800c470:	b00b883a 	mov	r5,r22
 800c474:	d8800015 	stw	r2,0(sp)
 800c478:	80029d40 	call	80029d4 <__mulsi3>
 800c47c:	9009883a 	mov	r4,r18
 800c480:	a80b883a 	mov	r5,r21
 800c484:	1023883a 	mov	r17,r2
 800c488:	80029d40 	call	80029d4 <__mulsi3>
 800c48c:	a80b883a 	mov	r5,r21
 800c490:	9809883a 	mov	r4,r19
 800c494:	1025883a 	mov	r18,r2
 800c498:	80029d40 	call	80029d4 <__mulsi3>
 800c49c:	d9800017 	ldw	r6,0(sp)
 800c4a0:	1445883a 	add	r2,r2,r17
 800c4a4:	3006d43a 	srli	r3,r6,16
 800c4a8:	1885883a 	add	r2,r3,r2
 800c4ac:	1440022e 	bgeu	r2,r17,800c4b8 <__udivdi3+0x54c>
 800c4b0:	00c00074 	movhi	r3,1
 800c4b4:	90e5883a 	add	r18,r18,r3
 800c4b8:	1006d43a 	srli	r3,r2,16
 800c4bc:	1c87883a 	add	r3,r3,r18
 800c4c0:	80c00936 	bltu	r16,r3,800c4e8 <__udivdi3+0x57c>
 800c4c4:	80c00326 	beq	r16,r3,800c4d4 <__udivdi3+0x568>
 800c4c8:	e005883a 	mov	r2,fp
 800c4cc:	0007883a 	mov	r3,zero
 800c4d0:	003f5406 	br	800c224 <__udivdi3+0x2b8>
 800c4d4:	1004943a 	slli	r2,r2,16
 800c4d8:	a5c6983a 	sll	r3,r20,r23
 800c4dc:	31bfffcc 	andi	r6,r6,65535
 800c4e0:	1185883a 	add	r2,r2,r6
 800c4e4:	18bff82e 	bgeu	r3,r2,800c4c8 <__udivdi3+0x55c>
 800c4e8:	e0bfffc4 	addi	r2,fp,-1
 800c4ec:	0007883a 	mov	r3,zero
 800c4f0:	003f4c06 	br	800c224 <__udivdi3+0x2b8>
 800c4f4:	3808d43a 	srli	r4,r7,16
 800c4f8:	00c00404 	movi	r3,16
 800c4fc:	003f3c06 	br	800c1f0 <__udivdi3+0x284>
 800c500:	0007883a 	mov	r3,zero
 800c504:	00800044 	movi	r2,1
 800c508:	003f4606 	br	800c224 <__udivdi3+0x2b8>
 800c50c:	3809883a 	mov	r4,r7
 800c510:	0007883a 	mov	r3,zero
 800c514:	003f3606 	br	800c1f0 <__udivdi3+0x284>
 800c518:	3007883a 	mov	r3,r6
 800c51c:	003eac06 	br	800bfd0 <__udivdi3+0x64>
 800c520:	8806d43a 	srli	r3,r17,16
 800c524:	04c00404 	movi	r19,16
 800c528:	003eef06 	br	800c0e8 <__udivdi3+0x17c>
 800c52c:	3006d43a 	srli	r3,r6,16
 800c530:	04c00404 	movi	r19,16
 800c534:	003ea606 	br	800bfd0 <__udivdi3+0x64>
 800c538:	8807883a 	mov	r3,r17
 800c53c:	003eea06 	br	800c0e8 <__udivdi3+0x17c>
 800c540:	1823883a 	mov	r17,r3
 800c544:	003fbf06 	br	800c444 <__udivdi3+0x4d8>
 800c548:	1839883a 	mov	fp,r3
 800c54c:	003f8306 	br	800c35c <__udivdi3+0x3f0>
 800c550:	1839883a 	mov	fp,r3
 800c554:	003fa506 	br	800c3ec <__udivdi3+0x480>
 800c558:	182f883a 	mov	r23,r3
 800c55c:	003f6906 	br	800c304 <__udivdi3+0x398>
 800c560:	9cffff84 	addi	r19,r19,-2
 800c564:	003f1806 	br	800c1c8 <__udivdi3+0x25c>
 800c568:	9cffff84 	addi	r19,r19,-2
 800c56c:	003ecf06 	br	800c0ac <__udivdi3+0x140>
 800c570:	843fff84 	addi	r16,r16,-2
 800c574:	1c47883a 	add	r3,r3,r17
 800c578:	003eb706 	br	800c058 <__udivdi3+0xec>
 800c57c:	843fff84 	addi	r16,r16,-2
 800c580:	2449883a 	add	r4,r4,r17
 800c584:	003ef906 	br	800c16c <__udivdi3+0x200>

0800c588 <__umoddi3>:
 800c588:	defff304 	addi	sp,sp,-52
 800c58c:	dc400415 	stw	r17,16(sp)
 800c590:	dc000315 	stw	r16,12(sp)
 800c594:	dfc00c15 	stw	ra,48(sp)
 800c598:	df000b15 	stw	fp,44(sp)
 800c59c:	ddc00a15 	stw	r23,40(sp)
 800c5a0:	dd800915 	stw	r22,36(sp)
 800c5a4:	dd400815 	stw	r21,32(sp)
 800c5a8:	dd000715 	stw	r20,28(sp)
 800c5ac:	dcc00615 	stw	r19,24(sp)
 800c5b0:	dc800515 	stw	r18,20(sp)
 800c5b4:	2823883a 	mov	r17,r5
 800c5b8:	2021883a 	mov	r16,r4
 800c5bc:	3800781e 	bne	r7,zero,800c7a0 <__umoddi3+0x218>
 800c5c0:	3825883a 	mov	r18,r7
 800c5c4:	3027883a 	mov	r19,r6
 800c5c8:	2029883a 	mov	r20,r4
 800c5cc:	29803d2e 	bgeu	r5,r6,800c6c4 <__umoddi3+0x13c>
 800c5d0:	00bfffd4 	movui	r2,65535
 800c5d4:	2839883a 	mov	fp,r5
 800c5d8:	11809f36 	bltu	r2,r6,800c858 <__umoddi3+0x2d0>
 800c5dc:	30804030 	cmpltui	r2,r6,256
 800c5e0:	1001451e 	bne	r2,zero,800caf8 <__umoddi3+0x570>
 800c5e4:	3006d23a 	srli	r3,r6,8
 800c5e8:	04800204 	movi	r18,8
 800c5ec:	00820074 	movhi	r2,2049
 800c5f0:	1885883a 	add	r2,r3,r2
 800c5f4:	1108c543 	ldbu	r4,8981(r2)
 800c5f8:	00800804 	movi	r2,32
 800c5fc:	2489883a 	add	r4,r4,r18
 800c600:	1125c83a 	sub	r18,r2,r4
 800c604:	90000526 	beq	r18,zero,800c61c <__umoddi3+0x94>
 800c608:	8ca2983a 	sll	r17,r17,r18
 800c60c:	8108d83a 	srl	r4,r16,r4
 800c610:	34a6983a 	sll	r19,r6,r18
 800c614:	84a8983a 	sll	r20,r16,r18
 800c618:	2478b03a 	or	fp,r4,r17
 800c61c:	982cd43a 	srli	r22,r19,16
 800c620:	e009883a 	mov	r4,fp
 800c624:	9dffffcc 	andi	r23,r19,65535
 800c628:	b00b883a 	mov	r5,r22
 800c62c:	80029780 	call	8002978 <__umodsi3>
 800c630:	b00b883a 	mov	r5,r22
 800c634:	e009883a 	mov	r4,fp
 800c638:	102b883a 	mov	r21,r2
 800c63c:	80029140 	call	8002914 <__udivsi3>
 800c640:	100b883a 	mov	r5,r2
 800c644:	b809883a 	mov	r4,r23
 800c648:	80029d40 	call	80029d4 <__mulsi3>
 800c64c:	a82a943a 	slli	r21,r21,16
 800c650:	a006d43a 	srli	r3,r20,16
 800c654:	a8c6b03a 	or	r3,r21,r3
 800c658:	1880032e 	bgeu	r3,r2,800c668 <__umoddi3+0xe0>
 800c65c:	1cc7883a 	add	r3,r3,r19
 800c660:	1cc00136 	bltu	r3,r19,800c668 <__umoddi3+0xe0>
 800c664:	18813836 	bltu	r3,r2,800cb48 <__umoddi3+0x5c0>
 800c668:	18a1c83a 	sub	r16,r3,r2
 800c66c:	b00b883a 	mov	r5,r22
 800c670:	8009883a 	mov	r4,r16
 800c674:	80029780 	call	8002978 <__umodsi3>
 800c678:	b00b883a 	mov	r5,r22
 800c67c:	8009883a 	mov	r4,r16
 800c680:	1023883a 	mov	r17,r2
 800c684:	80029140 	call	8002914 <__udivsi3>
 800c688:	100b883a 	mov	r5,r2
 800c68c:	b809883a 	mov	r4,r23
 800c690:	8822943a 	slli	r17,r17,16
 800c694:	80029d40 	call	80029d4 <__mulsi3>
 800c698:	a0ffffcc 	andi	r3,r20,65535
 800c69c:	88c6b03a 	or	r3,r17,r3
 800c6a0:	1880042e 	bgeu	r3,r2,800c6b4 <__umoddi3+0x12c>
 800c6a4:	1cc7883a 	add	r3,r3,r19
 800c6a8:	1cc00236 	bltu	r3,r19,800c6b4 <__umoddi3+0x12c>
 800c6ac:	1880012e 	bgeu	r3,r2,800c6b4 <__umoddi3+0x12c>
 800c6b0:	1cc7883a 	add	r3,r3,r19
 800c6b4:	1885c83a 	sub	r2,r3,r2
 800c6b8:	1484d83a 	srl	r2,r2,r18
 800c6bc:	0007883a 	mov	r3,zero
 800c6c0:	00003a06 	br	800c7ac <__umoddi3+0x224>
 800c6c4:	3000041e 	bne	r6,zero,800c6d8 <__umoddi3+0x150>
 800c6c8:	000b883a 	mov	r5,zero
 800c6cc:	01000044 	movi	r4,1
 800c6d0:	80029140 	call	8002914 <__udivsi3>
 800c6d4:	1027883a 	mov	r19,r2
 800c6d8:	00bfffd4 	movui	r2,65535
 800c6dc:	14c0592e 	bgeu	r2,r19,800c844 <__umoddi3+0x2bc>
 800c6e0:	00804034 	movhi	r2,256
 800c6e4:	98810c36 	bltu	r19,r2,800cb18 <__umoddi3+0x590>
 800c6e8:	9806d63a 	srli	r3,r19,24
 800c6ec:	04800604 	movi	r18,24
 800c6f0:	00820074 	movhi	r2,2049
 800c6f4:	1885883a 	add	r2,r3,r2
 800c6f8:	10c8c543 	ldbu	r3,8981(r2)
 800c6fc:	00800804 	movi	r2,32
 800c700:	1c87883a 	add	r3,r3,r18
 800c704:	10e5c83a 	sub	r18,r2,r3
 800c708:	9000c51e 	bne	r18,zero,800ca20 <__umoddi3+0x498>
 800c70c:	982ad43a 	srli	r21,r19,16
 800c710:	8ce3c83a 	sub	r17,r17,r19
 800c714:	9dbfffcc 	andi	r22,r19,65535
 800c718:	a80b883a 	mov	r5,r21
 800c71c:	8809883a 	mov	r4,r17
 800c720:	80029780 	call	8002978 <__umodsi3>
 800c724:	a80b883a 	mov	r5,r21
 800c728:	8809883a 	mov	r4,r17
 800c72c:	102f883a 	mov	r23,r2
 800c730:	80029140 	call	8002914 <__udivsi3>
 800c734:	b00b883a 	mov	r5,r22
 800c738:	1009883a 	mov	r4,r2
 800c73c:	80029d40 	call	80029d4 <__mulsi3>
 800c740:	b82e943a 	slli	r23,r23,16
 800c744:	a006d43a 	srli	r3,r20,16
 800c748:	b8c6b03a 	or	r3,r23,r3
 800c74c:	1880042e 	bgeu	r3,r2,800c760 <__umoddi3+0x1d8>
 800c750:	1cc7883a 	add	r3,r3,r19
 800c754:	1cc00236 	bltu	r3,r19,800c760 <__umoddi3+0x1d8>
 800c758:	1880012e 	bgeu	r3,r2,800c760 <__umoddi3+0x1d8>
 800c75c:	1cc7883a 	add	r3,r3,r19
 800c760:	18a1c83a 	sub	r16,r3,r2
 800c764:	a80b883a 	mov	r5,r21
 800c768:	8009883a 	mov	r4,r16
 800c76c:	80029780 	call	8002978 <__umodsi3>
 800c770:	1023883a 	mov	r17,r2
 800c774:	a80b883a 	mov	r5,r21
 800c778:	8009883a 	mov	r4,r16
 800c77c:	80029140 	call	8002914 <__udivsi3>
 800c780:	8822943a 	slli	r17,r17,16
 800c784:	b00b883a 	mov	r5,r22
 800c788:	1009883a 	mov	r4,r2
 800c78c:	80029d40 	call	80029d4 <__mulsi3>
 800c790:	a53fffcc 	andi	r20,r20,65535
 800c794:	8d06b03a 	or	r3,r17,r20
 800c798:	18bfc62e 	bgeu	r3,r2,800c6b4 <__umoddi3+0x12c>
 800c79c:	003fc106 	br	800c6a4 <__umoddi3+0x11c>
 800c7a0:	2005883a 	mov	r2,r4
 800c7a4:	29c00d2e 	bgeu	r5,r7,800c7dc <__umoddi3+0x254>
 800c7a8:	2807883a 	mov	r3,r5
 800c7ac:	dfc00c17 	ldw	ra,48(sp)
 800c7b0:	df000b17 	ldw	fp,44(sp)
 800c7b4:	ddc00a17 	ldw	r23,40(sp)
 800c7b8:	dd800917 	ldw	r22,36(sp)
 800c7bc:	dd400817 	ldw	r21,32(sp)
 800c7c0:	dd000717 	ldw	r20,28(sp)
 800c7c4:	dcc00617 	ldw	r19,24(sp)
 800c7c8:	dc800517 	ldw	r18,20(sp)
 800c7cc:	dc400417 	ldw	r17,16(sp)
 800c7d0:	dc000317 	ldw	r16,12(sp)
 800c7d4:	dec00d04 	addi	sp,sp,52
 800c7d8:	f800283a 	ret
 800c7dc:	013fffd4 	movui	r4,65535
 800c7e0:	2807883a 	mov	r3,r5
 800c7e4:	21c0122e 	bgeu	r4,r7,800c830 <__umoddi3+0x2a8>
 800c7e8:	01004034 	movhi	r4,256
 800c7ec:	3900c736 	bltu	r7,r4,800cb0c <__umoddi3+0x584>
 800c7f0:	3810d63a 	srli	r8,r7,24
 800c7f4:	01400604 	movi	r5,24
 800c7f8:	01020074 	movhi	r4,2049
 800c7fc:	4109883a 	add	r4,r8,r4
 800c800:	2508c543 	ldbu	r20,8981(r4)
 800c804:	05400804 	movi	r21,32
 800c808:	a169883a 	add	r20,r20,r5
 800c80c:	ad2bc83a 	sub	r21,r21,r20
 800c810:	a800161e 	bne	r21,zero,800c86c <__umoddi3+0x2e4>
 800c814:	3c400136 	bltu	r7,r17,800c81c <__umoddi3+0x294>
 800c818:	81bfe436 	bltu	r16,r6,800c7ac <__umoddi3+0x224>
 800c81c:	8185c83a 	sub	r2,r16,r6
 800c820:	89cfc83a 	sub	r7,r17,r7
 800c824:	8087803a 	cmpltu	r3,r16,r2
 800c828:	38c7c83a 	sub	r3,r7,r3
 800c82c:	003fdf06 	br	800c7ac <__umoddi3+0x224>
 800c830:	39004030 	cmpltui	r4,r7,256
 800c834:	2000b21e 	bne	r4,zero,800cb00 <__umoddi3+0x578>
 800c838:	3810d23a 	srli	r8,r7,8
 800c83c:	01400204 	movi	r5,8
 800c840:	003fed06 	br	800c7f8 <__umoddi3+0x270>
 800c844:	98804030 	cmpltui	r2,r19,256
 800c848:	1000b61e 	bne	r2,zero,800cb24 <__umoddi3+0x59c>
 800c84c:	9806d23a 	srli	r3,r19,8
 800c850:	04800204 	movi	r18,8
 800c854:	003fa606 	br	800c6f0 <__umoddi3+0x168>
 800c858:	00804034 	movhi	r2,256
 800c85c:	3080b336 	bltu	r6,r2,800cb2c <__umoddi3+0x5a4>
 800c860:	3006d63a 	srli	r3,r6,24
 800c864:	04800604 	movi	r18,24
 800c868:	003f6006 	br	800c5ec <__umoddi3+0x64>
 800c86c:	3508d83a 	srl	r4,r6,r20
 800c870:	3d4e983a 	sll	r7,r7,r21
 800c874:	8d38d83a 	srl	fp,r17,r20
 800c878:	8504d83a 	srl	r2,r16,r20
 800c87c:	21e4b03a 	or	r18,r4,r7
 800c880:	902cd43a 	srli	r22,r18,16
 800c884:	8d62983a 	sll	r17,r17,r21
 800c888:	e009883a 	mov	r4,fp
 800c88c:	b00b883a 	mov	r5,r22
 800c890:	3566983a 	sll	r19,r6,r21
 800c894:	1462b03a 	or	r17,r2,r17
 800c898:	80029780 	call	8002978 <__umodsi3>
 800c89c:	e009883a 	mov	r4,fp
 800c8a0:	b00b883a 	mov	r5,r22
 800c8a4:	95ffffcc 	andi	r23,r18,65535
 800c8a8:	d8800015 	stw	r2,0(sp)
 800c8ac:	80029140 	call	8002914 <__udivsi3>
 800c8b0:	100b883a 	mov	r5,r2
 800c8b4:	b809883a 	mov	r4,r23
 800c8b8:	1039883a 	mov	fp,r2
 800c8bc:	80029d40 	call	80029d4 <__mulsi3>
 800c8c0:	d9800017 	ldw	r6,0(sp)
 800c8c4:	8806d43a 	srli	r3,r17,16
 800c8c8:	8560983a 	sll	r16,r16,r21
 800c8cc:	300c943a 	slli	r6,r6,16
 800c8d0:	30c6b03a 	or	r3,r6,r3
 800c8d4:	1880062e 	bgeu	r3,r2,800c8f0 <__umoddi3+0x368>
 800c8d8:	1c87883a 	add	r3,r3,r18
 800c8dc:	e13fffc4 	addi	r4,fp,-1
 800c8e0:	1c809736 	bltu	r3,r18,800cb40 <__umoddi3+0x5b8>
 800c8e4:	1880962e 	bgeu	r3,r2,800cb40 <__umoddi3+0x5b8>
 800c8e8:	e73fff84 	addi	fp,fp,-2
 800c8ec:	1c87883a 	add	r3,r3,r18
 800c8f0:	1887c83a 	sub	r3,r3,r2
 800c8f4:	b00b883a 	mov	r5,r22
 800c8f8:	1809883a 	mov	r4,r3
 800c8fc:	d8c00115 	stw	r3,4(sp)
 800c900:	80029780 	call	8002978 <__umodsi3>
 800c904:	d8c00117 	ldw	r3,4(sp)
 800c908:	b00b883a 	mov	r5,r22
 800c90c:	d8800015 	stw	r2,0(sp)
 800c910:	1809883a 	mov	r4,r3
 800c914:	80029140 	call	8002914 <__udivsi3>
 800c918:	100b883a 	mov	r5,r2
 800c91c:	b809883a 	mov	r4,r23
 800c920:	102d883a 	mov	r22,r2
 800c924:	80029d40 	call	80029d4 <__mulsi3>
 800c928:	d9800017 	ldw	r6,0(sp)
 800c92c:	8c7fffcc 	andi	r17,r17,65535
 800c930:	300c943a 	slli	r6,r6,16
 800c934:	3462b03a 	or	r17,r6,r17
 800c938:	8880062e 	bgeu	r17,r2,800c954 <__umoddi3+0x3cc>
 800c93c:	8ca3883a 	add	r17,r17,r18
 800c940:	b0ffffc4 	addi	r3,r22,-1
 800c944:	8c807c36 	bltu	r17,r18,800cb38 <__umoddi3+0x5b0>
 800c948:	88807b2e 	bgeu	r17,r2,800cb38 <__umoddi3+0x5b0>
 800c94c:	b5bfff84 	addi	r22,r22,-2
 800c950:	8ca3883a 	add	r17,r17,r18
 800c954:	e038943a 	slli	fp,fp,16
 800c958:	980cd43a 	srli	r6,r19,16
 800c95c:	98ffffcc 	andi	r3,r19,65535
 800c960:	e5b8b03a 	or	fp,fp,r22
 800c964:	e02cd43a 	srli	r22,fp,16
 800c968:	e73fffcc 	andi	fp,fp,65535
 800c96c:	180b883a 	mov	r5,r3
 800c970:	e009883a 	mov	r4,fp
 800c974:	d9800215 	stw	r6,8(sp)
 800c978:	d8c00015 	stw	r3,0(sp)
 800c97c:	88a3c83a 	sub	r17,r17,r2
 800c980:	80029d40 	call	80029d4 <__mulsi3>
 800c984:	d8c00017 	ldw	r3,0(sp)
 800c988:	b009883a 	mov	r4,r22
 800c98c:	102f883a 	mov	r23,r2
 800c990:	180b883a 	mov	r5,r3
 800c994:	80029d40 	call	80029d4 <__mulsi3>
 800c998:	d9800217 	ldw	r6,8(sp)
 800c99c:	b009883a 	mov	r4,r22
 800c9a0:	d8800115 	stw	r2,4(sp)
 800c9a4:	300b883a 	mov	r5,r6
 800c9a8:	d9800015 	stw	r6,0(sp)
 800c9ac:	80029d40 	call	80029d4 <__mulsi3>
 800c9b0:	d9800017 	ldw	r6,0(sp)
 800c9b4:	e009883a 	mov	r4,fp
 800c9b8:	102d883a 	mov	r22,r2
 800c9bc:	300b883a 	mov	r5,r6
 800c9c0:	80029d40 	call	80029d4 <__mulsi3>
 800c9c4:	d9c00117 	ldw	r7,4(sp)
 800c9c8:	b808d43a 	srli	r4,r23,16
 800c9cc:	11c5883a 	add	r2,r2,r7
 800c9d0:	2085883a 	add	r2,r4,r2
 800c9d4:	11c0022e 	bgeu	r2,r7,800c9e0 <__umoddi3+0x458>
 800c9d8:	00c00074 	movhi	r3,1
 800c9dc:	b0ed883a 	add	r22,r22,r3
 800c9e0:	1006d43a 	srli	r3,r2,16
 800c9e4:	1004943a 	slli	r2,r2,16
 800c9e8:	bdffffcc 	andi	r23,r23,65535
 800c9ec:	1d87883a 	add	r3,r3,r22
 800c9f0:	15c5883a 	add	r2,r2,r23
 800c9f4:	88c03a36 	bltu	r17,r3,800cae0 <__umoddi3+0x558>
 800c9f8:	88c03826 	beq	r17,r3,800cadc <__umoddi3+0x554>
 800c9fc:	8085c83a 	sub	r2,r16,r2
 800ca00:	80a1803a 	cmpltu	r16,r16,r2
 800ca04:	88c7c83a 	sub	r3,r17,r3
 800ca08:	1c07c83a 	sub	r3,r3,r16
 800ca0c:	1d20983a 	sll	r16,r3,r20
 800ca10:	1544d83a 	srl	r2,r2,r21
 800ca14:	1d46d83a 	srl	r3,r3,r21
 800ca18:	8084b03a 	or	r2,r16,r2
 800ca1c:	003f6306 	br	800c7ac <__umoddi3+0x224>
 800ca20:	9ca6983a 	sll	r19,r19,r18
 800ca24:	88f8d83a 	srl	fp,r17,r3
 800ca28:	80c6d83a 	srl	r3,r16,r3
 800ca2c:	982ad43a 	srli	r21,r19,16
 800ca30:	8ca2983a 	sll	r17,r17,r18
 800ca34:	e009883a 	mov	r4,fp
 800ca38:	a80b883a 	mov	r5,r21
 800ca3c:	1c6eb03a 	or	r23,r3,r17
 800ca40:	80029780 	call	8002978 <__umodsi3>
 800ca44:	a80b883a 	mov	r5,r21
 800ca48:	e009883a 	mov	r4,fp
 800ca4c:	1029883a 	mov	r20,r2
 800ca50:	9dbfffcc 	andi	r22,r19,65535
 800ca54:	80029140 	call	8002914 <__udivsi3>
 800ca58:	b009883a 	mov	r4,r22
 800ca5c:	100b883a 	mov	r5,r2
 800ca60:	80029d40 	call	80029d4 <__mulsi3>
 800ca64:	a006943a 	slli	r3,r20,16
 800ca68:	b808d43a 	srli	r4,r23,16
 800ca6c:	84a8983a 	sll	r20,r16,r18
 800ca70:	1906b03a 	or	r3,r3,r4
 800ca74:	1880042e 	bgeu	r3,r2,800ca88 <__umoddi3+0x500>
 800ca78:	1cc7883a 	add	r3,r3,r19
 800ca7c:	1cc00236 	bltu	r3,r19,800ca88 <__umoddi3+0x500>
 800ca80:	1880012e 	bgeu	r3,r2,800ca88 <__umoddi3+0x500>
 800ca84:	1cc7883a 	add	r3,r3,r19
 800ca88:	18a3c83a 	sub	r17,r3,r2
 800ca8c:	8809883a 	mov	r4,r17
 800ca90:	a80b883a 	mov	r5,r21
 800ca94:	80029780 	call	8002978 <__umodsi3>
 800ca98:	1021883a 	mov	r16,r2
 800ca9c:	8809883a 	mov	r4,r17
 800caa0:	a80b883a 	mov	r5,r21
 800caa4:	8022943a 	slli	r17,r16,16
 800caa8:	80029140 	call	8002914 <__udivsi3>
 800caac:	100b883a 	mov	r5,r2
 800cab0:	b009883a 	mov	r4,r22
 800cab4:	bdffffcc 	andi	r23,r23,65535
 800cab8:	80029d40 	call	80029d4 <__mulsi3>
 800cabc:	8de2b03a 	or	r17,r17,r23
 800cac0:	8880042e 	bgeu	r17,r2,800cad4 <__umoddi3+0x54c>
 800cac4:	8ce3883a 	add	r17,r17,r19
 800cac8:	8cc00236 	bltu	r17,r19,800cad4 <__umoddi3+0x54c>
 800cacc:	8880012e 	bgeu	r17,r2,800cad4 <__umoddi3+0x54c>
 800cad0:	8ce3883a 	add	r17,r17,r19
 800cad4:	88a3c83a 	sub	r17,r17,r2
 800cad8:	003f0f06 	br	800c718 <__umoddi3+0x190>
 800cadc:	80bfc72e 	bgeu	r16,r2,800c9fc <__umoddi3+0x474>
 800cae0:	14e7c83a 	sub	r19,r2,r19
 800cae4:	14c5803a 	cmpltu	r2,r2,r19
 800cae8:	1489883a 	add	r4,r2,r18
 800caec:	1907c83a 	sub	r3,r3,r4
 800caf0:	9805883a 	mov	r2,r19
 800caf4:	003fc106 	br	800c9fc <__umoddi3+0x474>
 800caf8:	3007883a 	mov	r3,r6
 800cafc:	003ebb06 	br	800c5ec <__umoddi3+0x64>
 800cb00:	3811883a 	mov	r8,r7
 800cb04:	000b883a 	mov	r5,zero
 800cb08:	003f3b06 	br	800c7f8 <__umoddi3+0x270>
 800cb0c:	3810d43a 	srli	r8,r7,16
 800cb10:	01400404 	movi	r5,16
 800cb14:	003f3806 	br	800c7f8 <__umoddi3+0x270>
 800cb18:	9806d43a 	srli	r3,r19,16
 800cb1c:	04800404 	movi	r18,16
 800cb20:	003ef306 	br	800c6f0 <__umoddi3+0x168>
 800cb24:	9807883a 	mov	r3,r19
 800cb28:	003ef106 	br	800c6f0 <__umoddi3+0x168>
 800cb2c:	3006d43a 	srli	r3,r6,16
 800cb30:	04800404 	movi	r18,16
 800cb34:	003ead06 	br	800c5ec <__umoddi3+0x64>
 800cb38:	182d883a 	mov	r22,r3
 800cb3c:	003f8506 	br	800c954 <__umoddi3+0x3cc>
 800cb40:	2039883a 	mov	fp,r4
 800cb44:	003f6a06 	br	800c8f0 <__umoddi3+0x368>
 800cb48:	1cc7883a 	add	r3,r3,r19
 800cb4c:	003ec606 	br	800c668 <__umoddi3+0xe0>

0800cb50 <__adddf3>:
 800cb50:	02000434 	movhi	r8,16
 800cb54:	defffb04 	addi	sp,sp,-20
 800cb58:	423fffc4 	addi	r8,r8,-1
 800cb5c:	2a12703a 	and	r9,r5,r8
 800cb60:	3a06703a 	and	r3,r7,r8
 800cb64:	3804d53a 	srli	r2,r7,20
 800cb68:	dc000015 	stw	r16,0(sp)
 800cb6c:	2820d53a 	srli	r16,r5,20
 800cb70:	2016d77a 	srli	r11,r4,29
 800cb74:	3014d77a 	srli	r10,r6,29
 800cb78:	280ad7fa 	srli	r5,r5,31
 800cb7c:	481290fa 	slli	r9,r9,3
 800cb80:	180690fa 	slli	r3,r3,3
 800cb84:	380ed7fa 	srli	r7,r7,31
 800cb88:	dc400115 	stw	r17,4(sp)
 800cb8c:	8401ffcc 	andi	r16,r16,2047
 800cb90:	1081ffcc 	andi	r2,r2,2047
 800cb94:	dfc00415 	stw	ra,16(sp)
 800cb98:	dcc00315 	stw	r19,12(sp)
 800cb9c:	dc800215 	stw	r18,8(sp)
 800cba0:	5a52b03a 	or	r9,r11,r9
 800cba4:	50c6b03a 	or	r3,r10,r3
 800cba8:	2823883a 	mov	r17,r5
 800cbac:	201890fa 	slli	r12,r4,3
 800cbb0:	301690fa 	slli	r11,r6,3
 800cbb4:	8095c83a 	sub	r10,r16,r2
 800cbb8:	29c06a26 	beq	r5,r7,800cd64 <__adddf3+0x214>
 800cbbc:	0280590e 	bge	zero,r10,800cd24 <__adddf3+0x1d4>
 800cbc0:	10007c26 	beq	r2,zero,800cdb4 <__adddf3+0x264>
 800cbc4:	8081ffd8 	cmpnei	r2,r16,2047
 800cbc8:	10010726 	beq	r2,zero,800cfe8 <__adddf3+0x498>
 800cbcc:	18c02034 	orhi	r3,r3,128
 800cbd0:	50800e48 	cmpgei	r2,r10,57
 800cbd4:	1000ed1e 	bne	r2,zero,800cf8c <__adddf3+0x43c>
 800cbd8:	50800808 	cmpgei	r2,r10,32
 800cbdc:	1001541e 	bne	r2,zero,800d130 <__adddf3+0x5e0>
 800cbe0:	01000804 	movi	r4,32
 800cbe4:	2289c83a 	sub	r4,r4,r10
 800cbe8:	1926983a 	sll	r19,r3,r4
 800cbec:	5a84d83a 	srl	r2,r11,r10
 800cbf0:	5908983a 	sll	r4,r11,r4
 800cbf4:	1a86d83a 	srl	r3,r3,r10
 800cbf8:	98a6b03a 	or	r19,r19,r2
 800cbfc:	2016c03a 	cmpne	r11,r4,zero
 800cc00:	9ae6b03a 	or	r19,r19,r11
 800cc04:	48d3c83a 	sub	r9,r9,r3
 800cc08:	64e7c83a 	sub	r19,r12,r19
 800cc0c:	64c9803a 	cmpltu	r4,r12,r19
 800cc10:	4909c83a 	sub	r4,r9,r4
 800cc14:	2080202c 	andhi	r2,r4,128
 800cc18:	10008726 	beq	r2,zero,800ce38 <__adddf3+0x2e8>
 800cc1c:	02402034 	movhi	r9,128
 800cc20:	4a7fffc4 	addi	r9,r9,-1
 800cc24:	2264703a 	and	r18,r4,r9
 800cc28:	9000cf26 	beq	r18,zero,800cf68 <__adddf3+0x418>
 800cc2c:	9009883a 	mov	r4,r18
 800cc30:	800f4380 	call	800f438 <__clzsi2>
 800cc34:	10fffe04 	addi	r3,r2,-8
 800cc38:	01000804 	movi	r4,32
 800cc3c:	20c9c83a 	sub	r4,r4,r3
 800cc40:	990ad83a 	srl	r5,r19,r4
 800cc44:	90c8983a 	sll	r4,r18,r3
 800cc48:	98e6983a 	sll	r19,r19,r3
 800cc4c:	2908b03a 	or	r4,r5,r4
 800cc50:	1c00be16 	blt	r3,r16,800cf4c <__adddf3+0x3fc>
 800cc54:	1c21c83a 	sub	r16,r3,r16
 800cc58:	81400044 	addi	r5,r16,1
 800cc5c:	28800808 	cmpgei	r2,r5,32
 800cc60:	10011b1e 	bne	r2,zero,800d0d0 <__adddf3+0x580>
 800cc64:	00800804 	movi	r2,32
 800cc68:	1145c83a 	sub	r2,r2,r5
 800cc6c:	9946d83a 	srl	r3,r19,r5
 800cc70:	98a6983a 	sll	r19,r19,r2
 800cc74:	2084983a 	sll	r2,r4,r2
 800cc78:	2148d83a 	srl	r4,r4,r5
 800cc7c:	9826c03a 	cmpne	r19,r19,zero
 800cc80:	10c4b03a 	or	r2,r2,r3
 800cc84:	14e6b03a 	or	r19,r2,r19
 800cc88:	0021883a 	mov	r16,zero
 800cc8c:	988001cc 	andi	r2,r19,7
 800cc90:	10000726 	beq	r2,zero,800ccb0 <__adddf3+0x160>
 800cc94:	988003cc 	andi	r2,r19,15
 800cc98:	10800120 	cmpeqi	r2,r2,4
 800cc9c:	1000041e 	bne	r2,zero,800ccb0 <__adddf3+0x160>
 800cca0:	99400104 	addi	r5,r19,4
 800cca4:	2ce7803a 	cmpltu	r19,r5,r19
 800cca8:	24c9883a 	add	r4,r4,r19
 800ccac:	2827883a 	mov	r19,r5
 800ccb0:	2080202c 	andhi	r2,r4,128
 800ccb4:	10006226 	beq	r2,zero,800ce40 <__adddf3+0x2f0>
 800ccb8:	84000044 	addi	r16,r16,1
 800ccbc:	8081ffe0 	cmpeqi	r2,r16,2047
 800ccc0:	8401ffcc 	andi	r16,r16,2047
 800ccc4:	1000731e 	bne	r2,zero,800ce94 <__adddf3+0x344>
 800ccc8:	017fe034 	movhi	r5,65408
 800cccc:	297fffc4 	addi	r5,r5,-1
 800ccd0:	214a703a 	and	r5,r4,r5
 800ccd4:	2804977a 	slli	r2,r5,29
 800ccd8:	280a927a 	slli	r5,r5,9
 800ccdc:	9826d0fa 	srli	r19,r19,3
 800cce0:	2808d33a 	srli	r4,r5,12
 800cce4:	14c4b03a 	or	r2,r2,r19
 800cce8:	8020953a 	slli	r16,r16,20
 800ccec:	00c00434 	movhi	r3,16
 800ccf0:	8c403fcc 	andi	r17,r17,255
 800ccf4:	882297fa 	slli	r17,r17,31
 800ccf8:	18ffffc4 	addi	r3,r3,-1
 800ccfc:	20c6703a 	and	r3,r4,r3
 800cd00:	1c06b03a 	or	r3,r3,r16
 800cd04:	1c46b03a 	or	r3,r3,r17
 800cd08:	dfc00417 	ldw	ra,16(sp)
 800cd0c:	dcc00317 	ldw	r19,12(sp)
 800cd10:	dc800217 	ldw	r18,8(sp)
 800cd14:	dc400117 	ldw	r17,4(sp)
 800cd18:	dc000017 	ldw	r16,0(sp)
 800cd1c:	dec00504 	addi	sp,sp,20
 800cd20:	f800283a 	ret
 800cd24:	50002b1e 	bne	r10,zero,800cdd4 <__adddf3+0x284>
 800cd28:	80800044 	addi	r2,r16,1
 800cd2c:	1081ff8c 	andi	r2,r2,2046
 800cd30:	1000a11e 	bne	r2,zero,800cfb8 <__adddf3+0x468>
 800cd34:	4b0ab03a 	or	r5,r9,r12
 800cd38:	1ac4b03a 	or	r2,r3,r11
 800cd3c:	80015c1e 	bne	r16,zero,800d2b0 <__adddf3+0x760>
 800cd40:	28012826 	beq	r5,zero,800d1e4 <__adddf3+0x694>
 800cd44:	1001671e 	bne	r2,zero,800d2e4 <__adddf3+0x794>
 800cd48:	4826977a 	slli	r19,r9,29
 800cd4c:	00c80034 	movhi	r3,8192
 800cd50:	18ffffc4 	addi	r3,r3,-1
 800cd54:	20c4703a 	and	r2,r4,r3
 800cd58:	9884b03a 	or	r2,r19,r2
 800cd5c:	4812d0fa 	srli	r9,r9,3
 800cd60:	00003d06 	br	800ce58 <__adddf3+0x308>
 800cd64:	02804f0e 	bge	zero,r10,800cea4 <__adddf3+0x354>
 800cd68:	10002426 	beq	r2,zero,800cdfc <__adddf3+0x2ac>
 800cd6c:	8081ffd8 	cmpnei	r2,r16,2047
 800cd70:	10009d26 	beq	r2,zero,800cfe8 <__adddf3+0x498>
 800cd74:	18c02034 	orhi	r3,r3,128
 800cd78:	50800e48 	cmpgei	r2,r10,57
 800cd7c:	10003b1e 	bne	r2,zero,800ce6c <__adddf3+0x31c>
 800cd80:	50800808 	cmpgei	r2,r10,32
 800cd84:	10010326 	beq	r2,zero,800d194 <__adddf3+0x644>
 800cd88:	54fff804 	addi	r19,r10,-32
 800cd8c:	51000820 	cmpeqi	r4,r10,32
 800cd90:	1cc4d83a 	srl	r2,r3,r19
 800cd94:	2000041e 	bne	r4,zero,800cda8 <__adddf3+0x258>
 800cd98:	01001004 	movi	r4,64
 800cd9c:	2295c83a 	sub	r10,r4,r10
 800cda0:	1a86983a 	sll	r3,r3,r10
 800cda4:	58d6b03a 	or	r11,r11,r3
 800cda8:	5826c03a 	cmpne	r19,r11,zero
 800cdac:	98a6b03a 	or	r19,r19,r2
 800cdb0:	00003006 	br	800ce74 <__adddf3+0x324>
 800cdb4:	1ac4b03a 	or	r2,r3,r11
 800cdb8:	10007726 	beq	r2,zero,800cf98 <__adddf3+0x448>
 800cdbc:	50bfffc4 	addi	r2,r10,-1
 800cdc0:	10011926 	beq	r2,zero,800d228 <__adddf3+0x6d8>
 800cdc4:	5281ffd8 	cmpnei	r10,r10,2047
 800cdc8:	50012026 	beq	r10,zero,800d24c <__adddf3+0x6fc>
 800cdcc:	1015883a 	mov	r10,r2
 800cdd0:	003f7f06 	br	800cbd0 <__adddf3+0x80>
 800cdd4:	1409c83a 	sub	r4,r2,r16
 800cdd8:	8000a61e 	bne	r16,zero,800d074 <__adddf3+0x524>
 800cddc:	4b0ab03a 	or	r5,r9,r12
 800cde0:	2800f726 	beq	r5,zero,800d1c0 <__adddf3+0x670>
 800cde4:	217fffc4 	addi	r5,r4,-1
 800cde8:	28017f26 	beq	r5,zero,800d3e8 <__adddf3+0x898>
 800cdec:	2101ffd8 	cmpnei	r4,r4,2047
 800cdf0:	2001a326 	beq	r4,zero,800d480 <__adddf3+0x930>
 800cdf4:	2809883a 	mov	r4,r5
 800cdf8:	0000a106 	br	800d080 <__adddf3+0x530>
 800cdfc:	1ac4b03a 	or	r2,r3,r11
 800ce00:	10006526 	beq	r2,zero,800cf98 <__adddf3+0x448>
 800ce04:	50bfffc4 	addi	r2,r10,-1
 800ce08:	10000426 	beq	r2,zero,800ce1c <__adddf3+0x2cc>
 800ce0c:	5281ffd8 	cmpnei	r10,r10,2047
 800ce10:	50014326 	beq	r10,zero,800d320 <__adddf3+0x7d0>
 800ce14:	1015883a 	mov	r10,r2
 800ce18:	003fd706 	br	800cd78 <__adddf3+0x228>
 800ce1c:	62e7883a 	add	r19,r12,r11
 800ce20:	48d3883a 	add	r9,r9,r3
 800ce24:	9b09803a 	cmpltu	r4,r19,r12
 800ce28:	4909883a 	add	r4,r9,r4
 800ce2c:	2080202c 	andhi	r2,r4,128
 800ce30:	1000b41e 	bne	r2,zero,800d104 <__adddf3+0x5b4>
 800ce34:	04000044 	movi	r16,1
 800ce38:	988001cc 	andi	r2,r19,7
 800ce3c:	103f951e 	bne	r2,zero,800cc94 <__adddf3+0x144>
 800ce40:	9826d0fa 	srli	r19,r19,3
 800ce44:	2004977a 	slli	r2,r4,29
 800ce48:	2012d0fa 	srli	r9,r4,3
 800ce4c:	9884b03a 	or	r2,r19,r2
 800ce50:	80c1ffe0 	cmpeqi	r3,r16,2047
 800ce54:	1800351e 	bne	r3,zero,800cf2c <__adddf3+0x3dc>
 800ce58:	01000434 	movhi	r4,16
 800ce5c:	213fffc4 	addi	r4,r4,-1
 800ce60:	4908703a 	and	r4,r9,r4
 800ce64:	8401ffcc 	andi	r16,r16,2047
 800ce68:	003f9f06 	br	800cce8 <__adddf3+0x198>
 800ce6c:	1ac8b03a 	or	r4,r3,r11
 800ce70:	2026c03a 	cmpne	r19,r4,zero
 800ce74:	9b27883a 	add	r19,r19,r12
 800ce78:	9b09803a 	cmpltu	r4,r19,r12
 800ce7c:	2249883a 	add	r4,r4,r9
 800ce80:	2080202c 	andhi	r2,r4,128
 800ce84:	103fec26 	beq	r2,zero,800ce38 <__adddf3+0x2e8>
 800ce88:	84000044 	addi	r16,r16,1
 800ce8c:	8081ffe0 	cmpeqi	r2,r16,2047
 800ce90:	10009d26 	beq	r2,zero,800d108 <__adddf3+0x5b8>
 800ce94:	0401ffc4 	movi	r16,2047
 800ce98:	0009883a 	mov	r4,zero
 800ce9c:	0005883a 	mov	r2,zero
 800cea0:	003f9106 	br	800cce8 <__adddf3+0x198>
 800cea4:	5000571e 	bne	r10,zero,800d004 <__adddf3+0x4b4>
 800cea8:	80800044 	addi	r2,r16,1
 800ceac:	1141ff8c 	andi	r5,r2,2046
 800ceb0:	2800ed1e 	bne	r5,zero,800d268 <__adddf3+0x718>
 800ceb4:	4b04b03a 	or	r2,r9,r12
 800ceb8:	8000a826 	beq	r16,zero,800d15c <__adddf3+0x60c>
 800cebc:	10010226 	beq	r2,zero,800d2c8 <__adddf3+0x778>
 800cec0:	1ad6b03a 	or	r11,r3,r11
 800cec4:	480a977a 	slli	r5,r9,29
 800cec8:	4812d0fa 	srli	r9,r9,3
 800cecc:	58015f26 	beq	r11,zero,800d44c <__adddf3+0x8fc>
 800ced0:	02080034 	movhi	r8,8192
 800ced4:	423fffc4 	addi	r8,r8,-1
 800ced8:	2204703a 	and	r2,r4,r8
 800cedc:	4900022c 	andhi	r4,r9,8
 800cee0:	114ab03a 	or	r5,r2,r5
 800cee4:	20000826 	beq	r4,zero,800cf08 <__adddf3+0x3b8>
 800cee8:	1808d0fa 	srli	r4,r3,3
 800ceec:	2080022c 	andhi	r2,r4,8
 800cef0:	1000051e 	bne	r2,zero,800cf08 <__adddf3+0x3b8>
 800cef4:	1806977a 	slli	r3,r3,29
 800cef8:	3204703a 	and	r2,r6,r8
 800cefc:	3823883a 	mov	r17,r7
 800cf00:	10cab03a 	or	r5,r2,r3
 800cf04:	2013883a 	mov	r9,r4
 800cf08:	2804d77a 	srli	r2,r5,29
 800cf0c:	480890fa 	slli	r4,r9,3
 800cf10:	00c80034 	movhi	r3,8192
 800cf14:	18ffffc4 	addi	r3,r3,-1
 800cf18:	1108b03a 	or	r4,r2,r4
 800cf1c:	2004977a 	slli	r2,r4,29
 800cf20:	2012d0fa 	srli	r9,r4,3
 800cf24:	28ca703a 	and	r5,r5,r3
 800cf28:	1144b03a 	or	r2,r2,r5
 800cf2c:	4886b03a 	or	r3,r9,r2
 800cf30:	18016b26 	beq	r3,zero,800d4e0 <__adddf3+0x990>
 800cf34:	00c00434 	movhi	r3,16
 800cf38:	49000234 	orhi	r4,r9,8
 800cf3c:	18ffffc4 	addi	r3,r3,-1
 800cf40:	20c8703a 	and	r4,r4,r3
 800cf44:	0401ffc4 	movi	r16,2047
 800cf48:	003f6706 	br	800cce8 <__adddf3+0x198>
 800cf4c:	017fe034 	movhi	r5,65408
 800cf50:	297fffc4 	addi	r5,r5,-1
 800cf54:	988001cc 	andi	r2,r19,7
 800cf58:	80e1c83a 	sub	r16,r16,r3
 800cf5c:	2148703a 	and	r4,r4,r5
 800cf60:	103f4c1e 	bne	r2,zero,800cc94 <__adddf3+0x144>
 800cf64:	003fb606 	br	800ce40 <__adddf3+0x2f0>
 800cf68:	9809883a 	mov	r4,r19
 800cf6c:	800f4380 	call	800f438 <__clzsi2>
 800cf70:	10c00604 	addi	r3,r2,24
 800cf74:	19000808 	cmpgei	r4,r3,32
 800cf78:	203f2f26 	beq	r4,zero,800cc38 <__adddf3+0xe8>
 800cf7c:	113ffe04 	addi	r4,r2,-8
 800cf80:	9908983a 	sll	r4,r19,r4
 800cf84:	0027883a 	mov	r19,zero
 800cf88:	003f3106 	br	800cc50 <__adddf3+0x100>
 800cf8c:	1ac8b03a 	or	r4,r3,r11
 800cf90:	2026c03a 	cmpne	r19,r4,zero
 800cf94:	003f1c06 	br	800cc08 <__adddf3+0xb8>
 800cf98:	4826977a 	slli	r19,r9,29
 800cf9c:	00c80034 	movhi	r3,8192
 800cfa0:	18ffffc4 	addi	r3,r3,-1
 800cfa4:	20c4703a 	and	r2,r4,r3
 800cfa8:	14c4b03a 	or	r2,r2,r19
 800cfac:	4812d0fa 	srli	r9,r9,3
 800cfb0:	5021883a 	mov	r16,r10
 800cfb4:	003fa606 	br	800ce50 <__adddf3+0x300>
 800cfb8:	62e7c83a 	sub	r19,r12,r11
 800cfbc:	48e5c83a 	sub	r18,r9,r3
 800cfc0:	64c9803a 	cmpltu	r4,r12,r19
 800cfc4:	9125c83a 	sub	r18,r18,r4
 800cfc8:	9080202c 	andhi	r2,r18,128
 800cfcc:	1000b21e 	bne	r2,zero,800d298 <__adddf3+0x748>
 800cfd0:	9c84b03a 	or	r2,r19,r18
 800cfd4:	103f141e 	bne	r2,zero,800cc28 <__adddf3+0xd8>
 800cfd8:	0013883a 	mov	r9,zero
 800cfdc:	0021883a 	mov	r16,zero
 800cfe0:	0023883a 	mov	r17,zero
 800cfe4:	003f9c06 	br	800ce58 <__adddf3+0x308>
 800cfe8:	4826977a 	slli	r19,r9,29
 800cfec:	00c80034 	movhi	r3,8192
 800cff0:	18ffffc4 	addi	r3,r3,-1
 800cff4:	20c4703a 	and	r2,r4,r3
 800cff8:	14c4b03a 	or	r2,r2,r19
 800cffc:	4812d0fa 	srli	r9,r9,3
 800d000:	003fca06 	br	800cf2c <__adddf3+0x3dc>
 800d004:	1409c83a 	sub	r4,r2,r16
 800d008:	80005e1e 	bne	r16,zero,800d184 <__adddf3+0x634>
 800d00c:	4b0ab03a 	or	r5,r9,r12
 800d010:	28011326 	beq	r5,zero,800d460 <__adddf3+0x910>
 800d014:	217fffc4 	addi	r5,r4,-1
 800d018:	28012c26 	beq	r5,zero,800d4cc <__adddf3+0x97c>
 800d01c:	2101ffd8 	cmpnei	r4,r4,2047
 800d020:	2000a926 	beq	r4,zero,800d2c8 <__adddf3+0x778>
 800d024:	2809883a 	mov	r4,r5
 800d028:	21400e48 	cmpgei	r5,r4,57
 800d02c:	2800b91e 	bne	r5,zero,800d314 <__adddf3+0x7c4>
 800d030:	21400808 	cmpgei	r5,r4,32
 800d034:	28011a1e 	bne	r5,zero,800d4a0 <__adddf3+0x950>
 800d038:	01400804 	movi	r5,32
 800d03c:	290bc83a 	sub	r5,r5,r4
 800d040:	4966983a 	sll	r19,r9,r5
 800d044:	610cd83a 	srl	r6,r12,r4
 800d048:	614a983a 	sll	r5,r12,r5
 800d04c:	4912d83a 	srl	r9,r9,r4
 800d050:	99a6b03a 	or	r19,r19,r6
 800d054:	280ac03a 	cmpne	r5,r5,zero
 800d058:	9966b03a 	or	r19,r19,r5
 800d05c:	1a47883a 	add	r3,r3,r9
 800d060:	9ae7883a 	add	r19,r19,r11
 800d064:	9ac9803a 	cmpltu	r4,r19,r11
 800d068:	20c9883a 	add	r4,r4,r3
 800d06c:	1021883a 	mov	r16,r2
 800d070:	003f8306 	br	800ce80 <__adddf3+0x330>
 800d074:	1141ffd8 	cmpnei	r5,r2,2047
 800d078:	28006326 	beq	r5,zero,800d208 <__adddf3+0x6b8>
 800d07c:	4a402034 	orhi	r9,r9,128
 800d080:	21400e48 	cmpgei	r5,r4,57
 800d084:	28006e1e 	bne	r5,zero,800d240 <__adddf3+0x6f0>
 800d088:	21400808 	cmpgei	r5,r4,32
 800d08c:	2800ab1e 	bne	r5,zero,800d33c <__adddf3+0x7ec>
 800d090:	01400804 	movi	r5,32
 800d094:	290bc83a 	sub	r5,r5,r4
 800d098:	4966983a 	sll	r19,r9,r5
 800d09c:	610cd83a 	srl	r6,r12,r4
 800d0a0:	614a983a 	sll	r5,r12,r5
 800d0a4:	4912d83a 	srl	r9,r9,r4
 800d0a8:	99a6b03a 	or	r19,r19,r6
 800d0ac:	280ac03a 	cmpne	r5,r5,zero
 800d0b0:	9966b03a 	or	r19,r19,r5
 800d0b4:	1a47c83a 	sub	r3,r3,r9
 800d0b8:	5ce7c83a 	sub	r19,r11,r19
 800d0bc:	5cc9803a 	cmpltu	r4,r11,r19
 800d0c0:	1909c83a 	sub	r4,r3,r4
 800d0c4:	3823883a 	mov	r17,r7
 800d0c8:	1021883a 	mov	r16,r2
 800d0cc:	003ed106 	br	800cc14 <__adddf3+0xc4>
 800d0d0:	843ff844 	addi	r16,r16,-31
 800d0d4:	28800820 	cmpeqi	r2,r5,32
 800d0d8:	2420d83a 	srl	r16,r4,r16
 800d0dc:	1000041e 	bne	r2,zero,800d0f0 <__adddf3+0x5a0>
 800d0e0:	00801004 	movi	r2,64
 800d0e4:	114bc83a 	sub	r5,r2,r5
 800d0e8:	2148983a 	sll	r4,r4,r5
 800d0ec:	9926b03a 	or	r19,r19,r4
 800d0f0:	9826c03a 	cmpne	r19,r19,zero
 800d0f4:	9c26b03a 	or	r19,r19,r16
 800d0f8:	0009883a 	mov	r4,zero
 800d0fc:	0021883a 	mov	r16,zero
 800d100:	003f4d06 	br	800ce38 <__adddf3+0x2e8>
 800d104:	04000084 	movi	r16,2
 800d108:	00bfe034 	movhi	r2,65408
 800d10c:	10bfffc4 	addi	r2,r2,-1
 800d110:	208a703a 	and	r5,r4,r2
 800d114:	9804d07a 	srli	r2,r19,1
 800d118:	280697fa 	slli	r3,r5,31
 800d11c:	9cc0004c 	andi	r19,r19,1
 800d120:	14e6b03a 	or	r19,r2,r19
 800d124:	2808d07a 	srli	r4,r5,1
 800d128:	1ce6b03a 	or	r19,r3,r19
 800d12c:	003ed706 	br	800cc8c <__adddf3+0x13c>
 800d130:	54fff804 	addi	r19,r10,-32
 800d134:	50800820 	cmpeqi	r2,r10,32
 800d138:	1ce6d83a 	srl	r19,r3,r19
 800d13c:	1000041e 	bne	r2,zero,800d150 <__adddf3+0x600>
 800d140:	00801004 	movi	r2,64
 800d144:	1295c83a 	sub	r10,r2,r10
 800d148:	1a86983a 	sll	r3,r3,r10
 800d14c:	58d6b03a 	or	r11,r11,r3
 800d150:	5808c03a 	cmpne	r4,r11,zero
 800d154:	24e6b03a 	or	r19,r4,r19
 800d158:	003eab06 	br	800cc08 <__adddf3+0xb8>
 800d15c:	1000a926 	beq	r2,zero,800d404 <__adddf3+0x8b4>
 800d160:	1ac4b03a 	or	r2,r3,r11
 800d164:	1000ae1e 	bne	r2,zero,800d420 <__adddf3+0x8d0>
 800d168:	4806977a 	slli	r3,r9,29
 800d16c:	00880034 	movhi	r2,8192
 800d170:	10bfffc4 	addi	r2,r2,-1
 800d174:	2084703a 	and	r2,r4,r2
 800d178:	10c4b03a 	or	r2,r2,r3
 800d17c:	4812d0fa 	srli	r9,r9,3
 800d180:	003f3506 	br	800ce58 <__adddf3+0x308>
 800d184:	1141ffd8 	cmpnei	r5,r2,2047
 800d188:	28004f26 	beq	r5,zero,800d2c8 <__adddf3+0x778>
 800d18c:	4a402034 	orhi	r9,r9,128
 800d190:	003fa506 	br	800d028 <__adddf3+0x4d8>
 800d194:	01000804 	movi	r4,32
 800d198:	2289c83a 	sub	r4,r4,r10
 800d19c:	1926983a 	sll	r19,r3,r4
 800d1a0:	5a84d83a 	srl	r2,r11,r10
 800d1a4:	5908983a 	sll	r4,r11,r4
 800d1a8:	1a86d83a 	srl	r3,r3,r10
 800d1ac:	98a6b03a 	or	r19,r19,r2
 800d1b0:	2016c03a 	cmpne	r11,r4,zero
 800d1b4:	9ae6b03a 	or	r19,r19,r11
 800d1b8:	48d3883a 	add	r9,r9,r3
 800d1bc:	003f2d06 	br	800ce74 <__adddf3+0x324>
 800d1c0:	01480034 	movhi	r5,8192
 800d1c4:	1826977a 	slli	r19,r3,29
 800d1c8:	297fffc4 	addi	r5,r5,-1
 800d1cc:	3144703a 	and	r2,r6,r5
 800d1d0:	14c4b03a 	or	r2,r2,r19
 800d1d4:	1812d0fa 	srli	r9,r3,3
 800d1d8:	3823883a 	mov	r17,r7
 800d1dc:	2021883a 	mov	r16,r4
 800d1e0:	003f1b06 	br	800ce50 <__adddf3+0x300>
 800d1e4:	10007d26 	beq	r2,zero,800d3dc <__adddf3+0x88c>
 800d1e8:	00880034 	movhi	r2,8192
 800d1ec:	1808977a 	slli	r4,r3,29
 800d1f0:	10bfffc4 	addi	r2,r2,-1
 800d1f4:	3084703a 	and	r2,r6,r2
 800d1f8:	1104b03a 	or	r2,r2,r4
 800d1fc:	1812d0fa 	srli	r9,r3,3
 800d200:	3823883a 	mov	r17,r7
 800d204:	003f1406 	br	800ce58 <__adddf3+0x308>
 800d208:	180a977a 	slli	r5,r3,29
 800d20c:	01080034 	movhi	r4,8192
 800d210:	213fffc4 	addi	r4,r4,-1
 800d214:	3104703a 	and	r2,r6,r4
 800d218:	2884b03a 	or	r2,r5,r2
 800d21c:	1812d0fa 	srli	r9,r3,3
 800d220:	3823883a 	mov	r17,r7
 800d224:	003f4106 	br	800cf2c <__adddf3+0x3dc>
 800d228:	62e7c83a 	sub	r19,r12,r11
 800d22c:	48d3c83a 	sub	r9,r9,r3
 800d230:	64c9803a 	cmpltu	r4,r12,r19
 800d234:	4909c83a 	sub	r4,r9,r4
 800d238:	04000044 	movi	r16,1
 800d23c:	003e7506 	br	800cc14 <__adddf3+0xc4>
 800d240:	4b12b03a 	or	r9,r9,r12
 800d244:	4826c03a 	cmpne	r19,r9,zero
 800d248:	003f9b06 	br	800d0b8 <__adddf3+0x568>
 800d24c:	4826977a 	slli	r19,r9,29
 800d250:	00c80034 	movhi	r3,8192
 800d254:	18ffffc4 	addi	r3,r3,-1
 800d258:	20c4703a 	and	r2,r4,r3
 800d25c:	9884b03a 	or	r2,r19,r2
 800d260:	4812d0fa 	srli	r9,r9,3
 800d264:	003f3106 	br	800cf2c <__adddf3+0x3dc>
 800d268:	1101ffe0 	cmpeqi	r4,r2,2047
 800d26c:	203f091e 	bne	r4,zero,800ce94 <__adddf3+0x344>
 800d270:	62d7883a 	add	r11,r12,r11
 800d274:	5b09803a 	cmpltu	r4,r11,r12
 800d278:	48d3883a 	add	r9,r9,r3
 800d27c:	490b883a 	add	r5,r9,r4
 800d280:	282697fa 	slli	r19,r5,31
 800d284:	5816d07a 	srli	r11,r11,1
 800d288:	2808d07a 	srli	r4,r5,1
 800d28c:	1021883a 	mov	r16,r2
 800d290:	9ae6b03a 	or	r19,r19,r11
 800d294:	003ee806 	br	800ce38 <__adddf3+0x2e8>
 800d298:	5b27c83a 	sub	r19,r11,r12
 800d29c:	1a53c83a 	sub	r9,r3,r9
 800d2a0:	5cc9803a 	cmpltu	r4,r11,r19
 800d2a4:	4925c83a 	sub	r18,r9,r4
 800d2a8:	3823883a 	mov	r17,r7
 800d2ac:	003e5e06 	br	800cc28 <__adddf3+0xd8>
 800d2b0:	28002d1e 	bne	r5,zero,800d368 <__adddf3+0x818>
 800d2b4:	103fd41e 	bne	r2,zero,800d208 <__adddf3+0x6b8>
 800d2b8:	00bfffc4 	movi	r2,-1
 800d2bc:	0023883a 	mov	r17,zero
 800d2c0:	4013883a 	mov	r9,r8
 800d2c4:	003f1b06 	br	800cf34 <__adddf3+0x3e4>
 800d2c8:	00880034 	movhi	r2,8192
 800d2cc:	1808977a 	slli	r4,r3,29
 800d2d0:	10bfffc4 	addi	r2,r2,-1
 800d2d4:	3084703a 	and	r2,r6,r2
 800d2d8:	1104b03a 	or	r2,r2,r4
 800d2dc:	1812d0fa 	srli	r9,r3,3
 800d2e0:	003f1206 	br	800cf2c <__adddf3+0x3dc>
 800d2e4:	62e7c83a 	sub	r19,r12,r11
 800d2e8:	48cbc83a 	sub	r5,r9,r3
 800d2ec:	64c9803a 	cmpltu	r4,r12,r19
 800d2f0:	2909c83a 	sub	r4,r5,r4
 800d2f4:	2080202c 	andhi	r2,r4,128
 800d2f8:	10003626 	beq	r2,zero,800d3d4 <__adddf3+0x884>
 800d2fc:	5b27c83a 	sub	r19,r11,r12
 800d300:	1a53c83a 	sub	r9,r3,r9
 800d304:	5cc9803a 	cmpltu	r4,r11,r19
 800d308:	4909c83a 	sub	r4,r9,r4
 800d30c:	3823883a 	mov	r17,r7
 800d310:	003e5e06 	br	800cc8c <__adddf3+0x13c>
 800d314:	4b12b03a 	or	r9,r9,r12
 800d318:	4826c03a 	cmpne	r19,r9,zero
 800d31c:	003f5006 	br	800d060 <__adddf3+0x510>
 800d320:	4806977a 	slli	r3,r9,29
 800d324:	00880034 	movhi	r2,8192
 800d328:	10bfffc4 	addi	r2,r2,-1
 800d32c:	2084703a 	and	r2,r4,r2
 800d330:	10c4b03a 	or	r2,r2,r3
 800d334:	4812d0fa 	srli	r9,r9,3
 800d338:	003efc06 	br	800cf2c <__adddf3+0x3dc>
 800d33c:	217ff804 	addi	r5,r4,-32
 800d340:	21800820 	cmpeqi	r6,r4,32
 800d344:	494ad83a 	srl	r5,r9,r5
 800d348:	3000041e 	bne	r6,zero,800d35c <__adddf3+0x80c>
 800d34c:	01801004 	movi	r6,64
 800d350:	3109c83a 	sub	r4,r6,r4
 800d354:	4912983a 	sll	r9,r9,r4
 800d358:	6258b03a 	or	r12,r12,r9
 800d35c:	6026c03a 	cmpne	r19,r12,zero
 800d360:	9966b03a 	or	r19,r19,r5
 800d364:	003f5406 	br	800d0b8 <__adddf3+0x568>
 800d368:	480a977a 	slli	r5,r9,29
 800d36c:	4812d0fa 	srli	r9,r9,3
 800d370:	10003626 	beq	r2,zero,800d44c <__adddf3+0x8fc>
 800d374:	02080034 	movhi	r8,8192
 800d378:	423fffc4 	addi	r8,r8,-1
 800d37c:	2204703a 	and	r2,r4,r8
 800d380:	4900022c 	andhi	r4,r9,8
 800d384:	114ab03a 	or	r5,r2,r5
 800d388:	20000826 	beq	r4,zero,800d3ac <__adddf3+0x85c>
 800d38c:	1808d0fa 	srli	r4,r3,3
 800d390:	2080022c 	andhi	r2,r4,8
 800d394:	1000051e 	bne	r2,zero,800d3ac <__adddf3+0x85c>
 800d398:	1806977a 	slli	r3,r3,29
 800d39c:	3204703a 	and	r2,r6,r8
 800d3a0:	3823883a 	mov	r17,r7
 800d3a4:	10cab03a 	or	r5,r2,r3
 800d3a8:	2013883a 	mov	r9,r4
 800d3ac:	480890fa 	slli	r4,r9,3
 800d3b0:	2804d77a 	srli	r2,r5,29
 800d3b4:	00c80034 	movhi	r3,8192
 800d3b8:	18ffffc4 	addi	r3,r3,-1
 800d3bc:	1108b03a 	or	r4,r2,r4
 800d3c0:	200c977a 	slli	r6,r4,29
 800d3c4:	28c4703a 	and	r2,r5,r3
 800d3c8:	2012d0fa 	srli	r9,r4,3
 800d3cc:	3084b03a 	or	r2,r6,r2
 800d3d0:	003ed606 	br	800cf2c <__adddf3+0x3dc>
 800d3d4:	9904b03a 	or	r2,r19,r4
 800d3d8:	103e971e 	bne	r2,zero,800ce38 <__adddf3+0x2e8>
 800d3dc:	0013883a 	mov	r9,zero
 800d3e0:	0023883a 	mov	r17,zero
 800d3e4:	003e9c06 	br	800ce58 <__adddf3+0x308>
 800d3e8:	5b27c83a 	sub	r19,r11,r12
 800d3ec:	1a53c83a 	sub	r9,r3,r9
 800d3f0:	5cc9803a 	cmpltu	r4,r11,r19
 800d3f4:	4909c83a 	sub	r4,r9,r4
 800d3f8:	3823883a 	mov	r17,r7
 800d3fc:	04000044 	movi	r16,1
 800d400:	003e0406 	br	800cc14 <__adddf3+0xc4>
 800d404:	180a977a 	slli	r5,r3,29
 800d408:	01080034 	movhi	r4,8192
 800d40c:	213fffc4 	addi	r4,r4,-1
 800d410:	3104703a 	and	r2,r6,r4
 800d414:	2884b03a 	or	r2,r5,r2
 800d418:	1812d0fa 	srli	r9,r3,3
 800d41c:	003e8e06 	br	800ce58 <__adddf3+0x308>
 800d420:	62e7883a 	add	r19,r12,r11
 800d424:	48d3883a 	add	r9,r9,r3
 800d428:	9b09803a 	cmpltu	r4,r19,r12
 800d42c:	4909883a 	add	r4,r9,r4
 800d430:	2080202c 	andhi	r2,r4,128
 800d434:	103e8026 	beq	r2,zero,800ce38 <__adddf3+0x2e8>
 800d438:	00bfe034 	movhi	r2,65408
 800d43c:	10bfffc4 	addi	r2,r2,-1
 800d440:	2088703a 	and	r4,r4,r2
 800d444:	04000044 	movi	r16,1
 800d448:	003e7b06 	br	800ce38 <__adddf3+0x2e8>
 800d44c:	00880034 	movhi	r2,8192
 800d450:	10bfffc4 	addi	r2,r2,-1
 800d454:	2084703a 	and	r2,r4,r2
 800d458:	1144b03a 	or	r2,r2,r5
 800d45c:	003eb306 	br	800cf2c <__adddf3+0x3dc>
 800d460:	180e977a 	slli	r7,r3,29
 800d464:	01480034 	movhi	r5,8192
 800d468:	297fffc4 	addi	r5,r5,-1
 800d46c:	3144703a 	and	r2,r6,r5
 800d470:	3884b03a 	or	r2,r7,r2
 800d474:	1812d0fa 	srli	r9,r3,3
 800d478:	2021883a 	mov	r16,r4
 800d47c:	003e7406 	br	800ce50 <__adddf3+0x300>
 800d480:	00880034 	movhi	r2,8192
 800d484:	1808977a 	slli	r4,r3,29
 800d488:	10bfffc4 	addi	r2,r2,-1
 800d48c:	3084703a 	and	r2,r6,r2
 800d490:	1104b03a 	or	r2,r2,r4
 800d494:	1812d0fa 	srli	r9,r3,3
 800d498:	3823883a 	mov	r17,r7
 800d49c:	003ea306 	br	800cf2c <__adddf3+0x3dc>
 800d4a0:	217ff804 	addi	r5,r4,-32
 800d4a4:	21800820 	cmpeqi	r6,r4,32
 800d4a8:	494ad83a 	srl	r5,r9,r5
 800d4ac:	3000041e 	bne	r6,zero,800d4c0 <__adddf3+0x970>
 800d4b0:	01801004 	movi	r6,64
 800d4b4:	3109c83a 	sub	r4,r6,r4
 800d4b8:	4912983a 	sll	r9,r9,r4
 800d4bc:	6258b03a 	or	r12,r12,r9
 800d4c0:	6026c03a 	cmpne	r19,r12,zero
 800d4c4:	9966b03a 	or	r19,r19,r5
 800d4c8:	003ee506 	br	800d060 <__adddf3+0x510>
 800d4cc:	62e7883a 	add	r19,r12,r11
 800d4d0:	48d3883a 	add	r9,r9,r3
 800d4d4:	9ac9803a 	cmpltu	r4,r19,r11
 800d4d8:	4909883a 	add	r4,r9,r4
 800d4dc:	003e5306 	br	800ce2c <__adddf3+0x2dc>
 800d4e0:	0005883a 	mov	r2,zero
 800d4e4:	0401ffc4 	movi	r16,2047
 800d4e8:	0009883a 	mov	r4,zero
 800d4ec:	003dfe06 	br	800cce8 <__adddf3+0x198>

0800d4f0 <__divdf3>:
 800d4f0:	deffef04 	addi	sp,sp,-68
 800d4f4:	2804d53a 	srli	r2,r5,20
 800d4f8:	dd000b15 	stw	r20,44(sp)
 800d4fc:	2828d7fa 	srli	r20,r5,31
 800d500:	dc400815 	stw	r17,32(sp)
 800d504:	04400434 	movhi	r17,16
 800d508:	dd800d15 	stw	r22,52(sp)
 800d50c:	dcc00a15 	stw	r19,40(sp)
 800d510:	8c7fffc4 	addi	r17,r17,-1
 800d514:	dfc01015 	stw	ra,64(sp)
 800d518:	df000f15 	stw	fp,60(sp)
 800d51c:	ddc00e15 	stw	r23,56(sp)
 800d520:	dd400c15 	stw	r21,48(sp)
 800d524:	dc800915 	stw	r18,36(sp)
 800d528:	dc000715 	stw	r16,28(sp)
 800d52c:	1081ffcc 	andi	r2,r2,2047
 800d530:	2027883a 	mov	r19,r4
 800d534:	2c62703a 	and	r17,r5,r17
 800d538:	a02d883a 	mov	r22,r20
 800d53c:	10008726 	beq	r2,zero,800d75c <__divdf3+0x26c>
 800d540:	10c1ffe0 	cmpeqi	r3,r2,2047
 800d544:	18009d1e 	bne	r3,zero,800d7bc <__divdf3+0x2cc>
 800d548:	880a90fa 	slli	r5,r17,3
 800d54c:	2008d77a 	srli	r4,r4,29
 800d550:	982690fa 	slli	r19,r19,3
 800d554:	14bf0044 	addi	r18,r2,-1023
 800d558:	2148b03a 	or	r4,r4,r5
 800d55c:	24002034 	orhi	r16,r4,128
 800d560:	0023883a 	mov	r17,zero
 800d564:	002f883a 	mov	r23,zero
 800d568:	3806d53a 	srli	r3,r7,20
 800d56c:	01000434 	movhi	r4,16
 800d570:	213fffc4 	addi	r4,r4,-1
 800d574:	18c1ffcc 	andi	r3,r3,2047
 800d578:	392a703a 	and	r21,r7,r4
 800d57c:	3838d7fa 	srli	fp,r7,31
 800d580:	18006326 	beq	r3,zero,800d710 <__divdf3+0x220>
 800d584:	1881ffe0 	cmpeqi	r2,r3,2047
 800d588:	1000201e 	bne	r2,zero,800d60c <__divdf3+0x11c>
 800d58c:	a80890fa 	slli	r4,r21,3
 800d590:	300ed77a 	srli	r7,r6,29
 800d594:	300a90fa 	slli	r5,r6,3
 800d598:	18ff0044 	addi	r3,r3,-1023
 800d59c:	3908b03a 	or	r4,r7,r4
 800d5a0:	90e5c83a 	sub	r18,r18,r3
 800d5a4:	25402034 	orhi	r21,r4,128
 800d5a8:	0007883a 	mov	r3,zero
 800d5ac:	88800428 	cmpgeui	r2,r17,16
 800d5b0:	a70cf03a 	xor	r6,r20,fp
 800d5b4:	1000ab1e 	bne	r2,zero,800d864 <__divdf3+0x374>
 800d5b8:	882290ba 	slli	r17,r17,2
 800d5bc:	00820074 	movhi	r2,2049
 800d5c0:	8885883a 	add	r2,r17,r2
 800d5c4:	10b57317 	ldw	r2,-10804(r2)
 800d5c8:	1000683a 	jmp	r2
 800d5cc:	0800d864 	muli	zero,at,865
 800d5d0:	0800d700 	call	800d70 <__alt_mem_onchip_memory2_0+0x800d70>
 800d5d4:	0800d6a4 	muli	zero,at,858
 800d5d8:	0800d628 	cmpgeui	zero,at,856
 800d5dc:	0800d6a4 	muli	zero,at,858
 800d5e0:	0800d820 	cmpeqi	zero,at,864
 800d5e4:	0800d6a4 	muli	zero,at,858
 800d5e8:	0800d628 	cmpgeui	zero,at,856
 800d5ec:	0800d700 	call	800d70 <__alt_mem_onchip_memory2_0+0x800d70>
 800d5f0:	0800d700 	call	800d70 <__alt_mem_onchip_memory2_0+0x800d70>
 800d5f4:	0800d820 	cmpeqi	zero,at,864
 800d5f8:	0800d628 	cmpgeui	zero,at,856
 800d5fc:	0800d638 	rdprs	zero,at,856
 800d600:	0800d638 	rdprs	zero,at,856
 800d604:	0800d638 	rdprs	zero,at,856
 800d608:	0800d838 	rdprs	zero,at,864
 800d60c:	a98ab03a 	or	r5,r21,r6
 800d610:	94be0044 	addi	r18,r18,-2047
 800d614:	28007e1e 	bne	r5,zero,800d810 <__divdf3+0x320>
 800d618:	8c400094 	ori	r17,r17,2
 800d61c:	002b883a 	mov	r21,zero
 800d620:	00c00084 	movi	r3,2
 800d624:	003fe106 	br	800d5ac <__divdf3+0xbc>
 800d628:	e02d883a 	mov	r22,fp
 800d62c:	a821883a 	mov	r16,r21
 800d630:	2827883a 	mov	r19,r5
 800d634:	182f883a 	mov	r23,r3
 800d638:	b88000a0 	cmpeqi	r2,r23,2
 800d63c:	1001ab1e 	bne	r2,zero,800dcec <__divdf3+0x7fc>
 800d640:	b88000e0 	cmpeqi	r2,r23,3
 800d644:	1001f91e 	bne	r2,zero,800de2c <__divdf3+0x93c>
 800d648:	b8800060 	cmpeqi	r2,r23,1
 800d64c:	1000141e 	bne	r2,zero,800d6a0 <__divdf3+0x1b0>
 800d650:	9500ffc4 	addi	r20,r18,1023
 800d654:	b00d883a 	mov	r6,r22
 800d658:	0501870e 	bge	zero,r20,800dc78 <__divdf3+0x788>
 800d65c:	988001cc 	andi	r2,r19,7
 800d660:	1001c11e 	bne	r2,zero,800dd68 <__divdf3+0x878>
 800d664:	9826d0fa 	srli	r19,r19,3
 800d668:	8080402c 	andhi	r2,r16,256
 800d66c:	10000426 	beq	r2,zero,800d680 <__divdf3+0x190>
 800d670:	00bfc034 	movhi	r2,65280
 800d674:	10bfffc4 	addi	r2,r2,-1
 800d678:	80a0703a 	and	r16,r16,r2
 800d67c:	95010004 	addi	r20,r18,1024
 800d680:	a081ffc8 	cmpgei	r2,r20,2047
 800d684:	10001e1e 	bne	r2,zero,800d700 <__divdf3+0x210>
 800d688:	8006977a 	slli	r3,r16,29
 800d68c:	8008927a 	slli	r4,r16,9
 800d690:	a081ffcc 	andi	r2,r20,2047
 800d694:	1ce6b03a 	or	r19,r3,r19
 800d698:	2008d33a 	srli	r4,r4,12
 800d69c:	00000406 	br	800d6b0 <__divdf3+0x1c0>
 800d6a0:	b00d883a 	mov	r6,r22
 800d6a4:	0005883a 	mov	r2,zero
 800d6a8:	0009883a 	mov	r4,zero
 800d6ac:	0027883a 	mov	r19,zero
 800d6b0:	1004953a 	slli	r2,r2,20
 800d6b4:	00c00434 	movhi	r3,16
 800d6b8:	300c97fa 	slli	r6,r6,31
 800d6bc:	18ffffc4 	addi	r3,r3,-1
 800d6c0:	20c6703a 	and	r3,r4,r3
 800d6c4:	1886b03a 	or	r3,r3,r2
 800d6c8:	1986b03a 	or	r3,r3,r6
 800d6cc:	9805883a 	mov	r2,r19
 800d6d0:	dfc01017 	ldw	ra,64(sp)
 800d6d4:	df000f17 	ldw	fp,60(sp)
 800d6d8:	ddc00e17 	ldw	r23,56(sp)
 800d6dc:	dd800d17 	ldw	r22,52(sp)
 800d6e0:	dd400c17 	ldw	r21,48(sp)
 800d6e4:	dd000b17 	ldw	r20,44(sp)
 800d6e8:	dcc00a17 	ldw	r19,40(sp)
 800d6ec:	dc800917 	ldw	r18,36(sp)
 800d6f0:	dc400817 	ldw	r17,32(sp)
 800d6f4:	dc000717 	ldw	r16,28(sp)
 800d6f8:	dec01104 	addi	sp,sp,68
 800d6fc:	f800283a 	ret
 800d700:	0081ffc4 	movi	r2,2047
 800d704:	0009883a 	mov	r4,zero
 800d708:	0027883a 	mov	r19,zero
 800d70c:	003fe806 	br	800d6b0 <__divdf3+0x1c0>
 800d710:	a98ab03a 	or	r5,r21,r6
 800d714:	28003a26 	beq	r5,zero,800d800 <__divdf3+0x310>
 800d718:	a8014926 	beq	r21,zero,800dc40 <__divdf3+0x750>
 800d71c:	a809883a 	mov	r4,r21
 800d720:	d9800015 	stw	r6,0(sp)
 800d724:	800f4380 	call	800f438 <__clzsi2>
 800d728:	d9800017 	ldw	r6,0(sp)
 800d72c:	11fffd44 	addi	r7,r2,-11
 800d730:	00c00744 	movi	r3,29
 800d734:	117ffe04 	addi	r5,r2,-8
 800d738:	19c7c83a 	sub	r3,r3,r7
 800d73c:	a948983a 	sll	r4,r21,r5
 800d740:	30c6d83a 	srl	r3,r6,r3
 800d744:	314a983a 	sll	r5,r6,r5
 800d748:	192ab03a 	or	r21,r3,r4
 800d74c:	1485883a 	add	r2,r2,r18
 800d750:	1480fcc4 	addi	r18,r2,1011
 800d754:	0007883a 	mov	r3,zero
 800d758:	003f9406 	br	800d5ac <__divdf3+0xbc>
 800d75c:	2460b03a 	or	r16,r4,r17
 800d760:	202b883a 	mov	r21,r4
 800d764:	80002126 	beq	r16,zero,800d7ec <__divdf3+0x2fc>
 800d768:	d9c00115 	stw	r7,4(sp)
 800d76c:	d9800015 	stw	r6,0(sp)
 800d770:	88012826 	beq	r17,zero,800dc14 <__divdf3+0x724>
 800d774:	8809883a 	mov	r4,r17
 800d778:	800f4380 	call	800f438 <__clzsi2>
 800d77c:	d9800017 	ldw	r6,0(sp)
 800d780:	d9c00117 	ldw	r7,4(sp)
 800d784:	1025883a 	mov	r18,r2
 800d788:	143ffd44 	addi	r16,r2,-11
 800d78c:	01000744 	movi	r4,29
 800d790:	94fffe04 	addi	r19,r18,-8
 800d794:	2409c83a 	sub	r4,r4,r16
 800d798:	8cca983a 	sll	r5,r17,r19
 800d79c:	a908d83a 	srl	r4,r21,r4
 800d7a0:	ace6983a 	sll	r19,r21,r19
 800d7a4:	2160b03a 	or	r16,r4,r5
 800d7a8:	00bf0344 	movi	r2,-1011
 800d7ac:	14a5c83a 	sub	r18,r2,r18
 800d7b0:	0023883a 	mov	r17,zero
 800d7b4:	002f883a 	mov	r23,zero
 800d7b8:	003f6b06 	br	800d568 <__divdf3+0x78>
 800d7bc:	2460b03a 	or	r16,r4,r17
 800d7c0:	8000051e 	bne	r16,zero,800d7d8 <__divdf3+0x2e8>
 800d7c4:	0027883a 	mov	r19,zero
 800d7c8:	04400204 	movi	r17,8
 800d7cc:	0481ffc4 	movi	r18,2047
 800d7d0:	05c00084 	movi	r23,2
 800d7d4:	003f6406 	br	800d568 <__divdf3+0x78>
 800d7d8:	8821883a 	mov	r16,r17
 800d7dc:	0481ffc4 	movi	r18,2047
 800d7e0:	04400304 	movi	r17,12
 800d7e4:	05c000c4 	movi	r23,3
 800d7e8:	003f5f06 	br	800d568 <__divdf3+0x78>
 800d7ec:	0027883a 	mov	r19,zero
 800d7f0:	04400104 	movi	r17,4
 800d7f4:	0025883a 	mov	r18,zero
 800d7f8:	05c00044 	movi	r23,1
 800d7fc:	003f5a06 	br	800d568 <__divdf3+0x78>
 800d800:	8c400054 	ori	r17,r17,1
 800d804:	002b883a 	mov	r21,zero
 800d808:	00c00044 	movi	r3,1
 800d80c:	003f6706 	br	800d5ac <__divdf3+0xbc>
 800d810:	8c4000d4 	ori	r17,r17,3
 800d814:	300b883a 	mov	r5,r6
 800d818:	00c000c4 	movi	r3,3
 800d81c:	003f6306 	br	800d5ac <__divdf3+0xbc>
 800d820:	01000434 	movhi	r4,16
 800d824:	000d883a 	mov	r6,zero
 800d828:	213fffc4 	addi	r4,r4,-1
 800d82c:	04ffffc4 	movi	r19,-1
 800d830:	0081ffc4 	movi	r2,2047
 800d834:	003f9e06 	br	800d6b0 <__divdf3+0x1c0>
 800d838:	8080022c 	andhi	r2,r16,8
 800d83c:	1000d426 	beq	r2,zero,800db90 <__divdf3+0x6a0>
 800d840:	a880022c 	andhi	r2,r21,8
 800d844:	1000d21e 	bne	r2,zero,800db90 <__divdf3+0x6a0>
 800d848:	00800434 	movhi	r2,16
 800d84c:	a9000234 	orhi	r4,r21,8
 800d850:	10bfffc4 	addi	r2,r2,-1
 800d854:	2088703a 	and	r4,r4,r2
 800d858:	e00d883a 	mov	r6,fp
 800d85c:	2827883a 	mov	r19,r5
 800d860:	003ff306 	br	800d830 <__divdf3+0x340>
 800d864:	ac00e536 	bltu	r21,r16,800dbfc <__divdf3+0x70c>
 800d868:	ac00e326 	beq	r21,r16,800dbf8 <__divdf3+0x708>
 800d86c:	94bfffc4 	addi	r18,r18,-1
 800d870:	0029883a 	mov	r20,zero
 800d874:	280ed63a 	srli	r7,r5,24
 800d878:	a82a923a 	slli	r21,r21,8
 800d87c:	2804923a 	slli	r2,r5,8
 800d880:	8009883a 	mov	r4,r16
 800d884:	3d62b03a 	or	r17,r7,r21
 800d888:	882ad43a 	srli	r21,r17,16
 800d88c:	d9800115 	stw	r6,4(sp)
 800d890:	d8800015 	stw	r2,0(sp)
 800d894:	a80b883a 	mov	r5,r21
 800d898:	80029140 	call	8002914 <__udivsi3>
 800d89c:	8f3fffcc 	andi	fp,r17,65535
 800d8a0:	100b883a 	mov	r5,r2
 800d8a4:	e009883a 	mov	r4,fp
 800d8a8:	102f883a 	mov	r23,r2
 800d8ac:	80029d40 	call	80029d4 <__mulsi3>
 800d8b0:	a80b883a 	mov	r5,r21
 800d8b4:	8009883a 	mov	r4,r16
 800d8b8:	102d883a 	mov	r22,r2
 800d8bc:	80029780 	call	8002978 <__umodsi3>
 800d8c0:	1006943a 	slli	r3,r2,16
 800d8c4:	9804d43a 	srli	r2,r19,16
 800d8c8:	d9800117 	ldw	r6,4(sp)
 800d8cc:	10c4b03a 	or	r2,r2,r3
 800d8d0:	1580042e 	bgeu	r2,r22,800d8e4 <__divdf3+0x3f4>
 800d8d4:	1445883a 	add	r2,r2,r17
 800d8d8:	b8ffffc4 	addi	r3,r23,-1
 800d8dc:	1441102e 	bgeu	r2,r17,800dd20 <__divdf3+0x830>
 800d8e0:	182f883a 	mov	r23,r3
 800d8e4:	15adc83a 	sub	r22,r2,r22
 800d8e8:	a80b883a 	mov	r5,r21
 800d8ec:	b009883a 	mov	r4,r22
 800d8f0:	d9800215 	stw	r6,8(sp)
 800d8f4:	80029140 	call	8002914 <__udivsi3>
 800d8f8:	100b883a 	mov	r5,r2
 800d8fc:	e009883a 	mov	r4,fp
 800d900:	1021883a 	mov	r16,r2
 800d904:	80029d40 	call	80029d4 <__mulsi3>
 800d908:	a80b883a 	mov	r5,r21
 800d90c:	b009883a 	mov	r4,r22
 800d910:	d8800115 	stw	r2,4(sp)
 800d914:	80029780 	call	8002978 <__umodsi3>
 800d918:	1004943a 	slli	r2,r2,16
 800d91c:	da000117 	ldw	r8,4(sp)
 800d920:	9cffffcc 	andi	r19,r19,65535
 800d924:	9884b03a 	or	r2,r19,r2
 800d928:	d9800217 	ldw	r6,8(sp)
 800d92c:	1200042e 	bgeu	r2,r8,800d940 <__divdf3+0x450>
 800d930:	1445883a 	add	r2,r2,r17
 800d934:	80ffffc4 	addi	r3,r16,-1
 800d938:	1440f52e 	bgeu	r2,r17,800dd10 <__divdf3+0x820>
 800d93c:	1821883a 	mov	r16,r3
 800d940:	b808943a 	slli	r4,r23,16
 800d944:	d8c00017 	ldw	r3,0(sp)
 800d948:	1211c83a 	sub	r8,r2,r8
 800d94c:	2420b03a 	or	r16,r4,r16
 800d950:	182cd43a 	srli	r22,r3,16
 800d954:	1dffffcc 	andi	r23,r3,65535
 800d958:	8026d43a 	srli	r19,r16,16
 800d95c:	80ffffcc 	andi	r3,r16,65535
 800d960:	180b883a 	mov	r5,r3
 800d964:	b809883a 	mov	r4,r23
 800d968:	d9800615 	stw	r6,24(sp)
 800d96c:	da000415 	stw	r8,16(sp)
 800d970:	d8c00515 	stw	r3,20(sp)
 800d974:	80029d40 	call	80029d4 <__mulsi3>
 800d978:	b80b883a 	mov	r5,r23
 800d97c:	9809883a 	mov	r4,r19
 800d980:	d8800315 	stw	r2,12(sp)
 800d984:	80029d40 	call	80029d4 <__mulsi3>
 800d988:	b00b883a 	mov	r5,r22
 800d98c:	9809883a 	mov	r4,r19
 800d990:	d8800215 	stw	r2,8(sp)
 800d994:	80029d40 	call	80029d4 <__mulsi3>
 800d998:	d8c00517 	ldw	r3,20(sp)
 800d99c:	b009883a 	mov	r4,r22
 800d9a0:	d8800115 	stw	r2,4(sp)
 800d9a4:	180b883a 	mov	r5,r3
 800d9a8:	80029d40 	call	80029d4 <__mulsi3>
 800d9ac:	da400317 	ldw	r9,12(sp)
 800d9b0:	dac00217 	ldw	r11,8(sp)
 800d9b4:	da800117 	ldw	r10,4(sp)
 800d9b8:	4806d43a 	srli	r3,r9,16
 800d9bc:	12c5883a 	add	r2,r2,r11
 800d9c0:	da000417 	ldw	r8,16(sp)
 800d9c4:	1887883a 	add	r3,r3,r2
 800d9c8:	d9800617 	ldw	r6,24(sp)
 800d9cc:	1ac0022e 	bgeu	r3,r11,800d9d8 <__divdf3+0x4e8>
 800d9d0:	00800074 	movhi	r2,1
 800d9d4:	5095883a 	add	r10,r10,r2
 800d9d8:	1826d43a 	srli	r19,r3,16
 800d9dc:	1806943a 	slli	r3,r3,16
 800d9e0:	4a7fffcc 	andi	r9,r9,65535
 800d9e4:	9aa7883a 	add	r19,r19,r10
 800d9e8:	1a47883a 	add	r3,r3,r9
 800d9ec:	44c07736 	bltu	r8,r19,800dbcc <__divdf3+0x6dc>
 800d9f0:	44c07526 	beq	r8,r19,800dbc8 <__divdf3+0x6d8>
 800d9f4:	a0c7c83a 	sub	r3,r20,r3
 800d9f8:	44c5c83a 	sub	r2,r8,r19
 800d9fc:	a0e7803a 	cmpltu	r19,r20,r3
 800da00:	d8c00115 	stw	r3,4(sp)
 800da04:	14e7c83a 	sub	r19,r2,r19
 800da08:	9500ffc4 	addi	r20,r18,1023
 800da0c:	8cc0cd26 	beq	r17,r19,800dd44 <__divdf3+0x854>
 800da10:	a80b883a 	mov	r5,r21
 800da14:	9809883a 	mov	r4,r19
 800da18:	d9800415 	stw	r6,16(sp)
 800da1c:	80029140 	call	8002914 <__udivsi3>
 800da20:	100b883a 	mov	r5,r2
 800da24:	e009883a 	mov	r4,fp
 800da28:	d8800315 	stw	r2,12(sp)
 800da2c:	80029d40 	call	80029d4 <__mulsi3>
 800da30:	9809883a 	mov	r4,r19
 800da34:	a80b883a 	mov	r5,r21
 800da38:	d8800215 	stw	r2,8(sp)
 800da3c:	80029780 	call	8002978 <__umodsi3>
 800da40:	d8c00117 	ldw	r3,4(sp)
 800da44:	1008943a 	slli	r4,r2,16
 800da48:	da400217 	ldw	r9,8(sp)
 800da4c:	1804d43a 	srli	r2,r3,16
 800da50:	da000317 	ldw	r8,12(sp)
 800da54:	d9800417 	ldw	r6,16(sp)
 800da58:	1104b03a 	or	r2,r2,r4
 800da5c:	1240062e 	bgeu	r2,r9,800da78 <__divdf3+0x588>
 800da60:	1445883a 	add	r2,r2,r17
 800da64:	413fffc4 	addi	r4,r8,-1
 800da68:	1440bd36 	bltu	r2,r17,800dd60 <__divdf3+0x870>
 800da6c:	1240bc2e 	bgeu	r2,r9,800dd60 <__divdf3+0x870>
 800da70:	423fff84 	addi	r8,r8,-2
 800da74:	1445883a 	add	r2,r2,r17
 800da78:	1267c83a 	sub	r19,r2,r9
 800da7c:	a80b883a 	mov	r5,r21
 800da80:	9809883a 	mov	r4,r19
 800da84:	d8c00415 	stw	r3,16(sp)
 800da88:	d9800315 	stw	r6,12(sp)
 800da8c:	da000215 	stw	r8,8(sp)
 800da90:	80029140 	call	8002914 <__udivsi3>
 800da94:	e009883a 	mov	r4,fp
 800da98:	100b883a 	mov	r5,r2
 800da9c:	d8800115 	stw	r2,4(sp)
 800daa0:	80029d40 	call	80029d4 <__mulsi3>
 800daa4:	a80b883a 	mov	r5,r21
 800daa8:	9809883a 	mov	r4,r19
 800daac:	1039883a 	mov	fp,r2
 800dab0:	80029780 	call	8002978 <__umodsi3>
 800dab4:	d8c00417 	ldw	r3,16(sp)
 800dab8:	1004943a 	slli	r2,r2,16
 800dabc:	da400117 	ldw	r9,4(sp)
 800dac0:	18ffffcc 	andi	r3,r3,65535
 800dac4:	1886b03a 	or	r3,r3,r2
 800dac8:	da000217 	ldw	r8,8(sp)
 800dacc:	d9800317 	ldw	r6,12(sp)
 800dad0:	1f00062e 	bgeu	r3,fp,800daec <__divdf3+0x5fc>
 800dad4:	1c47883a 	add	r3,r3,r17
 800dad8:	48bfffc4 	addi	r2,r9,-1
 800dadc:	1c409e36 	bltu	r3,r17,800dd58 <__divdf3+0x868>
 800dae0:	1f009d2e 	bgeu	r3,fp,800dd58 <__divdf3+0x868>
 800dae4:	4a7fff84 	addi	r9,r9,-2
 800dae8:	1c47883a 	add	r3,r3,r17
 800daec:	4010943a 	slli	r8,r8,16
 800daf0:	1f2bc83a 	sub	r21,r3,fp
 800daf4:	b80b883a 	mov	r5,r23
 800daf8:	4266b03a 	or	r19,r8,r9
 800dafc:	98ffffcc 	andi	r3,r19,65535
 800db00:	9838d43a 	srli	fp,r19,16
 800db04:	1809883a 	mov	r4,r3
 800db08:	d9800415 	stw	r6,16(sp)
 800db0c:	d8c00315 	stw	r3,12(sp)
 800db10:	80029d40 	call	80029d4 <__mulsi3>
 800db14:	b80b883a 	mov	r5,r23
 800db18:	e009883a 	mov	r4,fp
 800db1c:	d8800215 	stw	r2,8(sp)
 800db20:	80029d40 	call	80029d4 <__mulsi3>
 800db24:	e00b883a 	mov	r5,fp
 800db28:	b009883a 	mov	r4,r22
 800db2c:	d8800115 	stw	r2,4(sp)
 800db30:	80029d40 	call	80029d4 <__mulsi3>
 800db34:	d8c00317 	ldw	r3,12(sp)
 800db38:	b009883a 	mov	r4,r22
 800db3c:	102f883a 	mov	r23,r2
 800db40:	180b883a 	mov	r5,r3
 800db44:	80029d40 	call	80029d4 <__mulsi3>
 800db48:	da000217 	ldw	r8,8(sp)
 800db4c:	da400117 	ldw	r9,4(sp)
 800db50:	d9800417 	ldw	r6,16(sp)
 800db54:	4006d43a 	srli	r3,r8,16
 800db58:	1245883a 	add	r2,r2,r9
 800db5c:	1885883a 	add	r2,r3,r2
 800db60:	1240022e 	bgeu	r2,r9,800db6c <__divdf3+0x67c>
 800db64:	00c00074 	movhi	r3,1
 800db68:	b8ef883a 	add	r23,r23,r3
 800db6c:	1008d43a 	srli	r4,r2,16
 800db70:	1004943a 	slli	r2,r2,16
 800db74:	423fffcc 	andi	r8,r8,65535
 800db78:	25c9883a 	add	r4,r4,r23
 800db7c:	1205883a 	add	r2,r2,r8
 800db80:	a9000a36 	bltu	r21,r4,800dbac <__divdf3+0x6bc>
 800db84:	a9000826 	beq	r21,r4,800dba8 <__divdf3+0x6b8>
 800db88:	9cc00054 	ori	r19,r19,1
 800db8c:	003eb206 	br	800d658 <__divdf3+0x168>
 800db90:	00800434 	movhi	r2,16
 800db94:	81000234 	orhi	r4,r16,8
 800db98:	10bfffc4 	addi	r2,r2,-1
 800db9c:	2088703a 	and	r4,r4,r2
 800dba0:	a00d883a 	mov	r6,r20
 800dba4:	003f2206 	br	800d830 <__divdf3+0x340>
 800dba8:	103eab26 	beq	r2,zero,800d658 <__divdf3+0x168>
 800dbac:	8d47883a 	add	r3,r17,r21
 800dbb0:	997fffc4 	addi	r5,r19,-1
 800dbb4:	1c405e36 	bltu	r3,r17,800dd30 <__divdf3+0x840>
 800dbb8:	19007b36 	bltu	r3,r4,800dda8 <__divdf3+0x8b8>
 800dbbc:	1900a126 	beq	r3,r4,800de44 <__divdf3+0x954>
 800dbc0:	2827883a 	mov	r19,r5
 800dbc4:	003ff006 	br	800db88 <__divdf3+0x698>
 800dbc8:	a0ff8a2e 	bgeu	r20,r3,800d9f4 <__divdf3+0x504>
 800dbcc:	d8800017 	ldw	r2,0(sp)
 800dbd0:	a0a9883a 	add	r20,r20,r2
 800dbd4:	a085803a 	cmpltu	r2,r20,r2
 800dbd8:	1445883a 	add	r2,r2,r17
 800dbdc:	4091883a 	add	r8,r8,r2
 800dbe0:	80bfffc4 	addi	r2,r16,-1
 800dbe4:	8a00462e 	bgeu	r17,r8,800dd00 <__divdf3+0x810>
 800dbe8:	44c06836 	bltu	r8,r19,800dd8c <__divdf3+0x89c>
 800dbec:	9a006626 	beq	r19,r8,800dd88 <__divdf3+0x898>
 800dbf0:	1021883a 	mov	r16,r2
 800dbf4:	003f7f06 	br	800d9f4 <__divdf3+0x504>
 800dbf8:	997f1c36 	bltu	r19,r5,800d86c <__divdf3+0x37c>
 800dbfc:	800697fa 	slli	r3,r16,31
 800dc00:	9804d07a 	srli	r2,r19,1
 800dc04:	982897fa 	slli	r20,r19,31
 800dc08:	8020d07a 	srli	r16,r16,1
 800dc0c:	18a6b03a 	or	r19,r3,r2
 800dc10:	003f1806 	br	800d874 <__divdf3+0x384>
 800dc14:	800f4380 	call	800f438 <__clzsi2>
 800dc18:	14000544 	addi	r16,r2,21
 800dc1c:	81000748 	cmpgei	r4,r16,29
 800dc20:	14800804 	addi	r18,r2,32
 800dc24:	d9800017 	ldw	r6,0(sp)
 800dc28:	d9c00117 	ldw	r7,4(sp)
 800dc2c:	203ed726 	beq	r4,zero,800d78c <__divdf3+0x29c>
 800dc30:	113ffe04 	addi	r4,r2,-8
 800dc34:	9920983a 	sll	r16,r19,r4
 800dc38:	0027883a 	mov	r19,zero
 800dc3c:	003eda06 	br	800d7a8 <__divdf3+0x2b8>
 800dc40:	3009883a 	mov	r4,r6
 800dc44:	d9800015 	stw	r6,0(sp)
 800dc48:	800f4380 	call	800f438 <__clzsi2>
 800dc4c:	11c00544 	addi	r7,r2,21
 800dc50:	38c00748 	cmpgei	r3,r7,29
 800dc54:	1009883a 	mov	r4,r2
 800dc58:	d9800017 	ldw	r6,0(sp)
 800dc5c:	10800804 	addi	r2,r2,32
 800dc60:	183eb326 	beq	r3,zero,800d730 <__divdf3+0x240>
 800dc64:	213ffe04 	addi	r4,r4,-8
 800dc68:	312a983a 	sll	r21,r6,r4
 800dc6c:	000b883a 	mov	r5,zero
 800dc70:	003eb606 	br	800d74c <__divdf3+0x25c>
 800dc74:	04ffffc4 	movi	r19,-1
 800dc78:	01000044 	movi	r4,1
 800dc7c:	2509c83a 	sub	r4,r4,r20
 800dc80:	20800e48 	cmpgei	r2,r4,57
 800dc84:	103e871e 	bne	r2,zero,800d6a4 <__divdf3+0x1b4>
 800dc88:	20800808 	cmpgei	r2,r4,32
 800dc8c:	10004e1e 	bne	r2,zero,800ddc8 <__divdf3+0x8d8>
 800dc90:	90810784 	addi	r2,r18,1054
 800dc94:	8086983a 	sll	r3,r16,r2
 800dc98:	990ad83a 	srl	r5,r19,r4
 800dc9c:	9884983a 	sll	r2,r19,r2
 800dca0:	8108d83a 	srl	r4,r16,r4
 800dca4:	1966b03a 	or	r19,r3,r5
 800dca8:	1004c03a 	cmpne	r2,r2,zero
 800dcac:	98a6b03a 	or	r19,r19,r2
 800dcb0:	988001cc 	andi	r2,r19,7
 800dcb4:	10000726 	beq	r2,zero,800dcd4 <__divdf3+0x7e4>
 800dcb8:	988003cc 	andi	r2,r19,15
 800dcbc:	10800120 	cmpeqi	r2,r2,4
 800dcc0:	1000041e 	bne	r2,zero,800dcd4 <__divdf3+0x7e4>
 800dcc4:	98800104 	addi	r2,r19,4
 800dcc8:	14e7803a 	cmpltu	r19,r2,r19
 800dccc:	24c9883a 	add	r4,r4,r19
 800dcd0:	1027883a 	mov	r19,r2
 800dcd4:	2080202c 	andhi	r2,r4,128
 800dcd8:	10005026 	beq	r2,zero,800de1c <__divdf3+0x92c>
 800dcdc:	00800044 	movi	r2,1
 800dce0:	0009883a 	mov	r4,zero
 800dce4:	0027883a 	mov	r19,zero
 800dce8:	003e7106 	br	800d6b0 <__divdf3+0x1c0>
 800dcec:	b00d883a 	mov	r6,r22
 800dcf0:	0081ffc4 	movi	r2,2047
 800dcf4:	0009883a 	mov	r4,zero
 800dcf8:	0027883a 	mov	r19,zero
 800dcfc:	003e6c06 	br	800d6b0 <__divdf3+0x1c0>
 800dd00:	8a3fbb1e 	bne	r17,r8,800dbf0 <__divdf3+0x700>
 800dd04:	d9000017 	ldw	r4,0(sp)
 800dd08:	a13fb936 	bltu	r20,r4,800dbf0 <__divdf3+0x700>
 800dd0c:	003fb606 	br	800dbe8 <__divdf3+0x6f8>
 800dd10:	123f0a2e 	bgeu	r2,r8,800d93c <__divdf3+0x44c>
 800dd14:	843fff84 	addi	r16,r16,-2
 800dd18:	1445883a 	add	r2,r2,r17
 800dd1c:	003f0806 	br	800d940 <__divdf3+0x450>
 800dd20:	15beef2e 	bgeu	r2,r22,800d8e0 <__divdf3+0x3f0>
 800dd24:	bdffff84 	addi	r23,r23,-2
 800dd28:	1445883a 	add	r2,r2,r17
 800dd2c:	003eed06 	br	800d8e4 <__divdf3+0x3f4>
 800dd30:	2827883a 	mov	r19,r5
 800dd34:	193f941e 	bne	r3,r4,800db88 <__divdf3+0x698>
 800dd38:	d8c00017 	ldw	r3,0(sp)
 800dd3c:	18bf921e 	bne	r3,r2,800db88 <__divdf3+0x698>
 800dd40:	003e4506 	br	800d658 <__divdf3+0x168>
 800dd44:	053fcb0e 	bge	zero,r20,800dc74 <__divdf3+0x784>
 800dd48:	0027883a 	mov	r19,zero
 800dd4c:	00c00044 	movi	r3,1
 800dd50:	80e1883a 	add	r16,r16,r3
 800dd54:	003e4406 	br	800d668 <__divdf3+0x178>
 800dd58:	1013883a 	mov	r9,r2
 800dd5c:	003f6306 	br	800daec <__divdf3+0x5fc>
 800dd60:	2011883a 	mov	r8,r4
 800dd64:	003f4406 	br	800da78 <__divdf3+0x588>
 800dd68:	988003cc 	andi	r2,r19,15
 800dd6c:	10800118 	cmpnei	r2,r2,4
 800dd70:	103e3c26 	beq	r2,zero,800d664 <__divdf3+0x174>
 800dd74:	98800104 	addi	r2,r19,4
 800dd78:	00fffec4 	movi	r3,-5
 800dd7c:	1cc7803a 	cmpltu	r3,r3,r19
 800dd80:	1026d0fa 	srli	r19,r2,3
 800dd84:	003ff206 	br	800dd50 <__divdf3+0x860>
 800dd88:	a0ff992e 	bgeu	r20,r3,800dbf0 <__divdf3+0x700>
 800dd8c:	d8800017 	ldw	r2,0(sp)
 800dd90:	843fff84 	addi	r16,r16,-2
 800dd94:	a0a9883a 	add	r20,r20,r2
 800dd98:	a085803a 	cmpltu	r2,r20,r2
 800dd9c:	1445883a 	add	r2,r2,r17
 800dda0:	4091883a 	add	r8,r8,r2
 800dda4:	003f1306 	br	800d9f4 <__divdf3+0x504>
 800dda8:	d9c00017 	ldw	r7,0(sp)
 800ddac:	9cffff84 	addi	r19,r19,-2
 800ddb0:	39cb883a 	add	r5,r7,r7
 800ddb4:	29cf803a 	cmpltu	r7,r5,r7
 800ddb8:	3c4f883a 	add	r7,r7,r17
 800ddbc:	19c7883a 	add	r3,r3,r7
 800ddc0:	d9400015 	stw	r5,0(sp)
 800ddc4:	003fdb06 	br	800dd34 <__divdf3+0x844>
 800ddc8:	00bff844 	movi	r2,-31
 800ddcc:	1529c83a 	sub	r20,r2,r20
 800ddd0:	21000820 	cmpeqi	r4,r4,32
 800ddd4:	8528d83a 	srl	r20,r16,r20
 800ddd8:	2000031e 	bne	r4,zero,800dde8 <__divdf3+0x8f8>
 800dddc:	90810f84 	addi	r2,r18,1086
 800dde0:	8088983a 	sll	r4,r16,r2
 800dde4:	9926b03a 	or	r19,r19,r4
 800dde8:	9826c03a 	cmpne	r19,r19,zero
 800ddec:	9d26b03a 	or	r19,r19,r20
 800ddf0:	9c0001cc 	andi	r16,r19,7
 800ddf4:	8000051e 	bne	r16,zero,800de0c <__divdf3+0x91c>
 800ddf8:	0009883a 	mov	r4,zero
 800ddfc:	9826d0fa 	srli	r19,r19,3
 800de00:	0005883a 	mov	r2,zero
 800de04:	9c26b03a 	or	r19,r19,r16
 800de08:	003e2906 	br	800d6b0 <__divdf3+0x1c0>
 800de0c:	988003cc 	andi	r2,r19,15
 800de10:	10800118 	cmpnei	r2,r2,4
 800de14:	0009883a 	mov	r4,zero
 800de18:	103faa1e 	bne	r2,zero,800dcc4 <__divdf3+0x7d4>
 800de1c:	2004927a 	slli	r2,r4,9
 800de20:	2020977a 	slli	r16,r4,29
 800de24:	1008d33a 	srli	r4,r2,12
 800de28:	003ff406 	br	800ddfc <__divdf3+0x90c>
 800de2c:	00800434 	movhi	r2,16
 800de30:	81000234 	orhi	r4,r16,8
 800de34:	10bfffc4 	addi	r2,r2,-1
 800de38:	2088703a 	and	r4,r4,r2
 800de3c:	b00d883a 	mov	r6,r22
 800de40:	003e7b06 	br	800d830 <__divdf3+0x340>
 800de44:	d9c00017 	ldw	r7,0(sp)
 800de48:	38bfd736 	bltu	r7,r2,800dda8 <__divdf3+0x8b8>
 800de4c:	2827883a 	mov	r19,r5
 800de50:	003fb906 	br	800dd38 <__divdf3+0x848>

0800de54 <__eqdf2>:
 800de54:	2810d53a 	srli	r8,r5,20
 800de58:	3806d53a 	srli	r3,r7,20
 800de5c:	00800434 	movhi	r2,16
 800de60:	4201ffcc 	andi	r8,r8,2047
 800de64:	10bfffc4 	addi	r2,r2,-1
 800de68:	4281ffd8 	cmpnei	r10,r8,2047
 800de6c:	2892703a 	and	r9,r5,r2
 800de70:	18c1ffcc 	andi	r3,r3,2047
 800de74:	3884703a 	and	r2,r7,r2
 800de78:	280ad7fa 	srli	r5,r5,31
 800de7c:	380ed7fa 	srli	r7,r7,31
 800de80:	50000626 	beq	r10,zero,800de9c <__eqdf2+0x48>
 800de84:	1a81ffe0 	cmpeqi	r10,r3,2047
 800de88:	5000021e 	bne	r10,zero,800de94 <__eqdf2+0x40>
 800de8c:	40c0011e 	bne	r8,r3,800de94 <__eqdf2+0x40>
 800de90:	48800826 	beq	r9,r2,800deb4 <__eqdf2+0x60>
 800de94:	00800044 	movi	r2,1
 800de98:	f800283a 	ret
 800de9c:	4914b03a 	or	r10,r9,r4
 800dea0:	503ffc1e 	bne	r10,zero,800de94 <__eqdf2+0x40>
 800dea4:	18c1ffd8 	cmpnei	r3,r3,2047
 800dea8:	183ffa1e 	bne	r3,zero,800de94 <__eqdf2+0x40>
 800deac:	1184b03a 	or	r2,r2,r6
 800deb0:	103ff81e 	bne	r2,zero,800de94 <__eqdf2+0x40>
 800deb4:	21bff71e 	bne	r4,r6,800de94 <__eqdf2+0x40>
 800deb8:	29c00426 	beq	r5,r7,800decc <__eqdf2+0x78>
 800debc:	403ff51e 	bne	r8,zero,800de94 <__eqdf2+0x40>
 800dec0:	4904b03a 	or	r2,r9,r4
 800dec4:	1004c03a 	cmpne	r2,r2,zero
 800dec8:	f800283a 	ret
 800decc:	0005883a 	mov	r2,zero
 800ded0:	f800283a 	ret

0800ded4 <__gedf2>:
 800ded4:	2810d53a 	srli	r8,r5,20
 800ded8:	3812d53a 	srli	r9,r7,20
 800dedc:	00800434 	movhi	r2,16
 800dee0:	4201ffcc 	andi	r8,r8,2047
 800dee4:	10bfffc4 	addi	r2,r2,-1
 800dee8:	4281ffd8 	cmpnei	r10,r8,2047
 800deec:	2896703a 	and	r11,r5,r2
 800def0:	3886703a 	and	r3,r7,r2
 800def4:	280ad7fa 	srli	r5,r5,31
 800def8:	4a41ffcc 	andi	r9,r9,2047
 800defc:	3804d7fa 	srli	r2,r7,31
 800df00:	50000b26 	beq	r10,zero,800df30 <__gedf2+0x5c>
 800df04:	49c1ffd8 	cmpnei	r7,r9,2047
 800df08:	38000d26 	beq	r7,zero,800df40 <__gedf2+0x6c>
 800df0c:	4000191e 	bne	r8,zero,800df74 <__gedf2+0xa0>
 800df10:	5914b03a 	or	r10,r11,r4
 800df14:	500f003a 	cmpeq	r7,r10,zero
 800df18:	4800131e 	bne	r9,zero,800df68 <__gedf2+0x94>
 800df1c:	1998b03a 	or	r12,r3,r6
 800df20:	6000111e 	bne	r12,zero,800df68 <__gedf2+0x94>
 800df24:	50000a1e 	bne	r10,zero,800df50 <__gedf2+0x7c>
 800df28:	0005883a 	mov	r2,zero
 800df2c:	f800283a 	ret
 800df30:	590eb03a 	or	r7,r11,r4
 800df34:	38001e1e 	bne	r7,zero,800dfb0 <__gedf2+0xdc>
 800df38:	49c1ffe0 	cmpeqi	r7,r9,2047
 800df3c:	38000d26 	beq	r7,zero,800df74 <__gedf2+0xa0>
 800df40:	198eb03a 	or	r7,r3,r6
 800df44:	38001a1e 	bne	r7,zero,800dfb0 <__gedf2+0xdc>
 800df48:	40000526 	beq	r8,zero,800df60 <__gedf2+0x8c>
 800df4c:	28800d26 	beq	r5,r2,800df84 <__gedf2+0xb0>
 800df50:	00800044 	movi	r2,1
 800df54:	28000626 	beq	r5,zero,800df70 <__gedf2+0x9c>
 800df58:	00bfffc4 	movi	r2,-1
 800df5c:	f800283a 	ret
 800df60:	590eb03a 	or	r7,r11,r4
 800df64:	380f003a 	cmpeq	r7,r7,zero
 800df68:	383ff826 	beq	r7,zero,800df4c <__gedf2+0x78>
 800df6c:	103ffa26 	beq	r2,zero,800df58 <__gedf2+0x84>
 800df70:	f800283a 	ret
 800df74:	483ff51e 	bne	r9,zero,800df4c <__gedf2+0x78>
 800df78:	198eb03a 	or	r7,r3,r6
 800df7c:	383ff31e 	bne	r7,zero,800df4c <__gedf2+0x78>
 800df80:	003ff306 	br	800df50 <__gedf2+0x7c>
 800df84:	4a000716 	blt	r9,r8,800dfa4 <__gedf2+0xd0>
 800df88:	427ff816 	blt	r8,r9,800df6c <__gedf2+0x98>
 800df8c:	1afff036 	bltu	r3,r11,800df50 <__gedf2+0x7c>
 800df90:	58c00926 	beq	r11,r3,800dfb8 <__gedf2+0xe4>
 800df94:	58ffe42e 	bgeu	r11,r3,800df28 <__gedf2+0x54>
 800df98:	283fef26 	beq	r5,zero,800df58 <__gedf2+0x84>
 800df9c:	2805883a 	mov	r2,r5
 800dfa0:	f800283a 	ret
 800dfa4:	103fec1e 	bne	r2,zero,800df58 <__gedf2+0x84>
 800dfa8:	00800044 	movi	r2,1
 800dfac:	f800283a 	ret
 800dfb0:	00bfff84 	movi	r2,-2
 800dfb4:	f800283a 	ret
 800dfb8:	313fe536 	bltu	r6,r4,800df50 <__gedf2+0x7c>
 800dfbc:	21bfda2e 	bgeu	r4,r6,800df28 <__gedf2+0x54>
 800dfc0:	003ff506 	br	800df98 <__gedf2+0xc4>

0800dfc4 <__ledf2>:
 800dfc4:	2810d53a 	srli	r8,r5,20
 800dfc8:	3812d53a 	srli	r9,r7,20
 800dfcc:	00800434 	movhi	r2,16
 800dfd0:	4201ffcc 	andi	r8,r8,2047
 800dfd4:	10bfffc4 	addi	r2,r2,-1
 800dfd8:	4281ffd8 	cmpnei	r10,r8,2047
 800dfdc:	2896703a 	and	r11,r5,r2
 800dfe0:	3886703a 	and	r3,r7,r2
 800dfe4:	280ad7fa 	srli	r5,r5,31
 800dfe8:	4a41ffcc 	andi	r9,r9,2047
 800dfec:	3804d7fa 	srli	r2,r7,31
 800dff0:	50000b26 	beq	r10,zero,800e020 <__ledf2+0x5c>
 800dff4:	49c1ffd8 	cmpnei	r7,r9,2047
 800dff8:	38000d26 	beq	r7,zero,800e030 <__ledf2+0x6c>
 800dffc:	40001b1e 	bne	r8,zero,800e06c <__ledf2+0xa8>
 800e000:	5914b03a 	or	r10,r11,r4
 800e004:	500f003a 	cmpeq	r7,r10,zero
 800e008:	48000e1e 	bne	r9,zero,800e044 <__ledf2+0x80>
 800e00c:	1998b03a 	or	r12,r3,r6
 800e010:	60000c1e 	bne	r12,zero,800e044 <__ledf2+0x80>
 800e014:	50000d1e 	bne	r10,zero,800e04c <__ledf2+0x88>
 800e018:	0005883a 	mov	r2,zero
 800e01c:	f800283a 	ret
 800e020:	590eb03a 	or	r7,r11,r4
 800e024:	38000d1e 	bne	r7,zero,800e05c <__ledf2+0x98>
 800e028:	49c1ffe0 	cmpeqi	r7,r9,2047
 800e02c:	38000f26 	beq	r7,zero,800e06c <__ledf2+0xa8>
 800e030:	198eb03a 	or	r7,r3,r6
 800e034:	3800091e 	bne	r7,zero,800e05c <__ledf2+0x98>
 800e038:	4000031e 	bne	r8,zero,800e048 <__ledf2+0x84>
 800e03c:	590eb03a 	or	r7,r11,r4
 800e040:	380f003a 	cmpeq	r7,r7,zero
 800e044:	3800071e 	bne	r7,zero,800e064 <__ledf2+0xa0>
 800e048:	28800c26 	beq	r5,r2,800e07c <__ledf2+0xb8>
 800e04c:	00800044 	movi	r2,1
 800e050:	28000526 	beq	r5,zero,800e068 <__ledf2+0xa4>
 800e054:	00bfffc4 	movi	r2,-1
 800e058:	f800283a 	ret
 800e05c:	00800084 	movi	r2,2
 800e060:	f800283a 	ret
 800e064:	103ffb26 	beq	r2,zero,800e054 <__ledf2+0x90>
 800e068:	f800283a 	ret
 800e06c:	483ff61e 	bne	r9,zero,800e048 <__ledf2+0x84>
 800e070:	198eb03a 	or	r7,r3,r6
 800e074:	383ff41e 	bne	r7,zero,800e048 <__ledf2+0x84>
 800e078:	003ff406 	br	800e04c <__ledf2+0x88>
 800e07c:	4a00030e 	bge	r9,r8,800e08c <__ledf2+0xc8>
 800e080:	103ff41e 	bne	r2,zero,800e054 <__ledf2+0x90>
 800e084:	00800044 	movi	r2,1
 800e088:	f800283a 	ret
 800e08c:	427ff516 	blt	r8,r9,800e064 <__ledf2+0xa0>
 800e090:	1affee36 	bltu	r3,r11,800e04c <__ledf2+0x88>
 800e094:	58c00426 	beq	r11,r3,800e0a8 <__ledf2+0xe4>
 800e098:	58ffdf2e 	bgeu	r11,r3,800e018 <__ledf2+0x54>
 800e09c:	283fed26 	beq	r5,zero,800e054 <__ledf2+0x90>
 800e0a0:	2805883a 	mov	r2,r5
 800e0a4:	f800283a 	ret
 800e0a8:	313fe836 	bltu	r6,r4,800e04c <__ledf2+0x88>
 800e0ac:	21bfda2e 	bgeu	r4,r6,800e018 <__ledf2+0x54>
 800e0b0:	003ffa06 	br	800e09c <__ledf2+0xd8>

0800e0b4 <__muldf3>:
 800e0b4:	2810d53a 	srli	r8,r5,20
 800e0b8:	deffef04 	addi	sp,sp,-68
 800e0bc:	dc000715 	stw	r16,28(sp)
 800e0c0:	04000434 	movhi	r16,16
 800e0c4:	dd000b15 	stw	r20,44(sp)
 800e0c8:	dc800915 	stw	r18,36(sp)
 800e0cc:	843fffc4 	addi	r16,r16,-1
 800e0d0:	dfc01015 	stw	ra,64(sp)
 800e0d4:	df000f15 	stw	fp,60(sp)
 800e0d8:	ddc00e15 	stw	r23,56(sp)
 800e0dc:	dd800d15 	stw	r22,52(sp)
 800e0e0:	dd400c15 	stw	r21,48(sp)
 800e0e4:	dcc00a15 	stw	r19,40(sp)
 800e0e8:	dc400815 	stw	r17,32(sp)
 800e0ec:	4201ffcc 	andi	r8,r8,2047
 800e0f0:	2025883a 	mov	r18,r4
 800e0f4:	2c20703a 	and	r16,r5,r16
 800e0f8:	2828d7fa 	srli	r20,r5,31
 800e0fc:	40005d26 	beq	r8,zero,800e274 <__muldf3+0x1c0>
 800e100:	4081ffe0 	cmpeqi	r2,r8,2047
 800e104:	1000721e 	bne	r2,zero,800e2d0 <__muldf3+0x21c>
 800e108:	802090fa 	slli	r16,r16,3
 800e10c:	2006d77a 	srli	r3,r4,29
 800e110:	202c90fa 	slli	r22,r4,3
 800e114:	423f0044 	addi	r8,r8,-1023
 800e118:	1c20b03a 	or	r16,r3,r16
 800e11c:	84002034 	orhi	r16,r16,128
 800e120:	0027883a 	mov	r19,zero
 800e124:	002f883a 	mov	r23,zero
 800e128:	3806d53a 	srli	r3,r7,20
 800e12c:	04400434 	movhi	r17,16
 800e130:	8c7fffc4 	addi	r17,r17,-1
 800e134:	18c1ffcc 	andi	r3,r3,2047
 800e138:	3c62703a 	and	r17,r7,r17
 800e13c:	382ad7fa 	srli	r21,r7,31
 800e140:	18006a26 	beq	r3,zero,800e2ec <__muldf3+0x238>
 800e144:	1881ffe0 	cmpeqi	r2,r3,2047
 800e148:	1000211e 	bne	r2,zero,800e1d0 <__muldf3+0x11c>
 800e14c:	882290fa 	slli	r17,r17,3
 800e150:	3008d77a 	srli	r4,r6,29
 800e154:	302490fa 	slli	r18,r6,3
 800e158:	18ff0044 	addi	r3,r3,-1023
 800e15c:	2462b03a 	or	r17,r4,r17
 800e160:	40d1883a 	add	r8,r8,r3
 800e164:	8c402034 	orhi	r17,r17,128
 800e168:	0007883a 	mov	r3,zero
 800e16c:	98800428 	cmpgeui	r2,r19,16
 800e170:	a54cf03a 	xor	r6,r20,r21
 800e174:	42400044 	addi	r9,r8,1
 800e178:	10009b1e 	bne	r2,zero,800e3e8 <__muldf3+0x334>
 800e17c:	982690ba 	slli	r19,r19,2
 800e180:	00820074 	movhi	r2,2049
 800e184:	9885883a 	add	r2,r19,r2
 800e188:	10b86417 	ldw	r2,-7792(r2)
 800e18c:	1000683a 	jmp	r2
 800e190:	0800e3e8 	cmpgeui	zero,at,911
 800e194:	0800e1f0 	cmpltui	zero,at,903
 800e198:	0800e1f0 	cmpltui	zero,at,903
 800e19c:	0800e1ec 	andhi	zero,at,903
 800e1a0:	0800e1fc 	xorhi	zero,at,903
 800e1a4:	0800e1fc 	xorhi	zero,at,903
 800e1a8:	0800e3a4 	muli	zero,at,910
 800e1ac:	0800e1ec 	andhi	zero,at,903
 800e1b0:	0800e1fc 	xorhi	zero,at,903
 800e1b4:	0800e3a4 	muli	zero,at,910
 800e1b8:	0800e1fc 	xorhi	zero,at,903
 800e1bc:	0800e1ec 	andhi	zero,at,903
 800e1c0:	0800e39c 	xori	zero,at,910
 800e1c4:	0800e39c 	xori	zero,at,910
 800e1c8:	0800e39c 	xori	zero,at,910
 800e1cc:	0800e3bc 	xorhi	zero,at,910
 800e1d0:	3464b03a 	or	r18,r6,r17
 800e1d4:	4201ffc4 	addi	r8,r8,2047
 800e1d8:	90006c1e 	bne	r18,zero,800e38c <__muldf3+0x2d8>
 800e1dc:	9cc00094 	ori	r19,r19,2
 800e1e0:	0023883a 	mov	r17,zero
 800e1e4:	00c00084 	movi	r3,2
 800e1e8:	003fe006 	br	800e16c <__muldf3+0xb8>
 800e1ec:	a80d883a 	mov	r6,r21
 800e1f0:	8821883a 	mov	r16,r17
 800e1f4:	902d883a 	mov	r22,r18
 800e1f8:	182f883a 	mov	r23,r3
 800e1fc:	b88000a0 	cmpeqi	r2,r23,2
 800e200:	1000501e 	bne	r2,zero,800e344 <__muldf3+0x290>
 800e204:	b88000e0 	cmpeqi	r2,r23,3
 800e208:	10019d1e 	bne	r2,zero,800e880 <__muldf3+0x7cc>
 800e20c:	b8800060 	cmpeqi	r2,r23,1
 800e210:	10012a26 	beq	r2,zero,800e6bc <__muldf3+0x608>
 800e214:	0007883a 	mov	r3,zero
 800e218:	0021883a 	mov	r16,zero
 800e21c:	002d883a 	mov	r22,zero
 800e220:	04400434 	movhi	r17,16
 800e224:	1806953a 	slli	r3,r3,20
 800e228:	31803fcc 	andi	r6,r6,255
 800e22c:	8c7fffc4 	addi	r17,r17,-1
 800e230:	300c97fa 	slli	r6,r6,31
 800e234:	8460703a 	and	r16,r16,r17
 800e238:	80c6b03a 	or	r3,r16,r3
 800e23c:	1986b03a 	or	r3,r3,r6
 800e240:	b005883a 	mov	r2,r22
 800e244:	dfc01017 	ldw	ra,64(sp)
 800e248:	df000f17 	ldw	fp,60(sp)
 800e24c:	ddc00e17 	ldw	r23,56(sp)
 800e250:	dd800d17 	ldw	r22,52(sp)
 800e254:	dd400c17 	ldw	r21,48(sp)
 800e258:	dd000b17 	ldw	r20,44(sp)
 800e25c:	dcc00a17 	ldw	r19,40(sp)
 800e260:	dc800917 	ldw	r18,36(sp)
 800e264:	dc400817 	ldw	r17,32(sp)
 800e268:	dc000717 	ldw	r16,28(sp)
 800e26c:	dec01104 	addi	sp,sp,68
 800e270:	f800283a 	ret
 800e274:	812cb03a 	or	r22,r16,r4
 800e278:	b0003f26 	beq	r22,zero,800e378 <__muldf3+0x2c4>
 800e27c:	d9c00115 	stw	r7,4(sp)
 800e280:	d9800015 	stw	r6,0(sp)
 800e284:	80013b26 	beq	r16,zero,800e774 <__muldf3+0x6c0>
 800e288:	8009883a 	mov	r4,r16
 800e28c:	800f4380 	call	800f438 <__clzsi2>
 800e290:	d9800017 	ldw	r6,0(sp)
 800e294:	d9c00117 	ldw	r7,4(sp)
 800e298:	1007883a 	mov	r3,r2
 800e29c:	117ffd44 	addi	r5,r2,-11
 800e2a0:	01000744 	movi	r4,29
 800e2a4:	1dbffe04 	addi	r22,r3,-8
 800e2a8:	2149c83a 	sub	r4,r4,r5
 800e2ac:	85a0983a 	sll	r16,r16,r22
 800e2b0:	9108d83a 	srl	r4,r18,r4
 800e2b4:	95ac983a 	sll	r22,r18,r22
 800e2b8:	2420b03a 	or	r16,r4,r16
 800e2bc:	023f0344 	movi	r8,-1011
 800e2c0:	40d1c83a 	sub	r8,r8,r3
 800e2c4:	0027883a 	mov	r19,zero
 800e2c8:	002f883a 	mov	r23,zero
 800e2cc:	003f9606 	br	800e128 <__muldf3+0x74>
 800e2d0:	812cb03a 	or	r22,r16,r4
 800e2d4:	b000231e 	bne	r22,zero,800e364 <__muldf3+0x2b0>
 800e2d8:	0021883a 	mov	r16,zero
 800e2dc:	04c00204 	movi	r19,8
 800e2e0:	0201ffc4 	movi	r8,2047
 800e2e4:	05c00084 	movi	r23,2
 800e2e8:	003f8f06 	br	800e128 <__muldf3+0x74>
 800e2ec:	3464b03a 	or	r18,r6,r17
 800e2f0:	90001826 	beq	r18,zero,800e354 <__muldf3+0x2a0>
 800e2f4:	88011126 	beq	r17,zero,800e73c <__muldf3+0x688>
 800e2f8:	8809883a 	mov	r4,r17
 800e2fc:	d9800115 	stw	r6,4(sp)
 800e300:	da000015 	stw	r8,0(sp)
 800e304:	800f4380 	call	800f438 <__clzsi2>
 800e308:	da000017 	ldw	r8,0(sp)
 800e30c:	d9800117 	ldw	r6,4(sp)
 800e310:	1007883a 	mov	r3,r2
 800e314:	117ffd44 	addi	r5,r2,-11
 800e318:	01000744 	movi	r4,29
 800e31c:	1cbffe04 	addi	r18,r3,-8
 800e320:	2149c83a 	sub	r4,r4,r5
 800e324:	8ca2983a 	sll	r17,r17,r18
 800e328:	3108d83a 	srl	r4,r6,r4
 800e32c:	34a4983a 	sll	r18,r6,r18
 800e330:	2462b03a 	or	r17,r4,r17
 800e334:	40d1c83a 	sub	r8,r8,r3
 800e338:	423f0344 	addi	r8,r8,-1011
 800e33c:	0007883a 	mov	r3,zero
 800e340:	003f8a06 	br	800e16c <__muldf3+0xb8>
 800e344:	00c1ffc4 	movi	r3,2047
 800e348:	0021883a 	mov	r16,zero
 800e34c:	002d883a 	mov	r22,zero
 800e350:	003fb306 	br	800e220 <__muldf3+0x16c>
 800e354:	9cc00054 	ori	r19,r19,1
 800e358:	0023883a 	mov	r17,zero
 800e35c:	00c00044 	movi	r3,1
 800e360:	003f8206 	br	800e16c <__muldf3+0xb8>
 800e364:	202d883a 	mov	r22,r4
 800e368:	04c00304 	movi	r19,12
 800e36c:	0201ffc4 	movi	r8,2047
 800e370:	05c000c4 	movi	r23,3
 800e374:	003f6c06 	br	800e128 <__muldf3+0x74>
 800e378:	0021883a 	mov	r16,zero
 800e37c:	04c00104 	movi	r19,4
 800e380:	0011883a 	mov	r8,zero
 800e384:	05c00044 	movi	r23,1
 800e388:	003f6706 	br	800e128 <__muldf3+0x74>
 800e38c:	9cc000d4 	ori	r19,r19,3
 800e390:	3025883a 	mov	r18,r6
 800e394:	00c000c4 	movi	r3,3
 800e398:	003f7406 	br	800e16c <__muldf3+0xb8>
 800e39c:	a00d883a 	mov	r6,r20
 800e3a0:	003f9606 	br	800e1fc <__muldf3+0x148>
 800e3a4:	04000434 	movhi	r16,16
 800e3a8:	000d883a 	mov	r6,zero
 800e3ac:	843fffc4 	addi	r16,r16,-1
 800e3b0:	05bfffc4 	movi	r22,-1
 800e3b4:	00c1ffc4 	movi	r3,2047
 800e3b8:	003f9906 	br	800e220 <__muldf3+0x16c>
 800e3bc:	8080022c 	andhi	r2,r16,8
 800e3c0:	1000d826 	beq	r2,zero,800e724 <__muldf3+0x670>
 800e3c4:	8880022c 	andhi	r2,r17,8
 800e3c8:	1000d61e 	bne	r2,zero,800e724 <__muldf3+0x670>
 800e3cc:	00800434 	movhi	r2,16
 800e3d0:	8c000234 	orhi	r16,r17,8
 800e3d4:	10bfffc4 	addi	r2,r2,-1
 800e3d8:	80a0703a 	and	r16,r16,r2
 800e3dc:	a80d883a 	mov	r6,r21
 800e3e0:	902d883a 	mov	r22,r18
 800e3e4:	003ff306 	br	800e3b4 <__muldf3+0x300>
 800e3e8:	b028d43a 	srli	r20,r22,16
 800e3ec:	902ed43a 	srli	r23,r18,16
 800e3f0:	b5bfffcc 	andi	r22,r22,65535
 800e3f4:	94bfffcc 	andi	r18,r18,65535
 800e3f8:	b00b883a 	mov	r5,r22
 800e3fc:	9009883a 	mov	r4,r18
 800e400:	d9800215 	stw	r6,8(sp)
 800e404:	da000115 	stw	r8,4(sp)
 800e408:	da400015 	stw	r9,0(sp)
 800e40c:	80029d40 	call	80029d4 <__mulsi3>
 800e410:	900b883a 	mov	r5,r18
 800e414:	a009883a 	mov	r4,r20
 800e418:	1027883a 	mov	r19,r2
 800e41c:	80029d40 	call	80029d4 <__mulsi3>
 800e420:	b80b883a 	mov	r5,r23
 800e424:	a009883a 	mov	r4,r20
 800e428:	102b883a 	mov	r21,r2
 800e42c:	80029d40 	call	80029d4 <__mulsi3>
 800e430:	b00b883a 	mov	r5,r22
 800e434:	b809883a 	mov	r4,r23
 800e438:	1039883a 	mov	fp,r2
 800e43c:	80029d40 	call	80029d4 <__mulsi3>
 800e440:	9806d43a 	srli	r3,r19,16
 800e444:	1545883a 	add	r2,r2,r21
 800e448:	da400017 	ldw	r9,0(sp)
 800e44c:	1885883a 	add	r2,r3,r2
 800e450:	da000117 	ldw	r8,4(sp)
 800e454:	d9800217 	ldw	r6,8(sp)
 800e458:	1540022e 	bgeu	r2,r21,800e464 <__muldf3+0x3b0>
 800e45c:	00c00074 	movhi	r3,1
 800e460:	e0f9883a 	add	fp,fp,r3
 800e464:	1006943a 	slli	r3,r2,16
 800e468:	1004d43a 	srli	r2,r2,16
 800e46c:	882ad43a 	srli	r21,r17,16
 800e470:	9cffffcc 	andi	r19,r19,65535
 800e474:	8c7fffcc 	andi	r17,r17,65535
 800e478:	b00b883a 	mov	r5,r22
 800e47c:	8809883a 	mov	r4,r17
 800e480:	d8800015 	stw	r2,0(sp)
 800e484:	1cc5883a 	add	r2,r3,r19
 800e488:	d9800515 	stw	r6,20(sp)
 800e48c:	da000415 	stw	r8,16(sp)
 800e490:	da400315 	stw	r9,12(sp)
 800e494:	d8800115 	stw	r2,4(sp)
 800e498:	80029d40 	call	80029d4 <__mulsi3>
 800e49c:	a009883a 	mov	r4,r20
 800e4a0:	880b883a 	mov	r5,r17
 800e4a4:	d8800215 	stw	r2,8(sp)
 800e4a8:	80029d40 	call	80029d4 <__mulsi3>
 800e4ac:	a009883a 	mov	r4,r20
 800e4b0:	a80b883a 	mov	r5,r21
 800e4b4:	1027883a 	mov	r19,r2
 800e4b8:	80029d40 	call	80029d4 <__mulsi3>
 800e4bc:	b00b883a 	mov	r5,r22
 800e4c0:	a809883a 	mov	r4,r21
 800e4c4:	1029883a 	mov	r20,r2
 800e4c8:	80029d40 	call	80029d4 <__mulsi3>
 800e4cc:	d9c00217 	ldw	r7,8(sp)
 800e4d0:	14c5883a 	add	r2,r2,r19
 800e4d4:	da400317 	ldw	r9,12(sp)
 800e4d8:	3806d43a 	srli	r3,r7,16
 800e4dc:	da000417 	ldw	r8,16(sp)
 800e4e0:	d9800517 	ldw	r6,20(sp)
 800e4e4:	1885883a 	add	r2,r3,r2
 800e4e8:	14c0022e 	bgeu	r2,r19,800e4f4 <__muldf3+0x440>
 800e4ec:	00c00074 	movhi	r3,1
 800e4f0:	a0e9883a 	add	r20,r20,r3
 800e4f4:	1006d43a 	srli	r3,r2,16
 800e4f8:	1004943a 	slli	r2,r2,16
 800e4fc:	802cd43a 	srli	r22,r16,16
 800e500:	843fffcc 	andi	r16,r16,65535
 800e504:	3cffffcc 	andi	r19,r7,65535
 800e508:	9009883a 	mov	r4,r18
 800e50c:	800b883a 	mov	r5,r16
 800e510:	d9800615 	stw	r6,24(sp)
 800e514:	da000515 	stw	r8,20(sp)
 800e518:	da400415 	stw	r9,16(sp)
 800e51c:	1d29883a 	add	r20,r3,r20
 800e520:	14e7883a 	add	r19,r2,r19
 800e524:	80029d40 	call	80029d4 <__mulsi3>
 800e528:	900b883a 	mov	r5,r18
 800e52c:	b009883a 	mov	r4,r22
 800e530:	d8800315 	stw	r2,12(sp)
 800e534:	80029d40 	call	80029d4 <__mulsi3>
 800e538:	b00b883a 	mov	r5,r22
 800e53c:	b809883a 	mov	r4,r23
 800e540:	1025883a 	mov	r18,r2
 800e544:	80029d40 	call	80029d4 <__mulsi3>
 800e548:	800b883a 	mov	r5,r16
 800e54c:	b809883a 	mov	r4,r23
 800e550:	d8800215 	stw	r2,8(sp)
 800e554:	80029d40 	call	80029d4 <__mulsi3>
 800e558:	d8c00317 	ldw	r3,12(sp)
 800e55c:	d9400017 	ldw	r5,0(sp)
 800e560:	1485883a 	add	r2,r2,r18
 800e564:	1808d43a 	srli	r4,r3,16
 800e568:	2ccf883a 	add	r7,r5,r19
 800e56c:	da800217 	ldw	r10,8(sp)
 800e570:	2085883a 	add	r2,r4,r2
 800e574:	da400417 	ldw	r9,16(sp)
 800e578:	da000517 	ldw	r8,20(sp)
 800e57c:	d9800617 	ldw	r6,24(sp)
 800e580:	1480022e 	bgeu	r2,r18,800e58c <__muldf3+0x4d8>
 800e584:	01000074 	movhi	r4,1
 800e588:	5115883a 	add	r10,r10,r4
 800e58c:	1024d43a 	srli	r18,r2,16
 800e590:	1004943a 	slli	r2,r2,16
 800e594:	1dffffcc 	andi	r23,r3,65535
 800e598:	8809883a 	mov	r4,r17
 800e59c:	800b883a 	mov	r5,r16
 800e5a0:	d9800615 	stw	r6,24(sp)
 800e5a4:	da000515 	stw	r8,20(sp)
 800e5a8:	da400415 	stw	r9,16(sp)
 800e5ac:	d9c00315 	stw	r7,12(sp)
 800e5b0:	92a5883a 	add	r18,r18,r10
 800e5b4:	15ef883a 	add	r23,r2,r23
 800e5b8:	80029d40 	call	80029d4 <__mulsi3>
 800e5bc:	880b883a 	mov	r5,r17
 800e5c0:	b009883a 	mov	r4,r22
 800e5c4:	d8800215 	stw	r2,8(sp)
 800e5c8:	80029d40 	call	80029d4 <__mulsi3>
 800e5cc:	b00b883a 	mov	r5,r22
 800e5d0:	a809883a 	mov	r4,r21
 800e5d4:	d8800015 	stw	r2,0(sp)
 800e5d8:	80029d40 	call	80029d4 <__mulsi3>
 800e5dc:	800b883a 	mov	r5,r16
 800e5e0:	a809883a 	mov	r4,r21
 800e5e4:	1023883a 	mov	r17,r2
 800e5e8:	80029d40 	call	80029d4 <__mulsi3>
 800e5ec:	da800217 	ldw	r10,8(sp)
 800e5f0:	d8c00017 	ldw	r3,0(sp)
 800e5f4:	d9c00317 	ldw	r7,12(sp)
 800e5f8:	500ad43a 	srli	r5,r10,16
 800e5fc:	10c5883a 	add	r2,r2,r3
 800e600:	da400417 	ldw	r9,16(sp)
 800e604:	288b883a 	add	r5,r5,r2
 800e608:	da000517 	ldw	r8,20(sp)
 800e60c:	d9800617 	ldw	r6,24(sp)
 800e610:	28c0022e 	bgeu	r5,r3,800e61c <__muldf3+0x568>
 800e614:	00800074 	movhi	r2,1
 800e618:	88a3883a 	add	r17,r17,r2
 800e61c:	2806943a 	slli	r3,r5,16
 800e620:	52bfffcc 	andi	r10,r10,65535
 800e624:	3f39883a 	add	fp,r7,fp
 800e628:	1a87883a 	add	r3,r3,r10
 800e62c:	e4e7803a 	cmpltu	r19,fp,r19
 800e630:	1d07883a 	add	r3,r3,r20
 800e634:	e5f9883a 	add	fp,fp,r23
 800e638:	1ce1883a 	add	r16,r3,r19
 800e63c:	e5c9803a 	cmpltu	r4,fp,r23
 800e640:	848f883a 	add	r7,r16,r18
 800e644:	280ad43a 	srli	r5,r5,16
 800e648:	3915883a 	add	r10,r7,r4
 800e64c:	1d29803a 	cmpltu	r20,r3,r20
 800e650:	84e1803a 	cmpltu	r16,r16,r19
 800e654:	5109803a 	cmpltu	r4,r10,r4
 800e658:	a420b03a 	or	r16,r20,r16
 800e65c:	3ca5803a 	cmpltu	r18,r7,r18
 800e660:	8161883a 	add	r16,r16,r5
 800e664:	9108b03a 	or	r4,r18,r4
 800e668:	8121883a 	add	r16,r16,r4
 800e66c:	e02c927a 	slli	r22,fp,9
 800e670:	8461883a 	add	r16,r16,r17
 800e674:	d8c00117 	ldw	r3,4(sp)
 800e678:	5004d5fa 	srli	r2,r10,23
 800e67c:	8020927a 	slli	r16,r16,9
 800e680:	e038d5fa 	srli	fp,fp,23
 800e684:	b0ecb03a 	or	r22,r22,r3
 800e688:	5014927a 	slli	r10,r10,9
 800e68c:	80a0b03a 	or	r16,r16,r2
 800e690:	b02cc03a 	cmpne	r22,r22,zero
 800e694:	b72cb03a 	or	r22,r22,fp
 800e698:	8080402c 	andhi	r2,r16,256
 800e69c:	b2acb03a 	or	r22,r22,r10
 800e6a0:	10005c26 	beq	r2,zero,800e814 <__muldf3+0x760>
 800e6a4:	b004d07a 	srli	r2,r22,1
 800e6a8:	800697fa 	slli	r3,r16,31
 800e6ac:	b580004c 	andi	r22,r22,1
 800e6b0:	8020d07a 	srli	r16,r16,1
 800e6b4:	15acb03a 	or	r22,r2,r22
 800e6b8:	b0ecb03a 	or	r22,r22,r3
 800e6bc:	48c0ffc4 	addi	r3,r9,1023
 800e6c0:	00c0370e 	bge	zero,r3,800e7a0 <__muldf3+0x6ec>
 800e6c4:	b08001cc 	andi	r2,r22,7
 800e6c8:	10000726 	beq	r2,zero,800e6e8 <__muldf3+0x634>
 800e6cc:	b08003cc 	andi	r2,r22,15
 800e6d0:	10800120 	cmpeqi	r2,r2,4
 800e6d4:	1000041e 	bne	r2,zero,800e6e8 <__muldf3+0x634>
 800e6d8:	b0800104 	addi	r2,r22,4
 800e6dc:	15ad803a 	cmpltu	r22,r2,r22
 800e6e0:	85a1883a 	add	r16,r16,r22
 800e6e4:	102d883a 	mov	r22,r2
 800e6e8:	8080402c 	andhi	r2,r16,256
 800e6ec:	10000426 	beq	r2,zero,800e700 <__muldf3+0x64c>
 800e6f0:	00bfc034 	movhi	r2,65280
 800e6f4:	10bfffc4 	addi	r2,r2,-1
 800e6f8:	80a0703a 	and	r16,r16,r2
 800e6fc:	48c10004 	addi	r3,r9,1024
 800e700:	1881ffc8 	cmpgei	r2,r3,2047
 800e704:	103f0f1e 	bne	r2,zero,800e344 <__muldf3+0x290>
 800e708:	8004977a 	slli	r2,r16,29
 800e70c:	b02cd0fa 	srli	r22,r22,3
 800e710:	8020927a 	slli	r16,r16,9
 800e714:	18c1ffcc 	andi	r3,r3,2047
 800e718:	15acb03a 	or	r22,r2,r22
 800e71c:	8020d33a 	srli	r16,r16,12
 800e720:	003ebf06 	br	800e220 <__muldf3+0x16c>
 800e724:	00800434 	movhi	r2,16
 800e728:	84000234 	orhi	r16,r16,8
 800e72c:	10bfffc4 	addi	r2,r2,-1
 800e730:	80a0703a 	and	r16,r16,r2
 800e734:	a00d883a 	mov	r6,r20
 800e738:	003f1e06 	br	800e3b4 <__muldf3+0x300>
 800e73c:	3009883a 	mov	r4,r6
 800e740:	da000115 	stw	r8,4(sp)
 800e744:	d9800015 	stw	r6,0(sp)
 800e748:	800f4380 	call	800f438 <__clzsi2>
 800e74c:	11400544 	addi	r5,r2,21
 800e750:	29000748 	cmpgei	r4,r5,29
 800e754:	10c00804 	addi	r3,r2,32
 800e758:	d9800017 	ldw	r6,0(sp)
 800e75c:	da000117 	ldw	r8,4(sp)
 800e760:	203eed26 	beq	r4,zero,800e318 <__muldf3+0x264>
 800e764:	147ffe04 	addi	r17,r2,-8
 800e768:	3462983a 	sll	r17,r6,r17
 800e76c:	0025883a 	mov	r18,zero
 800e770:	003ef006 	br	800e334 <__muldf3+0x280>
 800e774:	800f4380 	call	800f438 <__clzsi2>
 800e778:	11400544 	addi	r5,r2,21
 800e77c:	29000748 	cmpgei	r4,r5,29
 800e780:	10c00804 	addi	r3,r2,32
 800e784:	d9800017 	ldw	r6,0(sp)
 800e788:	d9c00117 	ldw	r7,4(sp)
 800e78c:	203ec426 	beq	r4,zero,800e2a0 <__muldf3+0x1ec>
 800e790:	143ffe04 	addi	r16,r2,-8
 800e794:	9420983a 	sll	r16,r18,r16
 800e798:	002d883a 	mov	r22,zero
 800e79c:	003ec706 	br	800e2bc <__muldf3+0x208>
 800e7a0:	00800044 	movi	r2,1
 800e7a4:	10c5c83a 	sub	r2,r2,r3
 800e7a8:	11000e48 	cmpgei	r4,r2,57
 800e7ac:	203e991e 	bne	r4,zero,800e214 <__muldf3+0x160>
 800e7b0:	11000808 	cmpgei	r4,r2,32
 800e7b4:	2000191e 	bne	r4,zero,800e81c <__muldf3+0x768>
 800e7b8:	4a410784 	addi	r9,r9,1054
 800e7bc:	8246983a 	sll	r3,r16,r9
 800e7c0:	b088d83a 	srl	r4,r22,r2
 800e7c4:	b26c983a 	sll	r22,r22,r9
 800e7c8:	80a0d83a 	srl	r16,r16,r2
 800e7cc:	1904b03a 	or	r2,r3,r4
 800e7d0:	b02cc03a 	cmpne	r22,r22,zero
 800e7d4:	1584b03a 	or	r2,r2,r22
 800e7d8:	10c001cc 	andi	r3,r2,7
 800e7dc:	18000726 	beq	r3,zero,800e7fc <__muldf3+0x748>
 800e7e0:	10c003cc 	andi	r3,r2,15
 800e7e4:	18c00120 	cmpeqi	r3,r3,4
 800e7e8:	1800041e 	bne	r3,zero,800e7fc <__muldf3+0x748>
 800e7ec:	10c00104 	addi	r3,r2,4
 800e7f0:	1885803a 	cmpltu	r2,r3,r2
 800e7f4:	80a1883a 	add	r16,r16,r2
 800e7f8:	1805883a 	mov	r2,r3
 800e7fc:	80c0202c 	andhi	r3,r16,128
 800e800:	18001b26 	beq	r3,zero,800e870 <__muldf3+0x7bc>
 800e804:	00c00044 	movi	r3,1
 800e808:	0021883a 	mov	r16,zero
 800e80c:	002d883a 	mov	r22,zero
 800e810:	003e8306 	br	800e220 <__muldf3+0x16c>
 800e814:	4013883a 	mov	r9,r8
 800e818:	003fa806 	br	800e6bc <__muldf3+0x608>
 800e81c:	013ff844 	movi	r4,-31
 800e820:	20c7c83a 	sub	r3,r4,r3
 800e824:	10800820 	cmpeqi	r2,r2,32
 800e828:	80c6d83a 	srl	r3,r16,r3
 800e82c:	1000031e 	bne	r2,zero,800e83c <__muldf3+0x788>
 800e830:	4a410f84 	addi	r9,r9,1086
 800e834:	8260983a 	sll	r16,r16,r9
 800e838:	b42cb03a 	or	r22,r22,r16
 800e83c:	b02cc03a 	cmpne	r22,r22,zero
 800e840:	b0c4b03a 	or	r2,r22,r3
 800e844:	158001cc 	andi	r22,r2,7
 800e848:	b000051e 	bne	r22,zero,800e860 <__muldf3+0x7ac>
 800e84c:	0021883a 	mov	r16,zero
 800e850:	1004d0fa 	srli	r2,r2,3
 800e854:	0007883a 	mov	r3,zero
 800e858:	15acb03a 	or	r22,r2,r22
 800e85c:	003e7006 	br	800e220 <__muldf3+0x16c>
 800e860:	10c003cc 	andi	r3,r2,15
 800e864:	18c00118 	cmpnei	r3,r3,4
 800e868:	0021883a 	mov	r16,zero
 800e86c:	183fdf1e 	bne	r3,zero,800e7ec <__muldf3+0x738>
 800e870:	8006927a 	slli	r3,r16,9
 800e874:	802c977a 	slli	r22,r16,29
 800e878:	1820d33a 	srli	r16,r3,12
 800e87c:	003ff406 	br	800e850 <__muldf3+0x79c>
 800e880:	00800434 	movhi	r2,16
 800e884:	84000234 	orhi	r16,r16,8
 800e888:	10bfffc4 	addi	r2,r2,-1
 800e88c:	80a0703a 	and	r16,r16,r2
 800e890:	003ec806 	br	800e3b4 <__muldf3+0x300>

0800e894 <__subdf3>:
 800e894:	00800434 	movhi	r2,16
 800e898:	3812d53a 	srli	r9,r7,20
 800e89c:	10bfffc4 	addi	r2,r2,-1
 800e8a0:	defffb04 	addi	sp,sp,-20
 800e8a4:	2890703a 	and	r8,r5,r2
 800e8a8:	3884703a 	and	r2,r7,r2
 800e8ac:	2806d7fa 	srli	r3,r5,31
 800e8b0:	dcc00315 	stw	r19,12(sp)
 800e8b4:	dc400115 	stw	r17,4(sp)
 800e8b8:	280ad53a 	srli	r5,r5,20
 800e8bc:	401090fa 	slli	r8,r8,3
 800e8c0:	2026d77a 	srli	r19,r4,29
 800e8c4:	100490fa 	slli	r2,r2,3
 800e8c8:	3022d77a 	srli	r17,r6,29
 800e8cc:	4a81ffcc 	andi	r10,r9,2047
 800e8d0:	dc800215 	stw	r18,8(sp)
 800e8d4:	dc000015 	stw	r16,0(sp)
 800e8d8:	dfc00415 	stw	ra,16(sp)
 800e8dc:	5241ffe0 	cmpeqi	r9,r10,2047
 800e8e0:	1825883a 	mov	r18,r3
 800e8e4:	2c01ffcc 	andi	r16,r5,2047
 800e8e8:	18c03fcc 	andi	r3,r3,255
 800e8ec:	9a18b03a 	or	r12,r19,r8
 800e8f0:	201a90fa 	slli	r13,r4,3
 800e8f4:	380ed7fa 	srli	r7,r7,31
 800e8f8:	8896b03a 	or	r11,r17,r2
 800e8fc:	301c90fa 	slli	r14,r6,3
 800e900:	4800711e 	bne	r9,zero,800eac8 <__subdf3+0x234>
 800e904:	39c0005c 	xori	r7,r7,1
 800e908:	8291c83a 	sub	r8,r16,r10
 800e90c:	19c05a26 	beq	r3,r7,800ea78 <__subdf3+0x1e4>
 800e910:	0200720e 	bge	zero,r8,800eadc <__subdf3+0x248>
 800e914:	50008126 	beq	r10,zero,800eb1c <__subdf3+0x288>
 800e918:	8081ffd8 	cmpnei	r2,r16,2047
 800e91c:	10011626 	beq	r2,zero,800ed78 <__subdf3+0x4e4>
 800e920:	5ac02034 	orhi	r11,r11,128
 800e924:	40800e48 	cmpgei	r2,r8,57
 800e928:	1000fe1e 	bne	r2,zero,800ed24 <__subdf3+0x490>
 800e92c:	40800808 	cmpgei	r2,r8,32
 800e930:	10015e1e 	bne	r2,zero,800eeac <__subdf3+0x618>
 800e934:	00800804 	movi	r2,32
 800e938:	1205c83a 	sub	r2,r2,r8
 800e93c:	58a2983a 	sll	r17,r11,r2
 800e940:	7206d83a 	srl	r3,r14,r8
 800e944:	709c983a 	sll	r14,r14,r2
 800e948:	5a04d83a 	srl	r2,r11,r8
 800e94c:	88e2b03a 	or	r17,r17,r3
 800e950:	701cc03a 	cmpne	r14,r14,zero
 800e954:	8ba2b03a 	or	r17,r17,r14
 800e958:	6099c83a 	sub	r12,r12,r2
 800e95c:	6c63c83a 	sub	r17,r13,r17
 800e960:	6c49803a 	cmpltu	r4,r13,r17
 800e964:	6109c83a 	sub	r4,r12,r4
 800e968:	2080202c 	andhi	r2,r4,128
 800e96c:	10009f26 	beq	r2,zero,800ebec <__subdf3+0x358>
 800e970:	04c02034 	movhi	r19,128
 800e974:	9cffffc4 	addi	r19,r19,-1
 800e978:	24e6703a 	and	r19,r4,r19
 800e97c:	9800e026 	beq	r19,zero,800ed00 <__subdf3+0x46c>
 800e980:	9809883a 	mov	r4,r19
 800e984:	800f4380 	call	800f438 <__clzsi2>
 800e988:	123ffe04 	addi	r8,r2,-8
 800e98c:	01000804 	movi	r4,32
 800e990:	2209c83a 	sub	r4,r4,r8
 800e994:	8906d83a 	srl	r3,r17,r4
 800e998:	9a08983a 	sll	r4,r19,r8
 800e99c:	8a22983a 	sll	r17,r17,r8
 800e9a0:	1908b03a 	or	r4,r3,r4
 800e9a4:	4400cf16 	blt	r8,r16,800ece4 <__subdf3+0x450>
 800e9a8:	4411c83a 	sub	r8,r8,r16
 800e9ac:	40800044 	addi	r2,r8,1
 800e9b0:	10c00808 	cmpgei	r3,r2,32
 800e9b4:	1801251e 	bne	r3,zero,800ee4c <__subdf3+0x5b8>
 800e9b8:	00c00804 	movi	r3,32
 800e9bc:	1887c83a 	sub	r3,r3,r2
 800e9c0:	888ad83a 	srl	r5,r17,r2
 800e9c4:	88e2983a 	sll	r17,r17,r3
 800e9c8:	20c6983a 	sll	r3,r4,r3
 800e9cc:	2088d83a 	srl	r4,r4,r2
 800e9d0:	8822c03a 	cmpne	r17,r17,zero
 800e9d4:	1946b03a 	or	r3,r3,r5
 800e9d8:	1c62b03a 	or	r17,r3,r17
 800e9dc:	0021883a 	mov	r16,zero
 800e9e0:	888001cc 	andi	r2,r17,7
 800e9e4:	10000726 	beq	r2,zero,800ea04 <__subdf3+0x170>
 800e9e8:	888003cc 	andi	r2,r17,15
 800e9ec:	10800120 	cmpeqi	r2,r2,4
 800e9f0:	1000041e 	bne	r2,zero,800ea04 <__subdf3+0x170>
 800e9f4:	88c00104 	addi	r3,r17,4
 800e9f8:	1c63803a 	cmpltu	r17,r3,r17
 800e9fc:	2449883a 	add	r4,r4,r17
 800ea00:	1823883a 	mov	r17,r3
 800ea04:	2080202c 	andhi	r2,r4,128
 800ea08:	10007a26 	beq	r2,zero,800ebf4 <__subdf3+0x360>
 800ea0c:	82000044 	addi	r8,r16,1
 800ea10:	4081ffe0 	cmpeqi	r2,r8,2047
 800ea14:	4201ffcc 	andi	r8,r8,2047
 800ea18:	10008c1e 	bne	r2,zero,800ec4c <__subdf3+0x3b8>
 800ea1c:	00bfe034 	movhi	r2,65408
 800ea20:	10bfffc4 	addi	r2,r2,-1
 800ea24:	2084703a 	and	r2,r4,r2
 800ea28:	1008927a 	slli	r4,r2,9
 800ea2c:	8822d0fa 	srli	r17,r17,3
 800ea30:	100c977a 	slli	r6,r2,29
 800ea34:	2008d33a 	srli	r4,r4,12
 800ea38:	3444b03a 	or	r2,r6,r17
 800ea3c:	4010953a 	slli	r8,r8,20
 800ea40:	00c00434 	movhi	r3,16
 800ea44:	94803fcc 	andi	r18,r18,255
 800ea48:	902497fa 	slli	r18,r18,31
 800ea4c:	18ffffc4 	addi	r3,r3,-1
 800ea50:	20c6703a 	and	r3,r4,r3
 800ea54:	1a06b03a 	or	r3,r3,r8
 800ea58:	1c86b03a 	or	r3,r3,r18
 800ea5c:	dfc00417 	ldw	ra,16(sp)
 800ea60:	dcc00317 	ldw	r19,12(sp)
 800ea64:	dc800217 	ldw	r18,8(sp)
 800ea68:	dc400117 	ldw	r17,4(sp)
 800ea6c:	dc000017 	ldw	r16,0(sp)
 800ea70:	dec00504 	addi	sp,sp,20
 800ea74:	f800283a 	ret
 800ea78:	0200320e 	bge	zero,r8,800eb44 <__subdf3+0x2b0>
 800ea7c:	50004c26 	beq	r10,zero,800ebb0 <__subdf3+0x31c>
 800ea80:	8081ffd8 	cmpnei	r2,r16,2047
 800ea84:	1000bc26 	beq	r2,zero,800ed78 <__subdf3+0x4e4>
 800ea88:	5ac02034 	orhi	r11,r11,128
 800ea8c:	40800e48 	cmpgei	r2,r8,57
 800ea90:	1000641e 	bne	r2,zero,800ec24 <__subdf3+0x390>
 800ea94:	40800808 	cmpgei	r2,r8,32
 800ea98:	10011726 	beq	r2,zero,800eef8 <__subdf3+0x664>
 800ea9c:	447ff804 	addi	r17,r8,-32
 800eaa0:	40800820 	cmpeqi	r2,r8,32
 800eaa4:	5c46d83a 	srl	r3,r11,r17
 800eaa8:	1000041e 	bne	r2,zero,800eabc <__subdf3+0x228>
 800eaac:	00801004 	movi	r2,64
 800eab0:	1205c83a 	sub	r2,r2,r8
 800eab4:	5884983a 	sll	r2,r11,r2
 800eab8:	709cb03a 	or	r14,r14,r2
 800eabc:	7022c03a 	cmpne	r17,r14,zero
 800eac0:	88e2b03a 	or	r17,r17,r3
 800eac4:	00005906 	br	800ec2c <__subdf3+0x398>
 800eac8:	5b8ab03a 	or	r5,r11,r14
 800eacc:	823e0044 	addi	r8,r16,-2047
 800ead0:	28001a1e 	bne	r5,zero,800eb3c <__subdf3+0x2a8>
 800ead4:	39c0005c 	xori	r7,r7,1
 800ead8:	19c01a26 	beq	r3,r7,800eb44 <__subdf3+0x2b0>
 800eadc:	4000291e 	bne	r8,zero,800eb84 <__subdf3+0x2f0>
 800eae0:	80800044 	addi	r2,r16,1
 800eae4:	1081ff8c 	andi	r2,r2,2046
 800eae8:	1000911e 	bne	r2,zero,800ed30 <__subdf3+0x49c>
 800eaec:	6346b03a 	or	r3,r12,r13
 800eaf0:	5b84b03a 	or	r2,r11,r14
 800eaf4:	8001551e 	bne	r16,zero,800f04c <__subdf3+0x7b8>
 800eaf8:	18011b26 	beq	r3,zero,800ef68 <__subdf3+0x6d4>
 800eafc:	1001641e 	bne	r2,zero,800f090 <__subdf3+0x7fc>
 800eb00:	00880034 	movhi	r2,8192
 800eb04:	6022977a 	slli	r17,r12,29
 800eb08:	10bfffc4 	addi	r2,r2,-1
 800eb0c:	2088703a 	and	r4,r4,r2
 800eb10:	2444b03a 	or	r2,r4,r17
 800eb14:	6026d0fa 	srli	r19,r12,3
 800eb18:	00003d06 	br	800ec10 <__subdf3+0x37c>
 800eb1c:	5b84b03a 	or	r2,r11,r14
 800eb20:	10008e26 	beq	r2,zero,800ed5c <__subdf3+0x4c8>
 800eb24:	40bfffc4 	addi	r2,r8,-1
 800eb28:	10011f26 	beq	r2,zero,800efa8 <__subdf3+0x714>
 800eb2c:	4201ffd8 	cmpnei	r8,r8,2047
 800eb30:	40012d26 	beq	r8,zero,800efe8 <__subdf3+0x754>
 800eb34:	1011883a 	mov	r8,r2
 800eb38:	003f7a06 	br	800e924 <__subdf3+0x90>
 800eb3c:	39c03fcc 	andi	r7,r7,255
 800eb40:	19ffe61e 	bne	r3,r7,800eadc <__subdf3+0x248>
 800eb44:	4000931e 	bne	r8,zero,800ed94 <__subdf3+0x500>
 800eb48:	80c00044 	addi	r3,r16,1
 800eb4c:	1881ff8c 	andi	r2,r3,2046
 800eb50:	10012c1e 	bne	r2,zero,800f004 <__subdf3+0x770>
 800eb54:	6344b03a 	or	r2,r12,r13
 800eb58:	8000f91e 	bne	r16,zero,800ef40 <__subdf3+0x6ac>
 800eb5c:	10017326 	beq	r2,zero,800f12c <__subdf3+0x898>
 800eb60:	5b84b03a 	or	r2,r11,r14
 800eb64:	1001781e 	bne	r2,zero,800f148 <__subdf3+0x8b4>
 800eb68:	6004977a 	slli	r2,r12,29
 800eb6c:	00c80034 	movhi	r3,8192
 800eb70:	18ffffc4 	addi	r3,r3,-1
 800eb74:	20c6703a 	and	r3,r4,r3
 800eb78:	10c4b03a 	or	r2,r2,r3
 800eb7c:	6026d0fa 	srli	r19,r12,3
 800eb80:	00002306 	br	800ec10 <__subdf3+0x37c>
 800eb84:	5411c83a 	sub	r8,r10,r16
 800eb88:	3825883a 	mov	r18,r7
 800eb8c:	8000991e 	bne	r16,zero,800edf4 <__subdf3+0x560>
 800eb90:	6344b03a 	or	r2,r12,r13
 800eb94:	1000e326 	beq	r2,zero,800ef24 <__subdf3+0x690>
 800eb98:	40bfffc4 	addi	r2,r8,-1
 800eb9c:	10015d26 	beq	r2,zero,800f114 <__subdf3+0x880>
 800eba0:	4201ffd8 	cmpnei	r8,r8,2047
 800eba4:	4000f926 	beq	r8,zero,800ef8c <__subdf3+0x6f8>
 800eba8:	1011883a 	mov	r8,r2
 800ebac:	00009406 	br	800ee00 <__subdf3+0x56c>
 800ebb0:	5b84b03a 	or	r2,r11,r14
 800ebb4:	10010226 	beq	r2,zero,800efc0 <__subdf3+0x72c>
 800ebb8:	40bfffc4 	addi	r2,r8,-1
 800ebbc:	10000426 	beq	r2,zero,800ebd0 <__subdf3+0x33c>
 800ebc0:	4201ffd8 	cmpnei	r8,r8,2047
 800ebc4:	40014126 	beq	r8,zero,800f0cc <__subdf3+0x838>
 800ebc8:	1011883a 	mov	r8,r2
 800ebcc:	003faf06 	br	800ea8c <__subdf3+0x1f8>
 800ebd0:	6ba3883a 	add	r17,r13,r14
 800ebd4:	62c9883a 	add	r4,r12,r11
 800ebd8:	8b5b803a 	cmpltu	r13,r17,r13
 800ebdc:	2349883a 	add	r4,r4,r13
 800ebe0:	2080202c 	andhi	r2,r4,128
 800ebe4:	1000a61e 	bne	r2,zero,800ee80 <__subdf3+0x5ec>
 800ebe8:	04000044 	movi	r16,1
 800ebec:	888001cc 	andi	r2,r17,7
 800ebf0:	103f7d1e 	bne	r2,zero,800e9e8 <__subdf3+0x154>
 800ebf4:	8822d0fa 	srli	r17,r17,3
 800ebf8:	2004977a 	slli	r2,r4,29
 800ebfc:	2026d0fa 	srli	r19,r4,3
 800ec00:	8011883a 	mov	r8,r16
 800ec04:	8884b03a 	or	r2,r17,r2
 800ec08:	40c1ffe0 	cmpeqi	r3,r8,2047
 800ec0c:	18002d1e 	bne	r3,zero,800ecc4 <__subdf3+0x430>
 800ec10:	01000434 	movhi	r4,16
 800ec14:	213fffc4 	addi	r4,r4,-1
 800ec18:	9908703a 	and	r4,r19,r4
 800ec1c:	4201ffcc 	andi	r8,r8,2047
 800ec20:	003f8606 	br	800ea3c <__subdf3+0x1a8>
 800ec24:	5ba2b03a 	or	r17,r11,r14
 800ec28:	8822c03a 	cmpne	r17,r17,zero
 800ec2c:	8b63883a 	add	r17,r17,r13
 800ec30:	8b49803a 	cmpltu	r4,r17,r13
 800ec34:	2309883a 	add	r4,r4,r12
 800ec38:	2080202c 	andhi	r2,r4,128
 800ec3c:	103feb26 	beq	r2,zero,800ebec <__subdf3+0x358>
 800ec40:	84000044 	addi	r16,r16,1
 800ec44:	8081ffe0 	cmpeqi	r2,r16,2047
 800ec48:	10008e26 	beq	r2,zero,800ee84 <__subdf3+0x5f0>
 800ec4c:	0201ffc4 	movi	r8,2047
 800ec50:	0009883a 	mov	r4,zero
 800ec54:	0005883a 	mov	r2,zero
 800ec58:	003f7806 	br	800ea3c <__subdf3+0x1a8>
 800ec5c:	6010977a 	slli	r8,r12,29
 800ec60:	6026d0fa 	srli	r19,r12,3
 800ec64:	1000bb26 	beq	r2,zero,800ef54 <__subdf3+0x6c0>
 800ec68:	01480034 	movhi	r5,8192
 800ec6c:	297fffc4 	addi	r5,r5,-1
 800ec70:	2146703a 	and	r3,r4,r5
 800ec74:	9880022c 	andhi	r2,r19,8
 800ec78:	1a06b03a 	or	r3,r3,r8
 800ec7c:	10000826 	beq	r2,zero,800eca0 <__subdf3+0x40c>
 800ec80:	5808d0fa 	srli	r4,r11,3
 800ec84:	2080022c 	andhi	r2,r4,8
 800ec88:	1000051e 	bne	r2,zero,800eca0 <__subdf3+0x40c>
 800ec8c:	5804977a 	slli	r2,r11,29
 800ec90:	3146703a 	and	r3,r6,r5
 800ec94:	3825883a 	mov	r18,r7
 800ec98:	1886b03a 	or	r3,r3,r2
 800ec9c:	2027883a 	mov	r19,r4
 800eca0:	1804d77a 	srli	r2,r3,29
 800eca4:	980890fa 	slli	r4,r19,3
 800eca8:	01480034 	movhi	r5,8192
 800ecac:	297fffc4 	addi	r5,r5,-1
 800ecb0:	1108b03a 	or	r4,r2,r4
 800ecb4:	2004977a 	slli	r2,r4,29
 800ecb8:	2026d0fa 	srli	r19,r4,3
 800ecbc:	1946703a 	and	r3,r3,r5
 800ecc0:	10c4b03a 	or	r2,r2,r3
 800ecc4:	14c6b03a 	or	r3,r2,r19
 800ecc8:	18014926 	beq	r3,zero,800f1f0 <__subdf3+0x95c>
 800eccc:	00c00434 	movhi	r3,16
 800ecd0:	99000234 	orhi	r4,r19,8
 800ecd4:	18ffffc4 	addi	r3,r3,-1
 800ecd8:	20c8703a 	and	r4,r4,r3
 800ecdc:	0201ffc4 	movi	r8,2047
 800ece0:	003f5606 	br	800ea3c <__subdf3+0x1a8>
 800ece4:	00bfe034 	movhi	r2,65408
 800ece8:	10bfffc4 	addi	r2,r2,-1
 800ecec:	2088703a 	and	r4,r4,r2
 800ecf0:	888001cc 	andi	r2,r17,7
 800ecf4:	8221c83a 	sub	r16,r16,r8
 800ecf8:	103f3b1e 	bne	r2,zero,800e9e8 <__subdf3+0x154>
 800ecfc:	003fbd06 	br	800ebf4 <__subdf3+0x360>
 800ed00:	8809883a 	mov	r4,r17
 800ed04:	800f4380 	call	800f438 <__clzsi2>
 800ed08:	12000604 	addi	r8,r2,24
 800ed0c:	40c00808 	cmpgei	r3,r8,32
 800ed10:	183f1e26 	beq	r3,zero,800e98c <__subdf3+0xf8>
 800ed14:	113ffe04 	addi	r4,r2,-8
 800ed18:	8908983a 	sll	r4,r17,r4
 800ed1c:	0023883a 	mov	r17,zero
 800ed20:	003f2006 	br	800e9a4 <__subdf3+0x110>
 800ed24:	5ba2b03a 	or	r17,r11,r14
 800ed28:	8822c03a 	cmpne	r17,r17,zero
 800ed2c:	003f0b06 	br	800e95c <__subdf3+0xc8>
 800ed30:	6ba3c83a 	sub	r17,r13,r14
 800ed34:	62e7c83a 	sub	r19,r12,r11
 800ed38:	6c49803a 	cmpltu	r4,r13,r17
 800ed3c:	9927c83a 	sub	r19,r19,r4
 800ed40:	9880202c 	andhi	r2,r19,128
 800ed44:	1000bb1e 	bne	r2,zero,800f034 <__subdf3+0x7a0>
 800ed48:	8cc4b03a 	or	r2,r17,r19
 800ed4c:	103f0b1e 	bne	r2,zero,800e97c <__subdf3+0xe8>
 800ed50:	0027883a 	mov	r19,zero
 800ed54:	0025883a 	mov	r18,zero
 800ed58:	003fad06 	br	800ec10 <__subdf3+0x37c>
 800ed5c:	00880034 	movhi	r2,8192
 800ed60:	6022977a 	slli	r17,r12,29
 800ed64:	10bfffc4 	addi	r2,r2,-1
 800ed68:	2088703a 	and	r4,r4,r2
 800ed6c:	2444b03a 	or	r2,r4,r17
 800ed70:	6026d0fa 	srli	r19,r12,3
 800ed74:	003fa406 	br	800ec08 <__subdf3+0x374>
 800ed78:	00880034 	movhi	r2,8192
 800ed7c:	6022977a 	slli	r17,r12,29
 800ed80:	10bfffc4 	addi	r2,r2,-1
 800ed84:	2088703a 	and	r4,r4,r2
 800ed88:	2444b03a 	or	r2,r4,r17
 800ed8c:	6026d0fa 	srli	r19,r12,3
 800ed90:	003fcc06 	br	800ecc4 <__subdf3+0x430>
 800ed94:	5411c83a 	sub	r8,r10,r16
 800ed98:	80004f26 	beq	r16,zero,800eed8 <__subdf3+0x644>
 800ed9c:	5081ffd8 	cmpnei	r2,r10,2047
 800eda0:	1000b426 	beq	r2,zero,800f074 <__subdf3+0x7e0>
 800eda4:	63002034 	orhi	r12,r12,128
 800eda8:	40800e48 	cmpgei	r2,r8,57
 800edac:	1000c41e 	bne	r2,zero,800f0c0 <__subdf3+0x82c>
 800edb0:	40800808 	cmpgei	r2,r8,32
 800edb4:	1000f91e 	bne	r2,zero,800f19c <__subdf3+0x908>
 800edb8:	00800804 	movi	r2,32
 800edbc:	1205c83a 	sub	r2,r2,r8
 800edc0:	60a2983a 	sll	r17,r12,r2
 800edc4:	6a06d83a 	srl	r3,r13,r8
 800edc8:	6884983a 	sll	r2,r13,r2
 800edcc:	6210d83a 	srl	r8,r12,r8
 800edd0:	88e2b03a 	or	r17,r17,r3
 800edd4:	1004c03a 	cmpne	r2,r2,zero
 800edd8:	88a2b03a 	or	r17,r17,r2
 800eddc:	5a17883a 	add	r11,r11,r8
 800ede0:	8ba3883a 	add	r17,r17,r14
 800ede4:	8b85803a 	cmpltu	r2,r17,r14
 800ede8:	12c9883a 	add	r4,r2,r11
 800edec:	5021883a 	mov	r16,r10
 800edf0:	003f9106 	br	800ec38 <__subdf3+0x3a4>
 800edf4:	5081ffd8 	cmpnei	r2,r10,2047
 800edf8:	10006426 	beq	r2,zero,800ef8c <__subdf3+0x6f8>
 800edfc:	63002034 	orhi	r12,r12,128
 800ee00:	40800e48 	cmpgei	r2,r8,57
 800ee04:	1000751e 	bne	r2,zero,800efdc <__subdf3+0x748>
 800ee08:	40800808 	cmpgei	r2,r8,32
 800ee0c:	1000b61e 	bne	r2,zero,800f0e8 <__subdf3+0x854>
 800ee10:	00800804 	movi	r2,32
 800ee14:	1205c83a 	sub	r2,r2,r8
 800ee18:	60a2983a 	sll	r17,r12,r2
 800ee1c:	6a06d83a 	srl	r3,r13,r8
 800ee20:	6884983a 	sll	r2,r13,r2
 800ee24:	6210d83a 	srl	r8,r12,r8
 800ee28:	88e2b03a 	or	r17,r17,r3
 800ee2c:	1004c03a 	cmpne	r2,r2,zero
 800ee30:	88a2b03a 	or	r17,r17,r2
 800ee34:	5a17c83a 	sub	r11,r11,r8
 800ee38:	7463c83a 	sub	r17,r14,r17
 800ee3c:	7445803a 	cmpltu	r2,r14,r17
 800ee40:	5889c83a 	sub	r4,r11,r2
 800ee44:	5021883a 	mov	r16,r10
 800ee48:	003ec706 	br	800e968 <__subdf3+0xd4>
 800ee4c:	423ff844 	addi	r8,r8,-31
 800ee50:	10c00820 	cmpeqi	r3,r2,32
 800ee54:	2210d83a 	srl	r8,r4,r8
 800ee58:	1800041e 	bne	r3,zero,800ee6c <__subdf3+0x5d8>
 800ee5c:	00c01004 	movi	r3,64
 800ee60:	1885c83a 	sub	r2,r3,r2
 800ee64:	2088983a 	sll	r4,r4,r2
 800ee68:	8922b03a 	or	r17,r17,r4
 800ee6c:	8822c03a 	cmpne	r17,r17,zero
 800ee70:	8a22b03a 	or	r17,r17,r8
 800ee74:	0009883a 	mov	r4,zero
 800ee78:	0021883a 	mov	r16,zero
 800ee7c:	003f5b06 	br	800ebec <__subdf3+0x358>
 800ee80:	04000084 	movi	r16,2
 800ee84:	00bfe034 	movhi	r2,65408
 800ee88:	10bfffc4 	addi	r2,r2,-1
 800ee8c:	2084703a 	and	r2,r4,r2
 800ee90:	8806d07a 	srli	r3,r17,1
 800ee94:	100a97fa 	slli	r5,r2,31
 800ee98:	8c40004c 	andi	r17,r17,1
 800ee9c:	1c62b03a 	or	r17,r3,r17
 800eea0:	1008d07a 	srli	r4,r2,1
 800eea4:	2c62b03a 	or	r17,r5,r17
 800eea8:	003ecd06 	br	800e9e0 <__subdf3+0x14c>
 800eeac:	447ff804 	addi	r17,r8,-32
 800eeb0:	40800820 	cmpeqi	r2,r8,32
 800eeb4:	5c46d83a 	srl	r3,r11,r17
 800eeb8:	1000041e 	bne	r2,zero,800eecc <__subdf3+0x638>
 800eebc:	00801004 	movi	r2,64
 800eec0:	1205c83a 	sub	r2,r2,r8
 800eec4:	5884983a 	sll	r2,r11,r2
 800eec8:	709cb03a 	or	r14,r14,r2
 800eecc:	7022c03a 	cmpne	r17,r14,zero
 800eed0:	88e2b03a 	or	r17,r17,r3
 800eed4:	003ea106 	br	800e95c <__subdf3+0xc8>
 800eed8:	6344b03a 	or	r2,r12,r13
 800eedc:	1000a526 	beq	r2,zero,800f174 <__subdf3+0x8e0>
 800eee0:	40bfffc4 	addi	r2,r8,-1
 800eee4:	1000bd26 	beq	r2,zero,800f1dc <__subdf3+0x948>
 800eee8:	4201ffd8 	cmpnei	r8,r8,2047
 800eeec:	40006126 	beq	r8,zero,800f074 <__subdf3+0x7e0>
 800eef0:	1011883a 	mov	r8,r2
 800eef4:	003fac06 	br	800eda8 <__subdf3+0x514>
 800eef8:	00800804 	movi	r2,32
 800eefc:	1205c83a 	sub	r2,r2,r8
 800ef00:	58a2983a 	sll	r17,r11,r2
 800ef04:	7206d83a 	srl	r3,r14,r8
 800ef08:	709c983a 	sll	r14,r14,r2
 800ef0c:	5a04d83a 	srl	r2,r11,r8
 800ef10:	88e2b03a 	or	r17,r17,r3
 800ef14:	701cc03a 	cmpne	r14,r14,zero
 800ef18:	8ba2b03a 	or	r17,r17,r14
 800ef1c:	6099883a 	add	r12,r12,r2
 800ef20:	003f4206 	br	800ec2c <__subdf3+0x398>
 800ef24:	5808977a 	slli	r4,r11,29
 800ef28:	00c80034 	movhi	r3,8192
 800ef2c:	18ffffc4 	addi	r3,r3,-1
 800ef30:	30cc703a 	and	r6,r6,r3
 800ef34:	2184b03a 	or	r2,r4,r6
 800ef38:	5826d0fa 	srli	r19,r11,3
 800ef3c:	003f3206 	br	800ec08 <__subdf3+0x374>
 800ef40:	10004c26 	beq	r2,zero,800f074 <__subdf3+0x7e0>
 800ef44:	5b9cb03a 	or	r14,r11,r14
 800ef48:	6010977a 	slli	r8,r12,29
 800ef4c:	6026d0fa 	srli	r19,r12,3
 800ef50:	703f451e 	bne	r14,zero,800ec68 <__subdf3+0x3d4>
 800ef54:	00880034 	movhi	r2,8192
 800ef58:	10bfffc4 	addi	r2,r2,-1
 800ef5c:	2084703a 	and	r2,r4,r2
 800ef60:	1204b03a 	or	r2,r2,r8
 800ef64:	003f5706 	br	800ecc4 <__subdf3+0x430>
 800ef68:	103f7926 	beq	r2,zero,800ed50 <__subdf3+0x4bc>
 800ef6c:	5804977a 	slli	r2,r11,29
 800ef70:	00c80034 	movhi	r3,8192
 800ef74:	18ffffc4 	addi	r3,r3,-1
 800ef78:	30c6703a 	and	r3,r6,r3
 800ef7c:	10c4b03a 	or	r2,r2,r3
 800ef80:	5826d0fa 	srli	r19,r11,3
 800ef84:	3825883a 	mov	r18,r7
 800ef88:	003f2106 	br	800ec10 <__subdf3+0x37c>
 800ef8c:	5804977a 	slli	r2,r11,29
 800ef90:	00c80034 	movhi	r3,8192
 800ef94:	18ffffc4 	addi	r3,r3,-1
 800ef98:	30c6703a 	and	r3,r6,r3
 800ef9c:	10c4b03a 	or	r2,r2,r3
 800efa0:	5826d0fa 	srli	r19,r11,3
 800efa4:	003f4706 	br	800ecc4 <__subdf3+0x430>
 800efa8:	6ba3c83a 	sub	r17,r13,r14
 800efac:	62c9c83a 	sub	r4,r12,r11
 800efb0:	6c5b803a 	cmpltu	r13,r13,r17
 800efb4:	2349c83a 	sub	r4,r4,r13
 800efb8:	04000044 	movi	r16,1
 800efbc:	003e6a06 	br	800e968 <__subdf3+0xd4>
 800efc0:	6004977a 	slli	r2,r12,29
 800efc4:	00c80034 	movhi	r3,8192
 800efc8:	18ffffc4 	addi	r3,r3,-1
 800efcc:	20c8703a 	and	r4,r4,r3
 800efd0:	1104b03a 	or	r2,r2,r4
 800efd4:	6026d0fa 	srli	r19,r12,3
 800efd8:	003f0b06 	br	800ec08 <__subdf3+0x374>
 800efdc:	6366b03a 	or	r19,r12,r13
 800efe0:	9822c03a 	cmpne	r17,r19,zero
 800efe4:	003f9406 	br	800ee38 <__subdf3+0x5a4>
 800efe8:	6004977a 	slli	r2,r12,29
 800efec:	00c80034 	movhi	r3,8192
 800eff0:	18ffffc4 	addi	r3,r3,-1
 800eff4:	20c8703a 	and	r4,r4,r3
 800eff8:	1104b03a 	or	r2,r2,r4
 800effc:	6026d0fa 	srli	r19,r12,3
 800f000:	003f3006 	br	800ecc4 <__subdf3+0x430>
 800f004:	1881ffe0 	cmpeqi	r2,r3,2047
 800f008:	103f101e 	bne	r2,zero,800ec4c <__subdf3+0x3b8>
 800f00c:	6b9d883a 	add	r14,r13,r14
 800f010:	62c9883a 	add	r4,r12,r11
 800f014:	7345803a 	cmpltu	r2,r14,r13
 800f018:	2085883a 	add	r2,r4,r2
 800f01c:	102297fa 	slli	r17,r2,31
 800f020:	701cd07a 	srli	r14,r14,1
 800f024:	1008d07a 	srli	r4,r2,1
 800f028:	1821883a 	mov	r16,r3
 800f02c:	8ba2b03a 	or	r17,r17,r14
 800f030:	003eee06 	br	800ebec <__subdf3+0x358>
 800f034:	7363c83a 	sub	r17,r14,r13
 800f038:	5b09c83a 	sub	r4,r11,r12
 800f03c:	7467803a 	cmpltu	r19,r14,r17
 800f040:	24e7c83a 	sub	r19,r4,r19
 800f044:	3825883a 	mov	r18,r7
 800f048:	003e4c06 	br	800e97c <__subdf3+0xe8>
 800f04c:	183f031e 	bne	r3,zero,800ec5c <__subdf3+0x3c8>
 800f050:	10005d26 	beq	r2,zero,800f1c8 <__subdf3+0x934>
 800f054:	00880034 	movhi	r2,8192
 800f058:	5806977a 	slli	r3,r11,29
 800f05c:	10bfffc4 	addi	r2,r2,-1
 800f060:	3084703a 	and	r2,r6,r2
 800f064:	10c4b03a 	or	r2,r2,r3
 800f068:	5826d0fa 	srli	r19,r11,3
 800f06c:	3825883a 	mov	r18,r7
 800f070:	003f1406 	br	800ecc4 <__subdf3+0x430>
 800f074:	00880034 	movhi	r2,8192
 800f078:	5806977a 	slli	r3,r11,29
 800f07c:	10bfffc4 	addi	r2,r2,-1
 800f080:	3084703a 	and	r2,r6,r2
 800f084:	10c4b03a 	or	r2,r2,r3
 800f088:	5826d0fa 	srli	r19,r11,3
 800f08c:	003f0d06 	br	800ecc4 <__subdf3+0x430>
 800f090:	6ba3c83a 	sub	r17,r13,r14
 800f094:	62c5c83a 	sub	r2,r12,r11
 800f098:	6c49803a 	cmpltu	r4,r13,r17
 800f09c:	1109c83a 	sub	r4,r2,r4
 800f0a0:	2080202c 	andhi	r2,r4,128
 800f0a4:	10003a26 	beq	r2,zero,800f190 <__subdf3+0x8fc>
 800f0a8:	7363c83a 	sub	r17,r14,r13
 800f0ac:	5b09c83a 	sub	r4,r11,r12
 800f0b0:	745d803a 	cmpltu	r14,r14,r17
 800f0b4:	2389c83a 	sub	r4,r4,r14
 800f0b8:	3825883a 	mov	r18,r7
 800f0bc:	003e4806 	br	800e9e0 <__subdf3+0x14c>
 800f0c0:	6362b03a 	or	r17,r12,r13
 800f0c4:	8822c03a 	cmpne	r17,r17,zero
 800f0c8:	003f4506 	br	800ede0 <__subdf3+0x54c>
 800f0cc:	6004977a 	slli	r2,r12,29
 800f0d0:	00c80034 	movhi	r3,8192
 800f0d4:	18ffffc4 	addi	r3,r3,-1
 800f0d8:	20c6703a 	and	r3,r4,r3
 800f0dc:	10c4b03a 	or	r2,r2,r3
 800f0e0:	6026d0fa 	srli	r19,r12,3
 800f0e4:	003ef706 	br	800ecc4 <__subdf3+0x430>
 800f0e8:	40bff804 	addi	r2,r8,-32
 800f0ec:	40c00820 	cmpeqi	r3,r8,32
 800f0f0:	6084d83a 	srl	r2,r12,r2
 800f0f4:	1800041e 	bne	r3,zero,800f108 <__subdf3+0x874>
 800f0f8:	04c01004 	movi	r19,64
 800f0fc:	9a11c83a 	sub	r8,r19,r8
 800f100:	6226983a 	sll	r19,r12,r8
 800f104:	6cdab03a 	or	r13,r13,r19
 800f108:	6822c03a 	cmpne	r17,r13,zero
 800f10c:	88a2b03a 	or	r17,r17,r2
 800f110:	003f4906 	br	800ee38 <__subdf3+0x5a4>
 800f114:	7363c83a 	sub	r17,r14,r13
 800f118:	5b09c83a 	sub	r4,r11,r12
 800f11c:	745d803a 	cmpltu	r14,r14,r17
 800f120:	2389c83a 	sub	r4,r4,r14
 800f124:	04000044 	movi	r16,1
 800f128:	003e0f06 	br	800e968 <__subdf3+0xd4>
 800f12c:	00880034 	movhi	r2,8192
 800f130:	5806977a 	slli	r3,r11,29
 800f134:	10bfffc4 	addi	r2,r2,-1
 800f138:	3084703a 	and	r2,r6,r2
 800f13c:	10c4b03a 	or	r2,r2,r3
 800f140:	5826d0fa 	srli	r19,r11,3
 800f144:	003eb206 	br	800ec10 <__subdf3+0x37c>
 800f148:	6ba3883a 	add	r17,r13,r14
 800f14c:	62c9883a 	add	r4,r12,r11
 800f150:	8b5b803a 	cmpltu	r13,r17,r13
 800f154:	2349883a 	add	r4,r4,r13
 800f158:	2080202c 	andhi	r2,r4,128
 800f15c:	103ea326 	beq	r2,zero,800ebec <__subdf3+0x358>
 800f160:	00bfe034 	movhi	r2,65408
 800f164:	10bfffc4 	addi	r2,r2,-1
 800f168:	2088703a 	and	r4,r4,r2
 800f16c:	04000044 	movi	r16,1
 800f170:	003e9e06 	br	800ebec <__subdf3+0x358>
 800f174:	00880034 	movhi	r2,8192
 800f178:	5806977a 	slli	r3,r11,29
 800f17c:	10bfffc4 	addi	r2,r2,-1
 800f180:	3084703a 	and	r2,r6,r2
 800f184:	10c4b03a 	or	r2,r2,r3
 800f188:	5826d0fa 	srli	r19,r11,3
 800f18c:	003e9e06 	br	800ec08 <__subdf3+0x374>
 800f190:	8904b03a 	or	r2,r17,r4
 800f194:	103eee26 	beq	r2,zero,800ed50 <__subdf3+0x4bc>
 800f198:	003e9406 	br	800ebec <__subdf3+0x358>
 800f19c:	40bff804 	addi	r2,r8,-32
 800f1a0:	40c00820 	cmpeqi	r3,r8,32
 800f1a4:	6084d83a 	srl	r2,r12,r2
 800f1a8:	1800041e 	bne	r3,zero,800f1bc <__subdf3+0x928>
 800f1ac:	04c01004 	movi	r19,64
 800f1b0:	9a11c83a 	sub	r8,r19,r8
 800f1b4:	6226983a 	sll	r19,r12,r8
 800f1b8:	6cdab03a 	or	r13,r13,r19
 800f1bc:	6822c03a 	cmpne	r17,r13,zero
 800f1c0:	88a2b03a 	or	r17,r17,r2
 800f1c4:	003f0606 	br	800ede0 <__subdf3+0x54c>
 800f1c8:	04c00434 	movhi	r19,16
 800f1cc:	9cffffc4 	addi	r19,r19,-1
 800f1d0:	0025883a 	mov	r18,zero
 800f1d4:	00bfffc4 	movi	r2,-1
 800f1d8:	003ebc06 	br	800eccc <__subdf3+0x438>
 800f1dc:	6ba3883a 	add	r17,r13,r14
 800f1e0:	62c9883a 	add	r4,r12,r11
 800f1e4:	8b9d803a 	cmpltu	r14,r17,r14
 800f1e8:	2389883a 	add	r4,r4,r14
 800f1ec:	003e7c06 	br	800ebe0 <__subdf3+0x34c>
 800f1f0:	0005883a 	mov	r2,zero
 800f1f4:	0201ffc4 	movi	r8,2047
 800f1f8:	0009883a 	mov	r4,zero
 800f1fc:	003e0f06 	br	800ea3c <__subdf3+0x1a8>

0800f200 <__unorddf2>:
 800f200:	2806d53a 	srli	r3,r5,20
 800f204:	3810d53a 	srli	r8,r7,20
 800f208:	00800434 	movhi	r2,16
 800f20c:	18c1ffcc 	andi	r3,r3,2047
 800f210:	10bfffc4 	addi	r2,r2,-1
 800f214:	18c1ffd8 	cmpnei	r3,r3,2047
 800f218:	288a703a 	and	r5,r5,r2
 800f21c:	388e703a 	and	r7,r7,r2
 800f220:	4201ffcc 	andi	r8,r8,2047
 800f224:	18000426 	beq	r3,zero,800f238 <__unorddf2+0x38>
 800f228:	4201ffd8 	cmpnei	r8,r8,2047
 800f22c:	40000626 	beq	r8,zero,800f248 <__unorddf2+0x48>
 800f230:	0005883a 	mov	r2,zero
 800f234:	f800283a 	ret
 800f238:	214ab03a 	or	r5,r4,r5
 800f23c:	283ffa26 	beq	r5,zero,800f228 <__unorddf2+0x28>
 800f240:	00800044 	movi	r2,1
 800f244:	f800283a 	ret
 800f248:	398eb03a 	or	r7,r7,r6
 800f24c:	3804c03a 	cmpne	r2,r7,zero
 800f250:	f800283a 	ret

0800f254 <__fixdfsi>:
 800f254:	280cd53a 	srli	r6,r5,20
 800f258:	00c00434 	movhi	r3,16
 800f25c:	18ffffc4 	addi	r3,r3,-1
 800f260:	3181ffcc 	andi	r6,r6,2047
 800f264:	31c0ffd0 	cmplti	r7,r6,1023
 800f268:	28c6703a 	and	r3,r5,r3
 800f26c:	280ad7fa 	srli	r5,r5,31
 800f270:	3800061e 	bne	r7,zero,800f28c <__fixdfsi+0x38>
 800f274:	30810790 	cmplti	r2,r6,1054
 800f278:	1000061e 	bne	r2,zero,800f294 <__fixdfsi+0x40>
 800f27c:	00a00034 	movhi	r2,32768
 800f280:	10bfffc4 	addi	r2,r2,-1
 800f284:	2885883a 	add	r2,r5,r2
 800f288:	f800283a 	ret
 800f28c:	0005883a 	mov	r2,zero
 800f290:	f800283a 	ret
 800f294:	00810cc4 	movi	r2,1075
 800f298:	118fc83a 	sub	r7,r2,r6
 800f29c:	38800808 	cmpgei	r2,r7,32
 800f2a0:	18c00434 	orhi	r3,r3,16
 800f2a4:	1000071e 	bne	r2,zero,800f2c4 <__fixdfsi+0x70>
 800f2a8:	30befb44 	addi	r2,r6,-1043
 800f2ac:	1886983a 	sll	r3,r3,r2
 800f2b0:	21c4d83a 	srl	r2,r4,r7
 800f2b4:	1884b03a 	or	r2,r3,r2
 800f2b8:	283ff526 	beq	r5,zero,800f290 <__fixdfsi+0x3c>
 800f2bc:	0085c83a 	sub	r2,zero,r2
 800f2c0:	f800283a 	ret
 800f2c4:	008104c4 	movi	r2,1043
 800f2c8:	1185c83a 	sub	r2,r2,r6
 800f2cc:	1884d83a 	srl	r2,r3,r2
 800f2d0:	003ff906 	br	800f2b8 <__fixdfsi+0x64>

0800f2d4 <__floatsidf>:
 800f2d4:	defffd04 	addi	sp,sp,-12
 800f2d8:	dfc00215 	stw	ra,8(sp)
 800f2dc:	dc400115 	stw	r17,4(sp)
 800f2e0:	dc000015 	stw	r16,0(sp)
 800f2e4:	20001326 	beq	r4,zero,800f334 <__floatsidf+0x60>
 800f2e8:	2021883a 	mov	r16,r4
 800f2ec:	2022d7fa 	srli	r17,r4,31
 800f2f0:	20002116 	blt	r4,zero,800f378 <__floatsidf+0xa4>
 800f2f4:	8009883a 	mov	r4,r16
 800f2f8:	800f4380 	call	800f438 <__clzsi2>
 800f2fc:	01010784 	movi	r4,1054
 800f300:	2089c83a 	sub	r4,r4,r2
 800f304:	10c002c8 	cmpgei	r3,r2,11
 800f308:	2101ffcc 	andi	r4,r4,2047
 800f30c:	18001c1e 	bne	r3,zero,800f380 <__floatsidf+0xac>
 800f310:	018002c4 	movi	r6,11
 800f314:	308dc83a 	sub	r6,r6,r2
 800f318:	818ad83a 	srl	r5,r16,r6
 800f31c:	00c00434 	movhi	r3,16
 800f320:	10800544 	addi	r2,r2,21
 800f324:	18ffffc4 	addi	r3,r3,-1
 800f328:	8084983a 	sll	r2,r16,r2
 800f32c:	28ca703a 	and	r5,r5,r3
 800f330:	00000406 	br	800f344 <__floatsidf+0x70>
 800f334:	0023883a 	mov	r17,zero
 800f338:	0009883a 	mov	r4,zero
 800f33c:	000b883a 	mov	r5,zero
 800f340:	0005883a 	mov	r2,zero
 800f344:	2008953a 	slli	r4,r4,20
 800f348:	8c403fcc 	andi	r17,r17,255
 800f34c:	01800434 	movhi	r6,16
 800f350:	31bfffc4 	addi	r6,r6,-1
 800f354:	880697fa 	slli	r3,r17,31
 800f358:	298a703a 	and	r5,r5,r6
 800f35c:	290ab03a 	or	r5,r5,r4
 800f360:	28c6b03a 	or	r3,r5,r3
 800f364:	dfc00217 	ldw	ra,8(sp)
 800f368:	dc400117 	ldw	r17,4(sp)
 800f36c:	dc000017 	ldw	r16,0(sp)
 800f370:	dec00304 	addi	sp,sp,12
 800f374:	f800283a 	ret
 800f378:	0121c83a 	sub	r16,zero,r4
 800f37c:	003fdd06 	br	800f2f4 <__floatsidf+0x20>
 800f380:	10bffd44 	addi	r2,r2,-11
 800f384:	808a983a 	sll	r5,r16,r2
 800f388:	00800434 	movhi	r2,16
 800f38c:	10bfffc4 	addi	r2,r2,-1
 800f390:	288a703a 	and	r5,r5,r2
 800f394:	0005883a 	mov	r2,zero
 800f398:	003fea06 	br	800f344 <__floatsidf+0x70>

0800f39c <__floatunsidf>:
 800f39c:	defffe04 	addi	sp,sp,-8
 800f3a0:	dc000015 	stw	r16,0(sp)
 800f3a4:	dfc00115 	stw	ra,4(sp)
 800f3a8:	2021883a 	mov	r16,r4
 800f3ac:	20000f26 	beq	r4,zero,800f3ec <__floatunsidf+0x50>
 800f3b0:	800f4380 	call	800f438 <__clzsi2>
 800f3b4:	01010784 	movi	r4,1054
 800f3b8:	2089c83a 	sub	r4,r4,r2
 800f3bc:	10c002c8 	cmpgei	r3,r2,11
 800f3c0:	2101ffcc 	andi	r4,r4,2047
 800f3c4:	1800151e 	bne	r3,zero,800f41c <__floatunsidf+0x80>
 800f3c8:	00c002c4 	movi	r3,11
 800f3cc:	1887c83a 	sub	r3,r3,r2
 800f3d0:	80c6d83a 	srl	r3,r16,r3
 800f3d4:	01400434 	movhi	r5,16
 800f3d8:	10800544 	addi	r2,r2,21
 800f3dc:	297fffc4 	addi	r5,r5,-1
 800f3e0:	80a0983a 	sll	r16,r16,r2
 800f3e4:	1944703a 	and	r2,r3,r5
 800f3e8:	00000206 	br	800f3f4 <__floatunsidf+0x58>
 800f3ec:	0009883a 	mov	r4,zero
 800f3f0:	0005883a 	mov	r2,zero
 800f3f4:	2008953a 	slli	r4,r4,20
 800f3f8:	00c00434 	movhi	r3,16
 800f3fc:	18ffffc4 	addi	r3,r3,-1
 800f400:	10c6703a 	and	r3,r2,r3
 800f404:	1906b03a 	or	r3,r3,r4
 800f408:	8005883a 	mov	r2,r16
 800f40c:	dfc00117 	ldw	ra,4(sp)
 800f410:	dc000017 	ldw	r16,0(sp)
 800f414:	dec00204 	addi	sp,sp,8
 800f418:	f800283a 	ret
 800f41c:	10bffd44 	addi	r2,r2,-11
 800f420:	8084983a 	sll	r2,r16,r2
 800f424:	00c00434 	movhi	r3,16
 800f428:	18ffffc4 	addi	r3,r3,-1
 800f42c:	10c4703a 	and	r2,r2,r3
 800f430:	0021883a 	mov	r16,zero
 800f434:	003fef06 	br	800f3f4 <__floatunsidf+0x58>

0800f438 <__clzsi2>:
 800f438:	00bfffd4 	movui	r2,65535
 800f43c:	11000b36 	bltu	r2,r4,800f46c <__clzsi2+0x34>
 800f440:	20804030 	cmpltui	r2,r4,256
 800f444:	1000071e 	bne	r2,zero,800f464 <__clzsi2+0x2c>
 800f448:	2008d23a 	srli	r4,r4,8
 800f44c:	01400604 	movi	r5,24
 800f450:	00c20074 	movhi	r3,2049
 800f454:	20c7883a 	add	r3,r4,r3
 800f458:	1888c543 	ldbu	r2,8981(r3)
 800f45c:	2885c83a 	sub	r2,r5,r2
 800f460:	f800283a 	ret
 800f464:	01400804 	movi	r5,32
 800f468:	003ff906 	br	800f450 <__clzsi2+0x18>
 800f46c:	00804034 	movhi	r2,256
 800f470:	20800336 	bltu	r4,r2,800f480 <__clzsi2+0x48>
 800f474:	2008d63a 	srli	r4,r4,24
 800f478:	01400204 	movi	r5,8
 800f47c:	003ff406 	br	800f450 <__clzsi2+0x18>
 800f480:	2008d43a 	srli	r4,r4,16
 800f484:	01400404 	movi	r5,16
 800f488:	003ff106 	br	800f450 <__clzsi2+0x18>

0800f48c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800f48c:	defffe04 	addi	sp,sp,-8
 800f490:	dfc00115 	stw	ra,4(sp)
 800f494:	df000015 	stw	fp,0(sp)
 800f498:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f49c:	d0a00d17 	ldw	r2,-32716(gp)
 800f4a0:	10000326 	beq	r2,zero,800f4b0 <alt_get_errno+0x24>
 800f4a4:	d0a00d17 	ldw	r2,-32716(gp)
 800f4a8:	103ee83a 	callr	r2
 800f4ac:	00000106 	br	800f4b4 <alt_get_errno+0x28>
 800f4b0:	d0a72104 	addi	r2,gp,-25468
}
 800f4b4:	e037883a 	mov	sp,fp
 800f4b8:	dfc00117 	ldw	ra,4(sp)
 800f4bc:	df000017 	ldw	fp,0(sp)
 800f4c0:	dec00204 	addi	sp,sp,8
 800f4c4:	f800283a 	ret

0800f4c8 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800f4c8:	defffb04 	addi	sp,sp,-20
 800f4cc:	dfc00415 	stw	ra,16(sp)
 800f4d0:	df000315 	stw	fp,12(sp)
 800f4d4:	df000304 	addi	fp,sp,12
 800f4d8:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800f4dc:	e0bffd17 	ldw	r2,-12(fp)
 800f4e0:	10000916 	blt	r2,zero,800f508 <close+0x40>
 800f4e4:	e0fffd17 	ldw	r3,-12(fp)
 800f4e8:	1805883a 	mov	r2,r3
 800f4ec:	1085883a 	add	r2,r2,r2
 800f4f0:	10c5883a 	add	r2,r2,r3
 800f4f4:	100490ba 	slli	r2,r2,2
 800f4f8:	00c20074 	movhi	r3,2049
 800f4fc:	18cb8f04 	addi	r3,r3,11836
 800f500:	10c5883a 	add	r2,r2,r3
 800f504:	00000106 	br	800f50c <close+0x44>
 800f508:	0005883a 	mov	r2,zero
 800f50c:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 800f510:	e0bfff17 	ldw	r2,-4(fp)
 800f514:	10001926 	beq	r2,zero,800f57c <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800f518:	e0bfff17 	ldw	r2,-4(fp)
 800f51c:	10800017 	ldw	r2,0(r2)
 800f520:	10800417 	ldw	r2,16(r2)
 800f524:	10000626 	beq	r2,zero,800f540 <close+0x78>
 800f528:	e0bfff17 	ldw	r2,-4(fp)
 800f52c:	10800017 	ldw	r2,0(r2)
 800f530:	10800417 	ldw	r2,16(r2)
 800f534:	e13fff17 	ldw	r4,-4(fp)
 800f538:	103ee83a 	callr	r2
 800f53c:	00000106 	br	800f544 <close+0x7c>
 800f540:	0005883a 	mov	r2,zero
 800f544:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800f548:	e13ffd17 	ldw	r4,-12(fp)
 800f54c:	800fbc40 	call	800fbc4 <alt_release_fd>
    if (rval < 0)
 800f550:	e0bffe17 	ldw	r2,-8(fp)
 800f554:	1000070e 	bge	r2,zero,800f574 <close+0xac>
    {
      ALT_ERRNO = -rval;
 800f558:	800f48c0 	call	800f48c <alt_get_errno>
 800f55c:	1007883a 	mov	r3,r2
 800f560:	e0bffe17 	ldw	r2,-8(fp)
 800f564:	0085c83a 	sub	r2,zero,r2
 800f568:	18800015 	stw	r2,0(r3)
      return -1;
 800f56c:	00bfffc4 	movi	r2,-1
 800f570:	00000706 	br	800f590 <close+0xc8>
    }
    return 0;
 800f574:	0005883a 	mov	r2,zero
 800f578:	00000506 	br	800f590 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f57c:	800f48c0 	call	800f48c <alt_get_errno>
 800f580:	1007883a 	mov	r3,r2
 800f584:	00801444 	movi	r2,81
 800f588:	18800015 	stw	r2,0(r3)
    return -1;
 800f58c:	00bfffc4 	movi	r2,-1
  }
}
 800f590:	e037883a 	mov	sp,fp
 800f594:	dfc00117 	ldw	ra,4(sp)
 800f598:	df000017 	ldw	fp,0(sp)
 800f59c:	dec00204 	addi	sp,sp,8
 800f5a0:	f800283a 	ret

0800f5a4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800f5a4:	defffc04 	addi	sp,sp,-16
 800f5a8:	df000315 	stw	fp,12(sp)
 800f5ac:	df000304 	addi	fp,sp,12
 800f5b0:	e13fff15 	stw	r4,-4(fp)
 800f5b4:	e17ffe15 	stw	r5,-8(fp)
 800f5b8:	e1bffd15 	stw	r6,-12(fp)
  return len;
 800f5bc:	e0bffd17 	ldw	r2,-12(fp)
}
 800f5c0:	e037883a 	mov	sp,fp
 800f5c4:	df000017 	ldw	fp,0(sp)
 800f5c8:	dec00104 	addi	sp,sp,4
 800f5cc:	f800283a 	ret

0800f5d0 <alt_get_errno>:
{
 800f5d0:	defffe04 	addi	sp,sp,-8
 800f5d4:	dfc00115 	stw	ra,4(sp)
 800f5d8:	df000015 	stw	fp,0(sp)
 800f5dc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f5e0:	d0a00d17 	ldw	r2,-32716(gp)
 800f5e4:	10000326 	beq	r2,zero,800f5f4 <alt_get_errno+0x24>
 800f5e8:	d0a00d17 	ldw	r2,-32716(gp)
 800f5ec:	103ee83a 	callr	r2
 800f5f0:	00000106 	br	800f5f8 <alt_get_errno+0x28>
 800f5f4:	d0a72104 	addi	r2,gp,-25468
}
 800f5f8:	e037883a 	mov	sp,fp
 800f5fc:	dfc00117 	ldw	ra,4(sp)
 800f600:	df000017 	ldw	fp,0(sp)
 800f604:	dec00204 	addi	sp,sp,8
 800f608:	f800283a 	ret

0800f60c <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800f60c:	defffb04 	addi	sp,sp,-20
 800f610:	dfc00415 	stw	ra,16(sp)
 800f614:	df000315 	stw	fp,12(sp)
 800f618:	df000304 	addi	fp,sp,12
 800f61c:	e13ffe15 	stw	r4,-8(fp)
 800f620:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f624:	e0bffe17 	ldw	r2,-8(fp)
 800f628:	10000916 	blt	r2,zero,800f650 <fstat+0x44>
 800f62c:	e0fffe17 	ldw	r3,-8(fp)
 800f630:	1805883a 	mov	r2,r3
 800f634:	1085883a 	add	r2,r2,r2
 800f638:	10c5883a 	add	r2,r2,r3
 800f63c:	100490ba 	slli	r2,r2,2
 800f640:	00c20074 	movhi	r3,2049
 800f644:	18cb8f04 	addi	r3,r3,11836
 800f648:	10c5883a 	add	r2,r2,r3
 800f64c:	00000106 	br	800f654 <fstat+0x48>
 800f650:	0005883a 	mov	r2,zero
 800f654:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800f658:	e0bfff17 	ldw	r2,-4(fp)
 800f65c:	10001026 	beq	r2,zero,800f6a0 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800f660:	e0bfff17 	ldw	r2,-4(fp)
 800f664:	10800017 	ldw	r2,0(r2)
 800f668:	10800817 	ldw	r2,32(r2)
 800f66c:	10000726 	beq	r2,zero,800f68c <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 800f670:	e0bfff17 	ldw	r2,-4(fp)
 800f674:	10800017 	ldw	r2,0(r2)
 800f678:	10800817 	ldw	r2,32(r2)
 800f67c:	e17ffd17 	ldw	r5,-12(fp)
 800f680:	e13fff17 	ldw	r4,-4(fp)
 800f684:	103ee83a 	callr	r2
 800f688:	00000a06 	br	800f6b4 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800f68c:	e0bffd17 	ldw	r2,-12(fp)
 800f690:	00c80004 	movi	r3,8192
 800f694:	10c00115 	stw	r3,4(r2)
      return 0;
 800f698:	0005883a 	mov	r2,zero
 800f69c:	00000506 	br	800f6b4 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f6a0:	800f5d00 	call	800f5d0 <alt_get_errno>
 800f6a4:	1007883a 	mov	r3,r2
 800f6a8:	00801444 	movi	r2,81
 800f6ac:	18800015 	stw	r2,0(r3)
    return -1;
 800f6b0:	00bfffc4 	movi	r2,-1
  }
}
 800f6b4:	e037883a 	mov	sp,fp
 800f6b8:	dfc00117 	ldw	ra,4(sp)
 800f6bc:	df000017 	ldw	fp,0(sp)
 800f6c0:	dec00204 	addi	sp,sp,8
 800f6c4:	f800283a 	ret

0800f6c8 <alt_get_errno>:
{
 800f6c8:	defffe04 	addi	sp,sp,-8
 800f6cc:	dfc00115 	stw	ra,4(sp)
 800f6d0:	df000015 	stw	fp,0(sp)
 800f6d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f6d8:	d0a00d17 	ldw	r2,-32716(gp)
 800f6dc:	10000326 	beq	r2,zero,800f6ec <alt_get_errno+0x24>
 800f6e0:	d0a00d17 	ldw	r2,-32716(gp)
 800f6e4:	103ee83a 	callr	r2
 800f6e8:	00000106 	br	800f6f0 <alt_get_errno+0x28>
 800f6ec:	d0a72104 	addi	r2,gp,-25468
}
 800f6f0:	e037883a 	mov	sp,fp
 800f6f4:	dfc00117 	ldw	ra,4(sp)
 800f6f8:	df000017 	ldw	fp,0(sp)
 800f6fc:	dec00204 	addi	sp,sp,8
 800f700:	f800283a 	ret

0800f704 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800f704:	deffea04 	addi	sp,sp,-88
 800f708:	dfc01515 	stw	ra,84(sp)
 800f70c:	df001415 	stw	fp,80(sp)
 800f710:	df001404 	addi	fp,sp,80
 800f714:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f718:	e0bfec17 	ldw	r2,-80(fp)
 800f71c:	10000916 	blt	r2,zero,800f744 <isatty+0x40>
 800f720:	e0ffec17 	ldw	r3,-80(fp)
 800f724:	1805883a 	mov	r2,r3
 800f728:	1085883a 	add	r2,r2,r2
 800f72c:	10c5883a 	add	r2,r2,r3
 800f730:	100490ba 	slli	r2,r2,2
 800f734:	00c20074 	movhi	r3,2049
 800f738:	18cb8f04 	addi	r3,r3,11836
 800f73c:	10c5883a 	add	r2,r2,r3
 800f740:	00000106 	br	800f748 <isatty+0x44>
 800f744:	0005883a 	mov	r2,zero
 800f748:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800f74c:	e0bfff17 	ldw	r2,-4(fp)
 800f750:	10000e26 	beq	r2,zero,800f78c <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800f754:	e0bfff17 	ldw	r2,-4(fp)
 800f758:	10800017 	ldw	r2,0(r2)
 800f75c:	10800817 	ldw	r2,32(r2)
 800f760:	1000021e 	bne	r2,zero,800f76c <isatty+0x68>
    {
      return 1;
 800f764:	00800044 	movi	r2,1
 800f768:	00000d06 	br	800f7a0 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800f76c:	e0bfed04 	addi	r2,fp,-76
 800f770:	100b883a 	mov	r5,r2
 800f774:	e13fec17 	ldw	r4,-80(fp)
 800f778:	800f60c0 	call	800f60c <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800f77c:	e0bfee17 	ldw	r2,-72(fp)
 800f780:	10880020 	cmpeqi	r2,r2,8192
 800f784:	10803fcc 	andi	r2,r2,255
 800f788:	00000506 	br	800f7a0 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800f78c:	800f6c80 	call	800f6c8 <alt_get_errno>
 800f790:	1007883a 	mov	r3,r2
 800f794:	00801444 	movi	r2,81
 800f798:	18800015 	stw	r2,0(r3)
    return 0;
 800f79c:	0005883a 	mov	r2,zero
  }
}
 800f7a0:	e037883a 	mov	sp,fp
 800f7a4:	dfc00117 	ldw	ra,4(sp)
 800f7a8:	df000017 	ldw	fp,0(sp)
 800f7ac:	dec00204 	addi	sp,sp,8
 800f7b0:	f800283a 	ret

0800f7b4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800f7b4:	defffc04 	addi	sp,sp,-16
 800f7b8:	df000315 	stw	fp,12(sp)
 800f7bc:	df000304 	addi	fp,sp,12
 800f7c0:	e13fff15 	stw	r4,-4(fp)
 800f7c4:	e17ffe15 	stw	r5,-8(fp)
 800f7c8:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 800f7cc:	e0fffe17 	ldw	r3,-8(fp)
 800f7d0:	e0bfff17 	ldw	r2,-4(fp)
 800f7d4:	18800c26 	beq	r3,r2,800f808 <alt_load_section+0x54>
  {
    while( to != end )
 800f7d8:	00000806 	br	800f7fc <alt_load_section+0x48>
    {
      *to++ = *from++;
 800f7dc:	e0ffff17 	ldw	r3,-4(fp)
 800f7e0:	18800104 	addi	r2,r3,4
 800f7e4:	e0bfff15 	stw	r2,-4(fp)
 800f7e8:	e0bffe17 	ldw	r2,-8(fp)
 800f7ec:	11000104 	addi	r4,r2,4
 800f7f0:	e13ffe15 	stw	r4,-8(fp)
 800f7f4:	18c00017 	ldw	r3,0(r3)
 800f7f8:	10c00015 	stw	r3,0(r2)
    while( to != end )
 800f7fc:	e0fffe17 	ldw	r3,-8(fp)
 800f800:	e0bffd17 	ldw	r2,-12(fp)
 800f804:	18bff51e 	bne	r3,r2,800f7dc <alt_load_section+0x28>
    }
  }
}
 800f808:	0001883a 	nop
 800f80c:	e037883a 	mov	sp,fp
 800f810:	df000017 	ldw	fp,0(sp)
 800f814:	dec00104 	addi	sp,sp,4
 800f818:	f800283a 	ret

0800f81c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800f81c:	defffe04 	addi	sp,sp,-8
 800f820:	dfc00115 	stw	ra,4(sp)
 800f824:	df000015 	stw	fp,0(sp)
 800f828:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800f82c:	01820074 	movhi	r6,2049
 800f830:	31901904 	addi	r6,r6,16484
 800f834:	01420074 	movhi	r5,2049
 800f838:	29491304 	addi	r5,r5,9292
 800f83c:	01020074 	movhi	r4,2049
 800f840:	21101904 	addi	r4,r4,16484
 800f844:	800f7b40 	call	800f7b4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800f848:	01820034 	movhi	r6,2048
 800f84c:	31808904 	addi	r6,r6,548
 800f850:	01420034 	movhi	r5,2048
 800f854:	29400804 	addi	r5,r5,32
 800f858:	01020034 	movhi	r4,2048
 800f85c:	21000804 	addi	r4,r4,32
 800f860:	800f7b40 	call	800f7b4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800f864:	01820074 	movhi	r6,2049
 800f868:	31891304 	addi	r6,r6,9292
 800f86c:	01420074 	movhi	r5,2049
 800f870:	29472704 	addi	r5,r5,7324
 800f874:	01020074 	movhi	r4,2049
 800f878:	21072704 	addi	r4,r4,7324
 800f87c:	800f7b40 	call	800f7b4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800f880:	8010ea40 	call	8010ea4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800f884:	80110640 	call	8011064 <alt_icache_flush_all>
}
 800f888:	0001883a 	nop
 800f88c:	e037883a 	mov	sp,fp
 800f890:	dfc00117 	ldw	ra,4(sp)
 800f894:	df000017 	ldw	fp,0(sp)
 800f898:	dec00204 	addi	sp,sp,8
 800f89c:	f800283a 	ret

0800f8a0 <alt_get_errno>:
{
 800f8a0:	defffe04 	addi	sp,sp,-8
 800f8a4:	dfc00115 	stw	ra,4(sp)
 800f8a8:	df000015 	stw	fp,0(sp)
 800f8ac:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f8b0:	d0a00d17 	ldw	r2,-32716(gp)
 800f8b4:	10000326 	beq	r2,zero,800f8c4 <alt_get_errno+0x24>
 800f8b8:	d0a00d17 	ldw	r2,-32716(gp)
 800f8bc:	103ee83a 	callr	r2
 800f8c0:	00000106 	br	800f8c8 <alt_get_errno+0x28>
 800f8c4:	d0a72104 	addi	r2,gp,-25468
}
 800f8c8:	e037883a 	mov	sp,fp
 800f8cc:	dfc00117 	ldw	ra,4(sp)
 800f8d0:	df000017 	ldw	fp,0(sp)
 800f8d4:	dec00204 	addi	sp,sp,8
 800f8d8:	f800283a 	ret

0800f8dc <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800f8dc:	defff904 	addi	sp,sp,-28
 800f8e0:	dfc00615 	stw	ra,24(sp)
 800f8e4:	df000515 	stw	fp,20(sp)
 800f8e8:	df000504 	addi	fp,sp,20
 800f8ec:	e13ffd15 	stw	r4,-12(fp)
 800f8f0:	e17ffc15 	stw	r5,-16(fp)
 800f8f4:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800f8f8:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800f8fc:	e0bffd17 	ldw	r2,-12(fp)
 800f900:	10000916 	blt	r2,zero,800f928 <lseek+0x4c>
 800f904:	e0fffd17 	ldw	r3,-12(fp)
 800f908:	1805883a 	mov	r2,r3
 800f90c:	1085883a 	add	r2,r2,r2
 800f910:	10c5883a 	add	r2,r2,r3
 800f914:	100490ba 	slli	r2,r2,2
 800f918:	00c20074 	movhi	r3,2049
 800f91c:	18cb8f04 	addi	r3,r3,11836
 800f920:	10c5883a 	add	r2,r2,r3
 800f924:	00000106 	br	800f92c <lseek+0x50>
 800f928:	0005883a 	mov	r2,zero
 800f92c:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 800f930:	e0bffe17 	ldw	r2,-8(fp)
 800f934:	10001026 	beq	r2,zero,800f978 <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800f938:	e0bffe17 	ldw	r2,-8(fp)
 800f93c:	10800017 	ldw	r2,0(r2)
 800f940:	10800717 	ldw	r2,28(r2)
 800f944:	10000926 	beq	r2,zero,800f96c <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800f948:	e0bffe17 	ldw	r2,-8(fp)
 800f94c:	10800017 	ldw	r2,0(r2)
 800f950:	10800717 	ldw	r2,28(r2)
 800f954:	e1bffb17 	ldw	r6,-20(fp)
 800f958:	e17ffc17 	ldw	r5,-16(fp)
 800f95c:	e13ffe17 	ldw	r4,-8(fp)
 800f960:	103ee83a 	callr	r2
 800f964:	e0bfff15 	stw	r2,-4(fp)
 800f968:	00000506 	br	800f980 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800f96c:	00bfde84 	movi	r2,-134
 800f970:	e0bfff15 	stw	r2,-4(fp)
 800f974:	00000206 	br	800f980 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 800f978:	00bfebc4 	movi	r2,-81
 800f97c:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 800f980:	e0bfff17 	ldw	r2,-4(fp)
 800f984:	1000070e 	bge	r2,zero,800f9a4 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 800f988:	800f8a00 	call	800f8a0 <alt_get_errno>
 800f98c:	1007883a 	mov	r3,r2
 800f990:	e0bfff17 	ldw	r2,-4(fp)
 800f994:	0085c83a 	sub	r2,zero,r2
 800f998:	18800015 	stw	r2,0(r3)
    rc = -1;
 800f99c:	00bfffc4 	movi	r2,-1
 800f9a0:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 800f9a4:	e0bfff17 	ldw	r2,-4(fp)
}
 800f9a8:	e037883a 	mov	sp,fp
 800f9ac:	dfc00117 	ldw	ra,4(sp)
 800f9b0:	df000017 	ldw	fp,0(sp)
 800f9b4:	dec00204 	addi	sp,sp,8
 800f9b8:	f800283a 	ret

0800f9bc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800f9bc:	defffd04 	addi	sp,sp,-12
 800f9c0:	dfc00215 	stw	ra,8(sp)
 800f9c4:	df000115 	stw	fp,4(sp)
 800f9c8:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800f9cc:	0009883a 	mov	r4,zero
 800f9d0:	801002c0 	call	801002c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800f9d4:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800f9d8:	80100640 	call	8010064 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800f9dc:	01820074 	movhi	r6,2049
 800f9e0:	31890904 	addi	r6,r6,9252
 800f9e4:	01420074 	movhi	r5,2049
 800f9e8:	29490904 	addi	r5,r5,9252
 800f9ec:	01020074 	movhi	r4,2049
 800f9f0:	21090904 	addi	r4,r4,9252
 800f9f4:	80113ec0 	call	80113ec <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800f9f8:	8010fa40 	call	8010fa4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800f9fc:	01020074 	movhi	r4,2049
 800fa00:	21040104 	addi	r4,r4,4100
 800fa04:	80119ec0 	call	80119ec <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800fa08:	d0a72317 	ldw	r2,-25460(gp)
 800fa0c:	d0e72417 	ldw	r3,-25456(gp)
 800fa10:	d1272517 	ldw	r4,-25452(gp)
 800fa14:	200d883a 	mov	r6,r4
 800fa18:	180b883a 	mov	r5,r3
 800fa1c:	1009883a 	mov	r4,r2
 800fa20:	80007380 	call	8000738 <main>
 800fa24:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800fa28:	01000044 	movi	r4,1
 800fa2c:	800f4c80 	call	800f4c8 <close>
  exit (result);
 800fa30:	e13fff17 	ldw	r4,-4(fp)
 800fa34:	8011a000 	call	8011a00 <exit>

0800fa38 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800fa38:	defffe04 	addi	sp,sp,-8
 800fa3c:	df000115 	stw	fp,4(sp)
 800fa40:	df000104 	addi	fp,sp,4
 800fa44:	e13fff15 	stw	r4,-4(fp)
}
 800fa48:	0001883a 	nop
 800fa4c:	e037883a 	mov	sp,fp
 800fa50:	df000017 	ldw	fp,0(sp)
 800fa54:	dec00104 	addi	sp,sp,4
 800fa58:	f800283a 	ret

0800fa5c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800fa5c:	defffe04 	addi	sp,sp,-8
 800fa60:	df000115 	stw	fp,4(sp)
 800fa64:	df000104 	addi	fp,sp,4
 800fa68:	e13fff15 	stw	r4,-4(fp)
}
 800fa6c:	0001883a 	nop
 800fa70:	e037883a 	mov	sp,fp
 800fa74:	df000017 	ldw	fp,0(sp)
 800fa78:	dec00104 	addi	sp,sp,4
 800fa7c:	f800283a 	ret

0800fa80 <alt_get_errno>:
{
 800fa80:	defffe04 	addi	sp,sp,-8
 800fa84:	dfc00115 	stw	ra,4(sp)
 800fa88:	df000015 	stw	fp,0(sp)
 800fa8c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fa90:	d0a00d17 	ldw	r2,-32716(gp)
 800fa94:	10000326 	beq	r2,zero,800faa4 <alt_get_errno+0x24>
 800fa98:	d0a00d17 	ldw	r2,-32716(gp)
 800fa9c:	103ee83a 	callr	r2
 800faa0:	00000106 	br	800faa8 <alt_get_errno+0x28>
 800faa4:	d0a72104 	addi	r2,gp,-25468
}
 800faa8:	e037883a 	mov	sp,fp
 800faac:	dfc00117 	ldw	ra,4(sp)
 800fab0:	df000017 	ldw	fp,0(sp)
 800fab4:	dec00204 	addi	sp,sp,8
 800fab8:	f800283a 	ret

0800fabc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800fabc:	defff904 	addi	sp,sp,-28
 800fac0:	dfc00615 	stw	ra,24(sp)
 800fac4:	df000515 	stw	fp,20(sp)
 800fac8:	df000504 	addi	fp,sp,20
 800facc:	e13ffd15 	stw	r4,-12(fp)
 800fad0:	e17ffc15 	stw	r5,-16(fp)
 800fad4:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800fad8:	e0bffd17 	ldw	r2,-12(fp)
 800fadc:	10000916 	blt	r2,zero,800fb04 <read+0x48>
 800fae0:	e0fffd17 	ldw	r3,-12(fp)
 800fae4:	1805883a 	mov	r2,r3
 800fae8:	1085883a 	add	r2,r2,r2
 800faec:	10c5883a 	add	r2,r2,r3
 800faf0:	100490ba 	slli	r2,r2,2
 800faf4:	00c20074 	movhi	r3,2049
 800faf8:	18cb8f04 	addi	r3,r3,11836
 800fafc:	10c5883a 	add	r2,r2,r3
 800fb00:	00000106 	br	800fb08 <read+0x4c>
 800fb04:	0005883a 	mov	r2,zero
 800fb08:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800fb0c:	e0bfff17 	ldw	r2,-4(fp)
 800fb10:	10002226 	beq	r2,zero,800fb9c <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fb14:	e0bfff17 	ldw	r2,-4(fp)
 800fb18:	10800217 	ldw	r2,8(r2)
 800fb1c:	108000cc 	andi	r2,r2,3
 800fb20:	10800060 	cmpeqi	r2,r2,1
 800fb24:	1000181e 	bne	r2,zero,800fb88 <read+0xcc>
        (fd->dev->read))
 800fb28:	e0bfff17 	ldw	r2,-4(fp)
 800fb2c:	10800017 	ldw	r2,0(r2)
 800fb30:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800fb34:	10001426 	beq	r2,zero,800fb88 <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800fb38:	e0bfff17 	ldw	r2,-4(fp)
 800fb3c:	10800017 	ldw	r2,0(r2)
 800fb40:	10800517 	ldw	r2,20(r2)
 800fb44:	e0fffb17 	ldw	r3,-20(fp)
 800fb48:	180d883a 	mov	r6,r3
 800fb4c:	e17ffc17 	ldw	r5,-16(fp)
 800fb50:	e13fff17 	ldw	r4,-4(fp)
 800fb54:	103ee83a 	callr	r2
 800fb58:	e0bffe15 	stw	r2,-8(fp)
 800fb5c:	e0bffe17 	ldw	r2,-8(fp)
 800fb60:	1000070e 	bge	r2,zero,800fb80 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 800fb64:	800fa800 	call	800fa80 <alt_get_errno>
 800fb68:	1007883a 	mov	r3,r2
 800fb6c:	e0bffe17 	ldw	r2,-8(fp)
 800fb70:	0085c83a 	sub	r2,zero,r2
 800fb74:	18800015 	stw	r2,0(r3)
          return -1;
 800fb78:	00bfffc4 	movi	r2,-1
 800fb7c:	00000c06 	br	800fbb0 <read+0xf4>
        }
        return rval;
 800fb80:	e0bffe17 	ldw	r2,-8(fp)
 800fb84:	00000a06 	br	800fbb0 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800fb88:	800fa800 	call	800fa80 <alt_get_errno>
 800fb8c:	1007883a 	mov	r3,r2
 800fb90:	00800344 	movi	r2,13
 800fb94:	18800015 	stw	r2,0(r3)
 800fb98:	00000406 	br	800fbac <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800fb9c:	800fa800 	call	800fa80 <alt_get_errno>
 800fba0:	1007883a 	mov	r3,r2
 800fba4:	00801444 	movi	r2,81
 800fba8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800fbac:	00bfffc4 	movi	r2,-1
}
 800fbb0:	e037883a 	mov	sp,fp
 800fbb4:	dfc00117 	ldw	ra,4(sp)
 800fbb8:	df000017 	ldw	fp,0(sp)
 800fbbc:	dec00204 	addi	sp,sp,8
 800fbc0:	f800283a 	ret

0800fbc4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800fbc4:	defffe04 	addi	sp,sp,-8
 800fbc8:	df000115 	stw	fp,4(sp)
 800fbcc:	df000104 	addi	fp,sp,4
 800fbd0:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800fbd4:	e0bfff17 	ldw	r2,-4(fp)
 800fbd8:	108000d0 	cmplti	r2,r2,3
 800fbdc:	1000101e 	bne	r2,zero,800fc20 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 800fbe0:	e0ffff17 	ldw	r3,-4(fp)
 800fbe4:	1805883a 	mov	r2,r3
 800fbe8:	1085883a 	add	r2,r2,r2
 800fbec:	10c5883a 	add	r2,r2,r3
 800fbf0:	100490ba 	slli	r2,r2,2
 800fbf4:	00c20074 	movhi	r3,2049
 800fbf8:	10c7883a 	add	r3,r2,r3
 800fbfc:	180b9115 	stw	zero,11844(r3)
    alt_fd_list[fd].dev      = 0;
 800fc00:	e0ffff17 	ldw	r3,-4(fp)
 800fc04:	1805883a 	mov	r2,r3
 800fc08:	1085883a 	add	r2,r2,r2
 800fc0c:	10c5883a 	add	r2,r2,r3
 800fc10:	100490ba 	slli	r2,r2,2
 800fc14:	00c20074 	movhi	r3,2049
 800fc18:	10c7883a 	add	r3,r2,r3
 800fc1c:	180b8f15 	stw	zero,11836(r3)
  }
}
 800fc20:	0001883a 	nop
 800fc24:	e037883a 	mov	sp,fp
 800fc28:	df000017 	ldw	fp,0(sp)
 800fc2c:	dec00104 	addi	sp,sp,4
 800fc30:	f800283a 	ret

0800fc34 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800fc34:	defff904 	addi	sp,sp,-28
 800fc38:	df000615 	stw	fp,24(sp)
 800fc3c:	df000604 	addi	fp,sp,24
 800fc40:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 800fc44:	0005303a 	rdctl	r2,status
 800fc48:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fc4c:	e0fffd17 	ldw	r3,-12(fp)
 800fc50:	00bfff84 	movi	r2,-2
 800fc54:	1884703a 	and	r2,r3,r2
 800fc58:	1001703a 	wrctl	status,r2
  return context;
 800fc5c:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800fc60:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800fc64:	d0a00e17 	ldw	r2,-32712(gp)
 800fc68:	10c000c4 	addi	r3,r2,3
 800fc6c:	00bfff04 	movi	r2,-4
 800fc70:	1884703a 	and	r2,r3,r2
 800fc74:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800fc78:	d0e00e17 	ldw	r3,-32712(gp)
 800fc7c:	e0bffa17 	ldw	r2,-24(fp)
 800fc80:	1887883a 	add	r3,r3,r2
 800fc84:	00830034 	movhi	r2,3072
 800fc88:	10800004 	addi	r2,r2,0
 800fc8c:	10c0062e 	bgeu	r2,r3,800fca8 <sbrk+0x74>
 800fc90:	e0bfff17 	ldw	r2,-4(fp)
 800fc94:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800fc98:	e0bffc17 	ldw	r2,-16(fp)
 800fc9c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800fca0:	00bfffc4 	movi	r2,-1
 800fca4:	00000b06 	br	800fcd4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800fca8:	d0a00e17 	ldw	r2,-32712(gp)
 800fcac:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 800fcb0:	d0e00e17 	ldw	r3,-32712(gp)
 800fcb4:	e0bffa17 	ldw	r2,-24(fp)
 800fcb8:	1885883a 	add	r2,r3,r2
 800fcbc:	d0a00e15 	stw	r2,-32712(gp)
 800fcc0:	e0bfff17 	ldw	r2,-4(fp)
 800fcc4:	e0bffb15 	stw	r2,-20(fp)
 800fcc8:	e0bffb17 	ldw	r2,-20(fp)
 800fccc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800fcd0:	e0bffe17 	ldw	r2,-8(fp)
} 
 800fcd4:	e037883a 	mov	sp,fp
 800fcd8:	df000017 	ldw	fp,0(sp)
 800fcdc:	dec00104 	addi	sp,sp,4
 800fce0:	f800283a 	ret

0800fce4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800fce4:	defffa04 	addi	sp,sp,-24
 800fce8:	df000515 	stw	fp,20(sp)
 800fcec:	df000504 	addi	fp,sp,20
 800fcf0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 800fcf4:	0005303a 	rdctl	r2,status
 800fcf8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800fcfc:	e0fffc17 	ldw	r3,-16(fp)
 800fd00:	00bfff84 	movi	r2,-2
 800fd04:	1884703a 	and	r2,r3,r2
 800fd08:	1001703a 	wrctl	status,r2
  return context;
 800fd0c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800fd10:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 800fd14:	e0bffb17 	ldw	r2,-20(fp)
 800fd18:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800fd1c:	e0bffd17 	ldw	r2,-12(fp)
 800fd20:	10800017 	ldw	r2,0(r2)
 800fd24:	e0fffd17 	ldw	r3,-12(fp)
 800fd28:	18c00117 	ldw	r3,4(r3)
 800fd2c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800fd30:	e0bffd17 	ldw	r2,-12(fp)
 800fd34:	10800117 	ldw	r2,4(r2)
 800fd38:	e0fffd17 	ldw	r3,-12(fp)
 800fd3c:	18c00017 	ldw	r3,0(r3)
 800fd40:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800fd44:	e0bffd17 	ldw	r2,-12(fp)
 800fd48:	e0fffd17 	ldw	r3,-12(fp)
 800fd4c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800fd50:	e0bffd17 	ldw	r2,-12(fp)
 800fd54:	e0fffd17 	ldw	r3,-12(fp)
 800fd58:	10c00015 	stw	r3,0(r2)
 800fd5c:	e0bfff17 	ldw	r2,-4(fp)
 800fd60:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 800fd64:	e0bffe17 	ldw	r2,-8(fp)
 800fd68:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800fd6c:	0001883a 	nop
 800fd70:	e037883a 	mov	sp,fp
 800fd74:	df000017 	ldw	fp,0(sp)
 800fd78:	dec00104 	addi	sp,sp,4
 800fd7c:	f800283a 	ret

0800fd80 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800fd80:	defffb04 	addi	sp,sp,-20
 800fd84:	dfc00415 	stw	ra,16(sp)
 800fd88:	df000315 	stw	fp,12(sp)
 800fd8c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800fd90:	d0a00f17 	ldw	r2,-32708(gp)
 800fd94:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800fd98:	d0a72717 	ldw	r2,-25444(gp)
 800fd9c:	10800044 	addi	r2,r2,1
 800fda0:	d0a72715 	stw	r2,-25444(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800fda4:	00002e06 	br	800fe60 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800fda8:	e0bfff17 	ldw	r2,-4(fp)
 800fdac:	10800017 	ldw	r2,0(r2)
 800fdb0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800fdb4:	e0bfff17 	ldw	r2,-4(fp)
 800fdb8:	10800403 	ldbu	r2,16(r2)
 800fdbc:	10803fcc 	andi	r2,r2,255
 800fdc0:	10000426 	beq	r2,zero,800fdd4 <alt_tick+0x54>
 800fdc4:	d0a72717 	ldw	r2,-25444(gp)
 800fdc8:	1000021e 	bne	r2,zero,800fdd4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800fdcc:	e0bfff17 	ldw	r2,-4(fp)
 800fdd0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800fdd4:	e0bfff17 	ldw	r2,-4(fp)
 800fdd8:	10800217 	ldw	r2,8(r2)
 800fddc:	d0e72717 	ldw	r3,-25444(gp)
 800fde0:	18801d36 	bltu	r3,r2,800fe58 <alt_tick+0xd8>
 800fde4:	e0bfff17 	ldw	r2,-4(fp)
 800fde8:	10800403 	ldbu	r2,16(r2)
 800fdec:	10803fcc 	andi	r2,r2,255
 800fdf0:	1000191e 	bne	r2,zero,800fe58 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800fdf4:	e0bfff17 	ldw	r2,-4(fp)
 800fdf8:	10800317 	ldw	r2,12(r2)
 800fdfc:	e0ffff17 	ldw	r3,-4(fp)
 800fe00:	18c00517 	ldw	r3,20(r3)
 800fe04:	1809883a 	mov	r4,r3
 800fe08:	103ee83a 	callr	r2
 800fe0c:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800fe10:	e0bffd17 	ldw	r2,-12(fp)
 800fe14:	1000031e 	bne	r2,zero,800fe24 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800fe18:	e13fff17 	ldw	r4,-4(fp)
 800fe1c:	800fce40 	call	800fce4 <alt_alarm_stop>
 800fe20:	00000d06 	br	800fe58 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800fe24:	e0bfff17 	ldw	r2,-4(fp)
 800fe28:	10c00217 	ldw	r3,8(r2)
 800fe2c:	e0bffd17 	ldw	r2,-12(fp)
 800fe30:	1887883a 	add	r3,r3,r2
 800fe34:	e0bfff17 	ldw	r2,-4(fp)
 800fe38:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800fe3c:	e0bfff17 	ldw	r2,-4(fp)
 800fe40:	10c00217 	ldw	r3,8(r2)
 800fe44:	d0a72717 	ldw	r2,-25444(gp)
 800fe48:	1880032e 	bgeu	r3,r2,800fe58 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800fe4c:	e0bfff17 	ldw	r2,-4(fp)
 800fe50:	00c00044 	movi	r3,1
 800fe54:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800fe58:	e0bffe17 	ldw	r2,-8(fp)
 800fe5c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 800fe60:	e0ffff17 	ldw	r3,-4(fp)
 800fe64:	d0a00f04 	addi	r2,gp,-32708
 800fe68:	18bfcf1e 	bne	r3,r2,800fda8 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800fe6c:	0001883a 	nop
}
 800fe70:	0001883a 	nop
 800fe74:	e037883a 	mov	sp,fp
 800fe78:	dfc00117 	ldw	ra,4(sp)
 800fe7c:	df000017 	ldw	fp,0(sp)
 800fe80:	dec00204 	addi	sp,sp,8
 800fe84:	f800283a 	ret

0800fe88 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800fe88:	defffd04 	addi	sp,sp,-12
 800fe8c:	dfc00215 	stw	ra,8(sp)
 800fe90:	df000115 	stw	fp,4(sp)
 800fe94:	df000104 	addi	fp,sp,4
 800fe98:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800fe9c:	e13fff17 	ldw	r4,-4(fp)
 800fea0:	8010d4c0 	call	8010d4c <alt_busy_sleep>
}
 800fea4:	e037883a 	mov	sp,fp
 800fea8:	dfc00117 	ldw	ra,4(sp)
 800feac:	df000017 	ldw	fp,0(sp)
 800feb0:	dec00204 	addi	sp,sp,8
 800feb4:	f800283a 	ret

0800feb8 <alt_get_errno>:
{
 800feb8:	defffe04 	addi	sp,sp,-8
 800febc:	dfc00115 	stw	ra,4(sp)
 800fec0:	df000015 	stw	fp,0(sp)
 800fec4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800fec8:	d0a00d17 	ldw	r2,-32716(gp)
 800fecc:	10000326 	beq	r2,zero,800fedc <alt_get_errno+0x24>
 800fed0:	d0a00d17 	ldw	r2,-32716(gp)
 800fed4:	103ee83a 	callr	r2
 800fed8:	00000106 	br	800fee0 <alt_get_errno+0x28>
 800fedc:	d0a72104 	addi	r2,gp,-25468
}
 800fee0:	e037883a 	mov	sp,fp
 800fee4:	dfc00117 	ldw	ra,4(sp)
 800fee8:	df000017 	ldw	fp,0(sp)
 800feec:	dec00204 	addi	sp,sp,8
 800fef0:	f800283a 	ret

0800fef4 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800fef4:	defff904 	addi	sp,sp,-28
 800fef8:	dfc00615 	stw	ra,24(sp)
 800fefc:	df000515 	stw	fp,20(sp)
 800ff00:	df000504 	addi	fp,sp,20
 800ff04:	e13ffd15 	stw	r4,-12(fp)
 800ff08:	e17ffc15 	stw	r5,-16(fp)
 800ff0c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800ff10:	e0bffd17 	ldw	r2,-12(fp)
 800ff14:	10000916 	blt	r2,zero,800ff3c <write+0x48>
 800ff18:	e0fffd17 	ldw	r3,-12(fp)
 800ff1c:	1805883a 	mov	r2,r3
 800ff20:	1085883a 	add	r2,r2,r2
 800ff24:	10c5883a 	add	r2,r2,r3
 800ff28:	100490ba 	slli	r2,r2,2
 800ff2c:	00c20074 	movhi	r3,2049
 800ff30:	18cb8f04 	addi	r3,r3,11836
 800ff34:	10c5883a 	add	r2,r2,r3
 800ff38:	00000106 	br	800ff40 <write+0x4c>
 800ff3c:	0005883a 	mov	r2,zero
 800ff40:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800ff44:	e0bfff17 	ldw	r2,-4(fp)
 800ff48:	10002126 	beq	r2,zero,800ffd0 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800ff4c:	e0bfff17 	ldw	r2,-4(fp)
 800ff50:	10800217 	ldw	r2,8(r2)
 800ff54:	108000cc 	andi	r2,r2,3
 800ff58:	10001826 	beq	r2,zero,800ffbc <write+0xc8>
 800ff5c:	e0bfff17 	ldw	r2,-4(fp)
 800ff60:	10800017 	ldw	r2,0(r2)
 800ff64:	10800617 	ldw	r2,24(r2)
 800ff68:	10001426 	beq	r2,zero,800ffbc <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800ff6c:	e0bfff17 	ldw	r2,-4(fp)
 800ff70:	10800017 	ldw	r2,0(r2)
 800ff74:	10800617 	ldw	r2,24(r2)
 800ff78:	e0fffb17 	ldw	r3,-20(fp)
 800ff7c:	180d883a 	mov	r6,r3
 800ff80:	e17ffc17 	ldw	r5,-16(fp)
 800ff84:	e13fff17 	ldw	r4,-4(fp)
 800ff88:	103ee83a 	callr	r2
 800ff8c:	e0bffe15 	stw	r2,-8(fp)
 800ff90:	e0bffe17 	ldw	r2,-8(fp)
 800ff94:	1000070e 	bge	r2,zero,800ffb4 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 800ff98:	800feb80 	call	800feb8 <alt_get_errno>
 800ff9c:	1007883a 	mov	r3,r2
 800ffa0:	e0bffe17 	ldw	r2,-8(fp)
 800ffa4:	0085c83a 	sub	r2,zero,r2
 800ffa8:	18800015 	stw	r2,0(r3)
        return -1;
 800ffac:	00bfffc4 	movi	r2,-1
 800ffb0:	00000c06 	br	800ffe4 <write+0xf0>
      }
      return rval;
 800ffb4:	e0bffe17 	ldw	r2,-8(fp)
 800ffb8:	00000a06 	br	800ffe4 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800ffbc:	800feb80 	call	800feb8 <alt_get_errno>
 800ffc0:	1007883a 	mov	r3,r2
 800ffc4:	00800344 	movi	r2,13
 800ffc8:	18800015 	stw	r2,0(r3)
 800ffcc:	00000406 	br	800ffe0 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800ffd0:	800feb80 	call	800feb8 <alt_get_errno>
 800ffd4:	1007883a 	mov	r3,r2
 800ffd8:	00801444 	movi	r2,81
 800ffdc:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800ffe0:	00bfffc4 	movi	r2,-1
}
 800ffe4:	e037883a 	mov	sp,fp
 800ffe8:	dfc00117 	ldw	ra,4(sp)
 800ffec:	df000017 	ldw	fp,0(sp)
 800fff0:	dec00204 	addi	sp,sp,8
 800fff4:	f800283a 	ret

0800fff8 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800fff8:	defffd04 	addi	sp,sp,-12
 800fffc:	dfc00215 	stw	ra,8(sp)
 8010000:	df000115 	stw	fp,4(sp)
 8010004:	df000104 	addi	fp,sp,4
 8010008:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 801000c:	d1600a04 	addi	r5,gp,-32728
 8010010:	e13fff17 	ldw	r4,-4(fp)
 8010014:	8010f000 	call	8010f00 <alt_dev_llist_insert>
}
 8010018:	e037883a 	mov	sp,fp
 801001c:	dfc00117 	ldw	ra,4(sp)
 8010020:	df000017 	ldw	fp,0(sp)
 8010024:	dec00204 	addi	sp,sp,8
 8010028:	f800283a 	ret

0801002c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 801002c:	defffd04 	addi	sp,sp,-12
 8010030:	dfc00215 	stw	ra,8(sp)
 8010034:	df000115 	stw	fp,4(sp)
 8010038:	df000104 	addi	fp,sp,4
 801003c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 8010040:	80116e00 	call	80116e0 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 8010044:	00800044 	movi	r2,1
 8010048:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 801004c:	0001883a 	nop
 8010050:	e037883a 	mov	sp,fp
 8010054:	dfc00117 	ldw	ra,4(sp)
 8010058:	df000017 	ldw	fp,0(sp)
 801005c:	dec00204 	addi	sp,sp,8
 8010060:	f800283a 	ret

08010064 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 8010064:	defffe04 	addi	sp,sp,-8
 8010068:	dfc00115 	stw	ra,4(sp)
 801006c:	df000015 	stw	fp,0(sp)
 8010070:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 8010074:	01c0fa04 	movi	r7,1000
 8010078:	01800084 	movi	r6,2
 801007c:	000b883a 	mov	r5,zero
 8010080:	01003004 	movi	r4,192
 8010084:	8010ba40 	call	8010ba4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 8010088:	01800044 	movi	r6,1
 801008c:	000b883a 	mov	r5,zero
 8010090:	01020074 	movhi	r4,2049
 8010094:	210bf904 	addi	r4,r4,12260
 8010098:	801022c0 	call	801022c <altera_avalon_jtag_uart_init>
 801009c:	01020074 	movhi	r4,2049
 80100a0:	210bef04 	addi	r4,r4,12220
 80100a4:	800fff80 	call	800fff8 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 80100a8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 80100ac:	0001883a 	nop
}
 80100b0:	0001883a 	nop
 80100b4:	e037883a 	mov	sp,fp
 80100b8:	dfc00117 	ldw	ra,4(sp)
 80100bc:	df000017 	ldw	fp,0(sp)
 80100c0:	dec00204 	addi	sp,sp,8
 80100c4:	f800283a 	ret

080100c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 80100c8:	defffa04 	addi	sp,sp,-24
 80100cc:	dfc00515 	stw	ra,20(sp)
 80100d0:	df000415 	stw	fp,16(sp)
 80100d4:	df000404 	addi	fp,sp,16
 80100d8:	e13ffe15 	stw	r4,-8(fp)
 80100dc:	e17ffd15 	stw	r5,-12(fp)
 80100e0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 80100e4:	e0bffe17 	ldw	r2,-8(fp)
 80100e8:	10800017 	ldw	r2,0(r2)
 80100ec:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 80100f0:	e0bfff17 	ldw	r2,-4(fp)
 80100f4:	10c00a04 	addi	r3,r2,40
 80100f8:	e0bffe17 	ldw	r2,-8(fp)
 80100fc:	10800217 	ldw	r2,8(r2)
 8010100:	100f883a 	mov	r7,r2
 8010104:	e1bffc17 	ldw	r6,-16(fp)
 8010108:	e17ffd17 	ldw	r5,-12(fp)
 801010c:	1809883a 	mov	r4,r3
 8010110:	80106ec0 	call	80106ec <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 8010114:	e037883a 	mov	sp,fp
 8010118:	dfc00117 	ldw	ra,4(sp)
 801011c:	df000017 	ldw	fp,0(sp)
 8010120:	dec00204 	addi	sp,sp,8
 8010124:	f800283a 	ret

08010128 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 8010128:	defffa04 	addi	sp,sp,-24
 801012c:	dfc00515 	stw	ra,20(sp)
 8010130:	df000415 	stw	fp,16(sp)
 8010134:	df000404 	addi	fp,sp,16
 8010138:	e13ffe15 	stw	r4,-8(fp)
 801013c:	e17ffd15 	stw	r5,-12(fp)
 8010140:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 8010144:	e0bffe17 	ldw	r2,-8(fp)
 8010148:	10800017 	ldw	r2,0(r2)
 801014c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 8010150:	e0bfff17 	ldw	r2,-4(fp)
 8010154:	10c00a04 	addi	r3,r2,40
 8010158:	e0bffe17 	ldw	r2,-8(fp)
 801015c:	10800217 	ldw	r2,8(r2)
 8010160:	100f883a 	mov	r7,r2
 8010164:	e1bffc17 	ldw	r6,-16(fp)
 8010168:	e17ffd17 	ldw	r5,-12(fp)
 801016c:	1809883a 	mov	r4,r3
 8010170:	80109080 	call	8010908 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 8010174:	e037883a 	mov	sp,fp
 8010178:	dfc00117 	ldw	ra,4(sp)
 801017c:	df000017 	ldw	fp,0(sp)
 8010180:	dec00204 	addi	sp,sp,8
 8010184:	f800283a 	ret

08010188 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 8010188:	defffc04 	addi	sp,sp,-16
 801018c:	dfc00315 	stw	ra,12(sp)
 8010190:	df000215 	stw	fp,8(sp)
 8010194:	df000204 	addi	fp,sp,8
 8010198:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801019c:	e0bffe17 	ldw	r2,-8(fp)
 80101a0:	10800017 	ldw	r2,0(r2)
 80101a4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 80101a8:	e0bfff17 	ldw	r2,-4(fp)
 80101ac:	10c00a04 	addi	r3,r2,40
 80101b0:	e0bffe17 	ldw	r2,-8(fp)
 80101b4:	10800217 	ldw	r2,8(r2)
 80101b8:	100b883a 	mov	r5,r2
 80101bc:	1809883a 	mov	r4,r3
 80101c0:	80105900 	call	8010590 <altera_avalon_jtag_uart_close>
}
 80101c4:	e037883a 	mov	sp,fp
 80101c8:	dfc00117 	ldw	ra,4(sp)
 80101cc:	df000017 	ldw	fp,0(sp)
 80101d0:	dec00204 	addi	sp,sp,8
 80101d4:	f800283a 	ret

080101d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 80101d8:	defffa04 	addi	sp,sp,-24
 80101dc:	dfc00515 	stw	ra,20(sp)
 80101e0:	df000415 	stw	fp,16(sp)
 80101e4:	df000404 	addi	fp,sp,16
 80101e8:	e13ffe15 	stw	r4,-8(fp)
 80101ec:	e17ffd15 	stw	r5,-12(fp)
 80101f0:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 80101f4:	e0bffe17 	ldw	r2,-8(fp)
 80101f8:	10800017 	ldw	r2,0(r2)
 80101fc:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 8010200:	e0bfff17 	ldw	r2,-4(fp)
 8010204:	10800a04 	addi	r2,r2,40
 8010208:	e1bffc17 	ldw	r6,-16(fp)
 801020c:	e17ffd17 	ldw	r5,-12(fp)
 8010210:	1009883a 	mov	r4,r2
 8010214:	80105f80 	call	80105f8 <altera_avalon_jtag_uart_ioctl>
}
 8010218:	e037883a 	mov	sp,fp
 801021c:	dfc00117 	ldw	ra,4(sp)
 8010220:	df000017 	ldw	fp,0(sp)
 8010224:	dec00204 	addi	sp,sp,8
 8010228:	f800283a 	ret

0801022c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801022c:	defffa04 	addi	sp,sp,-24
 8010230:	dfc00515 	stw	ra,20(sp)
 8010234:	df000415 	stw	fp,16(sp)
 8010238:	df000404 	addi	fp,sp,16
 801023c:	e13fff15 	stw	r4,-4(fp)
 8010240:	e17ffe15 	stw	r5,-8(fp)
 8010244:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010248:	e0bfff17 	ldw	r2,-4(fp)
 801024c:	00c00044 	movi	r3,1
 8010250:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 8010254:	e0bfff17 	ldw	r2,-4(fp)
 8010258:	10800017 	ldw	r2,0(r2)
 801025c:	10800104 	addi	r2,r2,4
 8010260:	1007883a 	mov	r3,r2
 8010264:	e0bfff17 	ldw	r2,-4(fp)
 8010268:	10800817 	ldw	r2,32(r2)
 801026c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 8010270:	e0bffe17 	ldw	r2,-8(fp)
 8010274:	e0fffd17 	ldw	r3,-12(fp)
 8010278:	d8000015 	stw	zero,0(sp)
 801027c:	e1ffff17 	ldw	r7,-4(fp)
 8010280:	01820074 	movhi	r6,2049
 8010284:	3180bb04 	addi	r6,r6,748
 8010288:	180b883a 	mov	r5,r3
 801028c:	1009883a 	mov	r4,r2
 8010290:	80110840 	call	8011084 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 8010294:	e0bfff17 	ldw	r2,-4(fp)
 8010298:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 801029c:	e0bfff17 	ldw	r2,-4(fp)
 80102a0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 80102a4:	d0e72617 	ldw	r3,-25448(gp)
 80102a8:	e1ffff17 	ldw	r7,-4(fp)
 80102ac:	01820074 	movhi	r6,2049
 80102b0:	31813c04 	addi	r6,r6,1264
 80102b4:	180b883a 	mov	r5,r3
 80102b8:	1009883a 	mov	r4,r2
 80102bc:	8010c200 	call	8010c20 <alt_alarm_start>
 80102c0:	1000040e 	bge	r2,zero,80102d4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 80102c4:	e0ffff17 	ldw	r3,-4(fp)
 80102c8:	00a00034 	movhi	r2,32768
 80102cc:	10bfffc4 	addi	r2,r2,-1
 80102d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 80102d4:	0001883a 	nop
 80102d8:	e037883a 	mov	sp,fp
 80102dc:	dfc00117 	ldw	ra,4(sp)
 80102e0:	df000017 	ldw	fp,0(sp)
 80102e4:	dec00204 	addi	sp,sp,8
 80102e8:	f800283a 	ret

080102ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 80102ec:	defff804 	addi	sp,sp,-32
 80102f0:	df000715 	stw	fp,28(sp)
 80102f4:	df000704 	addi	fp,sp,28
 80102f8:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 80102fc:	e0bff917 	ldw	r2,-28(fp)
 8010300:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 8010304:	e0bffd17 	ldw	r2,-12(fp)
 8010308:	10800017 	ldw	r2,0(r2)
 801030c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 8010310:	e0bffc17 	ldw	r2,-16(fp)
 8010314:	10800104 	addi	r2,r2,4
 8010318:	10800037 	ldwio	r2,0(r2)
 801031c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 8010320:	e0bffb17 	ldw	r2,-20(fp)
 8010324:	1080c00c 	andi	r2,r2,768
 8010328:	10006b26 	beq	r2,zero,80104d8 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801032c:	e0bffb17 	ldw	r2,-20(fp)
 8010330:	1080400c 	andi	r2,r2,256
 8010334:	10003426 	beq	r2,zero,8010408 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 8010338:	00800074 	movhi	r2,1
 801033c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010340:	e0bffd17 	ldw	r2,-12(fp)
 8010344:	10800a17 	ldw	r2,40(r2)
 8010348:	10800044 	addi	r2,r2,1
 801034c:	1081ffcc 	andi	r2,r2,2047
 8010350:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 8010354:	e0bffd17 	ldw	r2,-12(fp)
 8010358:	10800b17 	ldw	r2,44(r2)
 801035c:	e0fffa17 	ldw	r3,-24(fp)
 8010360:	18801426 	beq	r3,r2,80103b4 <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 8010364:	e0bffc17 	ldw	r2,-16(fp)
 8010368:	10800037 	ldwio	r2,0(r2)
 801036c:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 8010370:	e0bfff17 	ldw	r2,-4(fp)
 8010374:	10a0000c 	andi	r2,r2,32768
 8010378:	10001026 	beq	r2,zero,80103bc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801037c:	e0bffd17 	ldw	r2,-12(fp)
 8010380:	10800a17 	ldw	r2,40(r2)
 8010384:	e0ffff17 	ldw	r3,-4(fp)
 8010388:	1809883a 	mov	r4,r3
 801038c:	e0fffd17 	ldw	r3,-12(fp)
 8010390:	1885883a 	add	r2,r3,r2
 8010394:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 8010398:	e0bffd17 	ldw	r2,-12(fp)
 801039c:	10800a17 	ldw	r2,40(r2)
 80103a0:	10800044 	addi	r2,r2,1
 80103a4:	10c1ffcc 	andi	r3,r2,2047
 80103a8:	e0bffd17 	ldw	r2,-12(fp)
 80103ac:	10c00a15 	stw	r3,40(r2)
      {
 80103b0:	003fe306 	br	8010340 <altera_avalon_jtag_uart_irq+0x54>
          break;
 80103b4:	0001883a 	nop
 80103b8:	00000106 	br	80103c0 <altera_avalon_jtag_uart_irq+0xd4>
          break;
 80103bc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 80103c0:	e0bfff17 	ldw	r2,-4(fp)
 80103c4:	10bfffec 	andhi	r2,r2,65535
 80103c8:	10000f26 	beq	r2,zero,8010408 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 80103cc:	e0bffd17 	ldw	r2,-12(fp)
 80103d0:	10c00817 	ldw	r3,32(r2)
 80103d4:	00bfff84 	movi	r2,-2
 80103d8:	1886703a 	and	r3,r3,r2
 80103dc:	e0bffd17 	ldw	r2,-12(fp)
 80103e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 80103e4:	e0bffc17 	ldw	r2,-16(fp)
 80103e8:	10800104 	addi	r2,r2,4
 80103ec:	1007883a 	mov	r3,r2
 80103f0:	e0bffd17 	ldw	r2,-12(fp)
 80103f4:	10800817 	ldw	r2,32(r2)
 80103f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80103fc:	e0bffc17 	ldw	r2,-16(fp)
 8010400:	10800104 	addi	r2,r2,4
 8010404:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 8010408:	e0bffb17 	ldw	r2,-20(fp)
 801040c:	1080800c 	andi	r2,r2,512
 8010410:	103fbf26 	beq	r2,zero,8010310 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 8010414:	e0bffb17 	ldw	r2,-20(fp)
 8010418:	1004d43a 	srli	r2,r2,16
 801041c:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 8010420:	00001306 	br	8010470 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 8010424:	e0bffc17 	ldw	r2,-16(fp)
 8010428:	e0fffd17 	ldw	r3,-12(fp)
 801042c:	18c00d17 	ldw	r3,52(r3)
 8010430:	e13ffd17 	ldw	r4,-12(fp)
 8010434:	20c7883a 	add	r3,r4,r3
 8010438:	18c20e03 	ldbu	r3,2104(r3)
 801043c:	18c03fcc 	andi	r3,r3,255
 8010440:	18c0201c 	xori	r3,r3,128
 8010444:	18ffe004 	addi	r3,r3,-128
 8010448:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801044c:	e0bffd17 	ldw	r2,-12(fp)
 8010450:	10800d17 	ldw	r2,52(r2)
 8010454:	10800044 	addi	r2,r2,1
 8010458:	10c1ffcc 	andi	r3,r2,2047
 801045c:	e0bffd17 	ldw	r2,-12(fp)
 8010460:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 8010464:	e0bffe17 	ldw	r2,-8(fp)
 8010468:	10bfffc4 	addi	r2,r2,-1
 801046c:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 8010470:	e0bffe17 	ldw	r2,-8(fp)
 8010474:	10000526 	beq	r2,zero,801048c <altera_avalon_jtag_uart_irq+0x1a0>
 8010478:	e0bffd17 	ldw	r2,-12(fp)
 801047c:	10c00d17 	ldw	r3,52(r2)
 8010480:	e0bffd17 	ldw	r2,-12(fp)
 8010484:	10800c17 	ldw	r2,48(r2)
 8010488:	18bfe61e 	bne	r3,r2,8010424 <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
 801048c:	e0bffe17 	ldw	r2,-8(fp)
 8010490:	103f9f26 	beq	r2,zero,8010310 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010494:	e0bffd17 	ldw	r2,-12(fp)
 8010498:	10c00817 	ldw	r3,32(r2)
 801049c:	00bfff44 	movi	r2,-3
 80104a0:	1886703a 	and	r3,r3,r2
 80104a4:	e0bffd17 	ldw	r2,-12(fp)
 80104a8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 80104ac:	e0bffd17 	ldw	r2,-12(fp)
 80104b0:	10800017 	ldw	r2,0(r2)
 80104b4:	10800104 	addi	r2,r2,4
 80104b8:	1007883a 	mov	r3,r2
 80104bc:	e0bffd17 	ldw	r2,-12(fp)
 80104c0:	10800817 	ldw	r2,32(r2)
 80104c4:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 80104c8:	e0bffc17 	ldw	r2,-16(fp)
 80104cc:	10800104 	addi	r2,r2,4
 80104d0:	10800037 	ldwio	r2,0(r2)
  {
 80104d4:	003f8e06 	br	8010310 <altera_avalon_jtag_uart_irq+0x24>
      break;
 80104d8:	0001883a 	nop
      }
    }
  }
}
 80104dc:	0001883a 	nop
 80104e0:	e037883a 	mov	sp,fp
 80104e4:	df000017 	ldw	fp,0(sp)
 80104e8:	dec00104 	addi	sp,sp,4
 80104ec:	f800283a 	ret

080104f0 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 80104f0:	defffc04 	addi	sp,sp,-16
 80104f4:	df000315 	stw	fp,12(sp)
 80104f8:	df000304 	addi	fp,sp,12
 80104fc:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 8010500:	e0bffd17 	ldw	r2,-12(fp)
 8010504:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 8010508:	e0bfff17 	ldw	r2,-4(fp)
 801050c:	10800017 	ldw	r2,0(r2)
 8010510:	10800104 	addi	r2,r2,4
 8010514:	10800037 	ldwio	r2,0(r2)
 8010518:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801051c:	e0bffe17 	ldw	r2,-8(fp)
 8010520:	1081000c 	andi	r2,r2,1024
 8010524:	10000b26 	beq	r2,zero,8010554 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 8010528:	e0bfff17 	ldw	r2,-4(fp)
 801052c:	10800017 	ldw	r2,0(r2)
 8010530:	10800104 	addi	r2,r2,4
 8010534:	1007883a 	mov	r3,r2
 8010538:	e0bfff17 	ldw	r2,-4(fp)
 801053c:	10800817 	ldw	r2,32(r2)
 8010540:	10810014 	ori	r2,r2,1024
 8010544:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 8010548:	e0bfff17 	ldw	r2,-4(fp)
 801054c:	10000915 	stw	zero,36(r2)
 8010550:	00000a06 	br	801057c <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 8010554:	e0bfff17 	ldw	r2,-4(fp)
 8010558:	10c00917 	ldw	r3,36(r2)
 801055c:	00a00034 	movhi	r2,32768
 8010560:	10bfff04 	addi	r2,r2,-4
 8010564:	10c00536 	bltu	r2,r3,801057c <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 8010568:	e0bfff17 	ldw	r2,-4(fp)
 801056c:	10800917 	ldw	r2,36(r2)
 8010570:	10c00044 	addi	r3,r2,1
 8010574:	e0bfff17 	ldw	r2,-4(fp)
 8010578:	10c00915 	stw	r3,36(r2)
 801057c:	d0a72617 	ldw	r2,-25448(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 8010580:	e037883a 	mov	sp,fp
 8010584:	df000017 	ldw	fp,0(sp)
 8010588:	dec00104 	addi	sp,sp,4
 801058c:	f800283a 	ret

08010590 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 8010590:	defffd04 	addi	sp,sp,-12
 8010594:	df000215 	stw	fp,8(sp)
 8010598:	df000204 	addi	fp,sp,8
 801059c:	e13fff15 	stw	r4,-4(fp)
 80105a0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80105a4:	00000506 	br	80105bc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 80105a8:	e0bffe17 	ldw	r2,-8(fp)
 80105ac:	1090000c 	andi	r2,r2,16384
 80105b0:	10000226 	beq	r2,zero,80105bc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 80105b4:	00bffd44 	movi	r2,-11
 80105b8:	00000b06 	br	80105e8 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 80105bc:	e0bfff17 	ldw	r2,-4(fp)
 80105c0:	10c00d17 	ldw	r3,52(r2)
 80105c4:	e0bfff17 	ldw	r2,-4(fp)
 80105c8:	10800c17 	ldw	r2,48(r2)
 80105cc:	18800526 	beq	r3,r2,80105e4 <altera_avalon_jtag_uart_close+0x54>
 80105d0:	e0bfff17 	ldw	r2,-4(fp)
 80105d4:	10c00917 	ldw	r3,36(r2)
 80105d8:	e0bfff17 	ldw	r2,-4(fp)
 80105dc:	10800117 	ldw	r2,4(r2)
 80105e0:	18bff136 	bltu	r3,r2,80105a8 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 80105e4:	0005883a 	mov	r2,zero
}
 80105e8:	e037883a 	mov	sp,fp
 80105ec:	df000017 	ldw	fp,0(sp)
 80105f0:	dec00104 	addi	sp,sp,4
 80105f4:	f800283a 	ret

080105f8 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 80105f8:	defffa04 	addi	sp,sp,-24
 80105fc:	df000515 	stw	fp,20(sp)
 8010600:	df000504 	addi	fp,sp,20
 8010604:	e13ffd15 	stw	r4,-12(fp)
 8010608:	e17ffc15 	stw	r5,-16(fp)
 801060c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 8010610:	00bff9c4 	movi	r2,-25
 8010614:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 8010618:	e0bffc17 	ldw	r2,-16(fp)
 801061c:	109a8060 	cmpeqi	r2,r2,27137
 8010620:	1000041e 	bne	r2,zero,8010634 <altera_avalon_jtag_uart_ioctl+0x3c>
 8010624:	e0bffc17 	ldw	r2,-16(fp)
 8010628:	109a80a0 	cmpeqi	r2,r2,27138
 801062c:	1000181e 	bne	r2,zero,8010690 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 8010630:	00002906 	br	80106d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 8010634:	e0bffd17 	ldw	r2,-12(fp)
 8010638:	10c00117 	ldw	r3,4(r2)
 801063c:	00a00034 	movhi	r2,32768
 8010640:	10bfffc4 	addi	r2,r2,-1
 8010644:	18802126 	beq	r3,r2,80106cc <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 8010648:	e0bffb17 	ldw	r2,-20(fp)
 801064c:	10800017 	ldw	r2,0(r2)
 8010650:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 8010654:	e0bffe17 	ldw	r2,-8(fp)
 8010658:	10800090 	cmplti	r2,r2,2
 801065c:	1000061e 	bne	r2,zero,8010678 <altera_avalon_jtag_uart_ioctl+0x80>
 8010660:	e0fffe17 	ldw	r3,-8(fp)
 8010664:	00a00034 	movhi	r2,32768
 8010668:	10bfffc4 	addi	r2,r2,-1
 801066c:	18800226 	beq	r3,r2,8010678 <altera_avalon_jtag_uart_ioctl+0x80>
 8010670:	e0bffe17 	ldw	r2,-8(fp)
 8010674:	00000206 	br	8010680 <altera_avalon_jtag_uart_ioctl+0x88>
 8010678:	00a00034 	movhi	r2,32768
 801067c:	10bfff84 	addi	r2,r2,-2
 8010680:	e0fffd17 	ldw	r3,-12(fp)
 8010684:	18800115 	stw	r2,4(r3)
      rc = 0;
 8010688:	e03fff15 	stw	zero,-4(fp)
    break;
 801068c:	00000f06 	br	80106cc <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 8010690:	e0bffd17 	ldw	r2,-12(fp)
 8010694:	10c00117 	ldw	r3,4(r2)
 8010698:	00a00034 	movhi	r2,32768
 801069c:	10bfffc4 	addi	r2,r2,-1
 80106a0:	18800c26 	beq	r3,r2,80106d4 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 80106a4:	e0bffd17 	ldw	r2,-12(fp)
 80106a8:	10c00917 	ldw	r3,36(r2)
 80106ac:	e0bffd17 	ldw	r2,-12(fp)
 80106b0:	10800117 	ldw	r2,4(r2)
 80106b4:	1885803a 	cmpltu	r2,r3,r2
 80106b8:	10c03fcc 	andi	r3,r2,255
 80106bc:	e0bffb17 	ldw	r2,-20(fp)
 80106c0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 80106c4:	e03fff15 	stw	zero,-4(fp)
    break;
 80106c8:	00000206 	br	80106d4 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 80106cc:	0001883a 	nop
 80106d0:	00000106 	br	80106d8 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 80106d4:	0001883a 	nop
  }

  return rc;
 80106d8:	e0bfff17 	ldw	r2,-4(fp)
}
 80106dc:	e037883a 	mov	sp,fp
 80106e0:	df000017 	ldw	fp,0(sp)
 80106e4:	dec00104 	addi	sp,sp,4
 80106e8:	f800283a 	ret

080106ec <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 80106ec:	defff304 	addi	sp,sp,-52
 80106f0:	dfc00c15 	stw	ra,48(sp)
 80106f4:	df000b15 	stw	fp,44(sp)
 80106f8:	df000b04 	addi	fp,sp,44
 80106fc:	e13ff815 	stw	r4,-32(fp)
 8010700:	e17ff715 	stw	r5,-36(fp)
 8010704:	e1bff615 	stw	r6,-40(fp)
 8010708:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 801070c:	e0bff717 	ldw	r2,-36(fp)
 8010710:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 8010714:	00004706 	br	8010834 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 8010718:	e0bff817 	ldw	r2,-32(fp)
 801071c:	10800a17 	ldw	r2,40(r2)
 8010720:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 8010724:	e0bff817 	ldw	r2,-32(fp)
 8010728:	10800b17 	ldw	r2,44(r2)
 801072c:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 8010730:	e0fffd17 	ldw	r3,-12(fp)
 8010734:	e0bffc17 	ldw	r2,-16(fp)
 8010738:	18800536 	bltu	r3,r2,8010750 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801073c:	e0fffd17 	ldw	r3,-12(fp)
 8010740:	e0bffc17 	ldw	r2,-16(fp)
 8010744:	1885c83a 	sub	r2,r3,r2
 8010748:	e0bffe15 	stw	r2,-8(fp)
 801074c:	00000406 	br	8010760 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 8010750:	00c20004 	movi	r3,2048
 8010754:	e0bffc17 	ldw	r2,-16(fp)
 8010758:	1885c83a 	sub	r2,r3,r2
 801075c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 8010760:	e0bffe17 	ldw	r2,-8(fp)
 8010764:	10001e26 	beq	r2,zero,80107e0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 8010768:	e0fff617 	ldw	r3,-40(fp)
 801076c:	e0bffe17 	ldw	r2,-8(fp)
 8010770:	1880022e 	bgeu	r3,r2,801077c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 8010774:	e0bff617 	ldw	r2,-40(fp)
 8010778:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801077c:	e0bff817 	ldw	r2,-32(fp)
 8010780:	10c00e04 	addi	r3,r2,56
 8010784:	e0bffc17 	ldw	r2,-16(fp)
 8010788:	1885883a 	add	r2,r3,r2
 801078c:	e1bffe17 	ldw	r6,-8(fp)
 8010790:	100b883a 	mov	r5,r2
 8010794:	e13fff17 	ldw	r4,-4(fp)
 8010798:	80083cc0 	call	80083cc <memcpy>
      ptr   += n;
 801079c:	e0ffff17 	ldw	r3,-4(fp)
 80107a0:	e0bffe17 	ldw	r2,-8(fp)
 80107a4:	1885883a 	add	r2,r3,r2
 80107a8:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 80107ac:	e0fff617 	ldw	r3,-40(fp)
 80107b0:	e0bffe17 	ldw	r2,-8(fp)
 80107b4:	1885c83a 	sub	r2,r3,r2
 80107b8:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80107bc:	e0fffc17 	ldw	r3,-16(fp)
 80107c0:	e0bffe17 	ldw	r2,-8(fp)
 80107c4:	1885883a 	add	r2,r3,r2
 80107c8:	10c1ffcc 	andi	r3,r2,2047
 80107cc:	e0bff817 	ldw	r2,-32(fp)
 80107d0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 80107d4:	e0bff617 	ldw	r2,-40(fp)
 80107d8:	00bfcf16 	blt	zero,r2,8010718 <altera_avalon_jtag_uart_read+0x2c>
 80107dc:	00000106 	br	80107e4 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 80107e0:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 80107e4:	e0ffff17 	ldw	r3,-4(fp)
 80107e8:	e0bff717 	ldw	r2,-36(fp)
 80107ec:	1880141e 	bne	r3,r2,8010840 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 80107f0:	e0bff517 	ldw	r2,-44(fp)
 80107f4:	1090000c 	andi	r2,r2,16384
 80107f8:	1000131e 	bne	r2,zero,8010848 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 80107fc:	0001883a 	nop
 8010800:	e0bff817 	ldw	r2,-32(fp)
 8010804:	10800a17 	ldw	r2,40(r2)
 8010808:	e0fffd17 	ldw	r3,-12(fp)
 801080c:	1880051e 	bne	r3,r2,8010824 <altera_avalon_jtag_uart_read+0x138>
 8010810:	e0bff817 	ldw	r2,-32(fp)
 8010814:	10c00917 	ldw	r3,36(r2)
 8010818:	e0bff817 	ldw	r2,-32(fp)
 801081c:	10800117 	ldw	r2,4(r2)
 8010820:	18bff736 	bltu	r3,r2,8010800 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 8010824:	e0bff817 	ldw	r2,-32(fp)
 8010828:	10800a17 	ldw	r2,40(r2)
 801082c:	e0fffd17 	ldw	r3,-12(fp)
 8010830:	18800726 	beq	r3,r2,8010850 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 8010834:	e0bff617 	ldw	r2,-40(fp)
 8010838:	00bfb716 	blt	zero,r2,8010718 <altera_avalon_jtag_uart_read+0x2c>
 801083c:	00000506 	br	8010854 <altera_avalon_jtag_uart_read+0x168>
      break;
 8010840:	0001883a 	nop
 8010844:	00000306 	br	8010854 <altera_avalon_jtag_uart_read+0x168>
      break;
 8010848:	0001883a 	nop
 801084c:	00000106 	br	8010854 <altera_avalon_jtag_uart_read+0x168>
      break;
 8010850:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 8010854:	e0ffff17 	ldw	r3,-4(fp)
 8010858:	e0bff717 	ldw	r2,-36(fp)
 801085c:	18801826 	beq	r3,r2,80108c0 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
 8010860:	0005303a 	rdctl	r2,status
 8010864:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010868:	e0fff917 	ldw	r3,-28(fp)
 801086c:	00bfff84 	movi	r2,-2
 8010870:	1884703a 	and	r2,r3,r2
 8010874:	1001703a 	wrctl	status,r2
  return context;
 8010878:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801087c:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 8010880:	e0bff817 	ldw	r2,-32(fp)
 8010884:	10800817 	ldw	r2,32(r2)
 8010888:	10c00054 	ori	r3,r2,1
 801088c:	e0bff817 	ldw	r2,-32(fp)
 8010890:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010894:	e0bff817 	ldw	r2,-32(fp)
 8010898:	10800017 	ldw	r2,0(r2)
 801089c:	10800104 	addi	r2,r2,4
 80108a0:	1007883a 	mov	r3,r2
 80108a4:	e0bff817 	ldw	r2,-32(fp)
 80108a8:	10800817 	ldw	r2,32(r2)
 80108ac:	18800035 	stwio	r2,0(r3)
 80108b0:	e0bffb17 	ldw	r2,-20(fp)
 80108b4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 80108b8:	e0bffa17 	ldw	r2,-24(fp)
 80108bc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 80108c0:	e0ffff17 	ldw	r3,-4(fp)
 80108c4:	e0bff717 	ldw	r2,-36(fp)
 80108c8:	18800426 	beq	r3,r2,80108dc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 80108cc:	e0ffff17 	ldw	r3,-4(fp)
 80108d0:	e0bff717 	ldw	r2,-36(fp)
 80108d4:	1885c83a 	sub	r2,r3,r2
 80108d8:	00000606 	br	80108f4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 80108dc:	e0bff517 	ldw	r2,-44(fp)
 80108e0:	1090000c 	andi	r2,r2,16384
 80108e4:	10000226 	beq	r2,zero,80108f0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 80108e8:	00bffd44 	movi	r2,-11
 80108ec:	00000106 	br	80108f4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 80108f0:	00bffec4 	movi	r2,-5
}
 80108f4:	e037883a 	mov	sp,fp
 80108f8:	dfc00117 	ldw	ra,4(sp)
 80108fc:	df000017 	ldw	fp,0(sp)
 8010900:	dec00204 	addi	sp,sp,8
 8010904:	f800283a 	ret

08010908 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 8010908:	defff304 	addi	sp,sp,-52
 801090c:	dfc00c15 	stw	ra,48(sp)
 8010910:	df000b15 	stw	fp,44(sp)
 8010914:	df000b04 	addi	fp,sp,44
 8010918:	e13ff815 	stw	r4,-32(fp)
 801091c:	e17ff715 	stw	r5,-36(fp)
 8010920:	e1bff615 	stw	r6,-40(fp)
 8010924:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 8010928:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801092c:	e0bff717 	ldw	r2,-36(fp)
 8010930:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 8010934:	00003706 	br	8010a14 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 8010938:	e0bff817 	ldw	r2,-32(fp)
 801093c:	10800c17 	ldw	r2,48(r2)
 8010940:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 8010944:	e0bff817 	ldw	r2,-32(fp)
 8010948:	10800d17 	ldw	r2,52(r2)
 801094c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 8010950:	e0fffc17 	ldw	r3,-16(fp)
 8010954:	e0bfff17 	ldw	r2,-4(fp)
 8010958:	1880062e 	bgeu	r3,r2,8010974 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801095c:	e0ffff17 	ldw	r3,-4(fp)
 8010960:	e0bffc17 	ldw	r2,-16(fp)
 8010964:	1885c83a 	sub	r2,r3,r2
 8010968:	10bfffc4 	addi	r2,r2,-1
 801096c:	e0bffe15 	stw	r2,-8(fp)
 8010970:	00000b06 	br	80109a0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 8010974:	e0bfff17 	ldw	r2,-4(fp)
 8010978:	10000526 	beq	r2,zero,8010990 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801097c:	00c20004 	movi	r3,2048
 8010980:	e0bffc17 	ldw	r2,-16(fp)
 8010984:	1885c83a 	sub	r2,r3,r2
 8010988:	e0bffe15 	stw	r2,-8(fp)
 801098c:	00000406 	br	80109a0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 8010990:	00c1ffc4 	movi	r3,2047
 8010994:	e0bffc17 	ldw	r2,-16(fp)
 8010998:	1885c83a 	sub	r2,r3,r2
 801099c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 80109a0:	e0bffe17 	ldw	r2,-8(fp)
 80109a4:	10001e26 	beq	r2,zero,8010a20 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 80109a8:	e0fff617 	ldw	r3,-40(fp)
 80109ac:	e0bffe17 	ldw	r2,-8(fp)
 80109b0:	1880022e 	bgeu	r3,r2,80109bc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 80109b4:	e0bff617 	ldw	r2,-40(fp)
 80109b8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 80109bc:	e0bff817 	ldw	r2,-32(fp)
 80109c0:	10c20e04 	addi	r3,r2,2104
 80109c4:	e0bffc17 	ldw	r2,-16(fp)
 80109c8:	1885883a 	add	r2,r3,r2
 80109cc:	e1bffe17 	ldw	r6,-8(fp)
 80109d0:	e17ff717 	ldw	r5,-36(fp)
 80109d4:	1009883a 	mov	r4,r2
 80109d8:	80083cc0 	call	80083cc <memcpy>
      ptr   += n;
 80109dc:	e0fff717 	ldw	r3,-36(fp)
 80109e0:	e0bffe17 	ldw	r2,-8(fp)
 80109e4:	1885883a 	add	r2,r3,r2
 80109e8:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 80109ec:	e0fff617 	ldw	r3,-40(fp)
 80109f0:	e0bffe17 	ldw	r2,-8(fp)
 80109f4:	1885c83a 	sub	r2,r3,r2
 80109f8:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 80109fc:	e0fffc17 	ldw	r3,-16(fp)
 8010a00:	e0bffe17 	ldw	r2,-8(fp)
 8010a04:	1885883a 	add	r2,r3,r2
 8010a08:	10c1ffcc 	andi	r3,r2,2047
 8010a0c:	e0bff817 	ldw	r2,-32(fp)
 8010a10:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 8010a14:	e0bff617 	ldw	r2,-40(fp)
 8010a18:	00bfc716 	blt	zero,r2,8010938 <altera_avalon_jtag_uart_write+0x30>
 8010a1c:	00000106 	br	8010a24 <altera_avalon_jtag_uart_write+0x11c>
        break;
 8010a20:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 8010a24:	0005303a 	rdctl	r2,status
 8010a28:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010a2c:	e0fff917 	ldw	r3,-28(fp)
 8010a30:	00bfff84 	movi	r2,-2
 8010a34:	1884703a 	and	r2,r3,r2
 8010a38:	1001703a 	wrctl	status,r2
  return context;
 8010a3c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 8010a40:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 8010a44:	e0bff817 	ldw	r2,-32(fp)
 8010a48:	10800817 	ldw	r2,32(r2)
 8010a4c:	10c00094 	ori	r3,r2,2
 8010a50:	e0bff817 	ldw	r2,-32(fp)
 8010a54:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 8010a58:	e0bff817 	ldw	r2,-32(fp)
 8010a5c:	10800017 	ldw	r2,0(r2)
 8010a60:	10800104 	addi	r2,r2,4
 8010a64:	1007883a 	mov	r3,r2
 8010a68:	e0bff817 	ldw	r2,-32(fp)
 8010a6c:	10800817 	ldw	r2,32(r2)
 8010a70:	18800035 	stwio	r2,0(r3)
 8010a74:	e0bffb17 	ldw	r2,-20(fp)
 8010a78:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 8010a7c:	e0bffa17 	ldw	r2,-24(fp)
 8010a80:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 8010a84:	e0bff617 	ldw	r2,-40(fp)
 8010a88:	0080100e 	bge	zero,r2,8010acc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 8010a8c:	e0bff517 	ldw	r2,-44(fp)
 8010a90:	1090000c 	andi	r2,r2,16384
 8010a94:	1000101e 	bne	r2,zero,8010ad8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 8010a98:	0001883a 	nop
 8010a9c:	e0bff817 	ldw	r2,-32(fp)
 8010aa0:	10800d17 	ldw	r2,52(r2)
 8010aa4:	e0ffff17 	ldw	r3,-4(fp)
 8010aa8:	1880051e 	bne	r3,r2,8010ac0 <altera_avalon_jtag_uart_write+0x1b8>
 8010aac:	e0bff817 	ldw	r2,-32(fp)
 8010ab0:	10c00917 	ldw	r3,36(r2)
 8010ab4:	e0bff817 	ldw	r2,-32(fp)
 8010ab8:	10800117 	ldw	r2,4(r2)
 8010abc:	18bff736 	bltu	r3,r2,8010a9c <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 8010ac0:	e0bff817 	ldw	r2,-32(fp)
 8010ac4:	10800917 	ldw	r2,36(r2)
 8010ac8:	1000051e 	bne	r2,zero,8010ae0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 8010acc:	e0bff617 	ldw	r2,-40(fp)
 8010ad0:	00bfd016 	blt	zero,r2,8010a14 <altera_avalon_jtag_uart_write+0x10c>
 8010ad4:	00000306 	br	8010ae4 <altera_avalon_jtag_uart_write+0x1dc>
        break;
 8010ad8:	0001883a 	nop
 8010adc:	00000106 	br	8010ae4 <altera_avalon_jtag_uart_write+0x1dc>
         break;
 8010ae0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 8010ae4:	e0fff717 	ldw	r3,-36(fp)
 8010ae8:	e0bffd17 	ldw	r2,-12(fp)
 8010aec:	18800426 	beq	r3,r2,8010b00 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 8010af0:	e0fff717 	ldw	r3,-36(fp)
 8010af4:	e0bffd17 	ldw	r2,-12(fp)
 8010af8:	1885c83a 	sub	r2,r3,r2
 8010afc:	00000606 	br	8010b18 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 8010b00:	e0bff517 	ldw	r2,-44(fp)
 8010b04:	1090000c 	andi	r2,r2,16384
 8010b08:	10000226 	beq	r2,zero,8010b14 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 8010b0c:	00bffd44 	movi	r2,-11
 8010b10:	00000106 	br	8010b18 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 8010b14:	00bffec4 	movi	r2,-5
}
 8010b18:	e037883a 	mov	sp,fp
 8010b1c:	dfc00117 	ldw	ra,4(sp)
 8010b20:	df000017 	ldw	fp,0(sp)
 8010b24:	dec00204 	addi	sp,sp,8
 8010b28:	f800283a 	ret

08010b2c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 8010b2c:	defffa04 	addi	sp,sp,-24
 8010b30:	dfc00515 	stw	ra,20(sp)
 8010b34:	df000415 	stw	fp,16(sp)
 8010b38:	df000404 	addi	fp,sp,16
 8010b3c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 8010b40:	0007883a 	mov	r3,zero
 8010b44:	e0bffc17 	ldw	r2,-16(fp)
 8010b48:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 8010b4c:	e0bffc17 	ldw	r2,-16(fp)
 8010b50:	10800104 	addi	r2,r2,4
 8010b54:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 8010b58:	0005303a 	rdctl	r2,status
 8010b5c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010b60:	e0fffd17 	ldw	r3,-12(fp)
 8010b64:	00bfff84 	movi	r2,-2
 8010b68:	1884703a 	and	r2,r3,r2
 8010b6c:	1001703a 	wrctl	status,r2
  return context;
 8010b70:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 8010b74:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 8010b78:	800fd800 	call	800fd80 <alt_tick>
 8010b7c:	e0bfff17 	ldw	r2,-4(fp)
 8010b80:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 8010b84:	e0bffe17 	ldw	r2,-8(fp)
 8010b88:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 8010b8c:	0001883a 	nop
 8010b90:	e037883a 	mov	sp,fp
 8010b94:	dfc00117 	ldw	ra,4(sp)
 8010b98:	df000017 	ldw	fp,0(sp)
 8010b9c:	dec00204 	addi	sp,sp,8
 8010ba0:	f800283a 	ret

08010ba4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 8010ba4:	defff804 	addi	sp,sp,-32
 8010ba8:	dfc00715 	stw	ra,28(sp)
 8010bac:	df000615 	stw	fp,24(sp)
 8010bb0:	df000604 	addi	fp,sp,24
 8010bb4:	e13ffe15 	stw	r4,-8(fp)
 8010bb8:	e17ffd15 	stw	r5,-12(fp)
 8010bbc:	e1bffc15 	stw	r6,-16(fp)
 8010bc0:	e1fffb15 	stw	r7,-20(fp)
 8010bc4:	e0bffb17 	ldw	r2,-20(fp)
 8010bc8:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 8010bcc:	d0a72617 	ldw	r2,-25448(gp)
 8010bd0:	1000021e 	bne	r2,zero,8010bdc <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 8010bd4:	e0bfff17 	ldw	r2,-4(fp)
 8010bd8:	d0a72615 	stw	r2,-25448(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 8010bdc:	e0bffe17 	ldw	r2,-8(fp)
 8010be0:	10800104 	addi	r2,r2,4
 8010be4:	00c001c4 	movi	r3,7
 8010be8:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 8010bec:	d8000015 	stw	zero,0(sp)
 8010bf0:	e1fffe17 	ldw	r7,-8(fp)
 8010bf4:	01820074 	movhi	r6,2049
 8010bf8:	3182cb04 	addi	r6,r6,2860
 8010bfc:	e17ffc17 	ldw	r5,-16(fp)
 8010c00:	e13ffd17 	ldw	r4,-12(fp)
 8010c04:	80110840 	call	8011084 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 8010c08:	0001883a 	nop
 8010c0c:	e037883a 	mov	sp,fp
 8010c10:	dfc00117 	ldw	ra,4(sp)
 8010c14:	df000017 	ldw	fp,0(sp)
 8010c18:	dec00204 	addi	sp,sp,8
 8010c1c:	f800283a 	ret

08010c20 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 8010c20:	defff504 	addi	sp,sp,-44
 8010c24:	df000a15 	stw	fp,40(sp)
 8010c28:	df000a04 	addi	fp,sp,40
 8010c2c:	e13ff915 	stw	r4,-28(fp)
 8010c30:	e17ff815 	stw	r5,-32(fp)
 8010c34:	e1bff715 	stw	r6,-36(fp)
 8010c38:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 8010c3c:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 8010c40:	d0a72617 	ldw	r2,-25448(gp)
  
  if (alt_ticks_per_second ())
 8010c44:	10003c26 	beq	r2,zero,8010d38 <alt_alarm_start+0x118>
  {
    if (alarm)
 8010c48:	e0bff917 	ldw	r2,-28(fp)
 8010c4c:	10003826 	beq	r2,zero,8010d30 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 8010c50:	e0bff917 	ldw	r2,-28(fp)
 8010c54:	e0fff717 	ldw	r3,-36(fp)
 8010c58:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 8010c5c:	e0bff917 	ldw	r2,-28(fp)
 8010c60:	e0fff617 	ldw	r3,-40(fp)
 8010c64:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 8010c68:	0005303a 	rdctl	r2,status
 8010c6c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8010c70:	e0fffd17 	ldw	r3,-12(fp)
 8010c74:	00bfff84 	movi	r2,-2
 8010c78:	1884703a 	and	r2,r3,r2
 8010c7c:	1001703a 	wrctl	status,r2
  return context;
 8010c80:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 8010c84:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8010c88:	d0a72717 	ldw	r2,-25444(gp)
      
      current_nticks = alt_nticks();
 8010c8c:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 8010c90:	e0fff817 	ldw	r3,-32(fp)
 8010c94:	e0bfff17 	ldw	r2,-4(fp)
 8010c98:	1885883a 	add	r2,r3,r2
 8010c9c:	10c00044 	addi	r3,r2,1
 8010ca0:	e0bff917 	ldw	r2,-28(fp)
 8010ca4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 8010ca8:	e0bff917 	ldw	r2,-28(fp)
 8010cac:	10c00217 	ldw	r3,8(r2)
 8010cb0:	e0bfff17 	ldw	r2,-4(fp)
 8010cb4:	1880042e 	bgeu	r3,r2,8010cc8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 8010cb8:	e0bff917 	ldw	r2,-28(fp)
 8010cbc:	00c00044 	movi	r3,1
 8010cc0:	10c00405 	stb	r3,16(r2)
 8010cc4:	00000206 	br	8010cd0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 8010cc8:	e0bff917 	ldw	r2,-28(fp)
 8010ccc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 8010cd0:	e0bff917 	ldw	r2,-28(fp)
 8010cd4:	d0e00f04 	addi	r3,gp,-32708
 8010cd8:	e0fffb15 	stw	r3,-20(fp)
 8010cdc:	e0bffa15 	stw	r2,-24(fp)
  entry->previous = list;
 8010ce0:	e0bffa17 	ldw	r2,-24(fp)
 8010ce4:	e0fffb17 	ldw	r3,-20(fp)
 8010ce8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010cec:	e0bffb17 	ldw	r2,-20(fp)
 8010cf0:	10c00017 	ldw	r3,0(r2)
 8010cf4:	e0bffa17 	ldw	r2,-24(fp)
 8010cf8:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8010cfc:	e0bffb17 	ldw	r2,-20(fp)
 8010d00:	10800017 	ldw	r2,0(r2)
 8010d04:	e0fffa17 	ldw	r3,-24(fp)
 8010d08:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010d0c:	e0bffb17 	ldw	r2,-20(fp)
 8010d10:	e0fffa17 	ldw	r3,-24(fp)
 8010d14:	10c00015 	stw	r3,0(r2)
 8010d18:	e0bffe17 	ldw	r2,-8(fp)
 8010d1c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 8010d20:	e0bffc17 	ldw	r2,-16(fp)
 8010d24:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 8010d28:	0005883a 	mov	r2,zero
 8010d2c:	00000306 	br	8010d3c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 8010d30:	00bffa84 	movi	r2,-22
 8010d34:	00000106 	br	8010d3c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 8010d38:	00bfde84 	movi	r2,-134
  }
}
 8010d3c:	e037883a 	mov	sp,fp
 8010d40:	df000017 	ldw	fp,0(sp)
 8010d44:	dec00104 	addi	sp,sp,4
 8010d48:	f800283a 	ret

08010d4c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 8010d4c:	defffa04 	addi	sp,sp,-24
 8010d50:	dfc00515 	stw	ra,20(sp)
 8010d54:	df000415 	stw	fp,16(sp)
 8010d58:	df000404 	addi	fp,sp,16
 8010d5c:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 8010d60:	00800244 	movi	r2,9
 8010d64:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 8010d68:	014003f4 	movhi	r5,15
 8010d6c:	29509004 	addi	r5,r5,16960
 8010d70:	e13ffe17 	ldw	r4,-8(fp)
 8010d74:	80029d40 	call	80029d4 <__mulsi3>
 8010d78:	100b883a 	mov	r5,r2
 8010d7c:	0100bef4 	movhi	r4,763
 8010d80:	213c2004 	addi	r4,r4,-3968
 8010d84:	80029140 	call	8002914 <__udivsi3>
  big_loops = us / (INT_MAX/
 8010d88:	100b883a 	mov	r5,r2
 8010d8c:	01200034 	movhi	r4,32768
 8010d90:	213fffc4 	addi	r4,r4,-1
 8010d94:	80029140 	call	8002914 <__udivsi3>
 8010d98:	100b883a 	mov	r5,r2
 8010d9c:	e13ffc17 	ldw	r4,-16(fp)
 8010da0:	80029140 	call	8002914 <__udivsi3>
 8010da4:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 8010da8:	e0bffd17 	ldw	r2,-12(fp)
 8010dac:	10002a26 	beq	r2,zero,8010e58 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 8010db0:	e03fff15 	stw	zero,-4(fp)
 8010db4:	00001706 	br	8010e14 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 8010db8:	00a00034 	movhi	r2,32768
 8010dbc:	10bfffc4 	addi	r2,r2,-1
 8010dc0:	10bfffc4 	addi	r2,r2,-1
 8010dc4:	103ffe1e 	bne	r2,zero,8010dc0 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 8010dc8:	014003f4 	movhi	r5,15
 8010dcc:	29509004 	addi	r5,r5,16960
 8010dd0:	e13ffe17 	ldw	r4,-8(fp)
 8010dd4:	80029d40 	call	80029d4 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 8010dd8:	100b883a 	mov	r5,r2
 8010ddc:	0100bef4 	movhi	r4,763
 8010de0:	213c2004 	addi	r4,r4,-3968
 8010de4:	80029140 	call	8002914 <__udivsi3>
 8010de8:	100b883a 	mov	r5,r2
 8010dec:	01200034 	movhi	r4,32768
 8010df0:	213fffc4 	addi	r4,r4,-1
 8010df4:	80029140 	call	8002914 <__udivsi3>
 8010df8:	1007883a 	mov	r3,r2
 8010dfc:	e0bffc17 	ldw	r2,-16(fp)
 8010e00:	10c5c83a 	sub	r2,r2,r3
 8010e04:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 8010e08:	e0bfff17 	ldw	r2,-4(fp)
 8010e0c:	10800044 	addi	r2,r2,1
 8010e10:	e0bfff15 	stw	r2,-4(fp)
 8010e14:	e0ffff17 	ldw	r3,-4(fp)
 8010e18:	e0bffd17 	ldw	r2,-12(fp)
 8010e1c:	18bfe616 	blt	r3,r2,8010db8 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010e20:	014003f4 	movhi	r5,15
 8010e24:	29509004 	addi	r5,r5,16960
 8010e28:	e13ffe17 	ldw	r4,-8(fp)
 8010e2c:	80029d40 	call	80029d4 <__mulsi3>
 8010e30:	100b883a 	mov	r5,r2
 8010e34:	0100bef4 	movhi	r4,763
 8010e38:	213c2004 	addi	r4,r4,-3968
 8010e3c:	80029140 	call	8002914 <__udivsi3>
 8010e40:	e17ffc17 	ldw	r5,-16(fp)
 8010e44:	1009883a 	mov	r4,r2
 8010e48:	80029d40 	call	80029d4 <__mulsi3>
    __asm__ volatile (
 8010e4c:	10bfffc4 	addi	r2,r2,-1
 8010e50:	103ffe1e 	bne	r2,zero,8010e4c <alt_busy_sleep+0x100>
 8010e54:	00000d06 	br	8010e8c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 8010e58:	014003f4 	movhi	r5,15
 8010e5c:	29509004 	addi	r5,r5,16960
 8010e60:	e13ffe17 	ldw	r4,-8(fp)
 8010e64:	80029d40 	call	80029d4 <__mulsi3>
 8010e68:	100b883a 	mov	r5,r2
 8010e6c:	0100bef4 	movhi	r4,763
 8010e70:	213c2004 	addi	r4,r4,-3968
 8010e74:	80029140 	call	8002914 <__udivsi3>
 8010e78:	e17ffc17 	ldw	r5,-16(fp)
 8010e7c:	1009883a 	mov	r4,r2
 8010e80:	80029d40 	call	80029d4 <__mulsi3>
    __asm__ volatile (
 8010e84:	10bfffc4 	addi	r2,r2,-1
 8010e88:	00bffe16 	blt	zero,r2,8010e84 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 8010e8c:	0005883a 	mov	r2,zero
}
 8010e90:	e037883a 	mov	sp,fp
 8010e94:	dfc00117 	ldw	ra,4(sp)
 8010e98:	df000017 	ldw	fp,0(sp)
 8010e9c:	dec00204 	addi	sp,sp,8
 8010ea0:	f800283a 	ret

08010ea4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 8010ea4:	deffff04 	addi	sp,sp,-4
 8010ea8:	df000015 	stw	fp,0(sp)
 8010eac:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 8010eb0:	0001883a 	nop
 8010eb4:	e037883a 	mov	sp,fp
 8010eb8:	df000017 	ldw	fp,0(sp)
 8010ebc:	dec00104 	addi	sp,sp,4
 8010ec0:	f800283a 	ret

08010ec4 <alt_get_errno>:
{
 8010ec4:	defffe04 	addi	sp,sp,-8
 8010ec8:	dfc00115 	stw	ra,4(sp)
 8010ecc:	df000015 	stw	fp,0(sp)
 8010ed0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8010ed4:	d0a00d17 	ldw	r2,-32716(gp)
 8010ed8:	10000326 	beq	r2,zero,8010ee8 <alt_get_errno+0x24>
 8010edc:	d0a00d17 	ldw	r2,-32716(gp)
 8010ee0:	103ee83a 	callr	r2
 8010ee4:	00000106 	br	8010eec <alt_get_errno+0x28>
 8010ee8:	d0a72104 	addi	r2,gp,-25468
}
 8010eec:	e037883a 	mov	sp,fp
 8010ef0:	dfc00117 	ldw	ra,4(sp)
 8010ef4:	df000017 	ldw	fp,0(sp)
 8010ef8:	dec00204 	addi	sp,sp,8
 8010efc:	f800283a 	ret

08010f00 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 8010f00:	defffa04 	addi	sp,sp,-24
 8010f04:	dfc00515 	stw	ra,20(sp)
 8010f08:	df000415 	stw	fp,16(sp)
 8010f0c:	df000404 	addi	fp,sp,16
 8010f10:	e13ffd15 	stw	r4,-12(fp)
 8010f14:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 8010f18:	e0bffd17 	ldw	r2,-12(fp)
 8010f1c:	10000326 	beq	r2,zero,8010f2c <alt_dev_llist_insert+0x2c>
 8010f20:	e0bffd17 	ldw	r2,-12(fp)
 8010f24:	10800217 	ldw	r2,8(r2)
 8010f28:	1000061e 	bne	r2,zero,8010f44 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 8010f2c:	8010ec40 	call	8010ec4 <alt_get_errno>
 8010f30:	1007883a 	mov	r3,r2
 8010f34:	00800584 	movi	r2,22
 8010f38:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 8010f3c:	00bffa84 	movi	r2,-22
 8010f40:	00001306 	br	8010f90 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 8010f44:	e0bffd17 	ldw	r2,-12(fp)
 8010f48:	e0fffc17 	ldw	r3,-16(fp)
 8010f4c:	e0ffff15 	stw	r3,-4(fp)
 8010f50:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 8010f54:	e0bffe17 	ldw	r2,-8(fp)
 8010f58:	e0ffff17 	ldw	r3,-4(fp)
 8010f5c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 8010f60:	e0bfff17 	ldw	r2,-4(fp)
 8010f64:	10c00017 	ldw	r3,0(r2)
 8010f68:	e0bffe17 	ldw	r2,-8(fp)
 8010f6c:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 8010f70:	e0bfff17 	ldw	r2,-4(fp)
 8010f74:	10800017 	ldw	r2,0(r2)
 8010f78:	e0fffe17 	ldw	r3,-8(fp)
 8010f7c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 8010f80:	e0bfff17 	ldw	r2,-4(fp)
 8010f84:	e0fffe17 	ldw	r3,-8(fp)
 8010f88:	10c00015 	stw	r3,0(r2)

  return 0;  
 8010f8c:	0005883a 	mov	r2,zero
}
 8010f90:	e037883a 	mov	sp,fp
 8010f94:	dfc00117 	ldw	ra,4(sp)
 8010f98:	df000017 	ldw	fp,0(sp)
 8010f9c:	dec00204 	addi	sp,sp,8
 8010fa0:	f800283a 	ret

08010fa4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 8010fa4:	defffd04 	addi	sp,sp,-12
 8010fa8:	dfc00215 	stw	ra,8(sp)
 8010fac:	df000115 	stw	fp,4(sp)
 8010fb0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010fb4:	00820074 	movhi	r2,2049
 8010fb8:	10872604 	addi	r2,r2,7320
 8010fbc:	e0bfff15 	stw	r2,-4(fp)
 8010fc0:	00000606 	br	8010fdc <_do_ctors+0x38>
        (*ctor) (); 
 8010fc4:	e0bfff17 	ldw	r2,-4(fp)
 8010fc8:	10800017 	ldw	r2,0(r2)
 8010fcc:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 8010fd0:	e0bfff17 	ldw	r2,-4(fp)
 8010fd4:	10bfff04 	addi	r2,r2,-4
 8010fd8:	e0bfff15 	stw	r2,-4(fp)
 8010fdc:	e0ffff17 	ldw	r3,-4(fp)
 8010fe0:	00820074 	movhi	r2,2049
 8010fe4:	10872704 	addi	r2,r2,7324
 8010fe8:	18bff62e 	bgeu	r3,r2,8010fc4 <_do_ctors+0x20>
}
 8010fec:	0001883a 	nop
 8010ff0:	e037883a 	mov	sp,fp
 8010ff4:	dfc00117 	ldw	ra,4(sp)
 8010ff8:	df000017 	ldw	fp,0(sp)
 8010ffc:	dec00204 	addi	sp,sp,8
 8011000:	f800283a 	ret

08011004 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 8011004:	defffd04 	addi	sp,sp,-12
 8011008:	dfc00215 	stw	ra,8(sp)
 801100c:	df000115 	stw	fp,4(sp)
 8011010:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011014:	00820074 	movhi	r2,2049
 8011018:	10872604 	addi	r2,r2,7320
 801101c:	e0bfff15 	stw	r2,-4(fp)
 8011020:	00000606 	br	801103c <_do_dtors+0x38>
        (*dtor) (); 
 8011024:	e0bfff17 	ldw	r2,-4(fp)
 8011028:	10800017 	ldw	r2,0(r2)
 801102c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 8011030:	e0bfff17 	ldw	r2,-4(fp)
 8011034:	10bfff04 	addi	r2,r2,-4
 8011038:	e0bfff15 	stw	r2,-4(fp)
 801103c:	e0ffff17 	ldw	r3,-4(fp)
 8011040:	00820074 	movhi	r2,2049
 8011044:	10872704 	addi	r2,r2,7324
 8011048:	18bff62e 	bgeu	r3,r2,8011024 <_do_dtors+0x20>
}
 801104c:	0001883a 	nop
 8011050:	e037883a 	mov	sp,fp
 8011054:	dfc00117 	ldw	ra,4(sp)
 8011058:	df000017 	ldw	fp,0(sp)
 801105c:	dec00204 	addi	sp,sp,8
 8011060:	f800283a 	ret

08011064 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 8011064:	deffff04 	addi	sp,sp,-4
 8011068:	df000015 	stw	fp,0(sp)
 801106c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 8011070:	0001883a 	nop
 8011074:	e037883a 	mov	sp,fp
 8011078:	df000017 	ldw	fp,0(sp)
 801107c:	dec00104 	addi	sp,sp,4
 8011080:	f800283a 	ret

08011084 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011084:	defff904 	addi	sp,sp,-28
 8011088:	dfc00615 	stw	ra,24(sp)
 801108c:	df000515 	stw	fp,20(sp)
 8011090:	df000504 	addi	fp,sp,20
 8011094:	e13fff15 	stw	r4,-4(fp)
 8011098:	e17ffe15 	stw	r5,-8(fp)
 801109c:	e1bffd15 	stw	r6,-12(fp)
 80110a0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 80110a4:	e0800217 	ldw	r2,8(fp)
 80110a8:	d8800015 	stw	r2,0(sp)
 80110ac:	e1fffc17 	ldw	r7,-16(fp)
 80110b0:	e1bffd17 	ldw	r6,-12(fp)
 80110b4:	e17ffe17 	ldw	r5,-8(fp)
 80110b8:	e13fff17 	ldw	r4,-4(fp)
 80110bc:	80112340 	call	8011234 <alt_iic_isr_register>
}  
 80110c0:	e037883a 	mov	sp,fp
 80110c4:	dfc00117 	ldw	ra,4(sp)
 80110c8:	df000017 	ldw	fp,0(sp)
 80110cc:	dec00204 	addi	sp,sp,8
 80110d0:	f800283a 	ret

080110d4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 80110d4:	defff904 	addi	sp,sp,-28
 80110d8:	df000615 	stw	fp,24(sp)
 80110dc:	df000604 	addi	fp,sp,24
 80110e0:	e13ffb15 	stw	r4,-20(fp)
 80110e4:	e17ffa15 	stw	r5,-24(fp)
 80110e8:	e0bffa17 	ldw	r2,-24(fp)
 80110ec:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 80110f0:	0005303a 	rdctl	r2,status
 80110f4:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 80110f8:	e0fffe17 	ldw	r3,-8(fp)
 80110fc:	00bfff84 	movi	r2,-2
 8011100:	1884703a 	and	r2,r3,r2
 8011104:	1001703a 	wrctl	status,r2
  return context;
 8011108:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801110c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 8011110:	00c00044 	movi	r3,1
 8011114:	e0bfff17 	ldw	r2,-4(fp)
 8011118:	1884983a 	sll	r2,r3,r2
 801111c:	1007883a 	mov	r3,r2
 8011120:	d0a72817 	ldw	r2,-25440(gp)
 8011124:	1884b03a 	or	r2,r3,r2
 8011128:	d0a72815 	stw	r2,-25440(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801112c:	d0a72817 	ldw	r2,-25440(gp)
 8011130:	100170fa 	wrctl	ienable,r2
 8011134:	e0bffd17 	ldw	r2,-12(fp)
 8011138:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 801113c:	e0bffc17 	ldw	r2,-16(fp)
 8011140:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 8011144:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 8011148:	0001883a 	nop
}
 801114c:	e037883a 	mov	sp,fp
 8011150:	df000017 	ldw	fp,0(sp)
 8011154:	dec00104 	addi	sp,sp,4
 8011158:	f800283a 	ret

0801115c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801115c:	defff904 	addi	sp,sp,-28
 8011160:	df000615 	stw	fp,24(sp)
 8011164:	df000604 	addi	fp,sp,24
 8011168:	e13ffb15 	stw	r4,-20(fp)
 801116c:	e17ffa15 	stw	r5,-24(fp)
 8011170:	e0bffa17 	ldw	r2,-24(fp)
 8011174:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 8011178:	0005303a 	rdctl	r2,status
 801117c:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011180:	e0fffe17 	ldw	r3,-8(fp)
 8011184:	00bfff84 	movi	r2,-2
 8011188:	1884703a 	and	r2,r3,r2
 801118c:	1001703a 	wrctl	status,r2
  return context;
 8011190:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 8011194:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 8011198:	00c00044 	movi	r3,1
 801119c:	e0bfff17 	ldw	r2,-4(fp)
 80111a0:	1884983a 	sll	r2,r3,r2
 80111a4:	0084303a 	nor	r2,zero,r2
 80111a8:	1007883a 	mov	r3,r2
 80111ac:	d0a72817 	ldw	r2,-25440(gp)
 80111b0:	1884703a 	and	r2,r3,r2
 80111b4:	d0a72815 	stw	r2,-25440(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 80111b8:	d0a72817 	ldw	r2,-25440(gp)
 80111bc:	100170fa 	wrctl	ienable,r2
 80111c0:	e0bffd17 	ldw	r2,-12(fp)
 80111c4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 80111c8:	e0bffc17 	ldw	r2,-16(fp)
 80111cc:	1001703a 	wrctl	status,r2
  return 0;
 80111d0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 80111d4:	0001883a 	nop
}
 80111d8:	e037883a 	mov	sp,fp
 80111dc:	df000017 	ldw	fp,0(sp)
 80111e0:	dec00104 	addi	sp,sp,4
 80111e4:	f800283a 	ret

080111e8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 80111e8:	defffc04 	addi	sp,sp,-16
 80111ec:	df000315 	stw	fp,12(sp)
 80111f0:	df000304 	addi	fp,sp,12
 80111f4:	e13ffe15 	stw	r4,-8(fp)
 80111f8:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 80111fc:	000530fa 	rdctl	r2,ienable
 8011200:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 8011204:	00c00044 	movi	r3,1
 8011208:	e0bffd17 	ldw	r2,-12(fp)
 801120c:	1884983a 	sll	r2,r3,r2
 8011210:	1007883a 	mov	r3,r2
 8011214:	e0bfff17 	ldw	r2,-4(fp)
 8011218:	1884703a 	and	r2,r3,r2
 801121c:	1004c03a 	cmpne	r2,r2,zero
 8011220:	10803fcc 	andi	r2,r2,255
}
 8011224:	e037883a 	mov	sp,fp
 8011228:	df000017 	ldw	fp,0(sp)
 801122c:	dec00104 	addi	sp,sp,4
 8011230:	f800283a 	ret

08011234 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 8011234:	defff504 	addi	sp,sp,-44
 8011238:	dfc00a15 	stw	ra,40(sp)
 801123c:	df000915 	stw	fp,36(sp)
 8011240:	df000904 	addi	fp,sp,36
 8011244:	e13ffa15 	stw	r4,-24(fp)
 8011248:	e17ff915 	stw	r5,-28(fp)
 801124c:	e1bff815 	stw	r6,-32(fp)
 8011250:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 8011254:	00bffa84 	movi	r2,-22
 8011258:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801125c:	e0bff917 	ldw	r2,-28(fp)
 8011260:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 8011264:	e0bffe17 	ldw	r2,-8(fp)
 8011268:	10800808 	cmpgei	r2,r2,32
 801126c:	1000241e 	bne	r2,zero,8011300 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
 8011270:	0005303a 	rdctl	r2,status
 8011274:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 8011278:	e0fffc17 	ldw	r3,-16(fp)
 801127c:	00bfff84 	movi	r2,-2
 8011280:	1884703a 	and	r2,r3,r2
 8011284:	1001703a 	wrctl	status,r2
  return context;
 8011288:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801128c:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 8011290:	e0bffe17 	ldw	r2,-8(fp)
 8011294:	100890fa 	slli	r4,r2,3
 8011298:	e0fff817 	ldw	r3,-32(fp)
 801129c:	00820074 	movhi	r2,2049
 80112a0:	2085883a 	add	r2,r4,r2
 80112a4:	10d79715 	stw	r3,24156(r2)
    alt_irq[id].context = isr_context;
 80112a8:	e0bffe17 	ldw	r2,-8(fp)
 80112ac:	100890fa 	slli	r4,r2,3
 80112b0:	e0fff717 	ldw	r3,-36(fp)
 80112b4:	00820074 	movhi	r2,2049
 80112b8:	2085883a 	add	r2,r4,r2
 80112bc:	10d79815 	stw	r3,24160(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 80112c0:	e0bff817 	ldw	r2,-32(fp)
 80112c4:	10000526 	beq	r2,zero,80112dc <alt_iic_isr_register+0xa8>
 80112c8:	e0bffe17 	ldw	r2,-8(fp)
 80112cc:	100b883a 	mov	r5,r2
 80112d0:	e13ffa17 	ldw	r4,-24(fp)
 80112d4:	80110d40 	call	80110d4 <alt_ic_irq_enable>
 80112d8:	00000406 	br	80112ec <alt_iic_isr_register+0xb8>
 80112dc:	e0bffe17 	ldw	r2,-8(fp)
 80112e0:	100b883a 	mov	r5,r2
 80112e4:	e13ffa17 	ldw	r4,-24(fp)
 80112e8:	801115c0 	call	801115c <alt_ic_irq_disable>
 80112ec:	e0bfff15 	stw	r2,-4(fp)
 80112f0:	e0bffd17 	ldw	r2,-12(fp)
 80112f4:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 80112f8:	e0bffb17 	ldw	r2,-20(fp)
 80112fc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 8011300:	e0bfff17 	ldw	r2,-4(fp)
}
 8011304:	e037883a 	mov	sp,fp
 8011308:	dfc00117 	ldw	ra,4(sp)
 801130c:	df000017 	ldw	fp,0(sp)
 8011310:	dec00204 	addi	sp,sp,8
 8011314:	f800283a 	ret

08011318 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 8011318:	defff904 	addi	sp,sp,-28
 801131c:	dfc00615 	stw	ra,24(sp)
 8011320:	df000515 	stw	fp,20(sp)
 8011324:	df000504 	addi	fp,sp,20
 8011328:	e13ffe15 	stw	r4,-8(fp)
 801132c:	e17ffd15 	stw	r5,-12(fp)
 8011330:	e1bffc15 	stw	r6,-16(fp)
 8011334:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 8011338:	e1bffb17 	ldw	r6,-20(fp)
 801133c:	e17ffc17 	ldw	r5,-16(fp)
 8011340:	e13ffd17 	ldw	r4,-12(fp)
 8011344:	80115800 	call	8011580 <open>
 8011348:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 801134c:	e0bfff17 	ldw	r2,-4(fp)
 8011350:	10002016 	blt	r2,zero,80113d4 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 8011354:	e0ffff17 	ldw	r3,-4(fp)
 8011358:	1805883a 	mov	r2,r3
 801135c:	1085883a 	add	r2,r2,r2
 8011360:	10c5883a 	add	r2,r2,r3
 8011364:	100490ba 	slli	r2,r2,2
 8011368:	00c20074 	movhi	r3,2049
 801136c:	10c7883a 	add	r3,r2,r3
 8011370:	18cb8f17 	ldw	r3,11836(r3)
 8011374:	e0bffe17 	ldw	r2,-8(fp)
 8011378:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801137c:	e0ffff17 	ldw	r3,-4(fp)
 8011380:	1805883a 	mov	r2,r3
 8011384:	1085883a 	add	r2,r2,r2
 8011388:	10c5883a 	add	r2,r2,r3
 801138c:	100490ba 	slli	r2,r2,2
 8011390:	00c20074 	movhi	r3,2049
 8011394:	10c7883a 	add	r3,r2,r3
 8011398:	18cb9017 	ldw	r3,11840(r3)
 801139c:	e0bffe17 	ldw	r2,-8(fp)
 80113a0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 80113a4:	e0ffff17 	ldw	r3,-4(fp)
 80113a8:	1805883a 	mov	r2,r3
 80113ac:	1085883a 	add	r2,r2,r2
 80113b0:	10c5883a 	add	r2,r2,r3
 80113b4:	100490ba 	slli	r2,r2,2
 80113b8:	00c20074 	movhi	r3,2049
 80113bc:	10c7883a 	add	r3,r2,r3
 80113c0:	18cb9117 	ldw	r3,11844(r3)
 80113c4:	e0bffe17 	ldw	r2,-8(fp)
 80113c8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 80113cc:	e13fff17 	ldw	r4,-4(fp)
 80113d0:	800fbc40 	call	800fbc4 <alt_release_fd>
  }
} 
 80113d4:	0001883a 	nop
 80113d8:	e037883a 	mov	sp,fp
 80113dc:	dfc00117 	ldw	ra,4(sp)
 80113e0:	df000017 	ldw	fp,0(sp)
 80113e4:	dec00204 	addi	sp,sp,8
 80113e8:	f800283a 	ret

080113ec <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 80113ec:	defffb04 	addi	sp,sp,-20
 80113f0:	dfc00415 	stw	ra,16(sp)
 80113f4:	df000315 	stw	fp,12(sp)
 80113f8:	df000304 	addi	fp,sp,12
 80113fc:	e13fff15 	stw	r4,-4(fp)
 8011400:	e17ffe15 	stw	r5,-8(fp)
 8011404:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 8011408:	01c07fc4 	movi	r7,511
 801140c:	01800044 	movi	r6,1
 8011410:	e17fff17 	ldw	r5,-4(fp)
 8011414:	01020074 	movhi	r4,2049
 8011418:	210b9204 	addi	r4,r4,11848
 801141c:	80113180 	call	8011318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 8011420:	01c07fc4 	movi	r7,511
 8011424:	000d883a 	mov	r6,zero
 8011428:	e17ffe17 	ldw	r5,-8(fp)
 801142c:	01020074 	movhi	r4,2049
 8011430:	210b8f04 	addi	r4,r4,11836
 8011434:	80113180 	call	8011318 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 8011438:	01c07fc4 	movi	r7,511
 801143c:	01800044 	movi	r6,1
 8011440:	e17ffd17 	ldw	r5,-12(fp)
 8011444:	01020074 	movhi	r4,2049
 8011448:	210b9504 	addi	r4,r4,11860
 801144c:	80113180 	call	8011318 <alt_open_fd>
}  
 8011450:	0001883a 	nop
 8011454:	e037883a 	mov	sp,fp
 8011458:	dfc00117 	ldw	ra,4(sp)
 801145c:	df000017 	ldw	fp,0(sp)
 8011460:	dec00204 	addi	sp,sp,8
 8011464:	f800283a 	ret

08011468 <alt_get_errno>:
{
 8011468:	defffe04 	addi	sp,sp,-8
 801146c:	dfc00115 	stw	ra,4(sp)
 8011470:	df000015 	stw	fp,0(sp)
 8011474:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 8011478:	d0a00d17 	ldw	r2,-32716(gp)
 801147c:	10000326 	beq	r2,zero,801148c <alt_get_errno+0x24>
 8011480:	d0a00d17 	ldw	r2,-32716(gp)
 8011484:	103ee83a 	callr	r2
 8011488:	00000106 	br	8011490 <alt_get_errno+0x28>
 801148c:	d0a72104 	addi	r2,gp,-25468
}
 8011490:	e037883a 	mov	sp,fp
 8011494:	dfc00117 	ldw	ra,4(sp)
 8011498:	df000017 	ldw	fp,0(sp)
 801149c:	dec00204 	addi	sp,sp,8
 80114a0:	f800283a 	ret

080114a4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 80114a4:	defffd04 	addi	sp,sp,-12
 80114a8:	df000215 	stw	fp,8(sp)
 80114ac:	df000204 	addi	fp,sp,8
 80114b0:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 80114b4:	e0bffe17 	ldw	r2,-8(fp)
 80114b8:	10800217 	ldw	r2,8(r2)
 80114bc:	10d00034 	orhi	r3,r2,16384
 80114c0:	e0bffe17 	ldw	r2,-8(fp)
 80114c4:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 80114c8:	e03fff15 	stw	zero,-4(fp)
 80114cc:	00002306 	br	801155c <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 80114d0:	e0ffff17 	ldw	r3,-4(fp)
 80114d4:	1805883a 	mov	r2,r3
 80114d8:	1085883a 	add	r2,r2,r2
 80114dc:	10c5883a 	add	r2,r2,r3
 80114e0:	100490ba 	slli	r2,r2,2
 80114e4:	00c20074 	movhi	r3,2049
 80114e8:	10c7883a 	add	r3,r2,r3
 80114ec:	18cb8f17 	ldw	r3,11836(r3)
 80114f0:	e0bffe17 	ldw	r2,-8(fp)
 80114f4:	10800017 	ldw	r2,0(r2)
 80114f8:	1880151e 	bne	r3,r2,8011550 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 80114fc:	e0ffff17 	ldw	r3,-4(fp)
 8011500:	1805883a 	mov	r2,r3
 8011504:	1085883a 	add	r2,r2,r2
 8011508:	10c5883a 	add	r2,r2,r3
 801150c:	100490ba 	slli	r2,r2,2
 8011510:	00c20074 	movhi	r3,2049
 8011514:	10c7883a 	add	r3,r2,r3
 8011518:	188b9117 	ldw	r2,11844(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 801151c:	10000c0e 	bge	r2,zero,8011550 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 8011520:	e0ffff17 	ldw	r3,-4(fp)
 8011524:	1805883a 	mov	r2,r3
 8011528:	1085883a 	add	r2,r2,r2
 801152c:	10c5883a 	add	r2,r2,r3
 8011530:	100490ba 	slli	r2,r2,2
 8011534:	00c20074 	movhi	r3,2049
 8011538:	18cb8f04 	addi	r3,r3,11836
 801153c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 8011540:	e0fffe17 	ldw	r3,-8(fp)
 8011544:	18800226 	beq	r3,r2,8011550 <alt_file_locked+0xac>
    {
      return -EACCES;
 8011548:	00bffcc4 	movi	r2,-13
 801154c:	00000806 	br	8011570 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 8011550:	e0bfff17 	ldw	r2,-4(fp)
 8011554:	10800044 	addi	r2,r2,1
 8011558:	e0bfff15 	stw	r2,-4(fp)
 801155c:	d0a00c17 	ldw	r2,-32720(gp)
 8011560:	1007883a 	mov	r3,r2
 8011564:	e0bfff17 	ldw	r2,-4(fp)
 8011568:	18bfd92e 	bgeu	r3,r2,80114d0 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801156c:	0005883a 	mov	r2,zero
}
 8011570:	e037883a 	mov	sp,fp
 8011574:	df000017 	ldw	fp,0(sp)
 8011578:	dec00104 	addi	sp,sp,4
 801157c:	f800283a 	ret

08011580 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 8011580:	defff604 	addi	sp,sp,-40
 8011584:	dfc00915 	stw	ra,36(sp)
 8011588:	df000815 	stw	fp,32(sp)
 801158c:	df000804 	addi	fp,sp,32
 8011590:	e13ffa15 	stw	r4,-24(fp)
 8011594:	e17ff915 	stw	r5,-28(fp)
 8011598:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801159c:	00bfffc4 	movi	r2,-1
 80115a0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 80115a4:	00bffb44 	movi	r2,-19
 80115a8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 80115ac:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 80115b0:	d1600a04 	addi	r5,gp,-32728
 80115b4:	e13ffa17 	ldw	r4,-24(fp)
 80115b8:	80117040 	call	8011704 <alt_find_dev>
 80115bc:	e0bfff15 	stw	r2,-4(fp)
 80115c0:	e0bfff17 	ldw	r2,-4(fp)
 80115c4:	1000051e 	bne	r2,zero,80115dc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 80115c8:	e13ffa17 	ldw	r4,-24(fp)
 80115cc:	80117940 	call	8011794 <alt_find_file>
 80115d0:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 80115d4:	00800044 	movi	r2,1
 80115d8:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 80115dc:	e0bfff17 	ldw	r2,-4(fp)
 80115e0:	10002c26 	beq	r2,zero,8011694 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 80115e4:	e13fff17 	ldw	r4,-4(fp)
 80115e8:	801189c0 	call	801189c <alt_get_fd>
 80115ec:	e0bffe15 	stw	r2,-8(fp)
 80115f0:	e0bffe17 	ldw	r2,-8(fp)
 80115f4:	1000030e 	bge	r2,zero,8011604 <open+0x84>
    {
      status = index;
 80115f8:	e0bffe17 	ldw	r2,-8(fp)
 80115fc:	e0bffd15 	stw	r2,-12(fp)
 8011600:	00002606 	br	801169c <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 8011604:	e0fffe17 	ldw	r3,-8(fp)
 8011608:	1805883a 	mov	r2,r3
 801160c:	1085883a 	add	r2,r2,r2
 8011610:	10c5883a 	add	r2,r2,r3
 8011614:	100490ba 	slli	r2,r2,2
 8011618:	00c20074 	movhi	r3,2049
 801161c:	18cb8f04 	addi	r3,r3,11836
 8011620:	10c5883a 	add	r2,r2,r3
 8011624:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 8011628:	e0fff917 	ldw	r3,-28(fp)
 801162c:	00900034 	movhi	r2,16384
 8011630:	10bfffc4 	addi	r2,r2,-1
 8011634:	1886703a 	and	r3,r3,r2
 8011638:	e0bffb17 	ldw	r2,-20(fp)
 801163c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 8011640:	e0bffc17 	ldw	r2,-16(fp)
 8011644:	1000051e 	bne	r2,zero,801165c <open+0xdc>
 8011648:	e13ffb17 	ldw	r4,-20(fp)
 801164c:	80114a40 	call	80114a4 <alt_file_locked>
 8011650:	e0bffd15 	stw	r2,-12(fp)
 8011654:	e0bffd17 	ldw	r2,-12(fp)
 8011658:	10001016 	blt	r2,zero,801169c <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801165c:	e0bfff17 	ldw	r2,-4(fp)
 8011660:	10800317 	ldw	r2,12(r2)
 8011664:	10000826 	beq	r2,zero,8011688 <open+0x108>
 8011668:	e0bfff17 	ldw	r2,-4(fp)
 801166c:	10800317 	ldw	r2,12(r2)
 8011670:	e1fff817 	ldw	r7,-32(fp)
 8011674:	e1bff917 	ldw	r6,-28(fp)
 8011678:	e17ffa17 	ldw	r5,-24(fp)
 801167c:	e13ffb17 	ldw	r4,-20(fp)
 8011680:	103ee83a 	callr	r2
 8011684:	00000106 	br	801168c <open+0x10c>
 8011688:	0005883a 	mov	r2,zero
 801168c:	e0bffd15 	stw	r2,-12(fp)
 8011690:	00000206 	br	801169c <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 8011694:	00bffb44 	movi	r2,-19
 8011698:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801169c:	e0bffd17 	ldw	r2,-12(fp)
 80116a0:	1000090e 	bge	r2,zero,80116c8 <open+0x148>
  {
    alt_release_fd (index);  
 80116a4:	e13ffe17 	ldw	r4,-8(fp)
 80116a8:	800fbc40 	call	800fbc4 <alt_release_fd>
    ALT_ERRNO = -status;
 80116ac:	80114680 	call	8011468 <alt_get_errno>
 80116b0:	1007883a 	mov	r3,r2
 80116b4:	e0bffd17 	ldw	r2,-12(fp)
 80116b8:	0085c83a 	sub	r2,zero,r2
 80116bc:	18800015 	stw	r2,0(r3)
    return -1;
 80116c0:	00bfffc4 	movi	r2,-1
 80116c4:	00000106 	br	80116cc <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 80116c8:	e0bffe17 	ldw	r2,-8(fp)
}
 80116cc:	e037883a 	mov	sp,fp
 80116d0:	dfc00117 	ldw	ra,4(sp)
 80116d4:	df000017 	ldw	fp,0(sp)
 80116d8:	dec00204 	addi	sp,sp,8
 80116dc:	f800283a 	ret

080116e0 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 80116e0:	deffff04 	addi	sp,sp,-4
 80116e4:	df000015 	stw	fp,0(sp)
 80116e8:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 80116ec:	000170fa 	wrctl	ienable,zero
}
 80116f0:	0001883a 	nop
 80116f4:	e037883a 	mov	sp,fp
 80116f8:	df000017 	ldw	fp,0(sp)
 80116fc:	dec00104 	addi	sp,sp,4
 8011700:	f800283a 	ret

08011704 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 8011704:	defffa04 	addi	sp,sp,-24
 8011708:	dfc00515 	stw	ra,20(sp)
 801170c:	df000415 	stw	fp,16(sp)
 8011710:	df000404 	addi	fp,sp,16
 8011714:	e13ffd15 	stw	r4,-12(fp)
 8011718:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801171c:	e0bffc17 	ldw	r2,-16(fp)
 8011720:	10800017 	ldw	r2,0(r2)
 8011724:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 8011728:	e13ffd17 	ldw	r4,-12(fp)
 801172c:	8002b600 	call	8002b60 <strlen>
 8011730:	10800044 	addi	r2,r2,1
 8011734:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 8011738:	00000d06 	br	8011770 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801173c:	e0bfff17 	ldw	r2,-4(fp)
 8011740:	10800217 	ldw	r2,8(r2)
 8011744:	e0fffe17 	ldw	r3,-8(fp)
 8011748:	180d883a 	mov	r6,r3
 801174c:	e17ffd17 	ldw	r5,-12(fp)
 8011750:	1009883a 	mov	r4,r2
 8011754:	8011a340 	call	8011a34 <memcmp>
 8011758:	1000021e 	bne	r2,zero,8011764 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801175c:	e0bfff17 	ldw	r2,-4(fp)
 8011760:	00000706 	br	8011780 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 8011764:	e0bfff17 	ldw	r2,-4(fp)
 8011768:	10800017 	ldw	r2,0(r2)
 801176c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 8011770:	e0ffff17 	ldw	r3,-4(fp)
 8011774:	e0bffc17 	ldw	r2,-16(fp)
 8011778:	18bff01e 	bne	r3,r2,801173c <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 801177c:	0005883a 	mov	r2,zero
}
 8011780:	e037883a 	mov	sp,fp
 8011784:	dfc00117 	ldw	ra,4(sp)
 8011788:	df000017 	ldw	fp,0(sp)
 801178c:	dec00204 	addi	sp,sp,8
 8011790:	f800283a 	ret

08011794 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 8011794:	defffb04 	addi	sp,sp,-20
 8011798:	dfc00415 	stw	ra,16(sp)
 801179c:	df000315 	stw	fp,12(sp)
 80117a0:	df000304 	addi	fp,sp,12
 80117a4:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 80117a8:	d0a00817 	ldw	r2,-32736(gp)
 80117ac:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 80117b0:	00003106 	br	8011878 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 80117b4:	e0bfff17 	ldw	r2,-4(fp)
 80117b8:	10800217 	ldw	r2,8(r2)
 80117bc:	1009883a 	mov	r4,r2
 80117c0:	8002b600 	call	8002b60 <strlen>
 80117c4:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 80117c8:	e0bfff17 	ldw	r2,-4(fp)
 80117cc:	10c00217 	ldw	r3,8(r2)
 80117d0:	e0bffe17 	ldw	r2,-8(fp)
 80117d4:	10bfffc4 	addi	r2,r2,-1
 80117d8:	1885883a 	add	r2,r3,r2
 80117dc:	10800003 	ldbu	r2,0(r2)
 80117e0:	10803fcc 	andi	r2,r2,255
 80117e4:	1080201c 	xori	r2,r2,128
 80117e8:	10bfe004 	addi	r2,r2,-128
 80117ec:	10800bd8 	cmpnei	r2,r2,47
 80117f0:	1000031e 	bne	r2,zero,8011800 <alt_find_file+0x6c>
    {
      len -= 1;
 80117f4:	e0bffe17 	ldw	r2,-8(fp)
 80117f8:	10bfffc4 	addi	r2,r2,-1
 80117fc:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011800:	e0bffe17 	ldw	r2,-8(fp)
 8011804:	e0fffd17 	ldw	r3,-12(fp)
 8011808:	1885883a 	add	r2,r3,r2
 801180c:	10800003 	ldbu	r2,0(r2)
 8011810:	10803fcc 	andi	r2,r2,255
 8011814:	1080201c 	xori	r2,r2,128
 8011818:	10bfe004 	addi	r2,r2,-128
 801181c:	10800be0 	cmpeqi	r2,r2,47
 8011820:	1000081e 	bne	r2,zero,8011844 <alt_find_file+0xb0>
 8011824:	e0bffe17 	ldw	r2,-8(fp)
 8011828:	e0fffd17 	ldw	r3,-12(fp)
 801182c:	1885883a 	add	r2,r3,r2
 8011830:	10800003 	ldbu	r2,0(r2)
 8011834:	10803fcc 	andi	r2,r2,255
 8011838:	1080201c 	xori	r2,r2,128
 801183c:	10bfe004 	addi	r2,r2,-128
 8011840:	10000a1e 	bne	r2,zero,801186c <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 8011844:	e0bfff17 	ldw	r2,-4(fp)
 8011848:	10800217 	ldw	r2,8(r2)
 801184c:	e0fffe17 	ldw	r3,-8(fp)
 8011850:	180d883a 	mov	r6,r3
 8011854:	e17ffd17 	ldw	r5,-12(fp)
 8011858:	1009883a 	mov	r4,r2
 801185c:	8011a340 	call	8011a34 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 8011860:	1000021e 	bne	r2,zero,801186c <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 8011864:	e0bfff17 	ldw	r2,-4(fp)
 8011868:	00000706 	br	8011888 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 801186c:	e0bfff17 	ldw	r2,-4(fp)
 8011870:	10800017 	ldw	r2,0(r2)
 8011874:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 8011878:	e0ffff17 	ldw	r3,-4(fp)
 801187c:	d0a00804 	addi	r2,gp,-32736
 8011880:	18bfcc1e 	bne	r3,r2,80117b4 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 8011884:	0005883a 	mov	r2,zero
}
 8011888:	e037883a 	mov	sp,fp
 801188c:	dfc00117 	ldw	ra,4(sp)
 8011890:	df000017 	ldw	fp,0(sp)
 8011894:	dec00204 	addi	sp,sp,8
 8011898:	f800283a 	ret

0801189c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801189c:	defffc04 	addi	sp,sp,-16
 80118a0:	df000315 	stw	fp,12(sp)
 80118a4:	df000304 	addi	fp,sp,12
 80118a8:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 80118ac:	00bffa04 	movi	r2,-24
 80118b0:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 80118b4:	e03fff15 	stw	zero,-4(fp)
 80118b8:	00001d06 	br	8011930 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 80118bc:	e0ffff17 	ldw	r3,-4(fp)
 80118c0:	1805883a 	mov	r2,r3
 80118c4:	1085883a 	add	r2,r2,r2
 80118c8:	10c5883a 	add	r2,r2,r3
 80118cc:	100490ba 	slli	r2,r2,2
 80118d0:	00c20074 	movhi	r3,2049
 80118d4:	10c7883a 	add	r3,r2,r3
 80118d8:	188b8f17 	ldw	r2,11836(r3)
 80118dc:	1000111e 	bne	r2,zero,8011924 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 80118e0:	e0ffff17 	ldw	r3,-4(fp)
 80118e4:	1805883a 	mov	r2,r3
 80118e8:	1085883a 	add	r2,r2,r2
 80118ec:	10c5883a 	add	r2,r2,r3
 80118f0:	100490ba 	slli	r2,r2,2
 80118f4:	e13ffd17 	ldw	r4,-12(fp)
 80118f8:	00c20074 	movhi	r3,2049
 80118fc:	10c7883a 	add	r3,r2,r3
 8011900:	190b8f15 	stw	r4,11836(r3)
      if (i > alt_max_fd)
 8011904:	d0e00c17 	ldw	r3,-32720(gp)
 8011908:	e0bfff17 	ldw	r2,-4(fp)
 801190c:	1880020e 	bge	r3,r2,8011918 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 8011910:	e0bfff17 	ldw	r2,-4(fp)
 8011914:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 8011918:	e0bfff17 	ldw	r2,-4(fp)
 801191c:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 8011920:	00000706 	br	8011940 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 8011924:	e0bfff17 	ldw	r2,-4(fp)
 8011928:	10800044 	addi	r2,r2,1
 801192c:	e0bfff15 	stw	r2,-4(fp)
 8011930:	e0bfff17 	ldw	r2,-4(fp)
 8011934:	10800810 	cmplti	r2,r2,32
 8011938:	103fe01e 	bne	r2,zero,80118bc <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 801193c:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 8011940:	e0bffe17 	ldw	r2,-8(fp)
}
 8011944:	e037883a 	mov	sp,fp
 8011948:	df000017 	ldw	fp,0(sp)
 801194c:	dec00104 	addi	sp,sp,4
 8011950:	f800283a 	ret

08011954 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 8011954:	defffe04 	addi	sp,sp,-8
 8011958:	df000115 	stw	fp,4(sp)
 801195c:	df000104 	addi	fp,sp,4
 8011960:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 8011964:	e0bfff17 	ldw	r2,-4(fp)
 8011968:	10bffe84 	addi	r2,r2,-6
 801196c:	10c00428 	cmpgeui	r3,r2,16
 8011970:	1800191e 	bne	r3,zero,80119d8 <alt_exception_cause_generated_bad_addr+0x84>
 8011974:	100690ba 	slli	r3,r2,2
 8011978:	00820074 	movhi	r2,2049
 801197c:	1885883a 	add	r2,r3,r2
 8011980:	10866217 	ldw	r2,6536(r2)
 8011984:	1000683a 	jmp	r2
 8011988:	080119c8 	cmpgei	zero,at,1127
 801198c:	080119c8 	cmpgei	zero,at,1127
 8011990:	080119d8 	cmpnei	zero,at,1127
 8011994:	080119d8 	cmpnei	zero,at,1127
 8011998:	080119d8 	cmpnei	zero,at,1127
 801199c:	080119c8 	cmpgei	zero,at,1127
 80119a0:	080119d0 	cmplti	zero,at,1127
 80119a4:	080119d8 	cmpnei	zero,at,1127
 80119a8:	080119c8 	cmpgei	zero,at,1127
 80119ac:	080119c8 	cmpgei	zero,at,1127
 80119b0:	080119d8 	cmpnei	zero,at,1127
 80119b4:	080119c8 	cmpgei	zero,at,1127
 80119b8:	080119d0 	cmplti	zero,at,1127
 80119bc:	080119d8 	cmpnei	zero,at,1127
 80119c0:	080119d8 	cmpnei	zero,at,1127
 80119c4:	080119c8 	cmpgei	zero,at,1127
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 80119c8:	00800044 	movi	r2,1
 80119cc:	00000306 	br	80119dc <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 80119d0:	0005883a 	mov	r2,zero
 80119d4:	00000106 	br	80119dc <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 80119d8:	0005883a 	mov	r2,zero
  }
}
 80119dc:	e037883a 	mov	sp,fp
 80119e0:	df000017 	ldw	fp,0(sp)
 80119e4:	dec00104 	addi	sp,sp,4
 80119e8:	f800283a 	ret

080119ec <atexit>:
 80119ec:	200b883a 	mov	r5,r4
 80119f0:	000f883a 	mov	r7,zero
 80119f4:	000d883a 	mov	r6,zero
 80119f8:	0009883a 	mov	r4,zero
 80119fc:	8011ac01 	jmpi	8011ac0 <__register_exitproc>

08011a00 <exit>:
 8011a00:	defffe04 	addi	sp,sp,-8
 8011a04:	000b883a 	mov	r5,zero
 8011a08:	dc000015 	stw	r16,0(sp)
 8011a0c:	dfc00115 	stw	ra,4(sp)
 8011a10:	2021883a 	mov	r16,r4
 8011a14:	8011b500 	call	8011b50 <__call_exitprocs>
 8011a18:	00820074 	movhi	r2,2049
 8011a1c:	11100b17 	ldw	r4,16428(r2)
 8011a20:	20800f17 	ldw	r2,60(r4)
 8011a24:	10000126 	beq	r2,zero,8011a2c <exit+0x2c>
 8011a28:	103ee83a 	callr	r2
 8011a2c:	8009883a 	mov	r4,r16
 8011a30:	8011c680 	call	8011c68 <_exit>

08011a34 <memcmp>:
 8011a34:	30800130 	cmpltui	r2,r6,4
 8011a38:	10000b1e 	bne	r2,zero,8011a68 <memcmp+0x34>
 8011a3c:	2144b03a 	or	r2,r4,r5
 8011a40:	108000cc 	andi	r2,r2,3
 8011a44:	10001a1e 	bne	r2,zero,8011ab0 <memcmp+0x7c>
 8011a48:	20c00017 	ldw	r3,0(r4)
 8011a4c:	28800017 	ldw	r2,0(r5)
 8011a50:	1880171e 	bne	r3,r2,8011ab0 <memcmp+0x7c>
 8011a54:	31bfff04 	addi	r6,r6,-4
 8011a58:	30800128 	cmpgeui	r2,r6,4
 8011a5c:	21000104 	addi	r4,r4,4
 8011a60:	29400104 	addi	r5,r5,4
 8011a64:	103ff81e 	bne	r2,zero,8011a48 <memcmp+0x14>
 8011a68:	30ffffc4 	addi	r3,r6,-1
 8011a6c:	30000e26 	beq	r6,zero,8011aa8 <memcmp+0x74>
 8011a70:	29800003 	ldbu	r6,0(r5)
 8011a74:	20800003 	ldbu	r2,0(r4)
 8011a78:	30800f1e 	bne	r6,r2,8011ab8 <memcmp+0x84>
 8011a7c:	18800044 	addi	r2,r3,1
 8011a80:	20c00044 	addi	r3,r4,1
 8011a84:	2089883a 	add	r4,r4,r2
 8011a88:	00000506 	br	8011aa0 <memcmp+0x6c>
 8011a8c:	18800003 	ldbu	r2,0(r3)
 8011a90:	29800003 	ldbu	r6,0(r5)
 8011a94:	18c00044 	addi	r3,r3,1
 8011a98:	10803fcc 	andi	r2,r2,255
 8011a9c:	1180061e 	bne	r2,r6,8011ab8 <memcmp+0x84>
 8011aa0:	29400044 	addi	r5,r5,1
 8011aa4:	193ff91e 	bne	r3,r4,8011a8c <memcmp+0x58>
 8011aa8:	0005883a 	mov	r2,zero
 8011aac:	f800283a 	ret
 8011ab0:	30ffffc4 	addi	r3,r6,-1
 8011ab4:	003fee06 	br	8011a70 <memcmp+0x3c>
 8011ab8:	1185c83a 	sub	r2,r2,r6
 8011abc:	f800283a 	ret

08011ac0 <__register_exitproc>:
 8011ac0:	00820074 	movhi	r2,2049
 8011ac4:	10d00b17 	ldw	r3,16428(r2)
 8011ac8:	18805217 	ldw	r2,328(r3)
 8011acc:	10001726 	beq	r2,zero,8011b2c <__register_exitproc+0x6c>
 8011ad0:	10c00117 	ldw	r3,4(r2)
 8011ad4:	1a000808 	cmpgei	r8,r3,32
 8011ad8:	40001b1e 	bne	r8,zero,8011b48 <__register_exitproc+0x88>
 8011adc:	20000b26 	beq	r4,zero,8011b0c <__register_exitproc+0x4c>
 8011ae0:	181090ba 	slli	r8,r3,2
 8011ae4:	02400044 	movi	r9,1
 8011ae8:	48d2983a 	sll	r9,r9,r3
 8011aec:	1211883a 	add	r8,r2,r8
 8011af0:	41802215 	stw	r6,136(r8)
 8011af4:	11806217 	ldw	r6,392(r2)
 8011af8:	21000098 	cmpnei	r4,r4,2
 8011afc:	324cb03a 	or	r6,r6,r9
 8011b00:	11806215 	stw	r6,392(r2)
 8011b04:	41c04215 	stw	r7,264(r8)
 8011b08:	20000b26 	beq	r4,zero,8011b38 <__register_exitproc+0x78>
 8011b0c:	19000084 	addi	r4,r3,2
 8011b10:	200890ba 	slli	r4,r4,2
 8011b14:	18c00044 	addi	r3,r3,1
 8011b18:	10c00115 	stw	r3,4(r2)
 8011b1c:	1105883a 	add	r2,r2,r4
 8011b20:	11400015 	stw	r5,0(r2)
 8011b24:	0005883a 	mov	r2,zero
 8011b28:	f800283a 	ret
 8011b2c:	18805304 	addi	r2,r3,332
 8011b30:	18805215 	stw	r2,328(r3)
 8011b34:	003fe606 	br	8011ad0 <__register_exitproc+0x10>
 8011b38:	11006317 	ldw	r4,396(r2)
 8011b3c:	2252b03a 	or	r9,r4,r9
 8011b40:	12406315 	stw	r9,396(r2)
 8011b44:	003ff106 	br	8011b0c <__register_exitproc+0x4c>
 8011b48:	00bfffc4 	movi	r2,-1
 8011b4c:	f800283a 	ret

08011b50 <__call_exitprocs>:
 8011b50:	defff704 	addi	sp,sp,-36
 8011b54:	00820074 	movhi	r2,2049
 8011b58:	ddc00715 	stw	r23,28(sp)
 8011b5c:	15d00b17 	ldw	r23,16428(r2)
 8011b60:	dd400515 	stw	r21,20(sp)
 8011b64:	dd000415 	stw	r20,16(sp)
 8011b68:	dcc00315 	stw	r19,12(sp)
 8011b6c:	dfc00815 	stw	ra,32(sp)
 8011b70:	dd800615 	stw	r22,24(sp)
 8011b74:	dc800215 	stw	r18,8(sp)
 8011b78:	dc400115 	stw	r17,4(sp)
 8011b7c:	dc000015 	stw	r16,0(sp)
 8011b80:	2029883a 	mov	r20,r4
 8011b84:	282b883a 	mov	r21,r5
 8011b88:	04c00044 	movi	r19,1
 8011b8c:	bc805217 	ldw	r18,328(r23)
 8011b90:	90000d26 	beq	r18,zero,8011bc8 <__call_exitprocs+0x78>
 8011b94:	94000117 	ldw	r16,4(r18)
 8011b98:	847fffc4 	addi	r17,r16,-1
 8011b9c:	88000a16 	blt	r17,zero,8011bc8 <__call_exitprocs+0x78>
 8011ba0:	84000044 	addi	r16,r16,1
 8011ba4:	802090ba 	slli	r16,r16,2
 8011ba8:	9421883a 	add	r16,r18,r16
 8011bac:	a8001126 	beq	r21,zero,8011bf4 <__call_exitprocs+0xa4>
 8011bb0:	80804017 	ldw	r2,256(r16)
 8011bb4:	15400f26 	beq	r2,r21,8011bf4 <__call_exitprocs+0xa4>
 8011bb8:	8c7fffc4 	addi	r17,r17,-1
 8011bbc:	88bfffd8 	cmpnei	r2,r17,-1
 8011bc0:	843fff04 	addi	r16,r16,-4
 8011bc4:	103ff91e 	bne	r2,zero,8011bac <__call_exitprocs+0x5c>
 8011bc8:	dfc00817 	ldw	ra,32(sp)
 8011bcc:	ddc00717 	ldw	r23,28(sp)
 8011bd0:	dd800617 	ldw	r22,24(sp)
 8011bd4:	dd400517 	ldw	r21,20(sp)
 8011bd8:	dd000417 	ldw	r20,16(sp)
 8011bdc:	dcc00317 	ldw	r19,12(sp)
 8011be0:	dc800217 	ldw	r18,8(sp)
 8011be4:	dc400117 	ldw	r17,4(sp)
 8011be8:	dc000017 	ldw	r16,0(sp)
 8011bec:	dec00904 	addi	sp,sp,36
 8011bf0:	f800283a 	ret
 8011bf4:	90800117 	ldw	r2,4(r18)
 8011bf8:	81800017 	ldw	r6,0(r16)
 8011bfc:	10bfffc4 	addi	r2,r2,-1
 8011c00:	14401526 	beq	r2,r17,8011c58 <__call_exitprocs+0x108>
 8011c04:	80000015 	stw	zero,0(r16)
 8011c08:	303feb26 	beq	r6,zero,8011bb8 <__call_exitprocs+0x68>
 8011c0c:	9c46983a 	sll	r3,r19,r17
 8011c10:	90806217 	ldw	r2,392(r18)
 8011c14:	95800117 	ldw	r22,4(r18)
 8011c18:	1884703a 	and	r2,r3,r2
 8011c1c:	1000061e 	bne	r2,zero,8011c38 <__call_exitprocs+0xe8>
 8011c20:	303ee83a 	callr	r6
 8011c24:	90800117 	ldw	r2,4(r18)
 8011c28:	15bfd81e 	bne	r2,r22,8011b8c <__call_exitprocs+0x3c>
 8011c2c:	b8805217 	ldw	r2,328(r23)
 8011c30:	14bfe126 	beq	r2,r18,8011bb8 <__call_exitprocs+0x68>
 8011c34:	003fd506 	br	8011b8c <__call_exitprocs+0x3c>
 8011c38:	90806317 	ldw	r2,396(r18)
 8011c3c:	81002017 	ldw	r4,128(r16)
 8011c40:	1886703a 	and	r3,r3,r2
 8011c44:	1800061e 	bne	r3,zero,8011c60 <__call_exitprocs+0x110>
 8011c48:	200b883a 	mov	r5,r4
 8011c4c:	a009883a 	mov	r4,r20
 8011c50:	303ee83a 	callr	r6
 8011c54:	003ff306 	br	8011c24 <__call_exitprocs+0xd4>
 8011c58:	94400115 	stw	r17,4(r18)
 8011c5c:	003fea06 	br	8011c08 <__call_exitprocs+0xb8>
 8011c60:	303ee83a 	callr	r6
 8011c64:	003fef06 	br	8011c24 <__call_exitprocs+0xd4>

08011c68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 8011c68:	defffd04 	addi	sp,sp,-12
 8011c6c:	df000215 	stw	fp,8(sp)
 8011c70:	df000204 	addi	fp,sp,8
 8011c74:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 8011c78:	0001883a 	nop
 8011c7c:	e0bffe17 	ldw	r2,-8(fp)
 8011c80:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 8011c84:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 8011c88:	10000226 	beq	r2,zero,8011c94 <_exit+0x2c>
    ALT_SIM_FAIL();
 8011c8c:	002af070 	cmpltui	zero,zero,43969
 8011c90:	00000106 	br	8011c98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 8011c94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 8011c98:	003fff06 	br	8011c98 <_exit+0x30>
