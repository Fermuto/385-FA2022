
lab71.elf:     file format elf32-littlenios2
lab71.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0001012c memsz 0x0001012c flags r-x
    LOAD off    0x0001114c vaddr 0x0801014c paddr 0x08011d28 align 2**12
         filesz 0x00001bdc memsz 0x00001bdc flags rw-
    LOAD off    0x00013904 vaddr 0x08013904 paddr 0x08013904 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000f86c  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000006bc  0800fa90  0800fa90  00010a90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001bdc  0801014c  08011d28  0001114c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  08013904  08013904  00013904  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  00012d28  2**0
                  CONTENTS
  7 .sdram        00000000  08013a5c  08013a5c  00012d28  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  00012d28  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000f20  00000000  00000000  00012d58  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00047344  00000000  00000000  00013c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000e61e  00000000  00000000  0005afbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00017e6e  00000000  00000000  000695da  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000020bc  00000000  00000000  00081448  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    00003fa8  00000000  00000000  00083504  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    0001c2e2  00000000  00000000  000874ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  000a3790  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001c08  00000000  00000000  000a37d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000a8562  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  000a8565  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  000a8571  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  000a8572  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  000a8573  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  000a8577  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  000a857b  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  000a857f  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  000a858a  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  000a8595  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000009  00000000  00000000  000a85a0  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000031  00000000  00000000  000a85a9  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e82  00000000  00000000  000a85da  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008af41  00000000  00000000  000ad45c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
0800fa90 l    d  .rodata	00000000 .rodata
0801014c l    d  .rwdata	00000000 .rwdata
08013904 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
08013a5c l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab71_bsp//obj/HAL/src/crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 text_mode_vga.c
08011cec l     O .rwdata	00000004 vga_ctrl
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 vfprintf.c
08002be8 l     F .text	000000c0 __sbprintf
0800fc1e l     O .rodata	00000010 blanks.5226
0800fc0e l     O .rodata	00000010 zeroes.5227
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
08002e08 l     F .text	00000234 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080049b4 l     F .text	00000008 __fp_lock
080049c8 l     F .text	00000168 __sinit.part.0
08004b30 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
0801014c l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mprec.c
0800fc40 l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800701c l     F .text	000000f4 __sprint_r.part.0
0800847c l     F .text	000000c0 __sbprintf
0800fd74 l     O .rodata	00000010 blanks.5203
0800fd64 l     O .rodata	00000010 zeroes.5204
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0800d280 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0800d398 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0800d3c4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
0800d4bc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0800d5a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0800d694 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0800d874 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08011d18 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0800db08 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800dc48 l     F .text	00000034 alt_dev_reg
08010c8c l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800df3c l     F .text	00000204 altera_avalon_jtag_uart_irq
0800e140 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800e77c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800eb14 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800ef68 l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800f0b8 l     F .text	0000003c alt_get_errno
0800f0f4 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
08013930 g     O .bss	00000004 alt_instruction_exception_handler
08006c98 g     F .text	00000074 _mprec_log10
08006d78 g     F .text	00000074 __any_on
08008ef0 g     F .text	00000058 _isatty_r
0800fc4c g     O .rodata	00000028 __mprec_tinytens
0800d7b0 g     F .text	0000007c alt_main
080002a4 g     F .text	00000050 textVGAClr
0801395c g     O .bss	00000100 alt_irq
08008fd8 g     F .text	00000064 _lseek_r
08011d28 g       *ABS*	00000000 __flash_rwdata_start
0800bc48 g     F .text	00000080 .hidden __eqdf2
08013a5c g       *ABS*	00000000 __alt_heap_start
08000a10 g     F .text	00000038 printf
08009a7c g     F .text	0000006c _wcrtomb_r
08006f20 g     F .text	0000005c __sseek
08004cc0 g     F .text	00000010 __sinit
08009920 g     F .text	00000148 __swbuf_r
08008f48 g     F .text	00000070 _setlocale_r
08004b38 g     F .text	00000078 __sfmoreglue
0800d850 g     F .text	00000024 __malloc_unlock
0800908c g     F .text	0000012c memmove
08004cac g     F .text	00000014 _cleanup
08005e38 g     F .text	000000a4 _Balloc
0800bcc8 g     F .text	000000f0 .hidden __gtdf2
0800f4d4 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
08005278 g     F .text	00000008 __localeconv_l
08000020 g       *ABS*	00000000 __flash_exceptions_start
080089bc g     F .text	00000060 _fstat_r
08013910 g     O .bss	00000004 errno
08006e98 g     F .text	00000008 __seofread
0801391c g     O .bss	00000004 alt_argv
08019cec g       *ABS*	00000000 _gp
0800dad8 g     F .text	00000030 usleep
08010b0c g     O .rwdata	00000180 alt_fd_list
0800f4f8 g     F .text	00000090 alt_find_dev
080008e0 g     F .text	00000100 memcpy
080049bc g     F .text	0000000c _cleanup_r
0800d0c8 g     F .text	000000c8 .hidden __floatsidf
0800f03c g     F .text	0000007c alt_io_redirect
0800bdb8 g     F .text	000000f0 .hidden __ltdf2
0800fa90 g       *ABS*	00000000 __DTOR_END__
0800f748 g     F .text	00000098 alt_exception_cause_generated_bad_addr
08006bf4 g     F .text	000000a4 __ratio
08008464 g     F .text	00000018 __vfiprintf_internal
0800e33c g     F .text	0000021c altera_avalon_jtag_uart_read
080009e0 g     F .text	00000030 _printf_r
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
0800a884 g     F .text	00000064 .hidden __udivsi3
0800d4f8 g     F .text	000000b0 isatty
0800fc9c g     O .rodata	000000c8 __mprec_tens
0801390c g     O .bss	00000004 __malloc_top_pad
08005280 g     F .text	0000000c _localeconv_r
08008a1c g     F .text	000004d4 __sfvwrite_r
08006260 g     F .text	00000034 __i2b
08006dec g     F .text	00000058 _sbrk_r
080091b8 g     F .text	00000064 _read_r
08011d10 g     O .rwdata	00000004 alt_max_fd
080086c4 g     F .text	000000f8 _fclose_r
0800498c g     F .text	00000028 fflush
08013908 g     O .bss	00000004 __malloc_max_sbrked_mem
0800a944 g     F .text	000009a0 .hidden __adddf3
080069a8 g     F .text	00000104 __b2d
0800a1c4 g     F .text	000005c8 .hidden __umoddi3
0800d6d0 g     F .text	000000e0 lseek
08011cf0 g     O .rwdata	00000004 _global_impure_ptr
0800921c g     F .text	0000062c _realloc_r
08013a5c g       *ABS*	00000000 __bss_end
0800ee84 g     F .text	000000e4 alt_iic_isr_register
0800f3cc g     F .text	00000108 alt_tick
08009ba8 g     F .text	0000061c .hidden __udivdi3
0800891c g     F .text	00000024 _fputwc_r
0800fc74 g     O .rodata	00000028 __mprec_bigtens
0800603c g     F .text	00000110 __s2b
0800d190 g     F .text	0000009c .hidden __floatunsidf
08006738 g     F .text	00000058 __mcmp
08004ce0 g     F .text	00000014 __fp_lock_all
0800ee38 g     F .text	0000004c alt_ic_irq_enabled
0800f330 g     F .text	0000009c alt_alarm_stop
08013924 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000c8 alt_irq_handler
08010ae4 g     O .rwdata	00000028 alt_dev_null
0800eaf4 g     F .text	00000020 alt_dcache_flush_all
0800614c g     F .text	00000064 __hi0bits
0800d048 g     F .text	00000080 .hidden __fixdfsi
08011d28 g       *ABS*	00000000 __ram_rwdata_end
08011d08 g     O .rwdata	00000008 alt_dev_list
0800db44 g     F .text	00000104 write
0801014c g       *ABS*	00000000 __ram_rodata_end
0800d400 g     F .text	000000bc fstat
0800bdb8 g     F .text	000000f0 .hidden __ledf2
080064d4 g     F .text	00000128 __pow5mult
08007128 g     F .text	0000133c ___vfiprintf_internal_r
0800a8e8 g     F .text	0000005c .hidden __umodsi3
08013a5c g       *ABS*	00000000 end
0800de7c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0800fa90 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800e7f4 g     F .text	0000007c alt_avalon_timer_sc_init
0800d22c g     F .text	00000054 .hidden __clzsi2
0800e558 g     F .text	00000224 altera_avalon_jtag_uart_write
08004cd0 g     F .text	00000004 __sfp_lock_acquire
08005c60 g     F .text	000000e8 memchr
08000a48 g     F .text	00002188 ___vfprintf_internal_r
08004e24 g     F .text	000002fc _free_r
0800fe95 g     O .rodata	00000180 _ctype_b
08008fb8 g     F .text	0000000c __locale_mb_cur_max
0800f944 g     F .text	00000118 __call_exitprocs
08011cf8 g     O .rwdata	00000004 __malloc_sbrk_base
08000224 g     F .text	0000003c _start
08013928 g     O .bss	00000004 _alt_tick_rate
080065fc g     F .text	0000013c __lshift
0801392c g     O .bss	00000004 _alt_nticks
0800d8b0 g     F .text	00000108 read
0800dcb4 g     F .text	00000064 alt_sys_init
0800f8b4 g     F .text	00000090 __register_exitproc
08006294 g     F .text	00000240 __multiply
0800e1e0 g     F .text	00000068 altera_avalon_jtag_uart_close
080008b8 g     F .text	00000028 .hidden __mulsi3
0801014c g       *ABS*	00000000 __ram_rwdata_start
0800fa90 g       *ABS*	00000000 __ram_rodata_start
08013934 g     O .bss	00000028 __malloc_current_mallinfo
08006aac g     F .text	00000148 __d2b
0800dd18 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800f690 g     F .text	000000b8 alt_get_fd
0800e99c g     F .text	00000158 alt_busy_sleep
080085a0 g     F .text	00000058 _close_r
0800f828 g     F .text	0000008c memcmp
0800ddd8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
08013a5c g       *ABS*	00000000 __alt_stack_base
0800de28 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08002ca8 g     F .text	00000160 __swsetup_r
0800b2e4 g     F .text	00000964 .hidden __divdf3
08004bb0 g     F .text	000000fc __sfp
08006d0c g     F .text	0000006c __copybits
08010570 g     O .rwdata	00000408 __malloc_av_
08004cdc g     F .text	00000004 __sinit_lock_release
0800bea8 g     F .text	000007e0 .hidden __muldf3
08006e44 g     F .text	00000054 __sread
0800f588 g     F .text	00000108 alt_find_file
0800eb50 g     F .text	000000a4 alt_dev_llist_insert
0800d82c g     F .text	00000024 __malloc_lock
0800da28 g     F .text	000000b0 sbrk
0800492c g     F .text	00000060 _fflush_r
080085f8 g     F .text	000000cc _calloc_r
08013904 g       *ABS*	00000000 __bss_start
08005d48 g     F .text	000000f0 memset
080002f4 g     F .text	000005c4 main
08013920 g     O .bss	00000004 alt_envp
08013904 g     O .bss	00000004 __malloc_max_total_mem
0800dd78 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08009a68 g     F .text	00000014 __swbuf
08006f7c g     F .text	00000008 __sclose
0c000000 g       *ABS*	00000000 __alt_heap_limit
080087bc g     F .text	00000010 fclose
0800303c g     F .text	000016c8 _dtoa_r
0800546c g     F .text	000007f4 _malloc_r
08009b78 g     F .text	00000030 __ascii_wctomb
08011d14 g     O .rwdata	00000004 alt_errno
08005120 g     F .text	000000a4 _fwalk
0800903c g     F .text	0000000c _mbtowc_r
0800a78c g     F .text	00000080 .hidden __divsi3
08004d08 g     F .text	0000011c _malloc_trim_r
0800fa90 g       *ABS*	00000000 __CTOR_END__
08009848 g     F .text	000000d8 strcmp
0800fa90 g       *ABS*	00000000 __flash_rodata_start
0800fa90 g       *ABS*	00000000 __DTOR_LIST__
0800bc48 g     F .text	00000080 .hidden __nedf2
0800dc7c g     F .text	00000038 alt_irq_init
0800d9b8 g     F .text	00000070 alt_release_fd
08010015 g     O .rodata	00000100 .hidden __clz_tab
08013914 g     O .bss	00000004 _PathLocale
0800f7e0 g     F .text	00000014 atexit
0800853c g     F .text	00000064 _write_r
08008fc4 g     F .text	00000014 setlocale
08000260 g     F .text	00000044 textVGASetColor
08011cf4 g     O .rwdata	00000004 _impure_ptr
08013918 g     O .bss	00000004 alt_argc
08004704 g     F .text	00000228 __sflush_r
0800ec54 g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
08009048 g     F .text	00000044 __ascii_mbtowc
0800694c g     F .text	0000005c __ulp
08004cf4 g     F .text	00000014 __fp_unlock_all
08011d00 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
0800528c g     F .text	0000000c localeconv
08005298 g     F .text	00000098 __swhatbuf_r
0800ecd4 g     F .text	00000050 alt_ic_isr_register
08011d28 g       *ABS*	00000000 _edata
08013a5c g       *ABS*	00000000 _end
080087cc g     F .text	00000150 __fputwc
08000224 g       *ABS*	00000000 __ram_exceptions_end
0800e248 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
0800edac g     F .text	0000008c alt_ic_irq_disable
08006ea0 g     F .text	00000080 __swrite
08011cfc g     O .rwdata	00000004 __malloc_trim_threshold
0800f7f4 g     F .text	00000034 exit
080051c4 g     F .text	000000b4 _fwalk_reent
08006790 g     F .text	000001bc __mdiff
0800a80c g     F .text	00000078 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08004cd4 g     F .text	00000004 __sfp_lock_release
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800fd94 g     O .rodata	00000101 _ctype_
0800cff4 g     F .text	00000054 .hidden __unorddf2
0800fa5c g     F .text	00000034 _exit
0800e870 g     F .text	0000012c alt_alarm_start
08005330 g     F .text	0000013c __smakebuf_r
08006f84 g     F .text	00000098 strlen
0800f1d0 g     F .text	00000160 open
0800bcc8 g     F .text	000000f0 .hidden __gedf2
08007110 g     F .text	00000018 __sprint_r
0800ecb4 g     F .text	00000020 alt_icache_flush_all
08011d1c g     O .rwdata	00000004 alt_priority_mask
0800ed24 g     F .text	00000088 alt_ic_irq_enable
08002bd0 g     F .text	00000018 __vfprintf_internal
08009b6c g     F .text	0000000c _wctomb_r
0800c688 g     F .text	0000096c .hidden __subdf3
080061b0 g     F .text	000000b0 __lo0bits
08011d20 g     O .rwdata	00000008 alt_alarm_list
0800ebf4 g     F .text	00000060 _do_ctors
08009ae8 g     F .text	00000084 wcrtomb
0800d2bc g     F .text	000000dc close
08010978 g     O .rwdata	0000016c __global_locale
0800d610 g     F .text	00000084 alt_load
08008940 g     F .text	0000007c fputwc
08004cd8 g     F .text	00000004 __sinit_lock_acquire
08005f00 g     F .text	0000013c __multadd
08005edc g     F .text	00000024 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	00820074 	movhi	r2,2049
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10ce5717 	ldw	r3,14684(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	00820074 	movhi	r2,2049
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	108e5817 	ldw	r2,14688(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a71117 	ldw	r2,-25532(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a71117 	ldw	r2,-25532(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000230:	d6a73b14 	ori	gp,gp,40172
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000238:	108e4114 	ori	r2,r2,14596

    movhi r3, %hi(__bss_end)
 800023c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000240:	18ce9714 	ori	r3,r3,14940

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	800d6100 	call	800d610 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	800d7b00 	call	800d7b0 <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <textVGASetColor>:
#include <alt_types.h>
#include "text_mode_vga.h"


void textVGASetColor(int background, int foreground)
{
 8000260:	defffd04 	addi	sp,sp,-12
 8000264:	df000215 	stw	fp,8(sp)
 8000268:	df000204 	addi	fp,sp,8
 800026c:	e13fff15 	stw	r4,-4(fp)
 8000270:	e17ffe15 	stw	r5,-8(fp)
	vga_ctrl->CTRL = foreground << 13 |
 8000274:	e0bffe17 	ldw	r2,-8(fp)
 8000278:	1006937a 	slli	r3,r2,13
					 background << 1;
 800027c:	e0bfff17 	ldw	r2,-4(fp)
 8000280:	1085883a 	add	r2,r2,r2
	vga_ctrl->CTRL = foreground << 13 |
 8000284:	1886b03a 	or	r3,r3,r2
 8000288:	d0a00017 	ldw	r2,-32768(gp)
 800028c:	10c25815 	stw	r3,2400(r2)
}
 8000290:	0001883a 	nop
 8000294:	e037883a 	mov	sp,fp
 8000298:	df000017 	ldw	fp,0(sp)
 800029c:	dec00104 	addi	sp,sp,4
 80002a0:	f800283a 	ret

080002a4 <textVGAClr>:

void textVGAClr()
{
 80002a4:	defffe04 	addi	sp,sp,-8
 80002a8:	df000115 	stw	fp,4(sp)
 80002ac:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 80002b0:	e03fff15 	stw	zero,-4(fp)
 80002b4:	00000706 	br	80002d4 <textVGAClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 80002b8:	d0e00017 	ldw	r3,-32768(gp)
 80002bc:	e0bfff17 	ldw	r2,-4(fp)
 80002c0:	1885883a 	add	r2,r3,r2
 80002c4:	10000005 	stb	zero,0(r2)
	for (int i = 0; i<(ROWS*COLUMNS); i++)
 80002c8:	e0bfff17 	ldw	r2,-4(fp)
 80002cc:	10800044 	addi	r2,r2,1
 80002d0:	e0bfff15 	stw	r2,-4(fp)
 80002d4:	e0bfff17 	ldw	r2,-4(fp)
 80002d8:	10825810 	cmplti	r2,r2,2400
 80002dc:	103ff61e 	bne	r2,zero,80002b8 <textVGAClr+0x14>
	}
}
 80002e0:	0001883a 	nop
 80002e4:	e037883a 	mov	sp,fp
 80002e8:	df000017 	ldw	fp,0(sp)
 80002ec:	dec00104 	addi	sp,sp,4
 80002f0:	f800283a 	ret

080002f4 <main>:

int main()
{
 80002f4:	deff8704 	addi	sp,sp,-484
 80002f8:	dfc07815 	stw	ra,480(sp)
 80002fc:	df007715 	stw	fp,476(sp)
 8000300:	dc807615 	stw	r18,472(sp)
 8000304:	dc407515 	stw	r17,468(sp)
 8000308:	dc007415 	stw	r16,464(sp)
 800030c:	df007704 	addi	fp,sp,476
	textVGASetColor(BLACK, WHITE);
 8000310:	0143ffc4 	movi	r5,4095
 8000314:	0009883a 	mov	r4,zero
 8000318:	80002600 	call	8000260 <textVGASetColor>
	textVGAClr();
 800031c:	80002a40 	call	80002a4 <textVGAClr>

	//Register write and readback test
	alt_u32 checksum[ROWS], readsum[ROWS];

	for (int j = 0; j < ROWS; j++)
 8000320:	e03ffc15 	stw	zero,-16(fp)
 8000324:	00002c06 	br	80003d8 <main+0xe4>
	{
		checksum[j] = 0;
 8000328:	e0bffc17 	ldw	r2,-16(fp)
 800032c:	100490ba 	slli	r2,r2,2
 8000330:	e0fffd04 	addi	r3,fp,-12
 8000334:	1885883a 	add	r2,r3,r2
 8000338:	103fd915 	stw	zero,-156(r2)
		for (int i = 0; i < COLUMNS; i++)
 800033c:	e03ffb15 	stw	zero,-20(fp)
 8000340:	00001f06 	br	80003c0 <main+0xcc>
		{
			vga_ctrl->VRAM[j*COLUMNS + i] = i + j;
 8000344:	e0bffb17 	ldw	r2,-20(fp)
 8000348:	1025883a 	mov	r18,r2
 800034c:	e0bffc17 	ldw	r2,-16(fp)
 8000350:	1023883a 	mov	r17,r2
 8000354:	d4200017 	ldw	r16,-32768(gp)
 8000358:	01401404 	movi	r5,80
 800035c:	e13ffc17 	ldw	r4,-16(fp)
 8000360:	80008b80 	call	80008b8 <__mulsi3>
 8000364:	1007883a 	mov	r3,r2
 8000368:	e0bffb17 	ldw	r2,-20(fp)
 800036c:	1885883a 	add	r2,r3,r2
 8000370:	9447883a 	add	r3,r18,r17
 8000374:	8085883a 	add	r2,r16,r2
 8000378:	10c00005 	stb	r3,0(r2)
			checksum[j] += i + j;
 800037c:	e0bffc17 	ldw	r2,-16(fp)
 8000380:	100490ba 	slli	r2,r2,2
 8000384:	e0fffd04 	addi	r3,fp,-12
 8000388:	1885883a 	add	r2,r3,r2
 800038c:	10bfd917 	ldw	r2,-156(r2)
 8000390:	e13ffb17 	ldw	r4,-20(fp)
 8000394:	e0fffc17 	ldw	r3,-16(fp)
 8000398:	20c7883a 	add	r3,r4,r3
 800039c:	10c7883a 	add	r3,r2,r3
 80003a0:	e0bffc17 	ldw	r2,-16(fp)
 80003a4:	100490ba 	slli	r2,r2,2
 80003a8:	e13ffd04 	addi	r4,fp,-12
 80003ac:	2085883a 	add	r2,r4,r2
 80003b0:	10ffd915 	stw	r3,-156(r2)
		for (int i = 0; i < COLUMNS; i++)
 80003b4:	e0bffb17 	ldw	r2,-20(fp)
 80003b8:	10800044 	addi	r2,r2,1
 80003bc:	e0bffb15 	stw	r2,-20(fp)
 80003c0:	e0bffb17 	ldw	r2,-20(fp)
 80003c4:	10801410 	cmplti	r2,r2,80
 80003c8:	103fde1e 	bne	r2,zero,8000344 <main+0x50>
	for (int j = 0; j < ROWS; j++)
 80003cc:	e0bffc17 	ldw	r2,-16(fp)
 80003d0:	10800044 	addi	r2,r2,1
 80003d4:	e0bffc15 	stw	r2,-16(fp)
 80003d8:	e0bffc17 	ldw	r2,-16(fp)
 80003dc:	10800790 	cmplti	r2,r2,30
 80003e0:	103fd11e 	bne	r2,zero,8000328 <main+0x34>
		}
	}
	for (int j = 0; j < ROWS; j++)
 80003e4:	e03ffa15 	stw	zero,-24(fp)
 80003e8:	00004406 	br	80004fc <main+0x208>
	{
		readsum[j] = 0;
 80003ec:	e0bffa17 	ldw	r2,-24(fp)
 80003f0:	100490ba 	slli	r2,r2,2
 80003f4:	e0fffd04 	addi	r3,fp,-12
 80003f8:	1885883a 	add	r2,r3,r2
 80003fc:	103fbb15 	stw	zero,-276(r2)
		for (int i = 0; i < COLUMNS; i++)
 8000400:	e03ff915 	stw	zero,-28(fp)
 8000404:	00001806 	br	8000468 <main+0x174>
		{
			readsum[j] += vga_ctrl->VRAM[j*COLUMNS + i];
 8000408:	d4200017 	ldw	r16,-32768(gp)
 800040c:	01401404 	movi	r5,80
 8000410:	e13ffa17 	ldw	r4,-24(fp)
 8000414:	80008b80 	call	80008b8 <__mulsi3>
 8000418:	1007883a 	mov	r3,r2
 800041c:	e0bff917 	ldw	r2,-28(fp)
 8000420:	1885883a 	add	r2,r3,r2
 8000424:	8085883a 	add	r2,r16,r2
 8000428:	11000003 	ldbu	r4,0(r2)
 800042c:	e0bffa17 	ldw	r2,-24(fp)
 8000430:	100490ba 	slli	r2,r2,2
 8000434:	e0fffd04 	addi	r3,fp,-12
 8000438:	1885883a 	add	r2,r3,r2
 800043c:	10ffbb17 	ldw	r3,-276(r2)
 8000440:	20803fcc 	andi	r2,r4,255
 8000444:	1887883a 	add	r3,r3,r2
 8000448:	e0bffa17 	ldw	r2,-24(fp)
 800044c:	100490ba 	slli	r2,r2,2
 8000450:	e13ffd04 	addi	r4,fp,-12
 8000454:	2085883a 	add	r2,r4,r2
 8000458:	10ffbb15 	stw	r3,-276(r2)
		for (int i = 0; i < COLUMNS; i++)
 800045c:	e0bff917 	ldw	r2,-28(fp)
 8000460:	10800044 	addi	r2,r2,1
 8000464:	e0bff915 	stw	r2,-28(fp)
 8000468:	e0bff917 	ldw	r2,-28(fp)
 800046c:	10801410 	cmplti	r2,r2,80
 8000470:	103fe51e 	bne	r2,zero,8000408 <main+0x114>
			//printf ("%x \n\r", vga_ctrl->VRAM[j*COLUMNS + i]);
		}
		printf ("Row: %d, Checksum: %x, Read-back Checksum: %x\n\r", j, checksum[j], readsum[j]);
 8000474:	e0bffa17 	ldw	r2,-24(fp)
 8000478:	100490ba 	slli	r2,r2,2
 800047c:	e0fffd04 	addi	r3,fp,-12
 8000480:	1885883a 	add	r2,r3,r2
 8000484:	10ffd917 	ldw	r3,-156(r2)
 8000488:	e0bffa17 	ldw	r2,-24(fp)
 800048c:	100490ba 	slli	r2,r2,2
 8000490:	e13ffd04 	addi	r4,fp,-12
 8000494:	2085883a 	add	r2,r4,r2
 8000498:	10bfbb17 	ldw	r2,-276(r2)
 800049c:	100f883a 	mov	r7,r2
 80004a0:	180d883a 	mov	r6,r3
 80004a4:	e17ffa17 	ldw	r5,-24(fp)
 80004a8:	01020074 	movhi	r4,2049
 80004ac:	213ea404 	addi	r4,r4,-1392
 80004b0:	8000a100 	call	8000a10 <printf>
		if (checksum[j] != readsum[j])
 80004b4:	e0bffa17 	ldw	r2,-24(fp)
 80004b8:	100490ba 	slli	r2,r2,2
 80004bc:	e0fffd04 	addi	r3,fp,-12
 80004c0:	1885883a 	add	r2,r3,r2
 80004c4:	10ffd917 	ldw	r3,-156(r2)
 80004c8:	e0bffa17 	ldw	r2,-24(fp)
 80004cc:	100490ba 	slli	r2,r2,2
 80004d0:	e13ffd04 	addi	r4,fp,-12
 80004d4:	2085883a 	add	r2,r4,r2
 80004d8:	10bfbb17 	ldw	r2,-276(r2)
 80004dc:	18800426 	beq	r3,r2,80004f0 <main+0x1fc>
		{
			printf ("Checksum mismatch!, check your Avalon-MM code\n\r");
 80004e0:	01020074 	movhi	r4,2049
 80004e4:	213eb004 	addi	r4,r4,-1344
 80004e8:	8000a100 	call	8000a10 <printf>
			while (1){};
 80004ec:	003fff06 	br	80004ec <main+0x1f8>
	for (int j = 0; j < ROWS; j++)
 80004f0:	e0bffa17 	ldw	r2,-24(fp)
 80004f4:	10800044 	addi	r2,r2,1
 80004f8:	e0bffa15 	stw	r2,-24(fp)
 80004fc:	e0bffa17 	ldw	r2,-24(fp)
 8000500:	10800790 	cmplti	r2,r2,30
 8000504:	103fb91e 	bne	r2,zero,80003ec <main+0xf8>
		}
	}
	printf ("Checksum code passed!...starting color test \n\r");
 8000508:	01020074 	movhi	r4,2049
 800050c:	213ebc04 	addi	r4,r4,-1296
 8000510:	8000a100 	call	8000a10 <printf>
	usleep (500000);
 8000514:	01000234 	movhi	r4,8
 8000518:	21284804 	addi	r4,r4,-24288
 800051c:	800dad80 	call	800dad8 <usleep>
	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 8000520:	01403c04 	movi	r5,240
 8000524:	01001c04 	movi	r4,112
 8000528:	80002600 	call	8000260 <textVGASetColor>
	textVGAClr();
 800052c:	80002a40 	call	80002a4 <textVGAClr>
	char greentest[] = "This text should draw in green";
 8000530:	e0ffb044 	addi	r3,fp,-319
 8000534:	00820074 	movhi	r2,2049
 8000538:	10beca04 	addi	r2,r2,-1240
 800053c:	010007c4 	movi	r4,31
 8000540:	200d883a 	mov	r6,r4
 8000544:	100b883a 	mov	r5,r2
 8000548:	1809883a 	mov	r4,r3
 800054c:	80008e00 	call	80008e0 <memcpy>
	{
		for (int j = 0; j < ROWS; j++)
 8000550:	e03ff815 	stw	zero,-32(fp)
 8000554:	00001006 	br	8000598 <main+0x2a4>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 8000558:	d4200017 	ldw	r16,-32768(gp)
 800055c:	01401404 	movi	r5,80
 8000560:	e13ff817 	ldw	r4,-32(fp)
 8000564:	80008b80 	call	80008b8 <__mulsi3>
 8000568:	8087883a 	add	r3,r16,r2
 800056c:	e0bff817 	ldw	r2,-32(fp)
 8000570:	1885883a 	add	r2,r3,r2
 8000574:	1009883a 	mov	r4,r2
 8000578:	e0bfb044 	addi	r2,fp,-319
 800057c:	00c007c4 	movi	r3,31
 8000580:	180d883a 	mov	r6,r3
 8000584:	100b883a 	mov	r5,r2
 8000588:	80008e00 	call	80008e0 <memcpy>
		for (int j = 0; j < ROWS; j++)
 800058c:	e0bff817 	ldw	r2,-32(fp)
 8000590:	10800044 	addi	r2,r2,1
 8000594:	e0bff815 	stw	r2,-32(fp)
 8000598:	e0bff817 	ldw	r2,-32(fp)
 800059c:	10800790 	cmplti	r2,r2,30
 80005a0:	103fed1e 	bne	r2,zero,8000558 <main+0x264>
		}
	}
	usleep (500000);
 80005a4:	01000234 	movhi	r4,8
 80005a8:	21284804 	addi	r4,r4,-24288
 80005ac:	800dad80 	call	800dad8 <usleep>
	textVGASetColor(DIM_RED, BRIGHT_RED);
 80005b0:	0143c004 	movi	r5,3840
 80005b4:	0101c004 	movi	r4,1792
 80005b8:	80002600 	call	8000260 <textVGASetColor>
	textVGAClr();
 80005bc:	80002a40 	call	80002a4 <textVGAClr>
	char redtest[] = "This text should draw in red";
 80005c0:	009cda74 	movhi	r2,29545
 80005c4:	109a1504 	addi	r2,r2,26708
 80005c8:	e0bfa915 	stw	r2,-348(fp)
 80005cc:	009e1974 	movhi	r2,30821
 80005d0:	109d0804 	addi	r2,r2,29728
 80005d4:	e0bfaa15 	stw	r2,-344(fp)
 80005d8:	009a1cf4 	movhi	r2,26739
 80005dc:	10881d04 	addi	r2,r2,8308
 80005e0:	e0bfab15 	stw	r2,-340(fp)
 80005e4:	00991b34 	movhi	r2,25708
 80005e8:	109d5bc4 	addi	r2,r2,30063
 80005ec:	e0bfac15 	stw	r2,-336(fp)
 80005f0:	00985cb4 	movhi	r2,24946
 80005f4:	10990804 	addi	r2,r2,25632
 80005f8:	e0bfad15 	stw	r2,-332(fp)
 80005fc:	009b9a74 	movhi	r2,28265
 8000600:	10881dc4 	addi	r2,r2,8311
 8000604:	e0bfae15 	stw	r2,-328(fp)
 8000608:	00991974 	movhi	r2,25701
 800060c:	109c8804 	addi	r2,r2,29216
 8000610:	e0bfaf15 	stw	r2,-324(fp)
 8000614:	e03fb005 	stb	zero,-320(fp)
	{
		for (int j = 0; j < ROWS; j++)
 8000618:	e03ff715 	stw	zero,-36(fp)
 800061c:	00001206 	br	8000668 <main+0x374>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+(ROWS-j),redtest, sizeof(redtest));
 8000620:	d4200017 	ldw	r16,-32768(gp)
 8000624:	01401404 	movi	r5,80
 8000628:	e13ff717 	ldw	r4,-36(fp)
 800062c:	80008b80 	call	80008b8 <__mulsi3>
 8000630:	8085883a 	add	r2,r16,r2
 8000634:	01000784 	movi	r4,30
 8000638:	e0fff717 	ldw	r3,-36(fp)
 800063c:	20c7c83a 	sub	r3,r4,r3
 8000640:	10c5883a 	add	r2,r2,r3
 8000644:	1009883a 	mov	r4,r2
 8000648:	e0bfa904 	addi	r2,fp,-348
 800064c:	00c00744 	movi	r3,29
 8000650:	180d883a 	mov	r6,r3
 8000654:	100b883a 	mov	r5,r2
 8000658:	80008e00 	call	80008e0 <memcpy>
		for (int j = 0; j < ROWS; j++)
 800065c:	e0bff717 	ldw	r2,-36(fp)
 8000660:	10800044 	addi	r2,r2,1
 8000664:	e0bff715 	stw	r2,-36(fp)
 8000668:	e0bff717 	ldw	r2,-36(fp)
 800066c:	10800790 	cmplti	r2,r2,30
 8000670:	103feb1e 	bne	r2,zero,8000620 <main+0x32c>
		}
	}
	usleep (500000);
 8000674:	01000234 	movhi	r4,8
 8000678:	21284804 	addi	r4,r4,-24288
 800067c:	800dad80 	call	800dad8 <usleep>
	textVGASetColor(DIM_BLU, BRIGHT_BLU);
 8000680:	014003c4 	movi	r5,15
 8000684:	010001c4 	movi	r4,7
 8000688:	80002600 	call	8000260 <textVGASetColor>
	textVGAClr();
 800068c:	80002a40 	call	80002a4 <textVGAClr>
	char blutest[] = "This text should draw in blue";
 8000690:	e0ffa184 	addi	r3,fp,-378
 8000694:	00820074 	movhi	r2,2049
 8000698:	10bed204 	addi	r2,r2,-1208
 800069c:	01000784 	movi	r4,30
 80006a0:	200d883a 	mov	r6,r4
 80006a4:	100b883a 	mov	r5,r2
 80006a8:	1809883a 	mov	r4,r3
 80006ac:	80008e00 	call	80008e0 <memcpy>
	{
		for (int j = 0; j < ROWS; j++)
 80006b0:	e03ff615 	stw	zero,-40(fp)
 80006b4:	00000e06 	br	80006f0 <main+0x3fc>
		{
			memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS],blutest, sizeof(blutest));
 80006b8:	d4200017 	ldw	r16,-32768(gp)
 80006bc:	01401404 	movi	r5,80
 80006c0:	e13ff617 	ldw	r4,-40(fp)
 80006c4:	80008b80 	call	80008b8 <__mulsi3>
 80006c8:	8085883a 	add	r2,r16,r2
 80006cc:	1009883a 	mov	r4,r2
 80006d0:	e0bfa184 	addi	r2,fp,-378
 80006d4:	00c00784 	movi	r3,30
 80006d8:	180d883a 	mov	r6,r3
 80006dc:	100b883a 	mov	r5,r2
 80006e0:	80008e00 	call	80008e0 <memcpy>
		for (int j = 0; j < ROWS; j++)
 80006e4:	e0bff617 	ldw	r2,-40(fp)
 80006e8:	10800044 	addi	r2,r2,1
 80006ec:	e0bff615 	stw	r2,-40(fp)
 80006f0:	e0bff617 	ldw	r2,-40(fp)
 80006f4:	10800790 	cmplti	r2,r2,30
 80006f8:	103fef1e 	bne	r2,zero,80006b8 <main+0x3c4>
		}
	}
	usleep (500000);
 80006fc:	01000234 	movhi	r4,8
 8000700:	21284804 	addi	r4,r4,-24288
 8000704:	800dad80 	call	800dad8 <usleep>
	textVGAClr();
 8000708:	80002a40 	call	80002a4 <textVGAClr>
	char inverted[] = "This text should draw inverted";
 800070c:	e0ff99c4 	addi	r3,fp,-409
 8000710:	00820074 	movhi	r2,2049
 8000714:	10beda04 	addi	r2,r2,-1176
 8000718:	010007c4 	movi	r4,31
 800071c:	200d883a 	mov	r6,r4
 8000720:	100b883a 	mov	r5,r2
 8000724:	1809883a 	mov	r4,r3
 8000728:	80008e00 	call	80008e0 <memcpy>
	for (int i = 0; i < sizeof(inverted); i++)
 800072c:	e03ff515 	stw	zero,-44(fp)
 8000730:	00000e06 	br	800076c <main+0x478>
		inverted[i] |= 0x80;
 8000734:	e0bff517 	ldw	r2,-44(fp)
 8000738:	e0fffd04 	addi	r3,fp,-12
 800073c:	1885883a 	add	r2,r3,r2
 8000740:	10ff9cc3 	ldbu	r3,-397(r2)
 8000744:	00bfe004 	movi	r2,-128
 8000748:	1884b03a 	or	r2,r3,r2
 800074c:	1007883a 	mov	r3,r2
 8000750:	e0bff517 	ldw	r2,-44(fp)
 8000754:	e13ffd04 	addi	r4,fp,-12
 8000758:	2085883a 	add	r2,r4,r2
 800075c:	10ff9cc5 	stb	r3,-397(r2)
	for (int i = 0; i < sizeof(inverted); i++)
 8000760:	e0bff517 	ldw	r2,-44(fp)
 8000764:	10800044 	addi	r2,r2,1
 8000768:	e0bff515 	stw	r2,-44(fp)
 800076c:	e0bff517 	ldw	r2,-44(fp)
 8000770:	108007f0 	cmpltui	r2,r2,31
 8000774:	103fef1e 	bne	r2,zero,8000734 <main+0x440>

	textVGASetColor(DIM_GRN, BRIGHT_GRN);
 8000778:	01403c04 	movi	r5,240
 800077c:	01001c04 	movi	r4,112
 8000780:	80002600 	call	8000260 <textVGASetColor>
	{
		for (int j = 0; j < ROWS; j++)
 8000784:	e03ff415 	stw	zero,-48(fp)
 8000788:	00002106 	br	8000810 <main+0x51c>
		{
			if (j%2==0)
 800078c:	e0bff417 	ldw	r2,-48(fp)
 8000790:	1080004c 	andi	r2,r2,1
 8000794:	10000e1e 	bne	r2,zero,80007d0 <main+0x4dc>
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,greentest, sizeof(greentest));
 8000798:	d4200017 	ldw	r16,-32768(gp)
 800079c:	01401404 	movi	r5,80
 80007a0:	e13ff417 	ldw	r4,-48(fp)
 80007a4:	80008b80 	call	80008b8 <__mulsi3>
 80007a8:	8087883a 	add	r3,r16,r2
 80007ac:	e0bff417 	ldw	r2,-48(fp)
 80007b0:	1885883a 	add	r2,r3,r2
 80007b4:	1009883a 	mov	r4,r2
 80007b8:	e0bfb044 	addi	r2,fp,-319
 80007bc:	00c007c4 	movi	r3,31
 80007c0:	180d883a 	mov	r6,r3
 80007c4:	100b883a 	mov	r5,r2
 80007c8:	80008e00 	call	80008e0 <memcpy>
 80007cc:	00000d06 	br	8000804 <main+0x510>
			else
				memcpy((void*)&vga_ctrl->VRAM[j*COLUMNS]+j,inverted, sizeof(inverted));
 80007d0:	d4200017 	ldw	r16,-32768(gp)
 80007d4:	01401404 	movi	r5,80
 80007d8:	e13ff417 	ldw	r4,-48(fp)
 80007dc:	80008b80 	call	80008b8 <__mulsi3>
 80007e0:	8087883a 	add	r3,r16,r2
 80007e4:	e0bff417 	ldw	r2,-48(fp)
 80007e8:	1885883a 	add	r2,r3,r2
 80007ec:	1009883a 	mov	r4,r2
 80007f0:	e0bf99c4 	addi	r2,fp,-409
 80007f4:	00c007c4 	movi	r3,31
 80007f8:	180d883a 	mov	r6,r3
 80007fc:	100b883a 	mov	r5,r2
 8000800:	80008e00 	call	80008e0 <memcpy>
		for (int j = 0; j < ROWS; j++)
 8000804:	e0bff417 	ldw	r2,-48(fp)
 8000808:	10800044 	addi	r2,r2,1
 800080c:	e0bff415 	stw	r2,-48(fp)
 8000810:	e0bff417 	ldw	r2,-48(fp)
 8000814:	10800790 	cmplti	r2,r2,30
 8000818:	103fdc1e 	bne	r2,zero,800078c <main+0x498>
		}
	}
	usleep (500000);
 800081c:	01000234 	movhi	r4,8
 8000820:	21284804 	addi	r4,r4,-24288
 8000824:	800dad80 	call	800dad8 <usleep>

	textVGASetColor(BLACK, WHITE);
 8000828:	0143ffc4 	movi	r5,4095
 800082c:	0009883a 	mov	r4,zero
 8000830:	80002600 	call	8000260 <textVGASetColor>
	textVGAClr();
 8000834:	80002a40 	call	80002a4 <textVGAClr>

	char completed[] = "All visual tests completed, verify on-screen results are correct.";
 8000838:	e0ff8944 	addi	r3,fp,-475
 800083c:	00820074 	movhi	r2,2049
 8000840:	10bee204 	addi	r2,r2,-1144
 8000844:	01001084 	movi	r4,66
 8000848:	200d883a 	mov	r6,r4
 800084c:	100b883a 	mov	r5,r2
 8000850:	1809883a 	mov	r4,r3
 8000854:	80008e00 	call	80008e0 <memcpy>
	memcpy((void*)&vga_ctrl->VRAM[0],completed, sizeof(completed));
 8000858:	d0a00017 	ldw	r2,-32768(gp)
 800085c:	1009883a 	mov	r4,r2
 8000860:	e0bf8944 	addi	r2,fp,-475
 8000864:	00c01084 	movi	r3,66
 8000868:	180d883a 	mov	r6,r3
 800086c:	100b883a 	mov	r5,r2
 8000870:	80008e00 	call	80008e0 <memcpy>
	printf( "%s \n\r", completed);
 8000874:	e0bf8944 	addi	r2,fp,-475
 8000878:	100b883a 	mov	r5,r2
 800087c:	01020074 	movhi	r4,2049
 8000880:	213ec804 	addi	r4,r4,-1248
 8000884:	8000a100 	call	8000a10 <printf>

	usleep (1000000);
 8000888:	010003f4 	movhi	r4,15
 800088c:	21109004 	addi	r4,r4,16960
 8000890:	800dad80 	call	800dad8 <usleep>
	return 0;
 8000894:	0005883a 	mov	r2,zero

}
 8000898:	e6fffd04 	addi	sp,fp,-12
 800089c:	dfc00417 	ldw	ra,16(sp)
 80008a0:	df000317 	ldw	fp,12(sp)
 80008a4:	dc800217 	ldw	r18,8(sp)
 80008a8:	dc400117 	ldw	r17,4(sp)
 80008ac:	dc000017 	ldw	r16,0(sp)
 80008b0:	dec00504 	addi	sp,sp,20
 80008b4:	f800283a 	ret

080008b8 <__mulsi3>:
 80008b8:	0005883a 	mov	r2,zero
 80008bc:	20000726 	beq	r4,zero,80008dc <__mulsi3+0x24>
 80008c0:	20c0004c 	andi	r3,r4,1
 80008c4:	2008d07a 	srli	r4,r4,1
 80008c8:	18000126 	beq	r3,zero,80008d0 <__mulsi3+0x18>
 80008cc:	1145883a 	add	r2,r2,r5
 80008d0:	294b883a 	add	r5,r5,r5
 80008d4:	203ffa1e 	bne	r4,zero,80008c0 <__mulsi3+0x8>
 80008d8:	f800283a 	ret
 80008dc:	f800283a 	ret

080008e0 <memcpy>:
 80008e0:	30c00430 	cmpltui	r3,r6,16
 80008e4:	2005883a 	mov	r2,r4
 80008e8:	18002d1e 	bne	r3,zero,80009a0 <memcpy+0xc0>
 80008ec:	2906b03a 	or	r3,r5,r4
 80008f0:	18c000cc 	andi	r3,r3,3
 80008f4:	1800351e 	bne	r3,zero,80009cc <memcpy+0xec>
 80008f8:	32fffc04 	addi	r11,r6,-16
 80008fc:	5816d13a 	srli	r11,r11,4
 8000900:	2007883a 	mov	r3,r4
 8000904:	280f883a 	mov	r7,r5
 8000908:	5ac00044 	addi	r11,r11,1
 800090c:	5816913a 	slli	r11,r11,4
 8000910:	22c9883a 	add	r4,r4,r11
 8000914:	3a000017 	ldw	r8,0(r7)
 8000918:	3a800117 	ldw	r10,4(r7)
 800091c:	3a400217 	ldw	r9,8(r7)
 8000920:	39c00404 	addi	r7,r7,16
 8000924:	1a000015 	stw	r8,0(r3)
 8000928:	3a3fff17 	ldw	r8,-4(r7)
 800092c:	1a800115 	stw	r10,4(r3)
 8000930:	1a400215 	stw	r9,8(r3)
 8000934:	18c00404 	addi	r3,r3,16
 8000938:	1a3fff15 	stw	r8,-4(r3)
 800093c:	20fff51e 	bne	r4,r3,8000914 <memcpy+0x34>
 8000940:	3100030c 	andi	r4,r6,12
 8000944:	2acb883a 	add	r5,r5,r11
 8000948:	320003cc 	andi	r8,r6,15
 800094c:	20002226 	beq	r4,zero,80009d8 <memcpy+0xf8>
 8000950:	2809883a 	mov	r4,r5
 8000954:	1813883a 	mov	r9,r3
 8000958:	21000104 	addi	r4,r4,4
 800095c:	22bfff17 	ldw	r10,-4(r4)
 8000960:	410fc83a 	sub	r7,r8,r4
 8000964:	4a400104 	addi	r9,r9,4
 8000968:	29cf883a 	add	r7,r5,r7
 800096c:	4abfff15 	stw	r10,-4(r9)
 8000970:	39c00128 	cmpgeui	r7,r7,4
 8000974:	383ff81e 	bne	r7,zero,8000958 <memcpy+0x78>
 8000978:	413fff04 	addi	r4,r8,-4
 800097c:	2008d0ba 	srli	r4,r4,2
 8000980:	318000cc 	andi	r6,r6,3
 8000984:	31ffffc4 	addi	r7,r6,-1
 8000988:	21000044 	addi	r4,r4,1
 800098c:	200890ba 	slli	r4,r4,2
 8000990:	1907883a 	add	r3,r3,r4
 8000994:	290b883a 	add	r5,r5,r4
 8000998:	3000041e 	bne	r6,zero,80009ac <memcpy+0xcc>
 800099c:	f800283a 	ret
 80009a0:	2007883a 	mov	r3,r4
 80009a4:	31ffffc4 	addi	r7,r6,-1
 80009a8:	303ffc26 	beq	r6,zero,800099c <memcpy+0xbc>
 80009ac:	39c00044 	addi	r7,r7,1
 80009b0:	19cf883a 	add	r7,r3,r7
 80009b4:	29400044 	addi	r5,r5,1
 80009b8:	29bfffc3 	ldbu	r6,-1(r5)
 80009bc:	18c00044 	addi	r3,r3,1
 80009c0:	19bfffc5 	stb	r6,-1(r3)
 80009c4:	19fffb1e 	bne	r3,r7,80009b4 <memcpy+0xd4>
 80009c8:	f800283a 	ret
 80009cc:	31ffffc4 	addi	r7,r6,-1
 80009d0:	2007883a 	mov	r3,r4
 80009d4:	003ff506 	br	80009ac <memcpy+0xcc>
 80009d8:	400d883a 	mov	r6,r8
 80009dc:	003ff106 	br	80009a4 <memcpy+0xc4>

080009e0 <_printf_r>:
 80009e0:	defffd04 	addi	sp,sp,-12
 80009e4:	2805883a 	mov	r2,r5
 80009e8:	dfc00015 	stw	ra,0(sp)
 80009ec:	d9800115 	stw	r6,4(sp)
 80009f0:	d9c00215 	stw	r7,8(sp)
 80009f4:	21400217 	ldw	r5,8(r4)
 80009f8:	d9c00104 	addi	r7,sp,4
 80009fc:	100d883a 	mov	r6,r2
 8000a00:	8000a480 	call	8000a48 <___vfprintf_internal_r>
 8000a04:	dfc00017 	ldw	ra,0(sp)
 8000a08:	dec00304 	addi	sp,sp,12
 8000a0c:	f800283a 	ret

08000a10 <printf>:
 8000a10:	defffc04 	addi	sp,sp,-16
 8000a14:	dfc00015 	stw	ra,0(sp)
 8000a18:	d9400115 	stw	r5,4(sp)
 8000a1c:	d9800215 	stw	r6,8(sp)
 8000a20:	d9c00315 	stw	r7,12(sp)
 8000a24:	00820074 	movhi	r2,2049
 8000a28:	10873d17 	ldw	r2,7412(r2)
 8000a2c:	200b883a 	mov	r5,r4
 8000a30:	d9800104 	addi	r6,sp,4
 8000a34:	11000217 	ldw	r4,8(r2)
 8000a38:	8002bd00 	call	8002bd0 <__vfprintf_internal>
 8000a3c:	dfc00017 	ldw	ra,0(sp)
 8000a40:	dec00404 	addi	sp,sp,16
 8000a44:	f800283a 	ret

08000a48 <___vfprintf_internal_r>:
 8000a48:	deffbd04 	addi	sp,sp,-268
 8000a4c:	dfc04215 	stw	ra,264(sp)
 8000a50:	dd003d15 	stw	r20,244(sp)
 8000a54:	dcc03c15 	stw	r19,240(sp)
 8000a58:	dc003915 	stw	r16,228(sp)
 8000a5c:	d9000515 	stw	r4,20(sp)
 8000a60:	2021883a 	mov	r16,r4
 8000a64:	2827883a 	mov	r19,r5
 8000a68:	3029883a 	mov	r20,r6
 8000a6c:	d9c00615 	stw	r7,24(sp)
 8000a70:	df004115 	stw	fp,260(sp)
 8000a74:	ddc04015 	stw	r23,256(sp)
 8000a78:	dd803f15 	stw	r22,252(sp)
 8000a7c:	dd403e15 	stw	r21,248(sp)
 8000a80:	dc803b15 	stw	r18,236(sp)
 8000a84:	dc403a15 	stw	r17,232(sp)
 8000a88:	80052800 	call	8005280 <_localeconv_r>
 8000a8c:	10800017 	ldw	r2,0(r2)
 8000a90:	1009883a 	mov	r4,r2
 8000a94:	d8800d15 	stw	r2,52(sp)
 8000a98:	8006f840 	call	8006f84 <strlen>
 8000a9c:	d8800b15 	stw	r2,44(sp)
 8000aa0:	80000226 	beq	r16,zero,8000aac <___vfprintf_internal_r+0x64>
 8000aa4:	80800e17 	ldw	r2,56(r16)
 8000aa8:	1002de26 	beq	r2,zero,8001624 <___vfprintf_internal_r+0xbdc>
 8000aac:	9880030b 	ldhu	r2,12(r19)
 8000ab0:	10c8000c 	andi	r3,r2,8192
 8000ab4:	1800061e 	bne	r3,zero,8000ad0 <___vfprintf_internal_r+0x88>
 8000ab8:	98c01917 	ldw	r3,100(r19)
 8000abc:	0137ffc4 	movi	r4,-8193
 8000ac0:	10880014 	ori	r2,r2,8192
 8000ac4:	1906703a 	and	r3,r3,r4
 8000ac8:	9880030d 	sth	r2,12(r19)
 8000acc:	98c01915 	stw	r3,100(r19)
 8000ad0:	10c0020c 	andi	r3,r2,8
 8000ad4:	18009a26 	beq	r3,zero,8000d40 <___vfprintf_internal_r+0x2f8>
 8000ad8:	98c00417 	ldw	r3,16(r19)
 8000adc:	18009826 	beq	r3,zero,8000d40 <___vfprintf_internal_r+0x2f8>
 8000ae0:	1080068c 	andi	r2,r2,26
 8000ae4:	10800298 	cmpnei	r2,r2,10
 8000ae8:	10009d26 	beq	r2,zero,8000d60 <___vfprintf_internal_r+0x318>
 8000aec:	ddc02904 	addi	r23,sp,164
 8000af0:	ddc01c15 	stw	r23,112(sp)
 8000af4:	d8001e15 	stw	zero,120(sp)
 8000af8:	d8001d15 	stw	zero,116(sp)
 8000afc:	d8000815 	stw	zero,32(sp)
 8000b00:	d8000915 	stw	zero,36(sp)
 8000b04:	d8000a15 	stw	zero,40(sp)
 8000b08:	b811883a 	mov	r8,r23
 8000b0c:	d8000c15 	stw	zero,48(sp)
 8000b10:	d8001115 	stw	zero,68(sp)
 8000b14:	d8000415 	stw	zero,16(sp)
 8000b18:	a02d883a 	mov	r22,r20
 8000b1c:	b0800007 	ldb	r2,0(r22)
 8000b20:	1000a226 	beq	r2,zero,8000dac <___vfprintf_internal_r+0x364>
 8000b24:	10800960 	cmpeqi	r2,r2,37
 8000b28:	1005351e 	bne	r2,zero,8002000 <___vfprintf_internal_r+0x15b8>
 8000b2c:	b021883a 	mov	r16,r22
 8000b30:	00000206 	br	8000b3c <___vfprintf_internal_r+0xf4>
 8000b34:	18009326 	beq	r3,zero,8000d84 <___vfprintf_internal_r+0x33c>
 8000b38:	8821883a 	mov	r16,r17
 8000b3c:	80800047 	ldb	r2,1(r16)
 8000b40:	84400044 	addi	r17,r16,1
 8000b44:	10c00958 	cmpnei	r3,r2,37
 8000b48:	103ffa1e 	bne	r2,zero,8000b34 <___vfprintf_internal_r+0xec>
 8000b4c:	8da5c83a 	sub	r18,r17,r22
 8000b50:	90009626 	beq	r18,zero,8000dac <___vfprintf_internal_r+0x364>
 8000b54:	d8c01e17 	ldw	r3,120(sp)
 8000b58:	d8801d17 	ldw	r2,116(sp)
 8000b5c:	45800015 	stw	r22,0(r8)
 8000b60:	1c87883a 	add	r3,r3,r18
 8000b64:	10800044 	addi	r2,r2,1
 8000b68:	d8801d15 	stw	r2,116(sp)
 8000b6c:	44800115 	stw	r18,4(r8)
 8000b70:	d8c01e15 	stw	r3,120(sp)
 8000b74:	10800208 	cmpgei	r2,r2,8
 8000b78:	1000851e 	bne	r2,zero,8000d90 <___vfprintf_internal_r+0x348>
 8000b7c:	42000204 	addi	r8,r8,8
 8000b80:	d8c00417 	ldw	r3,16(sp)
 8000b84:	80800047 	ldb	r2,1(r16)
 8000b88:	1c87883a 	add	r3,r3,r18
 8000b8c:	d8c00415 	stw	r3,16(sp)
 8000b90:	10008626 	beq	r2,zero,8000dac <___vfprintf_internal_r+0x364>
 8000b94:	8a800047 	ldb	r10,1(r17)
 8000b98:	8d800044 	addi	r22,r17,1
 8000b9c:	d8001545 	stb	zero,85(sp)
 8000ba0:	0009883a 	mov	r4,zero
 8000ba4:	000b883a 	mov	r5,zero
 8000ba8:	02ffffc4 	movi	r11,-1
 8000bac:	0021883a 	mov	r16,zero
 8000bb0:	0019883a 	mov	r12,zero
 8000bb4:	b5800044 	addi	r22,r22,1
 8000bb8:	5039883a 	mov	fp,r10
 8000bbc:	e0bff804 	addi	r2,fp,-32
 8000bc0:	10c01668 	cmpgeui	r3,r2,89
 8000bc4:	18009d1e 	bne	r3,zero,8000e3c <___vfprintf_internal_r+0x3f4>
 8000bc8:	100490ba 	slli	r2,r2,2
 8000bcc:	00c20034 	movhi	r3,2048
 8000bd0:	10c7883a 	add	r3,r2,r3
 8000bd4:	1882f717 	ldw	r2,3036(r3)
 8000bd8:	1000683a 	jmp	r2
 8000bdc:	08000f14 	ori	zero,at,60
 8000be0:	08000e3c 	xorhi	zero,at,56
 8000be4:	08000e3c 	xorhi	zero,at,56
 8000be8:	08000f08 	cmpgei	zero,at,60
 8000bec:	08000e3c 	xorhi	zero,at,56
 8000bf0:	08000e3c 	xorhi	zero,at,56
 8000bf4:	08000e3c 	xorhi	zero,at,56
 8000bf8:	08000e3c 	xorhi	zero,at,56
 8000bfc:	08000e3c 	xorhi	zero,at,56
 8000c00:	08000e3c 	xorhi	zero,at,56
 8000c04:	08000ee0 	cmpeqi	zero,at,59
 8000c08:	08000ed0 	cmplti	zero,at,59
 8000c0c:	08000e3c 	xorhi	zero,at,56
 8000c10:	08000eb8 	rdprs	zero,at,58
 8000c14:	08000e6c 	andhi	zero,at,57
 8000c18:	08000e3c 	xorhi	zero,at,56
 8000c1c:	08000e60 	cmpeqi	zero,at,57
 8000c20:	08000e04 	addi	zero,at,56
 8000c24:	08000e04 	addi	zero,at,56
 8000c28:	08000e04 	addi	zero,at,56
 8000c2c:	08000e04 	addi	zero,at,56
 8000c30:	08000e04 	addi	zero,at,56
 8000c34:	08000e04 	addi	zero,at,56
 8000c38:	08000e04 	addi	zero,at,56
 8000c3c:	08000e04 	addi	zero,at,56
 8000c40:	08000e04 	addi	zero,at,56
 8000c44:	08000e3c 	xorhi	zero,at,56
 8000c48:	08000e3c 	xorhi	zero,at,56
 8000c4c:	08000e3c 	xorhi	zero,at,56
 8000c50:	08000e3c 	xorhi	zero,at,56
 8000c54:	08000e3c 	xorhi	zero,at,56
 8000c58:	08000e3c 	xorhi	zero,at,56
 8000c5c:	08000e3c 	xorhi	zero,at,56
 8000c60:	08000e3c 	xorhi	zero,at,56
 8000c64:	08000e3c 	xorhi	zero,at,56
 8000c68:	08000e3c 	xorhi	zero,at,56
 8000c6c:	08001428 	cmpgeui	zero,at,80
 8000c70:	08001348 	cmpgei	zero,at,77
 8000c74:	08000e3c 	xorhi	zero,at,56
 8000c78:	08001348 	cmpgei	zero,at,77
 8000c7c:	08000e3c 	xorhi	zero,at,56
 8000c80:	08000e3c 	xorhi	zero,at,56
 8000c84:	08000e3c 	xorhi	zero,at,56
 8000c88:	08000e3c 	xorhi	zero,at,56
 8000c8c:	0800133c 	xorhi	zero,at,76
 8000c90:	08000e3c 	xorhi	zero,at,56
 8000c94:	08000e3c 	xorhi	zero,at,56
 8000c98:	08001308 	cmpgei	zero,at,76
 8000c9c:	08000e3c 	xorhi	zero,at,56
 8000ca0:	08000e3c 	xorhi	zero,at,56
 8000ca4:	08000e3c 	xorhi	zero,at,56
 8000ca8:	08000e3c 	xorhi	zero,at,56
 8000cac:	08000e3c 	xorhi	zero,at,56
 8000cb0:	08001548 	cmpgei	zero,at,85
 8000cb4:	08000e3c 	xorhi	zero,at,56
 8000cb8:	08000e3c 	xorhi	zero,at,56
 8000cbc:	08001500 	call	800150 <__alt_mem_onchip_memory2_0+0x800150>
 8000cc0:	08000e3c 	xorhi	zero,at,56
 8000cc4:	08000e3c 	xorhi	zero,at,56
 8000cc8:	08000e3c 	xorhi	zero,at,56
 8000ccc:	08000e3c 	xorhi	zero,at,56
 8000cd0:	08000e3c 	xorhi	zero,at,56
 8000cd4:	08000e3c 	xorhi	zero,at,56
 8000cd8:	08000e3c 	xorhi	zero,at,56
 8000cdc:	08000e3c 	xorhi	zero,at,56
 8000ce0:	08000e3c 	xorhi	zero,at,56
 8000ce4:	08000e3c 	xorhi	zero,at,56
 8000ce8:	08001098 	cmpnei	zero,at,66
 8000cec:	08001024 	muli	zero,at,64
 8000cf0:	08001348 	cmpgei	zero,at,77
 8000cf4:	08001348 	cmpgei	zero,at,77
 8000cf8:	08001348 	cmpgei	zero,at,77
 8000cfc:	08001618 	cmpnei	zero,at,88
 8000d00:	08001024 	muli	zero,at,64
 8000d04:	08000e3c 	xorhi	zero,at,56
 8000d08:	08000e3c 	xorhi	zero,at,56
 8000d0c:	08001604 	addi	zero,at,88
 8000d10:	08000e3c 	xorhi	zero,at,56
 8000d14:	080012c8 	cmpgei	zero,at,75
 8000d18:	08001288 	cmpgei	zero,at,74
 8000d1c:	08001588 	cmpgei	zero,at,86
 8000d20:	0800157c 	xorhi	zero,at,85
 8000d24:	08000e3c 	xorhi	zero,at,56
 8000d28:	08000fc8 	cmpgei	zero,at,63
 8000d2c:	08000e3c 	xorhi	zero,at,56
 8000d30:	08000f88 	cmpgei	zero,at,62
 8000d34:	08000e3c 	xorhi	zero,at,56
 8000d38:	08000e3c 	xorhi	zero,at,56
 8000d3c:	08000f40 	call	8000f4 <__alt_mem_onchip_memory2_0+0x8000f4>
 8000d40:	d9000517 	ldw	r4,20(sp)
 8000d44:	980b883a 	mov	r5,r19
 8000d48:	8002ca80 	call	8002ca8 <__swsetup_r>
 8000d4c:	1007561e 	bne	r2,zero,8002aa8 <___vfprintf_internal_r+0x2060>
 8000d50:	9880030b 	ldhu	r2,12(r19)
 8000d54:	1080068c 	andi	r2,r2,26
 8000d58:	10800298 	cmpnei	r2,r2,10
 8000d5c:	103f631e 	bne	r2,zero,8000aec <___vfprintf_internal_r+0xa4>
 8000d60:	9880038f 	ldh	r2,14(r19)
 8000d64:	103f6116 	blt	r2,zero,8000aec <___vfprintf_internal_r+0xa4>
 8000d68:	d9c00617 	ldw	r7,24(sp)
 8000d6c:	d9000517 	ldw	r4,20(sp)
 8000d70:	a00d883a 	mov	r6,r20
 8000d74:	980b883a 	mov	r5,r19
 8000d78:	8002be80 	call	8002be8 <__sbprintf>
 8000d7c:	d8800415 	stw	r2,16(sp)
 8000d80:	00001306 	br	8000dd0 <___vfprintf_internal_r+0x388>
 8000d84:	8da5c83a 	sub	r18,r17,r22
 8000d88:	903f8226 	beq	r18,zero,8000b94 <___vfprintf_internal_r+0x14c>
 8000d8c:	003f7106 	br	8000b54 <___vfprintf_internal_r+0x10c>
 8000d90:	d9000517 	ldw	r4,20(sp)
 8000d94:	d9801c04 	addi	r6,sp,112
 8000d98:	980b883a 	mov	r5,r19
 8000d9c:	80071100 	call	8007110 <__sprint_r>
 8000da0:	1000081e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8000da4:	b811883a 	mov	r8,r23
 8000da8:	003f7506 	br	8000b80 <___vfprintf_internal_r+0x138>
 8000dac:	d8801e17 	ldw	r2,120(sp)
 8000db0:	10000426 	beq	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8000db4:	d9000517 	ldw	r4,20(sp)
 8000db8:	d9801c04 	addi	r6,sp,112
 8000dbc:	980b883a 	mov	r5,r19
 8000dc0:	80071100 	call	8007110 <__sprint_r>
 8000dc4:	9880030b 	ldhu	r2,12(r19)
 8000dc8:	1080100c 	andi	r2,r2,64
 8000dcc:	1007361e 	bne	r2,zero,8002aa8 <___vfprintf_internal_r+0x2060>
 8000dd0:	d8800417 	ldw	r2,16(sp)
 8000dd4:	dfc04217 	ldw	ra,264(sp)
 8000dd8:	df004117 	ldw	fp,260(sp)
 8000ddc:	ddc04017 	ldw	r23,256(sp)
 8000de0:	dd803f17 	ldw	r22,252(sp)
 8000de4:	dd403e17 	ldw	r21,248(sp)
 8000de8:	dd003d17 	ldw	r20,244(sp)
 8000dec:	dcc03c17 	ldw	r19,240(sp)
 8000df0:	dc803b17 	ldw	r18,236(sp)
 8000df4:	dc403a17 	ldw	r17,232(sp)
 8000df8:	dc003917 	ldw	r16,228(sp)
 8000dfc:	dec04304 	addi	sp,sp,268
 8000e00:	f800283a 	ret
 8000e04:	0021883a 	mov	r16,zero
 8000e08:	e0fff404 	addi	r3,fp,-48
 8000e0c:	800490ba 	slli	r2,r16,2
 8000e10:	b5800044 	addi	r22,r22,1
 8000e14:	b73fffc7 	ldb	fp,-1(r22)
 8000e18:	1421883a 	add	r16,r2,r16
 8000e1c:	8421883a 	add	r16,r16,r16
 8000e20:	1c21883a 	add	r16,r3,r16
 8000e24:	e0fff404 	addi	r3,fp,-48
 8000e28:	188002b0 	cmpltui	r2,r3,10
 8000e2c:	103ff71e 	bne	r2,zero,8000e0c <___vfprintf_internal_r+0x3c4>
 8000e30:	e0bff804 	addi	r2,fp,-32
 8000e34:	10c01668 	cmpgeui	r3,r2,89
 8000e38:	183f6326 	beq	r3,zero,8000bc8 <___vfprintf_internal_r+0x180>
 8000e3c:	21003fcc 	andi	r4,r4,255
 8000e40:	2006741e 	bne	r4,zero,8002814 <___vfprintf_internal_r+0x1dcc>
 8000e44:	e03fd926 	beq	fp,zero,8000dac <___vfprintf_internal_r+0x364>
 8000e48:	df001f05 	stb	fp,124(sp)
 8000e4c:	d8001545 	stb	zero,85(sp)
 8000e50:	05400044 	movi	r21,1
 8000e54:	05000044 	movi	r20,1
 8000e58:	dc401f04 	addi	r17,sp,124
 8000e5c:	00009706 	br	80010bc <___vfprintf_internal_r+0x674>
 8000e60:	63002014 	ori	r12,r12,128
 8000e64:	b2800007 	ldb	r10,0(r22)
 8000e68:	003f5206 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8000e6c:	b7000007 	ldb	fp,0(r22)
 8000e70:	b0800044 	addi	r2,r22,1
 8000e74:	e0c00aa0 	cmpeqi	r3,fp,42
 8000e78:	1807491e 	bne	r3,zero,8002ba0 <___vfprintf_internal_r+0x2158>
 8000e7c:	e0fff404 	addi	r3,fp,-48
 8000e80:	198002b0 	cmpltui	r6,r3,10
 8000e84:	102d883a 	mov	r22,r2
 8000e88:	0017883a 	mov	r11,zero
 8000e8c:	303f4b26 	beq	r6,zero,8000bbc <___vfprintf_internal_r+0x174>
 8000e90:	580490ba 	slli	r2,r11,2
 8000e94:	b5800044 	addi	r22,r22,1
 8000e98:	b73fffc7 	ldb	fp,-1(r22)
 8000e9c:	12d7883a 	add	r11,r2,r11
 8000ea0:	5ad7883a 	add	r11,r11,r11
 8000ea4:	58d7883a 	add	r11,r11,r3
 8000ea8:	e0fff404 	addi	r3,fp,-48
 8000eac:	188002b0 	cmpltui	r2,r3,10
 8000eb0:	103ff71e 	bne	r2,zero,8000e90 <___vfprintf_internal_r+0x448>
 8000eb4:	003f4106 	br	8000bbc <___vfprintf_internal_r+0x174>
 8000eb8:	b7000003 	ldbu	fp,0(r22)
 8000ebc:	e2803fcc 	andi	r10,fp,255
 8000ec0:	5280201c 	xori	r10,r10,128
 8000ec4:	63000114 	ori	r12,r12,4
 8000ec8:	52bfe004 	addi	r10,r10,-128
 8000ecc:	003f3906 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8000ed0:	01000044 	movi	r4,1
 8000ed4:	01400ac4 	movi	r5,43
 8000ed8:	b2800007 	ldb	r10,0(r22)
 8000edc:	003f3506 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8000ee0:	d8800617 	ldw	r2,24(sp)
 8000ee4:	b7000003 	ldbu	fp,0(r22)
 8000ee8:	14000017 	ldw	r16,0(r2)
 8000eec:	10800104 	addi	r2,r2,4
 8000ef0:	8004da16 	blt	r16,zero,800225c <___vfprintf_internal_r+0x1814>
 8000ef4:	d8800615 	stw	r2,24(sp)
 8000ef8:	e2803fcc 	andi	r10,fp,255
 8000efc:	5280201c 	xori	r10,r10,128
 8000f00:	52bfe004 	addi	r10,r10,-128
 8000f04:	003f2b06 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8000f08:	63000054 	ori	r12,r12,1
 8000f0c:	b2800007 	ldb	r10,0(r22)
 8000f10:	003f2806 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8000f14:	28803fcc 	andi	r2,r5,255
 8000f18:	1080201c 	xori	r2,r2,128
 8000f1c:	10bfe004 	addi	r2,r2,-128
 8000f20:	b7000003 	ldbu	fp,0(r22)
 8000f24:	103ff41e 	bne	r2,zero,8000ef8 <___vfprintf_internal_r+0x4b0>
 8000f28:	e2803fcc 	andi	r10,fp,255
 8000f2c:	5280201c 	xori	r10,r10,128
 8000f30:	01000044 	movi	r4,1
 8000f34:	01400804 	movi	r5,32
 8000f38:	52bfe004 	addi	r10,r10,-128
 8000f3c:	003f1d06 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8000f40:	21003fcc 	andi	r4,r4,255
 8000f44:	2006b81e 	bne	r4,zero,8002a28 <___vfprintf_internal_r+0x1fe0>
 8000f48:	00820074 	movhi	r2,2049
 8000f4c:	10befc04 	addi	r2,r2,-1040
 8000f50:	d8800c15 	stw	r2,48(sp)
 8000f54:	6080080c 	andi	r2,r12,32
 8000f58:	10017026 	beq	r2,zero,800151c <___vfprintf_internal_r+0xad4>
 8000f5c:	d8800617 	ldw	r2,24(sp)
 8000f60:	15400017 	ldw	r21,0(r2)
 8000f64:	15000117 	ldw	r20,4(r2)
 8000f68:	10800204 	addi	r2,r2,8
 8000f6c:	d8800615 	stw	r2,24(sp)
 8000f70:	6080004c 	andi	r2,r12,1
 8000f74:	10000226 	beq	r2,zero,8000f80 <___vfprintf_internal_r+0x538>
 8000f78:	ad04b03a 	or	r2,r21,r20
 8000f7c:	1004aa1e 	bne	r2,zero,8002228 <___vfprintf_internal_r+0x17e0>
 8000f80:	00800084 	movi	r2,2
 8000f84:	00018f06 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 8000f88:	21003fcc 	andi	r4,r4,255
 8000f8c:	2006a41e 	bne	r4,zero,8002a20 <___vfprintf_internal_r+0x1fd8>
 8000f90:	6080080c 	andi	r2,r12,32
 8000f94:	1001b41e 	bne	r2,zero,8001668 <___vfprintf_internal_r+0xc20>
 8000f98:	d8800617 	ldw	r2,24(sp)
 8000f9c:	60c0040c 	andi	r3,r12,16
 8000fa0:	15400017 	ldw	r21,0(r2)
 8000fa4:	10800104 	addi	r2,r2,4
 8000fa8:	18016e1e 	bne	r3,zero,8001564 <___vfprintf_internal_r+0xb1c>
 8000fac:	60c0100c 	andi	r3,r12,64
 8000fb0:	1805a526 	beq	r3,zero,8002648 <___vfprintf_internal_r+0x1c00>
 8000fb4:	d8800615 	stw	r2,24(sp)
 8000fb8:	ad7fffcc 	andi	r21,r21,65535
 8000fbc:	0029883a 	mov	r20,zero
 8000fc0:	00800044 	movi	r2,1
 8000fc4:	00017f06 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 8000fc8:	d8800617 	ldw	r2,24(sp)
 8000fcc:	d8001545 	stb	zero,85(sp)
 8000fd0:	14400017 	ldw	r17,0(r2)
 8000fd4:	14800104 	addi	r18,r2,4
 8000fd8:	8804ca26 	beq	r17,zero,8002304 <___vfprintf_internal_r+0x18bc>
 8000fdc:	da000e15 	stw	r8,56(sp)
 8000fe0:	db000715 	stw	r12,28(sp)
 8000fe4:	58bfffe0 	cmpeqi	r2,r11,-1
 8000fe8:	10056c1e 	bne	r2,zero,800259c <___vfprintf_internal_r+0x1b54>
 8000fec:	580d883a 	mov	r6,r11
 8000ff0:	000b883a 	mov	r5,zero
 8000ff4:	8809883a 	mov	r4,r17
 8000ff8:	dac00615 	stw	r11,24(sp)
 8000ffc:	8005c600 	call	8005c60 <memchr>
 8001000:	dac00617 	ldw	r11,24(sp)
 8001004:	db000717 	ldw	r12,28(sp)
 8001008:	da000e17 	ldw	r8,56(sp)
 800100c:	10066c26 	beq	r2,zero,80029c0 <___vfprintf_internal_r+0x1f78>
 8001010:	1469c83a 	sub	r20,r2,r17
 8001014:	a02b883a 	mov	r21,r20
 8001018:	a005fc16 	blt	r20,zero,800280c <___vfprintf_internal_r+0x1dc4>
 800101c:	dc800615 	stw	r18,24(sp)
 8001020:	00002606 	br	80010bc <___vfprintf_internal_r+0x674>
 8001024:	21003fcc 	andi	r4,r4,255
 8001028:	20067b1e 	bne	r4,zero,8002a18 <___vfprintf_internal_r+0x1fd0>
 800102c:	6080080c 	andi	r2,r12,32
 8001030:	10017f1e 	bne	r2,zero,8001630 <___vfprintf_internal_r+0xbe8>
 8001034:	d8800617 	ldw	r2,24(sp)
 8001038:	60c0040c 	andi	r3,r12,16
 800103c:	10800104 	addi	r2,r2,4
 8001040:	1801001e 	bne	r3,zero,8001444 <___vfprintf_internal_r+0x9fc>
 8001044:	60c0100c 	andi	r3,r12,64
 8001048:	1800fe26 	beq	r3,zero,8001444 <___vfprintf_internal_r+0x9fc>
 800104c:	d8c00617 	ldw	r3,24(sp)
 8001050:	d8800615 	stw	r2,24(sp)
 8001054:	1d40000f 	ldh	r21,0(r3)
 8001058:	a829d7fa 	srai	r20,r21,31
 800105c:	a005883a 	mov	r2,r20
 8001060:	1000fe16 	blt	r2,zero,800145c <___vfprintf_internal_r+0xa14>
 8001064:	58bfffd8 	cmpnei	r2,r11,-1
 8001068:	db401543 	ldbu	r13,85(sp)
 800106c:	10018526 	beq	r2,zero,8001684 <___vfprintf_internal_r+0xc3c>
 8001070:	00ffdfc4 	movi	r3,-129
 8001074:	ad04b03a 	or	r2,r21,r20
 8001078:	60d8703a 	and	r12,r12,r3
 800107c:	1001811e 	bne	r2,zero,8001684 <___vfprintf_internal_r+0xc3c>
 8001080:	5801831e 	bne	r11,zero,8001690 <___vfprintf_internal_r+0xc48>
 8001084:	6025883a 	mov	r18,r12
 8001088:	0017883a 	mov	r11,zero
 800108c:	0029883a 	mov	r20,zero
 8001090:	b823883a 	mov	r17,r23
 8001094:	00018306 	br	80016a4 <___vfprintf_internal_r+0xc5c>
 8001098:	d8c00617 	ldw	r3,24(sp)
 800109c:	d8001545 	stb	zero,85(sp)
 80010a0:	05400044 	movi	r21,1
 80010a4:	18800017 	ldw	r2,0(r3)
 80010a8:	18c00104 	addi	r3,r3,4
 80010ac:	d8c00615 	stw	r3,24(sp)
 80010b0:	d8801f05 	stb	r2,124(sp)
 80010b4:	05000044 	movi	r20,1
 80010b8:	dc401f04 	addi	r17,sp,124
 80010bc:	6025883a 	mov	r18,r12
 80010c0:	0017883a 	mov	r11,zero
 80010c4:	d8000715 	stw	zero,28(sp)
 80010c8:	9380008c 	andi	r14,r18,2
 80010cc:	70000126 	beq	r14,zero,80010d4 <___vfprintf_internal_r+0x68c>
 80010d0:	ad400084 	addi	r21,r21,2
 80010d4:	9340210c 	andi	r13,r18,132
 80010d8:	d8c01e17 	ldw	r3,120(sp)
 80010dc:	6800021e 	bne	r13,zero,80010e8 <___vfprintf_internal_r+0x6a0>
 80010e0:	854fc83a 	sub	r7,r16,r21
 80010e4:	01c2ce16 	blt	zero,r7,8001c20 <___vfprintf_internal_r+0x11d8>
 80010e8:	d8801547 	ldb	r2,85(sp)
 80010ec:	10000c26 	beq	r2,zero,8001120 <___vfprintf_internal_r+0x6d8>
 80010f0:	d8801d17 	ldw	r2,116(sp)
 80010f4:	d9001544 	addi	r4,sp,85
 80010f8:	18c00044 	addi	r3,r3,1
 80010fc:	10800044 	addi	r2,r2,1
 8001100:	41000015 	stw	r4,0(r8)
 8001104:	01000044 	movi	r4,1
 8001108:	d8801d15 	stw	r2,116(sp)
 800110c:	41000115 	stw	r4,4(r8)
 8001110:	d8c01e15 	stw	r3,120(sp)
 8001114:	10800208 	cmpgei	r2,r2,8
 8001118:	1002fb1e 	bne	r2,zero,8001d08 <___vfprintf_internal_r+0x12c0>
 800111c:	42000204 	addi	r8,r8,8
 8001120:	70000c26 	beq	r14,zero,8001154 <___vfprintf_internal_r+0x70c>
 8001124:	d8801d17 	ldw	r2,116(sp)
 8001128:	d9001584 	addi	r4,sp,86
 800112c:	18c00084 	addi	r3,r3,2
 8001130:	10800044 	addi	r2,r2,1
 8001134:	41000015 	stw	r4,0(r8)
 8001138:	01000084 	movi	r4,2
 800113c:	d8801d15 	stw	r2,116(sp)
 8001140:	41000115 	stw	r4,4(r8)
 8001144:	d8c01e15 	stw	r3,120(sp)
 8001148:	10800208 	cmpgei	r2,r2,8
 800114c:	1002fc1e 	bne	r2,zero,8001d40 <___vfprintf_internal_r+0x12f8>
 8001150:	42000204 	addi	r8,r8,8
 8001154:	6b402018 	cmpnei	r13,r13,128
 8001158:	6801cf26 	beq	r13,zero,8001898 <___vfprintf_internal_r+0xe50>
 800115c:	5d0fc83a 	sub	r7,r11,r20
 8001160:	01c20616 	blt	zero,r7,800197c <___vfprintf_internal_r+0xf34>
 8001164:	9080400c 	andi	r2,r18,256
 8001168:	10017c1e 	bne	r2,zero,800175c <___vfprintf_internal_r+0xd14>
 800116c:	d8801d17 	ldw	r2,116(sp)
 8001170:	1d07883a 	add	r3,r3,r20
 8001174:	44400015 	stw	r17,0(r8)
 8001178:	10800044 	addi	r2,r2,1
 800117c:	d8801d15 	stw	r2,116(sp)
 8001180:	45000115 	stw	r20,4(r8)
 8001184:	d8c01e15 	stw	r3,120(sp)
 8001188:	10800208 	cmpgei	r2,r2,8
 800118c:	1002571e 	bne	r2,zero,8001aec <___vfprintf_internal_r+0x10a4>
 8001190:	42000204 	addi	r8,r8,8
 8001194:	9480010c 	andi	r18,r18,4
 8001198:	90000226 	beq	r18,zero,80011a4 <___vfprintf_internal_r+0x75c>
 800119c:	8563c83a 	sub	r17,r16,r21
 80011a0:	04400916 	blt	zero,r17,80011c8 <___vfprintf_internal_r+0x780>
 80011a4:	8540010e 	bge	r16,r21,80011ac <___vfprintf_internal_r+0x764>
 80011a8:	a821883a 	mov	r16,r21
 80011ac:	d8800417 	ldw	r2,16(sp)
 80011b0:	1405883a 	add	r2,r2,r16
 80011b4:	d8800415 	stw	r2,16(sp)
 80011b8:	1802241e 	bne	r3,zero,8001a4c <___vfprintf_internal_r+0x1004>
 80011bc:	d8001d15 	stw	zero,116(sp)
 80011c0:	b811883a 	mov	r8,r23
 80011c4:	003e5506 	br	8000b1c <___vfprintf_internal_r+0xd4>
 80011c8:	03020074 	movhi	r12,2049
 80011cc:	89000450 	cmplti	r4,r17,17
 80011d0:	633f0784 	addi	r12,r12,-994
 80011d4:	d8801d17 	ldw	r2,116(sp)
 80011d8:	20001c1e 	bne	r4,zero,800124c <___vfprintf_internal_r+0x804>
 80011dc:	04800404 	movi	r18,16
 80011e0:	dd000517 	ldw	r20,20(sp)
 80011e4:	6039883a 	mov	fp,r12
 80011e8:	00000406 	br	80011fc <___vfprintf_internal_r+0x7b4>
 80011ec:	8c7ffc04 	addi	r17,r17,-16
 80011f0:	89000448 	cmpgei	r4,r17,17
 80011f4:	42000204 	addi	r8,r8,8
 80011f8:	20001326 	beq	r4,zero,8001248 <___vfprintf_internal_r+0x800>
 80011fc:	10800044 	addi	r2,r2,1
 8001200:	18c00404 	addi	r3,r3,16
 8001204:	47000015 	stw	fp,0(r8)
 8001208:	44800115 	stw	r18,4(r8)
 800120c:	d8c01e15 	stw	r3,120(sp)
 8001210:	d8801d15 	stw	r2,116(sp)
 8001214:	11000208 	cmpgei	r4,r2,8
 8001218:	203ff426 	beq	r4,zero,80011ec <___vfprintf_internal_r+0x7a4>
 800121c:	d9801c04 	addi	r6,sp,112
 8001220:	980b883a 	mov	r5,r19
 8001224:	a009883a 	mov	r4,r20
 8001228:	80071100 	call	8007110 <__sprint_r>
 800122c:	103ee51e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001230:	8c7ffc04 	addi	r17,r17,-16
 8001234:	89000448 	cmpgei	r4,r17,17
 8001238:	d8c01e17 	ldw	r3,120(sp)
 800123c:	d8801d17 	ldw	r2,116(sp)
 8001240:	b811883a 	mov	r8,r23
 8001244:	203fed1e 	bne	r4,zero,80011fc <___vfprintf_internal_r+0x7b4>
 8001248:	e019883a 	mov	r12,fp
 800124c:	10800044 	addi	r2,r2,1
 8001250:	1c47883a 	add	r3,r3,r17
 8001254:	d8801d15 	stw	r2,116(sp)
 8001258:	43000015 	stw	r12,0(r8)
 800125c:	44400115 	stw	r17,4(r8)
 8001260:	d8c01e15 	stw	r3,120(sp)
 8001264:	10800210 	cmplti	r2,r2,8
 8001268:	103fce1e 	bne	r2,zero,80011a4 <___vfprintf_internal_r+0x75c>
 800126c:	d9000517 	ldw	r4,20(sp)
 8001270:	d9801c04 	addi	r6,sp,112
 8001274:	980b883a 	mov	r5,r19
 8001278:	80071100 	call	8007110 <__sprint_r>
 800127c:	103ed11e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001280:	d8c01e17 	ldw	r3,120(sp)
 8001284:	003fc706 	br	80011a4 <___vfprintf_internal_r+0x75c>
 8001288:	21003fcc 	andi	r4,r4,255
 800128c:	2005de1e 	bne	r4,zero,8002a08 <___vfprintf_internal_r+0x1fc0>
 8001290:	6080080c 	andi	r2,r12,32
 8001294:	1000ed1e 	bne	r2,zero,800164c <___vfprintf_internal_r+0xc04>
 8001298:	d8800617 	ldw	r2,24(sp)
 800129c:	60c0040c 	andi	r3,r12,16
 80012a0:	15400017 	ldw	r21,0(r2)
 80012a4:	10800104 	addi	r2,r2,4
 80012a8:	18001e1e 	bne	r3,zero,8001324 <___vfprintf_internal_r+0x8dc>
 80012ac:	60c0100c 	andi	r3,r12,64
 80012b0:	1804e126 	beq	r3,zero,8002638 <___vfprintf_internal_r+0x1bf0>
 80012b4:	d8800615 	stw	r2,24(sp)
 80012b8:	ad7fffcc 	andi	r21,r21,65535
 80012bc:	0029883a 	mov	r20,zero
 80012c0:	0005883a 	mov	r2,zero
 80012c4:	0000bf06 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 80012c8:	21003fcc 	andi	r4,r4,255
 80012cc:	2005d01e 	bne	r4,zero,8002a10 <___vfprintf_internal_r+0x1fc8>
 80012d0:	d9000617 	ldw	r4,24(sp)
 80012d4:	6080080c 	andi	r2,r12,32
 80012d8:	20c00104 	addi	r3,r4,4
 80012dc:	1003d81e 	bne	r2,zero,8002240 <___vfprintf_internal_r+0x17f8>
 80012e0:	6080040c 	andi	r2,r12,16
 80012e4:	1004321e 	bne	r2,zero,80023b0 <___vfprintf_internal_r+0x1968>
 80012e8:	6300100c 	andi	r12,r12,64
 80012ec:	60043026 	beq	r12,zero,80023b0 <___vfprintf_internal_r+0x1968>
 80012f0:	d8800617 	ldw	r2,24(sp)
 80012f4:	d8c00615 	stw	r3,24(sp)
 80012f8:	d8c00417 	ldw	r3,16(sp)
 80012fc:	10800017 	ldw	r2,0(r2)
 8001300:	10c0000d 	sth	r3,0(r2)
 8001304:	003e0506 	br	8000b1c <___vfprintf_internal_r+0xd4>
 8001308:	21003fcc 	andi	r4,r4,255
 800130c:	2005c81e 	bne	r4,zero,8002a30 <___vfprintf_internal_r+0x1fe8>
 8001310:	6080080c 	andi	r2,r12,32
 8001314:	63000414 	ori	r12,r12,16
 8001318:	1000cc1e 	bne	r2,zero,800164c <___vfprintf_internal_r+0xc04>
 800131c:	d8800617 	ldw	r2,24(sp)
 8001320:	10800104 	addi	r2,r2,4
 8001324:	d8c00617 	ldw	r3,24(sp)
 8001328:	0029883a 	mov	r20,zero
 800132c:	d8800615 	stw	r2,24(sp)
 8001330:	1d400017 	ldw	r21,0(r3)
 8001334:	0005883a 	mov	r2,zero
 8001338:	0000a206 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 800133c:	63000214 	ori	r12,r12,8
 8001340:	b2800007 	ldb	r10,0(r22)
 8001344:	003e1b06 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8001348:	21003fcc 	andi	r4,r4,255
 800134c:	2005bc1e 	bne	r4,zero,8002a40 <___vfprintf_internal_r+0x1ff8>
 8001350:	d8c00617 	ldw	r3,24(sp)
 8001354:	00a00034 	movhi	r2,32768
 8001358:	10bfffc4 	addi	r2,r2,-1
 800135c:	1d000117 	ldw	r20,4(r3)
 8001360:	1c800017 	ldw	r18,0(r3)
 8001364:	01dffc34 	movhi	r7,32752
 8001368:	a0a2703a 	and	r17,r20,r2
 800136c:	01bfffc4 	movi	r6,-1
 8001370:	18800204 	addi	r2,r3,8
 8001374:	39ffffc4 	addi	r7,r7,-1
 8001378:	9009883a 	mov	r4,r18
 800137c:	880b883a 	mov	r5,r17
 8001380:	da000f15 	stw	r8,60(sp)
 8001384:	dac00e15 	stw	r11,56(sp)
 8001388:	db000715 	stw	r12,28(sp)
 800138c:	dd000a15 	stw	r20,40(sp)
 8001390:	dc800915 	stw	r18,36(sp)
 8001394:	d8800615 	stw	r2,24(sp)
 8001398:	800cff40 	call	800cff4 <__unorddf2>
 800139c:	db000717 	ldw	r12,28(sp)
 80013a0:	dac00e17 	ldw	r11,56(sp)
 80013a4:	da000f17 	ldw	r8,60(sp)
 80013a8:	1003191e 	bne	r2,zero,8002010 <___vfprintf_internal_r+0x15c8>
 80013ac:	01dffc34 	movhi	r7,32752
 80013b0:	01bfffc4 	movi	r6,-1
 80013b4:	39ffffc4 	addi	r7,r7,-1
 80013b8:	9009883a 	mov	r4,r18
 80013bc:	880b883a 	mov	r5,r17
 80013c0:	800bdb80 	call	800bdb8 <__ledf2>
 80013c4:	db000717 	ldw	r12,28(sp)
 80013c8:	dac00e17 	ldw	r11,56(sp)
 80013cc:	da000f17 	ldw	r8,60(sp)
 80013d0:	00830f0e 	bge	zero,r2,8002010 <___vfprintf_internal_r+0x15c8>
 80013d4:	000d883a 	mov	r6,zero
 80013d8:	000f883a 	mov	r7,zero
 80013dc:	9009883a 	mov	r4,r18
 80013e0:	a00b883a 	mov	r5,r20
 80013e4:	da000e15 	stw	r8,56(sp)
 80013e8:	800bdb80 	call	800bdb8 <__ledf2>
 80013ec:	db000717 	ldw	r12,28(sp)
 80013f0:	da000e17 	ldw	r8,56(sp)
 80013f4:	1004e716 	blt	r2,zero,8002794 <___vfprintf_internal_r+0x1d4c>
 80013f8:	db401543 	ldbu	r13,85(sp)
 80013fc:	e0801210 	cmplti	r2,fp,72
 8001400:	1004d11e 	bne	r2,zero,8002748 <___vfprintf_internal_r+0x1d00>
 8001404:	04420074 	movhi	r17,2049
 8001408:	8c7ef404 	addi	r17,r17,-1072
 800140c:	04bfdfc4 	movi	r18,-129
 8001410:	64a4703a 	and	r18,r12,r18
 8001414:	054000c4 	movi	r21,3
 8001418:	050000c4 	movi	r20,3
 800141c:	0017883a 	mov	r11,zero
 8001420:	d8000715 	stw	zero,28(sp)
 8001424:	0000a306 	br	80016b4 <___vfprintf_internal_r+0xc6c>
 8001428:	21003fcc 	andi	r4,r4,255
 800142c:	2005821e 	bne	r4,zero,8002a38 <___vfprintf_internal_r+0x1ff0>
 8001430:	6080080c 	andi	r2,r12,32
 8001434:	63000414 	ori	r12,r12,16
 8001438:	10007d1e 	bne	r2,zero,8001630 <___vfprintf_internal_r+0xbe8>
 800143c:	d8800617 	ldw	r2,24(sp)
 8001440:	10800104 	addi	r2,r2,4
 8001444:	d8c00617 	ldw	r3,24(sp)
 8001448:	1d400017 	ldw	r21,0(r3)
 800144c:	d8800615 	stw	r2,24(sp)
 8001450:	a829d7fa 	srai	r20,r21,31
 8001454:	a005883a 	mov	r2,r20
 8001458:	103f020e 	bge	r2,zero,8001064 <___vfprintf_internal_r+0x61c>
 800145c:	056bc83a 	sub	r21,zero,r21
 8001460:	a804c03a 	cmpne	r2,r21,zero
 8001464:	0529c83a 	sub	r20,zero,r20
 8001468:	a0a9c83a 	sub	r20,r20,r2
 800146c:	00800b44 	movi	r2,45
 8001470:	d8801545 	stb	r2,85(sp)
 8001474:	58ffffe0 	cmpeqi	r3,r11,-1
 8001478:	03400b44 	movi	r13,45
 800147c:	00800044 	movi	r2,1
 8001480:	18005426 	beq	r3,zero,80015d4 <___vfprintf_internal_r+0xb8c>
 8001484:	10c00060 	cmpeqi	r3,r2,1
 8001488:	18007e1e 	bne	r3,zero,8001684 <___vfprintf_internal_r+0xc3c>
 800148c:	108000a0 	cmpeqi	r2,r2,2
 8001490:	1002371e 	bne	r2,zero,8001d70 <___vfprintf_internal_r+0x1328>
 8001494:	b807883a 	mov	r3,r23
 8001498:	00000106 	br	80014a0 <___vfprintf_internal_r+0xa58>
 800149c:	8807883a 	mov	r3,r17
 80014a0:	a808d0fa 	srli	r4,r21,3
 80014a4:	a00a977a 	slli	r5,r20,29
 80014a8:	a028d0fa 	srli	r20,r20,3
 80014ac:	ad4001cc 	andi	r21,r21,7
 80014b0:	a8800c04 	addi	r2,r21,48
 80014b4:	292ab03a 	or	r21,r5,r4
 80014b8:	18bfffc5 	stb	r2,-1(r3)
 80014bc:	ad08b03a 	or	r4,r21,r20
 80014c0:	1c7fffc4 	addi	r17,r3,-1
 80014c4:	203ff51e 	bne	r4,zero,800149c <___vfprintf_internal_r+0xa54>
 80014c8:	6100004c 	andi	r4,r12,1
 80014cc:	2000a026 	beq	r4,zero,8001750 <___vfprintf_internal_r+0xd08>
 80014d0:	10803fcc 	andi	r2,r2,255
 80014d4:	1080201c 	xori	r2,r2,128
 80014d8:	10bfe004 	addi	r2,r2,-128
 80014dc:	10800c18 	cmpnei	r2,r2,48
 80014e0:	10009b26 	beq	r2,zero,8001750 <___vfprintf_internal_r+0xd08>
 80014e4:	18ffff84 	addi	r3,r3,-2
 80014e8:	00800c04 	movi	r2,48
 80014ec:	88bfffc5 	stb	r2,-1(r17)
 80014f0:	b8e9c83a 	sub	r20,r23,r3
 80014f4:	6025883a 	mov	r18,r12
 80014f8:	1823883a 	mov	r17,r3
 80014fc:	00006906 	br	80016a4 <___vfprintf_internal_r+0xc5c>
 8001500:	21003fcc 	andi	r4,r4,255
 8001504:	20053e1e 	bne	r4,zero,8002a00 <___vfprintf_internal_r+0x1fb8>
 8001508:	00820074 	movhi	r2,2049
 800150c:	10bef704 	addi	r2,r2,-1060
 8001510:	d8800c15 	stw	r2,48(sp)
 8001514:	6080080c 	andi	r2,r12,32
 8001518:	103e901e 	bne	r2,zero,8000f5c <___vfprintf_internal_r+0x514>
 800151c:	d8c00617 	ldw	r3,24(sp)
 8001520:	6080040c 	andi	r2,r12,16
 8001524:	1d400017 	ldw	r21,0(r3)
 8001528:	18c00104 	addi	r3,r3,4
 800152c:	d8c00615 	stw	r3,24(sp)
 8001530:	1002b11e 	bne	r2,zero,8001ff8 <___vfprintf_internal_r+0x15b0>
 8001534:	6080100c 	andi	r2,r12,64
 8001538:	1002af26 	beq	r2,zero,8001ff8 <___vfprintf_internal_r+0x15b0>
 800153c:	ad7fffcc 	andi	r21,r21,65535
 8001540:	0029883a 	mov	r20,zero
 8001544:	003e8a06 	br	8000f70 <___vfprintf_internal_r+0x528>
 8001548:	21003fcc 	andi	r4,r4,255
 800154c:	20053e1e 	bne	r4,zero,8002a48 <___vfprintf_internal_r+0x2000>
 8001550:	6080080c 	andi	r2,r12,32
 8001554:	63000414 	ori	r12,r12,16
 8001558:	1000431e 	bne	r2,zero,8001668 <___vfprintf_internal_r+0xc20>
 800155c:	d8800617 	ldw	r2,24(sp)
 8001560:	10800104 	addi	r2,r2,4
 8001564:	d8c00617 	ldw	r3,24(sp)
 8001568:	0029883a 	mov	r20,zero
 800156c:	d8800615 	stw	r2,24(sp)
 8001570:	1d400017 	ldw	r21,0(r3)
 8001574:	00800044 	movi	r2,1
 8001578:	00001206 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 800157c:	63000814 	ori	r12,r12,32
 8001580:	b2800007 	ldb	r10,0(r22)
 8001584:	003d8b06 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8001588:	d8c00617 	ldw	r3,24(sp)
 800158c:	00800c04 	movi	r2,48
 8001590:	d8801585 	stb	r2,86(sp)
 8001594:	00801e04 	movi	r2,120
 8001598:	01020074 	movhi	r4,2049
 800159c:	d88015c5 	stb	r2,87(sp)
 80015a0:	1d400017 	ldw	r21,0(r3)
 80015a4:	18800104 	addi	r2,r3,4
 80015a8:	d8800615 	stw	r2,24(sp)
 80015ac:	20befc04 	addi	r2,r4,-1040
 80015b0:	d8800c15 	stw	r2,48(sp)
 80015b4:	0029883a 	mov	r20,zero
 80015b8:	63000094 	ori	r12,r12,2
 80015bc:	00800084 	movi	r2,2
 80015c0:	07001e04 	movi	fp,120
 80015c4:	d8001545 	stb	zero,85(sp)
 80015c8:	58ffffe0 	cmpeqi	r3,r11,-1
 80015cc:	001b883a 	mov	r13,zero
 80015d0:	183fac1e 	bne	r3,zero,8001484 <___vfprintf_internal_r+0xa3c>
 80015d4:	04bfdfc4 	movi	r18,-129
 80015d8:	ad06b03a 	or	r3,r21,r20
 80015dc:	64a4703a 	and	r18,r12,r18
 80015e0:	18018d1e 	bne	r3,zero,8001c18 <___vfprintf_internal_r+0x11d0>
 80015e4:	5803bb1e 	bne	r11,zero,80024d4 <___vfprintf_internal_r+0x1a8c>
 80015e8:	103ea71e 	bne	r2,zero,8001088 <___vfprintf_internal_r+0x640>
 80015ec:	6500004c 	andi	r20,r12,1
 80015f0:	a0028526 	beq	r20,zero,8002008 <___vfprintf_internal_r+0x15c0>
 80015f4:	00800c04 	movi	r2,48
 80015f8:	d88028c5 	stb	r2,163(sp)
 80015fc:	dc4028c4 	addi	r17,sp,163
 8001600:	00002806 	br	80016a4 <___vfprintf_internal_r+0xc5c>
 8001604:	b2800007 	ldb	r10,0(r22)
 8001608:	50801b18 	cmpnei	r2,r10,108
 800160c:	10032c26 	beq	r2,zero,80022c0 <___vfprintf_internal_r+0x1878>
 8001610:	63000414 	ori	r12,r12,16
 8001614:	003d6706 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8001618:	63001014 	ori	r12,r12,64
 800161c:	b2800007 	ldb	r10,0(r22)
 8001620:	003d6406 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 8001624:	d9000517 	ldw	r4,20(sp)
 8001628:	8004cc00 	call	8004cc0 <__sinit>
 800162c:	003d1f06 	br	8000aac <___vfprintf_internal_r+0x64>
 8001630:	d8c00617 	ldw	r3,24(sp)
 8001634:	18800117 	ldw	r2,4(r3)
 8001638:	1d400017 	ldw	r21,0(r3)
 800163c:	18c00204 	addi	r3,r3,8
 8001640:	d8c00615 	stw	r3,24(sp)
 8001644:	1029883a 	mov	r20,r2
 8001648:	003e8506 	br	8001060 <___vfprintf_internal_r+0x618>
 800164c:	d8c00617 	ldw	r3,24(sp)
 8001650:	0005883a 	mov	r2,zero
 8001654:	1d400017 	ldw	r21,0(r3)
 8001658:	1d000117 	ldw	r20,4(r3)
 800165c:	18c00204 	addi	r3,r3,8
 8001660:	d8c00615 	stw	r3,24(sp)
 8001664:	003fd706 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 8001668:	d8c00617 	ldw	r3,24(sp)
 800166c:	00800044 	movi	r2,1
 8001670:	1d400017 	ldw	r21,0(r3)
 8001674:	1d000117 	ldw	r20,4(r3)
 8001678:	18c00204 	addi	r3,r3,8
 800167c:	d8c00615 	stw	r3,24(sp)
 8001680:	003fd006 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 8001684:	a000111e 	bne	r20,zero,80016cc <___vfprintf_internal_r+0xc84>
 8001688:	a88002a8 	cmpgeui	r2,r21,10
 800168c:	10000f1e 	bne	r2,zero,80016cc <___vfprintf_internal_r+0xc84>
 8001690:	ad400c04 	addi	r21,r21,48
 8001694:	dd4028c5 	stb	r21,163(sp)
 8001698:	6025883a 	mov	r18,r12
 800169c:	05000044 	movi	r20,1
 80016a0:	dc4028c4 	addi	r17,sp,163
 80016a4:	582b883a 	mov	r21,r11
 80016a8:	5d00010e 	bge	r11,r20,80016b0 <___vfprintf_internal_r+0xc68>
 80016ac:	a02b883a 	mov	r21,r20
 80016b0:	d8000715 	stw	zero,28(sp)
 80016b4:	6b403fcc 	andi	r13,r13,255
 80016b8:	6b40201c 	xori	r13,r13,128
 80016bc:	6b7fe004 	addi	r13,r13,-128
 80016c0:	683e8126 	beq	r13,zero,80010c8 <___vfprintf_internal_r+0x680>
 80016c4:	ad400044 	addi	r21,r21,1
 80016c8:	003e7f06 	br	80010c8 <___vfprintf_internal_r+0x680>
 80016cc:	dc000e15 	stw	r16,56(sp)
 80016d0:	b823883a 	mov	r17,r23
 80016d4:	a021883a 	mov	r16,r20
 80016d8:	db000715 	stw	r12,28(sp)
 80016dc:	9829883a 	mov	r20,r19
 80016e0:	dac00f15 	stw	r11,60(sp)
 80016e4:	4025883a 	mov	r18,r8
 80016e8:	6827883a 	mov	r19,r13
 80016ec:	00000206 	br	80016f8 <___vfprintf_internal_r+0xcb0>
 80016f0:	102b883a 	mov	r21,r2
 80016f4:	1821883a 	mov	r16,r3
 80016f8:	a809883a 	mov	r4,r21
 80016fc:	800b883a 	mov	r5,r16
 8001700:	01800284 	movi	r6,10
 8001704:	000f883a 	mov	r7,zero
 8001708:	800a1c40 	call	800a1c4 <__umoddi3>
 800170c:	10800c04 	addi	r2,r2,48
 8001710:	8c7fffc4 	addi	r17,r17,-1
 8001714:	a809883a 	mov	r4,r21
 8001718:	800b883a 	mov	r5,r16
 800171c:	88800005 	stb	r2,0(r17)
 8001720:	01800284 	movi	r6,10
 8001724:	000f883a 	mov	r7,zero
 8001728:	8009ba80 	call	8009ba8 <__udivdi3>
 800172c:	803ff01e 	bne	r16,zero,80016f0 <___vfprintf_internal_r+0xca8>
 8001730:	ad4002a8 	cmpgeui	r21,r21,10
 8001734:	a83fee1e 	bne	r21,zero,80016f0 <___vfprintf_internal_r+0xca8>
 8001738:	db000717 	ldw	r12,28(sp)
 800173c:	dc000e17 	ldw	r16,56(sp)
 8001740:	dac00f17 	ldw	r11,60(sp)
 8001744:	981b883a 	mov	r13,r19
 8001748:	9011883a 	mov	r8,r18
 800174c:	a027883a 	mov	r19,r20
 8001750:	bc69c83a 	sub	r20,r23,r17
 8001754:	6025883a 	mov	r18,r12
 8001758:	003fd206 	br	80016a4 <___vfprintf_internal_r+0xc5c>
 800175c:	e2801990 	cmplti	r10,fp,102
 8001760:	5000ea1e 	bne	r10,zero,8001b0c <___vfprintf_internal_r+0x10c4>
 8001764:	d9000917 	ldw	r4,36(sp)
 8001768:	d9400a17 	ldw	r5,40(sp)
 800176c:	000d883a 	mov	r6,zero
 8001770:	000f883a 	mov	r7,zero
 8001774:	da000f15 	stw	r8,60(sp)
 8001778:	d8c00e15 	stw	r3,56(sp)
 800177c:	800bc480 	call	800bc48 <__eqdf2>
 8001780:	d8c00e17 	ldw	r3,56(sp)
 8001784:	da000f17 	ldw	r8,60(sp)
 8001788:	1001891e 	bne	r2,zero,8001db0 <___vfprintf_internal_r+0x1368>
 800178c:	d8801d17 	ldw	r2,116(sp)
 8001790:	01020074 	movhi	r4,2049
 8001794:	213f0304 	addi	r4,r4,-1012
 8001798:	10800044 	addi	r2,r2,1
 800179c:	18c00044 	addi	r3,r3,1
 80017a0:	41000015 	stw	r4,0(r8)
 80017a4:	01000044 	movi	r4,1
 80017a8:	d8801d15 	stw	r2,116(sp)
 80017ac:	41000115 	stw	r4,4(r8)
 80017b0:	d8c01e15 	stw	r3,120(sp)
 80017b4:	10800208 	cmpgei	r2,r2,8
 80017b8:	1003351e 	bne	r2,zero,8002490 <___vfprintf_internal_r+0x1a48>
 80017bc:	42000204 	addi	r8,r8,8
 80017c0:	d8801617 	ldw	r2,88(sp)
 80017c4:	d8c00817 	ldw	r3,32(sp)
 80017c8:	10c00416 	blt	r2,r3,80017dc <___vfprintf_internal_r+0xd94>
 80017cc:	9080004c 	andi	r2,r18,1
 80017d0:	1000021e 	bne	r2,zero,80017dc <___vfprintf_internal_r+0xd94>
 80017d4:	d8c01e17 	ldw	r3,120(sp)
 80017d8:	003e6e06 	br	8001194 <___vfprintf_internal_r+0x74c>
 80017dc:	d8800d17 	ldw	r2,52(sp)
 80017e0:	d8c01e17 	ldw	r3,120(sp)
 80017e4:	d9000b17 	ldw	r4,44(sp)
 80017e8:	40800015 	stw	r2,0(r8)
 80017ec:	d8801d17 	ldw	r2,116(sp)
 80017f0:	20c7883a 	add	r3,r4,r3
 80017f4:	41000115 	stw	r4,4(r8)
 80017f8:	10800044 	addi	r2,r2,1
 80017fc:	d8801d15 	stw	r2,116(sp)
 8001800:	d8c01e15 	stw	r3,120(sp)
 8001804:	10800208 	cmpgei	r2,r2,8
 8001808:	1002b41e 	bne	r2,zero,80022dc <___vfprintf_internal_r+0x1894>
 800180c:	42000204 	addi	r8,r8,8
 8001810:	d8800817 	ldw	r2,32(sp)
 8001814:	147fffc4 	addi	r17,r2,-1
 8001818:	047e5e0e 	bge	zero,r17,8001194 <___vfprintf_internal_r+0x74c>
 800181c:	03020074 	movhi	r12,2049
 8001820:	89000450 	cmplti	r4,r17,17
 8001824:	633f0384 	addi	r12,r12,-1010
 8001828:	d8801d17 	ldw	r2,116(sp)
 800182c:	2003791e 	bne	r4,zero,8002614 <___vfprintf_internal_r+0x1bcc>
 8001830:	dc000715 	stw	r16,28(sp)
 8001834:	05000404 	movi	r20,16
 8001838:	df000517 	ldw	fp,20(sp)
 800183c:	6021883a 	mov	r16,r12
 8001840:	00000406 	br	8001854 <___vfprintf_internal_r+0xe0c>
 8001844:	42000204 	addi	r8,r8,8
 8001848:	8c7ffc04 	addi	r17,r17,-16
 800184c:	89000448 	cmpgei	r4,r17,17
 8001850:	20036e26 	beq	r4,zero,800260c <___vfprintf_internal_r+0x1bc4>
 8001854:	10800044 	addi	r2,r2,1
 8001858:	18c00404 	addi	r3,r3,16
 800185c:	44000015 	stw	r16,0(r8)
 8001860:	45000115 	stw	r20,4(r8)
 8001864:	d8c01e15 	stw	r3,120(sp)
 8001868:	d8801d15 	stw	r2,116(sp)
 800186c:	11000208 	cmpgei	r4,r2,8
 8001870:	203ff426 	beq	r4,zero,8001844 <___vfprintf_internal_r+0xdfc>
 8001874:	d9801c04 	addi	r6,sp,112
 8001878:	980b883a 	mov	r5,r19
 800187c:	e009883a 	mov	r4,fp
 8001880:	80071100 	call	8007110 <__sprint_r>
 8001884:	103d4f1e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001888:	d8c01e17 	ldw	r3,120(sp)
 800188c:	d8801d17 	ldw	r2,116(sp)
 8001890:	b811883a 	mov	r8,r23
 8001894:	003fec06 	br	8001848 <___vfprintf_internal_r+0xe00>
 8001898:	854fc83a 	sub	r7,r16,r21
 800189c:	01fe2f0e 	bge	zero,r7,800115c <___vfprintf_internal_r+0x714>
 80018a0:	03020074 	movhi	r12,2049
 80018a4:	39000450 	cmplti	r4,r7,17
 80018a8:	633f0384 	addi	r12,r12,-1010
 80018ac:	d8801d17 	ldw	r2,116(sp)
 80018b0:	2000271e 	bne	r4,zero,8001950 <___vfprintf_internal_r+0xf08>
 80018b4:	dc400e15 	stw	r17,56(sp)
 80018b8:	dc800f15 	stw	r18,60(sp)
 80018bc:	dc001015 	stw	r16,64(sp)
 80018c0:	03400404 	movi	r13,16
 80018c4:	3821883a 	mov	r16,r7
 80018c8:	dac01215 	stw	r11,72(sp)
 80018cc:	dc400517 	ldw	r17,20(sp)
 80018d0:	6025883a 	mov	r18,r12
 80018d4:	00000406 	br	80018e8 <___vfprintf_internal_r+0xea0>
 80018d8:	843ffc04 	addi	r16,r16,-16
 80018dc:	81000448 	cmpgei	r4,r16,17
 80018e0:	42000204 	addi	r8,r8,8
 80018e4:	20001426 	beq	r4,zero,8001938 <___vfprintf_internal_r+0xef0>
 80018e8:	10800044 	addi	r2,r2,1
 80018ec:	18c00404 	addi	r3,r3,16
 80018f0:	44800015 	stw	r18,0(r8)
 80018f4:	43400115 	stw	r13,4(r8)
 80018f8:	d8c01e15 	stw	r3,120(sp)
 80018fc:	d8801d15 	stw	r2,116(sp)
 8001900:	11000208 	cmpgei	r4,r2,8
 8001904:	203ff426 	beq	r4,zero,80018d8 <___vfprintf_internal_r+0xe90>
 8001908:	d9801c04 	addi	r6,sp,112
 800190c:	980b883a 	mov	r5,r19
 8001910:	8809883a 	mov	r4,r17
 8001914:	80071100 	call	8007110 <__sprint_r>
 8001918:	103d2a1e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 800191c:	843ffc04 	addi	r16,r16,-16
 8001920:	81000448 	cmpgei	r4,r16,17
 8001924:	d8c01e17 	ldw	r3,120(sp)
 8001928:	d8801d17 	ldw	r2,116(sp)
 800192c:	b811883a 	mov	r8,r23
 8001930:	03400404 	movi	r13,16
 8001934:	203fec1e 	bne	r4,zero,80018e8 <___vfprintf_internal_r+0xea0>
 8001938:	800f883a 	mov	r7,r16
 800193c:	9019883a 	mov	r12,r18
 8001940:	dc400e17 	ldw	r17,56(sp)
 8001944:	dc001017 	ldw	r16,64(sp)
 8001948:	dac01217 	ldw	r11,72(sp)
 800194c:	dc800f17 	ldw	r18,60(sp)
 8001950:	10800044 	addi	r2,r2,1
 8001954:	19c7883a 	add	r3,r3,r7
 8001958:	d8801d15 	stw	r2,116(sp)
 800195c:	43000015 	stw	r12,0(r8)
 8001960:	41c00115 	stw	r7,4(r8)
 8001964:	d8c01e15 	stw	r3,120(sp)
 8001968:	10800208 	cmpgei	r2,r2,8
 800196c:	1002cf1e 	bne	r2,zero,80024ac <___vfprintf_internal_r+0x1a64>
 8001970:	5d0fc83a 	sub	r7,r11,r20
 8001974:	42000204 	addi	r8,r8,8
 8001978:	01fdfa0e 	bge	zero,r7,8001164 <___vfprintf_internal_r+0x71c>
 800197c:	03020074 	movhi	r12,2049
 8001980:	39000450 	cmplti	r4,r7,17
 8001984:	633f0384 	addi	r12,r12,-1010
 8001988:	d8801d17 	ldw	r2,116(sp)
 800198c:	2000251e 	bne	r4,zero,8001a24 <___vfprintf_internal_r+0xfdc>
 8001990:	dc400e15 	stw	r17,56(sp)
 8001994:	dc800f15 	stw	r18,60(sp)
 8001998:	dc001015 	stw	r16,64(sp)
 800199c:	02c00404 	movi	r11,16
 80019a0:	3821883a 	mov	r16,r7
 80019a4:	dc400517 	ldw	r17,20(sp)
 80019a8:	6025883a 	mov	r18,r12
 80019ac:	00000406 	br	80019c0 <___vfprintf_internal_r+0xf78>
 80019b0:	843ffc04 	addi	r16,r16,-16
 80019b4:	81000448 	cmpgei	r4,r16,17
 80019b8:	42000204 	addi	r8,r8,8
 80019bc:	20001426 	beq	r4,zero,8001a10 <___vfprintf_internal_r+0xfc8>
 80019c0:	10800044 	addi	r2,r2,1
 80019c4:	18c00404 	addi	r3,r3,16
 80019c8:	44800015 	stw	r18,0(r8)
 80019cc:	42c00115 	stw	r11,4(r8)
 80019d0:	d8c01e15 	stw	r3,120(sp)
 80019d4:	d8801d15 	stw	r2,116(sp)
 80019d8:	11000208 	cmpgei	r4,r2,8
 80019dc:	203ff426 	beq	r4,zero,80019b0 <___vfprintf_internal_r+0xf68>
 80019e0:	d9801c04 	addi	r6,sp,112
 80019e4:	980b883a 	mov	r5,r19
 80019e8:	8809883a 	mov	r4,r17
 80019ec:	80071100 	call	8007110 <__sprint_r>
 80019f0:	103cf41e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80019f4:	843ffc04 	addi	r16,r16,-16
 80019f8:	81000448 	cmpgei	r4,r16,17
 80019fc:	d8c01e17 	ldw	r3,120(sp)
 8001a00:	d8801d17 	ldw	r2,116(sp)
 8001a04:	b811883a 	mov	r8,r23
 8001a08:	02c00404 	movi	r11,16
 8001a0c:	203fec1e 	bne	r4,zero,80019c0 <___vfprintf_internal_r+0xf78>
 8001a10:	800f883a 	mov	r7,r16
 8001a14:	9019883a 	mov	r12,r18
 8001a18:	dc400e17 	ldw	r17,56(sp)
 8001a1c:	dc001017 	ldw	r16,64(sp)
 8001a20:	dc800f17 	ldw	r18,60(sp)
 8001a24:	10800044 	addi	r2,r2,1
 8001a28:	19c7883a 	add	r3,r3,r7
 8001a2c:	d8801d15 	stw	r2,116(sp)
 8001a30:	43000015 	stw	r12,0(r8)
 8001a34:	41c00115 	stw	r7,4(r8)
 8001a38:	d8c01e15 	stw	r3,120(sp)
 8001a3c:	10800208 	cmpgei	r2,r2,8
 8001a40:	1001651e 	bne	r2,zero,8001fd8 <___vfprintf_internal_r+0x1590>
 8001a44:	42000204 	addi	r8,r8,8
 8001a48:	003dc606 	br	8001164 <___vfprintf_internal_r+0x71c>
 8001a4c:	d9000517 	ldw	r4,20(sp)
 8001a50:	d9801c04 	addi	r6,sp,112
 8001a54:	980b883a 	mov	r5,r19
 8001a58:	80071100 	call	8007110 <__sprint_r>
 8001a5c:	103dd726 	beq	r2,zero,80011bc <___vfprintf_internal_r+0x774>
 8001a60:	003cd806 	br	8000dc4 <___vfprintf_internal_r+0x37c>
 8001a64:	d9000517 	ldw	r4,20(sp)
 8001a68:	d9801c04 	addi	r6,sp,112
 8001a6c:	980b883a 	mov	r5,r19
 8001a70:	80071100 	call	8007110 <__sprint_r>
 8001a74:	103cd31e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001a78:	d9001617 	ldw	r4,88(sp)
 8001a7c:	d8c01e17 	ldw	r3,120(sp)
 8001a80:	b811883a 	mov	r8,r23
 8001a84:	2002971e 	bne	r4,zero,80024e4 <___vfprintf_internal_r+0x1a9c>
 8001a88:	d9000817 	ldw	r4,32(sp)
 8001a8c:	9080004c 	andi	r2,r18,1
 8001a90:	1104b03a 	or	r2,r2,r4
 8001a94:	103dbf26 	beq	r2,zero,8001194 <___vfprintf_internal_r+0x74c>
 8001a98:	d8800d17 	ldw	r2,52(sp)
 8001a9c:	d9000b17 	ldw	r4,44(sp)
 8001aa0:	40800015 	stw	r2,0(r8)
 8001aa4:	d8801d17 	ldw	r2,116(sp)
 8001aa8:	20c7883a 	add	r3,r4,r3
 8001aac:	41000115 	stw	r4,4(r8)
 8001ab0:	10800044 	addi	r2,r2,1
 8001ab4:	d8c01e15 	stw	r3,120(sp)
 8001ab8:	d8801d15 	stw	r2,116(sp)
 8001abc:	11000208 	cmpgei	r4,r2,8
 8001ac0:	2003691e 	bne	r4,zero,8002868 <___vfprintf_internal_r+0x1e20>
 8001ac4:	42000204 	addi	r8,r8,8
 8001ac8:	d9000817 	ldw	r4,32(sp)
 8001acc:	10800044 	addi	r2,r2,1
 8001ad0:	d8801d15 	stw	r2,116(sp)
 8001ad4:	20c7883a 	add	r3,r4,r3
 8001ad8:	44400015 	stw	r17,0(r8)
 8001adc:	41000115 	stw	r4,4(r8)
 8001ae0:	d8c01e15 	stw	r3,120(sp)
 8001ae4:	10800208 	cmpgei	r2,r2,8
 8001ae8:	103da926 	beq	r2,zero,8001190 <___vfprintf_internal_r+0x748>
 8001aec:	d9000517 	ldw	r4,20(sp)
 8001af0:	d9801c04 	addi	r6,sp,112
 8001af4:	980b883a 	mov	r5,r19
 8001af8:	80071100 	call	8007110 <__sprint_r>
 8001afc:	103cb11e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001b00:	d8c01e17 	ldw	r3,120(sp)
 8001b04:	b811883a 	mov	r8,r23
 8001b08:	003da206 	br	8001194 <___vfprintf_internal_r+0x74c>
 8001b0c:	d8800817 	ldw	r2,32(sp)
 8001b10:	da801d17 	ldw	r10,116(sp)
 8001b14:	18c00044 	addi	r3,r3,1
 8001b18:	10800088 	cmpgei	r2,r2,2
 8001b1c:	55000044 	addi	r20,r10,1
 8001b20:	47000204 	addi	fp,r8,8
 8001b24:	1000fb26 	beq	r2,zero,8001f14 <___vfprintf_internal_r+0x14cc>
 8001b28:	00800044 	movi	r2,1
 8001b2c:	40800115 	stw	r2,4(r8)
 8001b30:	44400015 	stw	r17,0(r8)
 8001b34:	d8c01e15 	stw	r3,120(sp)
 8001b38:	dd001d15 	stw	r20,116(sp)
 8001b3c:	a0800210 	cmplti	r2,r20,8
 8001b40:	10022e26 	beq	r2,zero,80023fc <___vfprintf_internal_r+0x19b4>
 8001b44:	d8800b17 	ldw	r2,44(sp)
 8001b48:	d9000d17 	ldw	r4,52(sp)
 8001b4c:	a5000044 	addi	r20,r20,1
 8001b50:	1887883a 	add	r3,r3,r2
 8001b54:	e0800115 	stw	r2,4(fp)
 8001b58:	e1000015 	stw	r4,0(fp)
 8001b5c:	d8c01e15 	stw	r3,120(sp)
 8001b60:	dd001d15 	stw	r20,116(sp)
 8001b64:	a0800208 	cmpgei	r2,r20,8
 8001b68:	10021b1e 	bne	r2,zero,80023d8 <___vfprintf_internal_r+0x1990>
 8001b6c:	e7000204 	addi	fp,fp,8
 8001b70:	d8800817 	ldw	r2,32(sp)
 8001b74:	d9000917 	ldw	r4,36(sp)
 8001b78:	d9400a17 	ldw	r5,40(sp)
 8001b7c:	a2800044 	addi	r10,r20,1
 8001b80:	e2000204 	addi	r8,fp,8
 8001b84:	12ffffc4 	addi	r11,r2,-1
 8001b88:	000d883a 	mov	r6,zero
 8001b8c:	000f883a 	mov	r7,zero
 8001b90:	d8c01215 	stw	r3,72(sp)
 8001b94:	da801015 	stw	r10,64(sp)
 8001b98:	da800f15 	stw	r10,60(sp)
 8001b9c:	da000e15 	stw	r8,56(sp)
 8001ba0:	dac00715 	stw	r11,28(sp)
 8001ba4:	800bc480 	call	800bc48 <__eqdf2>
 8001ba8:	dac00717 	ldw	r11,28(sp)
 8001bac:	da000e17 	ldw	r8,56(sp)
 8001bb0:	db400f17 	ldw	r13,60(sp)
 8001bb4:	da801017 	ldw	r10,64(sp)
 8001bb8:	d8c01217 	ldw	r3,72(sp)
 8001bbc:	1000e126 	beq	r2,zero,8001f44 <___vfprintf_internal_r+0x14fc>
 8001bc0:	8c400044 	addi	r17,r17,1
 8001bc4:	1ac7883a 	add	r3,r3,r11
 8001bc8:	da801d15 	stw	r10,116(sp)
 8001bcc:	e4400015 	stw	r17,0(fp)
 8001bd0:	e2c00115 	stw	r11,4(fp)
 8001bd4:	d8c01e15 	stw	r3,120(sp)
 8001bd8:	52800208 	cmpgei	r10,r10,8
 8001bdc:	5001ad1e 	bne	r10,zero,8002294 <___vfprintf_internal_r+0x184c>
 8001be0:	e0800404 	addi	r2,fp,16
 8001be4:	a2800084 	addi	r10,r20,2
 8001be8:	4039883a 	mov	fp,r8
 8001bec:	1011883a 	mov	r8,r2
 8001bf0:	d9001117 	ldw	r4,68(sp)
 8001bf4:	d8801844 	addi	r2,sp,97
 8001bf8:	da801d15 	stw	r10,116(sp)
 8001bfc:	20c7883a 	add	r3,r4,r3
 8001c00:	e0800015 	stw	r2,0(fp)
 8001c04:	e1000115 	stw	r4,4(fp)
 8001c08:	d8c01e15 	stw	r3,120(sp)
 8001c0c:	52800210 	cmplti	r10,r10,8
 8001c10:	503d601e 	bne	r10,zero,8001194 <___vfprintf_internal_r+0x74c>
 8001c14:	003fb506 	br	8001aec <___vfprintf_internal_r+0x10a4>
 8001c18:	9019883a 	mov	r12,r18
 8001c1c:	003e1906 	br	8001484 <___vfprintf_internal_r+0xa3c>
 8001c20:	03020074 	movhi	r12,2049
 8001c24:	39000450 	cmplti	r4,r7,17
 8001c28:	633f0784 	addi	r12,r12,-994
 8001c2c:	d8801d17 	ldw	r2,116(sp)
 8001c30:	20002b1e 	bne	r4,zero,8001ce0 <___vfprintf_internal_r+0x1298>
 8001c34:	dc401015 	stw	r17,64(sp)
 8001c38:	dc801215 	stw	r18,72(sp)
 8001c3c:	dc001315 	stw	r16,76(sp)
 8001c40:	03c00404 	movi	r15,16
 8001c44:	db800e15 	stw	r14,56(sp)
 8001c48:	db400f15 	stw	r13,60(sp)
 8001c4c:	dac01415 	stw	r11,80(sp)
 8001c50:	3821883a 	mov	r16,r7
 8001c54:	dc400517 	ldw	r17,20(sp)
 8001c58:	6025883a 	mov	r18,r12
 8001c5c:	00000406 	br	8001c70 <___vfprintf_internal_r+0x1228>
 8001c60:	843ffc04 	addi	r16,r16,-16
 8001c64:	81000448 	cmpgei	r4,r16,17
 8001c68:	42000204 	addi	r8,r8,8
 8001c6c:	20001426 	beq	r4,zero,8001cc0 <___vfprintf_internal_r+0x1278>
 8001c70:	10800044 	addi	r2,r2,1
 8001c74:	18c00404 	addi	r3,r3,16
 8001c78:	44800015 	stw	r18,0(r8)
 8001c7c:	43c00115 	stw	r15,4(r8)
 8001c80:	d8c01e15 	stw	r3,120(sp)
 8001c84:	d8801d15 	stw	r2,116(sp)
 8001c88:	11000208 	cmpgei	r4,r2,8
 8001c8c:	203ff426 	beq	r4,zero,8001c60 <___vfprintf_internal_r+0x1218>
 8001c90:	d9801c04 	addi	r6,sp,112
 8001c94:	980b883a 	mov	r5,r19
 8001c98:	8809883a 	mov	r4,r17
 8001c9c:	80071100 	call	8007110 <__sprint_r>
 8001ca0:	103c481e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001ca4:	843ffc04 	addi	r16,r16,-16
 8001ca8:	81000448 	cmpgei	r4,r16,17
 8001cac:	d8c01e17 	ldw	r3,120(sp)
 8001cb0:	d8801d17 	ldw	r2,116(sp)
 8001cb4:	b811883a 	mov	r8,r23
 8001cb8:	03c00404 	movi	r15,16
 8001cbc:	203fec1e 	bne	r4,zero,8001c70 <___vfprintf_internal_r+0x1228>
 8001cc0:	800f883a 	mov	r7,r16
 8001cc4:	9019883a 	mov	r12,r18
 8001cc8:	db800e17 	ldw	r14,56(sp)
 8001ccc:	db400f17 	ldw	r13,60(sp)
 8001cd0:	dc401017 	ldw	r17,64(sp)
 8001cd4:	dac01417 	ldw	r11,80(sp)
 8001cd8:	dc001317 	ldw	r16,76(sp)
 8001cdc:	dc801217 	ldw	r18,72(sp)
 8001ce0:	10800044 	addi	r2,r2,1
 8001ce4:	19c7883a 	add	r3,r3,r7
 8001ce8:	d8801d15 	stw	r2,116(sp)
 8001cec:	43000015 	stw	r12,0(r8)
 8001cf0:	41c00115 	stw	r7,4(r8)
 8001cf4:	d8c01e15 	stw	r3,120(sp)
 8001cf8:	10800208 	cmpgei	r2,r2,8
 8001cfc:	1001d61e 	bne	r2,zero,8002458 <___vfprintf_internal_r+0x1a10>
 8001d00:	42000204 	addi	r8,r8,8
 8001d04:	003cf806 	br	80010e8 <___vfprintf_internal_r+0x6a0>
 8001d08:	d9000517 	ldw	r4,20(sp)
 8001d0c:	d9801c04 	addi	r6,sp,112
 8001d10:	980b883a 	mov	r5,r19
 8001d14:	dac01015 	stw	r11,64(sp)
 8001d18:	db400f15 	stw	r13,60(sp)
 8001d1c:	db800e15 	stw	r14,56(sp)
 8001d20:	80071100 	call	8007110 <__sprint_r>
 8001d24:	103c271e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001d28:	d8c01e17 	ldw	r3,120(sp)
 8001d2c:	b811883a 	mov	r8,r23
 8001d30:	dac01017 	ldw	r11,64(sp)
 8001d34:	db400f17 	ldw	r13,60(sp)
 8001d38:	db800e17 	ldw	r14,56(sp)
 8001d3c:	003cf806 	br	8001120 <___vfprintf_internal_r+0x6d8>
 8001d40:	d9000517 	ldw	r4,20(sp)
 8001d44:	d9801c04 	addi	r6,sp,112
 8001d48:	980b883a 	mov	r5,r19
 8001d4c:	dac00f15 	stw	r11,60(sp)
 8001d50:	db400e15 	stw	r13,56(sp)
 8001d54:	80071100 	call	8007110 <__sprint_r>
 8001d58:	103c1a1e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001d5c:	d8c01e17 	ldw	r3,120(sp)
 8001d60:	b811883a 	mov	r8,r23
 8001d64:	dac00f17 	ldw	r11,60(sp)
 8001d68:	db400e17 	ldw	r13,56(sp)
 8001d6c:	003cf906 	br	8001154 <___vfprintf_internal_r+0x70c>
 8001d70:	d9000c17 	ldw	r4,48(sp)
 8001d74:	b823883a 	mov	r17,r23
 8001d78:	a88003cc 	andi	r2,r21,15
 8001d7c:	a006973a 	slli	r3,r20,28
 8001d80:	2085883a 	add	r2,r4,r2
 8001d84:	a82ad13a 	srli	r21,r21,4
 8001d88:	10800003 	ldbu	r2,0(r2)
 8001d8c:	a028d13a 	srli	r20,r20,4
 8001d90:	8c7fffc4 	addi	r17,r17,-1
 8001d94:	1d6ab03a 	or	r21,r3,r21
 8001d98:	88800005 	stb	r2,0(r17)
 8001d9c:	ad04b03a 	or	r2,r21,r20
 8001da0:	103ff51e 	bne	r2,zero,8001d78 <___vfprintf_internal_r+0x1330>
 8001da4:	bc69c83a 	sub	r20,r23,r17
 8001da8:	6025883a 	mov	r18,r12
 8001dac:	003e3d06 	br	80016a4 <___vfprintf_internal_r+0xc5c>
 8001db0:	d9001617 	ldw	r4,88(sp)
 8001db4:	01019a0e 	bge	zero,r4,8002420 <___vfprintf_internal_r+0x19d8>
 8001db8:	d8800717 	ldw	r2,28(sp)
 8001dbc:	d9000817 	ldw	r4,32(sp)
 8001dc0:	1039883a 	mov	fp,r2
 8001dc4:	20812816 	blt	r4,r2,8002268 <___vfprintf_internal_r+0x1820>
 8001dc8:	07000a0e 	bge	zero,fp,8001df4 <___vfprintf_internal_r+0x13ac>
 8001dcc:	d8801d17 	ldw	r2,116(sp)
 8001dd0:	1f07883a 	add	r3,r3,fp
 8001dd4:	44400015 	stw	r17,0(r8)
 8001dd8:	10800044 	addi	r2,r2,1
 8001ddc:	d8801d15 	stw	r2,116(sp)
 8001de0:	47000115 	stw	fp,4(r8)
 8001de4:	d8c01e15 	stw	r3,120(sp)
 8001de8:	10800208 	cmpgei	r2,r2,8
 8001dec:	1002de1e 	bne	r2,zero,8002968 <___vfprintf_internal_r+0x1f20>
 8001df0:	42000204 	addi	r8,r8,8
 8001df4:	e0014116 	blt	fp,zero,80022fc <___vfprintf_internal_r+0x18b4>
 8001df8:	d8800717 	ldw	r2,28(sp)
 8001dfc:	1739c83a 	sub	fp,r2,fp
 8001e00:	07014816 	blt	zero,fp,8002324 <___vfprintf_internal_r+0x18dc>
 8001e04:	d9001617 	ldw	r4,88(sp)
 8001e08:	d8800817 	ldw	r2,32(sp)
 8001e0c:	2081190e 	bge	r4,r2,8002274 <___vfprintf_internal_r+0x182c>
 8001e10:	d8800d17 	ldw	r2,52(sp)
 8001e14:	d9400b17 	ldw	r5,44(sp)
 8001e18:	40800015 	stw	r2,0(r8)
 8001e1c:	d8801d17 	ldw	r2,116(sp)
 8001e20:	1947883a 	add	r3,r3,r5
 8001e24:	41400115 	stw	r5,4(r8)
 8001e28:	10800044 	addi	r2,r2,1
 8001e2c:	d8801d15 	stw	r2,116(sp)
 8001e30:	d8c01e15 	stw	r3,120(sp)
 8001e34:	10800208 	cmpgei	r2,r2,8
 8001e38:	1002651e 	bne	r2,zero,80027d0 <___vfprintf_internal_r+0x1d88>
 8001e3c:	42000204 	addi	r8,r8,8
 8001e40:	d8800817 	ldw	r2,32(sp)
 8001e44:	d9400717 	ldw	r5,28(sp)
 8001e48:	1105c83a 	sub	r2,r2,r4
 8001e4c:	29015e0e 	bge	r5,r4,80023c8 <___vfprintf_internal_r+0x1980>
 8001e50:	1039883a 	mov	fp,r2
 8001e54:	07000c0e 	bge	zero,fp,8001e88 <___vfprintf_internal_r+0x1440>
 8001e58:	d9000717 	ldw	r4,28(sp)
 8001e5c:	1f07883a 	add	r3,r3,fp
 8001e60:	47000115 	stw	fp,4(r8)
 8001e64:	8923883a 	add	r17,r17,r4
 8001e68:	d9001d17 	ldw	r4,116(sp)
 8001e6c:	44400015 	stw	r17,0(r8)
 8001e70:	d8c01e15 	stw	r3,120(sp)
 8001e74:	21000044 	addi	r4,r4,1
 8001e78:	d9001d15 	stw	r4,116(sp)
 8001e7c:	21000208 	cmpgei	r4,r4,8
 8001e80:	2002c41e 	bne	r4,zero,8002994 <___vfprintf_internal_r+0x1f4c>
 8001e84:	42000204 	addi	r8,r8,8
 8001e88:	e000010e 	bge	fp,zero,8001e90 <___vfprintf_internal_r+0x1448>
 8001e8c:	0039883a 	mov	fp,zero
 8001e90:	1739c83a 	sub	fp,r2,fp
 8001e94:	073cbf0e 	bge	zero,fp,8001194 <___vfprintf_internal_r+0x74c>
 8001e98:	03020074 	movhi	r12,2049
 8001e9c:	e1000450 	cmplti	r4,fp,17
 8001ea0:	633f0384 	addi	r12,r12,-1010
 8001ea4:	d8801d17 	ldw	r2,116(sp)
 8001ea8:	2002401e 	bne	r4,zero,80027ac <___vfprintf_internal_r+0x1d64>
 8001eac:	dc000715 	stw	r16,28(sp)
 8001eb0:	05000404 	movi	r20,16
 8001eb4:	dc400517 	ldw	r17,20(sp)
 8001eb8:	6021883a 	mov	r16,r12
 8001ebc:	00000406 	br	8001ed0 <___vfprintf_internal_r+0x1488>
 8001ec0:	42000204 	addi	r8,r8,8
 8001ec4:	e73ffc04 	addi	fp,fp,-16
 8001ec8:	e1000448 	cmpgei	r4,fp,17
 8001ecc:	20023526 	beq	r4,zero,80027a4 <___vfprintf_internal_r+0x1d5c>
 8001ed0:	10800044 	addi	r2,r2,1
 8001ed4:	18c00404 	addi	r3,r3,16
 8001ed8:	44000015 	stw	r16,0(r8)
 8001edc:	45000115 	stw	r20,4(r8)
 8001ee0:	d8c01e15 	stw	r3,120(sp)
 8001ee4:	d8801d15 	stw	r2,116(sp)
 8001ee8:	11000208 	cmpgei	r4,r2,8
 8001eec:	203ff426 	beq	r4,zero,8001ec0 <___vfprintf_internal_r+0x1478>
 8001ef0:	d9801c04 	addi	r6,sp,112
 8001ef4:	980b883a 	mov	r5,r19
 8001ef8:	8809883a 	mov	r4,r17
 8001efc:	80071100 	call	8007110 <__sprint_r>
 8001f00:	103bb01e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001f04:	d8c01e17 	ldw	r3,120(sp)
 8001f08:	d8801d17 	ldw	r2,116(sp)
 8001f0c:	b811883a 	mov	r8,r23
 8001f10:	003fec06 	br	8001ec4 <___vfprintf_internal_r+0x147c>
 8001f14:	9080004c 	andi	r2,r18,1
 8001f18:	103f031e 	bne	r2,zero,8001b28 <___vfprintf_internal_r+0x10e0>
 8001f1c:	00800044 	movi	r2,1
 8001f20:	dd001d15 	stw	r20,116(sp)
 8001f24:	44400015 	stw	r17,0(r8)
 8001f28:	40800115 	stw	r2,4(r8)
 8001f2c:	d8c01e15 	stw	r3,120(sp)
 8001f30:	a5000208 	cmpgei	r20,r20,8
 8001f34:	a000d71e 	bne	r20,zero,8002294 <___vfprintf_internal_r+0x184c>
 8001f38:	52800084 	addi	r10,r10,2
 8001f3c:	42000404 	addi	r8,r8,16
 8001f40:	003f2b06 	br	8001bf0 <___vfprintf_internal_r+0x11a8>
 8001f44:	02ff2a0e 	bge	zero,r11,8001bf0 <___vfprintf_internal_r+0x11a8>
 8001f48:	58800450 	cmplti	r2,r11,17
 8001f4c:	03020074 	movhi	r12,2049
 8001f50:	1002fe1e 	bne	r2,zero,8002b4c <___vfprintf_internal_r+0x2104>
 8001f54:	633f0384 	addi	r12,r12,-1010
 8001f58:	dd400715 	stw	r21,28(sp)
 8001f5c:	dc800e15 	stw	r18,56(sp)
 8001f60:	e005883a 	mov	r2,fp
 8001f64:	04400404 	movi	r17,16
 8001f68:	b039883a 	mov	fp,r22
 8001f6c:	5825883a 	mov	r18,r11
 8001f70:	802d883a 	mov	r22,r16
 8001f74:	602b883a 	mov	r21,r12
 8001f78:	dc000517 	ldw	r16,20(sp)
 8001f7c:	6829883a 	mov	r20,r13
 8001f80:	00000506 	br	8001f98 <___vfprintf_internal_r+0x1550>
 8001f84:	10800204 	addi	r2,r2,8
 8001f88:	94bffc04 	addi	r18,r18,-16
 8001f8c:	91000448 	cmpgei	r4,r18,17
 8001f90:	20018a26 	beq	r4,zero,80025bc <___vfprintf_internal_r+0x1b74>
 8001f94:	a5000044 	addi	r20,r20,1
 8001f98:	18c00404 	addi	r3,r3,16
 8001f9c:	15400015 	stw	r21,0(r2)
 8001fa0:	14400115 	stw	r17,4(r2)
 8001fa4:	d8c01e15 	stw	r3,120(sp)
 8001fa8:	dd001d15 	stw	r20,116(sp)
 8001fac:	a1000208 	cmpgei	r4,r20,8
 8001fb0:	203ff426 	beq	r4,zero,8001f84 <___vfprintf_internal_r+0x153c>
 8001fb4:	d9801c04 	addi	r6,sp,112
 8001fb8:	980b883a 	mov	r5,r19
 8001fbc:	8009883a 	mov	r4,r16
 8001fc0:	80071100 	call	8007110 <__sprint_r>
 8001fc4:	103b7f1e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001fc8:	dd001d17 	ldw	r20,116(sp)
 8001fcc:	d8c01e17 	ldw	r3,120(sp)
 8001fd0:	b805883a 	mov	r2,r23
 8001fd4:	003fec06 	br	8001f88 <___vfprintf_internal_r+0x1540>
 8001fd8:	d9000517 	ldw	r4,20(sp)
 8001fdc:	d9801c04 	addi	r6,sp,112
 8001fe0:	980b883a 	mov	r5,r19
 8001fe4:	80071100 	call	8007110 <__sprint_r>
 8001fe8:	103b761e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8001fec:	d8c01e17 	ldw	r3,120(sp)
 8001ff0:	b811883a 	mov	r8,r23
 8001ff4:	003c5b06 	br	8001164 <___vfprintf_internal_r+0x71c>
 8001ff8:	0029883a 	mov	r20,zero
 8001ffc:	003bdc06 	br	8000f70 <___vfprintf_internal_r+0x528>
 8002000:	b023883a 	mov	r17,r22
 8002004:	003ae306 	br	8000b94 <___vfprintf_internal_r+0x14c>
 8002008:	b823883a 	mov	r17,r23
 800200c:	003da506 	br	80016a4 <___vfprintf_internal_r+0xc5c>
 8002010:	d9000917 	ldw	r4,36(sp)
 8002014:	d9400a17 	ldw	r5,40(sp)
 8002018:	da000f15 	stw	r8,60(sp)
 800201c:	200d883a 	mov	r6,r4
 8002020:	280f883a 	mov	r7,r5
 8002024:	dac00e15 	stw	r11,56(sp)
 8002028:	db000715 	stw	r12,28(sp)
 800202c:	800cff40 	call	800cff4 <__unorddf2>
 8002030:	db000717 	ldw	r12,28(sp)
 8002034:	dac00e17 	ldw	r11,56(sp)
 8002038:	da000f17 	ldw	r8,60(sp)
 800203c:	1002b21e 	bne	r2,zero,8002b08 <___vfprintf_internal_r+0x20c0>
 8002040:	00fff7c4 	movi	r3,-33
 8002044:	e0c6703a 	and	r3,fp,r3
 8002048:	58bfffe0 	cmpeqi	r2,r11,-1
 800204c:	d8c00715 	stw	r3,28(sp)
 8002050:	10024e1e 	bne	r2,zero,800298c <___vfprintf_internal_r+0x1f44>
 8002054:	188011d8 	cmpnei	r2,r3,71
 8002058:	10020026 	beq	r2,zero,800285c <___vfprintf_internal_r+0x1e14>
 800205c:	d8800a17 	ldw	r2,40(sp)
 8002060:	64804014 	ori	r18,r12,256
 8002064:	1001e316 	blt	r2,zero,80027f4 <___vfprintf_internal_r+0x1dac>
 8002068:	dd400a17 	ldw	r21,40(sp)
 800206c:	d8000e05 	stb	zero,56(sp)
 8002070:	e08019a0 	cmpeqi	r2,fp,102
 8002074:	d8800f15 	stw	r2,60(sp)
 8002078:	1001771e 	bne	r2,zero,8002658 <___vfprintf_internal_r+0x1c10>
 800207c:	e08011a0 	cmpeqi	r2,fp,70
 8002080:	1001751e 	bne	r2,zero,8002658 <___vfprintf_internal_r+0x1c10>
 8002084:	d8800717 	ldw	r2,28(sp)
 8002088:	da001215 	stw	r8,72(sp)
 800208c:	db001015 	stw	r12,64(sp)
 8002090:	10801158 	cmpnei	r2,r2,69
 8002094:	10020726 	beq	r2,zero,80028b4 <___vfprintf_internal_r+0x1e6c>
 8002098:	d8801a04 	addi	r2,sp,104
 800209c:	d8800315 	stw	r2,12(sp)
 80020a0:	d9400917 	ldw	r5,36(sp)
 80020a4:	d8801704 	addi	r2,sp,92
 80020a8:	d9000517 	ldw	r4,20(sp)
 80020ac:	d8800215 	stw	r2,8(sp)
 80020b0:	d8801604 	addi	r2,sp,88
 80020b4:	dac00015 	stw	r11,0(sp)
 80020b8:	d8800115 	stw	r2,4(sp)
 80020bc:	01c00084 	movi	r7,2
 80020c0:	a80d883a 	mov	r6,r21
 80020c4:	dac00815 	stw	r11,32(sp)
 80020c8:	800303c0 	call	800303c <_dtoa_r>
 80020cc:	dac00817 	ldw	r11,32(sp)
 80020d0:	1023883a 	mov	r17,r2
 80020d4:	e08019d8 	cmpnei	r2,fp,103
 80020d8:	db001017 	ldw	r12,64(sp)
 80020dc:	da001217 	ldw	r8,72(sp)
 80020e0:	5829883a 	mov	r20,r11
 80020e4:	1002051e 	bne	r2,zero,80028fc <___vfprintf_internal_r+0x1eb4>
 80020e8:	6080004c 	andi	r2,r12,1
 80020ec:	1002051e 	bne	r2,zero,8002904 <___vfprintf_internal_r+0x1ebc>
 80020f0:	d8c01617 	ldw	r3,88(sp)
 80020f4:	d8800717 	ldw	r2,28(sp)
 80020f8:	d8c00715 	stw	r3,28(sp)
 80020fc:	d8c01a17 	ldw	r3,104(sp)
 8002100:	108011e0 	cmpeqi	r2,r2,71
 8002104:	1c47c83a 	sub	r3,r3,r17
 8002108:	d8c00815 	stw	r3,32(sp)
 800210c:	10000526 	beq	r2,zero,8002124 <___vfprintf_internal_r+0x16dc>
 8002110:	d8c00717 	ldw	r3,28(sp)
 8002114:	18bfff50 	cmplti	r2,r3,-3
 8002118:	1000011e 	bne	r2,zero,8002120 <___vfprintf_internal_r+0x16d8>
 800211c:	58c2070e 	bge	r11,r3,800293c <___vfprintf_internal_r+0x1ef4>
 8002120:	e73fff84 	addi	fp,fp,-2
 8002124:	d8800717 	ldw	r2,28(sp)
 8002128:	df001845 	stb	fp,97(sp)
 800212c:	153fffc4 	addi	r20,r2,-1
 8002130:	dd001615 	stw	r20,88(sp)
 8002134:	a0027c16 	blt	r20,zero,8002b28 <___vfprintf_internal_r+0x20e0>
 8002138:	00800ac4 	movi	r2,43
 800213c:	d8801885 	stb	r2,98(sp)
 8002140:	a0800290 	cmplti	r2,r20,10
 8002144:	10025b1e 	bne	r2,zero,8002ab4 <___vfprintf_internal_r+0x206c>
 8002148:	dc000f15 	stw	r16,60(sp)
 800214c:	dd401bc4 	addi	r21,sp,111
 8002150:	a021883a 	mov	r16,r20
 8002154:	db000715 	stw	r12,28(sp)
 8002158:	9829883a 	mov	r20,r19
 800215c:	4027883a 	mov	r19,r8
 8002160:	00000206 	br	800216c <___vfprintf_internal_r+0x1724>
 8002164:	202b883a 	mov	r21,r4
 8002168:	1021883a 	mov	r16,r2
 800216c:	8009883a 	mov	r4,r16
 8002170:	01400284 	movi	r5,10
 8002174:	800a80c0 	call	800a80c <__modsi3>
 8002178:	10800c04 	addi	r2,r2,48
 800217c:	8009883a 	mov	r4,r16
 8002180:	a8bfffc5 	stb	r2,-1(r21)
 8002184:	01400284 	movi	r5,10
 8002188:	800a78c0 	call	800a78c <__divsi3>
 800218c:	80c01908 	cmpgei	r3,r16,100
 8002190:	a93fffc4 	addi	r4,r21,-1
 8002194:	183ff31e 	bne	r3,zero,8002164 <___vfprintf_internal_r+0x171c>
 8002198:	10800c04 	addi	r2,r2,48
 800219c:	20bfffc5 	stb	r2,-1(r4)
 80021a0:	a8ffff84 	addi	r3,r21,-2
 80021a4:	d9001bc4 	addi	r4,sp,111
 80021a8:	9811883a 	mov	r8,r19
 80021ac:	db000717 	ldw	r12,28(sp)
 80021b0:	dc000f17 	ldw	r16,60(sp)
 80021b4:	a027883a 	mov	r19,r20
 80021b8:	1902762e 	bgeu	r3,r4,8002b94 <___vfprintf_internal_r+0x214c>
 80021bc:	d90018c4 	addi	r4,sp,99
 80021c0:	00000106 	br	80021c8 <___vfprintf_internal_r+0x1780>
 80021c4:	18800003 	ldbu	r2,0(r3)
 80021c8:	21000044 	addi	r4,r4,1
 80021cc:	20bfffc5 	stb	r2,-1(r4)
 80021d0:	18c00044 	addi	r3,r3,1
 80021d4:	d8801bc4 	addi	r2,sp,111
 80021d8:	18bffa1e 	bne	r3,r2,80021c4 <___vfprintf_internal_r+0x177c>
 80021dc:	d8801c44 	addi	r2,sp,113
 80021e0:	d8c018c4 	addi	r3,sp,99
 80021e4:	1545c83a 	sub	r2,r2,r21
 80021e8:	1885883a 	add	r2,r3,r2
 80021ec:	d8c01844 	addi	r3,sp,97
 80021f0:	10c5c83a 	sub	r2,r2,r3
 80021f4:	d8801115 	stw	r2,68(sp)
 80021f8:	d8c00817 	ldw	r3,32(sp)
 80021fc:	d9001117 	ldw	r4,68(sp)
 8002200:	18800088 	cmpgei	r2,r3,2
 8002204:	1929883a 	add	r20,r3,r4
 8002208:	10024c26 	beq	r2,zero,8002b3c <___vfprintf_internal_r+0x20f4>
 800220c:	d8800b17 	ldw	r2,44(sp)
 8002210:	a0a9883a 	add	r20,r20,r2
 8002214:	a02b883a 	mov	r21,r20
 8002218:	a000010e 	bge	r20,zero,8002220 <___vfprintf_internal_r+0x17d8>
 800221c:	002b883a 	mov	r21,zero
 8002220:	d8000715 	stw	zero,28(sp)
 8002224:	00014206 	br	8002730 <___vfprintf_internal_r+0x1ce8>
 8002228:	00800c04 	movi	r2,48
 800222c:	d8801585 	stb	r2,86(sp)
 8002230:	df0015c5 	stb	fp,87(sp)
 8002234:	63000094 	ori	r12,r12,2
 8002238:	00800084 	movi	r2,2
 800223c:	003ce106 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 8002240:	d9400417 	ldw	r5,16(sp)
 8002244:	20800017 	ldw	r2,0(r4)
 8002248:	d8c00615 	stw	r3,24(sp)
 800224c:	2809d7fa 	srai	r4,r5,31
 8002250:	11400015 	stw	r5,0(r2)
 8002254:	11000115 	stw	r4,4(r2)
 8002258:	003a3006 	br	8000b1c <___vfprintf_internal_r+0xd4>
 800225c:	0421c83a 	sub	r16,zero,r16
 8002260:	d8800615 	stw	r2,24(sp)
 8002264:	003b1506 	br	8000ebc <___vfprintf_internal_r+0x474>
 8002268:	2039883a 	mov	fp,r4
 800226c:	073ed716 	blt	zero,fp,8001dcc <___vfprintf_internal_r+0x1384>
 8002270:	003ee006 	br	8001df4 <___vfprintf_internal_r+0x13ac>
 8002274:	9080004c 	andi	r2,r18,1
 8002278:	103ee51e 	bne	r2,zero,8001e10 <___vfprintf_internal_r+0x13c8>
 800227c:	d8800817 	ldw	r2,32(sp)
 8002280:	d9400717 	ldw	r5,28(sp)
 8002284:	1105c83a 	sub	r2,r2,r4
 8002288:	29004f0e 	bge	r5,r4,80023c8 <___vfprintf_internal_r+0x1980>
 800228c:	1039883a 	mov	fp,r2
 8002290:	003efd06 	br	8001e88 <___vfprintf_internal_r+0x1440>
 8002294:	d9000517 	ldw	r4,20(sp)
 8002298:	d9801c04 	addi	r6,sp,112
 800229c:	980b883a 	mov	r5,r19
 80022a0:	80071100 	call	8007110 <__sprint_r>
 80022a4:	103ac71e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80022a8:	da801d17 	ldw	r10,116(sp)
 80022ac:	d8c01e17 	ldw	r3,120(sp)
 80022b0:	da002b04 	addi	r8,sp,172
 80022b4:	52800044 	addi	r10,r10,1
 80022b8:	b839883a 	mov	fp,r23
 80022bc:	003e4c06 	br	8001bf0 <___vfprintf_internal_r+0x11a8>
 80022c0:	b7000043 	ldbu	fp,1(r22)
 80022c4:	63000814 	ori	r12,r12,32
 80022c8:	b5800044 	addi	r22,r22,1
 80022cc:	e2803fcc 	andi	r10,fp,255
 80022d0:	5280201c 	xori	r10,r10,128
 80022d4:	52bfe004 	addi	r10,r10,-128
 80022d8:	003a3606 	br	8000bb4 <___vfprintf_internal_r+0x16c>
 80022dc:	d9000517 	ldw	r4,20(sp)
 80022e0:	d9801c04 	addi	r6,sp,112
 80022e4:	980b883a 	mov	r5,r19
 80022e8:	80071100 	call	8007110 <__sprint_r>
 80022ec:	103ab51e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80022f0:	d8c01e17 	ldw	r3,120(sp)
 80022f4:	b811883a 	mov	r8,r23
 80022f8:	003d4506 	br	8001810 <___vfprintf_internal_r+0xdc8>
 80022fc:	0039883a 	mov	fp,zero
 8002300:	003ebd06 	br	8001df8 <___vfprintf_internal_r+0x13b0>
 8002304:	588001f0 	cmpltui	r2,r11,7
 8002308:	5829883a 	mov	r20,r11
 800230c:	10013d26 	beq	r2,zero,8002804 <___vfprintf_internal_r+0x1dbc>
 8002310:	04420074 	movhi	r17,2049
 8002314:	a02b883a 	mov	r21,r20
 8002318:	dc800615 	stw	r18,24(sp)
 800231c:	8c7f0104 	addi	r17,r17,-1020
 8002320:	003b6606 	br	80010bc <___vfprintf_internal_r+0x674>
 8002324:	03020074 	movhi	r12,2049
 8002328:	e1000450 	cmplti	r4,fp,17
 800232c:	633f0384 	addi	r12,r12,-1010
 8002330:	d8801d17 	ldw	r2,116(sp)
 8002334:	20010d1e 	bne	r4,zero,800276c <___vfprintf_internal_r+0x1d24>
 8002338:	dc400e15 	stw	r17,56(sp)
 800233c:	dc800f15 	stw	r18,60(sp)
 8002340:	e023883a 	mov	r17,fp
 8002344:	05000404 	movi	r20,16
 8002348:	b039883a 	mov	fp,r22
 800234c:	6025883a 	mov	r18,r12
 8002350:	802d883a 	mov	r22,r16
 8002354:	dc000517 	ldw	r16,20(sp)
 8002358:	00000406 	br	800236c <___vfprintf_internal_r+0x1924>
 800235c:	42000204 	addi	r8,r8,8
 8002360:	8c7ffc04 	addi	r17,r17,-16
 8002364:	89000448 	cmpgei	r4,r17,17
 8002368:	2000fa26 	beq	r4,zero,8002754 <___vfprintf_internal_r+0x1d0c>
 800236c:	10800044 	addi	r2,r2,1
 8002370:	18c00404 	addi	r3,r3,16
 8002374:	44800015 	stw	r18,0(r8)
 8002378:	45000115 	stw	r20,4(r8)
 800237c:	d8c01e15 	stw	r3,120(sp)
 8002380:	d8801d15 	stw	r2,116(sp)
 8002384:	11000208 	cmpgei	r4,r2,8
 8002388:	203ff426 	beq	r4,zero,800235c <___vfprintf_internal_r+0x1914>
 800238c:	d9801c04 	addi	r6,sp,112
 8002390:	980b883a 	mov	r5,r19
 8002394:	8009883a 	mov	r4,r16
 8002398:	80071100 	call	8007110 <__sprint_r>
 800239c:	103a891e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80023a0:	d8c01e17 	ldw	r3,120(sp)
 80023a4:	d8801d17 	ldw	r2,116(sp)
 80023a8:	b811883a 	mov	r8,r23
 80023ac:	003fec06 	br	8002360 <___vfprintf_internal_r+0x1918>
 80023b0:	d8800617 	ldw	r2,24(sp)
 80023b4:	10800017 	ldw	r2,0(r2)
 80023b8:	d8c00615 	stw	r3,24(sp)
 80023bc:	d8c00417 	ldw	r3,16(sp)
 80023c0:	10c00015 	stw	r3,0(r2)
 80023c4:	0039d506 	br	8000b1c <___vfprintf_internal_r+0xd4>
 80023c8:	d9000817 	ldw	r4,32(sp)
 80023cc:	d9400717 	ldw	r5,28(sp)
 80023d0:	2179c83a 	sub	fp,r4,r5
 80023d4:	003e9f06 	br	8001e54 <___vfprintf_internal_r+0x140c>
 80023d8:	d9000517 	ldw	r4,20(sp)
 80023dc:	d9801c04 	addi	r6,sp,112
 80023e0:	980b883a 	mov	r5,r19
 80023e4:	80071100 	call	8007110 <__sprint_r>
 80023e8:	103a761e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80023ec:	d8c01e17 	ldw	r3,120(sp)
 80023f0:	dd001d17 	ldw	r20,116(sp)
 80023f4:	b839883a 	mov	fp,r23
 80023f8:	003ddd06 	br	8001b70 <___vfprintf_internal_r+0x1128>
 80023fc:	d9000517 	ldw	r4,20(sp)
 8002400:	d9801c04 	addi	r6,sp,112
 8002404:	980b883a 	mov	r5,r19
 8002408:	80071100 	call	8007110 <__sprint_r>
 800240c:	103a6d1e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8002410:	d8c01e17 	ldw	r3,120(sp)
 8002414:	dd001d17 	ldw	r20,116(sp)
 8002418:	b839883a 	mov	fp,r23
 800241c:	003dc906 	br	8001b44 <___vfprintf_internal_r+0x10fc>
 8002420:	d8801d17 	ldw	r2,116(sp)
 8002424:	01420074 	movhi	r5,2049
 8002428:	297f0304 	addi	r5,r5,-1012
 800242c:	10800044 	addi	r2,r2,1
 8002430:	18c00044 	addi	r3,r3,1
 8002434:	41400015 	stw	r5,0(r8)
 8002438:	01400044 	movi	r5,1
 800243c:	d8801d15 	stw	r2,116(sp)
 8002440:	41400115 	stw	r5,4(r8)
 8002444:	d8c01e15 	stw	r3,120(sp)
 8002448:	10800208 	cmpgei	r2,r2,8
 800244c:	103d851e 	bne	r2,zero,8001a64 <___vfprintf_internal_r+0x101c>
 8002450:	42000204 	addi	r8,r8,8
 8002454:	003d8b06 	br	8001a84 <___vfprintf_internal_r+0x103c>
 8002458:	d9000517 	ldw	r4,20(sp)
 800245c:	d9801c04 	addi	r6,sp,112
 8002460:	980b883a 	mov	r5,r19
 8002464:	dac01015 	stw	r11,64(sp)
 8002468:	db400f15 	stw	r13,60(sp)
 800246c:	db800e15 	stw	r14,56(sp)
 8002470:	80071100 	call	8007110 <__sprint_r>
 8002474:	103a531e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8002478:	d8c01e17 	ldw	r3,120(sp)
 800247c:	b811883a 	mov	r8,r23
 8002480:	dac01017 	ldw	r11,64(sp)
 8002484:	db400f17 	ldw	r13,60(sp)
 8002488:	db800e17 	ldw	r14,56(sp)
 800248c:	003b1606 	br	80010e8 <___vfprintf_internal_r+0x6a0>
 8002490:	d9000517 	ldw	r4,20(sp)
 8002494:	d9801c04 	addi	r6,sp,112
 8002498:	980b883a 	mov	r5,r19
 800249c:	80071100 	call	8007110 <__sprint_r>
 80024a0:	103a481e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80024a4:	b811883a 	mov	r8,r23
 80024a8:	003cc506 	br	80017c0 <___vfprintf_internal_r+0xd78>
 80024ac:	d9000517 	ldw	r4,20(sp)
 80024b0:	d9801c04 	addi	r6,sp,112
 80024b4:	980b883a 	mov	r5,r19
 80024b8:	dac00e15 	stw	r11,56(sp)
 80024bc:	80071100 	call	8007110 <__sprint_r>
 80024c0:	103a401e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80024c4:	d8c01e17 	ldw	r3,120(sp)
 80024c8:	b811883a 	mov	r8,r23
 80024cc:	dac00e17 	ldw	r11,56(sp)
 80024d0:	003b2206 	br	800115c <___vfprintf_internal_r+0x714>
 80024d4:	10c00060 	cmpeqi	r3,r2,1
 80024d8:	9019883a 	mov	r12,r18
 80024dc:	183beb26 	beq	r3,zero,800148c <___vfprintf_internal_r+0xa44>
 80024e0:	003c6b06 	br	8001690 <___vfprintf_internal_r+0xc48>
 80024e4:	d8800d17 	ldw	r2,52(sp)
 80024e8:	d9400b17 	ldw	r5,44(sp)
 80024ec:	40800015 	stw	r2,0(r8)
 80024f0:	d8801d17 	ldw	r2,116(sp)
 80024f4:	28c7883a 	add	r3,r5,r3
 80024f8:	41400115 	stw	r5,4(r8)
 80024fc:	10800044 	addi	r2,r2,1
 8002500:	d8c01e15 	stw	r3,120(sp)
 8002504:	d8801d15 	stw	r2,116(sp)
 8002508:	11400208 	cmpgei	r5,r2,8
 800250c:	2800d61e 	bne	r5,zero,8002868 <___vfprintf_internal_r+0x1e20>
 8002510:	42000204 	addi	r8,r8,8
 8002514:	203d6c0e 	bge	r4,zero,8001ac8 <___vfprintf_internal_r+0x1080>
 8002518:	03020074 	movhi	r12,2049
 800251c:	217ffc08 	cmpgei	r5,r4,-16
 8002520:	633f0384 	addi	r12,r12,-1010
 8002524:	0129c83a 	sub	r20,zero,r4
 8002528:	28014e1e 	bne	r5,zero,8002a64 <___vfprintf_internal_r+0x201c>
 800252c:	8009883a 	mov	r4,r16
 8002530:	dc400715 	stw	r17,28(sp)
 8002534:	a021883a 	mov	r16,r20
 8002538:	07000404 	movi	fp,16
 800253c:	6023883a 	mov	r17,r12
 8002540:	2029883a 	mov	r20,r4
 8002544:	00000406 	br	8002558 <___vfprintf_internal_r+0x1b10>
 8002548:	42000204 	addi	r8,r8,8
 800254c:	843ffc04 	addi	r16,r16,-16
 8002550:	81000448 	cmpgei	r4,r16,17
 8002554:	20013e26 	beq	r4,zero,8002a50 <___vfprintf_internal_r+0x2008>
 8002558:	10800044 	addi	r2,r2,1
 800255c:	18c00404 	addi	r3,r3,16
 8002560:	44400015 	stw	r17,0(r8)
 8002564:	47000115 	stw	fp,4(r8)
 8002568:	d8c01e15 	stw	r3,120(sp)
 800256c:	d8801d15 	stw	r2,116(sp)
 8002570:	11000208 	cmpgei	r4,r2,8
 8002574:	203ff426 	beq	r4,zero,8002548 <___vfprintf_internal_r+0x1b00>
 8002578:	d9000517 	ldw	r4,20(sp)
 800257c:	d9801c04 	addi	r6,sp,112
 8002580:	980b883a 	mov	r5,r19
 8002584:	80071100 	call	8007110 <__sprint_r>
 8002588:	103a0e1e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 800258c:	d8c01e17 	ldw	r3,120(sp)
 8002590:	d8801d17 	ldw	r2,116(sp)
 8002594:	b811883a 	mov	r8,r23
 8002598:	003fec06 	br	800254c <___vfprintf_internal_r+0x1b04>
 800259c:	8809883a 	mov	r4,r17
 80025a0:	8006f840 	call	8006f84 <strlen>
 80025a4:	1029883a 	mov	r20,r2
 80025a8:	102b883a 	mov	r21,r2
 80025ac:	dc800615 	stw	r18,24(sp)
 80025b0:	db000717 	ldw	r12,28(sp)
 80025b4:	da000e17 	ldw	r8,56(sp)
 80025b8:	003ac006 	br	80010bc <___vfprintf_internal_r+0x674>
 80025bc:	9017883a 	mov	r11,r18
 80025c0:	a819883a 	mov	r12,r21
 80025c4:	dc800e17 	ldw	r18,56(sp)
 80025c8:	dd400717 	ldw	r21,28(sp)
 80025cc:	b021883a 	mov	r16,r22
 80025d0:	a2800044 	addi	r10,r20,1
 80025d4:	e02d883a 	mov	r22,fp
 80025d8:	1039883a 	mov	fp,r2
 80025dc:	10800204 	addi	r2,r2,8
 80025e0:	1ac7883a 	add	r3,r3,r11
 80025e4:	e3000015 	stw	r12,0(fp)
 80025e8:	e2c00115 	stw	r11,4(fp)
 80025ec:	d8c01e15 	stw	r3,120(sp)
 80025f0:	da801d15 	stw	r10,116(sp)
 80025f4:	51000208 	cmpgei	r4,r10,8
 80025f8:	203f261e 	bne	r4,zero,8002294 <___vfprintf_internal_r+0x184c>
 80025fc:	52800044 	addi	r10,r10,1
 8002600:	12000204 	addi	r8,r2,8
 8002604:	1039883a 	mov	fp,r2
 8002608:	003d7906 	br	8001bf0 <___vfprintf_internal_r+0x11a8>
 800260c:	8019883a 	mov	r12,r16
 8002610:	dc000717 	ldw	r16,28(sp)
 8002614:	10800044 	addi	r2,r2,1
 8002618:	1c47883a 	add	r3,r3,r17
 800261c:	d8801d15 	stw	r2,116(sp)
 8002620:	43000015 	stw	r12,0(r8)
 8002624:	44400115 	stw	r17,4(r8)
 8002628:	d8c01e15 	stw	r3,120(sp)
 800262c:	10800208 	cmpgei	r2,r2,8
 8002630:	103ad726 	beq	r2,zero,8001190 <___vfprintf_internal_r+0x748>
 8002634:	003d2d06 	br	8001aec <___vfprintf_internal_r+0x10a4>
 8002638:	d8800615 	stw	r2,24(sp)
 800263c:	0029883a 	mov	r20,zero
 8002640:	0005883a 	mov	r2,zero
 8002644:	003bdf06 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 8002648:	d8800615 	stw	r2,24(sp)
 800264c:	0029883a 	mov	r20,zero
 8002650:	00800044 	movi	r2,1
 8002654:	003bdb06 	br	80015c4 <___vfprintf_internal_r+0xb7c>
 8002658:	d8801a04 	addi	r2,sp,104
 800265c:	d8800315 	stw	r2,12(sp)
 8002660:	d9400917 	ldw	r5,36(sp)
 8002664:	d8801704 	addi	r2,sp,92
 8002668:	d9000517 	ldw	r4,20(sp)
 800266c:	d8800215 	stw	r2,8(sp)
 8002670:	d8801604 	addi	r2,sp,88
 8002674:	dac00015 	stw	r11,0(sp)
 8002678:	d8800115 	stw	r2,4(sp)
 800267c:	01c000c4 	movi	r7,3
 8002680:	a80d883a 	mov	r6,r21
 8002684:	da001215 	stw	r8,72(sp)
 8002688:	db001015 	stw	r12,64(sp)
 800268c:	dac00815 	stw	r11,32(sp)
 8002690:	800303c0 	call	800303c <_dtoa_r>
 8002694:	dac00817 	ldw	r11,32(sp)
 8002698:	1023883a 	mov	r17,r2
 800269c:	db001017 	ldw	r12,64(sp)
 80026a0:	12e9883a 	add	r20,r2,r11
 80026a4:	88800007 	ldb	r2,0(r17)
 80026a8:	da001217 	ldw	r8,72(sp)
 80026ac:	10800c20 	cmpeqi	r2,r2,48
 80026b0:	10005a1e 	bne	r2,zero,800281c <___vfprintf_internal_r+0x1dd4>
 80026b4:	d8801617 	ldw	r2,88(sp)
 80026b8:	a0a9883a 	add	r20,r20,r2
 80026bc:	d9000917 	ldw	r4,36(sp)
 80026c0:	000d883a 	mov	r6,zero
 80026c4:	000f883a 	mov	r7,zero
 80026c8:	a80b883a 	mov	r5,r21
 80026cc:	da001215 	stw	r8,72(sp)
 80026d0:	dac01015 	stw	r11,64(sp)
 80026d4:	db000815 	stw	r12,32(sp)
 80026d8:	800bc480 	call	800bc48 <__eqdf2>
 80026dc:	db000817 	ldw	r12,32(sp)
 80026e0:	dac01017 	ldw	r11,64(sp)
 80026e4:	da001217 	ldw	r8,72(sp)
 80026e8:	1000881e 	bne	r2,zero,800290c <___vfprintf_internal_r+0x1ec4>
 80026ec:	a005883a 	mov	r2,r20
 80026f0:	1445c83a 	sub	r2,r2,r17
 80026f4:	d8c00717 	ldw	r3,28(sp)
 80026f8:	d8800815 	stw	r2,32(sp)
 80026fc:	d8801617 	ldw	r2,88(sp)
 8002700:	18c011d8 	cmpnei	r3,r3,71
 8002704:	d8800715 	stw	r2,28(sp)
 8002708:	183e8126 	beq	r3,zero,8002110 <___vfprintf_internal_r+0x16c8>
 800270c:	d8800f17 	ldw	r2,60(sp)
 8002710:	103e8426 	beq	r2,zero,8002124 <___vfprintf_internal_r+0x16dc>
 8002714:	d8c00717 	ldw	r3,28(sp)
 8002718:	6080004c 	andi	r2,r12,1
 800271c:	12c4b03a 	or	r2,r2,r11
 8002720:	00c10d0e 	bge	zero,r3,8002b58 <___vfprintf_internal_r+0x2110>
 8002724:	1000f11e 	bne	r2,zero,8002aec <___vfprintf_internal_r+0x20a4>
 8002728:	dd000717 	ldw	r20,28(sp)
 800272c:	a02b883a 	mov	r21,r20
 8002730:	d8800e07 	ldb	r2,56(sp)
 8002734:	10007e26 	beq	r2,zero,8002930 <___vfprintf_internal_r+0x1ee8>
 8002738:	00800b44 	movi	r2,45
 800273c:	d8801545 	stb	r2,85(sp)
 8002740:	0017883a 	mov	r11,zero
 8002744:	003bdf06 	br	80016c4 <___vfprintf_internal_r+0xc7c>
 8002748:	04420074 	movhi	r17,2049
 800274c:	8c7ef304 	addi	r17,r17,-1076
 8002750:	003b2e06 	br	800140c <___vfprintf_internal_r+0x9c4>
 8002754:	b021883a 	mov	r16,r22
 8002758:	9019883a 	mov	r12,r18
 800275c:	e02d883a 	mov	r22,fp
 8002760:	dc800f17 	ldw	r18,60(sp)
 8002764:	8839883a 	mov	fp,r17
 8002768:	dc400e17 	ldw	r17,56(sp)
 800276c:	10800044 	addi	r2,r2,1
 8002770:	1f07883a 	add	r3,r3,fp
 8002774:	d8801d15 	stw	r2,116(sp)
 8002778:	43000015 	stw	r12,0(r8)
 800277c:	47000115 	stw	fp,4(r8)
 8002780:	d8c01e15 	stw	r3,120(sp)
 8002784:	10800208 	cmpgei	r2,r2,8
 8002788:	1000421e 	bne	r2,zero,8002894 <___vfprintf_internal_r+0x1e4c>
 800278c:	42000204 	addi	r8,r8,8
 8002790:	003d9c06 	br	8001e04 <___vfprintf_internal_r+0x13bc>
 8002794:	00800b44 	movi	r2,45
 8002798:	d8801545 	stb	r2,85(sp)
 800279c:	03400b44 	movi	r13,45
 80027a0:	003b1606 	br	80013fc <___vfprintf_internal_r+0x9b4>
 80027a4:	8019883a 	mov	r12,r16
 80027a8:	dc000717 	ldw	r16,28(sp)
 80027ac:	10800044 	addi	r2,r2,1
 80027b0:	1f07883a 	add	r3,r3,fp
 80027b4:	d8801d15 	stw	r2,116(sp)
 80027b8:	43000015 	stw	r12,0(r8)
 80027bc:	47000115 	stw	fp,4(r8)
 80027c0:	d8c01e15 	stw	r3,120(sp)
 80027c4:	10800208 	cmpgei	r2,r2,8
 80027c8:	103a7126 	beq	r2,zero,8001190 <___vfprintf_internal_r+0x748>
 80027cc:	003cc706 	br	8001aec <___vfprintf_internal_r+0x10a4>
 80027d0:	d9000517 	ldw	r4,20(sp)
 80027d4:	d9801c04 	addi	r6,sp,112
 80027d8:	980b883a 	mov	r5,r19
 80027dc:	80071100 	call	8007110 <__sprint_r>
 80027e0:	1039781e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80027e4:	d9001617 	ldw	r4,88(sp)
 80027e8:	d8c01e17 	ldw	r3,120(sp)
 80027ec:	b811883a 	mov	r8,r23
 80027f0:	003d9306 	br	8001e40 <___vfprintf_internal_r+0x13f8>
 80027f4:	1560003c 	xorhi	r21,r2,32768
 80027f8:	00800b44 	movi	r2,45
 80027fc:	d8800e05 	stb	r2,56(sp)
 8002800:	003e1b06 	br	8002070 <___vfprintf_internal_r+0x1628>
 8002804:	05000184 	movi	r20,6
 8002808:	003ec106 	br	8002310 <___vfprintf_internal_r+0x18c8>
 800280c:	002b883a 	mov	r21,zero
 8002810:	003a0206 	br	800101c <___vfprintf_internal_r+0x5d4>
 8002814:	d9401545 	stb	r5,85(sp)
 8002818:	00398a06 	br	8000e44 <___vfprintf_internal_r+0x3fc>
 800281c:	d9000917 	ldw	r4,36(sp)
 8002820:	000d883a 	mov	r6,zero
 8002824:	000f883a 	mov	r7,zero
 8002828:	a80b883a 	mov	r5,r21
 800282c:	da001215 	stw	r8,72(sp)
 8002830:	dac01015 	stw	r11,64(sp)
 8002834:	db000815 	stw	r12,32(sp)
 8002838:	800bc480 	call	800bc48 <__eqdf2>
 800283c:	db000817 	ldw	r12,32(sp)
 8002840:	dac01017 	ldw	r11,64(sp)
 8002844:	da001217 	ldw	r8,72(sp)
 8002848:	103f9a26 	beq	r2,zero,80026b4 <___vfprintf_internal_r+0x1c6c>
 800284c:	00800044 	movi	r2,1
 8002850:	12c5c83a 	sub	r2,r2,r11
 8002854:	d8801615 	stw	r2,88(sp)
 8002858:	003f9706 	br	80026b8 <___vfprintf_internal_r+0x1c70>
 800285c:	583dff1e 	bne	r11,zero,800205c <___vfprintf_internal_r+0x1614>
 8002860:	02c00044 	movi	r11,1
 8002864:	003dfd06 	br	800205c <___vfprintf_internal_r+0x1614>
 8002868:	d9000517 	ldw	r4,20(sp)
 800286c:	d9801c04 	addi	r6,sp,112
 8002870:	980b883a 	mov	r5,r19
 8002874:	80071100 	call	8007110 <__sprint_r>
 8002878:	1039521e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 800287c:	d9001617 	ldw	r4,88(sp)
 8002880:	d8c01e17 	ldw	r3,120(sp)
 8002884:	d8801d17 	ldw	r2,116(sp)
 8002888:	b811883a 	mov	r8,r23
 800288c:	203c8e0e 	bge	r4,zero,8001ac8 <___vfprintf_internal_r+0x1080>
 8002890:	003f2106 	br	8002518 <___vfprintf_internal_r+0x1ad0>
 8002894:	d9000517 	ldw	r4,20(sp)
 8002898:	d9801c04 	addi	r6,sp,112
 800289c:	980b883a 	mov	r5,r19
 80028a0:	80071100 	call	8007110 <__sprint_r>
 80028a4:	1039471e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80028a8:	d8c01e17 	ldw	r3,120(sp)
 80028ac:	b811883a 	mov	r8,r23
 80028b0:	003d5406 	br	8001e04 <___vfprintf_internal_r+0x13bc>
 80028b4:	d8801a04 	addi	r2,sp,104
 80028b8:	d8800315 	stw	r2,12(sp)
 80028bc:	d9400917 	ldw	r5,36(sp)
 80028c0:	d8801704 	addi	r2,sp,92
 80028c4:	d9000517 	ldw	r4,20(sp)
 80028c8:	5d000044 	addi	r20,r11,1
 80028cc:	d8800215 	stw	r2,8(sp)
 80028d0:	d8801604 	addi	r2,sp,88
 80028d4:	d8800115 	stw	r2,4(sp)
 80028d8:	dd000015 	stw	r20,0(sp)
 80028dc:	01c00084 	movi	r7,2
 80028e0:	a80d883a 	mov	r6,r21
 80028e4:	dac00815 	stw	r11,32(sp)
 80028e8:	800303c0 	call	800303c <_dtoa_r>
 80028ec:	dac00817 	ldw	r11,32(sp)
 80028f0:	db001017 	ldw	r12,64(sp)
 80028f4:	da001217 	ldw	r8,72(sp)
 80028f8:	1023883a 	mov	r17,r2
 80028fc:	e08011d8 	cmpnei	r2,fp,71
 8002900:	103df926 	beq	r2,zero,80020e8 <___vfprintf_internal_r+0x16a0>
 8002904:	8d29883a 	add	r20,r17,r20
 8002908:	003f6c06 	br	80026bc <___vfprintf_internal_r+0x1c74>
 800290c:	d8801a17 	ldw	r2,104(sp)
 8002910:	01000c04 	movi	r4,48
 8002914:	153f762e 	bgeu	r2,r20,80026f0 <___vfprintf_internal_r+0x1ca8>
 8002918:	10c00044 	addi	r3,r2,1
 800291c:	d8c01a15 	stw	r3,104(sp)
 8002920:	11000005 	stb	r4,0(r2)
 8002924:	d8801a17 	ldw	r2,104(sp)
 8002928:	153ffb36 	bltu	r2,r20,8002918 <___vfprintf_internal_r+0x1ed0>
 800292c:	003f7006 	br	80026f0 <___vfprintf_internal_r+0x1ca8>
 8002930:	db401543 	ldbu	r13,85(sp)
 8002934:	0017883a 	mov	r11,zero
 8002938:	003b5e06 	br	80016b4 <___vfprintf_internal_r+0xc6c>
 800293c:	d8800717 	ldw	r2,28(sp)
 8002940:	d8c00817 	ldw	r3,32(sp)
 8002944:	10c02216 	blt	r2,r3,80029d0 <___vfprintf_internal_r+0x1f88>
 8002948:	6300004c 	andi	r12,r12,1
 800294c:	6000601e 	bne	r12,zero,8002ad0 <___vfprintf_internal_r+0x2088>
 8002950:	102b883a 	mov	r21,r2
 8002954:	1000010e 	bge	r2,zero,800295c <___vfprintf_internal_r+0x1f14>
 8002958:	002b883a 	mov	r21,zero
 800295c:	dd000717 	ldw	r20,28(sp)
 8002960:	070019c4 	movi	fp,103
 8002964:	003f7206 	br	8002730 <___vfprintf_internal_r+0x1ce8>
 8002968:	d9000517 	ldw	r4,20(sp)
 800296c:	d9801c04 	addi	r6,sp,112
 8002970:	980b883a 	mov	r5,r19
 8002974:	80071100 	call	8007110 <__sprint_r>
 8002978:	1039121e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 800297c:	d8c01e17 	ldw	r3,120(sp)
 8002980:	b811883a 	mov	r8,r23
 8002984:	e03d1c0e 	bge	fp,zero,8001df8 <___vfprintf_internal_r+0x13b0>
 8002988:	003e5c06 	br	80022fc <___vfprintf_internal_r+0x18b4>
 800298c:	02c00184 	movi	r11,6
 8002990:	003db206 	br	800205c <___vfprintf_internal_r+0x1614>
 8002994:	d9000517 	ldw	r4,20(sp)
 8002998:	d9801c04 	addi	r6,sp,112
 800299c:	980b883a 	mov	r5,r19
 80029a0:	80071100 	call	8007110 <__sprint_r>
 80029a4:	1039071e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 80029a8:	d8801617 	ldw	r2,88(sp)
 80029ac:	d9000817 	ldw	r4,32(sp)
 80029b0:	d8c01e17 	ldw	r3,120(sp)
 80029b4:	b811883a 	mov	r8,r23
 80029b8:	2085c83a 	sub	r2,r4,r2
 80029bc:	003d3206 	br	8001e88 <___vfprintf_internal_r+0x1440>
 80029c0:	582b883a 	mov	r21,r11
 80029c4:	dc800615 	stw	r18,24(sp)
 80029c8:	5829883a 	mov	r20,r11
 80029cc:	0039bb06 	br	80010bc <___vfprintf_internal_r+0x674>
 80029d0:	d8800817 	ldw	r2,32(sp)
 80029d4:	d8c00b17 	ldw	r3,44(sp)
 80029d8:	10e9883a 	add	r20,r2,r3
 80029dc:	d8800717 	ldw	r2,28(sp)
 80029e0:	00800316 	blt	zero,r2,80029f0 <___vfprintf_internal_r+0x1fa8>
 80029e4:	d8800717 	ldw	r2,28(sp)
 80029e8:	a0b9c83a 	sub	fp,r20,r2
 80029ec:	e5000044 	addi	r20,fp,1
 80029f0:	a02b883a 	mov	r21,r20
 80029f4:	a0003b16 	blt	r20,zero,8002ae4 <___vfprintf_internal_r+0x209c>
 80029f8:	070019c4 	movi	fp,103
 80029fc:	003f4c06 	br	8002730 <___vfprintf_internal_r+0x1ce8>
 8002a00:	d9401545 	stb	r5,85(sp)
 8002a04:	003ac006 	br	8001508 <___vfprintf_internal_r+0xac0>
 8002a08:	d9401545 	stb	r5,85(sp)
 8002a0c:	003a2006 	br	8001290 <___vfprintf_internal_r+0x848>
 8002a10:	d9401545 	stb	r5,85(sp)
 8002a14:	003a2e06 	br	80012d0 <___vfprintf_internal_r+0x888>
 8002a18:	d9401545 	stb	r5,85(sp)
 8002a1c:	00398306 	br	800102c <___vfprintf_internal_r+0x5e4>
 8002a20:	d9401545 	stb	r5,85(sp)
 8002a24:	00395a06 	br	8000f90 <___vfprintf_internal_r+0x548>
 8002a28:	d9401545 	stb	r5,85(sp)
 8002a2c:	00394606 	br	8000f48 <___vfprintf_internal_r+0x500>
 8002a30:	d9401545 	stb	r5,85(sp)
 8002a34:	003a3606 	br	8001310 <___vfprintf_internal_r+0x8c8>
 8002a38:	d9401545 	stb	r5,85(sp)
 8002a3c:	003a7c06 	br	8001430 <___vfprintf_internal_r+0x9e8>
 8002a40:	d9401545 	stb	r5,85(sp)
 8002a44:	003a4206 	br	8001350 <___vfprintf_internal_r+0x908>
 8002a48:	d9401545 	stb	r5,85(sp)
 8002a4c:	003ac006 	br	8001550 <___vfprintf_internal_r+0xb08>
 8002a50:	8819883a 	mov	r12,r17
 8002a54:	dc400717 	ldw	r17,28(sp)
 8002a58:	a009883a 	mov	r4,r20
 8002a5c:	8029883a 	mov	r20,r16
 8002a60:	2021883a 	mov	r16,r4
 8002a64:	10800044 	addi	r2,r2,1
 8002a68:	1d07883a 	add	r3,r3,r20
 8002a6c:	43000015 	stw	r12,0(r8)
 8002a70:	45000115 	stw	r20,4(r8)
 8002a74:	d8c01e15 	stw	r3,120(sp)
 8002a78:	d8801d15 	stw	r2,116(sp)
 8002a7c:	11000208 	cmpgei	r4,r2,8
 8002a80:	203c1026 	beq	r4,zero,8001ac4 <___vfprintf_internal_r+0x107c>
 8002a84:	d9000517 	ldw	r4,20(sp)
 8002a88:	d9801c04 	addi	r6,sp,112
 8002a8c:	980b883a 	mov	r5,r19
 8002a90:	80071100 	call	8007110 <__sprint_r>
 8002a94:	1038cb1e 	bne	r2,zero,8000dc4 <___vfprintf_internal_r+0x37c>
 8002a98:	d8c01e17 	ldw	r3,120(sp)
 8002a9c:	d8801d17 	ldw	r2,116(sp)
 8002aa0:	b811883a 	mov	r8,r23
 8002aa4:	003c0806 	br	8001ac8 <___vfprintf_internal_r+0x1080>
 8002aa8:	00bfffc4 	movi	r2,-1
 8002aac:	d8800415 	stw	r2,16(sp)
 8002ab0:	0038c706 	br	8000dd0 <___vfprintf_internal_r+0x388>
 8002ab4:	00800c04 	movi	r2,48
 8002ab8:	a0c00c04 	addi	r3,r20,48
 8002abc:	d88018c5 	stb	r2,99(sp)
 8002ac0:	00800104 	movi	r2,4
 8002ac4:	d8c01905 	stb	r3,100(sp)
 8002ac8:	d8801115 	stw	r2,68(sp)
 8002acc:	003dca06 	br	80021f8 <___vfprintf_internal_r+0x17b0>
 8002ad0:	d8800717 	ldw	r2,28(sp)
 8002ad4:	d8c00b17 	ldw	r3,44(sp)
 8002ad8:	10e9883a 	add	r20,r2,r3
 8002adc:	a02b883a 	mov	r21,r20
 8002ae0:	a03fc50e 	bge	r20,zero,80029f8 <___vfprintf_internal_r+0x1fb0>
 8002ae4:	002b883a 	mov	r21,zero
 8002ae8:	003fc306 	br	80029f8 <___vfprintf_internal_r+0x1fb0>
 8002aec:	d8800b17 	ldw	r2,44(sp)
 8002af0:	1885883a 	add	r2,r3,r2
 8002af4:	12e9883a 	add	r20,r2,r11
 8002af8:	a02b883a 	mov	r21,r20
 8002afc:	a03f0c0e 	bge	r20,zero,8002730 <___vfprintf_internal_r+0x1ce8>
 8002b00:	002b883a 	mov	r21,zero
 8002b04:	003f0a06 	br	8002730 <___vfprintf_internal_r+0x1ce8>
 8002b08:	d8800a17 	ldw	r2,40(sp)
 8002b0c:	10001d16 	blt	r2,zero,8002b84 <___vfprintf_internal_r+0x213c>
 8002b10:	db401543 	ldbu	r13,85(sp)
 8002b14:	e0801210 	cmplti	r2,fp,72
 8002b18:	1000171e 	bne	r2,zero,8002b78 <___vfprintf_internal_r+0x2130>
 8002b1c:	04420074 	movhi	r17,2049
 8002b20:	8c7ef604 	addi	r17,r17,-1064
 8002b24:	003a3906 	br	800140c <___vfprintf_internal_r+0x9c4>
 8002b28:	00c00044 	movi	r3,1
 8002b2c:	18a9c83a 	sub	r20,r3,r2
 8002b30:	00800b44 	movi	r2,45
 8002b34:	d8801885 	stb	r2,98(sp)
 8002b38:	003d8106 	br	8002140 <___vfprintf_internal_r+0x16f8>
 8002b3c:	6080004c 	andi	r2,r12,1
 8002b40:	d8800715 	stw	r2,28(sp)
 8002b44:	103db11e 	bne	r2,zero,800220c <___vfprintf_internal_r+0x17c4>
 8002b48:	003feb06 	br	8002af8 <___vfprintf_internal_r+0x20b0>
 8002b4c:	4005883a 	mov	r2,r8
 8002b50:	633f0384 	addi	r12,r12,-1010
 8002b54:	003ea206 	br	80025e0 <___vfprintf_internal_r+0x1b98>
 8002b58:	1000031e 	bne	r2,zero,8002b68 <___vfprintf_internal_r+0x2120>
 8002b5c:	05400044 	movi	r21,1
 8002b60:	05000044 	movi	r20,1
 8002b64:	003ef206 	br	8002730 <___vfprintf_internal_r+0x1ce8>
 8002b68:	d8800b17 	ldw	r2,44(sp)
 8002b6c:	10800044 	addi	r2,r2,1
 8002b70:	12e9883a 	add	r20,r2,r11
 8002b74:	003fe006 	br	8002af8 <___vfprintf_internal_r+0x20b0>
 8002b78:	04420074 	movhi	r17,2049
 8002b7c:	8c7ef504 	addi	r17,r17,-1068
 8002b80:	003a2206 	br	800140c <___vfprintf_internal_r+0x9c4>
 8002b84:	00800b44 	movi	r2,45
 8002b88:	d8801545 	stb	r2,85(sp)
 8002b8c:	03400b44 	movi	r13,45
 8002b90:	003fe006 	br	8002b14 <___vfprintf_internal_r+0x20cc>
 8002b94:	00800084 	movi	r2,2
 8002b98:	d8801115 	stw	r2,68(sp)
 8002b9c:	003d9606 	br	80021f8 <___vfprintf_internal_r+0x17b0>
 8002ba0:	d8c00617 	ldw	r3,24(sp)
 8002ba4:	1ac00017 	ldw	r11,0(r3)
 8002ba8:	18c00104 	addi	r3,r3,4
 8002bac:	5800010e 	bge	r11,zero,8002bb4 <___vfprintf_internal_r+0x216c>
 8002bb0:	02ffffc4 	movi	r11,-1
 8002bb4:	b7000043 	ldbu	fp,1(r22)
 8002bb8:	d8c00615 	stw	r3,24(sp)
 8002bbc:	102d883a 	mov	r22,r2
 8002bc0:	e2803fcc 	andi	r10,fp,255
 8002bc4:	5280201c 	xori	r10,r10,128
 8002bc8:	52bfe004 	addi	r10,r10,-128
 8002bcc:	0037f906 	br	8000bb4 <___vfprintf_internal_r+0x16c>

08002bd0 <__vfprintf_internal>:
 8002bd0:	00820074 	movhi	r2,2049
 8002bd4:	300f883a 	mov	r7,r6
 8002bd8:	280d883a 	mov	r6,r5
 8002bdc:	200b883a 	mov	r5,r4
 8002be0:	11073d17 	ldw	r4,7412(r2)
 8002be4:	8000a481 	jmpi	8000a48 <___vfprintf_internal_r>

08002be8 <__sbprintf>:
 8002be8:	2880030b 	ldhu	r2,12(r5)
 8002bec:	2b001917 	ldw	r12,100(r5)
 8002bf0:	2ac0038b 	ldhu	r11,14(r5)
 8002bf4:	2a800717 	ldw	r10,28(r5)
 8002bf8:	2a400917 	ldw	r9,36(r5)
 8002bfc:	defee204 	addi	sp,sp,-1144
 8002c00:	da001a04 	addi	r8,sp,104
 8002c04:	00c10004 	movi	r3,1024
 8002c08:	dc011a15 	stw	r16,1128(sp)
 8002c0c:	10bfff4c 	andi	r2,r2,65533
 8002c10:	2821883a 	mov	r16,r5
 8002c14:	d80b883a 	mov	r5,sp
 8002c18:	dc811c15 	stw	r18,1136(sp)
 8002c1c:	dc411b15 	stw	r17,1132(sp)
 8002c20:	dfc11d15 	stw	ra,1140(sp)
 8002c24:	2025883a 	mov	r18,r4
 8002c28:	d880030d 	sth	r2,12(sp)
 8002c2c:	db001915 	stw	r12,100(sp)
 8002c30:	dac0038d 	sth	r11,14(sp)
 8002c34:	da800715 	stw	r10,28(sp)
 8002c38:	da400915 	stw	r9,36(sp)
 8002c3c:	da000015 	stw	r8,0(sp)
 8002c40:	da000415 	stw	r8,16(sp)
 8002c44:	d8c00215 	stw	r3,8(sp)
 8002c48:	d8c00515 	stw	r3,20(sp)
 8002c4c:	d8000615 	stw	zero,24(sp)
 8002c50:	8000a480 	call	8000a48 <___vfprintf_internal_r>
 8002c54:	1023883a 	mov	r17,r2
 8002c58:	10000d0e 	bge	r2,zero,8002c90 <__sbprintf+0xa8>
 8002c5c:	d880030b 	ldhu	r2,12(sp)
 8002c60:	1080100c 	andi	r2,r2,64
 8002c64:	10000326 	beq	r2,zero,8002c74 <__sbprintf+0x8c>
 8002c68:	8080030b 	ldhu	r2,12(r16)
 8002c6c:	10801014 	ori	r2,r2,64
 8002c70:	8080030d 	sth	r2,12(r16)
 8002c74:	8805883a 	mov	r2,r17
 8002c78:	dfc11d17 	ldw	ra,1140(sp)
 8002c7c:	dc811c17 	ldw	r18,1136(sp)
 8002c80:	dc411b17 	ldw	r17,1132(sp)
 8002c84:	dc011a17 	ldw	r16,1128(sp)
 8002c88:	dec11e04 	addi	sp,sp,1144
 8002c8c:	f800283a 	ret
 8002c90:	d80b883a 	mov	r5,sp
 8002c94:	9009883a 	mov	r4,r18
 8002c98:	800492c0 	call	800492c <_fflush_r>
 8002c9c:	103fef26 	beq	r2,zero,8002c5c <__sbprintf+0x74>
 8002ca0:	047fffc4 	movi	r17,-1
 8002ca4:	003fed06 	br	8002c5c <__sbprintf+0x74>

08002ca8 <__swsetup_r>:
 8002ca8:	00820074 	movhi	r2,2049
 8002cac:	10873d17 	ldw	r2,7412(r2)
 8002cb0:	defffd04 	addi	sp,sp,-12
 8002cb4:	dc400115 	stw	r17,4(sp)
 8002cb8:	dc000015 	stw	r16,0(sp)
 8002cbc:	dfc00215 	stw	ra,8(sp)
 8002cc0:	2023883a 	mov	r17,r4
 8002cc4:	2821883a 	mov	r16,r5
 8002cc8:	10000226 	beq	r2,zero,8002cd4 <__swsetup_r+0x2c>
 8002ccc:	10c00e17 	ldw	r3,56(r2)
 8002cd0:	18002026 	beq	r3,zero,8002d54 <__swsetup_r+0xac>
 8002cd4:	8080030b 	ldhu	r2,12(r16)
 8002cd8:	10c0020c 	andi	r3,r2,8
 8002cdc:	1009883a 	mov	r4,r2
 8002ce0:	18002226 	beq	r3,zero,8002d6c <__swsetup_r+0xc4>
 8002ce4:	80c00417 	ldw	r3,16(r16)
 8002ce8:	18002826 	beq	r3,zero,8002d8c <__swsetup_r+0xe4>
 8002cec:	1100004c 	andi	r4,r2,1
 8002cf0:	20000b1e 	bne	r4,zero,8002d20 <__swsetup_r+0x78>
 8002cf4:	1080008c 	andi	r2,r2,2
 8002cf8:	10002d1e 	bne	r2,zero,8002db0 <__swsetup_r+0x108>
 8002cfc:	80800517 	ldw	r2,20(r16)
 8002d00:	80800215 	stw	r2,8(r16)
 8002d04:	18000b26 	beq	r3,zero,8002d34 <__swsetup_r+0x8c>
 8002d08:	0005883a 	mov	r2,zero
 8002d0c:	dfc00217 	ldw	ra,8(sp)
 8002d10:	dc400117 	ldw	r17,4(sp)
 8002d14:	dc000017 	ldw	r16,0(sp)
 8002d18:	dec00304 	addi	sp,sp,12
 8002d1c:	f800283a 	ret
 8002d20:	80800517 	ldw	r2,20(r16)
 8002d24:	80000215 	stw	zero,8(r16)
 8002d28:	0085c83a 	sub	r2,zero,r2
 8002d2c:	80800615 	stw	r2,24(r16)
 8002d30:	183ff51e 	bne	r3,zero,8002d08 <__swsetup_r+0x60>
 8002d34:	80c0030b 	ldhu	r3,12(r16)
 8002d38:	0005883a 	mov	r2,zero
 8002d3c:	1900200c 	andi	r4,r3,128
 8002d40:	203ff226 	beq	r4,zero,8002d0c <__swsetup_r+0x64>
 8002d44:	18c01014 	ori	r3,r3,64
 8002d48:	80c0030d 	sth	r3,12(r16)
 8002d4c:	00bfffc4 	movi	r2,-1
 8002d50:	003fee06 	br	8002d0c <__swsetup_r+0x64>
 8002d54:	1009883a 	mov	r4,r2
 8002d58:	8004cc00 	call	8004cc0 <__sinit>
 8002d5c:	8080030b 	ldhu	r2,12(r16)
 8002d60:	10c0020c 	andi	r3,r2,8
 8002d64:	1009883a 	mov	r4,r2
 8002d68:	183fde1e 	bne	r3,zero,8002ce4 <__swsetup_r+0x3c>
 8002d6c:	2080040c 	andi	r2,r4,16
 8002d70:	10001f26 	beq	r2,zero,8002df0 <__swsetup_r+0x148>
 8002d74:	2080010c 	andi	r2,r4,4
 8002d78:	10000f1e 	bne	r2,zero,8002db8 <__swsetup_r+0x110>
 8002d7c:	80c00417 	ldw	r3,16(r16)
 8002d80:	20800214 	ori	r2,r4,8
 8002d84:	8080030d 	sth	r2,12(r16)
 8002d88:	183fd81e 	bne	r3,zero,8002cec <__swsetup_r+0x44>
 8002d8c:	1100a00c 	andi	r4,r2,640
 8002d90:	21008020 	cmpeqi	r4,r4,512
 8002d94:	203fd51e 	bne	r4,zero,8002cec <__swsetup_r+0x44>
 8002d98:	800b883a 	mov	r5,r16
 8002d9c:	8809883a 	mov	r4,r17
 8002da0:	80053300 	call	8005330 <__smakebuf_r>
 8002da4:	8080030b 	ldhu	r2,12(r16)
 8002da8:	80c00417 	ldw	r3,16(r16)
 8002dac:	003fcf06 	br	8002cec <__swsetup_r+0x44>
 8002db0:	0005883a 	mov	r2,zero
 8002db4:	003fd206 	br	8002d00 <__swsetup_r+0x58>
 8002db8:	81400c17 	ldw	r5,48(r16)
 8002dbc:	28000626 	beq	r5,zero,8002dd8 <__swsetup_r+0x130>
 8002dc0:	80801004 	addi	r2,r16,64
 8002dc4:	28800326 	beq	r5,r2,8002dd4 <__swsetup_r+0x12c>
 8002dc8:	8809883a 	mov	r4,r17
 8002dcc:	8004e240 	call	8004e24 <_free_r>
 8002dd0:	8100030b 	ldhu	r4,12(r16)
 8002dd4:	80000c15 	stw	zero,48(r16)
 8002dd8:	80c00417 	ldw	r3,16(r16)
 8002ddc:	00bff6c4 	movi	r2,-37
 8002de0:	1108703a 	and	r4,r2,r4
 8002de4:	80000115 	stw	zero,4(r16)
 8002de8:	80c00015 	stw	r3,0(r16)
 8002dec:	003fe406 	br	8002d80 <__swsetup_r+0xd8>
 8002df0:	00800244 	movi	r2,9
 8002df4:	88800015 	stw	r2,0(r17)
 8002df8:	20801014 	ori	r2,r4,64
 8002dfc:	8080030d 	sth	r2,12(r16)
 8002e00:	00bfffc4 	movi	r2,-1
 8002e04:	003fc106 	br	8002d0c <__swsetup_r+0x64>

08002e08 <quorem>:
 8002e08:	defff204 	addi	sp,sp,-56
 8002e0c:	dc000415 	stw	r16,16(sp)
 8002e10:	20800417 	ldw	r2,16(r4)
 8002e14:	2c000417 	ldw	r16,16(r5)
 8002e18:	dfc00d15 	stw	ra,52(sp)
 8002e1c:	df000c15 	stw	fp,48(sp)
 8002e20:	ddc00b15 	stw	r23,44(sp)
 8002e24:	dd800a15 	stw	r22,40(sp)
 8002e28:	dd400915 	stw	r21,36(sp)
 8002e2c:	dd000815 	stw	r20,32(sp)
 8002e30:	dcc00715 	stw	r19,28(sp)
 8002e34:	dc800615 	stw	r18,24(sp)
 8002e38:	dc400515 	stw	r17,20(sp)
 8002e3c:	14007d16 	blt	r2,r16,8003034 <quorem+0x22c>
 8002e40:	843fffc4 	addi	r16,r16,-1
 8002e44:	802c90ba 	slli	r22,r16,2
 8002e48:	2f000504 	addi	fp,r5,20
 8002e4c:	24c00504 	addi	r19,r4,20
 8002e50:	e5a5883a 	add	r18,fp,r22
 8002e54:	9d85883a 	add	r2,r19,r22
 8002e58:	95c00017 	ldw	r23,0(r18)
 8002e5c:	15000017 	ldw	r20,0(r2)
 8002e60:	d9400215 	stw	r5,8(sp)
 8002e64:	bdc00044 	addi	r23,r23,1
 8002e68:	d9000115 	stw	r4,4(sp)
 8002e6c:	b80b883a 	mov	r5,r23
 8002e70:	a009883a 	mov	r4,r20
 8002e74:	dcc00015 	stw	r19,0(sp)
 8002e78:	d8800315 	stw	r2,12(sp)
 8002e7c:	800a8840 	call	800a884 <__udivsi3>
 8002e80:	1023883a 	mov	r17,r2
 8002e84:	a5c03236 	bltu	r20,r23,8002f50 <quorem+0x148>
 8002e88:	e02d883a 	mov	r22,fp
 8002e8c:	9829883a 	mov	r20,r19
 8002e90:	002b883a 	mov	r21,zero
 8002e94:	002f883a 	mov	r23,zero
 8002e98:	b5800104 	addi	r22,r22,4
 8002e9c:	b4ffff17 	ldw	r19,-4(r22)
 8002ea0:	880b883a 	mov	r5,r17
 8002ea4:	a5000104 	addi	r20,r20,4
 8002ea8:	993fffcc 	andi	r4,r19,65535
 8002eac:	80008b80 	call	80008b8 <__mulsi3>
 8002eb0:	9808d43a 	srli	r4,r19,16
 8002eb4:	880b883a 	mov	r5,r17
 8002eb8:	156b883a 	add	r21,r2,r21
 8002ebc:	80008b80 	call	80008b8 <__mulsi3>
 8002ec0:	a0ffff17 	ldw	r3,-4(r20)
 8002ec4:	a80ad43a 	srli	r5,r21,16
 8002ec8:	a93fffcc 	andi	r4,r21,65535
 8002ecc:	b909c83a 	sub	r4,r23,r4
 8002ed0:	19bfffcc 	andi	r6,r3,65535
 8002ed4:	2189883a 	add	r4,r4,r6
 8002ed8:	1806d43a 	srli	r3,r3,16
 8002edc:	116b883a 	add	r21,r2,r5
 8002ee0:	2005d43a 	srai	r2,r4,16
 8002ee4:	a97fffcc 	andi	r5,r21,65535
 8002ee8:	1947c83a 	sub	r3,r3,r5
 8002eec:	1887883a 	add	r3,r3,r2
 8002ef0:	1804943a 	slli	r2,r3,16
 8002ef4:	213fffcc 	andi	r4,r4,65535
 8002ef8:	a82ad43a 	srli	r21,r21,16
 8002efc:	1108b03a 	or	r4,r2,r4
 8002f00:	a13fff15 	stw	r4,-4(r20)
 8002f04:	182fd43a 	srai	r23,r3,16
 8002f08:	95bfe32e 	bgeu	r18,r22,8002e98 <quorem+0x90>
 8002f0c:	d8c00317 	ldw	r3,12(sp)
 8002f10:	18800017 	ldw	r2,0(r3)
 8002f14:	10000e1e 	bne	r2,zero,8002f50 <quorem+0x148>
 8002f18:	d9000017 	ldw	r4,0(sp)
 8002f1c:	18bfff04 	addi	r2,r3,-4
 8002f20:	2080092e 	bgeu	r4,r2,8002f48 <quorem+0x140>
 8002f24:	18ffff17 	ldw	r3,-4(r3)
 8002f28:	18000326 	beq	r3,zero,8002f38 <quorem+0x130>
 8002f2c:	00000606 	br	8002f48 <quorem+0x140>
 8002f30:	10c00017 	ldw	r3,0(r2)
 8002f34:	1800041e 	bne	r3,zero,8002f48 <quorem+0x140>
 8002f38:	d8c00017 	ldw	r3,0(sp)
 8002f3c:	10bfff04 	addi	r2,r2,-4
 8002f40:	843fffc4 	addi	r16,r16,-1
 8002f44:	18bffa36 	bltu	r3,r2,8002f30 <quorem+0x128>
 8002f48:	d8800117 	ldw	r2,4(sp)
 8002f4c:	14000415 	stw	r16,16(r2)
 8002f50:	d9400217 	ldw	r5,8(sp)
 8002f54:	d9000117 	ldw	r4,4(sp)
 8002f58:	80067380 	call	8006738 <__mcmp>
 8002f5c:	10002816 	blt	r2,zero,8003000 <quorem+0x1f8>
 8002f60:	d9800017 	ldw	r6,0(sp)
 8002f64:	8c400044 	addi	r17,r17,1
 8002f68:	0007883a 	mov	r3,zero
 8002f6c:	e7000104 	addi	fp,fp,4
 8002f70:	e13fff17 	ldw	r4,-4(fp)
 8002f74:	31400017 	ldw	r5,0(r6)
 8002f78:	31800104 	addi	r6,r6,4
 8002f7c:	20bfffcc 	andi	r2,r4,65535
 8002f80:	1887c83a 	sub	r3,r3,r2
 8002f84:	28bfffcc 	andi	r2,r5,65535
 8002f88:	1885883a 	add	r2,r3,r2
 8002f8c:	2008d43a 	srli	r4,r4,16
 8002f90:	2806d43a 	srli	r3,r5,16
 8002f94:	100fd43a 	srai	r7,r2,16
 8002f98:	117fffcc 	andi	r5,r2,65535
 8002f9c:	1907c83a 	sub	r3,r3,r4
 8002fa0:	19c7883a 	add	r3,r3,r7
 8002fa4:	1804943a 	slli	r2,r3,16
 8002fa8:	1807d43a 	srai	r3,r3,16
 8002fac:	1144b03a 	or	r2,r2,r5
 8002fb0:	30bfff15 	stw	r2,-4(r6)
 8002fb4:	973fed2e 	bgeu	r18,fp,8002f6c <quorem+0x164>
 8002fb8:	800690ba 	slli	r3,r16,2
 8002fbc:	d9000017 	ldw	r4,0(sp)
 8002fc0:	20c7883a 	add	r3,r4,r3
 8002fc4:	18800017 	ldw	r2,0(r3)
 8002fc8:	10000d1e 	bne	r2,zero,8003000 <quorem+0x1f8>
 8002fcc:	18bfff04 	addi	r2,r3,-4
 8002fd0:	2080092e 	bgeu	r4,r2,8002ff8 <quorem+0x1f0>
 8002fd4:	18ffff17 	ldw	r3,-4(r3)
 8002fd8:	18000326 	beq	r3,zero,8002fe8 <quorem+0x1e0>
 8002fdc:	00000606 	br	8002ff8 <quorem+0x1f0>
 8002fe0:	10c00017 	ldw	r3,0(r2)
 8002fe4:	1800041e 	bne	r3,zero,8002ff8 <quorem+0x1f0>
 8002fe8:	d8c00017 	ldw	r3,0(sp)
 8002fec:	10bfff04 	addi	r2,r2,-4
 8002ff0:	843fffc4 	addi	r16,r16,-1
 8002ff4:	18bffa36 	bltu	r3,r2,8002fe0 <quorem+0x1d8>
 8002ff8:	d8800117 	ldw	r2,4(sp)
 8002ffc:	14000415 	stw	r16,16(r2)
 8003000:	8805883a 	mov	r2,r17
 8003004:	dfc00d17 	ldw	ra,52(sp)
 8003008:	df000c17 	ldw	fp,48(sp)
 800300c:	ddc00b17 	ldw	r23,44(sp)
 8003010:	dd800a17 	ldw	r22,40(sp)
 8003014:	dd400917 	ldw	r21,36(sp)
 8003018:	dd000817 	ldw	r20,32(sp)
 800301c:	dcc00717 	ldw	r19,28(sp)
 8003020:	dc800617 	ldw	r18,24(sp)
 8003024:	dc400517 	ldw	r17,20(sp)
 8003028:	dc000417 	ldw	r16,16(sp)
 800302c:	dec00e04 	addi	sp,sp,56
 8003030:	f800283a 	ret
 8003034:	0005883a 	mov	r2,zero
 8003038:	003ff206 	br	8003004 <quorem+0x1fc>

0800303c <_dtoa_r>:
 800303c:	20801017 	ldw	r2,64(r4)
 8003040:	deffe204 	addi	sp,sp,-120
 8003044:	df001c15 	stw	fp,112(sp)
 8003048:	dcc01715 	stw	r19,92(sp)
 800304c:	dc401515 	stw	r17,84(sp)
 8003050:	dc001415 	stw	r16,80(sp)
 8003054:	dfc01d15 	stw	ra,116(sp)
 8003058:	ddc01b15 	stw	r23,108(sp)
 800305c:	dd801a15 	stw	r22,104(sp)
 8003060:	dd401915 	stw	r21,100(sp)
 8003064:	dd001815 	stw	r20,96(sp)
 8003068:	dc801615 	stw	r18,88(sp)
 800306c:	d9400115 	stw	r5,4(sp)
 8003070:	d9c00215 	stw	r7,8(sp)
 8003074:	2039883a 	mov	fp,r4
 8003078:	3027883a 	mov	r19,r6
 800307c:	dc002017 	ldw	r16,128(sp)
 8003080:	3023883a 	mov	r17,r6
 8003084:	10000826 	beq	r2,zero,80030a8 <_dtoa_r+0x6c>
 8003088:	21801117 	ldw	r6,68(r4)
 800308c:	00c00044 	movi	r3,1
 8003090:	100b883a 	mov	r5,r2
 8003094:	1986983a 	sll	r3,r3,r6
 8003098:	11800115 	stw	r6,4(r2)
 800309c:	10c00215 	stw	r3,8(r2)
 80030a0:	8005edc0 	call	8005edc <_Bfree>
 80030a4:	e0001015 	stw	zero,64(fp)
 80030a8:	98018116 	blt	r19,zero,80036b0 <_dtoa_r+0x674>
 80030ac:	80000015 	stw	zero,0(r16)
 80030b0:	989ffc2c 	andhi	r2,r19,32752
 80030b4:	00dffc34 	movhi	r3,32752
 80030b8:	10c18626 	beq	r2,r3,80036d4 <_dtoa_r+0x698>
 80030bc:	d9000117 	ldw	r4,4(sp)
 80030c0:	000d883a 	mov	r6,zero
 80030c4:	000f883a 	mov	r7,zero
 80030c8:	880b883a 	mov	r5,r17
 80030cc:	800bc480 	call	800bc48 <__eqdf2>
 80030d0:	1000191e 	bne	r2,zero,8003138 <_dtoa_r+0xfc>
 80030d4:	d8c01f17 	ldw	r3,124(sp)
 80030d8:	00800044 	movi	r2,1
 80030dc:	18800015 	stw	r2,0(r3)
 80030e0:	d8802117 	ldw	r2,132(sp)
 80030e4:	10032426 	beq	r2,zero,8003d78 <_dtoa_r+0xd3c>
 80030e8:	d9002117 	ldw	r4,132(sp)
 80030ec:	00820074 	movhi	r2,2049
 80030f0:	10bf0344 	addi	r2,r2,-1011
 80030f4:	00c20074 	movhi	r3,2049
 80030f8:	20800015 	stw	r2,0(r4)
 80030fc:	18bf0304 	addi	r2,r3,-1012
 8003100:	d8800315 	stw	r2,12(sp)
 8003104:	d8800317 	ldw	r2,12(sp)
 8003108:	dfc01d17 	ldw	ra,116(sp)
 800310c:	df001c17 	ldw	fp,112(sp)
 8003110:	ddc01b17 	ldw	r23,108(sp)
 8003114:	dd801a17 	ldw	r22,104(sp)
 8003118:	dd401917 	ldw	r21,100(sp)
 800311c:	dd001817 	ldw	r20,96(sp)
 8003120:	dcc01717 	ldw	r19,92(sp)
 8003124:	dc801617 	ldw	r18,88(sp)
 8003128:	dc401517 	ldw	r17,84(sp)
 800312c:	dc001417 	ldw	r16,80(sp)
 8003130:	dec01e04 	addi	sp,sp,120
 8003134:	f800283a 	ret
 8003138:	dc800117 	ldw	r18,4(sp)
 800313c:	d8801204 	addi	r2,sp,72
 8003140:	9820d53a 	srli	r16,r19,20
 8003144:	d8800015 	stw	r2,0(sp)
 8003148:	d9c01304 	addi	r7,sp,76
 800314c:	900b883a 	mov	r5,r18
 8003150:	880d883a 	mov	r6,r17
 8003154:	e009883a 	mov	r4,fp
 8003158:	8006aac0 	call	8006aac <__d2b>
 800315c:	102b883a 	mov	r21,r2
 8003160:	8001701e 	bne	r16,zero,8003724 <_dtoa_r+0x6e8>
 8003164:	dc801217 	ldw	r18,72(sp)
 8003168:	dc001317 	ldw	r16,76(sp)
 800316c:	9421883a 	add	r16,r18,r16
 8003170:	80810c84 	addi	r2,r16,1074
 8003174:	10c00850 	cmplti	r3,r2,33
 8003178:	18030f1e 	bne	r3,zero,8003db8 <_dtoa_r+0xd7c>
 800317c:	01001004 	movi	r4,64
 8003180:	2085c83a 	sub	r2,r4,r2
 8003184:	98a6983a 	sll	r19,r19,r2
 8003188:	d8800117 	ldw	r2,4(sp)
 800318c:	81010484 	addi	r4,r16,1042
 8003190:	1108d83a 	srl	r4,r2,r4
 8003194:	9908b03a 	or	r4,r19,r4
 8003198:	800d1900 	call	800d190 <__floatunsidf>
 800319c:	1009883a 	mov	r4,r2
 80031a0:	017f8434 	movhi	r5,65040
 80031a4:	00800044 	movi	r2,1
 80031a8:	194b883a 	add	r5,r3,r5
 80031ac:	843fffc4 	addi	r16,r16,-1
 80031b0:	d8800a15 	stw	r2,40(sp)
 80031b4:	000d883a 	mov	r6,zero
 80031b8:	01cffe34 	movhi	r7,16376
 80031bc:	800c6880 	call	800c688 <__subdf3>
 80031c0:	0198dbf4 	movhi	r6,25455
 80031c4:	01cff4f4 	movhi	r7,16339
 80031c8:	3190d844 	addi	r6,r6,17249
 80031cc:	39e1e9c4 	addi	r7,r7,-30809
 80031d0:	1009883a 	mov	r4,r2
 80031d4:	180b883a 	mov	r5,r3
 80031d8:	800bea80 	call	800bea8 <__muldf3>
 80031dc:	01a2d874 	movhi	r6,35681
 80031e0:	01cff1f4 	movhi	r7,16327
 80031e4:	31b22cc4 	addi	r6,r6,-14157
 80031e8:	39e28a04 	addi	r7,r7,-30168
 80031ec:	180b883a 	mov	r5,r3
 80031f0:	1009883a 	mov	r4,r2
 80031f4:	800a9440 	call	800a944 <__adddf3>
 80031f8:	8009883a 	mov	r4,r16
 80031fc:	1029883a 	mov	r20,r2
 8003200:	1827883a 	mov	r19,r3
 8003204:	800d0c80 	call	800d0c8 <__floatsidf>
 8003208:	019427f4 	movhi	r6,20639
 800320c:	01cff4f4 	movhi	r7,16339
 8003210:	319e7ec4 	addi	r6,r6,31227
 8003214:	39d104c4 	addi	r7,r7,17427
 8003218:	1009883a 	mov	r4,r2
 800321c:	180b883a 	mov	r5,r3
 8003220:	800bea80 	call	800bea8 <__muldf3>
 8003224:	100d883a 	mov	r6,r2
 8003228:	180f883a 	mov	r7,r3
 800322c:	a009883a 	mov	r4,r20
 8003230:	980b883a 	mov	r5,r19
 8003234:	800a9440 	call	800a944 <__adddf3>
 8003238:	1009883a 	mov	r4,r2
 800323c:	180b883a 	mov	r5,r3
 8003240:	1029883a 	mov	r20,r2
 8003244:	1827883a 	mov	r19,r3
 8003248:	800d0480 	call	800d048 <__fixdfsi>
 800324c:	000d883a 	mov	r6,zero
 8003250:	000f883a 	mov	r7,zero
 8003254:	a009883a 	mov	r4,r20
 8003258:	980b883a 	mov	r5,r19
 800325c:	102d883a 	mov	r22,r2
 8003260:	800bdb80 	call	800bdb8 <__ledf2>
 8003264:	1002ba16 	blt	r2,zero,8003d50 <_dtoa_r+0xd14>
 8003268:	9421c83a 	sub	r16,r18,r16
 800326c:	b08005e8 	cmpgeui	r2,r22,23
 8003270:	853fffc4 	addi	r20,r16,-1
 8003274:	1002ae1e 	bne	r2,zero,8003d30 <_dtoa_r+0xcf4>
 8003278:	b00690fa 	slli	r3,r22,3
 800327c:	00820074 	movhi	r2,2049
 8003280:	10bf2704 	addi	r2,r2,-868
 8003284:	10c5883a 	add	r2,r2,r3
 8003288:	11800017 	ldw	r6,0(r2)
 800328c:	11c00117 	ldw	r7,4(r2)
 8003290:	d9000117 	ldw	r4,4(sp)
 8003294:	880b883a 	mov	r5,r17
 8003298:	800bdb80 	call	800bdb8 <__ledf2>
 800329c:	10026f0e 	bge	r2,zero,8003c5c <_dtoa_r+0xc20>
 80032a0:	d8000915 	stw	zero,36(sp)
 80032a4:	b5bfffc4 	addi	r22,r22,-1
 80032a8:	a002a416 	blt	r20,zero,8003d3c <_dtoa_r+0xd00>
 80032ac:	d8000515 	stw	zero,20(sp)
 80032b0:	b0026d0e 	bge	r22,zero,8003c68 <_dtoa_r+0xc2c>
 80032b4:	d8800517 	ldw	r2,20(sp)
 80032b8:	d8c00217 	ldw	r3,8(sp)
 80032bc:	dd800415 	stw	r22,16(sp)
 80032c0:	1585c83a 	sub	r2,r2,r22
 80032c4:	d8800515 	stw	r2,20(sp)
 80032c8:	0585c83a 	sub	r2,zero,r22
 80032cc:	d8800815 	stw	r2,32(sp)
 80032d0:	188002a8 	cmpgeui	r2,r3,10
 80032d4:	002d883a 	mov	r22,zero
 80032d8:	1002691e 	bne	r2,zero,8003c80 <_dtoa_r+0xc44>
 80032dc:	18800190 	cmplti	r2,r3,6
 80032e0:	1002ba1e 	bne	r2,zero,8003dcc <_dtoa_r+0xd90>
 80032e4:	18bfff04 	addi	r2,r3,-4
 80032e8:	d8800215 	stw	r2,8(sp)
 80032ec:	0021883a 	mov	r16,zero
 80032f0:	d8c00217 	ldw	r3,8(sp)
 80032f4:	188000e0 	cmpeqi	r2,r3,3
 80032f8:	10039d1e 	bne	r2,zero,8004170 <_dtoa_r+0x1134>
 80032fc:	18800108 	cmpgei	r2,r3,4
 8003300:	10027a26 	beq	r2,zero,8003cec <_dtoa_r+0xcb0>
 8003304:	d8c00217 	ldw	r3,8(sp)
 8003308:	18800120 	cmpeqi	r2,r3,4
 800330c:	10026926 	beq	r2,zero,8003cb4 <_dtoa_r+0xc78>
 8003310:	00800044 	movi	r2,1
 8003314:	d8800715 	stw	r2,28(sp)
 8003318:	d8801e17 	ldw	r2,120(sp)
 800331c:	0083670e 	bge	zero,r2,80040bc <_dtoa_r+0x1080>
 8003320:	d8800b15 	stw	r2,44(sp)
 8003324:	d8800615 	stw	r2,24(sp)
 8003328:	100d883a 	mov	r6,r2
 800332c:	e0001115 	stw	zero,68(fp)
 8003330:	30800610 	cmplti	r2,r6,24
 8003334:	dc800617 	ldw	r18,24(sp)
 8003338:	1004eb1e 	bne	r2,zero,80046e8 <_dtoa_r+0x16ac>
 800333c:	00c00044 	movi	r3,1
 8003340:	00800104 	movi	r2,4
 8003344:	1085883a 	add	r2,r2,r2
 8003348:	11000504 	addi	r4,r2,20
 800334c:	180b883a 	mov	r5,r3
 8003350:	18c00044 	addi	r3,r3,1
 8003354:	313ffb2e 	bgeu	r6,r4,8003344 <_dtoa_r+0x308>
 8003358:	e1401115 	stw	r5,68(fp)
 800335c:	e009883a 	mov	r4,fp
 8003360:	8005e380 	call	8005e38 <_Balloc>
 8003364:	d8800315 	stw	r2,12(sp)
 8003368:	e0801015 	stw	r2,64(fp)
 800336c:	948003e8 	cmpgeui	r18,r18,15
 8003370:	9000fe1e 	bne	r18,zero,800376c <_dtoa_r+0x730>
 8003374:	8000fd26 	beq	r16,zero,800376c <_dtoa_r+0x730>
 8003378:	d9000417 	ldw	r4,16(sp)
 800337c:	0103c60e 	bge	zero,r4,8004298 <_dtoa_r+0x125c>
 8003380:	208003cc 	andi	r2,r4,15
 8003384:	100690fa 	slli	r3,r2,3
 8003388:	202fd13a 	srai	r23,r4,4
 800338c:	00820074 	movhi	r2,2049
 8003390:	10bf2704 	addi	r2,r2,-868
 8003394:	10c5883a 	add	r2,r2,r3
 8003398:	b8c0040c 	andi	r3,r23,16
 800339c:	12800017 	ldw	r10,0(r2)
 80033a0:	12400117 	ldw	r9,4(r2)
 80033a4:	1803621e 	bne	r3,zero,8004130 <_dtoa_r+0x10f4>
 80033a8:	d8800117 	ldw	r2,4(sp)
 80033ac:	8827883a 	mov	r19,r17
 80033b0:	04000084 	movi	r16,2
 80033b4:	d8800c15 	stw	r2,48(sp)
 80033b8:	04820074 	movhi	r18,2049
 80033bc:	94bf1d04 	addi	r18,r18,-908
 80033c0:	b8000f26 	beq	r23,zero,8003400 <_dtoa_r+0x3c4>
 80033c4:	5005883a 	mov	r2,r10
 80033c8:	4807883a 	mov	r3,r9
 80033cc:	b980004c 	andi	r6,r23,1
 80033d0:	1009883a 	mov	r4,r2
 80033d4:	b82fd07a 	srai	r23,r23,1
 80033d8:	180b883a 	mov	r5,r3
 80033dc:	30000426 	beq	r6,zero,80033f0 <_dtoa_r+0x3b4>
 80033e0:	91800017 	ldw	r6,0(r18)
 80033e4:	91c00117 	ldw	r7,4(r18)
 80033e8:	84000044 	addi	r16,r16,1
 80033ec:	800bea80 	call	800bea8 <__muldf3>
 80033f0:	94800204 	addi	r18,r18,8
 80033f4:	b83ff51e 	bne	r23,zero,80033cc <_dtoa_r+0x390>
 80033f8:	1015883a 	mov	r10,r2
 80033fc:	1813883a 	mov	r9,r3
 8003400:	d9000c17 	ldw	r4,48(sp)
 8003404:	980b883a 	mov	r5,r19
 8003408:	500d883a 	mov	r6,r10
 800340c:	480f883a 	mov	r7,r9
 8003410:	800b2e40 	call	800b2e4 <__divdf3>
 8003414:	1025883a 	mov	r18,r2
 8003418:	1827883a 	mov	r19,r3
 800341c:	d8800917 	ldw	r2,36(sp)
 8003420:	10000626 	beq	r2,zero,800343c <_dtoa_r+0x400>
 8003424:	000d883a 	mov	r6,zero
 8003428:	01cffc34 	movhi	r7,16368
 800342c:	9009883a 	mov	r4,r18
 8003430:	980b883a 	mov	r5,r19
 8003434:	800bdb80 	call	800bdb8 <__ledf2>
 8003438:	10042616 	blt	r2,zero,80044d4 <_dtoa_r+0x1498>
 800343c:	8009883a 	mov	r4,r16
 8003440:	800d0c80 	call	800d0c8 <__floatsidf>
 8003444:	900d883a 	mov	r6,r18
 8003448:	980f883a 	mov	r7,r19
 800344c:	1009883a 	mov	r4,r2
 8003450:	180b883a 	mov	r5,r3
 8003454:	800bea80 	call	800bea8 <__muldf3>
 8003458:	000d883a 	mov	r6,zero
 800345c:	01d00734 	movhi	r7,16412
 8003460:	1009883a 	mov	r4,r2
 8003464:	180b883a 	mov	r5,r3
 8003468:	800a9440 	call	800a944 <__adddf3>
 800346c:	d8800c15 	stw	r2,48(sp)
 8003470:	00bf3034 	movhi	r2,64704
 8003474:	1885883a 	add	r2,r3,r2
 8003478:	d8800d15 	stw	r2,52(sp)
 800347c:	d8800617 	ldw	r2,24(sp)
 8003480:	10036d26 	beq	r2,zero,8004238 <_dtoa_r+0x11fc>
 8003484:	d8800417 	ldw	r2,16(sp)
 8003488:	d8800f15 	stw	r2,60(sp)
 800348c:	d8800617 	ldw	r2,24(sp)
 8003490:	d8800e15 	stw	r2,56(sp)
 8003494:	980b883a 	mov	r5,r19
 8003498:	9009883a 	mov	r4,r18
 800349c:	800d0480 	call	800d048 <__fixdfsi>
 80034a0:	1009883a 	mov	r4,r2
 80034a4:	102f883a 	mov	r23,r2
 80034a8:	800d0c80 	call	800d0c8 <__floatsidf>
 80034ac:	100d883a 	mov	r6,r2
 80034b0:	180f883a 	mov	r7,r3
 80034b4:	9009883a 	mov	r4,r18
 80034b8:	980b883a 	mov	r5,r19
 80034bc:	800c6880 	call	800c688 <__subdf3>
 80034c0:	1025883a 	mov	r18,r2
 80034c4:	d8800e17 	ldw	r2,56(sp)
 80034c8:	1821883a 	mov	r16,r3
 80034cc:	ba400c04 	addi	r9,r23,48
 80034d0:	10bfffc4 	addi	r2,r2,-1
 80034d4:	100690fa 	slli	r3,r2,3
 80034d8:	00820074 	movhi	r2,2049
 80034dc:	10bf2704 	addi	r2,r2,-868
 80034e0:	10c5883a 	add	r2,r2,r3
 80034e4:	11800017 	ldw	r6,0(r2)
 80034e8:	d8c00317 	ldw	r3,12(sp)
 80034ec:	11c00117 	ldw	r7,4(r2)
 80034f0:	d8800717 	ldw	r2,28(sp)
 80034f4:	4811883a 	mov	r8,r9
 80034f8:	da001015 	stw	r8,64(sp)
 80034fc:	1dc00044 	addi	r23,r3,1
 8003500:	1003a226 	beq	r2,zero,800438c <_dtoa_r+0x1350>
 8003504:	0009883a 	mov	r4,zero
 8003508:	014ff834 	movhi	r5,16352
 800350c:	da401115 	stw	r9,68(sp)
 8003510:	800b2e40 	call	800b2e4 <__divdf3>
 8003514:	d9800c17 	ldw	r6,48(sp)
 8003518:	d9c00d17 	ldw	r7,52(sp)
 800351c:	1009883a 	mov	r4,r2
 8003520:	180b883a 	mov	r5,r3
 8003524:	800c6880 	call	800c688 <__subdf3>
 8003528:	1827883a 	mov	r19,r3
 800352c:	da401117 	ldw	r9,68(sp)
 8003530:	d8c00317 	ldw	r3,12(sp)
 8003534:	900d883a 	mov	r6,r18
 8003538:	800f883a 	mov	r7,r16
 800353c:	1a400005 	stb	r9,0(r3)
 8003540:	1009883a 	mov	r4,r2
 8003544:	980b883a 	mov	r5,r19
 8003548:	d8800c15 	stw	r2,48(sp)
 800354c:	800bcc80 	call	800bcc8 <__gedf2>
 8003550:	da001017 	ldw	r8,64(sp)
 8003554:	00804816 	blt	zero,r2,8003678 <_dtoa_r+0x63c>
 8003558:	900d883a 	mov	r6,r18
 800355c:	800f883a 	mov	r7,r16
 8003560:	0009883a 	mov	r4,zero
 8003564:	014ffc34 	movhi	r5,16368
 8003568:	da000d15 	stw	r8,52(sp)
 800356c:	800c6880 	call	800c688 <__subdf3>
 8003570:	d9000c17 	ldw	r4,48(sp)
 8003574:	100d883a 	mov	r6,r2
 8003578:	180f883a 	mov	r7,r3
 800357c:	980b883a 	mov	r5,r19
 8003580:	800bcc80 	call	800bcc8 <__gedf2>
 8003584:	da000d17 	ldw	r8,52(sp)
 8003588:	00844e16 	blt	zero,r2,80046c4 <_dtoa_r+0x1688>
 800358c:	d8c00e17 	ldw	r3,56(sp)
 8003590:	18800060 	cmpeqi	r2,r3,1
 8003594:	1000751e 	bne	r2,zero,800376c <_dtoa_r+0x730>
 8003598:	d8800317 	ldw	r2,12(sp)
 800359c:	dd800d15 	stw	r22,52(sp)
 80035a0:	dd000e15 	stw	r20,56(sp)
 80035a4:	10c5883a 	add	r2,r2,r3
 80035a8:	dd000c17 	ldw	r20,48(sp)
 80035ac:	102d883a 	mov	r22,r2
 80035b0:	dc400c15 	stw	r17,48(sp)
 80035b4:	00000806 	br	80035d8 <_dtoa_r+0x59c>
 80035b8:	800c6880 	call	800c688 <__subdf3>
 80035bc:	a00d883a 	mov	r6,r20
 80035c0:	980f883a 	mov	r7,r19
 80035c4:	1009883a 	mov	r4,r2
 80035c8:	180b883a 	mov	r5,r3
 80035cc:	800bdb80 	call	800bdb8 <__ledf2>
 80035d0:	10042316 	blt	r2,zero,8004660 <_dtoa_r+0x1624>
 80035d4:	bd806226 	beq	r23,r22,8003760 <_dtoa_r+0x724>
 80035d8:	a009883a 	mov	r4,r20
 80035dc:	980b883a 	mov	r5,r19
 80035e0:	000d883a 	mov	r6,zero
 80035e4:	01d00934 	movhi	r7,16420
 80035e8:	800bea80 	call	800bea8 <__muldf3>
 80035ec:	000d883a 	mov	r6,zero
 80035f0:	01d00934 	movhi	r7,16420
 80035f4:	9009883a 	mov	r4,r18
 80035f8:	800b883a 	mov	r5,r16
 80035fc:	1029883a 	mov	r20,r2
 8003600:	1827883a 	mov	r19,r3
 8003604:	800bea80 	call	800bea8 <__muldf3>
 8003608:	180b883a 	mov	r5,r3
 800360c:	1009883a 	mov	r4,r2
 8003610:	1821883a 	mov	r16,r3
 8003614:	1025883a 	mov	r18,r2
 8003618:	800d0480 	call	800d048 <__fixdfsi>
 800361c:	1009883a 	mov	r4,r2
 8003620:	1023883a 	mov	r17,r2
 8003624:	800d0c80 	call	800d0c8 <__floatsidf>
 8003628:	9009883a 	mov	r4,r18
 800362c:	800b883a 	mov	r5,r16
 8003630:	100d883a 	mov	r6,r2
 8003634:	180f883a 	mov	r7,r3
 8003638:	800c6880 	call	800c688 <__subdf3>
 800363c:	bdc00044 	addi	r23,r23,1
 8003640:	8c400c04 	addi	r17,r17,48
 8003644:	a00d883a 	mov	r6,r20
 8003648:	980f883a 	mov	r7,r19
 800364c:	1009883a 	mov	r4,r2
 8003650:	180b883a 	mov	r5,r3
 8003654:	bc7fffc5 	stb	r17,-1(r23)
 8003658:	1025883a 	mov	r18,r2
 800365c:	1821883a 	mov	r16,r3
 8003660:	800bdb80 	call	800bdb8 <__ledf2>
 8003664:	900d883a 	mov	r6,r18
 8003668:	800f883a 	mov	r7,r16
 800366c:	0009883a 	mov	r4,zero
 8003670:	014ffc34 	movhi	r5,16368
 8003674:	103fd00e 	bge	r2,zero,80035b8 <_dtoa_r+0x57c>
 8003678:	d8800f17 	ldw	r2,60(sp)
 800367c:	10800044 	addi	r2,r2,1
 8003680:	d8800415 	stw	r2,16(sp)
 8003684:	a80b883a 	mov	r5,r21
 8003688:	e009883a 	mov	r4,fp
 800368c:	8005edc0 	call	8005edc <_Bfree>
 8003690:	d8801f17 	ldw	r2,124(sp)
 8003694:	d8c00417 	ldw	r3,16(sp)
 8003698:	b8000005 	stb	zero,0(r23)
 800369c:	10c00015 	stw	r3,0(r2)
 80036a0:	d8802117 	ldw	r2,132(sp)
 80036a4:	103e9726 	beq	r2,zero,8003104 <_dtoa_r+0xc8>
 80036a8:	15c00015 	stw	r23,0(r2)
 80036ac:	003e9506 	br	8003104 <_dtoa_r+0xc8>
 80036b0:	04600034 	movhi	r17,32768
 80036b4:	8c7fffc4 	addi	r17,r17,-1
 80036b8:	9c62703a 	and	r17,r19,r17
 80036bc:	00800044 	movi	r2,1
 80036c0:	8827883a 	mov	r19,r17
 80036c4:	80800015 	stw	r2,0(r16)
 80036c8:	00dffc34 	movhi	r3,32752
 80036cc:	989ffc2c 	andhi	r2,r19,32752
 80036d0:	10fe7a1e 	bne	r2,r3,80030bc <_dtoa_r+0x80>
 80036d4:	00800434 	movhi	r2,16
 80036d8:	d8c01f17 	ldw	r3,124(sp)
 80036dc:	10bfffc4 	addi	r2,r2,-1
 80036e0:	98a6703a 	and	r19,r19,r2
 80036e4:	0089c3c4 	movi	r2,9999
 80036e8:	18800015 	stw	r2,0(r3)
 80036ec:	d8800117 	ldw	r2,4(sp)
 80036f0:	98aab03a 	or	r21,r19,r2
 80036f4:	a800141e 	bne	r21,zero,8003748 <_dtoa_r+0x70c>
 80036f8:	d8802117 	ldw	r2,132(sp)
 80036fc:	1003f626 	beq	r2,zero,80046d8 <_dtoa_r+0x169c>
 8003700:	00820074 	movhi	r2,2049
 8003704:	1007883a 	mov	r3,r2
 8003708:	18ff0d04 	addi	r3,r3,-972
 800370c:	00820074 	movhi	r2,2049
 8003710:	d8c00315 	stw	r3,12(sp)
 8003714:	10bf0f04 	addi	r2,r2,-964
 8003718:	d8c02117 	ldw	r3,132(sp)
 800371c:	18800015 	stw	r2,0(r3)
 8003720:	003e7806 	br	8003104 <_dtoa_r+0xc8>
 8003724:	01400434 	movhi	r5,16
 8003728:	297fffc4 	addi	r5,r5,-1
 800372c:	894a703a 	and	r5,r17,r5
 8003730:	9009883a 	mov	r4,r18
 8003734:	294ffc34 	orhi	r5,r5,16368
 8003738:	843f0044 	addi	r16,r16,-1023
 800373c:	dc801217 	ldw	r18,72(sp)
 8003740:	d8000a15 	stw	zero,40(sp)
 8003744:	003e9b06 	br	80031b4 <_dtoa_r+0x178>
 8003748:	d8802117 	ldw	r2,132(sp)
 800374c:	1002461e 	bne	r2,zero,8004068 <_dtoa_r+0x102c>
 8003750:	00820074 	movhi	r2,2049
 8003754:	10bf0c04 	addi	r2,r2,-976
 8003758:	d8800315 	stw	r2,12(sp)
 800375c:	003e6906 	br	8003104 <_dtoa_r+0xc8>
 8003760:	dd800d17 	ldw	r22,52(sp)
 8003764:	dd000e17 	ldw	r20,56(sp)
 8003768:	dc400c17 	ldw	r17,48(sp)
 800376c:	d8801317 	ldw	r2,76(sp)
 8003770:	10009f16 	blt	r2,zero,80039f0 <_dtoa_r+0x9b4>
 8003774:	d9000417 	ldw	r4,16(sp)
 8003778:	20c003c8 	cmpgei	r3,r4,15
 800377c:	18009c1e 	bne	r3,zero,80039f0 <_dtoa_r+0x9b4>
 8003780:	200690fa 	slli	r3,r4,3
 8003784:	00820074 	movhi	r2,2049
 8003788:	10bf2704 	addi	r2,r2,-868
 800378c:	10c5883a 	add	r2,r2,r3
 8003790:	14000017 	ldw	r16,0(r2)
 8003794:	14800117 	ldw	r18,4(r2)
 8003798:	d8801e17 	ldw	r2,120(sp)
 800379c:	1000140e 	bge	r2,zero,80037f0 <_dtoa_r+0x7b4>
 80037a0:	d8800617 	ldw	r2,24(sp)
 80037a4:	00801216 	blt	zero,r2,80037f0 <_dtoa_r+0x7b4>
 80037a8:	1002b81e 	bne	r2,zero,800428c <_dtoa_r+0x1250>
 80037ac:	8009883a 	mov	r4,r16
 80037b0:	900b883a 	mov	r5,r18
 80037b4:	000d883a 	mov	r6,zero
 80037b8:	01d00534 	movhi	r7,16404
 80037bc:	800bea80 	call	800bea8 <__muldf3>
 80037c0:	d9800117 	ldw	r6,4(sp)
 80037c4:	880f883a 	mov	r7,r17
 80037c8:	1009883a 	mov	r4,r2
 80037cc:	180b883a 	mov	r5,r3
 80037d0:	800bcc80 	call	800bcc8 <__gedf2>
 80037d4:	0025883a 	mov	r18,zero
 80037d8:	0021883a 	mov	r16,zero
 80037dc:	1001fd16 	blt	r2,zero,8003fd4 <_dtoa_r+0xf98>
 80037e0:	d8801e17 	ldw	r2,120(sp)
 80037e4:	ddc00317 	ldw	r23,12(sp)
 80037e8:	00a2303a 	nor	r17,zero,r2
 80037ec:	0001ff06 	br	8003fec <_dtoa_r+0xfb0>
 80037f0:	dcc00117 	ldw	r19,4(sp)
 80037f4:	800d883a 	mov	r6,r16
 80037f8:	900f883a 	mov	r7,r18
 80037fc:	880b883a 	mov	r5,r17
 8003800:	9809883a 	mov	r4,r19
 8003804:	800b2e40 	call	800b2e4 <__divdf3>
 8003808:	180b883a 	mov	r5,r3
 800380c:	1009883a 	mov	r4,r2
 8003810:	800d0480 	call	800d048 <__fixdfsi>
 8003814:	1009883a 	mov	r4,r2
 8003818:	102d883a 	mov	r22,r2
 800381c:	800d0c80 	call	800d0c8 <__floatsidf>
 8003820:	800d883a 	mov	r6,r16
 8003824:	900f883a 	mov	r7,r18
 8003828:	1009883a 	mov	r4,r2
 800382c:	180b883a 	mov	r5,r3
 8003830:	800bea80 	call	800bea8 <__muldf3>
 8003834:	880b883a 	mov	r5,r17
 8003838:	100d883a 	mov	r6,r2
 800383c:	180f883a 	mov	r7,r3
 8003840:	9809883a 	mov	r4,r19
 8003844:	800c6880 	call	800c688 <__subdf3>
 8003848:	dc400317 	ldw	r17,12(sp)
 800384c:	1009883a 	mov	r4,r2
 8003850:	d9c00417 	ldw	r7,16(sp)
 8003854:	b0800c04 	addi	r2,r22,48
 8003858:	88800005 	stb	r2,0(r17)
 800385c:	d8800617 	ldw	r2,24(sp)
 8003860:	39c00044 	addi	r7,r7,1
 8003864:	d9c00415 	stw	r7,16(sp)
 8003868:	11800060 	cmpeqi	r6,r2,1
 800386c:	180b883a 	mov	r5,r3
 8003870:	2005883a 	mov	r2,r4
 8003874:	8dc00044 	addi	r23,r17,1
 8003878:	3000391e 	bne	r6,zero,8003960 <_dtoa_r+0x924>
 800387c:	01d00934 	movhi	r7,16420
 8003880:	800bea80 	call	800bea8 <__muldf3>
 8003884:	000d883a 	mov	r6,zero
 8003888:	000f883a 	mov	r7,zero
 800388c:	1009883a 	mov	r4,r2
 8003890:	180b883a 	mov	r5,r3
 8003894:	1027883a 	mov	r19,r2
 8003898:	1829883a 	mov	r20,r3
 800389c:	800bc480 	call	800bc48 <__eqdf2>
 80038a0:	103f7826 	beq	r2,zero,8003684 <_dtoa_r+0x648>
 80038a4:	d8c00617 	ldw	r3,24(sp)
 80038a8:	8805883a 	mov	r2,r17
 80038ac:	dd400115 	stw	r21,4(sp)
 80038b0:	8c400084 	addi	r17,r17,2
 80038b4:	10ed883a 	add	r22,r2,r3
 80038b8:	00000a06 	br	80038e4 <_dtoa_r+0x8a8>
 80038bc:	800bea80 	call	800bea8 <__muldf3>
 80038c0:	000d883a 	mov	r6,zero
 80038c4:	000f883a 	mov	r7,zero
 80038c8:	1009883a 	mov	r4,r2
 80038cc:	180b883a 	mov	r5,r3
 80038d0:	1027883a 	mov	r19,r2
 80038d4:	1829883a 	mov	r20,r3
 80038d8:	8c400044 	addi	r17,r17,1
 80038dc:	800bc480 	call	800bc48 <__eqdf2>
 80038e0:	10029d26 	beq	r2,zero,8004358 <_dtoa_r+0x131c>
 80038e4:	800d883a 	mov	r6,r16
 80038e8:	900f883a 	mov	r7,r18
 80038ec:	9809883a 	mov	r4,r19
 80038f0:	a00b883a 	mov	r5,r20
 80038f4:	800b2e40 	call	800b2e4 <__divdf3>
 80038f8:	180b883a 	mov	r5,r3
 80038fc:	1009883a 	mov	r4,r2
 8003900:	800d0480 	call	800d048 <__fixdfsi>
 8003904:	1009883a 	mov	r4,r2
 8003908:	102b883a 	mov	r21,r2
 800390c:	800d0c80 	call	800d0c8 <__floatsidf>
 8003910:	800d883a 	mov	r6,r16
 8003914:	900f883a 	mov	r7,r18
 8003918:	1009883a 	mov	r4,r2
 800391c:	180b883a 	mov	r5,r3
 8003920:	800bea80 	call	800bea8 <__muldf3>
 8003924:	100d883a 	mov	r6,r2
 8003928:	180f883a 	mov	r7,r3
 800392c:	9809883a 	mov	r4,r19
 8003930:	a00b883a 	mov	r5,r20
 8003934:	800c6880 	call	800c688 <__subdf3>
 8003938:	aa400c04 	addi	r9,r21,48
 800393c:	8a7fffc5 	stb	r9,-1(r17)
 8003940:	000d883a 	mov	r6,zero
 8003944:	01d00934 	movhi	r7,16420
 8003948:	1009883a 	mov	r4,r2
 800394c:	180b883a 	mov	r5,r3
 8003950:	882f883a 	mov	r23,r17
 8003954:	b47fd91e 	bne	r22,r17,80038bc <_dtoa_r+0x880>
 8003958:	a82d883a 	mov	r22,r21
 800395c:	dd400117 	ldw	r21,4(sp)
 8003960:	100d883a 	mov	r6,r2
 8003964:	180f883a 	mov	r7,r3
 8003968:	1009883a 	mov	r4,r2
 800396c:	180b883a 	mov	r5,r3
 8003970:	800a9440 	call	800a944 <__adddf3>
 8003974:	800d883a 	mov	r6,r16
 8003978:	900f883a 	mov	r7,r18
 800397c:	1009883a 	mov	r4,r2
 8003980:	180b883a 	mov	r5,r3
 8003984:	1027883a 	mov	r19,r2
 8003988:	1823883a 	mov	r17,r3
 800398c:	800bcc80 	call	800bcc8 <__gedf2>
 8003990:	00800816 	blt	zero,r2,80039b4 <_dtoa_r+0x978>
 8003994:	800d883a 	mov	r6,r16
 8003998:	900f883a 	mov	r7,r18
 800399c:	9809883a 	mov	r4,r19
 80039a0:	880b883a 	mov	r5,r17
 80039a4:	800bc480 	call	800bc48 <__eqdf2>
 80039a8:	103f361e 	bne	r2,zero,8003684 <_dtoa_r+0x648>
 80039ac:	b580004c 	andi	r22,r22,1
 80039b0:	b03f3426 	beq	r22,zero,8003684 <_dtoa_r+0x648>
 80039b4:	ba3fffc3 	ldbu	r8,-1(r23)
 80039b8:	d9000317 	ldw	r4,12(sp)
 80039bc:	00000306 	br	80039cc <_dtoa_r+0x990>
 80039c0:	20c30e26 	beq	r4,r3,80045fc <_dtoa_r+0x15c0>
 80039c4:	1a3fffc3 	ldbu	r8,-1(r3)
 80039c8:	182f883a 	mov	r23,r3
 80039cc:	40803fcc 	andi	r2,r8,255
 80039d0:	1080201c 	xori	r2,r2,128
 80039d4:	10bfe004 	addi	r2,r2,-128
 80039d8:	10800e60 	cmpeqi	r2,r2,57
 80039dc:	b8ffffc4 	addi	r3,r23,-1
 80039e0:	103ff71e 	bne	r2,zero,80039c0 <_dtoa_r+0x984>
 80039e4:	42000044 	addi	r8,r8,1
 80039e8:	1a000005 	stb	r8,0(r3)
 80039ec:	003f2506 	br	8003684 <_dtoa_r+0x648>
 80039f0:	d8c00717 	ldw	r3,28(sp)
 80039f4:	1800e426 	beq	r3,zero,8003d88 <_dtoa_r+0xd4c>
 80039f8:	d8c00217 	ldw	r3,8(sp)
 80039fc:	18c00088 	cmpgei	r3,r3,2
 8003a00:	1801ec26 	beq	r3,zero,80041b4 <_dtoa_r+0x1178>
 8003a04:	d8800617 	ldw	r2,24(sp)
 8003a08:	14bfffc4 	addi	r18,r2,-1
 8003a0c:	d8800817 	ldw	r2,32(sp)
 8003a10:	1481c50e 	bge	r2,r18,8004128 <_dtoa_r+0x10ec>
 8003a14:	d8800817 	ldw	r2,32(sp)
 8003a18:	dc800815 	stw	r18,32(sp)
 8003a1c:	9085c83a 	sub	r2,r18,r2
 8003a20:	b0ad883a 	add	r22,r22,r2
 8003a24:	0025883a 	mov	r18,zero
 8003a28:	d8800617 	ldw	r2,24(sp)
 8003a2c:	10024c16 	blt	r2,zero,8004360 <_dtoa_r+0x1324>
 8003a30:	d8c00517 	ldw	r3,20(sp)
 8003a34:	a0a9883a 	add	r20,r20,r2
 8003a38:	1885883a 	add	r2,r3,r2
 8003a3c:	1827883a 	mov	r19,r3
 8003a40:	d8800515 	stw	r2,20(sp)
 8003a44:	01400044 	movi	r5,1
 8003a48:	e009883a 	mov	r4,fp
 8003a4c:	80062600 	call	8006260 <__i2b>
 8003a50:	1021883a 	mov	r16,r2
 8003a54:	04c0080e 	bge	zero,r19,8003a78 <_dtoa_r+0xa3c>
 8003a58:	0500070e 	bge	zero,r20,8003a78 <_dtoa_r+0xa3c>
 8003a5c:	9805883a 	mov	r2,r19
 8003a60:	a4c1a916 	blt	r20,r19,8004108 <_dtoa_r+0x10cc>
 8003a64:	d8c00517 	ldw	r3,20(sp)
 8003a68:	98a7c83a 	sub	r19,r19,r2
 8003a6c:	a0a9c83a 	sub	r20,r20,r2
 8003a70:	1887c83a 	sub	r3,r3,r2
 8003a74:	d8c00515 	stw	r3,20(sp)
 8003a78:	d8800817 	ldw	r2,32(sp)
 8003a7c:	10001426 	beq	r2,zero,8003ad0 <_dtoa_r+0xa94>
 8003a80:	d8800717 	ldw	r2,28(sp)
 8003a84:	10017226 	beq	r2,zero,8004050 <_dtoa_r+0x1014>
 8003a88:	04800e0e 	bge	zero,r18,8003ac4 <_dtoa_r+0xa88>
 8003a8c:	800b883a 	mov	r5,r16
 8003a90:	900d883a 	mov	r6,r18
 8003a94:	e009883a 	mov	r4,fp
 8003a98:	80064d40 	call	80064d4 <__pow5mult>
 8003a9c:	a80d883a 	mov	r6,r21
 8003aa0:	100b883a 	mov	r5,r2
 8003aa4:	e009883a 	mov	r4,fp
 8003aa8:	1021883a 	mov	r16,r2
 8003aac:	80062940 	call	8006294 <__multiply>
 8003ab0:	102f883a 	mov	r23,r2
 8003ab4:	a80b883a 	mov	r5,r21
 8003ab8:	e009883a 	mov	r4,fp
 8003abc:	8005edc0 	call	8005edc <_Bfree>
 8003ac0:	b82b883a 	mov	r21,r23
 8003ac4:	d8800817 	ldw	r2,32(sp)
 8003ac8:	148dc83a 	sub	r6,r2,r18
 8003acc:	3001611e 	bne	r6,zero,8004054 <_dtoa_r+0x1018>
 8003ad0:	01400044 	movi	r5,1
 8003ad4:	e009883a 	mov	r4,fp
 8003ad8:	80062600 	call	8006260 <__i2b>
 8003adc:	1025883a 	mov	r18,r2
 8003ae0:	0580bc16 	blt	zero,r22,8003dd4 <_dtoa_r+0xd98>
 8003ae4:	d8800217 	ldw	r2,8(sp)
 8003ae8:	10800088 	cmpgei	r2,r2,2
 8003aec:	10016526 	beq	r2,zero,8004084 <_dtoa_r+0x1048>
 8003af0:	0023883a 	mov	r17,zero
 8003af4:	00800044 	movi	r2,1
 8003af8:	b000bf1e 	bne	r22,zero,8003df8 <_dtoa_r+0xdbc>
 8003afc:	1505883a 	add	r2,r2,r20
 8003b00:	108007cc 	andi	r2,r2,31
 8003b04:	1000aa26 	beq	r2,zero,8003db0 <_dtoa_r+0xd74>
 8003b08:	00c00804 	movi	r3,32
 8003b0c:	1887c83a 	sub	r3,r3,r2
 8003b10:	19000150 	cmplti	r4,r3,5
 8003b14:	2002f61e 	bne	r4,zero,80046f0 <_dtoa_r+0x16b4>
 8003b18:	00c00704 	movi	r3,28
 8003b1c:	1885c83a 	sub	r2,r3,r2
 8003b20:	d8c00517 	ldw	r3,20(sp)
 8003b24:	98a7883a 	add	r19,r19,r2
 8003b28:	a0a9883a 	add	r20,r20,r2
 8003b2c:	1887883a 	add	r3,r3,r2
 8003b30:	d8c00515 	stw	r3,20(sp)
 8003b34:	d8800517 	ldw	r2,20(sp)
 8003b38:	00809716 	blt	zero,r2,8003d98 <_dtoa_r+0xd5c>
 8003b3c:	0500050e 	bge	zero,r20,8003b54 <_dtoa_r+0xb18>
 8003b40:	900b883a 	mov	r5,r18
 8003b44:	a00d883a 	mov	r6,r20
 8003b48:	e009883a 	mov	r4,fp
 8003b4c:	80065fc0 	call	80065fc <__lshift>
 8003b50:	1025883a 	mov	r18,r2
 8003b54:	d8800917 	ldw	r2,36(sp)
 8003b58:	10012b1e 	bne	r2,zero,8004008 <_dtoa_r+0xfcc>
 8003b5c:	d8800617 	ldw	r2,24(sp)
 8003b60:	00810d0e 	bge	zero,r2,8003f98 <_dtoa_r+0xf5c>
 8003b64:	d8800417 	ldw	r2,16(sp)
 8003b68:	10800044 	addi	r2,r2,1
 8003b6c:	d8800415 	stw	r2,16(sp)
 8003b70:	d8800717 	ldw	r2,28(sp)
 8003b74:	1000b21e 	bne	r2,zero,8003e40 <_dtoa_r+0xe04>
 8003b78:	ddc00317 	ldw	r23,12(sp)
 8003b7c:	04400044 	movi	r17,1
 8003b80:	dcc00617 	ldw	r19,24(sp)
 8003b84:	00000306 	br	8003b94 <_dtoa_r+0xb58>
 8003b88:	8005f000 	call	8005f00 <__multadd>
 8003b8c:	102b883a 	mov	r21,r2
 8003b90:	8c400044 	addi	r17,r17,1
 8003b94:	900b883a 	mov	r5,r18
 8003b98:	a809883a 	mov	r4,r21
 8003b9c:	8002e080 	call	8002e08 <quorem>
 8003ba0:	10800c04 	addi	r2,r2,48
 8003ba4:	bdc00044 	addi	r23,r23,1
 8003ba8:	b8bfffc5 	stb	r2,-1(r23)
 8003bac:	000f883a 	mov	r7,zero
 8003bb0:	01800284 	movi	r6,10
 8003bb4:	a80b883a 	mov	r5,r21
 8003bb8:	e009883a 	mov	r4,fp
 8003bbc:	8cfff216 	blt	r17,r19,8003b88 <_dtoa_r+0xb4c>
 8003bc0:	1011883a 	mov	r8,r2
 8003bc4:	0029883a 	mov	r20,zero
 8003bc8:	a80b883a 	mov	r5,r21
 8003bcc:	01800044 	movi	r6,1
 8003bd0:	e009883a 	mov	r4,fp
 8003bd4:	da000115 	stw	r8,4(sp)
 8003bd8:	80065fc0 	call	80065fc <__lshift>
 8003bdc:	900b883a 	mov	r5,r18
 8003be0:	1009883a 	mov	r4,r2
 8003be4:	102b883a 	mov	r21,r2
 8003be8:	80067380 	call	8006738 <__mcmp>
 8003bec:	b8ffffc3 	ldbu	r3,-1(r23)
 8003bf0:	0081610e 	bge	zero,r2,8004178 <_dtoa_r+0x113c>
 8003bf4:	d9400317 	ldw	r5,12(sp)
 8003bf8:	00000306 	br	8003c08 <_dtoa_r+0xbcc>
 8003bfc:	29017726 	beq	r5,r4,80041dc <_dtoa_r+0x11a0>
 8003c00:	20ffffc3 	ldbu	r3,-1(r4)
 8003c04:	202f883a 	mov	r23,r4
 8003c08:	18803fcc 	andi	r2,r3,255
 8003c0c:	1080201c 	xori	r2,r2,128
 8003c10:	10bfe004 	addi	r2,r2,-128
 8003c14:	10800e60 	cmpeqi	r2,r2,57
 8003c18:	b93fffc4 	addi	r4,r23,-1
 8003c1c:	103ff71e 	bne	r2,zero,8003bfc <_dtoa_r+0xbc0>
 8003c20:	18c00044 	addi	r3,r3,1
 8003c24:	20c00005 	stb	r3,0(r4)
 8003c28:	900b883a 	mov	r5,r18
 8003c2c:	e009883a 	mov	r4,fp
 8003c30:	8005edc0 	call	8005edc <_Bfree>
 8003c34:	803e9326 	beq	r16,zero,8003684 <_dtoa_r+0x648>
 8003c38:	a0000426 	beq	r20,zero,8003c4c <_dtoa_r+0xc10>
 8003c3c:	a4000326 	beq	r20,r16,8003c4c <_dtoa_r+0xc10>
 8003c40:	a00b883a 	mov	r5,r20
 8003c44:	e009883a 	mov	r4,fp
 8003c48:	8005edc0 	call	8005edc <_Bfree>
 8003c4c:	800b883a 	mov	r5,r16
 8003c50:	e009883a 	mov	r4,fp
 8003c54:	8005edc0 	call	8005edc <_Bfree>
 8003c58:	003e8a06 	br	8003684 <_dtoa_r+0x648>
 8003c5c:	d8000915 	stw	zero,36(sp)
 8003c60:	a0003616 	blt	r20,zero,8003d3c <_dtoa_r+0xd00>
 8003c64:	d8000515 	stw	zero,20(sp)
 8003c68:	d8c00217 	ldw	r3,8(sp)
 8003c6c:	dd800415 	stw	r22,16(sp)
 8003c70:	d8000815 	stw	zero,32(sp)
 8003c74:	188002a8 	cmpgeui	r2,r3,10
 8003c78:	a5a9883a 	add	r20,r20,r22
 8003c7c:	103d9726 	beq	r2,zero,80032dc <_dtoa_r+0x2a0>
 8003c80:	00800044 	movi	r2,1
 8003c84:	d8800715 	stw	r2,28(sp)
 8003c88:	00bfffc4 	movi	r2,-1
 8003c8c:	04bfffc4 	movi	r18,-1
 8003c90:	04000044 	movi	r16,1
 8003c94:	d8000215 	stw	zero,8(sp)
 8003c98:	d8800615 	stw	r2,24(sp)
 8003c9c:	d8001e15 	stw	zero,120(sp)
 8003ca0:	d8800617 	ldw	r2,24(sp)
 8003ca4:	e0001115 	stw	zero,68(fp)
 8003ca8:	000b883a 	mov	r5,zero
 8003cac:	d8800b15 	stw	r2,44(sp)
 8003cb0:	003daa06 	br	800335c <_dtoa_r+0x320>
 8003cb4:	18800160 	cmpeqi	r2,r3,5
 8003cb8:	00c00044 	movi	r3,1
 8003cbc:	d8c00715 	stw	r3,28(sp)
 8003cc0:	10000d26 	beq	r2,zero,8003cf8 <_dtoa_r+0xcbc>
 8003cc4:	d8801e17 	ldw	r2,120(sp)
 8003cc8:	d8c00417 	ldw	r3,16(sp)
 8003ccc:	10c5883a 	add	r2,r2,r3
 8003cd0:	d8800b15 	stw	r2,44(sp)
 8003cd4:	10800044 	addi	r2,r2,1
 8003cd8:	d8800615 	stw	r2,24(sp)
 8003cdc:	100d883a 	mov	r6,r2
 8003ce0:	00bd9216 	blt	zero,r2,800332c <_dtoa_r+0x2f0>
 8003ce4:	01800044 	movi	r6,1
 8003ce8:	003d9006 	br	800332c <_dtoa_r+0x2f0>
 8003cec:	188000a0 	cmpeqi	r2,r3,2
 8003cf0:	d8000715 	stw	zero,28(sp)
 8003cf4:	103d881e 	bne	r2,zero,8003318 <_dtoa_r+0x2dc>
 8003cf8:	e0001115 	stw	zero,68(fp)
 8003cfc:	000b883a 	mov	r5,zero
 8003d00:	e009883a 	mov	r4,fp
 8003d04:	8005e380 	call	8005e38 <_Balloc>
 8003d08:	d8800315 	stw	r2,12(sp)
 8003d0c:	e0801015 	stw	r2,64(fp)
 8003d10:	00bfffc4 	movi	r2,-1
 8003d14:	d8800b15 	stw	r2,44(sp)
 8003d18:	00800044 	movi	r2,1
 8003d1c:	d8800715 	stw	r2,28(sp)
 8003d20:	00bfffc4 	movi	r2,-1
 8003d24:	d8001e15 	stw	zero,120(sp)
 8003d28:	d8800615 	stw	r2,24(sp)
 8003d2c:	003e8f06 	br	800376c <_dtoa_r+0x730>
 8003d30:	00800044 	movi	r2,1
 8003d34:	d8800915 	stw	r2,36(sp)
 8003d38:	a03d5c0e 	bge	r20,zero,80032ac <_dtoa_r+0x270>
 8003d3c:	04800044 	movi	r18,1
 8003d40:	9405c83a 	sub	r2,r18,r16
 8003d44:	d8800515 	stw	r2,20(sp)
 8003d48:	0029883a 	mov	r20,zero
 8003d4c:	003d5806 	br	80032b0 <_dtoa_r+0x274>
 8003d50:	b009883a 	mov	r4,r22
 8003d54:	800d0c80 	call	800d0c8 <__floatsidf>
 8003d58:	a00d883a 	mov	r6,r20
 8003d5c:	980f883a 	mov	r7,r19
 8003d60:	1009883a 	mov	r4,r2
 8003d64:	180b883a 	mov	r5,r3
 8003d68:	800bc480 	call	800bc48 <__eqdf2>
 8003d6c:	103d3e26 	beq	r2,zero,8003268 <_dtoa_r+0x22c>
 8003d70:	b5bfffc4 	addi	r22,r22,-1
 8003d74:	003d3c06 	br	8003268 <_dtoa_r+0x22c>
 8003d78:	00820074 	movhi	r2,2049
 8003d7c:	10bf0304 	addi	r2,r2,-1012
 8003d80:	d8800315 	stw	r2,12(sp)
 8003d84:	003cdf06 	br	8003104 <_dtoa_r+0xc8>
 8003d88:	dc800817 	ldw	r18,32(sp)
 8003d8c:	dcc00517 	ldw	r19,20(sp)
 8003d90:	0021883a 	mov	r16,zero
 8003d94:	003f2f06 	br	8003a54 <_dtoa_r+0xa18>
 8003d98:	a80b883a 	mov	r5,r21
 8003d9c:	100d883a 	mov	r6,r2
 8003da0:	e009883a 	mov	r4,fp
 8003da4:	80065fc0 	call	80065fc <__lshift>
 8003da8:	102b883a 	mov	r21,r2
 8003dac:	003f6306 	br	8003b3c <_dtoa_r+0xb00>
 8003db0:	00800704 	movi	r2,28
 8003db4:	003f5a06 	br	8003b20 <_dtoa_r+0xae4>
 8003db8:	01000804 	movi	r4,32
 8003dbc:	2089c83a 	sub	r4,r4,r2
 8003dc0:	d8800117 	ldw	r2,4(sp)
 8003dc4:	1108983a 	sll	r4,r2,r4
 8003dc8:	003cf306 	br	8003198 <_dtoa_r+0x15c>
 8003dcc:	04000044 	movi	r16,1
 8003dd0:	003d4706 	br	80032f0 <_dtoa_r+0x2b4>
 8003dd4:	b00d883a 	mov	r6,r22
 8003dd8:	100b883a 	mov	r5,r2
 8003ddc:	e009883a 	mov	r4,fp
 8003de0:	80064d40 	call	80064d4 <__pow5mult>
 8003de4:	1025883a 	mov	r18,r2
 8003de8:	d8800217 	ldw	r2,8(sp)
 8003dec:	10800090 	cmplti	r2,r2,2
 8003df0:	10012f1e 	bne	r2,zero,80042b0 <_dtoa_r+0x1274>
 8003df4:	0023883a 	mov	r17,zero
 8003df8:	90800417 	ldw	r2,16(r18)
 8003dfc:	10800104 	addi	r2,r2,4
 8003e00:	100490ba 	slli	r2,r2,2
 8003e04:	9085883a 	add	r2,r18,r2
 8003e08:	11000017 	ldw	r4,0(r2)
 8003e0c:	800614c0 	call	800614c <__hi0bits>
 8003e10:	00c00804 	movi	r3,32
 8003e14:	1885c83a 	sub	r2,r3,r2
 8003e18:	003f3806 	br	8003afc <_dtoa_r+0xac0>
 8003e1c:	800b883a 	mov	r5,r16
 8003e20:	000f883a 	mov	r7,zero
 8003e24:	01800284 	movi	r6,10
 8003e28:	e009883a 	mov	r4,fp
 8003e2c:	8005f000 	call	8005f00 <__multadd>
 8003e30:	1021883a 	mov	r16,r2
 8003e34:	d8800b17 	ldw	r2,44(sp)
 8003e38:	00821b0e 	bge	zero,r2,80046a8 <_dtoa_r+0x166c>
 8003e3c:	d8800615 	stw	r2,24(sp)
 8003e40:	04c0b316 	blt	zero,r19,8004110 <_dtoa_r+0x10d4>
 8003e44:	8801341e 	bne	r17,zero,8004318 <_dtoa_r+0x12dc>
 8003e48:	8027883a 	mov	r19,r16
 8003e4c:	dc400317 	ldw	r17,12(sp)
 8003e50:	d8c00617 	ldw	r3,24(sp)
 8003e54:	d8800117 	ldw	r2,4(sp)
 8003e58:	8dffffc4 	addi	r23,r17,-1
 8003e5c:	b8c7883a 	add	r3,r23,r3
 8003e60:	d8c00615 	stw	r3,24(sp)
 8003e64:	d8c00217 	ldw	r3,8(sp)
 8003e68:	1080004c 	andi	r2,r2,1
 8003e6c:	d8800815 	stw	r2,32(sp)
 8003e70:	10c4b03a 	or	r2,r2,r3
 8003e74:	d8800715 	stw	r2,28(sp)
 8003e78:	00002c06 	br	8003f2c <_dtoa_r+0xef0>
 8003e7c:	b80b883a 	mov	r5,r23
 8003e80:	a809883a 	mov	r4,r21
 8003e84:	da000515 	stw	r8,20(sp)
 8003e88:	80067380 	call	8006738 <__mcmp>
 8003e8c:	b80b883a 	mov	r5,r23
 8003e90:	e009883a 	mov	r4,fp
 8003e94:	d8800115 	stw	r2,4(sp)
 8003e98:	8005edc0 	call	8005edc <_Bfree>
 8003e9c:	d8800117 	ldw	r2,4(sp)
 8003ea0:	da000517 	ldw	r8,20(sp)
 8003ea4:	1000021e 	bne	r2,zero,8003eb0 <_dtoa_r+0xe74>
 8003ea8:	d8c00717 	ldw	r3,28(sp)
 8003eac:	1801f226 	beq	r3,zero,8004678 <_dtoa_r+0x163c>
 8003eb0:	8dc00044 	addi	r23,r17,1
 8003eb4:	a0010516 	blt	r20,zero,80042cc <_dtoa_r+0x1290>
 8003eb8:	d8c00217 	ldw	r3,8(sp)
 8003ebc:	a0e8b03a 	or	r20,r20,r3
 8003ec0:	d8c00817 	ldw	r3,32(sp)
 8003ec4:	1d28b03a 	or	r20,r3,r20
 8003ec8:	a0010026 	beq	r20,zero,80042cc <_dtoa_r+0x1290>
 8003ecc:	00812816 	blt	zero,r2,8004370 <_dtoa_r+0x1334>
 8003ed0:	d8800617 	ldw	r2,24(sp)
 8003ed4:	8a000005 	stb	r8,0(r17)
 8003ed8:	14412926 	beq	r2,r17,8004380 <_dtoa_r+0x1344>
 8003edc:	a80b883a 	mov	r5,r21
 8003ee0:	000f883a 	mov	r7,zero
 8003ee4:	01800284 	movi	r6,10
 8003ee8:	e009883a 	mov	r4,fp
 8003eec:	8005f000 	call	8005f00 <__multadd>
 8003ef0:	102b883a 	mov	r21,r2
 8003ef4:	000f883a 	mov	r7,zero
 8003ef8:	01800284 	movi	r6,10
 8003efc:	800b883a 	mov	r5,r16
 8003f00:	e009883a 	mov	r4,fp
 8003f04:	84c02026 	beq	r16,r19,8003f88 <_dtoa_r+0xf4c>
 8003f08:	8005f000 	call	8005f00 <__multadd>
 8003f0c:	980b883a 	mov	r5,r19
 8003f10:	000f883a 	mov	r7,zero
 8003f14:	01800284 	movi	r6,10
 8003f18:	e009883a 	mov	r4,fp
 8003f1c:	1021883a 	mov	r16,r2
 8003f20:	8005f000 	call	8005f00 <__multadd>
 8003f24:	1027883a 	mov	r19,r2
 8003f28:	b823883a 	mov	r17,r23
 8003f2c:	900b883a 	mov	r5,r18
 8003f30:	a809883a 	mov	r4,r21
 8003f34:	8002e080 	call	8002e08 <quorem>
 8003f38:	800b883a 	mov	r5,r16
 8003f3c:	a809883a 	mov	r4,r21
 8003f40:	102d883a 	mov	r22,r2
 8003f44:	80067380 	call	8006738 <__mcmp>
 8003f48:	980d883a 	mov	r6,r19
 8003f4c:	900b883a 	mov	r5,r18
 8003f50:	e009883a 	mov	r4,fp
 8003f54:	1029883a 	mov	r20,r2
 8003f58:	80067900 	call	8006790 <__mdiff>
 8003f5c:	102f883a 	mov	r23,r2
 8003f60:	10800317 	ldw	r2,12(r2)
 8003f64:	b2000c04 	addi	r8,r22,48
 8003f68:	103fc426 	beq	r2,zero,8003e7c <_dtoa_r+0xe40>
 8003f6c:	b80b883a 	mov	r5,r23
 8003f70:	e009883a 	mov	r4,fp
 8003f74:	da000115 	stw	r8,4(sp)
 8003f78:	8005edc0 	call	8005edc <_Bfree>
 8003f7c:	00800044 	movi	r2,1
 8003f80:	da000117 	ldw	r8,4(sp)
 8003f84:	003fca06 	br	8003eb0 <_dtoa_r+0xe74>
 8003f88:	8005f000 	call	8005f00 <__multadd>
 8003f8c:	1021883a 	mov	r16,r2
 8003f90:	1027883a 	mov	r19,r2
 8003f94:	003fe406 	br	8003f28 <_dtoa_r+0xeec>
 8003f98:	d8800217 	ldw	r2,8(sp)
 8003f9c:	108000d0 	cmplti	r2,r2,3
 8003fa0:	10004b1e 	bne	r2,zero,80040d0 <_dtoa_r+0x1094>
 8003fa4:	d8800617 	ldw	r2,24(sp)
 8003fa8:	103e0d1e 	bne	r2,zero,80037e0 <_dtoa_r+0x7a4>
 8003fac:	900b883a 	mov	r5,r18
 8003fb0:	e009883a 	mov	r4,fp
 8003fb4:	000f883a 	mov	r7,zero
 8003fb8:	01800144 	movi	r6,5
 8003fbc:	8005f000 	call	8005f00 <__multadd>
 8003fc0:	100b883a 	mov	r5,r2
 8003fc4:	a809883a 	mov	r4,r21
 8003fc8:	1025883a 	mov	r18,r2
 8003fcc:	80067380 	call	8006738 <__mcmp>
 8003fd0:	00be030e 	bge	zero,r2,80037e0 <_dtoa_r+0x7a4>
 8003fd4:	d8c00317 	ldw	r3,12(sp)
 8003fd8:	00800c44 	movi	r2,49
 8003fdc:	18800005 	stb	r2,0(r3)
 8003fe0:	d8800417 	ldw	r2,16(sp)
 8003fe4:	1dc00044 	addi	r23,r3,1
 8003fe8:	14400044 	addi	r17,r2,1
 8003fec:	900b883a 	mov	r5,r18
 8003ff0:	e009883a 	mov	r4,fp
 8003ff4:	8005edc0 	call	8005edc <_Bfree>
 8003ff8:	88800044 	addi	r2,r17,1
 8003ffc:	d8800415 	stw	r2,16(sp)
 8004000:	803f121e 	bne	r16,zero,8003c4c <_dtoa_r+0xc10>
 8004004:	003d9f06 	br	8003684 <_dtoa_r+0x648>
 8004008:	900b883a 	mov	r5,r18
 800400c:	a809883a 	mov	r4,r21
 8004010:	80067380 	call	8006738 <__mcmp>
 8004014:	103ed10e 	bge	r2,zero,8003b5c <_dtoa_r+0xb20>
 8004018:	a80b883a 	mov	r5,r21
 800401c:	000f883a 	mov	r7,zero
 8004020:	01800284 	movi	r6,10
 8004024:	e009883a 	mov	r4,fp
 8004028:	8005f000 	call	8005f00 <__multadd>
 800402c:	102b883a 	mov	r21,r2
 8004030:	d8800417 	ldw	r2,16(sp)
 8004034:	153fffc4 	addi	r20,r2,-1
 8004038:	d8800717 	ldw	r2,28(sp)
 800403c:	103f771e 	bne	r2,zero,8003e1c <_dtoa_r+0xde0>
 8004040:	d8800b17 	ldw	r2,44(sp)
 8004044:	0081910e 	bge	zero,r2,800468c <_dtoa_r+0x1650>
 8004048:	d8800615 	stw	r2,24(sp)
 800404c:	003eca06 	br	8003b78 <_dtoa_r+0xb3c>
 8004050:	d9800817 	ldw	r6,32(sp)
 8004054:	a80b883a 	mov	r5,r21
 8004058:	e009883a 	mov	r4,fp
 800405c:	80064d40 	call	80064d4 <__pow5mult>
 8004060:	102b883a 	mov	r21,r2
 8004064:	003e9a06 	br	8003ad0 <_dtoa_r+0xa94>
 8004068:	00820074 	movhi	r2,2049
 800406c:	1007883a 	mov	r3,r2
 8004070:	18ff0c04 	addi	r3,r3,-976
 8004074:	00820074 	movhi	r2,2049
 8004078:	d8c00315 	stw	r3,12(sp)
 800407c:	10bf0cc4 	addi	r2,r2,-973
 8004080:	003da506 	br	8003718 <_dtoa_r+0x6dc>
 8004084:	d8800117 	ldw	r2,4(sp)
 8004088:	103e991e 	bne	r2,zero,8003af0 <_dtoa_r+0xab4>
 800408c:	00800434 	movhi	r2,16
 8004090:	10bfffc4 	addi	r2,r2,-1
 8004094:	8884703a 	and	r2,r17,r2
 8004098:	103e951e 	bne	r2,zero,8003af0 <_dtoa_r+0xab4>
 800409c:	8c5ffc2c 	andhi	r17,r17,32752
 80040a0:	883e9326 	beq	r17,zero,8003af0 <_dtoa_r+0xab4>
 80040a4:	d8800517 	ldw	r2,20(sp)
 80040a8:	a5000044 	addi	r20,r20,1
 80040ac:	04400044 	movi	r17,1
 80040b0:	10800044 	addi	r2,r2,1
 80040b4:	d8800515 	stw	r2,20(sp)
 80040b8:	003e8e06 	br	8003af4 <_dtoa_r+0xab8>
 80040bc:	00800044 	movi	r2,1
 80040c0:	04800044 	movi	r18,1
 80040c4:	d8800615 	stw	r2,24(sp)
 80040c8:	d8801e15 	stw	r2,120(sp)
 80040cc:	003ef406 	br	8003ca0 <_dtoa_r+0xc64>
 80040d0:	d8800417 	ldw	r2,16(sp)
 80040d4:	10800044 	addi	r2,r2,1
 80040d8:	d8800415 	stw	r2,16(sp)
 80040dc:	d8800717 	ldw	r2,28(sp)
 80040e0:	103f571e 	bne	r2,zero,8003e40 <_dtoa_r+0xe04>
 80040e4:	900b883a 	mov	r5,r18
 80040e8:	a809883a 	mov	r4,r21
 80040ec:	8002e080 	call	8002e08 <quorem>
 80040f0:	12000c04 	addi	r8,r2,48
 80040f4:	d8800317 	ldw	r2,12(sp)
 80040f8:	0029883a 	mov	r20,zero
 80040fc:	15c00044 	addi	r23,r2,1
 8004100:	12000005 	stb	r8,0(r2)
 8004104:	003eb006 	br	8003bc8 <_dtoa_r+0xb8c>
 8004108:	a005883a 	mov	r2,r20
 800410c:	003e5506 	br	8003a64 <_dtoa_r+0xa28>
 8004110:	800b883a 	mov	r5,r16
 8004114:	980d883a 	mov	r6,r19
 8004118:	e009883a 	mov	r4,fp
 800411c:	80065fc0 	call	80065fc <__lshift>
 8004120:	1021883a 	mov	r16,r2
 8004124:	003f4706 	br	8003e44 <_dtoa_r+0xe08>
 8004128:	14a5c83a 	sub	r18,r2,r18
 800412c:	003e3e06 	br	8003a28 <_dtoa_r+0x9ec>
 8004130:	00820074 	movhi	r2,2049
 8004134:	10bf1d04 	addi	r2,r2,-908
 8004138:	11800817 	ldw	r6,32(r2)
 800413c:	11c00917 	ldw	r7,36(r2)
 8004140:	d9000117 	ldw	r4,4(sp)
 8004144:	880b883a 	mov	r5,r17
 8004148:	da400e15 	stw	r9,56(sp)
 800414c:	da800d15 	stw	r10,52(sp)
 8004150:	800b2e40 	call	800b2e4 <__divdf3>
 8004154:	d8800c15 	stw	r2,48(sp)
 8004158:	1827883a 	mov	r19,r3
 800415c:	bdc003cc 	andi	r23,r23,15
 8004160:	040000c4 	movi	r16,3
 8004164:	da800d17 	ldw	r10,52(sp)
 8004168:	da400e17 	ldw	r9,56(sp)
 800416c:	003c9206 	br	80033b8 <_dtoa_r+0x37c>
 8004170:	d8000715 	stw	zero,28(sp)
 8004174:	003ed306 	br	8003cc4 <_dtoa_r+0xc88>
 8004178:	1000031e 	bne	r2,zero,8004188 <_dtoa_r+0x114c>
 800417c:	da000117 	ldw	r8,4(sp)
 8004180:	4200004c 	andi	r8,r8,1
 8004184:	403e9b1e 	bne	r8,zero,8003bf4 <_dtoa_r+0xbb8>
 8004188:	1805883a 	mov	r2,r3
 800418c:	00000206 	br	8004198 <_dtoa_r+0x115c>
 8004190:	b8bfff83 	ldbu	r2,-2(r23)
 8004194:	182f883a 	mov	r23,r3
 8004198:	10803fcc 	andi	r2,r2,255
 800419c:	1080201c 	xori	r2,r2,128
 80041a0:	10bfe004 	addi	r2,r2,-128
 80041a4:	10800c18 	cmpnei	r2,r2,48
 80041a8:	b8ffffc4 	addi	r3,r23,-1
 80041ac:	103ff826 	beq	r2,zero,8004190 <_dtoa_r+0x1154>
 80041b0:	003e9d06 	br	8003c28 <_dtoa_r+0xbec>
 80041b4:	d8c00a17 	ldw	r3,40(sp)
 80041b8:	1800bc26 	beq	r3,zero,80044ac <_dtoa_r+0x1470>
 80041bc:	d8c00517 	ldw	r3,20(sp)
 80041c0:	10810cc4 	addi	r2,r2,1075
 80041c4:	a0a9883a 	add	r20,r20,r2
 80041c8:	1885883a 	add	r2,r3,r2
 80041cc:	1827883a 	mov	r19,r3
 80041d0:	dc800817 	ldw	r18,32(sp)
 80041d4:	d8800515 	stw	r2,20(sp)
 80041d8:	003e1a06 	br	8003a44 <_dtoa_r+0xa08>
 80041dc:	d8c00317 	ldw	r3,12(sp)
 80041e0:	00800c44 	movi	r2,49
 80041e4:	18800005 	stb	r2,0(r3)
 80041e8:	d8800417 	ldw	r2,16(sp)
 80041ec:	10800044 	addi	r2,r2,1
 80041f0:	d8800415 	stw	r2,16(sp)
 80041f4:	003e8c06 	br	8003c28 <_dtoa_r+0xbec>
 80041f8:	8009883a 	mov	r4,r16
 80041fc:	800d0c80 	call	800d0c8 <__floatsidf>
 8004200:	900d883a 	mov	r6,r18
 8004204:	980f883a 	mov	r7,r19
 8004208:	1009883a 	mov	r4,r2
 800420c:	180b883a 	mov	r5,r3
 8004210:	800bea80 	call	800bea8 <__muldf3>
 8004214:	000d883a 	mov	r6,zero
 8004218:	01d00734 	movhi	r7,16412
 800421c:	1009883a 	mov	r4,r2
 8004220:	180b883a 	mov	r5,r3
 8004224:	800a9440 	call	800a944 <__adddf3>
 8004228:	d8800c15 	stw	r2,48(sp)
 800422c:	00bf3034 	movhi	r2,64704
 8004230:	1885883a 	add	r2,r3,r2
 8004234:	d8800d15 	stw	r2,52(sp)
 8004238:	9009883a 	mov	r4,r18
 800423c:	980b883a 	mov	r5,r19
 8004240:	000d883a 	mov	r6,zero
 8004244:	01d00534 	movhi	r7,16404
 8004248:	800c6880 	call	800c688 <__subdf3>
 800424c:	ddc00c17 	ldw	r23,48(sp)
 8004250:	dcc00d17 	ldw	r19,52(sp)
 8004254:	1009883a 	mov	r4,r2
 8004258:	b80d883a 	mov	r6,r23
 800425c:	980f883a 	mov	r7,r19
 8004260:	180b883a 	mov	r5,r3
 8004264:	1025883a 	mov	r18,r2
 8004268:	1821883a 	mov	r16,r3
 800426c:	800bcc80 	call	800bcc8 <__gedf2>
 8004270:	0080ee16 	blt	zero,r2,800462c <_dtoa_r+0x15f0>
 8004274:	99e0003c 	xorhi	r7,r19,32768
 8004278:	b80d883a 	mov	r6,r23
 800427c:	9009883a 	mov	r4,r18
 8004280:	800b883a 	mov	r5,r16
 8004284:	800bdb80 	call	800bdb8 <__ledf2>
 8004288:	103d380e 	bge	r2,zero,800376c <_dtoa_r+0x730>
 800428c:	0025883a 	mov	r18,zero
 8004290:	0021883a 	mov	r16,zero
 8004294:	003d5206 	br	80037e0 <_dtoa_r+0x7a4>
 8004298:	d8800417 	ldw	r2,16(sp)
 800429c:	1000ad1e 	bne	r2,zero,8004554 <_dtoa_r+0x1518>
 80042a0:	dc800117 	ldw	r18,4(sp)
 80042a4:	8827883a 	mov	r19,r17
 80042a8:	04000084 	movi	r16,2
 80042ac:	003c5b06 	br	800341c <_dtoa_r+0x3e0>
 80042b0:	d8800117 	ldw	r2,4(sp)
 80042b4:	103ecf1e 	bne	r2,zero,8003df4 <_dtoa_r+0xdb8>
 80042b8:	00800434 	movhi	r2,16
 80042bc:	10bfffc4 	addi	r2,r2,-1
 80042c0:	8884703a 	and	r2,r17,r2
 80042c4:	103f7526 	beq	r2,zero,800409c <_dtoa_r+0x1060>
 80042c8:	003eca06 	br	8003df4 <_dtoa_r+0xdb8>
 80042cc:	00800e0e 	bge	zero,r2,8004308 <_dtoa_r+0x12cc>
 80042d0:	a80b883a 	mov	r5,r21
 80042d4:	01800044 	movi	r6,1
 80042d8:	e009883a 	mov	r4,fp
 80042dc:	da000115 	stw	r8,4(sp)
 80042e0:	80065fc0 	call	80065fc <__lshift>
 80042e4:	900b883a 	mov	r5,r18
 80042e8:	1009883a 	mov	r4,r2
 80042ec:	102b883a 	mov	r21,r2
 80042f0:	80067380 	call	8006738 <__mcmp>
 80042f4:	da000117 	ldw	r8,4(sp)
 80042f8:	0080d50e 	bge	zero,r2,8004650 <_dtoa_r+0x1614>
 80042fc:	42000e60 	cmpeqi	r8,r8,57
 8004300:	4000c31e 	bne	r8,zero,8004610 <_dtoa_r+0x15d4>
 8004304:	b2000c44 	addi	r8,r22,49
 8004308:	8029883a 	mov	r20,r16
 800430c:	8a000005 	stb	r8,0(r17)
 8004310:	9821883a 	mov	r16,r19
 8004314:	003e4406 	br	8003c28 <_dtoa_r+0xbec>
 8004318:	81400117 	ldw	r5,4(r16)
 800431c:	e009883a 	mov	r4,fp
 8004320:	8005e380 	call	8005e38 <_Balloc>
 8004324:	81800417 	ldw	r6,16(r16)
 8004328:	81400304 	addi	r5,r16,12
 800432c:	11000304 	addi	r4,r2,12
 8004330:	31800084 	addi	r6,r6,2
 8004334:	300c90ba 	slli	r6,r6,2
 8004338:	1023883a 	mov	r17,r2
 800433c:	80008e00 	call	80008e0 <memcpy>
 8004340:	01800044 	movi	r6,1
 8004344:	880b883a 	mov	r5,r17
 8004348:	e009883a 	mov	r4,fp
 800434c:	80065fc0 	call	80065fc <__lshift>
 8004350:	1027883a 	mov	r19,r2
 8004354:	003ebd06 	br	8003e4c <_dtoa_r+0xe10>
 8004358:	dd400117 	ldw	r21,4(sp)
 800435c:	003cc906 	br	8003684 <_dtoa_r+0x648>
 8004360:	d8800517 	ldw	r2,20(sp)
 8004364:	d8c00617 	ldw	r3,24(sp)
 8004368:	10e7c83a 	sub	r19,r2,r3
 800436c:	003db506 	br	8003a44 <_dtoa_r+0xa08>
 8004370:	40800e58 	cmpnei	r2,r8,57
 8004374:	1000a626 	beq	r2,zero,8004610 <_dtoa_r+0x15d4>
 8004378:	42000044 	addi	r8,r8,1
 800437c:	003fe206 	br	8004308 <_dtoa_r+0x12cc>
 8004380:	8029883a 	mov	r20,r16
 8004384:	9821883a 	mov	r16,r19
 8004388:	003e0f06 	br	8003bc8 <_dtoa_r+0xb8c>
 800438c:	d9000c17 	ldw	r4,48(sp)
 8004390:	d9400d17 	ldw	r5,52(sp)
 8004394:	da401015 	stw	r9,64(sp)
 8004398:	800bea80 	call	800bea8 <__muldf3>
 800439c:	d9000e17 	ldw	r4,56(sp)
 80043a0:	d8c00d15 	stw	r3,52(sp)
 80043a4:	da401017 	ldw	r9,64(sp)
 80043a8:	d8c00317 	ldw	r3,12(sp)
 80043ac:	d8800c15 	stw	r2,48(sp)
 80043b0:	20800058 	cmpnei	r2,r4,1
 80043b4:	1a400005 	stb	r9,0(r3)
 80043b8:	1907883a 	add	r3,r3,r4
 80043bc:	1809883a 	mov	r4,r3
 80043c0:	10001d26 	beq	r2,zero,8004438 <_dtoa_r+0x13fc>
 80043c4:	8007883a 	mov	r3,r16
 80043c8:	9005883a 	mov	r2,r18
 80043cc:	dc400e15 	stw	r17,56(sp)
 80043d0:	2021883a 	mov	r16,r4
 80043d4:	000d883a 	mov	r6,zero
 80043d8:	01d00934 	movhi	r7,16420
 80043dc:	1009883a 	mov	r4,r2
 80043e0:	180b883a 	mov	r5,r3
 80043e4:	800bea80 	call	800bea8 <__muldf3>
 80043e8:	180b883a 	mov	r5,r3
 80043ec:	1009883a 	mov	r4,r2
 80043f0:	1825883a 	mov	r18,r3
 80043f4:	1023883a 	mov	r17,r2
 80043f8:	800d0480 	call	800d048 <__fixdfsi>
 80043fc:	1009883a 	mov	r4,r2
 8004400:	1027883a 	mov	r19,r2
 8004404:	800d0c80 	call	800d0c8 <__floatsidf>
 8004408:	100d883a 	mov	r6,r2
 800440c:	180f883a 	mov	r7,r3
 8004410:	8809883a 	mov	r4,r17
 8004414:	900b883a 	mov	r5,r18
 8004418:	bdc00044 	addi	r23,r23,1
 800441c:	9cc00c04 	addi	r19,r19,48
 8004420:	800c6880 	call	800c688 <__subdf3>
 8004424:	bcffffc5 	stb	r19,-1(r23)
 8004428:	bc3fea1e 	bne	r23,r16,80043d4 <_dtoa_r+0x1398>
 800442c:	dc400e17 	ldw	r17,56(sp)
 8004430:	1025883a 	mov	r18,r2
 8004434:	1821883a 	mov	r16,r3
 8004438:	d9000c17 	ldw	r4,48(sp)
 800443c:	d9400d17 	ldw	r5,52(sp)
 8004440:	000d883a 	mov	r6,zero
 8004444:	01cff834 	movhi	r7,16352
 8004448:	800a9440 	call	800a944 <__adddf3>
 800444c:	100d883a 	mov	r6,r2
 8004450:	180f883a 	mov	r7,r3
 8004454:	9009883a 	mov	r4,r18
 8004458:	800b883a 	mov	r5,r16
 800445c:	800bcc80 	call	800bcc8 <__gedf2>
 8004460:	00807516 	blt	zero,r2,8004638 <_dtoa_r+0x15fc>
 8004464:	d9800c17 	ldw	r6,48(sp)
 8004468:	d9c00d17 	ldw	r7,52(sp)
 800446c:	0009883a 	mov	r4,zero
 8004470:	014ff834 	movhi	r5,16352
 8004474:	800c6880 	call	800c688 <__subdf3>
 8004478:	100d883a 	mov	r6,r2
 800447c:	180f883a 	mov	r7,r3
 8004480:	9009883a 	mov	r4,r18
 8004484:	800b883a 	mov	r5,r16
 8004488:	800bdb80 	call	800bdb8 <__ledf2>
 800448c:	103cb70e 	bge	r2,zero,800376c <_dtoa_r+0x730>
 8004490:	00000106 	br	8004498 <_dtoa_r+0x145c>
 8004494:	182f883a 	mov	r23,r3
 8004498:	b8bfffc7 	ldb	r2,-1(r23)
 800449c:	b8ffffc4 	addi	r3,r23,-1
 80044a0:	10800c20 	cmpeqi	r2,r2,48
 80044a4:	103ffb1e 	bne	r2,zero,8004494 <_dtoa_r+0x1458>
 80044a8:	003c7306 	br	8003678 <_dtoa_r+0x63c>
 80044ac:	d8c01217 	ldw	r3,72(sp)
 80044b0:	d9000517 	ldw	r4,20(sp)
 80044b4:	00800d84 	movi	r2,54
 80044b8:	10c5c83a 	sub	r2,r2,r3
 80044bc:	a0a9883a 	add	r20,r20,r2
 80044c0:	2085883a 	add	r2,r4,r2
 80044c4:	2027883a 	mov	r19,r4
 80044c8:	dc800817 	ldw	r18,32(sp)
 80044cc:	d8800515 	stw	r2,20(sp)
 80044d0:	003d5c06 	br	8003a44 <_dtoa_r+0xa08>
 80044d4:	d8800617 	ldw	r2,24(sp)
 80044d8:	103f4726 	beq	r2,zero,80041f8 <_dtoa_r+0x11bc>
 80044dc:	ddc00b17 	ldw	r23,44(sp)
 80044e0:	05fca20e 	bge	zero,r23,800376c <_dtoa_r+0x730>
 80044e4:	980b883a 	mov	r5,r19
 80044e8:	000d883a 	mov	r6,zero
 80044ec:	01d00934 	movhi	r7,16420
 80044f0:	9009883a 	mov	r4,r18
 80044f4:	800bea80 	call	800bea8 <__muldf3>
 80044f8:	81000044 	addi	r4,r16,1
 80044fc:	1025883a 	mov	r18,r2
 8004500:	1827883a 	mov	r19,r3
 8004504:	800d0c80 	call	800d0c8 <__floatsidf>
 8004508:	900d883a 	mov	r6,r18
 800450c:	980f883a 	mov	r7,r19
 8004510:	1009883a 	mov	r4,r2
 8004514:	180b883a 	mov	r5,r3
 8004518:	800bea80 	call	800bea8 <__muldf3>
 800451c:	000d883a 	mov	r6,zero
 8004520:	01d00734 	movhi	r7,16412
 8004524:	1009883a 	mov	r4,r2
 8004528:	180b883a 	mov	r5,r3
 800452c:	800a9440 	call	800a944 <__adddf3>
 8004530:	d8800c15 	stw	r2,48(sp)
 8004534:	d8800417 	ldw	r2,16(sp)
 8004538:	ddc00e15 	stw	r23,56(sp)
 800453c:	10bfffc4 	addi	r2,r2,-1
 8004540:	d8800f15 	stw	r2,60(sp)
 8004544:	00bf3034 	movhi	r2,64704
 8004548:	1885883a 	add	r2,r3,r2
 800454c:	d8800d15 	stw	r2,52(sp)
 8004550:	003bd006 	br	8003494 <_dtoa_r+0x458>
 8004554:	d8800417 	ldw	r2,16(sp)
 8004558:	d9000117 	ldw	r4,4(sp)
 800455c:	880b883a 	mov	r5,r17
 8004560:	00afc83a 	sub	r23,zero,r2
 8004564:	b88003cc 	andi	r2,r23,15
 8004568:	100690fa 	slli	r3,r2,3
 800456c:	00820074 	movhi	r2,2049
 8004570:	10bf2704 	addi	r2,r2,-868
 8004574:	10c5883a 	add	r2,r2,r3
 8004578:	11800017 	ldw	r6,0(r2)
 800457c:	11c00117 	ldw	r7,4(r2)
 8004580:	b82fd13a 	srai	r23,r23,4
 8004584:	800bea80 	call	800bea8 <__muldf3>
 8004588:	1025883a 	mov	r18,r2
 800458c:	1827883a 	mov	r19,r3
 8004590:	b8004a26 	beq	r23,zero,80046bc <_dtoa_r+0x1680>
 8004594:	02020074 	movhi	r8,2049
 8004598:	04000084 	movi	r16,2
 800459c:	423f1d04 	addi	r8,r8,-908
 80045a0:	dc400c15 	stw	r17,48(sp)
 80045a4:	000f883a 	mov	r7,zero
 80045a8:	8023883a 	mov	r17,r16
 80045ac:	4021883a 	mov	r16,r8
 80045b0:	b980004c 	andi	r6,r23,1
 80045b4:	1009883a 	mov	r4,r2
 80045b8:	b82fd07a 	srai	r23,r23,1
 80045bc:	180b883a 	mov	r5,r3
 80045c0:	30000526 	beq	r6,zero,80045d8 <_dtoa_r+0x159c>
 80045c4:	81c00117 	ldw	r7,4(r16)
 80045c8:	81800017 	ldw	r6,0(r16)
 80045cc:	8c400044 	addi	r17,r17,1
 80045d0:	800bea80 	call	800bea8 <__muldf3>
 80045d4:	01c00044 	movi	r7,1
 80045d8:	84000204 	addi	r16,r16,8
 80045dc:	b83ff41e 	bne	r23,zero,80045b0 <_dtoa_r+0x1574>
 80045e0:	39c03fcc 	andi	r7,r7,255
 80045e4:	8821883a 	mov	r16,r17
 80045e8:	dc400c17 	ldw	r17,48(sp)
 80045ec:	383b8b26 	beq	r7,zero,800341c <_dtoa_r+0x3e0>
 80045f0:	1025883a 	mov	r18,r2
 80045f4:	1827883a 	mov	r19,r3
 80045f8:	003b8806 	br	800341c <_dtoa_r+0x3e0>
 80045fc:	d8800417 	ldw	r2,16(sp)
 8004600:	02000c44 	movi	r8,49
 8004604:	10800044 	addi	r2,r2,1
 8004608:	d8800415 	stw	r2,16(sp)
 800460c:	003cf606 	br	80039e8 <_dtoa_r+0x9ac>
 8004610:	00800e44 	movi	r2,57
 8004614:	8029883a 	mov	r20,r16
 8004618:	88800005 	stb	r2,0(r17)
 800461c:	9821883a 	mov	r16,r19
 8004620:	00c00e44 	movi	r3,57
 8004624:	d9400317 	ldw	r5,12(sp)
 8004628:	003d7706 	br	8003c08 <_dtoa_r+0xbcc>
 800462c:	0025883a 	mov	r18,zero
 8004630:	0021883a 	mov	r16,zero
 8004634:	003e6706 	br	8003fd4 <_dtoa_r+0xf98>
 8004638:	d8800f17 	ldw	r2,60(sp)
 800463c:	ba3fffc3 	ldbu	r8,-1(r23)
 8004640:	d9000317 	ldw	r4,12(sp)
 8004644:	10800044 	addi	r2,r2,1
 8004648:	d8800415 	stw	r2,16(sp)
 800464c:	003cdf06 	br	80039cc <_dtoa_r+0x990>
 8004650:	103f2d1e 	bne	r2,zero,8004308 <_dtoa_r+0x12cc>
 8004654:	4080004c 	andi	r2,r8,1
 8004658:	103f281e 	bne	r2,zero,80042fc <_dtoa_r+0x12c0>
 800465c:	003f2a06 	br	8004308 <_dtoa_r+0x12cc>
 8004660:	d8800f17 	ldw	r2,60(sp)
 8004664:	8811883a 	mov	r8,r17
 8004668:	d9000317 	ldw	r4,12(sp)
 800466c:	10800044 	addi	r2,r2,1
 8004670:	d8800415 	stw	r2,16(sp)
 8004674:	003cd506 	br	80039cc <_dtoa_r+0x990>
 8004678:	40800e60 	cmpeqi	r2,r8,57
 800467c:	8dc00044 	addi	r23,r17,1
 8004680:	103fe31e 	bne	r2,zero,8004610 <_dtoa_r+0x15d4>
 8004684:	053f1f16 	blt	zero,r20,8004304 <_dtoa_r+0x12c8>
 8004688:	003f1f06 	br	8004308 <_dtoa_r+0x12cc>
 800468c:	d8800217 	ldw	r2,8(sp)
 8004690:	108000c8 	cmpgei	r2,r2,3
 8004694:	103e9326 	beq	r2,zero,80040e4 <_dtoa_r+0x10a8>
 8004698:	d8800b17 	ldw	r2,44(sp)
 800469c:	dd000415 	stw	r20,16(sp)
 80046a0:	d8800615 	stw	r2,24(sp)
 80046a4:	003e3f06 	br	8003fa4 <_dtoa_r+0xf68>
 80046a8:	d8800217 	ldw	r2,8(sp)
 80046ac:	108000c8 	cmpgei	r2,r2,3
 80046b0:	103ff91e 	bne	r2,zero,8004698 <_dtoa_r+0x165c>
 80046b4:	d8800b17 	ldw	r2,44(sp)
 80046b8:	003de006 	br	8003e3c <_dtoa_r+0xe00>
 80046bc:	04000084 	movi	r16,2
 80046c0:	003b5606 	br	800341c <_dtoa_r+0x3e0>
 80046c4:	d8800f17 	ldw	r2,60(sp)
 80046c8:	d9000317 	ldw	r4,12(sp)
 80046cc:	10800044 	addi	r2,r2,1
 80046d0:	d8800415 	stw	r2,16(sp)
 80046d4:	003cbd06 	br	80039cc <_dtoa_r+0x990>
 80046d8:	00820074 	movhi	r2,2049
 80046dc:	10bf0d04 	addi	r2,r2,-972
 80046e0:	d8800315 	stw	r2,12(sp)
 80046e4:	003a8706 	br	8003104 <_dtoa_r+0xc8>
 80046e8:	000b883a 	mov	r5,zero
 80046ec:	003b1b06 	br	800335c <_dtoa_r+0x320>
 80046f0:	18c00120 	cmpeqi	r3,r3,4
 80046f4:	183d0f1e 	bne	r3,zero,8003b34 <_dtoa_r+0xaf8>
 80046f8:	00c00f04 	movi	r3,60
 80046fc:	1885c83a 	sub	r2,r3,r2
 8004700:	003d0706 	br	8003b20 <_dtoa_r+0xae4>

08004704 <__sflush_r>:
 8004704:	2880030b 	ldhu	r2,12(r5)
 8004708:	defffb04 	addi	sp,sp,-20
 800470c:	dcc00315 	stw	r19,12(sp)
 8004710:	dc000015 	stw	r16,0(sp)
 8004714:	dfc00415 	stw	ra,16(sp)
 8004718:	dc800215 	stw	r18,8(sp)
 800471c:	dc400115 	stw	r17,4(sp)
 8004720:	10c0020c 	andi	r3,r2,8
 8004724:	2821883a 	mov	r16,r5
 8004728:	2027883a 	mov	r19,r4
 800472c:	18003f1e 	bne	r3,zero,800482c <__sflush_r+0x128>
 8004730:	28c00117 	ldw	r3,4(r5)
 8004734:	10820014 	ori	r2,r2,2048
 8004738:	2880030d 	sth	r2,12(r5)
 800473c:	00c0550e 	bge	zero,r3,8004894 <__sflush_r+0x190>
 8004740:	82000a17 	ldw	r8,40(r16)
 8004744:	40003126 	beq	r8,zero,800480c <__sflush_r+0x108>
 8004748:	9c400017 	ldw	r17,0(r19)
 800474c:	1104000c 	andi	r4,r2,4096
 8004750:	98000015 	stw	zero,0(r19)
 8004754:	1007883a 	mov	r3,r2
 8004758:	81400717 	ldw	r5,28(r16)
 800475c:	2000521e 	bne	r4,zero,80048a8 <__sflush_r+0x1a4>
 8004760:	01c00044 	movi	r7,1
 8004764:	000d883a 	mov	r6,zero
 8004768:	9809883a 	mov	r4,r19
 800476c:	403ee83a 	callr	r8
 8004770:	10ffffd8 	cmpnei	r3,r2,-1
 8004774:	18005826 	beq	r3,zero,80048d8 <__sflush_r+0x1d4>
 8004778:	80c0030b 	ldhu	r3,12(r16)
 800477c:	82000a17 	ldw	r8,40(r16)
 8004780:	81400717 	ldw	r5,28(r16)
 8004784:	18c0010c 	andi	r3,r3,4
 8004788:	18000626 	beq	r3,zero,80047a4 <__sflush_r+0xa0>
 800478c:	81000117 	ldw	r4,4(r16)
 8004790:	80c00c17 	ldw	r3,48(r16)
 8004794:	1105c83a 	sub	r2,r2,r4
 8004798:	18000226 	beq	r3,zero,80047a4 <__sflush_r+0xa0>
 800479c:	80c00f17 	ldw	r3,60(r16)
 80047a0:	10c5c83a 	sub	r2,r2,r3
 80047a4:	000f883a 	mov	r7,zero
 80047a8:	100d883a 	mov	r6,r2
 80047ac:	9809883a 	mov	r4,r19
 80047b0:	403ee83a 	callr	r8
 80047b4:	10ffffd8 	cmpnei	r3,r2,-1
 80047b8:	18003d1e 	bne	r3,zero,80048b0 <__sflush_r+0x1ac>
 80047bc:	99000017 	ldw	r4,0(r19)
 80047c0:	80c0030b 	ldhu	r3,12(r16)
 80047c4:	20004e26 	beq	r4,zero,8004900 <__sflush_r+0x1fc>
 80047c8:	21400760 	cmpeqi	r5,r4,29
 80047cc:	2800021e 	bne	r5,zero,80047d8 <__sflush_r+0xd4>
 80047d0:	210005a0 	cmpeqi	r4,r4,22
 80047d4:	20002c26 	beq	r4,zero,8004888 <__sflush_r+0x184>
 80047d8:	80800417 	ldw	r2,16(r16)
 80047dc:	18fdffcc 	andi	r3,r3,63487
 80047e0:	80c0030d 	sth	r3,12(r16)
 80047e4:	80000115 	stw	zero,4(r16)
 80047e8:	80800015 	stw	r2,0(r16)
 80047ec:	81400c17 	ldw	r5,48(r16)
 80047f0:	9c400015 	stw	r17,0(r19)
 80047f4:	28000526 	beq	r5,zero,800480c <__sflush_r+0x108>
 80047f8:	80801004 	addi	r2,r16,64
 80047fc:	28800226 	beq	r5,r2,8004808 <__sflush_r+0x104>
 8004800:	9809883a 	mov	r4,r19
 8004804:	8004e240 	call	8004e24 <_free_r>
 8004808:	80000c15 	stw	zero,48(r16)
 800480c:	0005883a 	mov	r2,zero
 8004810:	dfc00417 	ldw	ra,16(sp)
 8004814:	dcc00317 	ldw	r19,12(sp)
 8004818:	dc800217 	ldw	r18,8(sp)
 800481c:	dc400117 	ldw	r17,4(sp)
 8004820:	dc000017 	ldw	r16,0(sp)
 8004824:	dec00504 	addi	sp,sp,20
 8004828:	f800283a 	ret
 800482c:	2c800417 	ldw	r18,16(r5)
 8004830:	903ff626 	beq	r18,zero,800480c <__sflush_r+0x108>
 8004834:	2c400017 	ldw	r17,0(r5)
 8004838:	108000cc 	andi	r2,r2,3
 800483c:	2c800015 	stw	r18,0(r5)
 8004840:	8ca3c83a 	sub	r17,r17,r18
 8004844:	1000161e 	bne	r2,zero,80048a0 <__sflush_r+0x19c>
 8004848:	28800517 	ldw	r2,20(r5)
 800484c:	80800215 	stw	r2,8(r16)
 8004850:	04400316 	blt	zero,r17,8004860 <__sflush_r+0x15c>
 8004854:	003fed06 	br	800480c <__sflush_r+0x108>
 8004858:	90a5883a 	add	r18,r18,r2
 800485c:	047feb0e 	bge	zero,r17,800480c <__sflush_r+0x108>
 8004860:	80800917 	ldw	r2,36(r16)
 8004864:	81400717 	ldw	r5,28(r16)
 8004868:	880f883a 	mov	r7,r17
 800486c:	900d883a 	mov	r6,r18
 8004870:	9809883a 	mov	r4,r19
 8004874:	103ee83a 	callr	r2
 8004878:	88a3c83a 	sub	r17,r17,r2
 800487c:	00bff616 	blt	zero,r2,8004858 <__sflush_r+0x154>
 8004880:	80c0030b 	ldhu	r3,12(r16)
 8004884:	00bfffc4 	movi	r2,-1
 8004888:	18c01014 	ori	r3,r3,64
 800488c:	80c0030d 	sth	r3,12(r16)
 8004890:	003fdf06 	br	8004810 <__sflush_r+0x10c>
 8004894:	28c00f17 	ldw	r3,60(r5)
 8004898:	00ffa916 	blt	zero,r3,8004740 <__sflush_r+0x3c>
 800489c:	003fdb06 	br	800480c <__sflush_r+0x108>
 80048a0:	0005883a 	mov	r2,zero
 80048a4:	003fe906 	br	800484c <__sflush_r+0x148>
 80048a8:	80801417 	ldw	r2,80(r16)
 80048ac:	003fb506 	br	8004784 <__sflush_r+0x80>
 80048b0:	80c0030b 	ldhu	r3,12(r16)
 80048b4:	81000417 	ldw	r4,16(r16)
 80048b8:	80000115 	stw	zero,4(r16)
 80048bc:	197dffcc 	andi	r5,r3,63487
 80048c0:	8140030d 	sth	r5,12(r16)
 80048c4:	81000015 	stw	r4,0(r16)
 80048c8:	18c4000c 	andi	r3,r3,4096
 80048cc:	183fc726 	beq	r3,zero,80047ec <__sflush_r+0xe8>
 80048d0:	80801415 	stw	r2,80(r16)
 80048d4:	003fc506 	br	80047ec <__sflush_r+0xe8>
 80048d8:	98c00017 	ldw	r3,0(r19)
 80048dc:	183fa626 	beq	r3,zero,8004778 <__sflush_r+0x74>
 80048e0:	19000760 	cmpeqi	r4,r3,29
 80048e4:	20000e1e 	bne	r4,zero,8004920 <__sflush_r+0x21c>
 80048e8:	18c00598 	cmpnei	r3,r3,22
 80048ec:	18000c26 	beq	r3,zero,8004920 <__sflush_r+0x21c>
 80048f0:	80c0030b 	ldhu	r3,12(r16)
 80048f4:	18c01014 	ori	r3,r3,64
 80048f8:	80c0030d 	sth	r3,12(r16)
 80048fc:	003fc406 	br	8004810 <__sflush_r+0x10c>
 8004900:	81000417 	ldw	r4,16(r16)
 8004904:	197dffcc 	andi	r5,r3,63487
 8004908:	8140030d 	sth	r5,12(r16)
 800490c:	80000115 	stw	zero,4(r16)
 8004910:	81000015 	stw	r4,0(r16)
 8004914:	18c4000c 	andi	r3,r3,4096
 8004918:	183fb426 	beq	r3,zero,80047ec <__sflush_r+0xe8>
 800491c:	003fec06 	br	80048d0 <__sflush_r+0x1cc>
 8004920:	9c400015 	stw	r17,0(r19)
 8004924:	0005883a 	mov	r2,zero
 8004928:	003fb906 	br	8004810 <__sflush_r+0x10c>

0800492c <_fflush_r>:
 800492c:	defffd04 	addi	sp,sp,-12
 8004930:	dc000115 	stw	r16,4(sp)
 8004934:	dfc00215 	stw	ra,8(sp)
 8004938:	2021883a 	mov	r16,r4
 800493c:	20000226 	beq	r4,zero,8004948 <_fflush_r+0x1c>
 8004940:	20800e17 	ldw	r2,56(r4)
 8004944:	10000726 	beq	r2,zero,8004964 <_fflush_r+0x38>
 8004948:	2880030f 	ldh	r2,12(r5)
 800494c:	10000a1e 	bne	r2,zero,8004978 <_fflush_r+0x4c>
 8004950:	0005883a 	mov	r2,zero
 8004954:	dfc00217 	ldw	ra,8(sp)
 8004958:	dc000117 	ldw	r16,4(sp)
 800495c:	dec00304 	addi	sp,sp,12
 8004960:	f800283a 	ret
 8004964:	d9400015 	stw	r5,0(sp)
 8004968:	8004cc00 	call	8004cc0 <__sinit>
 800496c:	d9400017 	ldw	r5,0(sp)
 8004970:	2880030f 	ldh	r2,12(r5)
 8004974:	103ff626 	beq	r2,zero,8004950 <_fflush_r+0x24>
 8004978:	8009883a 	mov	r4,r16
 800497c:	dfc00217 	ldw	ra,8(sp)
 8004980:	dc000117 	ldw	r16,4(sp)
 8004984:	dec00304 	addi	sp,sp,12
 8004988:	80047041 	jmpi	8004704 <__sflush_r>

0800498c <fflush>:
 800498c:	200b883a 	mov	r5,r4
 8004990:	20000326 	beq	r4,zero,80049a0 <fflush+0x14>
 8004994:	00820074 	movhi	r2,2049
 8004998:	11073d17 	ldw	r4,7412(r2)
 800499c:	800492c1 	jmpi	800492c <_fflush_r>
 80049a0:	00820074 	movhi	r2,2049
 80049a4:	11073c17 	ldw	r4,7408(r2)
 80049a8:	01420034 	movhi	r5,2048
 80049ac:	29524b04 	addi	r5,r5,18732
 80049b0:	80051c41 	jmpi	80051c4 <_fwalk_reent>

080049b4 <__fp_lock>:
 80049b4:	0005883a 	mov	r2,zero
 80049b8:	f800283a 	ret

080049bc <_cleanup_r>:
 80049bc:	01420074 	movhi	r5,2049
 80049c0:	2961b104 	addi	r5,r5,-31036
 80049c4:	80051c41 	jmpi	80051c4 <_fwalk_reent>

080049c8 <__sinit.part.0>:
 80049c8:	00c20034 	movhi	r3,2048
 80049cc:	20800117 	ldw	r2,4(r4)
 80049d0:	18d26f04 	addi	r3,r3,18876
 80049d4:	20c00f15 	stw	r3,60(r4)
 80049d8:	2140bb04 	addi	r5,r4,748
 80049dc:	00c000c4 	movi	r3,3
 80049e0:	20c0b915 	stw	r3,740(r4)
 80049e4:	2140ba15 	stw	r5,744(r4)
 80049e8:	2000b815 	stw	zero,736(r4)
 80049ec:	10001705 	stb	zero,92(r2)
 80049f0:	10001745 	stb	zero,93(r2)
 80049f4:	10001785 	stb	zero,94(r2)
 80049f8:	100017c5 	stb	zero,95(r2)
 80049fc:	10001805 	stb	zero,96(r2)
 8004a00:	10001845 	stb	zero,97(r2)
 8004a04:	10001885 	stb	zero,98(r2)
 8004a08:	100018c5 	stb	zero,99(r2)
 8004a0c:	00c00104 	movi	r3,4
 8004a10:	10c00315 	stw	r3,12(r2)
 8004a14:	02020034 	movhi	r8,2048
 8004a18:	20c00217 	ldw	r3,8(r4)
 8004a1c:	01c20034 	movhi	r7,2048
 8004a20:	01820034 	movhi	r6,2048
 8004a24:	01420034 	movhi	r5,2048
 8004a28:	421b9104 	addi	r8,r8,28228
 8004a2c:	39dba804 	addi	r7,r7,28320
 8004a30:	319bc804 	addi	r6,r6,28448
 8004a34:	295bdf04 	addi	r5,r5,28540
 8004a38:	02400074 	movhi	r9,1
 8004a3c:	10001915 	stw	zero,100(r2)
 8004a40:	10000015 	stw	zero,0(r2)
 8004a44:	10000115 	stw	zero,4(r2)
 8004a48:	10000215 	stw	zero,8(r2)
 8004a4c:	10000415 	stw	zero,16(r2)
 8004a50:	10000515 	stw	zero,20(r2)
 8004a54:	10000615 	stw	zero,24(r2)
 8004a58:	10800715 	stw	r2,28(r2)
 8004a5c:	12000815 	stw	r8,32(r2)
 8004a60:	11c00915 	stw	r7,36(r2)
 8004a64:	11800a15 	stw	r6,40(r2)
 8004a68:	11400b15 	stw	r5,44(r2)
 8004a6c:	4a400284 	addi	r9,r9,10
 8004a70:	1a400315 	stw	r9,12(r3)
 8004a74:	18001915 	stw	zero,100(r3)
 8004a78:	18000015 	stw	zero,0(r3)
 8004a7c:	18000115 	stw	zero,4(r3)
 8004a80:	18000215 	stw	zero,8(r3)
 8004a84:	18000415 	stw	zero,16(r3)
 8004a88:	18001705 	stb	zero,92(r3)
 8004a8c:	18001745 	stb	zero,93(r3)
 8004a90:	18001785 	stb	zero,94(r3)
 8004a94:	180017c5 	stb	zero,95(r3)
 8004a98:	18001805 	stb	zero,96(r3)
 8004a9c:	18001845 	stb	zero,97(r3)
 8004aa0:	18001885 	stb	zero,98(r3)
 8004aa4:	180018c5 	stb	zero,99(r3)
 8004aa8:	20800317 	ldw	r2,12(r4)
 8004aac:	024000b4 	movhi	r9,2
 8004ab0:	18000515 	stw	zero,20(r3)
 8004ab4:	18000615 	stw	zero,24(r3)
 8004ab8:	18c00715 	stw	r3,28(r3)
 8004abc:	1a000815 	stw	r8,32(r3)
 8004ac0:	19c00915 	stw	r7,36(r3)
 8004ac4:	19800a15 	stw	r6,40(r3)
 8004ac8:	19400b15 	stw	r5,44(r3)
 8004acc:	4a400484 	addi	r9,r9,18
 8004ad0:	10001915 	stw	zero,100(r2)
 8004ad4:	10000015 	stw	zero,0(r2)
 8004ad8:	10000115 	stw	zero,4(r2)
 8004adc:	10000215 	stw	zero,8(r2)
 8004ae0:	12400315 	stw	r9,12(r2)
 8004ae4:	10000415 	stw	zero,16(r2)
 8004ae8:	10000515 	stw	zero,20(r2)
 8004aec:	10000615 	stw	zero,24(r2)
 8004af0:	10001705 	stb	zero,92(r2)
 8004af4:	10001745 	stb	zero,93(r2)
 8004af8:	10001785 	stb	zero,94(r2)
 8004afc:	100017c5 	stb	zero,95(r2)
 8004b00:	10001805 	stb	zero,96(r2)
 8004b04:	10001845 	stb	zero,97(r2)
 8004b08:	10001885 	stb	zero,98(r2)
 8004b0c:	100018c5 	stb	zero,99(r2)
 8004b10:	10800715 	stw	r2,28(r2)
 8004b14:	12000815 	stw	r8,32(r2)
 8004b18:	11c00915 	stw	r7,36(r2)
 8004b1c:	11800a15 	stw	r6,40(r2)
 8004b20:	11400b15 	stw	r5,44(r2)
 8004b24:	00800044 	movi	r2,1
 8004b28:	20800e15 	stw	r2,56(r4)
 8004b2c:	f800283a 	ret

08004b30 <__fp_unlock>:
 8004b30:	0005883a 	mov	r2,zero
 8004b34:	f800283a 	ret

08004b38 <__sfmoreglue>:
 8004b38:	defffc04 	addi	sp,sp,-16
 8004b3c:	dc800215 	stw	r18,8(sp)
 8004b40:	2825883a 	mov	r18,r5
 8004b44:	dc000015 	stw	r16,0(sp)
 8004b48:	01401a04 	movi	r5,104
 8004b4c:	2021883a 	mov	r16,r4
 8004b50:	913fffc4 	addi	r4,r18,-1
 8004b54:	dfc00315 	stw	ra,12(sp)
 8004b58:	dc400115 	stw	r17,4(sp)
 8004b5c:	80008b80 	call	80008b8 <__mulsi3>
 8004b60:	8009883a 	mov	r4,r16
 8004b64:	11401d04 	addi	r5,r2,116
 8004b68:	1023883a 	mov	r17,r2
 8004b6c:	800546c0 	call	800546c <_malloc_r>
 8004b70:	1021883a 	mov	r16,r2
 8004b74:	10000726 	beq	r2,zero,8004b94 <__sfmoreglue+0x5c>
 8004b78:	11000304 	addi	r4,r2,12
 8004b7c:	10000015 	stw	zero,0(r2)
 8004b80:	14800115 	stw	r18,4(r2)
 8004b84:	11000215 	stw	r4,8(r2)
 8004b88:	89801a04 	addi	r6,r17,104
 8004b8c:	000b883a 	mov	r5,zero
 8004b90:	8005d480 	call	8005d48 <memset>
 8004b94:	8005883a 	mov	r2,r16
 8004b98:	dfc00317 	ldw	ra,12(sp)
 8004b9c:	dc800217 	ldw	r18,8(sp)
 8004ba0:	dc400117 	ldw	r17,4(sp)
 8004ba4:	dc000017 	ldw	r16,0(sp)
 8004ba8:	dec00404 	addi	sp,sp,16
 8004bac:	f800283a 	ret

08004bb0 <__sfp>:
 8004bb0:	defffd04 	addi	sp,sp,-12
 8004bb4:	00820074 	movhi	r2,2049
 8004bb8:	dc000015 	stw	r16,0(sp)
 8004bbc:	14073c17 	ldw	r16,7408(r2)
 8004bc0:	dc400115 	stw	r17,4(sp)
 8004bc4:	dfc00215 	stw	ra,8(sp)
 8004bc8:	80800e17 	ldw	r2,56(r16)
 8004bcc:	2023883a 	mov	r17,r4
 8004bd0:	10002b26 	beq	r2,zero,8004c80 <__sfp+0xd0>
 8004bd4:	8400b804 	addi	r16,r16,736
 8004bd8:	80c00117 	ldw	r3,4(r16)
 8004bdc:	80800217 	ldw	r2,8(r16)
 8004be0:	18ffffc4 	addi	r3,r3,-1
 8004be4:	1800050e 	bge	r3,zero,8004bfc <__sfp+0x4c>
 8004be8:	00002106 	br	8004c70 <__sfp+0xc0>
 8004bec:	18ffffc4 	addi	r3,r3,-1
 8004bf0:	193fffd8 	cmpnei	r4,r3,-1
 8004bf4:	10801a04 	addi	r2,r2,104
 8004bf8:	20001d26 	beq	r4,zero,8004c70 <__sfp+0xc0>
 8004bfc:	1100030f 	ldh	r4,12(r2)
 8004c00:	203ffa1e 	bne	r4,zero,8004bec <__sfp+0x3c>
 8004c04:	00fffff4 	movhi	r3,65535
 8004c08:	18c00044 	addi	r3,r3,1
 8004c0c:	10001915 	stw	zero,100(r2)
 8004c10:	10000015 	stw	zero,0(r2)
 8004c14:	10000115 	stw	zero,4(r2)
 8004c18:	10000215 	stw	zero,8(r2)
 8004c1c:	10c00315 	stw	r3,12(r2)
 8004c20:	10000415 	stw	zero,16(r2)
 8004c24:	10000515 	stw	zero,20(r2)
 8004c28:	10000615 	stw	zero,24(r2)
 8004c2c:	10001705 	stb	zero,92(r2)
 8004c30:	10001745 	stb	zero,93(r2)
 8004c34:	10001785 	stb	zero,94(r2)
 8004c38:	100017c5 	stb	zero,95(r2)
 8004c3c:	10001805 	stb	zero,96(r2)
 8004c40:	10001845 	stb	zero,97(r2)
 8004c44:	10001885 	stb	zero,98(r2)
 8004c48:	100018c5 	stb	zero,99(r2)
 8004c4c:	10000c15 	stw	zero,48(r2)
 8004c50:	10000d15 	stw	zero,52(r2)
 8004c54:	10001115 	stw	zero,68(r2)
 8004c58:	10001215 	stw	zero,72(r2)
 8004c5c:	dfc00217 	ldw	ra,8(sp)
 8004c60:	dc400117 	ldw	r17,4(sp)
 8004c64:	dc000017 	ldw	r16,0(sp)
 8004c68:	dec00304 	addi	sp,sp,12
 8004c6c:	f800283a 	ret
 8004c70:	80800017 	ldw	r2,0(r16)
 8004c74:	10000526 	beq	r2,zero,8004c8c <__sfp+0xdc>
 8004c78:	1021883a 	mov	r16,r2
 8004c7c:	003fd606 	br	8004bd8 <__sfp+0x28>
 8004c80:	8009883a 	mov	r4,r16
 8004c84:	80049c80 	call	80049c8 <__sinit.part.0>
 8004c88:	003fd206 	br	8004bd4 <__sfp+0x24>
 8004c8c:	01400104 	movi	r5,4
 8004c90:	8809883a 	mov	r4,r17
 8004c94:	8004b380 	call	8004b38 <__sfmoreglue>
 8004c98:	80800015 	stw	r2,0(r16)
 8004c9c:	103ff61e 	bne	r2,zero,8004c78 <__sfp+0xc8>
 8004ca0:	00c00304 	movi	r3,12
 8004ca4:	88c00015 	stw	r3,0(r17)
 8004ca8:	003fec06 	br	8004c5c <__sfp+0xac>

08004cac <_cleanup>:
 8004cac:	00820074 	movhi	r2,2049
 8004cb0:	11073c17 	ldw	r4,7408(r2)
 8004cb4:	01420074 	movhi	r5,2049
 8004cb8:	2961b104 	addi	r5,r5,-31036
 8004cbc:	80051c41 	jmpi	80051c4 <_fwalk_reent>

08004cc0 <__sinit>:
 8004cc0:	20800e17 	ldw	r2,56(r4)
 8004cc4:	10000126 	beq	r2,zero,8004ccc <__sinit+0xc>
 8004cc8:	f800283a 	ret
 8004ccc:	80049c81 	jmpi	80049c8 <__sinit.part.0>

08004cd0 <__sfp_lock_acquire>:
 8004cd0:	f800283a 	ret

08004cd4 <__sfp_lock_release>:
 8004cd4:	f800283a 	ret

08004cd8 <__sinit_lock_acquire>:
 8004cd8:	f800283a 	ret

08004cdc <__sinit_lock_release>:
 8004cdc:	f800283a 	ret

08004ce0 <__fp_lock_all>:
 8004ce0:	00820074 	movhi	r2,2049
 8004ce4:	11073d17 	ldw	r4,7412(r2)
 8004ce8:	01420034 	movhi	r5,2048
 8004cec:	29526d04 	addi	r5,r5,18868
 8004cf0:	80051201 	jmpi	8005120 <_fwalk>

08004cf4 <__fp_unlock_all>:
 8004cf4:	00820074 	movhi	r2,2049
 8004cf8:	11073d17 	ldw	r4,7412(r2)
 8004cfc:	01420034 	movhi	r5,2048
 8004d00:	2952cc04 	addi	r5,r5,19248
 8004d04:	80051201 	jmpi	8005120 <_fwalk>

08004d08 <_malloc_trim_r>:
 8004d08:	defffb04 	addi	sp,sp,-20
 8004d0c:	dcc00315 	stw	r19,12(sp)
 8004d10:	04c20074 	movhi	r19,2049
 8004d14:	dc800215 	stw	r18,8(sp)
 8004d18:	dc400115 	stw	r17,4(sp)
 8004d1c:	dc000015 	stw	r16,0(sp)
 8004d20:	dfc00415 	stw	ra,16(sp)
 8004d24:	2821883a 	mov	r16,r5
 8004d28:	9cc15c04 	addi	r19,r19,1392
 8004d2c:	2025883a 	mov	r18,r4
 8004d30:	800d82c0 	call	800d82c <__malloc_lock>
 8004d34:	98800217 	ldw	r2,8(r19)
 8004d38:	14400117 	ldw	r17,4(r2)
 8004d3c:	00bfff04 	movi	r2,-4
 8004d40:	88a2703a 	and	r17,r17,r2
 8004d44:	8c21c83a 	sub	r16,r17,r16
 8004d48:	8403fbc4 	addi	r16,r16,4079
 8004d4c:	8020d33a 	srli	r16,r16,12
 8004d50:	843fffc4 	addi	r16,r16,-1
 8004d54:	8020933a 	slli	r16,r16,12
 8004d58:	80840008 	cmpgei	r2,r16,4096
 8004d5c:	10000626 	beq	r2,zero,8004d78 <_malloc_trim_r+0x70>
 8004d60:	000b883a 	mov	r5,zero
 8004d64:	9009883a 	mov	r4,r18
 8004d68:	8006dec0 	call	8006dec <_sbrk_r>
 8004d6c:	98c00217 	ldw	r3,8(r19)
 8004d70:	1c47883a 	add	r3,r3,r17
 8004d74:	10c00a26 	beq	r2,r3,8004da0 <_malloc_trim_r+0x98>
 8004d78:	9009883a 	mov	r4,r18
 8004d7c:	800d8500 	call	800d850 <__malloc_unlock>
 8004d80:	0005883a 	mov	r2,zero
 8004d84:	dfc00417 	ldw	ra,16(sp)
 8004d88:	dcc00317 	ldw	r19,12(sp)
 8004d8c:	dc800217 	ldw	r18,8(sp)
 8004d90:	dc400117 	ldw	r17,4(sp)
 8004d94:	dc000017 	ldw	r16,0(sp)
 8004d98:	dec00504 	addi	sp,sp,20
 8004d9c:	f800283a 	ret
 8004da0:	040bc83a 	sub	r5,zero,r16
 8004da4:	9009883a 	mov	r4,r18
 8004da8:	8006dec0 	call	8006dec <_sbrk_r>
 8004dac:	10bfffd8 	cmpnei	r2,r2,-1
 8004db0:	10000d26 	beq	r2,zero,8004de8 <_malloc_trim_r+0xe0>
 8004db4:	00820074 	movhi	r2,2049
 8004db8:	108e4d17 	ldw	r2,14644(r2)
 8004dbc:	98c00217 	ldw	r3,8(r19)
 8004dc0:	8c23c83a 	sub	r17,r17,r16
 8004dc4:	8c400054 	ori	r17,r17,1
 8004dc8:	1421c83a 	sub	r16,r2,r16
 8004dcc:	1c400115 	stw	r17,4(r3)
 8004dd0:	00820074 	movhi	r2,2049
 8004dd4:	9009883a 	mov	r4,r18
 8004dd8:	140e4d15 	stw	r16,14644(r2)
 8004ddc:	800d8500 	call	800d850 <__malloc_unlock>
 8004de0:	00800044 	movi	r2,1
 8004de4:	003fe706 	br	8004d84 <_malloc_trim_r+0x7c>
 8004de8:	000b883a 	mov	r5,zero
 8004dec:	9009883a 	mov	r4,r18
 8004df0:	8006dec0 	call	8006dec <_sbrk_r>
 8004df4:	99000217 	ldw	r4,8(r19)
 8004df8:	1107c83a 	sub	r3,r2,r4
 8004dfc:	19400410 	cmplti	r5,r3,16
 8004e00:	283fdd1e 	bne	r5,zero,8004d78 <_malloc_trim_r+0x70>
 8004e04:	01420074 	movhi	r5,2049
 8004e08:	29473e17 	ldw	r5,7416(r5)
 8004e0c:	18c00054 	ori	r3,r3,1
 8004e10:	20c00115 	stw	r3,4(r4)
 8004e14:	1145c83a 	sub	r2,r2,r5
 8004e18:	01420074 	movhi	r5,2049
 8004e1c:	288e4d15 	stw	r2,14644(r5)
 8004e20:	003fd506 	br	8004d78 <_malloc_trim_r+0x70>

08004e24 <_free_r>:
 8004e24:	28004f26 	beq	r5,zero,8004f64 <_free_r+0x140>
 8004e28:	defffd04 	addi	sp,sp,-12
 8004e2c:	dc400115 	stw	r17,4(sp)
 8004e30:	dc000015 	stw	r16,0(sp)
 8004e34:	2023883a 	mov	r17,r4
 8004e38:	2821883a 	mov	r16,r5
 8004e3c:	dfc00215 	stw	ra,8(sp)
 8004e40:	800d82c0 	call	800d82c <__malloc_lock>
 8004e44:	81ffff17 	ldw	r7,-4(r16)
 8004e48:	00bfff84 	movi	r2,-2
 8004e4c:	80fffe04 	addi	r3,r16,-8
 8004e50:	3884703a 	and	r2,r7,r2
 8004e54:	01820074 	movhi	r6,2049
 8004e58:	1889883a 	add	r4,r3,r2
 8004e5c:	31815c04 	addi	r6,r6,1392
 8004e60:	21400117 	ldw	r5,4(r4)
 8004e64:	32000217 	ldw	r8,8(r6)
 8004e68:	027fff04 	movi	r9,-4
 8004e6c:	2a4a703a 	and	r5,r5,r9
 8004e70:	41006426 	beq	r8,r4,8005004 <_free_r+0x1e0>
 8004e74:	21400115 	stw	r5,4(r4)
 8004e78:	39c0004c 	andi	r7,r7,1
 8004e7c:	2151883a 	add	r8,r4,r5
 8004e80:	3800281e 	bne	r7,zero,8004f24 <_free_r+0x100>
 8004e84:	82bffe17 	ldw	r10,-8(r16)
 8004e88:	42000117 	ldw	r8,4(r8)
 8004e8c:	01c20074 	movhi	r7,2049
 8004e90:	1a87c83a 	sub	r3,r3,r10
 8004e94:	1a400217 	ldw	r9,8(r3)
 8004e98:	39c15e04 	addi	r7,r7,1400
 8004e9c:	1285883a 	add	r2,r2,r10
 8004ea0:	4200004c 	andi	r8,r8,1
 8004ea4:	49c04c26 	beq	r9,r7,8004fd8 <_free_r+0x1b4>
 8004ea8:	1a800317 	ldw	r10,12(r3)
 8004eac:	4a800315 	stw	r10,12(r9)
 8004eb0:	52400215 	stw	r9,8(r10)
 8004eb4:	40007126 	beq	r8,zero,800507c <_free_r+0x258>
 8004eb8:	11400054 	ori	r5,r2,1
 8004ebc:	19400115 	stw	r5,4(r3)
 8004ec0:	20800015 	stw	r2,0(r4)
 8004ec4:	11008028 	cmpgeui	r4,r2,512
 8004ec8:	20002c1e 	bne	r4,zero,8004f7c <_free_r+0x158>
 8004ecc:	1008d0fa 	srli	r4,r2,3
 8004ed0:	31c00117 	ldw	r7,4(r6)
 8004ed4:	20800044 	addi	r2,r4,1
 8004ed8:	200bd0ba 	srai	r5,r4,2
 8004edc:	100490fa 	slli	r2,r2,3
 8004ee0:	01000044 	movi	r4,1
 8004ee4:	2148983a 	sll	r4,r4,r5
 8004ee8:	3085883a 	add	r2,r6,r2
 8004eec:	11400017 	ldw	r5,0(r2)
 8004ef0:	21c8b03a 	or	r4,r4,r7
 8004ef4:	11fffe04 	addi	r7,r2,-8
 8004ef8:	19c00315 	stw	r7,12(r3)
 8004efc:	19400215 	stw	r5,8(r3)
 8004f00:	31000115 	stw	r4,4(r6)
 8004f04:	10c00015 	stw	r3,0(r2)
 8004f08:	28c00315 	stw	r3,12(r5)
 8004f0c:	8809883a 	mov	r4,r17
 8004f10:	dfc00217 	ldw	ra,8(sp)
 8004f14:	dc400117 	ldw	r17,4(sp)
 8004f18:	dc000017 	ldw	r16,0(sp)
 8004f1c:	dec00304 	addi	sp,sp,12
 8004f20:	800d8501 	jmpi	800d850 <__malloc_unlock>
 8004f24:	41c00117 	ldw	r7,4(r8)
 8004f28:	39c0004c 	andi	r7,r7,1
 8004f2c:	38000e1e 	bne	r7,zero,8004f68 <_free_r+0x144>
 8004f30:	01c20074 	movhi	r7,2049
 8004f34:	1145883a 	add	r2,r2,r5
 8004f38:	39c15e04 	addi	r7,r7,1400
 8004f3c:	21400217 	ldw	r5,8(r4)
 8004f40:	12400054 	ori	r9,r2,1
 8004f44:	1891883a 	add	r8,r3,r2
 8004f48:	29c05226 	beq	r5,r7,8005094 <_free_r+0x270>
 8004f4c:	21000317 	ldw	r4,12(r4)
 8004f50:	29000315 	stw	r4,12(r5)
 8004f54:	21400215 	stw	r5,8(r4)
 8004f58:	1a400115 	stw	r9,4(r3)
 8004f5c:	40800015 	stw	r2,0(r8)
 8004f60:	003fd806 	br	8004ec4 <_free_r+0xa0>
 8004f64:	f800283a 	ret
 8004f68:	11400054 	ori	r5,r2,1
 8004f6c:	817fff15 	stw	r5,-4(r16)
 8004f70:	20800015 	stw	r2,0(r4)
 8004f74:	11008028 	cmpgeui	r4,r2,512
 8004f78:	203fd426 	beq	r4,zero,8004ecc <_free_r+0xa8>
 8004f7c:	1008d27a 	srli	r4,r2,9
 8004f80:	21400168 	cmpgeui	r5,r4,5
 8004f84:	2800341e 	bne	r5,zero,8005058 <_free_r+0x234>
 8004f88:	1008d1ba 	srli	r4,r2,6
 8004f8c:	21c00e44 	addi	r7,r4,57
 8004f90:	380e90fa 	slli	r7,r7,3
 8004f94:	21400e04 	addi	r5,r4,56
 8004f98:	31cf883a 	add	r7,r6,r7
 8004f9c:	39000017 	ldw	r4,0(r7)
 8004fa0:	39fffe04 	addi	r7,r7,-8
 8004fa4:	39004226 	beq	r7,r4,80050b0 <_free_r+0x28c>
 8004fa8:	01bfff04 	movi	r6,-4
 8004fac:	21400117 	ldw	r5,4(r4)
 8004fb0:	298a703a 	and	r5,r5,r6
 8004fb4:	1140022e 	bgeu	r2,r5,8004fc0 <_free_r+0x19c>
 8004fb8:	21000217 	ldw	r4,8(r4)
 8004fbc:	393ffb1e 	bne	r7,r4,8004fac <_free_r+0x188>
 8004fc0:	21c00317 	ldw	r7,12(r4)
 8004fc4:	19c00315 	stw	r7,12(r3)
 8004fc8:	19000215 	stw	r4,8(r3)
 8004fcc:	38c00215 	stw	r3,8(r7)
 8004fd0:	20c00315 	stw	r3,12(r4)
 8004fd4:	003fcd06 	br	8004f0c <_free_r+0xe8>
 8004fd8:	40004d1e 	bne	r8,zero,8005110 <_free_r+0x2ec>
 8004fdc:	21800317 	ldw	r6,12(r4)
 8004fe0:	21000217 	ldw	r4,8(r4)
 8004fe4:	2885883a 	add	r2,r5,r2
 8004fe8:	11400054 	ori	r5,r2,1
 8004fec:	21800315 	stw	r6,12(r4)
 8004ff0:	31000215 	stw	r4,8(r6)
 8004ff4:	19400115 	stw	r5,4(r3)
 8004ff8:	1887883a 	add	r3,r3,r2
 8004ffc:	18800015 	stw	r2,0(r3)
 8005000:	003fc206 	br	8004f0c <_free_r+0xe8>
 8005004:	39c0004c 	andi	r7,r7,1
 8005008:	1145883a 	add	r2,r2,r5
 800500c:	3800071e 	bne	r7,zero,800502c <_free_r+0x208>
 8005010:	81fffe17 	ldw	r7,-8(r16)
 8005014:	19c7c83a 	sub	r3,r3,r7
 8005018:	19000317 	ldw	r4,12(r3)
 800501c:	19400217 	ldw	r5,8(r3)
 8005020:	11c5883a 	add	r2,r2,r7
 8005024:	29000315 	stw	r4,12(r5)
 8005028:	21400215 	stw	r5,8(r4)
 800502c:	01020074 	movhi	r4,2049
 8005030:	11400054 	ori	r5,r2,1
 8005034:	21073f17 	ldw	r4,7420(r4)
 8005038:	19400115 	stw	r5,4(r3)
 800503c:	30c00215 	stw	r3,8(r6)
 8005040:	113fb236 	bltu	r2,r4,8004f0c <_free_r+0xe8>
 8005044:	00820074 	movhi	r2,2049
 8005048:	114e4317 	ldw	r5,14604(r2)
 800504c:	8809883a 	mov	r4,r17
 8005050:	8004d080 	call	8004d08 <_malloc_trim_r>
 8005054:	003fad06 	br	8004f0c <_free_r+0xe8>
 8005058:	21400568 	cmpgeui	r5,r4,21
 800505c:	28000926 	beq	r5,zero,8005084 <_free_r+0x260>
 8005060:	21401568 	cmpgeui	r5,r4,85
 8005064:	2800191e 	bne	r5,zero,80050cc <_free_r+0x2a8>
 8005068:	1008d33a 	srli	r4,r2,12
 800506c:	21c01bc4 	addi	r7,r4,111
 8005070:	21401b84 	addi	r5,r4,110
 8005074:	380e90fa 	slli	r7,r7,3
 8005078:	003fc706 	br	8004f98 <_free_r+0x174>
 800507c:	1145883a 	add	r2,r2,r5
 8005080:	003fae06 	br	8004f3c <_free_r+0x118>
 8005084:	21c01704 	addi	r7,r4,92
 8005088:	214016c4 	addi	r5,r4,91
 800508c:	380e90fa 	slli	r7,r7,3
 8005090:	003fc106 	br	8004f98 <_free_r+0x174>
 8005094:	30c00515 	stw	r3,20(r6)
 8005098:	30c00415 	stw	r3,16(r6)
 800509c:	19c00315 	stw	r7,12(r3)
 80050a0:	19c00215 	stw	r7,8(r3)
 80050a4:	1a400115 	stw	r9,4(r3)
 80050a8:	40800015 	stw	r2,0(r8)
 80050ac:	003f9706 	br	8004f0c <_free_r+0xe8>
 80050b0:	280bd0ba 	srai	r5,r5,2
 80050b4:	00800044 	movi	r2,1
 80050b8:	32000117 	ldw	r8,4(r6)
 80050bc:	114a983a 	sll	r5,r2,r5
 80050c0:	2a0ab03a 	or	r5,r5,r8
 80050c4:	31400115 	stw	r5,4(r6)
 80050c8:	003fbe06 	br	8004fc4 <_free_r+0x1a0>
 80050cc:	21405568 	cmpgeui	r5,r4,341
 80050d0:	2800051e 	bne	r5,zero,80050e8 <_free_r+0x2c4>
 80050d4:	1008d3fa 	srli	r4,r2,15
 80050d8:	21c01e04 	addi	r7,r4,120
 80050dc:	21401dc4 	addi	r5,r4,119
 80050e0:	380e90fa 	slli	r7,r7,3
 80050e4:	003fac06 	br	8004f98 <_free_r+0x174>
 80050e8:	21015568 	cmpgeui	r4,r4,1365
 80050ec:	2000051e 	bne	r4,zero,8005104 <_free_r+0x2e0>
 80050f0:	1008d4ba 	srli	r4,r2,18
 80050f4:	21c01f44 	addi	r7,r4,125
 80050f8:	21401f04 	addi	r5,r4,124
 80050fc:	380e90fa 	slli	r7,r7,3
 8005100:	003fa506 	br	8004f98 <_free_r+0x174>
 8005104:	01c0fe04 	movi	r7,1016
 8005108:	01401f84 	movi	r5,126
 800510c:	003fa206 	br	8004f98 <_free_r+0x174>
 8005110:	11400054 	ori	r5,r2,1
 8005114:	19400115 	stw	r5,4(r3)
 8005118:	20800015 	stw	r2,0(r4)
 800511c:	003f7b06 	br	8004f0c <_free_r+0xe8>

08005120 <_fwalk>:
 8005120:	defffa04 	addi	sp,sp,-24
 8005124:	dc800215 	stw	r18,8(sp)
 8005128:	dfc00515 	stw	ra,20(sp)
 800512c:	dd000415 	stw	r20,16(sp)
 8005130:	dcc00315 	stw	r19,12(sp)
 8005134:	dc400115 	stw	r17,4(sp)
 8005138:	dc000015 	stw	r16,0(sp)
 800513c:	2480b804 	addi	r18,r4,736
 8005140:	90001e26 	beq	r18,zero,80051bc <_fwalk+0x9c>
 8005144:	2827883a 	mov	r19,r5
 8005148:	0029883a 	mov	r20,zero
 800514c:	94400117 	ldw	r17,4(r18)
 8005150:	94000217 	ldw	r16,8(r18)
 8005154:	8c7fffc4 	addi	r17,r17,-1
 8005158:	88000d16 	blt	r17,zero,8005190 <_fwalk+0x70>
 800515c:	8080030b 	ldhu	r2,12(r16)
 8005160:	8c7fffc4 	addi	r17,r17,-1
 8005164:	108000b0 	cmpltui	r2,r2,2
 8005168:	1000061e 	bne	r2,zero,8005184 <_fwalk+0x64>
 800516c:	8080038f 	ldh	r2,14(r16)
 8005170:	8009883a 	mov	r4,r16
 8005174:	10bfffe0 	cmpeqi	r2,r2,-1
 8005178:	1000021e 	bne	r2,zero,8005184 <_fwalk+0x64>
 800517c:	983ee83a 	callr	r19
 8005180:	a0a8b03a 	or	r20,r20,r2
 8005184:	88bfffd8 	cmpnei	r2,r17,-1
 8005188:	84001a04 	addi	r16,r16,104
 800518c:	103ff31e 	bne	r2,zero,800515c <_fwalk+0x3c>
 8005190:	94800017 	ldw	r18,0(r18)
 8005194:	903fed1e 	bne	r18,zero,800514c <_fwalk+0x2c>
 8005198:	a005883a 	mov	r2,r20
 800519c:	dfc00517 	ldw	ra,20(sp)
 80051a0:	dd000417 	ldw	r20,16(sp)
 80051a4:	dcc00317 	ldw	r19,12(sp)
 80051a8:	dc800217 	ldw	r18,8(sp)
 80051ac:	dc400117 	ldw	r17,4(sp)
 80051b0:	dc000017 	ldw	r16,0(sp)
 80051b4:	dec00604 	addi	sp,sp,24
 80051b8:	f800283a 	ret
 80051bc:	0029883a 	mov	r20,zero
 80051c0:	003ff506 	br	8005198 <_fwalk+0x78>

080051c4 <_fwalk_reent>:
 80051c4:	defff904 	addi	sp,sp,-28
 80051c8:	dc800215 	stw	r18,8(sp)
 80051cc:	dfc00615 	stw	ra,24(sp)
 80051d0:	dd400515 	stw	r21,20(sp)
 80051d4:	dd000415 	stw	r20,16(sp)
 80051d8:	dcc00315 	stw	r19,12(sp)
 80051dc:	dc400115 	stw	r17,4(sp)
 80051e0:	dc000015 	stw	r16,0(sp)
 80051e4:	2480b804 	addi	r18,r4,736
 80051e8:	90002126 	beq	r18,zero,8005270 <_fwalk_reent+0xac>
 80051ec:	2829883a 	mov	r20,r5
 80051f0:	2027883a 	mov	r19,r4
 80051f4:	002b883a 	mov	r21,zero
 80051f8:	94400117 	ldw	r17,4(r18)
 80051fc:	94000217 	ldw	r16,8(r18)
 8005200:	8c7fffc4 	addi	r17,r17,-1
 8005204:	88000e16 	blt	r17,zero,8005240 <_fwalk_reent+0x7c>
 8005208:	8080030b 	ldhu	r2,12(r16)
 800520c:	8c7fffc4 	addi	r17,r17,-1
 8005210:	108000b0 	cmpltui	r2,r2,2
 8005214:	1000071e 	bne	r2,zero,8005234 <_fwalk_reent+0x70>
 8005218:	8080038f 	ldh	r2,14(r16)
 800521c:	800b883a 	mov	r5,r16
 8005220:	9809883a 	mov	r4,r19
 8005224:	10bfffe0 	cmpeqi	r2,r2,-1
 8005228:	1000021e 	bne	r2,zero,8005234 <_fwalk_reent+0x70>
 800522c:	a03ee83a 	callr	r20
 8005230:	a8aab03a 	or	r21,r21,r2
 8005234:	88bfffd8 	cmpnei	r2,r17,-1
 8005238:	84001a04 	addi	r16,r16,104
 800523c:	103ff21e 	bne	r2,zero,8005208 <_fwalk_reent+0x44>
 8005240:	94800017 	ldw	r18,0(r18)
 8005244:	903fec1e 	bne	r18,zero,80051f8 <_fwalk_reent+0x34>
 8005248:	a805883a 	mov	r2,r21
 800524c:	dfc00617 	ldw	ra,24(sp)
 8005250:	dd400517 	ldw	r21,20(sp)
 8005254:	dd000417 	ldw	r20,16(sp)
 8005258:	dcc00317 	ldw	r19,12(sp)
 800525c:	dc800217 	ldw	r18,8(sp)
 8005260:	dc400117 	ldw	r17,4(sp)
 8005264:	dc000017 	ldw	r16,0(sp)
 8005268:	dec00704 	addi	sp,sp,28
 800526c:	f800283a 	ret
 8005270:	002b883a 	mov	r21,zero
 8005274:	003ff406 	br	8005248 <_fwalk_reent+0x84>

08005278 <__localeconv_l>:
 8005278:	20803c04 	addi	r2,r4,240
 800527c:	f800283a 	ret

08005280 <_localeconv_r>:
 8005280:	00820074 	movhi	r2,2049
 8005284:	10829a04 	addi	r2,r2,2664
 8005288:	f800283a 	ret

0800528c <localeconv>:
 800528c:	00820074 	movhi	r2,2049
 8005290:	10829a04 	addi	r2,r2,2664
 8005294:	f800283a 	ret

08005298 <__swhatbuf_r>:
 8005298:	deffea04 	addi	sp,sp,-88
 800529c:	dc001215 	stw	r16,72(sp)
 80052a0:	2821883a 	mov	r16,r5
 80052a4:	2940038f 	ldh	r5,14(r5)
 80052a8:	dc801415 	stw	r18,80(sp)
 80052ac:	dc401315 	stw	r17,76(sp)
 80052b0:	dfc01515 	stw	ra,84(sp)
 80052b4:	3023883a 	mov	r17,r6
 80052b8:	3825883a 	mov	r18,r7
 80052bc:	28001016 	blt	r5,zero,8005300 <__swhatbuf_r+0x68>
 80052c0:	d80d883a 	mov	r6,sp
 80052c4:	80089bc0 	call	80089bc <_fstat_r>
 80052c8:	10000d16 	blt	r2,zero,8005300 <__swhatbuf_r+0x68>
 80052cc:	d8c00117 	ldw	r3,4(sp)
 80052d0:	00820004 	movi	r2,2048
 80052d4:	18fc000c 	andi	r3,r3,61440
 80052d8:	18c80020 	cmpeqi	r3,r3,8192
 80052dc:	90c00015 	stw	r3,0(r18)
 80052e0:	00c10004 	movi	r3,1024
 80052e4:	88c00015 	stw	r3,0(r17)
 80052e8:	dfc01517 	ldw	ra,84(sp)
 80052ec:	dc801417 	ldw	r18,80(sp)
 80052f0:	dc401317 	ldw	r17,76(sp)
 80052f4:	dc001217 	ldw	r16,72(sp)
 80052f8:	dec01604 	addi	sp,sp,88
 80052fc:	f800283a 	ret
 8005300:	8080030b 	ldhu	r2,12(r16)
 8005304:	90000015 	stw	zero,0(r18)
 8005308:	1080200c 	andi	r2,r2,128
 800530c:	10000426 	beq	r2,zero,8005320 <__swhatbuf_r+0x88>
 8005310:	00801004 	movi	r2,64
 8005314:	88800015 	stw	r2,0(r17)
 8005318:	0005883a 	mov	r2,zero
 800531c:	003ff206 	br	80052e8 <__swhatbuf_r+0x50>
 8005320:	00810004 	movi	r2,1024
 8005324:	88800015 	stw	r2,0(r17)
 8005328:	0005883a 	mov	r2,zero
 800532c:	003fee06 	br	80052e8 <__swhatbuf_r+0x50>

08005330 <__smakebuf_r>:
 8005330:	28c0030b 	ldhu	r3,12(r5)
 8005334:	defffa04 	addi	sp,sp,-24
 8005338:	dc000215 	stw	r16,8(sp)
 800533c:	dfc00515 	stw	ra,20(sp)
 8005340:	dc800415 	stw	r18,16(sp)
 8005344:	dc400315 	stw	r17,12(sp)
 8005348:	18c0008c 	andi	r3,r3,2
 800534c:	2821883a 	mov	r16,r5
 8005350:	18000b26 	beq	r3,zero,8005380 <__smakebuf_r+0x50>
 8005354:	28c010c4 	addi	r3,r5,67
 8005358:	28c00015 	stw	r3,0(r5)
 800535c:	28c00415 	stw	r3,16(r5)
 8005360:	00c00044 	movi	r3,1
 8005364:	28c00515 	stw	r3,20(r5)
 8005368:	dfc00517 	ldw	ra,20(sp)
 800536c:	dc800417 	ldw	r18,16(sp)
 8005370:	dc400317 	ldw	r17,12(sp)
 8005374:	dc000217 	ldw	r16,8(sp)
 8005378:	dec00604 	addi	sp,sp,24
 800537c:	f800283a 	ret
 8005380:	d9c00104 	addi	r7,sp,4
 8005384:	d80d883a 	mov	r6,sp
 8005388:	2023883a 	mov	r17,r4
 800538c:	80052980 	call	8005298 <__swhatbuf_r>
 8005390:	1025883a 	mov	r18,r2
 8005394:	d8800117 	ldw	r2,4(sp)
 8005398:	1000131e 	bne	r2,zero,80053e8 <__smakebuf_r+0xb8>
 800539c:	d9400017 	ldw	r5,0(sp)
 80053a0:	8809883a 	mov	r4,r17
 80053a4:	800546c0 	call	800546c <_malloc_r>
 80053a8:	10001c26 	beq	r2,zero,800541c <__smakebuf_r+0xec>
 80053ac:	01020034 	movhi	r4,2048
 80053b0:	21126f04 	addi	r4,r4,18876
 80053b4:	80c0030b 	ldhu	r3,12(r16)
 80053b8:	89000f15 	stw	r4,60(r17)
 80053bc:	80800015 	stw	r2,0(r16)
 80053c0:	80800415 	stw	r2,16(r16)
 80053c4:	d8800017 	ldw	r2,0(sp)
 80053c8:	d9400117 	ldw	r5,4(sp)
 80053cc:	18c02014 	ori	r3,r3,128
 80053d0:	80c0030d 	sth	r3,12(r16)
 80053d4:	80800515 	stw	r2,20(r16)
 80053d8:	28001c1e 	bne	r5,zero,800544c <__smakebuf_r+0x11c>
 80053dc:	90c6b03a 	or	r3,r18,r3
 80053e0:	80c0030d 	sth	r3,12(r16)
 80053e4:	003fe006 	br	8005368 <__smakebuf_r+0x38>
 80053e8:	8140038f 	ldh	r5,14(r16)
 80053ec:	8809883a 	mov	r4,r17
 80053f0:	8008ef00 	call	8008ef0 <_isatty_r>
 80053f4:	103fe926 	beq	r2,zero,800539c <__smakebuf_r+0x6c>
 80053f8:	8080030b 	ldhu	r2,12(r16)
 80053fc:	80c010c4 	addi	r3,r16,67
 8005400:	80c00015 	stw	r3,0(r16)
 8005404:	10800054 	ori	r2,r2,1
 8005408:	8080030d 	sth	r2,12(r16)
 800540c:	00800044 	movi	r2,1
 8005410:	80c00415 	stw	r3,16(r16)
 8005414:	80800515 	stw	r2,20(r16)
 8005418:	003fe006 	br	800539c <__smakebuf_r+0x6c>
 800541c:	8080030b 	ldhu	r2,12(r16)
 8005420:	10c0800c 	andi	r3,r2,512
 8005424:	183fd01e 	bne	r3,zero,8005368 <__smakebuf_r+0x38>
 8005428:	10bfff0c 	andi	r2,r2,65532
 800542c:	10800094 	ori	r2,r2,2
 8005430:	80c010c4 	addi	r3,r16,67
 8005434:	8080030d 	sth	r2,12(r16)
 8005438:	00800044 	movi	r2,1
 800543c:	80c00015 	stw	r3,0(r16)
 8005440:	80c00415 	stw	r3,16(r16)
 8005444:	80800515 	stw	r2,20(r16)
 8005448:	003fc706 	br	8005368 <__smakebuf_r+0x38>
 800544c:	8140038f 	ldh	r5,14(r16)
 8005450:	8809883a 	mov	r4,r17
 8005454:	8008ef00 	call	8008ef0 <_isatty_r>
 8005458:	80c0030b 	ldhu	r3,12(r16)
 800545c:	103fdf26 	beq	r2,zero,80053dc <__smakebuf_r+0xac>
 8005460:	18ffff0c 	andi	r3,r3,65532
 8005464:	18c00054 	ori	r3,r3,1
 8005468:	003fdc06 	br	80053dc <__smakebuf_r+0xac>

0800546c <_malloc_r>:
 800546c:	defff604 	addi	sp,sp,-40
 8005470:	dc400115 	stw	r17,4(sp)
 8005474:	2c4002c4 	addi	r17,r5,11
 8005478:	dc800215 	stw	r18,8(sp)
 800547c:	dfc00915 	stw	ra,36(sp)
 8005480:	df000815 	stw	fp,32(sp)
 8005484:	ddc00715 	stw	r23,28(sp)
 8005488:	dd800615 	stw	r22,24(sp)
 800548c:	dd400515 	stw	r21,20(sp)
 8005490:	dd000415 	stw	r20,16(sp)
 8005494:	dcc00315 	stw	r19,12(sp)
 8005498:	dc000015 	stw	r16,0(sp)
 800549c:	888005e8 	cmpgeui	r2,r17,23
 80054a0:	2025883a 	mov	r18,r4
 80054a4:	10001b1e 	bne	r2,zero,8005514 <_malloc_r+0xa8>
 80054a8:	29400468 	cmpgeui	r5,r5,17
 80054ac:	2800951e 	bne	r5,zero,8005704 <_malloc_r+0x298>
 80054b0:	800d82c0 	call	800d82c <__malloc_lock>
 80054b4:	04400404 	movi	r17,16
 80054b8:	00800604 	movi	r2,24
 80054bc:	01800084 	movi	r6,2
 80054c0:	04c20074 	movhi	r19,2049
 80054c4:	9cc15c04 	addi	r19,r19,1392
 80054c8:	9885883a 	add	r2,r19,r2
 80054cc:	14000117 	ldw	r16,4(r2)
 80054d0:	10fffe04 	addi	r3,r2,-8
 80054d4:	80c09e26 	beq	r16,r3,8005750 <_malloc_r+0x2e4>
 80054d8:	80800117 	ldw	r2,4(r16)
 80054dc:	81000317 	ldw	r4,12(r16)
 80054e0:	00ffff04 	movi	r3,-4
 80054e4:	10c4703a 	and	r2,r2,r3
 80054e8:	81400217 	ldw	r5,8(r16)
 80054ec:	8085883a 	add	r2,r16,r2
 80054f0:	10c00117 	ldw	r3,4(r2)
 80054f4:	29000315 	stw	r4,12(r5)
 80054f8:	21400215 	stw	r5,8(r4)
 80054fc:	18c00054 	ori	r3,r3,1
 8005500:	10c00115 	stw	r3,4(r2)
 8005504:	9009883a 	mov	r4,r18
 8005508:	800d8500 	call	800d850 <__malloc_unlock>
 800550c:	80800204 	addi	r2,r16,8
 8005510:	00007f06 	br	8005710 <_malloc_r+0x2a4>
 8005514:	00bffe04 	movi	r2,-8
 8005518:	88a2703a 	and	r17,r17,r2
 800551c:	88007916 	blt	r17,zero,8005704 <_malloc_r+0x298>
 8005520:	89407836 	bltu	r17,r5,8005704 <_malloc_r+0x298>
 8005524:	800d82c0 	call	800d82c <__malloc_lock>
 8005528:	88807e28 	cmpgeui	r2,r17,504
 800552c:	10013326 	beq	r2,zero,80059fc <_malloc_r+0x590>
 8005530:	8804d27a 	srli	r2,r17,9
 8005534:	10008226 	beq	r2,zero,8005740 <_malloc_r+0x2d4>
 8005538:	10c00168 	cmpgeui	r3,r2,5
 800553c:	1801151e 	bne	r3,zero,8005994 <_malloc_r+0x528>
 8005540:	8804d1ba 	srli	r2,r17,6
 8005544:	11800e44 	addi	r6,r2,57
 8005548:	300a90fa 	slli	r5,r6,3
 800554c:	12000e04 	addi	r8,r2,56
 8005550:	04c20074 	movhi	r19,2049
 8005554:	9cc15c04 	addi	r19,r19,1392
 8005558:	994b883a 	add	r5,r19,r5
 800555c:	2c000117 	ldw	r16,4(r5)
 8005560:	297ffe04 	addi	r5,r5,-8
 8005564:	2c001126 	beq	r5,r16,80055ac <_malloc_r+0x140>
 8005568:	80800117 	ldw	r2,4(r16)
 800556c:	00ffff04 	movi	r3,-4
 8005570:	10c4703a 	and	r2,r2,r3
 8005574:	1447c83a 	sub	r3,r2,r17
 8005578:	19000408 	cmpgei	r4,r3,16
 800557c:	2000e81e 	bne	r4,zero,8005920 <_malloc_r+0x4b4>
 8005580:	1800e90e 	bge	r3,zero,8005928 <_malloc_r+0x4bc>
 8005584:	01ffff04 	movi	r7,-4
 8005588:	00000606 	br	80055a4 <_malloc_r+0x138>
 800558c:	80800117 	ldw	r2,4(r16)
 8005590:	11c4703a 	and	r2,r2,r7
 8005594:	1447c83a 	sub	r3,r2,r17
 8005598:	19000408 	cmpgei	r4,r3,16
 800559c:	2000e01e 	bne	r4,zero,8005920 <_malloc_r+0x4b4>
 80055a0:	1800e10e 	bge	r3,zero,8005928 <_malloc_r+0x4bc>
 80055a4:	84000317 	ldw	r16,12(r16)
 80055a8:	2c3ff81e 	bne	r5,r16,800558c <_malloc_r+0x120>
 80055ac:	9c000417 	ldw	r16,16(r19)
 80055b0:	02020074 	movhi	r8,2049
 80055b4:	42015e04 	addi	r8,r8,1400
 80055b8:	82006c26 	beq	r16,r8,800576c <_malloc_r+0x300>
 80055bc:	80c00117 	ldw	r3,4(r16)
 80055c0:	00bfff04 	movi	r2,-4
 80055c4:	1884703a 	and	r2,r3,r2
 80055c8:	1447c83a 	sub	r3,r2,r17
 80055cc:	19000410 	cmplti	r4,r3,16
 80055d0:	20011526 	beq	r4,zero,8005a28 <_malloc_r+0x5bc>
 80055d4:	9a000515 	stw	r8,20(r19)
 80055d8:	9a000415 	stw	r8,16(r19)
 80055dc:	18010a0e 	bge	r3,zero,8005a08 <_malloc_r+0x59c>
 80055e0:	10c08028 	cmpgeui	r3,r2,512
 80055e4:	1800d21e 	bne	r3,zero,8005930 <_malloc_r+0x4c4>
 80055e8:	1004d0fa 	srli	r2,r2,3
 80055ec:	99400117 	ldw	r5,4(r19)
 80055f0:	10c00044 	addi	r3,r2,1
 80055f4:	1009d0ba 	srai	r4,r2,2
 80055f8:	180690fa 	slli	r3,r3,3
 80055fc:	00800044 	movi	r2,1
 8005600:	1104983a 	sll	r2,r2,r4
 8005604:	98c7883a 	add	r3,r19,r3
 8005608:	19000017 	ldw	r4,0(r3)
 800560c:	1144b03a 	or	r2,r2,r5
 8005610:	197ffe04 	addi	r5,r3,-8
 8005614:	81400315 	stw	r5,12(r16)
 8005618:	81000215 	stw	r4,8(r16)
 800561c:	98800115 	stw	r2,4(r19)
 8005620:	1c000015 	stw	r16,0(r3)
 8005624:	24000315 	stw	r16,12(r4)
 8005628:	3007d0ba 	srai	r3,r6,2
 800562c:	01000044 	movi	r4,1
 8005630:	20c8983a 	sll	r4,r4,r3
 8005634:	11005236 	bltu	r2,r4,8005780 <_malloc_r+0x314>
 8005638:	2086703a 	and	r3,r4,r2
 800563c:	18000a1e 	bne	r3,zero,8005668 <_malloc_r+0x1fc>
 8005640:	00ffff04 	movi	r3,-4
 8005644:	2109883a 	add	r4,r4,r4
 8005648:	30cc703a 	and	r6,r6,r3
 800564c:	2086703a 	and	r3,r4,r2
 8005650:	31800104 	addi	r6,r6,4
 8005654:	1800041e 	bne	r3,zero,8005668 <_malloc_r+0x1fc>
 8005658:	2109883a 	add	r4,r4,r4
 800565c:	2086703a 	and	r3,r4,r2
 8005660:	31800104 	addi	r6,r6,4
 8005664:	183ffc26 	beq	r3,zero,8005658 <_malloc_r+0x1ec>
 8005668:	027fff04 	movi	r9,-4
 800566c:	301490fa 	slli	r10,r6,3
 8005670:	3017883a 	mov	r11,r6
 8005674:	9a95883a 	add	r10,r19,r10
 8005678:	500f883a 	mov	r7,r10
 800567c:	3c000317 	ldw	r16,12(r7)
 8005680:	3c00cd26 	beq	r7,r16,80059b8 <_malloc_r+0x54c>
 8005684:	80800117 	ldw	r2,4(r16)
 8005688:	1244703a 	and	r2,r2,r9
 800568c:	1447c83a 	sub	r3,r2,r17
 8005690:	19400408 	cmpgei	r5,r3,16
 8005694:	2800081e 	bne	r5,zero,80056b8 <_malloc_r+0x24c>
 8005698:	1800cc0e 	bge	r3,zero,80059cc <_malloc_r+0x560>
 800569c:	84000317 	ldw	r16,12(r16)
 80056a0:	3c00c526 	beq	r7,r16,80059b8 <_malloc_r+0x54c>
 80056a4:	80800117 	ldw	r2,4(r16)
 80056a8:	1244703a 	and	r2,r2,r9
 80056ac:	1447c83a 	sub	r3,r2,r17
 80056b0:	19400410 	cmplti	r5,r3,16
 80056b4:	283ff81e 	bne	r5,zero,8005698 <_malloc_r+0x22c>
 80056b8:	81000317 	ldw	r4,12(r16)
 80056bc:	81400217 	ldw	r5,8(r16)
 80056c0:	89800054 	ori	r6,r17,1
 80056c4:	81800115 	stw	r6,4(r16)
 80056c8:	29000315 	stw	r4,12(r5)
 80056cc:	21400215 	stw	r5,8(r4)
 80056d0:	8463883a 	add	r17,r16,r17
 80056d4:	9c400515 	stw	r17,20(r19)
 80056d8:	9c400415 	stw	r17,16(r19)
 80056dc:	19000054 	ori	r4,r3,1
 80056e0:	89000115 	stw	r4,4(r17)
 80056e4:	8085883a 	add	r2,r16,r2
 80056e8:	8a000315 	stw	r8,12(r17)
 80056ec:	8a000215 	stw	r8,8(r17)
 80056f0:	10c00015 	stw	r3,0(r2)
 80056f4:	9009883a 	mov	r4,r18
 80056f8:	800d8500 	call	800d850 <__malloc_unlock>
 80056fc:	80800204 	addi	r2,r16,8
 8005700:	00000306 	br	8005710 <_malloc_r+0x2a4>
 8005704:	00800304 	movi	r2,12
 8005708:	90800015 	stw	r2,0(r18)
 800570c:	0005883a 	mov	r2,zero
 8005710:	dfc00917 	ldw	ra,36(sp)
 8005714:	df000817 	ldw	fp,32(sp)
 8005718:	ddc00717 	ldw	r23,28(sp)
 800571c:	dd800617 	ldw	r22,24(sp)
 8005720:	dd400517 	ldw	r21,20(sp)
 8005724:	dd000417 	ldw	r20,16(sp)
 8005728:	dcc00317 	ldw	r19,12(sp)
 800572c:	dc800217 	ldw	r18,8(sp)
 8005730:	dc400117 	ldw	r17,4(sp)
 8005734:	dc000017 	ldw	r16,0(sp)
 8005738:	dec00a04 	addi	sp,sp,40
 800573c:	f800283a 	ret
 8005740:	01408004 	movi	r5,512
 8005744:	01801004 	movi	r6,64
 8005748:	02000fc4 	movi	r8,63
 800574c:	003f8006 	br	8005550 <_malloc_r+0xe4>
 8005750:	14000317 	ldw	r16,12(r2)
 8005754:	31800084 	addi	r6,r6,2
 8005758:	143f5f1e 	bne	r2,r16,80054d8 <_malloc_r+0x6c>
 800575c:	9c000417 	ldw	r16,16(r19)
 8005760:	02020074 	movhi	r8,2049
 8005764:	42015e04 	addi	r8,r8,1400
 8005768:	823f941e 	bne	r16,r8,80055bc <_malloc_r+0x150>
 800576c:	3007d0ba 	srai	r3,r6,2
 8005770:	01000044 	movi	r4,1
 8005774:	98800117 	ldw	r2,4(r19)
 8005778:	20c8983a 	sll	r4,r4,r3
 800577c:	113fae2e 	bgeu	r2,r4,8005638 <_malloc_r+0x1cc>
 8005780:	9c000217 	ldw	r16,8(r19)
 8005784:	00bfff04 	movi	r2,-4
 8005788:	85000117 	ldw	r20,4(r16)
 800578c:	a0ac703a 	and	r22,r20,r2
 8005790:	b4400336 	bltu	r22,r17,80057a0 <_malloc_r+0x334>
 8005794:	b445c83a 	sub	r2,r22,r17
 8005798:	10c00408 	cmpgei	r3,r2,16
 800579c:	1800561e 	bne	r3,zero,80058f8 <_malloc_r+0x48c>
 80057a0:	00820074 	movhi	r2,2049
 80057a4:	10873e17 	ldw	r2,7416(r2)
 80057a8:	00c20074 	movhi	r3,2049
 80057ac:	1d0e4317 	ldw	r20,14604(r3)
 80057b0:	10bfffd8 	cmpnei	r2,r2,-1
 80057b4:	85ab883a 	add	r21,r16,r22
 80057b8:	8d29883a 	add	r20,r17,r20
 80057bc:	1000c826 	beq	r2,zero,8005ae0 <_malloc_r+0x674>
 80057c0:	a50403c4 	addi	r20,r20,4111
 80057c4:	00bc0004 	movi	r2,-4096
 80057c8:	a0a8703a 	and	r20,r20,r2
 80057cc:	a00b883a 	mov	r5,r20
 80057d0:	9009883a 	mov	r4,r18
 80057d4:	8006dec0 	call	8006dec <_sbrk_r>
 80057d8:	102f883a 	mov	r23,r2
 80057dc:	10bfffd8 	cmpnei	r2,r2,-1
 80057e0:	10009a26 	beq	r2,zero,8005a4c <_malloc_r+0x5e0>
 80057e4:	bd409836 	bltu	r23,r21,8005a48 <_malloc_r+0x5dc>
 80057e8:	00820074 	movhi	r2,2049
 80057ec:	108e4d17 	ldw	r2,14644(r2)
 80057f0:	00c20074 	movhi	r3,2049
 80057f4:	a085883a 	add	r2,r20,r2
 80057f8:	188e4d15 	stw	r2,14644(r3)
 80057fc:	1007883a 	mov	r3,r2
 8005800:	adc0dd26 	beq	r21,r23,8005b78 <_malloc_r+0x70c>
 8005804:	00820074 	movhi	r2,2049
 8005808:	10873e17 	ldw	r2,7416(r2)
 800580c:	10bfffd8 	cmpnei	r2,r2,-1
 8005810:	1000e026 	beq	r2,zero,8005b94 <_malloc_r+0x728>
 8005814:	bd6bc83a 	sub	r21,r23,r21
 8005818:	a8c7883a 	add	r3,r21,r3
 800581c:	00820074 	movhi	r2,2049
 8005820:	10ce4d15 	stw	r3,14644(r2)
 8005824:	bf0001cc 	andi	fp,r23,7
 8005828:	e000b626 	beq	fp,zero,8005b04 <_malloc_r+0x698>
 800582c:	bf2fc83a 	sub	r23,r23,fp
 8005830:	bdc00204 	addi	r23,r23,8
 8005834:	00840204 	movi	r2,4104
 8005838:	1705c83a 	sub	r2,r2,fp
 800583c:	bd29883a 	add	r20,r23,r20
 8005840:	1505c83a 	sub	r2,r2,r20
 8005844:	1543ffcc 	andi	r21,r2,4095
 8005848:	a80b883a 	mov	r5,r21
 800584c:	9009883a 	mov	r4,r18
 8005850:	8006dec0 	call	8006dec <_sbrk_r>
 8005854:	10ffffe0 	cmpeqi	r3,r2,-1
 8005858:	1800e41e 	bne	r3,zero,8005bec <_malloc_r+0x780>
 800585c:	15c5c83a 	sub	r2,r2,r23
 8005860:	1569883a 	add	r20,r2,r21
 8005864:	00820074 	movhi	r2,2049
 8005868:	108e4d17 	ldw	r2,14644(r2)
 800586c:	9dc00215 	stw	r23,8(r19)
 8005870:	a5000054 	ori	r20,r20,1
 8005874:	a885883a 	add	r2,r21,r2
 8005878:	00c20074 	movhi	r3,2049
 800587c:	188e4d15 	stw	r2,14644(r3)
 8005880:	bd000115 	stw	r20,4(r23)
 8005884:	84c0c626 	beq	r16,r19,8005ba0 <_malloc_r+0x734>
 8005888:	b0c00428 	cmpgeui	r3,r22,16
 800588c:	1800c626 	beq	r3,zero,8005ba8 <_malloc_r+0x73c>
 8005890:	81000117 	ldw	r4,4(r16)
 8005894:	017ffe04 	movi	r5,-8
 8005898:	b0fffd04 	addi	r3,r22,-12
 800589c:	1946703a 	and	r3,r3,r5
 80058a0:	2100004c 	andi	r4,r4,1
 80058a4:	20c8b03a 	or	r4,r4,r3
 80058a8:	81000115 	stw	r4,4(r16)
 80058ac:	01400144 	movi	r5,5
 80058b0:	80c9883a 	add	r4,r16,r3
 80058b4:	21400115 	stw	r5,4(r4)
 80058b8:	21400215 	stw	r5,8(r4)
 80058bc:	18c00428 	cmpgeui	r3,r3,16
 80058c0:	1800cf1e 	bne	r3,zero,8005c00 <_malloc_r+0x794>
 80058c4:	bd000117 	ldw	r20,4(r23)
 80058c8:	b821883a 	mov	r16,r23
 80058cc:	00c20074 	movhi	r3,2049
 80058d0:	18ce4217 	ldw	r3,14600(r3)
 80058d4:	1880022e 	bgeu	r3,r2,80058e0 <_malloc_r+0x474>
 80058d8:	00c20074 	movhi	r3,2049
 80058dc:	188e4215 	stw	r2,14600(r3)
 80058e0:	00c20074 	movhi	r3,2049
 80058e4:	18ce4117 	ldw	r3,14596(r3)
 80058e8:	18805a2e 	bgeu	r3,r2,8005a54 <_malloc_r+0x5e8>
 80058ec:	00c20074 	movhi	r3,2049
 80058f0:	188e4115 	stw	r2,14596(r3)
 80058f4:	00005706 	br	8005a54 <_malloc_r+0x5e8>
 80058f8:	88c00054 	ori	r3,r17,1
 80058fc:	80c00115 	stw	r3,4(r16)
 8005900:	8463883a 	add	r17,r16,r17
 8005904:	10800054 	ori	r2,r2,1
 8005908:	9c400215 	stw	r17,8(r19)
 800590c:	88800115 	stw	r2,4(r17)
 8005910:	9009883a 	mov	r4,r18
 8005914:	800d8500 	call	800d850 <__malloc_unlock>
 8005918:	80800204 	addi	r2,r16,8
 800591c:	003f7c06 	br	8005710 <_malloc_r+0x2a4>
 8005920:	400d883a 	mov	r6,r8
 8005924:	003f2106 	br	80055ac <_malloc_r+0x140>
 8005928:	81000317 	ldw	r4,12(r16)
 800592c:	003eee06 	br	80054e8 <_malloc_r+0x7c>
 8005930:	1006d27a 	srli	r3,r2,9
 8005934:	19000168 	cmpgeui	r4,r3,5
 8005938:	20003e26 	beq	r4,zero,8005a34 <_malloc_r+0x5c8>
 800593c:	19000568 	cmpgeui	r4,r3,21
 8005940:	20007a1e 	bne	r4,zero,8005b2c <_malloc_r+0x6c0>
 8005944:	19401704 	addi	r5,r3,92
 8005948:	280a90fa 	slli	r5,r5,3
 800594c:	190016c4 	addi	r4,r3,91
 8005950:	994b883a 	add	r5,r19,r5
 8005954:	28c00017 	ldw	r3,0(r5)
 8005958:	297ffe04 	addi	r5,r5,-8
 800595c:	28c06226 	beq	r5,r3,8005ae8 <_malloc_r+0x67c>
 8005960:	01ffff04 	movi	r7,-4
 8005964:	19000117 	ldw	r4,4(r3)
 8005968:	21c8703a 	and	r4,r4,r7
 800596c:	1100022e 	bgeu	r2,r4,8005978 <_malloc_r+0x50c>
 8005970:	18c00217 	ldw	r3,8(r3)
 8005974:	28fffb1e 	bne	r5,r3,8005964 <_malloc_r+0x4f8>
 8005978:	19400317 	ldw	r5,12(r3)
 800597c:	98800117 	ldw	r2,4(r19)
 8005980:	81400315 	stw	r5,12(r16)
 8005984:	80c00215 	stw	r3,8(r16)
 8005988:	2c000215 	stw	r16,8(r5)
 800598c:	1c000315 	stw	r16,12(r3)
 8005990:	003f2506 	br	8005628 <_malloc_r+0x1bc>
 8005994:	10c00568 	cmpgeui	r3,r2,21
 8005998:	18003826 	beq	r3,zero,8005a7c <_malloc_r+0x610>
 800599c:	10c01568 	cmpgeui	r3,r2,85
 80059a0:	1800691e 	bne	r3,zero,8005b48 <_malloc_r+0x6dc>
 80059a4:	8804d33a 	srli	r2,r17,12
 80059a8:	11801bc4 	addi	r6,r2,111
 80059ac:	12001b84 	addi	r8,r2,110
 80059b0:	300a90fa 	slli	r5,r6,3
 80059b4:	003ee606 	br	8005550 <_malloc_r+0xe4>
 80059b8:	5ac00044 	addi	r11,r11,1
 80059bc:	588000cc 	andi	r2,r11,3
 80059c0:	39c00204 	addi	r7,r7,8
 80059c4:	103f2d1e 	bne	r2,zero,800567c <_malloc_r+0x210>
 80059c8:	00003306 	br	8005a98 <_malloc_r+0x62c>
 80059cc:	8085883a 	add	r2,r16,r2
 80059d0:	10c00117 	ldw	r3,4(r2)
 80059d4:	81000317 	ldw	r4,12(r16)
 80059d8:	81400217 	ldw	r5,8(r16)
 80059dc:	18c00054 	ori	r3,r3,1
 80059e0:	10c00115 	stw	r3,4(r2)
 80059e4:	29000315 	stw	r4,12(r5)
 80059e8:	21400215 	stw	r5,8(r4)
 80059ec:	9009883a 	mov	r4,r18
 80059f0:	800d8500 	call	800d850 <__malloc_unlock>
 80059f4:	80800204 	addi	r2,r16,8
 80059f8:	003f4506 	br	8005710 <_malloc_r+0x2a4>
 80059fc:	880cd0fa 	srli	r6,r17,3
 8005a00:	88800204 	addi	r2,r17,8
 8005a04:	003eae06 	br	80054c0 <_malloc_r+0x54>
 8005a08:	8085883a 	add	r2,r16,r2
 8005a0c:	10c00117 	ldw	r3,4(r2)
 8005a10:	9009883a 	mov	r4,r18
 8005a14:	18c00054 	ori	r3,r3,1
 8005a18:	10c00115 	stw	r3,4(r2)
 8005a1c:	800d8500 	call	800d850 <__malloc_unlock>
 8005a20:	80800204 	addi	r2,r16,8
 8005a24:	003f3a06 	br	8005710 <_malloc_r+0x2a4>
 8005a28:	89000054 	ori	r4,r17,1
 8005a2c:	81000115 	stw	r4,4(r16)
 8005a30:	003f2706 	br	80056d0 <_malloc_r+0x264>
 8005a34:	1006d1ba 	srli	r3,r2,6
 8005a38:	19400e44 	addi	r5,r3,57
 8005a3c:	19000e04 	addi	r4,r3,56
 8005a40:	280a90fa 	slli	r5,r5,3
 8005a44:	003fc206 	br	8005950 <_malloc_r+0x4e4>
 8005a48:	84c04626 	beq	r16,r19,8005b64 <_malloc_r+0x6f8>
 8005a4c:	9c000217 	ldw	r16,8(r19)
 8005a50:	85000117 	ldw	r20,4(r16)
 8005a54:	00bfff04 	movi	r2,-4
 8005a58:	a0a8703a 	and	r20,r20,r2
 8005a5c:	a445c83a 	sub	r2,r20,r17
 8005a60:	a4400236 	bltu	r20,r17,8005a6c <_malloc_r+0x600>
 8005a64:	10c00408 	cmpgei	r3,r2,16
 8005a68:	183fa31e 	bne	r3,zero,80058f8 <_malloc_r+0x48c>
 8005a6c:	9009883a 	mov	r4,r18
 8005a70:	800d8500 	call	800d850 <__malloc_unlock>
 8005a74:	0005883a 	mov	r2,zero
 8005a78:	003f2506 	br	8005710 <_malloc_r+0x2a4>
 8005a7c:	11801704 	addi	r6,r2,92
 8005a80:	120016c4 	addi	r8,r2,91
 8005a84:	300a90fa 	slli	r5,r6,3
 8005a88:	003eb106 	br	8005550 <_malloc_r+0xe4>
 8005a8c:	50800217 	ldw	r2,8(r10)
 8005a90:	31bfffc4 	addi	r6,r6,-1
 8005a94:	1280701e 	bne	r2,r10,8005c58 <_malloc_r+0x7ec>
 8005a98:	308000cc 	andi	r2,r6,3
 8005a9c:	52bffe04 	addi	r10,r10,-8
 8005aa0:	103ffa1e 	bne	r2,zero,8005a8c <_malloc_r+0x620>
 8005aa4:	98c00117 	ldw	r3,4(r19)
 8005aa8:	0104303a 	nor	r2,zero,r4
 8005aac:	10c4703a 	and	r2,r2,r3
 8005ab0:	98800115 	stw	r2,4(r19)
 8005ab4:	2109883a 	add	r4,r4,r4
 8005ab8:	113f3136 	bltu	r2,r4,8005780 <_malloc_r+0x314>
 8005abc:	203f3026 	beq	r4,zero,8005780 <_malloc_r+0x314>
 8005ac0:	2086703a 	and	r3,r4,r2
 8005ac4:	1800041e 	bne	r3,zero,8005ad8 <_malloc_r+0x66c>
 8005ac8:	2109883a 	add	r4,r4,r4
 8005acc:	2086703a 	and	r3,r4,r2
 8005ad0:	5ac00104 	addi	r11,r11,4
 8005ad4:	183ffc26 	beq	r3,zero,8005ac8 <_malloc_r+0x65c>
 8005ad8:	580d883a 	mov	r6,r11
 8005adc:	003ee306 	br	800566c <_malloc_r+0x200>
 8005ae0:	a5000404 	addi	r20,r20,16
 8005ae4:	003f3906 	br	80057cc <_malloc_r+0x360>
 8005ae8:	2009d0ba 	srai	r4,r4,2
 8005aec:	00800044 	movi	r2,1
 8005af0:	99c00117 	ldw	r7,4(r19)
 8005af4:	1104983a 	sll	r2,r2,r4
 8005af8:	11c4b03a 	or	r2,r2,r7
 8005afc:	98800115 	stw	r2,4(r19)
 8005b00:	003f9f06 	br	8005980 <_malloc_r+0x514>
 8005b04:	bd05883a 	add	r2,r23,r20
 8005b08:	0085c83a 	sub	r2,zero,r2
 8005b0c:	1543ffcc 	andi	r21,r2,4095
 8005b10:	a80b883a 	mov	r5,r21
 8005b14:	9009883a 	mov	r4,r18
 8005b18:	8006dec0 	call	8006dec <_sbrk_r>
 8005b1c:	10ffffe0 	cmpeqi	r3,r2,-1
 8005b20:	183f4e26 	beq	r3,zero,800585c <_malloc_r+0x3f0>
 8005b24:	002b883a 	mov	r21,zero
 8005b28:	003f4e06 	br	8005864 <_malloc_r+0x3f8>
 8005b2c:	19001568 	cmpgeui	r4,r3,85
 8005b30:	2000201e 	bne	r4,zero,8005bb4 <_malloc_r+0x748>
 8005b34:	1006d33a 	srli	r3,r2,12
 8005b38:	19401bc4 	addi	r5,r3,111
 8005b3c:	19001b84 	addi	r4,r3,110
 8005b40:	280a90fa 	slli	r5,r5,3
 8005b44:	003f8206 	br	8005950 <_malloc_r+0x4e4>
 8005b48:	10c05568 	cmpgeui	r3,r2,341
 8005b4c:	1800201e 	bne	r3,zero,8005bd0 <_malloc_r+0x764>
 8005b50:	8804d3fa 	srli	r2,r17,15
 8005b54:	11801e04 	addi	r6,r2,120
 8005b58:	12001dc4 	addi	r8,r2,119
 8005b5c:	300a90fa 	slli	r5,r6,3
 8005b60:	003e7b06 	br	8005550 <_malloc_r+0xe4>
 8005b64:	00820074 	movhi	r2,2049
 8005b68:	10ce4d17 	ldw	r3,14644(r2)
 8005b6c:	a0c7883a 	add	r3,r20,r3
 8005b70:	10ce4d15 	stw	r3,14644(r2)
 8005b74:	003f2306 	br	8005804 <_malloc_r+0x398>
 8005b78:	a903ffcc 	andi	r4,r21,4095
 8005b7c:	203f211e 	bne	r4,zero,8005804 <_malloc_r+0x398>
 8005b80:	9c000217 	ldw	r16,8(r19)
 8005b84:	b529883a 	add	r20,r22,r20
 8005b88:	a5000054 	ori	r20,r20,1
 8005b8c:	85000115 	stw	r20,4(r16)
 8005b90:	003f4e06 	br	80058cc <_malloc_r+0x460>
 8005b94:	00820074 	movhi	r2,2049
 8005b98:	15c73e15 	stw	r23,7416(r2)
 8005b9c:	003f2106 	br	8005824 <_malloc_r+0x3b8>
 8005ba0:	b821883a 	mov	r16,r23
 8005ba4:	003f4906 	br	80058cc <_malloc_r+0x460>
 8005ba8:	00800044 	movi	r2,1
 8005bac:	b8800115 	stw	r2,4(r23)
 8005bb0:	003fae06 	br	8005a6c <_malloc_r+0x600>
 8005bb4:	19005568 	cmpgeui	r4,r3,341
 8005bb8:	2000191e 	bne	r4,zero,8005c20 <_malloc_r+0x7b4>
 8005bbc:	1006d3fa 	srli	r3,r2,15
 8005bc0:	19401e04 	addi	r5,r3,120
 8005bc4:	19001dc4 	addi	r4,r3,119
 8005bc8:	280a90fa 	slli	r5,r5,3
 8005bcc:	003f6006 	br	8005950 <_malloc_r+0x4e4>
 8005bd0:	10815568 	cmpgeui	r2,r2,1365
 8005bd4:	1000191e 	bne	r2,zero,8005c3c <_malloc_r+0x7d0>
 8005bd8:	8804d4ba 	srli	r2,r17,18
 8005bdc:	11801f44 	addi	r6,r2,125
 8005be0:	12001f04 	addi	r8,r2,124
 8005be4:	300a90fa 	slli	r5,r6,3
 8005be8:	003e5906 	br	8005550 <_malloc_r+0xe4>
 8005bec:	e73ffe04 	addi	fp,fp,-8
 8005bf0:	a729883a 	add	r20,r20,fp
 8005bf4:	a5e9c83a 	sub	r20,r20,r23
 8005bf8:	002b883a 	mov	r21,zero
 8005bfc:	003f1906 	br	8005864 <_malloc_r+0x3f8>
 8005c00:	81400204 	addi	r5,r16,8
 8005c04:	9009883a 	mov	r4,r18
 8005c08:	8004e240 	call	8004e24 <_free_r>
 8005c0c:	9c000217 	ldw	r16,8(r19)
 8005c10:	00820074 	movhi	r2,2049
 8005c14:	108e4d17 	ldw	r2,14644(r2)
 8005c18:	85000117 	ldw	r20,4(r16)
 8005c1c:	003f2b06 	br	80058cc <_malloc_r+0x460>
 8005c20:	18c15568 	cmpgeui	r3,r3,1365
 8005c24:	1800091e 	bne	r3,zero,8005c4c <_malloc_r+0x7e0>
 8005c28:	1006d4ba 	srli	r3,r2,18
 8005c2c:	19401f44 	addi	r5,r3,125
 8005c30:	19001f04 	addi	r4,r3,124
 8005c34:	280a90fa 	slli	r5,r5,3
 8005c38:	003f4506 	br	8005950 <_malloc_r+0x4e4>
 8005c3c:	0140fe04 	movi	r5,1016
 8005c40:	01801fc4 	movi	r6,127
 8005c44:	02001f84 	movi	r8,126
 8005c48:	003e4106 	br	8005550 <_malloc_r+0xe4>
 8005c4c:	0140fe04 	movi	r5,1016
 8005c50:	01001f84 	movi	r4,126
 8005c54:	003f3e06 	br	8005950 <_malloc_r+0x4e4>
 8005c58:	98800117 	ldw	r2,4(r19)
 8005c5c:	003f9506 	br	8005ab4 <_malloc_r+0x648>

08005c60 <memchr>:
 8005c60:	208000cc 	andi	r2,r4,3
 8005c64:	280f883a 	mov	r7,r5
 8005c68:	10003526 	beq	r2,zero,8005d40 <memchr+0xe0>
 8005c6c:	30bfffc4 	addi	r2,r6,-1
 8005c70:	30001926 	beq	r6,zero,8005cd8 <memchr+0x78>
 8005c74:	20c00003 	ldbu	r3,0(r4)
 8005c78:	29803fcc 	andi	r6,r5,255
 8005c7c:	30c0061e 	bne	r6,r3,8005c98 <memchr+0x38>
 8005c80:	00001706 	br	8005ce0 <memchr+0x80>
 8005c84:	10bfffc4 	addi	r2,r2,-1
 8005c88:	10ffffe0 	cmpeqi	r3,r2,-1
 8005c8c:	1800121e 	bne	r3,zero,8005cd8 <memchr+0x78>
 8005c90:	20c00003 	ldbu	r3,0(r4)
 8005c94:	19801226 	beq	r3,r6,8005ce0 <memchr+0x80>
 8005c98:	21000044 	addi	r4,r4,1
 8005c9c:	20c000cc 	andi	r3,r4,3
 8005ca0:	183ff81e 	bne	r3,zero,8005c84 <memchr+0x24>
 8005ca4:	10c00128 	cmpgeui	r3,r2,4
 8005ca8:	18000f1e 	bne	r3,zero,8005ce8 <memchr+0x88>
 8005cac:	10000a26 	beq	r2,zero,8005cd8 <memchr+0x78>
 8005cb0:	20c00003 	ldbu	r3,0(r4)
 8005cb4:	29403fcc 	andi	r5,r5,255
 8005cb8:	19400926 	beq	r3,r5,8005ce0 <memchr+0x80>
 8005cbc:	2085883a 	add	r2,r4,r2
 8005cc0:	39403fcc 	andi	r5,r7,255
 8005cc4:	00000206 	br	8005cd0 <memchr+0x70>
 8005cc8:	20c00003 	ldbu	r3,0(r4)
 8005ccc:	19400426 	beq	r3,r5,8005ce0 <memchr+0x80>
 8005cd0:	21000044 	addi	r4,r4,1
 8005cd4:	113ffc1e 	bne	r2,r4,8005cc8 <memchr+0x68>
 8005cd8:	0005883a 	mov	r2,zero
 8005cdc:	f800283a 	ret
 8005ce0:	2005883a 	mov	r2,r4
 8005ce4:	f800283a 	ret
 8005ce8:	280c923a 	slli	r6,r5,8
 8005cec:	2a403fcc 	andi	r9,r5,255
 8005cf0:	02bfbff4 	movhi	r10,65279
 8005cf4:	31bfffcc 	andi	r6,r6,65535
 8005cf8:	3246b03a 	or	r3,r6,r9
 8005cfc:	1812943a 	slli	r9,r3,16
 8005d00:	02202074 	movhi	r8,32897
 8005d04:	52bfbfc4 	addi	r10,r10,-257
 8005d08:	48d2b03a 	or	r9,r9,r3
 8005d0c:	42202004 	addi	r8,r8,-32640
 8005d10:	20c00017 	ldw	r3,0(r4)
 8005d14:	48c6f03a 	xor	r3,r9,r3
 8005d18:	1a8d883a 	add	r6,r3,r10
 8005d1c:	00c6303a 	nor	r3,zero,r3
 8005d20:	30c6703a 	and	r3,r6,r3
 8005d24:	1a06703a 	and	r3,r3,r8
 8005d28:	183fe11e 	bne	r3,zero,8005cb0 <memchr+0x50>
 8005d2c:	10bfff04 	addi	r2,r2,-4
 8005d30:	10c00128 	cmpgeui	r3,r2,4
 8005d34:	21000104 	addi	r4,r4,4
 8005d38:	183ff51e 	bne	r3,zero,8005d10 <memchr+0xb0>
 8005d3c:	003fdb06 	br	8005cac <memchr+0x4c>
 8005d40:	3005883a 	mov	r2,r6
 8005d44:	003fd706 	br	8005ca4 <memchr+0x44>

08005d48 <memset>:
 8005d48:	20c000cc 	andi	r3,r4,3
 8005d4c:	2005883a 	mov	r2,r4
 8005d50:	18003626 	beq	r3,zero,8005e2c <memset+0xe4>
 8005d54:	31ffffc4 	addi	r7,r6,-1
 8005d58:	30003326 	beq	r6,zero,8005e28 <memset+0xe0>
 8005d5c:	2811883a 	mov	r8,r5
 8005d60:	2007883a 	mov	r3,r4
 8005d64:	00000306 	br	8005d74 <memset+0x2c>
 8005d68:	39ffffc4 	addi	r7,r7,-1
 8005d6c:	39bfffe0 	cmpeqi	r6,r7,-1
 8005d70:	30002d1e 	bne	r6,zero,8005e28 <memset+0xe0>
 8005d74:	18c00044 	addi	r3,r3,1
 8005d78:	1a3fffc5 	stb	r8,-1(r3)
 8005d7c:	198000cc 	andi	r6,r3,3
 8005d80:	303ff91e 	bne	r6,zero,8005d68 <memset+0x20>
 8005d84:	39000130 	cmpltui	r4,r7,4
 8005d88:	2000221e 	bne	r4,zero,8005e14 <memset+0xcc>
 8005d8c:	29003fcc 	andi	r4,r5,255
 8005d90:	200c923a 	slli	r6,r4,8
 8005d94:	3a000430 	cmpltui	r8,r7,16
 8005d98:	3108b03a 	or	r4,r6,r4
 8005d9c:	200c943a 	slli	r6,r4,16
 8005da0:	310cb03a 	or	r6,r6,r4
 8005da4:	40000e1e 	bne	r8,zero,8005de0 <memset+0x98>
 8005da8:	3a3ffc04 	addi	r8,r7,-16
 8005dac:	4010d13a 	srli	r8,r8,4
 8005db0:	42000044 	addi	r8,r8,1
 8005db4:	4010913a 	slli	r8,r8,4
 8005db8:	1a11883a 	add	r8,r3,r8
 8005dbc:	19800015 	stw	r6,0(r3)
 8005dc0:	19800115 	stw	r6,4(r3)
 8005dc4:	19800215 	stw	r6,8(r3)
 8005dc8:	18c00404 	addi	r3,r3,16
 8005dcc:	19bfff15 	stw	r6,-4(r3)
 8005dd0:	40fffa1e 	bne	r8,r3,8005dbc <memset+0x74>
 8005dd4:	3900030c 	andi	r4,r7,12
 8005dd8:	39c003cc 	andi	r7,r7,15
 8005ddc:	20000d26 	beq	r4,zero,8005e14 <memset+0xcc>
 8005de0:	1809883a 	mov	r4,r3
 8005de4:	21000104 	addi	r4,r4,4
 8005de8:	3911c83a 	sub	r8,r7,r4
 8005dec:	1a11883a 	add	r8,r3,r8
 8005df0:	21bfff15 	stw	r6,-4(r4)
 8005df4:	42000128 	cmpgeui	r8,r8,4
 8005df8:	403ffa1e 	bne	r8,zero,8005de4 <memset+0x9c>
 8005dfc:	393fff04 	addi	r4,r7,-4
 8005e00:	2008d0ba 	srli	r4,r4,2
 8005e04:	39c000cc 	andi	r7,r7,3
 8005e08:	21000044 	addi	r4,r4,1
 8005e0c:	200890ba 	slli	r4,r4,2
 8005e10:	1907883a 	add	r3,r3,r4
 8005e14:	38000426 	beq	r7,zero,8005e28 <memset+0xe0>
 8005e18:	19cf883a 	add	r7,r3,r7
 8005e1c:	18c00044 	addi	r3,r3,1
 8005e20:	197fffc5 	stb	r5,-1(r3)
 8005e24:	38fffd1e 	bne	r7,r3,8005e1c <memset+0xd4>
 8005e28:	f800283a 	ret
 8005e2c:	2007883a 	mov	r3,r4
 8005e30:	300f883a 	mov	r7,r6
 8005e34:	003fd306 	br	8005d84 <memset+0x3c>

08005e38 <_Balloc>:
 8005e38:	20801317 	ldw	r2,76(r4)
 8005e3c:	defffc04 	addi	sp,sp,-16
 8005e40:	dc400115 	stw	r17,4(sp)
 8005e44:	dc000015 	stw	r16,0(sp)
 8005e48:	dfc00315 	stw	ra,12(sp)
 8005e4c:	dc800215 	stw	r18,8(sp)
 8005e50:	2021883a 	mov	r16,r4
 8005e54:	2823883a 	mov	r17,r5
 8005e58:	10000e26 	beq	r2,zero,8005e94 <_Balloc+0x5c>
 8005e5c:	880690ba 	slli	r3,r17,2
 8005e60:	10c7883a 	add	r3,r2,r3
 8005e64:	18800017 	ldw	r2,0(r3)
 8005e68:	10001126 	beq	r2,zero,8005eb0 <_Balloc+0x78>
 8005e6c:	11000017 	ldw	r4,0(r2)
 8005e70:	19000015 	stw	r4,0(r3)
 8005e74:	10000415 	stw	zero,16(r2)
 8005e78:	10000315 	stw	zero,12(r2)
 8005e7c:	dfc00317 	ldw	ra,12(sp)
 8005e80:	dc800217 	ldw	r18,8(sp)
 8005e84:	dc400117 	ldw	r17,4(sp)
 8005e88:	dc000017 	ldw	r16,0(sp)
 8005e8c:	dec00404 	addi	sp,sp,16
 8005e90:	f800283a 	ret
 8005e94:	01800844 	movi	r6,33
 8005e98:	01400104 	movi	r5,4
 8005e9c:	80085f80 	call	80085f8 <_calloc_r>
 8005ea0:	80801315 	stw	r2,76(r16)
 8005ea4:	103fed1e 	bne	r2,zero,8005e5c <_Balloc+0x24>
 8005ea8:	0005883a 	mov	r2,zero
 8005eac:	003ff306 	br	8005e7c <_Balloc+0x44>
 8005eb0:	04800044 	movi	r18,1
 8005eb4:	9464983a 	sll	r18,r18,r17
 8005eb8:	01400044 	movi	r5,1
 8005ebc:	8009883a 	mov	r4,r16
 8005ec0:	91800144 	addi	r6,r18,5
 8005ec4:	300c90ba 	slli	r6,r6,2
 8005ec8:	80085f80 	call	80085f8 <_calloc_r>
 8005ecc:	103ff626 	beq	r2,zero,8005ea8 <_Balloc+0x70>
 8005ed0:	14400115 	stw	r17,4(r2)
 8005ed4:	14800215 	stw	r18,8(r2)
 8005ed8:	003fe606 	br	8005e74 <_Balloc+0x3c>

08005edc <_Bfree>:
 8005edc:	28000726 	beq	r5,zero,8005efc <_Bfree+0x20>
 8005ee0:	28c00117 	ldw	r3,4(r5)
 8005ee4:	20801317 	ldw	r2,76(r4)
 8005ee8:	180690ba 	slli	r3,r3,2
 8005eec:	10c5883a 	add	r2,r2,r3
 8005ef0:	10c00017 	ldw	r3,0(r2)
 8005ef4:	28c00015 	stw	r3,0(r5)
 8005ef8:	11400015 	stw	r5,0(r2)
 8005efc:	f800283a 	ret

08005f00 <__multadd>:
 8005f00:	defff704 	addi	sp,sp,-36
 8005f04:	dcc00315 	stw	r19,12(sp)
 8005f08:	2cc00417 	ldw	r19,16(r5)
 8005f0c:	ddc00715 	stw	r23,28(sp)
 8005f10:	dd800615 	stw	r22,24(sp)
 8005f14:	dd400515 	stw	r21,20(sp)
 8005f18:	dd000415 	stw	r20,16(sp)
 8005f1c:	dc800215 	stw	r18,8(sp)
 8005f20:	dc400115 	stw	r17,4(sp)
 8005f24:	dfc00815 	stw	ra,32(sp)
 8005f28:	dc000015 	stw	r16,0(sp)
 8005f2c:	2829883a 	mov	r20,r5
 8005f30:	202b883a 	mov	r21,r4
 8005f34:	3025883a 	mov	r18,r6
 8005f38:	3823883a 	mov	r17,r7
 8005f3c:	2d800504 	addi	r22,r5,20
 8005f40:	002f883a 	mov	r23,zero
 8005f44:	b4000017 	ldw	r16,0(r22)
 8005f48:	900b883a 	mov	r5,r18
 8005f4c:	b5800104 	addi	r22,r22,4
 8005f50:	813fffcc 	andi	r4,r16,65535
 8005f54:	80008b80 	call	80008b8 <__mulsi3>
 8005f58:	8008d43a 	srli	r4,r16,16
 8005f5c:	900b883a 	mov	r5,r18
 8005f60:	1461883a 	add	r16,r2,r17
 8005f64:	80008b80 	call	80008b8 <__mulsi3>
 8005f68:	800ed43a 	srli	r7,r16,16
 8005f6c:	843fffcc 	andi	r16,r16,65535
 8005f70:	bdc00044 	addi	r23,r23,1
 8005f74:	11c5883a 	add	r2,r2,r7
 8005f78:	1006943a 	slli	r3,r2,16
 8005f7c:	1022d43a 	srli	r17,r2,16
 8005f80:	1c21883a 	add	r16,r3,r16
 8005f84:	b43fff15 	stw	r16,-4(r22)
 8005f88:	bcffee16 	blt	r23,r19,8005f44 <__multadd+0x44>
 8005f8c:	88000826 	beq	r17,zero,8005fb0 <__multadd+0xb0>
 8005f90:	a0800217 	ldw	r2,8(r20)
 8005f94:	9880120e 	bge	r19,r2,8005fe0 <__multadd+0xe0>
 8005f98:	98800144 	addi	r2,r19,5
 8005f9c:	100490ba 	slli	r2,r2,2
 8005fa0:	9cc00044 	addi	r19,r19,1
 8005fa4:	a085883a 	add	r2,r20,r2
 8005fa8:	14400015 	stw	r17,0(r2)
 8005fac:	a4c00415 	stw	r19,16(r20)
 8005fb0:	a005883a 	mov	r2,r20
 8005fb4:	dfc00817 	ldw	ra,32(sp)
 8005fb8:	ddc00717 	ldw	r23,28(sp)
 8005fbc:	dd800617 	ldw	r22,24(sp)
 8005fc0:	dd400517 	ldw	r21,20(sp)
 8005fc4:	dd000417 	ldw	r20,16(sp)
 8005fc8:	dcc00317 	ldw	r19,12(sp)
 8005fcc:	dc800217 	ldw	r18,8(sp)
 8005fd0:	dc400117 	ldw	r17,4(sp)
 8005fd4:	dc000017 	ldw	r16,0(sp)
 8005fd8:	dec00904 	addi	sp,sp,36
 8005fdc:	f800283a 	ret
 8005fe0:	a1400117 	ldw	r5,4(r20)
 8005fe4:	a809883a 	mov	r4,r21
 8005fe8:	29400044 	addi	r5,r5,1
 8005fec:	8005e380 	call	8005e38 <_Balloc>
 8005ff0:	a1800417 	ldw	r6,16(r20)
 8005ff4:	a1400304 	addi	r5,r20,12
 8005ff8:	11000304 	addi	r4,r2,12
 8005ffc:	31800084 	addi	r6,r6,2
 8006000:	300c90ba 	slli	r6,r6,2
 8006004:	1021883a 	mov	r16,r2
 8006008:	80008e00 	call	80008e0 <memcpy>
 800600c:	a0000926 	beq	r20,zero,8006034 <__multadd+0x134>
 8006010:	a0c00117 	ldw	r3,4(r20)
 8006014:	a8801317 	ldw	r2,76(r21)
 8006018:	180690ba 	slli	r3,r3,2
 800601c:	10c5883a 	add	r2,r2,r3
 8006020:	10c00017 	ldw	r3,0(r2)
 8006024:	a0c00015 	stw	r3,0(r20)
 8006028:	15000015 	stw	r20,0(r2)
 800602c:	8029883a 	mov	r20,r16
 8006030:	003fd906 	br	8005f98 <__multadd+0x98>
 8006034:	8029883a 	mov	r20,r16
 8006038:	003fd706 	br	8005f98 <__multadd+0x98>

0800603c <__s2b>:
 800603c:	defff904 	addi	sp,sp,-28
 8006040:	dc800215 	stw	r18,8(sp)
 8006044:	dc000015 	stw	r16,0(sp)
 8006048:	2025883a 	mov	r18,r4
 800604c:	2821883a 	mov	r16,r5
 8006050:	39000204 	addi	r4,r7,8
 8006054:	01400244 	movi	r5,9
 8006058:	dcc00315 	stw	r19,12(sp)
 800605c:	dc400115 	stw	r17,4(sp)
 8006060:	dfc00615 	stw	ra,24(sp)
 8006064:	3823883a 	mov	r17,r7
 8006068:	dd400515 	stw	r21,20(sp)
 800606c:	dd000415 	stw	r20,16(sp)
 8006070:	3027883a 	mov	r19,r6
 8006074:	800a78c0 	call	800a78c <__divsi3>
 8006078:	88c00290 	cmplti	r3,r17,10
 800607c:	1800311e 	bne	r3,zero,8006144 <__s2b+0x108>
 8006080:	00c00044 	movi	r3,1
 8006084:	000b883a 	mov	r5,zero
 8006088:	18c7883a 	add	r3,r3,r3
 800608c:	29400044 	addi	r5,r5,1
 8006090:	18bffd16 	blt	r3,r2,8006088 <__s2b+0x4c>
 8006094:	9009883a 	mov	r4,r18
 8006098:	8005e380 	call	8005e38 <_Balloc>
 800609c:	d8c00717 	ldw	r3,28(sp)
 80060a0:	10c00515 	stw	r3,20(r2)
 80060a4:	00c00044 	movi	r3,1
 80060a8:	10c00415 	stw	r3,16(r2)
 80060ac:	98c00290 	cmplti	r3,r19,10
 80060b0:	1800211e 	bne	r3,zero,8006138 <__s2b+0xfc>
 80060b4:	85400244 	addi	r21,r16,9
 80060b8:	84e9883a 	add	r20,r16,r19
 80060bc:	a821883a 	mov	r16,r21
 80060c0:	84000044 	addi	r16,r16,1
 80060c4:	81ffffc7 	ldb	r7,-1(r16)
 80060c8:	01800284 	movi	r6,10
 80060cc:	100b883a 	mov	r5,r2
 80060d0:	39fff404 	addi	r7,r7,-48
 80060d4:	9009883a 	mov	r4,r18
 80060d8:	8005f000 	call	8005f00 <__multadd>
 80060dc:	a43ff81e 	bne	r20,r16,80060c0 <__s2b+0x84>
 80060e0:	9c3ffe04 	addi	r16,r19,-8
 80060e4:	ac21883a 	add	r16,r21,r16
 80060e8:	9c400a0e 	bge	r19,r17,8006114 <__s2b+0xd8>
 80060ec:	8ce3c83a 	sub	r17,r17,r19
 80060f0:	8463883a 	add	r17,r16,r17
 80060f4:	84000044 	addi	r16,r16,1
 80060f8:	81ffffc7 	ldb	r7,-1(r16)
 80060fc:	01800284 	movi	r6,10
 8006100:	100b883a 	mov	r5,r2
 8006104:	39fff404 	addi	r7,r7,-48
 8006108:	9009883a 	mov	r4,r18
 800610c:	8005f000 	call	8005f00 <__multadd>
 8006110:	8c3ff81e 	bne	r17,r16,80060f4 <__s2b+0xb8>
 8006114:	dfc00617 	ldw	ra,24(sp)
 8006118:	dd400517 	ldw	r21,20(sp)
 800611c:	dd000417 	ldw	r20,16(sp)
 8006120:	dcc00317 	ldw	r19,12(sp)
 8006124:	dc800217 	ldw	r18,8(sp)
 8006128:	dc400117 	ldw	r17,4(sp)
 800612c:	dc000017 	ldw	r16,0(sp)
 8006130:	dec00704 	addi	sp,sp,28
 8006134:	f800283a 	ret
 8006138:	84000284 	addi	r16,r16,10
 800613c:	04c00244 	movi	r19,9
 8006140:	003fe906 	br	80060e8 <__s2b+0xac>
 8006144:	000b883a 	mov	r5,zero
 8006148:	003fd206 	br	8006094 <__s2b+0x58>

0800614c <__hi0bits>:
 800614c:	20bfffec 	andhi	r2,r4,65535
 8006150:	1000131e 	bne	r2,zero,80061a0 <__hi0bits+0x54>
 8006154:	2008943a 	slli	r4,r4,16
 8006158:	00800404 	movi	r2,16
 800615c:	20ffc02c 	andhi	r3,r4,65280
 8006160:	1800021e 	bne	r3,zero,800616c <__hi0bits+0x20>
 8006164:	2008923a 	slli	r4,r4,8
 8006168:	10800204 	addi	r2,r2,8
 800616c:	20fc002c 	andhi	r3,r4,61440
 8006170:	1800021e 	bne	r3,zero,800617c <__hi0bits+0x30>
 8006174:	2008913a 	slli	r4,r4,4
 8006178:	10800104 	addi	r2,r2,4
 800617c:	20f0002c 	andhi	r3,r4,49152
 8006180:	1800021e 	bne	r3,zero,800618c <__hi0bits+0x40>
 8006184:	200890ba 	slli	r4,r4,2
 8006188:	10800084 	addi	r2,r2,2
 800618c:	20000316 	blt	r4,zero,800619c <__hi0bits+0x50>
 8006190:	2110002c 	andhi	r4,r4,16384
 8006194:	10800044 	addi	r2,r2,1
 8006198:	20000326 	beq	r4,zero,80061a8 <__hi0bits+0x5c>
 800619c:	f800283a 	ret
 80061a0:	0005883a 	mov	r2,zero
 80061a4:	003fed06 	br	800615c <__hi0bits+0x10>
 80061a8:	00800804 	movi	r2,32
 80061ac:	f800283a 	ret

080061b0 <__lo0bits>:
 80061b0:	20c00017 	ldw	r3,0(r4)
 80061b4:	188001cc 	andi	r2,r3,7
 80061b8:	10000826 	beq	r2,zero,80061dc <__lo0bits+0x2c>
 80061bc:	1880004c 	andi	r2,r3,1
 80061c0:	10001f1e 	bne	r2,zero,8006240 <__lo0bits+0x90>
 80061c4:	1880008c 	andi	r2,r3,2
 80061c8:	10002126 	beq	r2,zero,8006250 <__lo0bits+0xa0>
 80061cc:	1806d07a 	srli	r3,r3,1
 80061d0:	00800044 	movi	r2,1
 80061d4:	20c00015 	stw	r3,0(r4)
 80061d8:	f800283a 	ret
 80061dc:	18bfffcc 	andi	r2,r3,65535
 80061e0:	1000151e 	bne	r2,zero,8006238 <__lo0bits+0x88>
 80061e4:	1806d43a 	srli	r3,r3,16
 80061e8:	00800404 	movi	r2,16
 80061ec:	19403fcc 	andi	r5,r3,255
 80061f0:	2800021e 	bne	r5,zero,80061fc <__lo0bits+0x4c>
 80061f4:	1806d23a 	srli	r3,r3,8
 80061f8:	10800204 	addi	r2,r2,8
 80061fc:	194003cc 	andi	r5,r3,15
 8006200:	2800021e 	bne	r5,zero,800620c <__lo0bits+0x5c>
 8006204:	1806d13a 	srli	r3,r3,4
 8006208:	10800104 	addi	r2,r2,4
 800620c:	194000cc 	andi	r5,r3,3
 8006210:	2800021e 	bne	r5,zero,800621c <__lo0bits+0x6c>
 8006214:	1806d0ba 	srli	r3,r3,2
 8006218:	10800084 	addi	r2,r2,2
 800621c:	1940004c 	andi	r5,r3,1
 8006220:	2800031e 	bne	r5,zero,8006230 <__lo0bits+0x80>
 8006224:	1806d07a 	srli	r3,r3,1
 8006228:	10800044 	addi	r2,r2,1
 800622c:	18000626 	beq	r3,zero,8006248 <__lo0bits+0x98>
 8006230:	20c00015 	stw	r3,0(r4)
 8006234:	f800283a 	ret
 8006238:	0005883a 	mov	r2,zero
 800623c:	003feb06 	br	80061ec <__lo0bits+0x3c>
 8006240:	0005883a 	mov	r2,zero
 8006244:	f800283a 	ret
 8006248:	00800804 	movi	r2,32
 800624c:	f800283a 	ret
 8006250:	1806d0ba 	srli	r3,r3,2
 8006254:	00800084 	movi	r2,2
 8006258:	20c00015 	stw	r3,0(r4)
 800625c:	f800283a 	ret

08006260 <__i2b>:
 8006260:	defffe04 	addi	sp,sp,-8
 8006264:	dc000015 	stw	r16,0(sp)
 8006268:	2821883a 	mov	r16,r5
 800626c:	01400044 	movi	r5,1
 8006270:	dfc00115 	stw	ra,4(sp)
 8006274:	8005e380 	call	8005e38 <_Balloc>
 8006278:	01000044 	movi	r4,1
 800627c:	14000515 	stw	r16,20(r2)
 8006280:	11000415 	stw	r4,16(r2)
 8006284:	dfc00117 	ldw	ra,4(sp)
 8006288:	dc000017 	ldw	r16,0(sp)
 800628c:	dec00204 	addi	sp,sp,8
 8006290:	f800283a 	ret

08006294 <__multiply>:
 8006294:	defff104 	addi	sp,sp,-60
 8006298:	dd800b15 	stw	r22,44(sp)
 800629c:	dc400615 	stw	r17,24(sp)
 80062a0:	2d800417 	ldw	r22,16(r5)
 80062a4:	34400417 	ldw	r17,16(r6)
 80062a8:	ddc00c15 	stw	r23,48(sp)
 80062ac:	dc800715 	stw	r18,28(sp)
 80062b0:	dfc00e15 	stw	ra,56(sp)
 80062b4:	df000d15 	stw	fp,52(sp)
 80062b8:	dd400a15 	stw	r21,40(sp)
 80062bc:	dd000915 	stw	r20,36(sp)
 80062c0:	dcc00815 	stw	r19,32(sp)
 80062c4:	dc000515 	stw	r16,20(sp)
 80062c8:	2825883a 	mov	r18,r5
 80062cc:	302f883a 	mov	r23,r6
 80062d0:	b4400516 	blt	r22,r17,80062e8 <__multiply+0x54>
 80062d4:	8807883a 	mov	r3,r17
 80062d8:	282f883a 	mov	r23,r5
 80062dc:	b023883a 	mov	r17,r22
 80062e0:	3025883a 	mov	r18,r6
 80062e4:	182d883a 	mov	r22,r3
 80062e8:	b8800217 	ldw	r2,8(r23)
 80062ec:	8da9883a 	add	r20,r17,r22
 80062f0:	b9400117 	ldw	r5,4(r23)
 80062f4:	1500010e 	bge	r2,r20,80062fc <__multiply+0x68>
 80062f8:	29400044 	addi	r5,r5,1
 80062fc:	a02690ba 	slli	r19,r20,2
 8006300:	8005e380 	call	8005e38 <_Balloc>
 8006304:	10c00504 	addi	r3,r2,20
 8006308:	1cc9883a 	add	r4,r3,r19
 800630c:	d8800415 	stw	r2,16(sp)
 8006310:	d8c00015 	stw	r3,0(sp)
 8006314:	d9000115 	stw	r4,4(sp)
 8006318:	1805883a 	mov	r2,r3
 800631c:	1900042e 	bgeu	r3,r4,8006330 <__multiply+0x9c>
 8006320:	d8c00117 	ldw	r3,4(sp)
 8006324:	10000015 	stw	zero,0(r2)
 8006328:	10800104 	addi	r2,r2,4
 800632c:	10fffc36 	bltu	r2,r3,8006320 <__multiply+0x8c>
 8006330:	b02c90ba 	slli	r22,r22,2
 8006334:	882290ba 	slli	r17,r17,2
 8006338:	94800504 	addi	r18,r18,20
 800633c:	b8800504 	addi	r2,r23,20
 8006340:	9587883a 	add	r3,r18,r22
 8006344:	d8800315 	stw	r2,12(sp)
 8006348:	d8c00215 	stw	r3,8(sp)
 800634c:	1463883a 	add	r17,r2,r17
 8006350:	90c00936 	bltu	r18,r3,8006378 <__multiply+0xe4>
 8006354:	00004606 	br	8006470 <__multiply+0x1dc>
 8006358:	8020d43a 	srli	r16,r16,16
 800635c:	8000271e 	bne	r16,zero,80063fc <__multiply+0x168>
 8006360:	d8800017 	ldw	r2,0(sp)
 8006364:	94800104 	addi	r18,r18,4
 8006368:	10800104 	addi	r2,r2,4
 800636c:	d8800015 	stw	r2,0(sp)
 8006370:	d8800217 	ldw	r2,8(sp)
 8006374:	90803e2e 	bgeu	r18,r2,8006470 <__multiply+0x1dc>
 8006378:	94000017 	ldw	r16,0(r18)
 800637c:	873fffcc 	andi	fp,r16,65535
 8006380:	e03ff526 	beq	fp,zero,8006358 <__multiply+0xc4>
 8006384:	dcc00017 	ldw	r19,0(sp)
 8006388:	dd800317 	ldw	r22,12(sp)
 800638c:	002b883a 	mov	r21,zero
 8006390:	b5c00017 	ldw	r23,0(r22)
 8006394:	9c000017 	ldw	r16,0(r19)
 8006398:	e00b883a 	mov	r5,fp
 800639c:	b93fffcc 	andi	r4,r23,65535
 80063a0:	80008b80 	call	80008b8 <__mulsi3>
 80063a4:	b808d43a 	srli	r4,r23,16
 80063a8:	80ffffcc 	andi	r3,r16,65535
 80063ac:	10c5883a 	add	r2,r2,r3
 80063b0:	e00b883a 	mov	r5,fp
 80063b4:	156b883a 	add	r21,r2,r21
 80063b8:	8020d43a 	srli	r16,r16,16
 80063bc:	80008b80 	call	80008b8 <__mulsi3>
 80063c0:	a808d43a 	srli	r4,r21,16
 80063c4:	1405883a 	add	r2,r2,r16
 80063c8:	a8ffffcc 	andi	r3,r21,65535
 80063cc:	1105883a 	add	r2,r2,r4
 80063d0:	1008943a 	slli	r4,r2,16
 80063d4:	9cc00104 	addi	r19,r19,4
 80063d8:	b5800104 	addi	r22,r22,4
 80063dc:	20c6b03a 	or	r3,r4,r3
 80063e0:	98ffff15 	stw	r3,-4(r19)
 80063e4:	102ad43a 	srli	r21,r2,16
 80063e8:	b47fe936 	bltu	r22,r17,8006390 <__multiply+0xfc>
 80063ec:	9d400015 	stw	r21,0(r19)
 80063f0:	94000017 	ldw	r16,0(r18)
 80063f4:	8020d43a 	srli	r16,r16,16
 80063f8:	803fd926 	beq	r16,zero,8006360 <__multiply+0xcc>
 80063fc:	ddc00017 	ldw	r23,0(sp)
 8006400:	dd400317 	ldw	r21,12(sp)
 8006404:	0027883a 	mov	r19,zero
 8006408:	bd800017 	ldw	r22,0(r23)
 800640c:	b039883a 	mov	fp,r22
 8006410:	a900000b 	ldhu	r4,0(r21)
 8006414:	e038d43a 	srli	fp,fp,16
 8006418:	800b883a 	mov	r5,r16
 800641c:	80008b80 	call	80008b8 <__mulsi3>
 8006420:	1739883a 	add	fp,r2,fp
 8006424:	e4e7883a 	add	r19,fp,r19
 8006428:	9804943a 	slli	r2,r19,16
 800642c:	b0ffffcc 	andi	r3,r22,65535
 8006430:	bdc00104 	addi	r23,r23,4
 8006434:	10c6b03a 	or	r3,r2,r3
 8006438:	b8ffff15 	stw	r3,-4(r23)
 800643c:	ad400104 	addi	r21,r21,4
 8006440:	a93fff8b 	ldhu	r4,-2(r21)
 8006444:	bf000017 	ldw	fp,0(r23)
 8006448:	800b883a 	mov	r5,r16
 800644c:	80008b80 	call	80008b8 <__mulsi3>
 8006450:	980cd43a 	srli	r6,r19,16
 8006454:	e0ffffcc 	andi	r3,fp,65535
 8006458:	10c7883a 	add	r3,r2,r3
 800645c:	19ad883a 	add	r22,r3,r6
 8006460:	b026d43a 	srli	r19,r22,16
 8006464:	ac7fea36 	bltu	r21,r17,8006410 <__multiply+0x17c>
 8006468:	bd800015 	stw	r22,0(r23)
 800646c:	003fbc06 	br	8006360 <__multiply+0xcc>
 8006470:	05000a0e 	bge	zero,r20,800649c <__multiply+0x208>
 8006474:	d8c00117 	ldw	r3,4(sp)
 8006478:	18bfff17 	ldw	r2,-4(r3)
 800647c:	1cffff04 	addi	r19,r3,-4
 8006480:	10000326 	beq	r2,zero,8006490 <__multiply+0x1fc>
 8006484:	00000506 	br	800649c <__multiply+0x208>
 8006488:	98800017 	ldw	r2,0(r19)
 800648c:	1000031e 	bne	r2,zero,800649c <__multiply+0x208>
 8006490:	a53fffc4 	addi	r20,r20,-1
 8006494:	9cffff04 	addi	r19,r19,-4
 8006498:	a03ffb1e 	bne	r20,zero,8006488 <__multiply+0x1f4>
 800649c:	d8800417 	ldw	r2,16(sp)
 80064a0:	15000415 	stw	r20,16(r2)
 80064a4:	dfc00e17 	ldw	ra,56(sp)
 80064a8:	df000d17 	ldw	fp,52(sp)
 80064ac:	ddc00c17 	ldw	r23,48(sp)
 80064b0:	dd800b17 	ldw	r22,44(sp)
 80064b4:	dd400a17 	ldw	r21,40(sp)
 80064b8:	dd000917 	ldw	r20,36(sp)
 80064bc:	dcc00817 	ldw	r19,32(sp)
 80064c0:	dc800717 	ldw	r18,28(sp)
 80064c4:	dc400617 	ldw	r17,24(sp)
 80064c8:	dc000517 	ldw	r16,20(sp)
 80064cc:	dec00f04 	addi	sp,sp,60
 80064d0:	f800283a 	ret

080064d4 <__pow5mult>:
 80064d4:	defffb04 	addi	sp,sp,-20
 80064d8:	dcc00315 	stw	r19,12(sp)
 80064dc:	dc000015 	stw	r16,0(sp)
 80064e0:	dfc00415 	stw	ra,16(sp)
 80064e4:	dc800215 	stw	r18,8(sp)
 80064e8:	dc400115 	stw	r17,4(sp)
 80064ec:	308000cc 	andi	r2,r6,3
 80064f0:	3021883a 	mov	r16,r6
 80064f4:	2027883a 	mov	r19,r4
 80064f8:	10002d1e 	bne	r2,zero,80065b0 <__pow5mult+0xdc>
 80064fc:	2825883a 	mov	r18,r5
 8006500:	8021d0ba 	srai	r16,r16,2
 8006504:	80001926 	beq	r16,zero,800656c <__pow5mult+0x98>
 8006508:	9c401217 	ldw	r17,72(r19)
 800650c:	8800061e 	bne	r17,zero,8006528 <__pow5mult+0x54>
 8006510:	00002f06 	br	80065d0 <__pow5mult+0xfc>
 8006514:	8021d07a 	srai	r16,r16,1
 8006518:	80001426 	beq	r16,zero,800656c <__pow5mult+0x98>
 800651c:	88800017 	ldw	r2,0(r17)
 8006520:	10001a26 	beq	r2,zero,800658c <__pow5mult+0xb8>
 8006524:	1023883a 	mov	r17,r2
 8006528:	8080004c 	andi	r2,r16,1
 800652c:	103ff926 	beq	r2,zero,8006514 <__pow5mult+0x40>
 8006530:	880d883a 	mov	r6,r17
 8006534:	900b883a 	mov	r5,r18
 8006538:	9809883a 	mov	r4,r19
 800653c:	80062940 	call	8006294 <__multiply>
 8006540:	90001926 	beq	r18,zero,80065a8 <__pow5mult+0xd4>
 8006544:	91000117 	ldw	r4,4(r18)
 8006548:	98c01317 	ldw	r3,76(r19)
 800654c:	8021d07a 	srai	r16,r16,1
 8006550:	200890ba 	slli	r4,r4,2
 8006554:	1907883a 	add	r3,r3,r4
 8006558:	19000017 	ldw	r4,0(r3)
 800655c:	91000015 	stw	r4,0(r18)
 8006560:	1c800015 	stw	r18,0(r3)
 8006564:	1025883a 	mov	r18,r2
 8006568:	803fec1e 	bne	r16,zero,800651c <__pow5mult+0x48>
 800656c:	9005883a 	mov	r2,r18
 8006570:	dfc00417 	ldw	ra,16(sp)
 8006574:	dcc00317 	ldw	r19,12(sp)
 8006578:	dc800217 	ldw	r18,8(sp)
 800657c:	dc400117 	ldw	r17,4(sp)
 8006580:	dc000017 	ldw	r16,0(sp)
 8006584:	dec00504 	addi	sp,sp,20
 8006588:	f800283a 	ret
 800658c:	880d883a 	mov	r6,r17
 8006590:	880b883a 	mov	r5,r17
 8006594:	9809883a 	mov	r4,r19
 8006598:	80062940 	call	8006294 <__multiply>
 800659c:	88800015 	stw	r2,0(r17)
 80065a0:	10000015 	stw	zero,0(r2)
 80065a4:	003fdf06 	br	8006524 <__pow5mult+0x50>
 80065a8:	1025883a 	mov	r18,r2
 80065ac:	003fd906 	br	8006514 <__pow5mult+0x40>
 80065b0:	100490ba 	slli	r2,r2,2
 80065b4:	00c20074 	movhi	r3,2049
 80065b8:	000f883a 	mov	r7,zero
 80065bc:	10c7883a 	add	r3,r2,r3
 80065c0:	19bf0f17 	ldw	r6,-964(r3)
 80065c4:	8005f000 	call	8005f00 <__multadd>
 80065c8:	1025883a 	mov	r18,r2
 80065cc:	003fcc06 	br	8006500 <__pow5mult+0x2c>
 80065d0:	01400044 	movi	r5,1
 80065d4:	9809883a 	mov	r4,r19
 80065d8:	8005e380 	call	8005e38 <_Balloc>
 80065dc:	1023883a 	mov	r17,r2
 80065e0:	00809c44 	movi	r2,625
 80065e4:	88800515 	stw	r2,20(r17)
 80065e8:	00800044 	movi	r2,1
 80065ec:	88800415 	stw	r2,16(r17)
 80065f0:	9c401215 	stw	r17,72(r19)
 80065f4:	88000015 	stw	zero,0(r17)
 80065f8:	003fcb06 	br	8006528 <__pow5mult+0x54>

080065fc <__lshift>:
 80065fc:	defff904 	addi	sp,sp,-28
 8006600:	dcc00315 	stw	r19,12(sp)
 8006604:	dc400115 	stw	r17,4(sp)
 8006608:	2cc00417 	ldw	r19,16(r5)
 800660c:	3023d17a 	srai	r17,r6,5
 8006610:	28800217 	ldw	r2,8(r5)
 8006614:	dd400515 	stw	r21,20(sp)
 8006618:	8ce7883a 	add	r19,r17,r19
 800661c:	dd000415 	stw	r20,16(sp)
 8006620:	dc800215 	stw	r18,8(sp)
 8006624:	dc000015 	stw	r16,0(sp)
 8006628:	dfc00615 	stw	ra,24(sp)
 800662c:	9c000044 	addi	r16,r19,1
 8006630:	2825883a 	mov	r18,r5
 8006634:	302b883a 	mov	r21,r6
 8006638:	2029883a 	mov	r20,r4
 800663c:	29400117 	ldw	r5,4(r5)
 8006640:	1400030e 	bge	r2,r16,8006650 <__lshift+0x54>
 8006644:	1085883a 	add	r2,r2,r2
 8006648:	29400044 	addi	r5,r5,1
 800664c:	143ffd16 	blt	r2,r16,8006644 <__lshift+0x48>
 8006650:	a009883a 	mov	r4,r20
 8006654:	8005e380 	call	8005e38 <_Balloc>
 8006658:	11000504 	addi	r4,r2,20
 800665c:	0440090e 	bge	zero,r17,8006684 <__lshift+0x88>
 8006660:	8c400144 	addi	r17,r17,5
 8006664:	882290ba 	slli	r17,r17,2
 8006668:	2007883a 	mov	r3,r4
 800666c:	144b883a 	add	r5,r2,r17
 8006670:	18c00104 	addi	r3,r3,4
 8006674:	183fff15 	stw	zero,-4(r3)
 8006678:	28fffd1e 	bne	r5,r3,8006670 <__lshift+0x74>
 800667c:	8c7ffb04 	addi	r17,r17,-20
 8006680:	2449883a 	add	r4,r4,r17
 8006684:	92000417 	ldw	r8,16(r18)
 8006688:	90c00504 	addi	r3,r18,20
 800668c:	a98007cc 	andi	r6,r21,31
 8006690:	401090ba 	slli	r8,r8,2
 8006694:	1a11883a 	add	r8,r3,r8
 8006698:	30002126 	beq	r6,zero,8006720 <__lshift+0x124>
 800669c:	02400804 	movi	r9,32
 80066a0:	4993c83a 	sub	r9,r9,r6
 80066a4:	000f883a 	mov	r7,zero
 80066a8:	19400017 	ldw	r5,0(r3)
 80066ac:	21000104 	addi	r4,r4,4
 80066b0:	18c00104 	addi	r3,r3,4
 80066b4:	298a983a 	sll	r5,r5,r6
 80066b8:	29cab03a 	or	r5,r5,r7
 80066bc:	217fff15 	stw	r5,-4(r4)
 80066c0:	197fff17 	ldw	r5,-4(r3)
 80066c4:	2a4ed83a 	srl	r7,r5,r9
 80066c8:	1a3ff736 	bltu	r3,r8,80066a8 <__lshift+0xac>
 80066cc:	21c00015 	stw	r7,0(r4)
 80066d0:	38000126 	beq	r7,zero,80066d8 <__lshift+0xdc>
 80066d4:	8027883a 	mov	r19,r16
 80066d8:	14c00415 	stw	r19,16(r2)
 80066dc:	90000726 	beq	r18,zero,80066fc <__lshift+0x100>
 80066e0:	91000117 	ldw	r4,4(r18)
 80066e4:	a0c01317 	ldw	r3,76(r20)
 80066e8:	200890ba 	slli	r4,r4,2
 80066ec:	1907883a 	add	r3,r3,r4
 80066f0:	19000017 	ldw	r4,0(r3)
 80066f4:	91000015 	stw	r4,0(r18)
 80066f8:	1c800015 	stw	r18,0(r3)
 80066fc:	dfc00617 	ldw	ra,24(sp)
 8006700:	dd400517 	ldw	r21,20(sp)
 8006704:	dd000417 	ldw	r20,16(sp)
 8006708:	dcc00317 	ldw	r19,12(sp)
 800670c:	dc800217 	ldw	r18,8(sp)
 8006710:	dc400117 	ldw	r17,4(sp)
 8006714:	dc000017 	ldw	r16,0(sp)
 8006718:	dec00704 	addi	sp,sp,28
 800671c:	f800283a 	ret
 8006720:	18c00104 	addi	r3,r3,4
 8006724:	197fff17 	ldw	r5,-4(r3)
 8006728:	21000104 	addi	r4,r4,4
 800672c:	217fff15 	stw	r5,-4(r4)
 8006730:	1a3ffb36 	bltu	r3,r8,8006720 <__lshift+0x124>
 8006734:	003fe806 	br	80066d8 <__lshift+0xdc>

08006738 <__mcmp>:
 8006738:	20800417 	ldw	r2,16(r4)
 800673c:	28c00417 	ldw	r3,16(r5)
 8006740:	10c5c83a 	sub	r2,r2,r3
 8006744:	10000e1e 	bne	r2,zero,8006780 <__mcmp+0x48>
 8006748:	180c90ba 	slli	r6,r3,2
 800674c:	21000504 	addi	r4,r4,20
 8006750:	29400504 	addi	r5,r5,20
 8006754:	2187883a 	add	r3,r4,r6
 8006758:	298b883a 	add	r5,r5,r6
 800675c:	00000106 	br	8006764 <__mcmp+0x2c>
 8006760:	20c0082e 	bgeu	r4,r3,8006784 <__mcmp+0x4c>
 8006764:	18ffff04 	addi	r3,r3,-4
 8006768:	297fff04 	addi	r5,r5,-4
 800676c:	19c00017 	ldw	r7,0(r3)
 8006770:	29800017 	ldw	r6,0(r5)
 8006774:	39bffa26 	beq	r7,r6,8006760 <__mcmp+0x28>
 8006778:	3980032e 	bgeu	r7,r6,8006788 <__mcmp+0x50>
 800677c:	00bfffc4 	movi	r2,-1
 8006780:	f800283a 	ret
 8006784:	f800283a 	ret
 8006788:	00800044 	movi	r2,1
 800678c:	f800283a 	ret

08006790 <__mdiff>:
 8006790:	defffa04 	addi	sp,sp,-24
 8006794:	dc800215 	stw	r18,8(sp)
 8006798:	30c00417 	ldw	r3,16(r6)
 800679c:	2c800417 	ldw	r18,16(r5)
 80067a0:	dd000415 	stw	r20,16(sp)
 80067a4:	dcc00315 	stw	r19,12(sp)
 80067a8:	dc400115 	stw	r17,4(sp)
 80067ac:	dc000015 	stw	r16,0(sp)
 80067b0:	dfc00515 	stw	ra,20(sp)
 80067b4:	90e5c83a 	sub	r18,r18,r3
 80067b8:	2827883a 	mov	r19,r5
 80067bc:	3029883a 	mov	r20,r6
 80067c0:	2c000504 	addi	r16,r5,20
 80067c4:	34400504 	addi	r17,r6,20
 80067c8:	9000131e 	bne	r18,zero,8006818 <__mdiff+0x88>
 80067cc:	180690ba 	slli	r3,r3,2
 80067d0:	80c5883a 	add	r2,r16,r3
 80067d4:	88c7883a 	add	r3,r17,r3
 80067d8:	00000106 	br	80067e0 <__mdiff+0x50>
 80067dc:	8080552e 	bgeu	r16,r2,8006934 <__mdiff+0x1a4>
 80067e0:	10bfff04 	addi	r2,r2,-4
 80067e4:	18ffff04 	addi	r3,r3,-4
 80067e8:	11c00017 	ldw	r7,0(r2)
 80067ec:	19400017 	ldw	r5,0(r3)
 80067f0:	397ffa26 	beq	r7,r5,80067dc <__mdiff+0x4c>
 80067f4:	39400a2e 	bgeu	r7,r5,8006820 <__mdiff+0x90>
 80067f8:	8007883a 	mov	r3,r16
 80067fc:	9805883a 	mov	r2,r19
 8006800:	8821883a 	mov	r16,r17
 8006804:	a027883a 	mov	r19,r20
 8006808:	1823883a 	mov	r17,r3
 800680c:	1029883a 	mov	r20,r2
 8006810:	04800044 	movi	r18,1
 8006814:	00000206 	br	8006820 <__mdiff+0x90>
 8006818:	903ff716 	blt	r18,zero,80067f8 <__mdiff+0x68>
 800681c:	0025883a 	mov	r18,zero
 8006820:	99400117 	ldw	r5,4(r19)
 8006824:	8005e380 	call	8005e38 <_Balloc>
 8006828:	9a400417 	ldw	r9,16(r19)
 800682c:	a2c00417 	ldw	r11,16(r20)
 8006830:	12800504 	addi	r10,r2,20
 8006834:	481090ba 	slli	r8,r9,2
 8006838:	581690ba 	slli	r11,r11,2
 800683c:	14800315 	stw	r18,12(r2)
 8006840:	8211883a 	add	r8,r16,r8
 8006844:	8ad7883a 	add	r11,r17,r11
 8006848:	0007883a 	mov	r3,zero
 800684c:	00000106 	br	8006854 <__mdiff+0xc4>
 8006850:	3815883a 	mov	r10,r7
 8006854:	81000017 	ldw	r4,0(r16)
 8006858:	89800017 	ldw	r6,0(r17)
 800685c:	51c00104 	addi	r7,r10,4
 8006860:	217fffcc 	andi	r5,r4,65535
 8006864:	28cb883a 	add	r5,r5,r3
 8006868:	30ffffcc 	andi	r3,r6,65535
 800686c:	28cbc83a 	sub	r5,r5,r3
 8006870:	300cd43a 	srli	r6,r6,16
 8006874:	2006d43a 	srli	r3,r4,16
 8006878:	2809d43a 	srai	r4,r5,16
 800687c:	297fffcc 	andi	r5,r5,65535
 8006880:	1987c83a 	sub	r3,r3,r6
 8006884:	1907883a 	add	r3,r3,r4
 8006888:	1808943a 	slli	r4,r3,16
 800688c:	8c400104 	addi	r17,r17,4
 8006890:	84000104 	addi	r16,r16,4
 8006894:	214ab03a 	or	r5,r4,r5
 8006898:	397fff15 	stw	r5,-4(r7)
 800689c:	1807d43a 	srai	r3,r3,16
 80068a0:	8affeb36 	bltu	r17,r11,8006850 <__mdiff+0xc0>
 80068a4:	8200152e 	bgeu	r16,r8,80068fc <__mdiff+0x16c>
 80068a8:	3815883a 	mov	r10,r7
 80068ac:	800d883a 	mov	r6,r16
 80068b0:	31000017 	ldw	r4,0(r6)
 80068b4:	52800104 	addi	r10,r10,4
 80068b8:	31800104 	addi	r6,r6,4
 80068bc:	217fffcc 	andi	r5,r4,65535
 80068c0:	28cb883a 	add	r5,r5,r3
 80068c4:	2817d43a 	srai	r11,r5,16
 80068c8:	2006d43a 	srli	r3,r4,16
 80068cc:	293fffcc 	andi	r4,r5,65535
 80068d0:	1ac7883a 	add	r3,r3,r11
 80068d4:	180a943a 	slli	r5,r3,16
 80068d8:	1807d43a 	srai	r3,r3,16
 80068dc:	290ab03a 	or	r5,r5,r4
 80068e0:	517fff15 	stw	r5,-4(r10)
 80068e4:	323ff236 	bltu	r6,r8,80068b0 <__mdiff+0x120>
 80068e8:	42bfffc4 	addi	r10,r8,-1
 80068ec:	5415c83a 	sub	r10,r10,r16
 80068f0:	5014d0ba 	srli	r10,r10,2
 80068f4:	501490ba 	slli	r10,r10,2
 80068f8:	3a95883a 	add	r10,r7,r10
 80068fc:	2800041e 	bne	r5,zero,8006910 <__mdiff+0x180>
 8006900:	52bfff04 	addi	r10,r10,-4
 8006904:	50c00017 	ldw	r3,0(r10)
 8006908:	4a7fffc4 	addi	r9,r9,-1
 800690c:	183ffc26 	beq	r3,zero,8006900 <__mdiff+0x170>
 8006910:	12400415 	stw	r9,16(r2)
 8006914:	dfc00517 	ldw	ra,20(sp)
 8006918:	dd000417 	ldw	r20,16(sp)
 800691c:	dcc00317 	ldw	r19,12(sp)
 8006920:	dc800217 	ldw	r18,8(sp)
 8006924:	dc400117 	ldw	r17,4(sp)
 8006928:	dc000017 	ldw	r16,0(sp)
 800692c:	dec00604 	addi	sp,sp,24
 8006930:	f800283a 	ret
 8006934:	000b883a 	mov	r5,zero
 8006938:	8005e380 	call	8005e38 <_Balloc>
 800693c:	00c00044 	movi	r3,1
 8006940:	10c00415 	stw	r3,16(r2)
 8006944:	10000515 	stw	zero,20(r2)
 8006948:	003ff206 	br	8006914 <__mdiff+0x184>

0800694c <__ulp>:
 800694c:	295ffc2c 	andhi	r5,r5,32752
 8006950:	00ff3034 	movhi	r3,64704
 8006954:	28c7883a 	add	r3,r5,r3
 8006958:	00c0020e 	bge	zero,r3,8006964 <__ulp+0x18>
 800695c:	0005883a 	mov	r2,zero
 8006960:	f800283a 	ret
 8006964:	00c7c83a 	sub	r3,zero,r3
 8006968:	1807d53a 	srai	r3,r3,20
 800696c:	18800508 	cmpgei	r2,r3,20
 8006970:	1000041e 	bne	r2,zero,8006984 <__ulp+0x38>
 8006974:	01400234 	movhi	r5,8
 8006978:	28c7d83a 	sra	r3,r5,r3
 800697c:	0005883a 	mov	r2,zero
 8006980:	f800283a 	ret
 8006984:	193ffb04 	addi	r4,r3,-20
 8006988:	208007c8 	cmpgei	r2,r4,31
 800698c:	0007883a 	mov	r3,zero
 8006990:	1000031e 	bne	r2,zero,80069a0 <__ulp+0x54>
 8006994:	00a00034 	movhi	r2,32768
 8006998:	1104d83a 	srl	r2,r2,r4
 800699c:	f800283a 	ret
 80069a0:	00800044 	movi	r2,1
 80069a4:	f800283a 	ret

080069a8 <__b2d>:
 80069a8:	defffa04 	addi	sp,sp,-24
 80069ac:	dc000015 	stw	r16,0(sp)
 80069b0:	24000417 	ldw	r16,16(r4)
 80069b4:	dc800215 	stw	r18,8(sp)
 80069b8:	24800504 	addi	r18,r4,20
 80069bc:	802090ba 	slli	r16,r16,2
 80069c0:	dc400115 	stw	r17,4(sp)
 80069c4:	dd000415 	stw	r20,16(sp)
 80069c8:	9421883a 	add	r16,r18,r16
 80069cc:	847fff17 	ldw	r17,-4(r16)
 80069d0:	dcc00315 	stw	r19,12(sp)
 80069d4:	2829883a 	mov	r20,r5
 80069d8:	8809883a 	mov	r4,r17
 80069dc:	dfc00515 	stw	ra,20(sp)
 80069e0:	800614c0 	call	800614c <__hi0bits>
 80069e4:	01000804 	movi	r4,32
 80069e8:	2087c83a 	sub	r3,r4,r2
 80069ec:	a0c00015 	stw	r3,0(r20)
 80069f0:	10c002c8 	cmpgei	r3,r2,11
 80069f4:	84ffff04 	addi	r19,r16,-4
 80069f8:	18001f26 	beq	r3,zero,8006a78 <__b2d+0xd0>
 80069fc:	10fffd44 	addi	r3,r2,-11
 8006a00:	94c00e2e 	bgeu	r18,r19,8006a3c <__b2d+0x94>
 8006a04:	80bffe17 	ldw	r2,-8(r16)
 8006a08:	18001226 	beq	r3,zero,8006a54 <__b2d+0xac>
 8006a0c:	20c9c83a 	sub	r4,r4,r3
 8006a10:	110cd83a 	srl	r6,r2,r4
 8006a14:	88e2983a 	sll	r17,r17,r3
 8006a18:	10c4983a 	sll	r2,r2,r3
 8006a1c:	817ffe04 	addi	r5,r16,-8
 8006a20:	8986b03a 	or	r3,r17,r6
 8006a24:	18cffc34 	orhi	r3,r3,16368
 8006a28:	91400b2e 	bgeu	r18,r5,8006a58 <__b2d+0xb0>
 8006a2c:	817ffd17 	ldw	r5,-12(r16)
 8006a30:	2908d83a 	srl	r4,r5,r4
 8006a34:	1104b03a 	or	r2,r2,r4
 8006a38:	00000706 	br	8006a58 <__b2d+0xb0>
 8006a3c:	18000426 	beq	r3,zero,8006a50 <__b2d+0xa8>
 8006a40:	88c6983a 	sll	r3,r17,r3
 8006a44:	0005883a 	mov	r2,zero
 8006a48:	18cffc34 	orhi	r3,r3,16368
 8006a4c:	00000206 	br	8006a58 <__b2d+0xb0>
 8006a50:	0005883a 	mov	r2,zero
 8006a54:	88cffc34 	orhi	r3,r17,16368
 8006a58:	dfc00517 	ldw	ra,20(sp)
 8006a5c:	dd000417 	ldw	r20,16(sp)
 8006a60:	dcc00317 	ldw	r19,12(sp)
 8006a64:	dc800217 	ldw	r18,8(sp)
 8006a68:	dc400117 	ldw	r17,4(sp)
 8006a6c:	dc000017 	ldw	r16,0(sp)
 8006a70:	dec00604 	addi	sp,sp,24
 8006a74:	f800283a 	ret
 8006a78:	014002c4 	movi	r5,11
 8006a7c:	2889c83a 	sub	r4,r5,r2
 8006a80:	8906d83a 	srl	r3,r17,r4
 8006a84:	18cffc34 	orhi	r3,r3,16368
 8006a88:	94c00536 	bltu	r18,r19,8006aa0 <__b2d+0xf8>
 8006a8c:	000b883a 	mov	r5,zero
 8006a90:	10800544 	addi	r2,r2,21
 8006a94:	8884983a 	sll	r2,r17,r2
 8006a98:	1144b03a 	or	r2,r2,r5
 8006a9c:	003fee06 	br	8006a58 <__b2d+0xb0>
 8006aa0:	817ffe17 	ldw	r5,-8(r16)
 8006aa4:	290ad83a 	srl	r5,r5,r4
 8006aa8:	003ff906 	br	8006a90 <__b2d+0xe8>

08006aac <__d2b>:
 8006aac:	defff804 	addi	sp,sp,-32
 8006ab0:	dc400315 	stw	r17,12(sp)
 8006ab4:	3023883a 	mov	r17,r6
 8006ab8:	dd000615 	stw	r20,24(sp)
 8006abc:	dc000215 	stw	r16,8(sp)
 8006ac0:	2829883a 	mov	r20,r5
 8006ac4:	8820d53a 	srli	r16,r17,20
 8006ac8:	01400044 	movi	r5,1
 8006acc:	dcc00515 	stw	r19,20(sp)
 8006ad0:	dc800415 	stw	r18,16(sp)
 8006ad4:	dfc00715 	stw	ra,28(sp)
 8006ad8:	3825883a 	mov	r18,r7
 8006adc:	8005e380 	call	8005e38 <_Balloc>
 8006ae0:	01800434 	movhi	r6,16
 8006ae4:	31bfffc4 	addi	r6,r6,-1
 8006ae8:	8401ffcc 	andi	r16,r16,2047
 8006aec:	1027883a 	mov	r19,r2
 8006af0:	89a2703a 	and	r17,r17,r6
 8006af4:	80000126 	beq	r16,zero,8006afc <__d2b+0x50>
 8006af8:	8c400434 	orhi	r17,r17,16
 8006afc:	dc400115 	stw	r17,4(sp)
 8006b00:	a0002826 	beq	r20,zero,8006ba4 <__d2b+0xf8>
 8006b04:	d809883a 	mov	r4,sp
 8006b08:	dd000015 	stw	r20,0(sp)
 8006b0c:	80061b00 	call	80061b0 <__lo0bits>
 8006b10:	d8c00117 	ldw	r3,4(sp)
 8006b14:	1000171e 	bne	r2,zero,8006b74 <__d2b+0xc8>
 8006b18:	d9000017 	ldw	r4,0(sp)
 8006b1c:	98c00615 	stw	r3,24(r19)
 8006b20:	99000515 	stw	r4,20(r19)
 8006b24:	18001d1e 	bne	r3,zero,8006b9c <__d2b+0xf0>
 8006b28:	04400044 	movi	r17,1
 8006b2c:	9c400415 	stw	r17,16(r19)
 8006b30:	80002526 	beq	r16,zero,8006bc8 <__d2b+0x11c>
 8006b34:	00c00d44 	movi	r3,53
 8006b38:	843ef344 	addi	r16,r16,-1075
 8006b3c:	80a1883a 	add	r16,r16,r2
 8006b40:	1885c83a 	sub	r2,r3,r2
 8006b44:	d8c00817 	ldw	r3,32(sp)
 8006b48:	94000015 	stw	r16,0(r18)
 8006b4c:	18800015 	stw	r2,0(r3)
 8006b50:	9805883a 	mov	r2,r19
 8006b54:	dfc00717 	ldw	ra,28(sp)
 8006b58:	dd000617 	ldw	r20,24(sp)
 8006b5c:	dcc00517 	ldw	r19,20(sp)
 8006b60:	dc800417 	ldw	r18,16(sp)
 8006b64:	dc400317 	ldw	r17,12(sp)
 8006b68:	dc000217 	ldw	r16,8(sp)
 8006b6c:	dec00804 	addi	sp,sp,32
 8006b70:	f800283a 	ret
 8006b74:	01000804 	movi	r4,32
 8006b78:	2089c83a 	sub	r4,r4,r2
 8006b7c:	1908983a 	sll	r4,r3,r4
 8006b80:	d9400017 	ldw	r5,0(sp)
 8006b84:	1886d83a 	srl	r3,r3,r2
 8006b88:	2148b03a 	or	r4,r4,r5
 8006b8c:	99000515 	stw	r4,20(r19)
 8006b90:	d8c00115 	stw	r3,4(sp)
 8006b94:	98c00615 	stw	r3,24(r19)
 8006b98:	183fe326 	beq	r3,zero,8006b28 <__d2b+0x7c>
 8006b9c:	04400084 	movi	r17,2
 8006ba0:	003fe206 	br	8006b2c <__d2b+0x80>
 8006ba4:	d9000104 	addi	r4,sp,4
 8006ba8:	80061b00 	call	80061b0 <__lo0bits>
 8006bac:	00c00044 	movi	r3,1
 8006bb0:	98c00415 	stw	r3,16(r19)
 8006bb4:	d8c00117 	ldw	r3,4(sp)
 8006bb8:	10800804 	addi	r2,r2,32
 8006bbc:	04400044 	movi	r17,1
 8006bc0:	98c00515 	stw	r3,20(r19)
 8006bc4:	803fdb1e 	bne	r16,zero,8006b34 <__d2b+0x88>
 8006bc8:	880690ba 	slli	r3,r17,2
 8006bcc:	10bef384 	addi	r2,r2,-1074
 8006bd0:	8822917a 	slli	r17,r17,5
 8006bd4:	98c7883a 	add	r3,r19,r3
 8006bd8:	19000417 	ldw	r4,16(r3)
 8006bdc:	90800015 	stw	r2,0(r18)
 8006be0:	800614c0 	call	800614c <__hi0bits>
 8006be4:	88a3c83a 	sub	r17,r17,r2
 8006be8:	d8800817 	ldw	r2,32(sp)
 8006bec:	14400015 	stw	r17,0(r2)
 8006bf0:	003fd706 	br	8006b50 <__d2b+0xa4>

08006bf4 <__ratio>:
 8006bf4:	defff904 	addi	sp,sp,-28
 8006bf8:	dc400315 	stw	r17,12(sp)
 8006bfc:	2823883a 	mov	r17,r5
 8006c00:	d80b883a 	mov	r5,sp
 8006c04:	dfc00615 	stw	ra,24(sp)
 8006c08:	dcc00515 	stw	r19,20(sp)
 8006c0c:	dc800415 	stw	r18,16(sp)
 8006c10:	2027883a 	mov	r19,r4
 8006c14:	dc000215 	stw	r16,8(sp)
 8006c18:	80069a80 	call	80069a8 <__b2d>
 8006c1c:	d9400104 	addi	r5,sp,4
 8006c20:	8809883a 	mov	r4,r17
 8006c24:	1025883a 	mov	r18,r2
 8006c28:	1821883a 	mov	r16,r3
 8006c2c:	80069a80 	call	80069a8 <__b2d>
 8006c30:	89400417 	ldw	r5,16(r17)
 8006c34:	99000417 	ldw	r4,16(r19)
 8006c38:	d9800117 	ldw	r6,4(sp)
 8006c3c:	2149c83a 	sub	r4,r4,r5
 8006c40:	d9400017 	ldw	r5,0(sp)
 8006c44:	2008917a 	slli	r4,r4,5
 8006c48:	298bc83a 	sub	r5,r5,r6
 8006c4c:	2149883a 	add	r4,r4,r5
 8006c50:	01000e0e 	bge	zero,r4,8006c8c <__ratio+0x98>
 8006c54:	2008953a 	slli	r4,r4,20
 8006c58:	2421883a 	add	r16,r4,r16
 8006c5c:	100d883a 	mov	r6,r2
 8006c60:	180f883a 	mov	r7,r3
 8006c64:	9009883a 	mov	r4,r18
 8006c68:	800b883a 	mov	r5,r16
 8006c6c:	800b2e40 	call	800b2e4 <__divdf3>
 8006c70:	dfc00617 	ldw	ra,24(sp)
 8006c74:	dcc00517 	ldw	r19,20(sp)
 8006c78:	dc800417 	ldw	r18,16(sp)
 8006c7c:	dc400317 	ldw	r17,12(sp)
 8006c80:	dc000217 	ldw	r16,8(sp)
 8006c84:	dec00704 	addi	sp,sp,28
 8006c88:	f800283a 	ret
 8006c8c:	2008953a 	slli	r4,r4,20
 8006c90:	1907c83a 	sub	r3,r3,r4
 8006c94:	003ff106 	br	8006c5c <__ratio+0x68>

08006c98 <_mprec_log10>:
 8006c98:	defffe04 	addi	sp,sp,-8
 8006c9c:	dc000015 	stw	r16,0(sp)
 8006ca0:	dfc00115 	stw	ra,4(sp)
 8006ca4:	20800608 	cmpgei	r2,r4,24
 8006ca8:	2021883a 	mov	r16,r4
 8006cac:	10000d26 	beq	r2,zero,8006ce4 <_mprec_log10+0x4c>
 8006cb0:	0005883a 	mov	r2,zero
 8006cb4:	00cffc34 	movhi	r3,16368
 8006cb8:	843fffc4 	addi	r16,r16,-1
 8006cbc:	000d883a 	mov	r6,zero
 8006cc0:	01d00934 	movhi	r7,16420
 8006cc4:	1009883a 	mov	r4,r2
 8006cc8:	180b883a 	mov	r5,r3
 8006ccc:	800bea80 	call	800bea8 <__muldf3>
 8006cd0:	803ff91e 	bne	r16,zero,8006cb8 <_mprec_log10+0x20>
 8006cd4:	dfc00117 	ldw	ra,4(sp)
 8006cd8:	dc000017 	ldw	r16,0(sp)
 8006cdc:	dec00204 	addi	sp,sp,8
 8006ce0:	f800283a 	ret
 8006ce4:	202090fa 	slli	r16,r4,3
 8006ce8:	00820074 	movhi	r2,2049
 8006cec:	10bf2704 	addi	r2,r2,-868
 8006cf0:	1421883a 	add	r16,r2,r16
 8006cf4:	80800017 	ldw	r2,0(r16)
 8006cf8:	80c00117 	ldw	r3,4(r16)
 8006cfc:	dfc00117 	ldw	ra,4(sp)
 8006d00:	dc000017 	ldw	r16,0(sp)
 8006d04:	dec00204 	addi	sp,sp,8
 8006d08:	f800283a 	ret

08006d0c <__copybits>:
 8006d0c:	29ffffc4 	addi	r7,r5,-1
 8006d10:	380fd17a 	srai	r7,r7,5
 8006d14:	31400417 	ldw	r5,16(r6)
 8006d18:	30800504 	addi	r2,r6,20
 8006d1c:	39c00044 	addi	r7,r7,1
 8006d20:	280a90ba 	slli	r5,r5,2
 8006d24:	380e90ba 	slli	r7,r7,2
 8006d28:	114b883a 	add	r5,r2,r5
 8006d2c:	21cf883a 	add	r7,r4,r7
 8006d30:	11400c2e 	bgeu	r2,r5,8006d64 <__copybits+0x58>
 8006d34:	2007883a 	mov	r3,r4
 8006d38:	10800104 	addi	r2,r2,4
 8006d3c:	123fff17 	ldw	r8,-4(r2)
 8006d40:	18c00104 	addi	r3,r3,4
 8006d44:	1a3fff15 	stw	r8,-4(r3)
 8006d48:	117ffb36 	bltu	r2,r5,8006d38 <__copybits+0x2c>
 8006d4c:	2985c83a 	sub	r2,r5,r6
 8006d50:	10bffac4 	addi	r2,r2,-21
 8006d54:	1004d0ba 	srli	r2,r2,2
 8006d58:	10800044 	addi	r2,r2,1
 8006d5c:	100490ba 	slli	r2,r2,2
 8006d60:	2089883a 	add	r4,r4,r2
 8006d64:	21c0032e 	bgeu	r4,r7,8006d74 <__copybits+0x68>
 8006d68:	21000104 	addi	r4,r4,4
 8006d6c:	203fff15 	stw	zero,-4(r4)
 8006d70:	21fffd36 	bltu	r4,r7,8006d68 <__copybits+0x5c>
 8006d74:	f800283a 	ret

08006d78 <__any_on>:
 8006d78:	20800417 	ldw	r2,16(r4)
 8006d7c:	280dd17a 	srai	r6,r5,5
 8006d80:	21000504 	addi	r4,r4,20
 8006d84:	11800c0e 	bge	r2,r6,8006db8 <__any_on+0x40>
 8006d88:	100690ba 	slli	r3,r2,2
 8006d8c:	20c7883a 	add	r3,r4,r3
 8006d90:	20c0142e 	bgeu	r4,r3,8006de4 <__any_on+0x6c>
 8006d94:	18bfff17 	ldw	r2,-4(r3)
 8006d98:	18ffff04 	addi	r3,r3,-4
 8006d9c:	1000041e 	bne	r2,zero,8006db0 <__any_on+0x38>
 8006da0:	20c00f2e 	bgeu	r4,r3,8006de0 <__any_on+0x68>
 8006da4:	18ffff04 	addi	r3,r3,-4
 8006da8:	19400017 	ldw	r5,0(r3)
 8006dac:	283ffc26 	beq	r5,zero,8006da0 <__any_on+0x28>
 8006db0:	00800044 	movi	r2,1
 8006db4:	f800283a 	ret
 8006db8:	300690ba 	slli	r3,r6,2
 8006dbc:	20c7883a 	add	r3,r4,r3
 8006dc0:	30bff30e 	bge	r6,r2,8006d90 <__any_on+0x18>
 8006dc4:	294007cc 	andi	r5,r5,31
 8006dc8:	283ff126 	beq	r5,zero,8006d90 <__any_on+0x18>
 8006dcc:	19800017 	ldw	r6,0(r3)
 8006dd0:	3144d83a 	srl	r2,r6,r5
 8006dd4:	114a983a 	sll	r5,r2,r5
 8006dd8:	317ff51e 	bne	r6,r5,8006db0 <__any_on+0x38>
 8006ddc:	003fec06 	br	8006d90 <__any_on+0x18>
 8006de0:	f800283a 	ret
 8006de4:	0005883a 	mov	r2,zero
 8006de8:	f800283a 	ret

08006dec <_sbrk_r>:
 8006dec:	defffe04 	addi	sp,sp,-8
 8006df0:	dc000015 	stw	r16,0(sp)
 8006df4:	00820074 	movhi	r2,2049
 8006df8:	2021883a 	mov	r16,r4
 8006dfc:	2809883a 	mov	r4,r5
 8006e00:	dfc00115 	stw	ra,4(sp)
 8006e04:	100e4415 	stw	zero,14608(r2)
 8006e08:	800da280 	call	800da28 <sbrk>
 8006e0c:	10ffffd8 	cmpnei	r3,r2,-1
 8006e10:	18000426 	beq	r3,zero,8006e24 <_sbrk_r+0x38>
 8006e14:	dfc00117 	ldw	ra,4(sp)
 8006e18:	dc000017 	ldw	r16,0(sp)
 8006e1c:	dec00204 	addi	sp,sp,8
 8006e20:	f800283a 	ret
 8006e24:	00c20074 	movhi	r3,2049
 8006e28:	18ce4417 	ldw	r3,14608(r3)
 8006e2c:	183ff926 	beq	r3,zero,8006e14 <_sbrk_r+0x28>
 8006e30:	80c00015 	stw	r3,0(r16)
 8006e34:	dfc00117 	ldw	ra,4(sp)
 8006e38:	dc000017 	ldw	r16,0(sp)
 8006e3c:	dec00204 	addi	sp,sp,8
 8006e40:	f800283a 	ret

08006e44 <__sread>:
 8006e44:	defffe04 	addi	sp,sp,-8
 8006e48:	dc000015 	stw	r16,0(sp)
 8006e4c:	2821883a 	mov	r16,r5
 8006e50:	2940038f 	ldh	r5,14(r5)
 8006e54:	dfc00115 	stw	ra,4(sp)
 8006e58:	80091b80 	call	80091b8 <_read_r>
 8006e5c:	10000716 	blt	r2,zero,8006e7c <__sread+0x38>
 8006e60:	80c01417 	ldw	r3,80(r16)
 8006e64:	1887883a 	add	r3,r3,r2
 8006e68:	80c01415 	stw	r3,80(r16)
 8006e6c:	dfc00117 	ldw	ra,4(sp)
 8006e70:	dc000017 	ldw	r16,0(sp)
 8006e74:	dec00204 	addi	sp,sp,8
 8006e78:	f800283a 	ret
 8006e7c:	80c0030b 	ldhu	r3,12(r16)
 8006e80:	18fbffcc 	andi	r3,r3,61439
 8006e84:	80c0030d 	sth	r3,12(r16)
 8006e88:	dfc00117 	ldw	ra,4(sp)
 8006e8c:	dc000017 	ldw	r16,0(sp)
 8006e90:	dec00204 	addi	sp,sp,8
 8006e94:	f800283a 	ret

08006e98 <__seofread>:
 8006e98:	0005883a 	mov	r2,zero
 8006e9c:	f800283a 	ret

08006ea0 <__swrite>:
 8006ea0:	2880030b 	ldhu	r2,12(r5)
 8006ea4:	defffb04 	addi	sp,sp,-20
 8006ea8:	dcc00315 	stw	r19,12(sp)
 8006eac:	dc800215 	stw	r18,8(sp)
 8006eb0:	dc400115 	stw	r17,4(sp)
 8006eb4:	dc000015 	stw	r16,0(sp)
 8006eb8:	dfc00415 	stw	ra,16(sp)
 8006ebc:	10c0400c 	andi	r3,r2,256
 8006ec0:	2821883a 	mov	r16,r5
 8006ec4:	2023883a 	mov	r17,r4
 8006ec8:	3025883a 	mov	r18,r6
 8006ecc:	3827883a 	mov	r19,r7
 8006ed0:	2940038f 	ldh	r5,14(r5)
 8006ed4:	18000c1e 	bne	r3,zero,8006f08 <__swrite+0x68>
 8006ed8:	10bbffcc 	andi	r2,r2,61439
 8006edc:	980f883a 	mov	r7,r19
 8006ee0:	900d883a 	mov	r6,r18
 8006ee4:	8809883a 	mov	r4,r17
 8006ee8:	8080030d 	sth	r2,12(r16)
 8006eec:	dfc00417 	ldw	ra,16(sp)
 8006ef0:	dcc00317 	ldw	r19,12(sp)
 8006ef4:	dc800217 	ldw	r18,8(sp)
 8006ef8:	dc400117 	ldw	r17,4(sp)
 8006efc:	dc000017 	ldw	r16,0(sp)
 8006f00:	dec00504 	addi	sp,sp,20
 8006f04:	800853c1 	jmpi	800853c <_write_r>
 8006f08:	01c00084 	movi	r7,2
 8006f0c:	000d883a 	mov	r6,zero
 8006f10:	8008fd80 	call	8008fd8 <_lseek_r>
 8006f14:	8080030b 	ldhu	r2,12(r16)
 8006f18:	8140038f 	ldh	r5,14(r16)
 8006f1c:	003fee06 	br	8006ed8 <__swrite+0x38>

08006f20 <__sseek>:
 8006f20:	defffe04 	addi	sp,sp,-8
 8006f24:	dc000015 	stw	r16,0(sp)
 8006f28:	2821883a 	mov	r16,r5
 8006f2c:	2940038f 	ldh	r5,14(r5)
 8006f30:	dfc00115 	stw	ra,4(sp)
 8006f34:	8008fd80 	call	8008fd8 <_lseek_r>
 8006f38:	10ffffd8 	cmpnei	r3,r2,-1
 8006f3c:	18000826 	beq	r3,zero,8006f60 <__sseek+0x40>
 8006f40:	80c0030b 	ldhu	r3,12(r16)
 8006f44:	80801415 	stw	r2,80(r16)
 8006f48:	18c40014 	ori	r3,r3,4096
 8006f4c:	80c0030d 	sth	r3,12(r16)
 8006f50:	dfc00117 	ldw	ra,4(sp)
 8006f54:	dc000017 	ldw	r16,0(sp)
 8006f58:	dec00204 	addi	sp,sp,8
 8006f5c:	f800283a 	ret
 8006f60:	80c0030b 	ldhu	r3,12(r16)
 8006f64:	18fbffcc 	andi	r3,r3,61439
 8006f68:	80c0030d 	sth	r3,12(r16)
 8006f6c:	dfc00117 	ldw	ra,4(sp)
 8006f70:	dc000017 	ldw	r16,0(sp)
 8006f74:	dec00204 	addi	sp,sp,8
 8006f78:	f800283a 	ret

08006f7c <__sclose>:
 8006f7c:	2940038f 	ldh	r5,14(r5)
 8006f80:	80085a01 	jmpi	80085a0 <_close_r>

08006f84 <strlen>:
 8006f84:	208000cc 	andi	r2,r4,3
 8006f88:	10002026 	beq	r2,zero,800700c <strlen+0x88>
 8006f8c:	20800007 	ldb	r2,0(r4)
 8006f90:	10002026 	beq	r2,zero,8007014 <strlen+0x90>
 8006f94:	2005883a 	mov	r2,r4
 8006f98:	00000206 	br	8006fa4 <strlen+0x20>
 8006f9c:	10c00007 	ldb	r3,0(r2)
 8006fa0:	18001826 	beq	r3,zero,8007004 <strlen+0x80>
 8006fa4:	10800044 	addi	r2,r2,1
 8006fa8:	10c000cc 	andi	r3,r2,3
 8006fac:	183ffb1e 	bne	r3,zero,8006f9c <strlen+0x18>
 8006fb0:	11400017 	ldw	r5,0(r2)
 8006fb4:	01ffbff4 	movhi	r7,65279
 8006fb8:	39ffbfc4 	addi	r7,r7,-257
 8006fbc:	29c7883a 	add	r3,r5,r7
 8006fc0:	01a02074 	movhi	r6,32897
 8006fc4:	014a303a 	nor	r5,zero,r5
 8006fc8:	1946703a 	and	r3,r3,r5
 8006fcc:	31a02004 	addi	r6,r6,-32640
 8006fd0:	1986703a 	and	r3,r3,r6
 8006fd4:	1800091e 	bne	r3,zero,8006ffc <strlen+0x78>
 8006fd8:	10800104 	addi	r2,r2,4
 8006fdc:	11400017 	ldw	r5,0(r2)
 8006fe0:	29c7883a 	add	r3,r5,r7
 8006fe4:	014a303a 	nor	r5,zero,r5
 8006fe8:	1946703a 	and	r3,r3,r5
 8006fec:	1986703a 	and	r3,r3,r6
 8006ff0:	183ff926 	beq	r3,zero,8006fd8 <strlen+0x54>
 8006ff4:	00000106 	br	8006ffc <strlen+0x78>
 8006ff8:	10800044 	addi	r2,r2,1
 8006ffc:	10c00007 	ldb	r3,0(r2)
 8007000:	183ffd1e 	bne	r3,zero,8006ff8 <strlen+0x74>
 8007004:	1105c83a 	sub	r2,r2,r4
 8007008:	f800283a 	ret
 800700c:	2005883a 	mov	r2,r4
 8007010:	003fe706 	br	8006fb0 <strlen+0x2c>
 8007014:	0005883a 	mov	r2,zero
 8007018:	f800283a 	ret

0800701c <__sprint_r.part.0>:
 800701c:	28801917 	ldw	r2,100(r5)
 8007020:	defff604 	addi	sp,sp,-40
 8007024:	dd000415 	stw	r20,16(sp)
 8007028:	dfc00915 	stw	ra,36(sp)
 800702c:	df000815 	stw	fp,32(sp)
 8007030:	ddc00715 	stw	r23,28(sp)
 8007034:	dd800615 	stw	r22,24(sp)
 8007038:	dd400515 	stw	r21,20(sp)
 800703c:	dcc00315 	stw	r19,12(sp)
 8007040:	dc800215 	stw	r18,8(sp)
 8007044:	dc400115 	stw	r17,4(sp)
 8007048:	dc000015 	stw	r16,0(sp)
 800704c:	1088000c 	andi	r2,r2,8192
 8007050:	3029883a 	mov	r20,r6
 8007054:	10002c26 	beq	r2,zero,8007108 <__sprint_r.part.0+0xec>
 8007058:	30800217 	ldw	r2,8(r6)
 800705c:	2823883a 	mov	r17,r5
 8007060:	2027883a 	mov	r19,r4
 8007064:	35400017 	ldw	r21,0(r6)
 8007068:	05ffff04 	movi	r23,-4
 800706c:	10002426 	beq	r2,zero,8007100 <__sprint_r.part.0+0xe4>
 8007070:	ad800117 	ldw	r22,4(r21)
 8007074:	ac000017 	ldw	r16,0(r21)
 8007078:	b024d0ba 	srli	r18,r22,2
 800707c:	90001b26 	beq	r18,zero,80070ec <__sprint_r.part.0+0xd0>
 8007080:	0039883a 	mov	fp,zero
 8007084:	00000206 	br	8007090 <__sprint_r.part.0+0x74>
 8007088:	84000104 	addi	r16,r16,4
 800708c:	97001626 	beq	r18,fp,80070e8 <__sprint_r.part.0+0xcc>
 8007090:	81400017 	ldw	r5,0(r16)
 8007094:	880d883a 	mov	r6,r17
 8007098:	9809883a 	mov	r4,r19
 800709c:	800891c0 	call	800891c <_fputwc_r>
 80070a0:	10bfffe0 	cmpeqi	r2,r2,-1
 80070a4:	e7000044 	addi	fp,fp,1
 80070a8:	103ff726 	beq	r2,zero,8007088 <__sprint_r.part.0+0x6c>
 80070ac:	00bfffc4 	movi	r2,-1
 80070b0:	a0000215 	stw	zero,8(r20)
 80070b4:	a0000115 	stw	zero,4(r20)
 80070b8:	dfc00917 	ldw	ra,36(sp)
 80070bc:	df000817 	ldw	fp,32(sp)
 80070c0:	ddc00717 	ldw	r23,28(sp)
 80070c4:	dd800617 	ldw	r22,24(sp)
 80070c8:	dd400517 	ldw	r21,20(sp)
 80070cc:	dd000417 	ldw	r20,16(sp)
 80070d0:	dcc00317 	ldw	r19,12(sp)
 80070d4:	dc800217 	ldw	r18,8(sp)
 80070d8:	dc400117 	ldw	r17,4(sp)
 80070dc:	dc000017 	ldw	r16,0(sp)
 80070e0:	dec00a04 	addi	sp,sp,40
 80070e4:	f800283a 	ret
 80070e8:	a0800217 	ldw	r2,8(r20)
 80070ec:	b5ec703a 	and	r22,r22,r23
 80070f0:	1585c83a 	sub	r2,r2,r22
 80070f4:	a0800215 	stw	r2,8(r20)
 80070f8:	ad400204 	addi	r21,r21,8
 80070fc:	103fdc1e 	bne	r2,zero,8007070 <__sprint_r.part.0+0x54>
 8007100:	0005883a 	mov	r2,zero
 8007104:	003fea06 	br	80070b0 <__sprint_r.part.0+0x94>
 8007108:	8008a1c0 	call	8008a1c <__sfvwrite_r>
 800710c:	003fe806 	br	80070b0 <__sprint_r.part.0+0x94>

08007110 <__sprint_r>:
 8007110:	30c00217 	ldw	r3,8(r6)
 8007114:	18000126 	beq	r3,zero,800711c <__sprint_r+0xc>
 8007118:	800701c1 	jmpi	800701c <__sprint_r.part.0>
 800711c:	30000115 	stw	zero,4(r6)
 8007120:	0005883a 	mov	r2,zero
 8007124:	f800283a 	ret

08007128 <___vfiprintf_internal_r>:
 8007128:	deffd004 	addi	sp,sp,-192
 800712c:	df002e15 	stw	fp,184(sp)
 8007130:	dcc02915 	stw	r19,164(sp)
 8007134:	dc802815 	stw	r18,160(sp)
 8007138:	dfc02f15 	stw	ra,188(sp)
 800713c:	ddc02d15 	stw	r23,180(sp)
 8007140:	dd802c15 	stw	r22,176(sp)
 8007144:	dd402b15 	stw	r21,172(sp)
 8007148:	dd002a15 	stw	r20,168(sp)
 800714c:	dc402715 	stw	r17,156(sp)
 8007150:	dc002615 	stw	r16,152(sp)
 8007154:	d9c00315 	stw	r7,12(sp)
 8007158:	2027883a 	mov	r19,r4
 800715c:	2825883a 	mov	r18,r5
 8007160:	3039883a 	mov	fp,r6
 8007164:	20000226 	beq	r4,zero,8007170 <___vfiprintf_internal_r+0x48>
 8007168:	20800e17 	ldw	r2,56(r4)
 800716c:	1002ba26 	beq	r2,zero,8007c58 <___vfiprintf_internal_r+0xb30>
 8007170:	9080030b 	ldhu	r2,12(r18)
 8007174:	10c8000c 	andi	r3,r2,8192
 8007178:	1800061e 	bne	r3,zero,8007194 <___vfiprintf_internal_r+0x6c>
 800717c:	90c01917 	ldw	r3,100(r18)
 8007180:	0137ffc4 	movi	r4,-8193
 8007184:	10880014 	ori	r2,r2,8192
 8007188:	1906703a 	and	r3,r3,r4
 800718c:	9080030d 	sth	r2,12(r18)
 8007190:	90c01915 	stw	r3,100(r18)
 8007194:	10c0020c 	andi	r3,r2,8
 8007198:	18009426 	beq	r3,zero,80073ec <___vfiprintf_internal_r+0x2c4>
 800719c:	90c00417 	ldw	r3,16(r18)
 80071a0:	18009226 	beq	r3,zero,80073ec <___vfiprintf_internal_r+0x2c4>
 80071a4:	1080068c 	andi	r2,r2,26
 80071a8:	10800298 	cmpnei	r2,r2,10
 80071ac:	10009726 	beq	r2,zero,800740c <___vfiprintf_internal_r+0x2e4>
 80071b0:	dc401604 	addi	r17,sp,88
 80071b4:	dc400915 	stw	r17,36(sp)
 80071b8:	d8000b15 	stw	zero,44(sp)
 80071bc:	d8000a15 	stw	zero,40(sp)
 80071c0:	8811883a 	mov	r8,r17
 80071c4:	d8000415 	stw	zero,16(sp)
 80071c8:	d8000015 	stw	zero,0(sp)
 80071cc:	e0800007 	ldb	r2,0(fp)
 80071d0:	1000a226 	beq	r2,zero,800745c <___vfiprintf_internal_r+0x334>
 80071d4:	10800960 	cmpeqi	r2,r2,37
 80071d8:	1003eb1e 	bne	r2,zero,8008188 <___vfiprintf_internal_r+0x1060>
 80071dc:	e021883a 	mov	r16,fp
 80071e0:	00000206 	br	80071ec <___vfiprintf_internal_r+0xc4>
 80071e4:	18009226 	beq	r3,zero,8007430 <___vfiprintf_internal_r+0x308>
 80071e8:	a021883a 	mov	r16,r20
 80071ec:	80800047 	ldb	r2,1(r16)
 80071f0:	85000044 	addi	r20,r16,1
 80071f4:	10c00958 	cmpnei	r3,r2,37
 80071f8:	103ffa1e 	bne	r2,zero,80071e4 <___vfiprintf_internal_r+0xbc>
 80071fc:	a72bc83a 	sub	r21,r20,fp
 8007200:	a8009626 	beq	r21,zero,800745c <___vfiprintf_internal_r+0x334>
 8007204:	d8c00b17 	ldw	r3,44(sp)
 8007208:	d8800a17 	ldw	r2,40(sp)
 800720c:	47000015 	stw	fp,0(r8)
 8007210:	a8c7883a 	add	r3,r21,r3
 8007214:	10800044 	addi	r2,r2,1
 8007218:	d8800a15 	stw	r2,40(sp)
 800721c:	45400115 	stw	r21,4(r8)
 8007220:	d8c00b15 	stw	r3,44(sp)
 8007224:	10800208 	cmpgei	r2,r2,8
 8007228:	1000841e 	bne	r2,zero,800743c <___vfiprintf_internal_r+0x314>
 800722c:	42000204 	addi	r8,r8,8
 8007230:	d8c00017 	ldw	r3,0(sp)
 8007234:	80800047 	ldb	r2,1(r16)
 8007238:	1d47883a 	add	r3,r3,r21
 800723c:	d8c00015 	stw	r3,0(sp)
 8007240:	10008626 	beq	r2,zero,800745c <___vfiprintf_internal_r+0x334>
 8007244:	a0800047 	ldb	r2,1(r20)
 8007248:	a7000044 	addi	fp,r20,1
 800724c:	d8000845 	stb	zero,33(sp)
 8007250:	000b883a 	mov	r5,zero
 8007254:	000d883a 	mov	r6,zero
 8007258:	027fffc4 	movi	r9,-1
 800725c:	0021883a 	mov	r16,zero
 8007260:	0019883a 	mov	r12,zero
 8007264:	e7000044 	addi	fp,fp,1
 8007268:	10fff804 	addi	r3,r2,-32
 800726c:	19001668 	cmpgeui	r4,r3,89
 8007270:	20009e1e 	bne	r4,zero,80074ec <___vfiprintf_internal_r+0x3c4>
 8007274:	180690ba 	slli	r3,r3,2
 8007278:	01020034 	movhi	r4,2048
 800727c:	1909883a 	add	r4,r3,r4
 8007280:	20dca217 	ldw	r3,29320(r4)
 8007284:	1800683a 	jmp	r3
 8007288:	080075c4 	addi	zero,at,471
 800728c:	080074ec 	andhi	zero,at,467
 8007290:	080074ec 	andhi	zero,at,467
 8007294:	080075b8 	rdprs	zero,at,470
 8007298:	080074ec 	andhi	zero,at,467
 800729c:	080074ec 	andhi	zero,at,467
 80072a0:	080074ec 	andhi	zero,at,467
 80072a4:	080074ec 	andhi	zero,at,467
 80072a8:	080074ec 	andhi	zero,at,467
 80072ac:	080074ec 	andhi	zero,at,467
 80072b0:	08007590 	cmplti	zero,at,470
 80072b4:	08007580 	call	800758 <__alt_mem_onchip_memory2_0+0x800758>
 80072b8:	080074ec 	andhi	zero,at,467
 80072bc:	08007568 	cmpgeui	zero,at,469
 80072c0:	0800751c 	xori	zero,at,468
 80072c4:	080074ec 	andhi	zero,at,467
 80072c8:	08007510 	cmplti	zero,at,468
 80072cc:	080074b4 	orhi	zero,at,466
 80072d0:	080074b4 	orhi	zero,at,466
 80072d4:	080074b4 	orhi	zero,at,466
 80072d8:	080074b4 	orhi	zero,at,466
 80072dc:	080074b4 	orhi	zero,at,466
 80072e0:	080074b4 	orhi	zero,at,466
 80072e4:	080074b4 	orhi	zero,at,466
 80072e8:	080074b4 	orhi	zero,at,466
 80072ec:	080074b4 	orhi	zero,at,466
 80072f0:	080074ec 	andhi	zero,at,467
 80072f4:	080074ec 	andhi	zero,at,467
 80072f8:	080074ec 	andhi	zero,at,467
 80072fc:	080074ec 	andhi	zero,at,467
 8007300:	080074ec 	andhi	zero,at,467
 8007304:	080074ec 	andhi	zero,at,467
 8007308:	080074ec 	andhi	zero,at,467
 800730c:	080074ec 	andhi	zero,at,467
 8007310:	080074ec 	andhi	zero,at,467
 8007314:	080074ec 	andhi	zero,at,467
 8007318:	08007b80 	call	8007b8 <__alt_mem_onchip_memory2_0+0x8007b8>
 800731c:	080074ec 	andhi	zero,at,467
 8007320:	080074ec 	andhi	zero,at,467
 8007324:	080074ec 	andhi	zero,at,467
 8007328:	080074ec 	andhi	zero,at,467
 800732c:	080074ec 	andhi	zero,at,467
 8007330:	080074ec 	andhi	zero,at,467
 8007334:	080074ec 	andhi	zero,at,467
 8007338:	080074ec 	andhi	zero,at,467
 800733c:	080074ec 	andhi	zero,at,467
 8007340:	080074ec 	andhi	zero,at,467
 8007344:	08007b18 	cmpnei	zero,at,492
 8007348:	080074ec 	andhi	zero,at,467
 800734c:	080074ec 	andhi	zero,at,467
 8007350:	080074ec 	andhi	zero,at,467
 8007354:	080074ec 	andhi	zero,at,467
 8007358:	080074ec 	andhi	zero,at,467
 800735c:	08007b4c 	andi	zero,at,493
 8007360:	080074ec 	andhi	zero,at,467
 8007364:	080074ec 	andhi	zero,at,467
 8007368:	0800771c 	xori	zero,at,476
 800736c:	080074ec 	andhi	zero,at,467
 8007370:	080074ec 	andhi	zero,at,467
 8007374:	080074ec 	andhi	zero,at,467
 8007378:	080074ec 	andhi	zero,at,467
 800737c:	080074ec 	andhi	zero,at,467
 8007380:	080074ec 	andhi	zero,at,467
 8007384:	080074ec 	andhi	zero,at,467
 8007388:	080074ec 	andhi	zero,at,467
 800738c:	080074ec 	andhi	zero,at,467
 8007390:	080074ec 	andhi	zero,at,467
 8007394:	080078b8 	rdprs	zero,at,482
 8007398:	08007844 	addi	zero,at,481
 800739c:	080074ec 	andhi	zero,at,467
 80073a0:	080074ec 	andhi	zero,at,467
 80073a4:	080074ec 	andhi	zero,at,467
 80073a8:	0800764c 	andi	zero,at,473
 80073ac:	08007844 	addi	zero,at,481
 80073b0:	080074ec 	andhi	zero,at,467
 80073b4:	080074ec 	andhi	zero,at,467
 80073b8:	08007638 	rdprs	zero,at,472
 80073bc:	080074ec 	andhi	zero,at,467
 80073c0:	08007804 	addi	zero,at,480
 80073c4:	080076dc 	xori	zero,at,475
 80073c8:	08007664 	muli	zero,at,473
 80073cc:	08007658 	cmpnei	zero,at,473
 80073d0:	080074ec 	andhi	zero,at,467
 80073d4:	080077a4 	muli	zero,at,478
 80073d8:	080074ec 	andhi	zero,at,467
 80073dc:	08007764 	muli	zero,at,477
 80073e0:	080074ec 	andhi	zero,at,467
 80073e4:	080074ec 	andhi	zero,at,467
 80073e8:	080075f0 	cmpltui	zero,at,471
 80073ec:	900b883a 	mov	r5,r18
 80073f0:	9809883a 	mov	r4,r19
 80073f4:	8002ca80 	call	8002ca8 <__swsetup_r>
 80073f8:	10040b1e 	bne	r2,zero,8008428 <___vfiprintf_internal_r+0x1300>
 80073fc:	9080030b 	ldhu	r2,12(r18)
 8007400:	1080068c 	andi	r2,r2,26
 8007404:	10800298 	cmpnei	r2,r2,10
 8007408:	103f691e 	bne	r2,zero,80071b0 <___vfiprintf_internal_r+0x88>
 800740c:	9080038f 	ldh	r2,14(r18)
 8007410:	103f6716 	blt	r2,zero,80071b0 <___vfiprintf_internal_r+0x88>
 8007414:	d9c00317 	ldw	r7,12(sp)
 8007418:	e00d883a 	mov	r6,fp
 800741c:	900b883a 	mov	r5,r18
 8007420:	9809883a 	mov	r4,r19
 8007424:	800847c0 	call	800847c <__sbprintf>
 8007428:	d8800015 	stw	r2,0(sp)
 800742c:	00001406 	br	8007480 <___vfiprintf_internal_r+0x358>
 8007430:	a72bc83a 	sub	r21,r20,fp
 8007434:	a83f8326 	beq	r21,zero,8007244 <___vfiprintf_internal_r+0x11c>
 8007438:	003f7206 	br	8007204 <___vfiprintf_internal_r+0xdc>
 800743c:	18032f26 	beq	r3,zero,80080fc <___vfiprintf_internal_r+0xfd4>
 8007440:	d9800904 	addi	r6,sp,36
 8007444:	900b883a 	mov	r5,r18
 8007448:	9809883a 	mov	r4,r19
 800744c:	800701c0 	call	800701c <__sprint_r.part.0>
 8007450:	1000081e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007454:	8811883a 	mov	r8,r17
 8007458:	003f7506 	br	8007230 <___vfiprintf_internal_r+0x108>
 800745c:	d8800b17 	ldw	r2,44(sp)
 8007460:	10000426 	beq	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007464:	d9800904 	addi	r6,sp,36
 8007468:	900b883a 	mov	r5,r18
 800746c:	9809883a 	mov	r4,r19
 8007470:	800701c0 	call	800701c <__sprint_r.part.0>
 8007474:	9080030b 	ldhu	r2,12(r18)
 8007478:	1080100c 	andi	r2,r2,64
 800747c:	1003ea1e 	bne	r2,zero,8008428 <___vfiprintf_internal_r+0x1300>
 8007480:	d8800017 	ldw	r2,0(sp)
 8007484:	dfc02f17 	ldw	ra,188(sp)
 8007488:	df002e17 	ldw	fp,184(sp)
 800748c:	ddc02d17 	ldw	r23,180(sp)
 8007490:	dd802c17 	ldw	r22,176(sp)
 8007494:	dd402b17 	ldw	r21,172(sp)
 8007498:	dd002a17 	ldw	r20,168(sp)
 800749c:	dcc02917 	ldw	r19,164(sp)
 80074a0:	dc802817 	ldw	r18,160(sp)
 80074a4:	dc402717 	ldw	r17,156(sp)
 80074a8:	dc002617 	ldw	r16,152(sp)
 80074ac:	dec03004 	addi	sp,sp,192
 80074b0:	f800283a 	ret
 80074b4:	0021883a 	mov	r16,zero
 80074b8:	113ff404 	addi	r4,r2,-48
 80074bc:	800690ba 	slli	r3,r16,2
 80074c0:	e7000044 	addi	fp,fp,1
 80074c4:	e0bfffc7 	ldb	r2,-1(fp)
 80074c8:	1c21883a 	add	r16,r3,r16
 80074cc:	8421883a 	add	r16,r16,r16
 80074d0:	2421883a 	add	r16,r4,r16
 80074d4:	113ff404 	addi	r4,r2,-48
 80074d8:	20c002b0 	cmpltui	r3,r4,10
 80074dc:	183ff71e 	bne	r3,zero,80074bc <___vfiprintf_internal_r+0x394>
 80074e0:	10fff804 	addi	r3,r2,-32
 80074e4:	19001668 	cmpgeui	r4,r3,89
 80074e8:	203f6226 	beq	r4,zero,8007274 <___vfiprintf_internal_r+0x14c>
 80074ec:	29403fcc 	andi	r5,r5,255
 80074f0:	2803ab1e 	bne	r5,zero,80083a0 <___vfiprintf_internal_r+0x1278>
 80074f4:	103fd926 	beq	r2,zero,800745c <___vfiprintf_internal_r+0x334>
 80074f8:	d8800c05 	stb	r2,48(sp)
 80074fc:	d8000845 	stb	zero,33(sp)
 8007500:	05400044 	movi	r21,1
 8007504:	05800044 	movi	r22,1
 8007508:	ddc00c04 	addi	r23,sp,48
 800750c:	0000f306 	br	80078dc <___vfiprintf_internal_r+0x7b4>
 8007510:	63002014 	ori	r12,r12,128
 8007514:	e0800007 	ldb	r2,0(fp)
 8007518:	003f5206 	br	8007264 <___vfiprintf_internal_r+0x13c>
 800751c:	e0800007 	ldb	r2,0(fp)
 8007520:	e0c00044 	addi	r3,fp,1
 8007524:	11000aa0 	cmpeqi	r4,r2,42
 8007528:	2003c21e 	bne	r4,zero,8008434 <___vfiprintf_internal_r+0x130c>
 800752c:	113ff404 	addi	r4,r2,-48
 8007530:	21c002b0 	cmpltui	r7,r4,10
 8007534:	1839883a 	mov	fp,r3
 8007538:	0013883a 	mov	r9,zero
 800753c:	383f4a26 	beq	r7,zero,8007268 <___vfiprintf_internal_r+0x140>
 8007540:	480690ba 	slli	r3,r9,2
 8007544:	e7000044 	addi	fp,fp,1
 8007548:	e0bfffc7 	ldb	r2,-1(fp)
 800754c:	1a53883a 	add	r9,r3,r9
 8007550:	4a53883a 	add	r9,r9,r9
 8007554:	4913883a 	add	r9,r9,r4
 8007558:	113ff404 	addi	r4,r2,-48
 800755c:	20c002b0 	cmpltui	r3,r4,10
 8007560:	183ff71e 	bne	r3,zero,8007540 <___vfiprintf_internal_r+0x418>
 8007564:	003f4006 	br	8007268 <___vfiprintf_internal_r+0x140>
 8007568:	e0800003 	ldbu	r2,0(fp)
 800756c:	10803fcc 	andi	r2,r2,255
 8007570:	1080201c 	xori	r2,r2,128
 8007574:	63000114 	ori	r12,r12,4
 8007578:	10bfe004 	addi	r2,r2,-128
 800757c:	003f3906 	br	8007264 <___vfiprintf_internal_r+0x13c>
 8007580:	01400044 	movi	r5,1
 8007584:	01800ac4 	movi	r6,43
 8007588:	e0800007 	ldb	r2,0(fp)
 800758c:	003f3506 	br	8007264 <___vfiprintf_internal_r+0x13c>
 8007590:	d8800317 	ldw	r2,12(sp)
 8007594:	14000017 	ldw	r16,0(r2)
 8007598:	15c00104 	addi	r23,r2,4
 800759c:	e0800003 	ldbu	r2,0(fp)
 80075a0:	80031416 	blt	r16,zero,80081f4 <___vfiprintf_internal_r+0x10cc>
 80075a4:	ddc00315 	stw	r23,12(sp)
 80075a8:	10803fcc 	andi	r2,r2,255
 80075ac:	1080201c 	xori	r2,r2,128
 80075b0:	10bfe004 	addi	r2,r2,-128
 80075b4:	003f2b06 	br	8007264 <___vfiprintf_internal_r+0x13c>
 80075b8:	63000054 	ori	r12,r12,1
 80075bc:	e0800007 	ldb	r2,0(fp)
 80075c0:	003f2806 	br	8007264 <___vfiprintf_internal_r+0x13c>
 80075c4:	30c03fcc 	andi	r3,r6,255
 80075c8:	18c0201c 	xori	r3,r3,128
 80075cc:	18ffe004 	addi	r3,r3,-128
 80075d0:	e0800003 	ldbu	r2,0(fp)
 80075d4:	183ff41e 	bne	r3,zero,80075a8 <___vfiprintf_internal_r+0x480>
 80075d8:	10803fcc 	andi	r2,r2,255
 80075dc:	1080201c 	xori	r2,r2,128
 80075e0:	01400044 	movi	r5,1
 80075e4:	01800804 	movi	r6,32
 80075e8:	10bfe004 	addi	r2,r2,-128
 80075ec:	003f1d06 	br	8007264 <___vfiprintf_internal_r+0x13c>
 80075f0:	29403fcc 	andi	r5,r5,255
 80075f4:	2803741e 	bne	r5,zero,80083c8 <___vfiprintf_internal_r+0x12a0>
 80075f8:	00c20074 	movhi	r3,2049
 80075fc:	18fefc04 	addi	r3,r3,-1040
 8007600:	d8c00415 	stw	r3,16(sp)
 8007604:	60c0080c 	andi	r3,r12,32
 8007608:	18004b26 	beq	r3,zero,8007738 <___vfiprintf_internal_r+0x610>
 800760c:	d8c00317 	ldw	r3,12(sp)
 8007610:	1d400017 	ldw	r21,0(r3)
 8007614:	1d800117 	ldw	r22,4(r3)
 8007618:	18c00204 	addi	r3,r3,8
 800761c:	d8c00315 	stw	r3,12(sp)
 8007620:	60c0004c 	andi	r3,r12,1
 8007624:	18000226 	beq	r3,zero,8007630 <___vfiprintf_internal_r+0x508>
 8007628:	ad86b03a 	or	r3,r21,r22
 800762c:	1802df1e 	bne	r3,zero,80081ac <___vfiprintf_internal_r+0x1084>
 8007630:	00800084 	movi	r2,2
 8007634:	00001906 	br	800769c <___vfiprintf_internal_r+0x574>
 8007638:	e0800007 	ldb	r2,0(fp)
 800763c:	10c01b18 	cmpnei	r3,r2,108
 8007640:	18033026 	beq	r3,zero,8008304 <___vfiprintf_internal_r+0x11dc>
 8007644:	63000414 	ori	r12,r12,16
 8007648:	003f0606 	br	8007264 <___vfiprintf_internal_r+0x13c>
 800764c:	63001014 	ori	r12,r12,64
 8007650:	e0800007 	ldb	r2,0(fp)
 8007654:	003f0306 	br	8007264 <___vfiprintf_internal_r+0x13c>
 8007658:	63000814 	ori	r12,r12,32
 800765c:	e0800007 	ldb	r2,0(fp)
 8007660:	003f0006 	br	8007264 <___vfiprintf_internal_r+0x13c>
 8007664:	d8c00317 	ldw	r3,12(sp)
 8007668:	00800c04 	movi	r2,48
 800766c:	d8800885 	stb	r2,34(sp)
 8007670:	00801e04 	movi	r2,120
 8007674:	01020074 	movhi	r4,2049
 8007678:	d88008c5 	stb	r2,35(sp)
 800767c:	1d400017 	ldw	r21,0(r3)
 8007680:	18800104 	addi	r2,r3,4
 8007684:	d8800315 	stw	r2,12(sp)
 8007688:	20befc04 	addi	r2,r4,-1040
 800768c:	d8800415 	stw	r2,16(sp)
 8007690:	002d883a 	mov	r22,zero
 8007694:	63000094 	ori	r12,r12,2
 8007698:	00800084 	movi	r2,2
 800769c:	d8000845 	stb	zero,33(sp)
 80076a0:	48ffffe0 	cmpeqi	r3,r9,-1
 80076a4:	001b883a 	mov	r13,zero
 80076a8:	18014c1e 	bne	r3,zero,8007bdc <___vfiprintf_internal_r+0xab4>
 80076ac:	053fdfc4 	movi	r20,-129
 80076b0:	ad86b03a 	or	r3,r21,r22
 80076b4:	6528703a 	and	r20,r12,r20
 80076b8:	1802411e 	bne	r3,zero,8007fc0 <___vfiprintf_internal_r+0xe98>
 80076bc:	48030d1e 	bne	r9,zero,80082f4 <___vfiprintf_internal_r+0x11cc>
 80076c0:	1000791e 	bne	r2,zero,80078a8 <___vfiprintf_internal_r+0x780>
 80076c4:	6580004c 	andi	r22,r12,1
 80076c8:	b002b126 	beq	r22,zero,8008190 <___vfiprintf_internal_r+0x1068>
 80076cc:	00800c04 	movi	r2,48
 80076d0:	d88015c5 	stb	r2,87(sp)
 80076d4:	ddc015c4 	addi	r23,sp,87
 80076d8:	00017e06 	br	8007cd4 <___vfiprintf_internal_r+0xbac>
 80076dc:	29403fcc 	andi	r5,r5,255
 80076e0:	2803461e 	bne	r5,zero,80083fc <___vfiprintf_internal_r+0x12d4>
 80076e4:	6080080c 	andi	r2,r12,32
 80076e8:	10016b1e 	bne	r2,zero,8007c98 <___vfiprintf_internal_r+0xb70>
 80076ec:	d8800317 	ldw	r2,12(sp)
 80076f0:	60c0040c 	andi	r3,r12,16
 80076f4:	15400017 	ldw	r21,0(r2)
 80076f8:	10800104 	addi	r2,r2,4
 80076fc:	18010d1e 	bne	r3,zero,8007b34 <___vfiprintf_internal_r+0xa0c>
 8007700:	60c0100c 	andi	r3,r12,64
 8007704:	18031326 	beq	r3,zero,8008354 <___vfiprintf_internal_r+0x122c>
 8007708:	d8800315 	stw	r2,12(sp)
 800770c:	ad7fffcc 	andi	r21,r21,65535
 8007710:	002d883a 	mov	r22,zero
 8007714:	0005883a 	mov	r2,zero
 8007718:	003fe006 	br	800769c <___vfiprintf_internal_r+0x574>
 800771c:	29403fcc 	andi	r5,r5,255
 8007720:	2803251e 	bne	r5,zero,80083b8 <___vfiprintf_internal_r+0x1290>
 8007724:	00c20074 	movhi	r3,2049
 8007728:	18fef704 	addi	r3,r3,-1060
 800772c:	d8c00415 	stw	r3,16(sp)
 8007730:	60c0080c 	andi	r3,r12,32
 8007734:	183fb51e 	bne	r3,zero,800760c <___vfiprintf_internal_r+0x4e4>
 8007738:	d9000317 	ldw	r4,12(sp)
 800773c:	60c0040c 	andi	r3,r12,16
 8007740:	25400017 	ldw	r21,0(r4)
 8007744:	21000104 	addi	r4,r4,4
 8007748:	d9000315 	stw	r4,12(sp)
 800774c:	18026e1e 	bne	r3,zero,8008108 <___vfiprintf_internal_r+0xfe0>
 8007750:	60c0100c 	andi	r3,r12,64
 8007754:	18026c26 	beq	r3,zero,8008108 <___vfiprintf_internal_r+0xfe0>
 8007758:	ad7fffcc 	andi	r21,r21,65535
 800775c:	002d883a 	mov	r22,zero
 8007760:	003faf06 	br	8007620 <___vfiprintf_internal_r+0x4f8>
 8007764:	29403fcc 	andi	r5,r5,255
 8007768:	2803151e 	bne	r5,zero,80083c0 <___vfiprintf_internal_r+0x1298>
 800776c:	6080080c 	andi	r2,r12,32
 8007770:	10013b1e 	bne	r2,zero,8007c60 <___vfiprintf_internal_r+0xb38>
 8007774:	d8800317 	ldw	r2,12(sp)
 8007778:	60c0040c 	andi	r3,r12,16
 800777c:	15400017 	ldw	r21,0(r2)
 8007780:	10800104 	addi	r2,r2,4
 8007784:	1800f81e 	bne	r3,zero,8007b68 <___vfiprintf_internal_r+0xa40>
 8007788:	60c0100c 	andi	r3,r12,64
 800778c:	1802ed26 	beq	r3,zero,8008344 <___vfiprintf_internal_r+0x121c>
 8007790:	d8800315 	stw	r2,12(sp)
 8007794:	ad7fffcc 	andi	r21,r21,65535
 8007798:	002d883a 	mov	r22,zero
 800779c:	00800044 	movi	r2,1
 80077a0:	003fbe06 	br	800769c <___vfiprintf_internal_r+0x574>
 80077a4:	d8800317 	ldw	r2,12(sp)
 80077a8:	d8000845 	stb	zero,33(sp)
 80077ac:	15c00017 	ldw	r23,0(r2)
 80077b0:	15000104 	addi	r20,r2,4
 80077b4:	b802da26 	beq	r23,zero,8008320 <___vfiprintf_internal_r+0x11f8>
 80077b8:	48bfffe0 	cmpeqi	r2,r9,-1
 80077bc:	1002901e 	bne	r2,zero,8008200 <___vfiprintf_internal_r+0x10d8>
 80077c0:	480d883a 	mov	r6,r9
 80077c4:	000b883a 	mov	r5,zero
 80077c8:	b809883a 	mov	r4,r23
 80077cc:	da000315 	stw	r8,12(sp)
 80077d0:	db000215 	stw	r12,8(sp)
 80077d4:	da400115 	stw	r9,4(sp)
 80077d8:	8005c600 	call	8005c60 <memchr>
 80077dc:	da400117 	ldw	r9,4(sp)
 80077e0:	db000217 	ldw	r12,8(sp)
 80077e4:	da000317 	ldw	r8,12(sp)
 80077e8:	1002ef26 	beq	r2,zero,80083a8 <___vfiprintf_internal_r+0x1280>
 80077ec:	15edc83a 	sub	r22,r2,r23
 80077f0:	b02b883a 	mov	r21,r22
 80077f4:	b000010e 	bge	r22,zero,80077fc <___vfiprintf_internal_r+0x6d4>
 80077f8:	002b883a 	mov	r21,zero
 80077fc:	dd000315 	stw	r20,12(sp)
 8007800:	00003606 	br	80078dc <___vfiprintf_internal_r+0x7b4>
 8007804:	29403fcc 	andi	r5,r5,255
 8007808:	2802fa1e 	bne	r5,zero,80083f4 <___vfiprintf_internal_r+0x12cc>
 800780c:	d9000317 	ldw	r4,12(sp)
 8007810:	6080080c 	andi	r2,r12,32
 8007814:	20c00104 	addi	r3,r4,4
 8007818:	10026a1e 	bne	r2,zero,80081c4 <___vfiprintf_internal_r+0x109c>
 800781c:	6080040c 	andi	r2,r12,16
 8007820:	1002891e 	bne	r2,zero,8008248 <___vfiprintf_internal_r+0x1120>
 8007824:	6300100c 	andi	r12,r12,64
 8007828:	60028726 	beq	r12,zero,8008248 <___vfiprintf_internal_r+0x1120>
 800782c:	d8800317 	ldw	r2,12(sp)
 8007830:	d8c00315 	stw	r3,12(sp)
 8007834:	d8c00017 	ldw	r3,0(sp)
 8007838:	10800017 	ldw	r2,0(r2)
 800783c:	10c0000d 	sth	r3,0(r2)
 8007840:	003e6206 	br	80071cc <___vfiprintf_internal_r+0xa4>
 8007844:	29403fcc 	andi	r5,r5,255
 8007848:	2802e81e 	bne	r5,zero,80083ec <___vfiprintf_internal_r+0x12c4>
 800784c:	6080080c 	andi	r2,r12,32
 8007850:	10010a1e 	bne	r2,zero,8007c7c <___vfiprintf_internal_r+0xb54>
 8007854:	d8800317 	ldw	r2,12(sp)
 8007858:	60c0040c 	andi	r3,r12,16
 800785c:	10800104 	addi	r2,r2,4
 8007860:	1800ce1e 	bne	r3,zero,8007b9c <___vfiprintf_internal_r+0xa74>
 8007864:	60c0100c 	andi	r3,r12,64
 8007868:	1800cc26 	beq	r3,zero,8007b9c <___vfiprintf_internal_r+0xa74>
 800786c:	d8c00317 	ldw	r3,12(sp)
 8007870:	d8800315 	stw	r2,12(sp)
 8007874:	1d40000f 	ldh	r21,0(r3)
 8007878:	a82dd7fa 	srai	r22,r21,31
 800787c:	b005883a 	mov	r2,r22
 8007880:	1000cc16 	blt	r2,zero,8007bb4 <___vfiprintf_internal_r+0xa8c>
 8007884:	48bfffd8 	cmpnei	r2,r9,-1
 8007888:	db400843 	ldbu	r13,33(sp)
 800788c:	10010926 	beq	r2,zero,8007cb4 <___vfiprintf_internal_r+0xb8c>
 8007890:	00ffdfc4 	movi	r3,-129
 8007894:	ad84b03a 	or	r2,r21,r22
 8007898:	60d8703a 	and	r12,r12,r3
 800789c:	1001051e 	bne	r2,zero,8007cb4 <___vfiprintf_internal_r+0xb8c>
 80078a0:	4801071e 	bne	r9,zero,8007cc0 <___vfiprintf_internal_r+0xb98>
 80078a4:	6029883a 	mov	r20,r12
 80078a8:	0013883a 	mov	r9,zero
 80078ac:	002d883a 	mov	r22,zero
 80078b0:	882f883a 	mov	r23,r17
 80078b4:	00010706 	br	8007cd4 <___vfiprintf_internal_r+0xbac>
 80078b8:	d8c00317 	ldw	r3,12(sp)
 80078bc:	d8000845 	stb	zero,33(sp)
 80078c0:	05400044 	movi	r21,1
 80078c4:	18800017 	ldw	r2,0(r3)
 80078c8:	18c00104 	addi	r3,r3,4
 80078cc:	d8c00315 	stw	r3,12(sp)
 80078d0:	d8800c05 	stb	r2,48(sp)
 80078d4:	05800044 	movi	r22,1
 80078d8:	ddc00c04 	addi	r23,sp,48
 80078dc:	6029883a 	mov	r20,r12
 80078e0:	0013883a 	mov	r9,zero
 80078e4:	a340008c 	andi	r13,r20,2
 80078e8:	68000126 	beq	r13,zero,80078f0 <___vfiprintf_internal_r+0x7c8>
 80078ec:	ad400084 	addi	r21,r21,2
 80078f0:	d9000a17 	ldw	r4,40(sp)
 80078f4:	a300210c 	andi	r12,r20,132
 80078f8:	d8800b17 	ldw	r2,44(sp)
 80078fc:	21800044 	addi	r6,r4,1
 8007900:	300b883a 	mov	r5,r6
 8007904:	6000021e 	bne	r12,zero,8007910 <___vfiprintf_internal_r+0x7e8>
 8007908:	8547c83a 	sub	r3,r16,r21
 800790c:	00c1ae16 	blt	zero,r3,8007fc8 <___vfiprintf_internal_r+0xea0>
 8007910:	d9800847 	ldb	r6,33(sp)
 8007914:	40c00204 	addi	r3,r8,8
 8007918:	30000d26 	beq	r6,zero,8007950 <___vfiprintf_internal_r+0x828>
 800791c:	d9000844 	addi	r4,sp,33
 8007920:	10800044 	addi	r2,r2,1
 8007924:	41000015 	stw	r4,0(r8)
 8007928:	01000044 	movi	r4,1
 800792c:	41000115 	stw	r4,4(r8)
 8007930:	d8800b15 	stw	r2,44(sp)
 8007934:	d9400a15 	stw	r5,40(sp)
 8007938:	29000208 	cmpgei	r4,r5,8
 800793c:	2001831e 	bne	r4,zero,8007f4c <___vfiprintf_internal_r+0xe24>
 8007940:	2809883a 	mov	r4,r5
 8007944:	1811883a 	mov	r8,r3
 8007948:	29400044 	addi	r5,r5,1
 800794c:	18c00204 	addi	r3,r3,8
 8007950:	68001826 	beq	r13,zero,80079b4 <___vfiprintf_internal_r+0x88c>
 8007954:	d9000884 	addi	r4,sp,34
 8007958:	10800084 	addi	r2,r2,2
 800795c:	41000015 	stw	r4,0(r8)
 8007960:	01000084 	movi	r4,2
 8007964:	41000115 	stw	r4,4(r8)
 8007968:	d8800b15 	stw	r2,44(sp)
 800796c:	d9400a15 	stw	r5,40(sp)
 8007970:	29000208 	cmpgei	r4,r5,8
 8007974:	20018d26 	beq	r4,zero,8007fac <___vfiprintf_internal_r+0xe84>
 8007978:	1001ed26 	beq	r2,zero,8008130 <___vfiprintf_internal_r+0x1008>
 800797c:	d9800904 	addi	r6,sp,36
 8007980:	900b883a 	mov	r5,r18
 8007984:	9809883a 	mov	r4,r19
 8007988:	da400215 	stw	r9,8(sp)
 800798c:	db000115 	stw	r12,4(sp)
 8007990:	800701c0 	call	800701c <__sprint_r.part.0>
 8007994:	103eb71e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007998:	d9000a17 	ldw	r4,40(sp)
 800799c:	d8800b17 	ldw	r2,44(sp)
 80079a0:	da400217 	ldw	r9,8(sp)
 80079a4:	db000117 	ldw	r12,4(sp)
 80079a8:	d8c01804 	addi	r3,sp,96
 80079ac:	21400044 	addi	r5,r4,1
 80079b0:	8811883a 	mov	r8,r17
 80079b4:	63002018 	cmpnei	r12,r12,128
 80079b8:	6000e326 	beq	r12,zero,8007d48 <___vfiprintf_internal_r+0xc20>
 80079bc:	4d93c83a 	sub	r9,r9,r22
 80079c0:	02412216 	blt	zero,r9,8007e4c <___vfiprintf_internal_r+0xd24>
 80079c4:	b085883a 	add	r2,r22,r2
 80079c8:	d9400a15 	stw	r5,40(sp)
 80079cc:	45c00015 	stw	r23,0(r8)
 80079d0:	45800115 	stw	r22,4(r8)
 80079d4:	d8800b15 	stw	r2,44(sp)
 80079d8:	29400210 	cmplti	r5,r5,8
 80079dc:	2800081e 	bne	r5,zero,8007a00 <___vfiprintf_internal_r+0x8d8>
 80079e0:	10001426 	beq	r2,zero,8007a34 <___vfiprintf_internal_r+0x90c>
 80079e4:	d9800904 	addi	r6,sp,36
 80079e8:	900b883a 	mov	r5,r18
 80079ec:	9809883a 	mov	r4,r19
 80079f0:	800701c0 	call	800701c <__sprint_r.part.0>
 80079f4:	103e9f1e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 80079f8:	d8800b17 	ldw	r2,44(sp)
 80079fc:	8807883a 	mov	r3,r17
 8007a00:	a500010c 	andi	r20,r20,4
 8007a04:	a0000226 	beq	r20,zero,8007a10 <___vfiprintf_internal_r+0x8e8>
 8007a08:	8569c83a 	sub	r20,r16,r21
 8007a0c:	05000f16 	blt	zero,r20,8007a4c <___vfiprintf_internal_r+0x924>
 8007a10:	8540010e 	bge	r16,r21,8007a18 <___vfiprintf_internal_r+0x8f0>
 8007a14:	a821883a 	mov	r16,r21
 8007a18:	d8c00017 	ldw	r3,0(sp)
 8007a1c:	1c07883a 	add	r3,r3,r16
 8007a20:	d8c00015 	stw	r3,0(sp)
 8007a24:	10013f1e 	bne	r2,zero,8007f24 <___vfiprintf_internal_r+0xdfc>
 8007a28:	d8000a15 	stw	zero,40(sp)
 8007a2c:	8811883a 	mov	r8,r17
 8007a30:	003de606 	br	80071cc <___vfiprintf_internal_r+0xa4>
 8007a34:	d8000a15 	stw	zero,40(sp)
 8007a38:	a500010c 	andi	r20,r20,4
 8007a3c:	a0019d26 	beq	r20,zero,80080b4 <___vfiprintf_internal_r+0xf8c>
 8007a40:	8569c83a 	sub	r20,r16,r21
 8007a44:	05019b0e 	bge	zero,r20,80080b4 <___vfiprintf_internal_r+0xf8c>
 8007a48:	8807883a 	mov	r3,r17
 8007a4c:	a1000450 	cmplti	r4,r20,17
 8007a50:	01c20074 	movhi	r7,2049
 8007a54:	d9400a17 	ldw	r5,40(sp)
 8007a58:	20026c1e 	bne	r4,zero,800840c <___vfiprintf_internal_r+0x12e4>
 8007a5c:	39ff5d04 	addi	r7,r7,-652
 8007a60:	05800404 	movi	r22,16
 8007a64:	00000606 	br	8007a80 <___vfiprintf_internal_r+0x958>
 8007a68:	29800084 	addi	r6,r5,2
 8007a6c:	18c00204 	addi	r3,r3,8
 8007a70:	200b883a 	mov	r5,r4
 8007a74:	a53ffc04 	addi	r20,r20,-16
 8007a78:	a1000448 	cmpgei	r4,r20,17
 8007a7c:	20001726 	beq	r4,zero,8007adc <___vfiprintf_internal_r+0x9b4>
 8007a80:	29000044 	addi	r4,r5,1
 8007a84:	10800404 	addi	r2,r2,16
 8007a88:	19c00015 	stw	r7,0(r3)
 8007a8c:	1d800115 	stw	r22,4(r3)
 8007a90:	d8800b15 	stw	r2,44(sp)
 8007a94:	d9000a15 	stw	r4,40(sp)
 8007a98:	21800208 	cmpgei	r6,r4,8
 8007a9c:	303ff226 	beq	r6,zero,8007a68 <___vfiprintf_internal_r+0x940>
 8007aa0:	d9800904 	addi	r6,sp,36
 8007aa4:	900b883a 	mov	r5,r18
 8007aa8:	9809883a 	mov	r4,r19
 8007aac:	1000a226 	beq	r2,zero,8007d38 <___vfiprintf_internal_r+0xc10>
 8007ab0:	d9c00115 	stw	r7,4(sp)
 8007ab4:	800701c0 	call	800701c <__sprint_r.part.0>
 8007ab8:	103e6e1e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007abc:	d9400a17 	ldw	r5,40(sp)
 8007ac0:	a53ffc04 	addi	r20,r20,-16
 8007ac4:	a1000448 	cmpgei	r4,r20,17
 8007ac8:	d8800b17 	ldw	r2,44(sp)
 8007acc:	8807883a 	mov	r3,r17
 8007ad0:	29800044 	addi	r6,r5,1
 8007ad4:	d9c00117 	ldw	r7,4(sp)
 8007ad8:	203fe91e 	bne	r4,zero,8007a80 <___vfiprintf_internal_r+0x958>
 8007adc:	1505883a 	add	r2,r2,r20
 8007ae0:	d9800a15 	stw	r6,40(sp)
 8007ae4:	19c00015 	stw	r7,0(r3)
 8007ae8:	1d000115 	stw	r20,4(r3)
 8007aec:	d8800b15 	stw	r2,44(sp)
 8007af0:	31800210 	cmplti	r6,r6,8
 8007af4:	303fc61e 	bne	r6,zero,8007a10 <___vfiprintf_internal_r+0x8e8>
 8007af8:	10016e26 	beq	r2,zero,80080b4 <___vfiprintf_internal_r+0xf8c>
 8007afc:	d9800904 	addi	r6,sp,36
 8007b00:	900b883a 	mov	r5,r18
 8007b04:	9809883a 	mov	r4,r19
 8007b08:	800701c0 	call	800701c <__sprint_r.part.0>
 8007b0c:	103e591e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007b10:	d8800b17 	ldw	r2,44(sp)
 8007b14:	003fbe06 	br	8007a10 <___vfiprintf_internal_r+0x8e8>
 8007b18:	29403fcc 	andi	r5,r5,255
 8007b1c:	28022c1e 	bne	r5,zero,80083d0 <___vfiprintf_internal_r+0x12a8>
 8007b20:	6080080c 	andi	r2,r12,32
 8007b24:	63000414 	ori	r12,r12,16
 8007b28:	10005b1e 	bne	r2,zero,8007c98 <___vfiprintf_internal_r+0xb70>
 8007b2c:	d8800317 	ldw	r2,12(sp)
 8007b30:	10800104 	addi	r2,r2,4
 8007b34:	d8c00317 	ldw	r3,12(sp)
 8007b38:	002d883a 	mov	r22,zero
 8007b3c:	d8800315 	stw	r2,12(sp)
 8007b40:	1d400017 	ldw	r21,0(r3)
 8007b44:	0005883a 	mov	r2,zero
 8007b48:	003ed406 	br	800769c <___vfiprintf_internal_r+0x574>
 8007b4c:	29403fcc 	andi	r5,r5,255
 8007b50:	2802211e 	bne	r5,zero,80083d8 <___vfiprintf_internal_r+0x12b0>
 8007b54:	6080080c 	andi	r2,r12,32
 8007b58:	63000414 	ori	r12,r12,16
 8007b5c:	1000401e 	bne	r2,zero,8007c60 <___vfiprintf_internal_r+0xb38>
 8007b60:	d8800317 	ldw	r2,12(sp)
 8007b64:	10800104 	addi	r2,r2,4
 8007b68:	d8c00317 	ldw	r3,12(sp)
 8007b6c:	002d883a 	mov	r22,zero
 8007b70:	d8800315 	stw	r2,12(sp)
 8007b74:	1d400017 	ldw	r21,0(r3)
 8007b78:	00800044 	movi	r2,1
 8007b7c:	003ec706 	br	800769c <___vfiprintf_internal_r+0x574>
 8007b80:	29403fcc 	andi	r5,r5,255
 8007b84:	28021f1e 	bne	r5,zero,8008404 <___vfiprintf_internal_r+0x12dc>
 8007b88:	6080080c 	andi	r2,r12,32
 8007b8c:	63000414 	ori	r12,r12,16
 8007b90:	10003a1e 	bne	r2,zero,8007c7c <___vfiprintf_internal_r+0xb54>
 8007b94:	d8800317 	ldw	r2,12(sp)
 8007b98:	10800104 	addi	r2,r2,4
 8007b9c:	d8c00317 	ldw	r3,12(sp)
 8007ba0:	1d400017 	ldw	r21,0(r3)
 8007ba4:	d8800315 	stw	r2,12(sp)
 8007ba8:	a82dd7fa 	srai	r22,r21,31
 8007bac:	b005883a 	mov	r2,r22
 8007bb0:	103f340e 	bge	r2,zero,8007884 <___vfiprintf_internal_r+0x75c>
 8007bb4:	056bc83a 	sub	r21,zero,r21
 8007bb8:	a804c03a 	cmpne	r2,r21,zero
 8007bbc:	05adc83a 	sub	r22,zero,r22
 8007bc0:	b0adc83a 	sub	r22,r22,r2
 8007bc4:	00800b44 	movi	r2,45
 8007bc8:	d8800845 	stb	r2,33(sp)
 8007bcc:	48ffffe0 	cmpeqi	r3,r9,-1
 8007bd0:	03400b44 	movi	r13,45
 8007bd4:	00800044 	movi	r2,1
 8007bd8:	183eb426 	beq	r3,zero,80076ac <___vfiprintf_internal_r+0x584>
 8007bdc:	10c00060 	cmpeqi	r3,r2,1
 8007be0:	1800341e 	bne	r3,zero,8007cb4 <___vfiprintf_internal_r+0xb8c>
 8007be4:	108000a0 	cmpeqi	r2,r2,2
 8007be8:	1000431e 	bne	r2,zero,8007cf8 <___vfiprintf_internal_r+0xbd0>
 8007bec:	8807883a 	mov	r3,r17
 8007bf0:	00000106 	br	8007bf8 <___vfiprintf_internal_r+0xad0>
 8007bf4:	b807883a 	mov	r3,r23
 8007bf8:	a808d0fa 	srli	r4,r21,3
 8007bfc:	b00a977a 	slli	r5,r22,29
 8007c00:	b02cd0fa 	srli	r22,r22,3
 8007c04:	ad4001cc 	andi	r21,r21,7
 8007c08:	a8800c04 	addi	r2,r21,48
 8007c0c:	292ab03a 	or	r21,r5,r4
 8007c10:	18bfffc5 	stb	r2,-1(r3)
 8007c14:	ad88b03a 	or	r4,r21,r22
 8007c18:	1dffffc4 	addi	r23,r3,-1
 8007c1c:	203ff51e 	bne	r4,zero,8007bf4 <___vfiprintf_internal_r+0xacc>
 8007c20:	6100004c 	andi	r4,r12,1
 8007c24:	20004126 	beq	r4,zero,8007d2c <___vfiprintf_internal_r+0xc04>
 8007c28:	10803fcc 	andi	r2,r2,255
 8007c2c:	1080201c 	xori	r2,r2,128
 8007c30:	10bfe004 	addi	r2,r2,-128
 8007c34:	10800c18 	cmpnei	r2,r2,48
 8007c38:	10003c26 	beq	r2,zero,8007d2c <___vfiprintf_internal_r+0xc04>
 8007c3c:	18ffff84 	addi	r3,r3,-2
 8007c40:	00800c04 	movi	r2,48
 8007c44:	b8bfffc5 	stb	r2,-1(r23)
 8007c48:	88edc83a 	sub	r22,r17,r3
 8007c4c:	6029883a 	mov	r20,r12
 8007c50:	182f883a 	mov	r23,r3
 8007c54:	00001f06 	br	8007cd4 <___vfiprintf_internal_r+0xbac>
 8007c58:	8004cc00 	call	8004cc0 <__sinit>
 8007c5c:	003d4406 	br	8007170 <___vfiprintf_internal_r+0x48>
 8007c60:	d8c00317 	ldw	r3,12(sp)
 8007c64:	00800044 	movi	r2,1
 8007c68:	1d400017 	ldw	r21,0(r3)
 8007c6c:	1d800117 	ldw	r22,4(r3)
 8007c70:	18c00204 	addi	r3,r3,8
 8007c74:	d8c00315 	stw	r3,12(sp)
 8007c78:	003e8806 	br	800769c <___vfiprintf_internal_r+0x574>
 8007c7c:	d8c00317 	ldw	r3,12(sp)
 8007c80:	18800117 	ldw	r2,4(r3)
 8007c84:	1d400017 	ldw	r21,0(r3)
 8007c88:	18c00204 	addi	r3,r3,8
 8007c8c:	d8c00315 	stw	r3,12(sp)
 8007c90:	102d883a 	mov	r22,r2
 8007c94:	003efa06 	br	8007880 <___vfiprintf_internal_r+0x758>
 8007c98:	d8c00317 	ldw	r3,12(sp)
 8007c9c:	0005883a 	mov	r2,zero
 8007ca0:	1d400017 	ldw	r21,0(r3)
 8007ca4:	1d800117 	ldw	r22,4(r3)
 8007ca8:	18c00204 	addi	r3,r3,8
 8007cac:	d8c00315 	stw	r3,12(sp)
 8007cb0:	003e7a06 	br	800769c <___vfiprintf_internal_r+0x574>
 8007cb4:	b0016a1e 	bne	r22,zero,8008260 <___vfiprintf_internal_r+0x1138>
 8007cb8:	a88002a8 	cmpgeui	r2,r21,10
 8007cbc:	1001681e 	bne	r2,zero,8008260 <___vfiprintf_internal_r+0x1138>
 8007cc0:	ad400c04 	addi	r21,r21,48
 8007cc4:	dd4015c5 	stb	r21,87(sp)
 8007cc8:	6029883a 	mov	r20,r12
 8007ccc:	05800044 	movi	r22,1
 8007cd0:	ddc015c4 	addi	r23,sp,87
 8007cd4:	482b883a 	mov	r21,r9
 8007cd8:	4d80010e 	bge	r9,r22,8007ce0 <___vfiprintf_internal_r+0xbb8>
 8007cdc:	b02b883a 	mov	r21,r22
 8007ce0:	6b403fcc 	andi	r13,r13,255
 8007ce4:	6b40201c 	xori	r13,r13,128
 8007ce8:	6b7fe004 	addi	r13,r13,-128
 8007cec:	683efd26 	beq	r13,zero,80078e4 <___vfiprintf_internal_r+0x7bc>
 8007cf0:	ad400044 	addi	r21,r21,1
 8007cf4:	003efb06 	br	80078e4 <___vfiprintf_internal_r+0x7bc>
 8007cf8:	882f883a 	mov	r23,r17
 8007cfc:	d9000417 	ldw	r4,16(sp)
 8007d00:	a88003cc 	andi	r2,r21,15
 8007d04:	b006973a 	slli	r3,r22,28
 8007d08:	2085883a 	add	r2,r4,r2
 8007d0c:	a82ad13a 	srli	r21,r21,4
 8007d10:	10800003 	ldbu	r2,0(r2)
 8007d14:	b02cd13a 	srli	r22,r22,4
 8007d18:	bdffffc4 	addi	r23,r23,-1
 8007d1c:	1d6ab03a 	or	r21,r3,r21
 8007d20:	b8800005 	stb	r2,0(r23)
 8007d24:	ad84b03a 	or	r2,r21,r22
 8007d28:	103ff41e 	bne	r2,zero,8007cfc <___vfiprintf_internal_r+0xbd4>
 8007d2c:	8dedc83a 	sub	r22,r17,r23
 8007d30:	6029883a 	mov	r20,r12
 8007d34:	003fe706 	br	8007cd4 <___vfiprintf_internal_r+0xbac>
 8007d38:	01800044 	movi	r6,1
 8007d3c:	000b883a 	mov	r5,zero
 8007d40:	8807883a 	mov	r3,r17
 8007d44:	003f4b06 	br	8007a74 <___vfiprintf_internal_r+0x94c>
 8007d48:	8559c83a 	sub	r12,r16,r21
 8007d4c:	033f1b0e 	bge	zero,r12,80079bc <___vfiprintf_internal_r+0x894>
 8007d50:	61800450 	cmplti	r6,r12,17
 8007d54:	01c20074 	movhi	r7,2049
 8007d58:	3001af1e 	bne	r6,zero,8008418 <___vfiprintf_internal_r+0x12f0>
 8007d5c:	39ff5904 	addi	r7,r7,-668
 8007d60:	03400404 	movi	r13,16
 8007d64:	00000606 	br	8007d80 <___vfiprintf_internal_r+0xc58>
 8007d68:	21800084 	addi	r6,r4,2
 8007d6c:	42000204 	addi	r8,r8,8
 8007d70:	1809883a 	mov	r4,r3
 8007d74:	633ffc04 	addi	r12,r12,-16
 8007d78:	60c00448 	cmpgei	r3,r12,17
 8007d7c:	18001c26 	beq	r3,zero,8007df0 <___vfiprintf_internal_r+0xcc8>
 8007d80:	20c00044 	addi	r3,r4,1
 8007d84:	10800404 	addi	r2,r2,16
 8007d88:	41c00015 	stw	r7,0(r8)
 8007d8c:	43400115 	stw	r13,4(r8)
 8007d90:	d8800b15 	stw	r2,44(sp)
 8007d94:	d8c00a15 	stw	r3,40(sp)
 8007d98:	19400208 	cmpgei	r5,r3,8
 8007d9c:	283ff226 	beq	r5,zero,8007d68 <___vfiprintf_internal_r+0xc40>
 8007da0:	d9800904 	addi	r6,sp,36
 8007da4:	900b883a 	mov	r5,r18
 8007da8:	9809883a 	mov	r4,r19
 8007dac:	10006326 	beq	r2,zero,8007f3c <___vfiprintf_internal_r+0xe14>
 8007db0:	d9c00515 	stw	r7,20(sp)
 8007db4:	db000215 	stw	r12,8(sp)
 8007db8:	da400115 	stw	r9,4(sp)
 8007dbc:	800701c0 	call	800701c <__sprint_r.part.0>
 8007dc0:	103dac1e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007dc4:	db000217 	ldw	r12,8(sp)
 8007dc8:	d9000a17 	ldw	r4,40(sp)
 8007dcc:	d8800b17 	ldw	r2,44(sp)
 8007dd0:	633ffc04 	addi	r12,r12,-16
 8007dd4:	60c00448 	cmpgei	r3,r12,17
 8007dd8:	8811883a 	mov	r8,r17
 8007ddc:	21800044 	addi	r6,r4,1
 8007de0:	d9c00517 	ldw	r7,20(sp)
 8007de4:	03400404 	movi	r13,16
 8007de8:	da400117 	ldw	r9,4(sp)
 8007dec:	183fe41e 	bne	r3,zero,8007d80 <___vfiprintf_internal_r+0xc58>
 8007df0:	43400204 	addi	r13,r8,8
 8007df4:	1305883a 	add	r2,r2,r12
 8007df8:	41c00015 	stw	r7,0(r8)
 8007dfc:	43000115 	stw	r12,4(r8)
 8007e00:	d8800b15 	stw	r2,44(sp)
 8007e04:	d9800a15 	stw	r6,40(sp)
 8007e08:	30c00208 	cmpgei	r3,r6,8
 8007e0c:	1800e226 	beq	r3,zero,8008198 <___vfiprintf_internal_r+0x1070>
 8007e10:	10015726 	beq	r2,zero,8008370 <___vfiprintf_internal_r+0x1248>
 8007e14:	d9800904 	addi	r6,sp,36
 8007e18:	900b883a 	mov	r5,r18
 8007e1c:	9809883a 	mov	r4,r19
 8007e20:	da400115 	stw	r9,4(sp)
 8007e24:	800701c0 	call	800701c <__sprint_r.part.0>
 8007e28:	103d921e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007e2c:	da400117 	ldw	r9,4(sp)
 8007e30:	d9000a17 	ldw	r4,40(sp)
 8007e34:	d8800b17 	ldw	r2,44(sp)
 8007e38:	4d93c83a 	sub	r9,r9,r22
 8007e3c:	d8c01804 	addi	r3,sp,96
 8007e40:	21400044 	addi	r5,r4,1
 8007e44:	8811883a 	mov	r8,r17
 8007e48:	027ede0e 	bge	zero,r9,80079c4 <___vfiprintf_internal_r+0x89c>
 8007e4c:	49800450 	cmplti	r6,r9,17
 8007e50:	01c20074 	movhi	r7,2049
 8007e54:	3001431e 	bne	r6,zero,8008364 <___vfiprintf_internal_r+0x123c>
 8007e58:	39ff5904 	addi	r7,r7,-668
 8007e5c:	03000404 	movi	r12,16
 8007e60:	00000606 	br	8007e7c <___vfiprintf_internal_r+0xd54>
 8007e64:	21400084 	addi	r5,r4,2
 8007e68:	42000204 	addi	r8,r8,8
 8007e6c:	1809883a 	mov	r4,r3
 8007e70:	4a7ffc04 	addi	r9,r9,-16
 8007e74:	48c00448 	cmpgei	r3,r9,17
 8007e78:	18001a26 	beq	r3,zero,8007ee4 <___vfiprintf_internal_r+0xdbc>
 8007e7c:	20c00044 	addi	r3,r4,1
 8007e80:	10800404 	addi	r2,r2,16
 8007e84:	41c00015 	stw	r7,0(r8)
 8007e88:	43000115 	stw	r12,4(r8)
 8007e8c:	d8800b15 	stw	r2,44(sp)
 8007e90:	d8c00a15 	stw	r3,40(sp)
 8007e94:	19400208 	cmpgei	r5,r3,8
 8007e98:	283ff226 	beq	r5,zero,8007e64 <___vfiprintf_internal_r+0xd3c>
 8007e9c:	d9800904 	addi	r6,sp,36
 8007ea0:	900b883a 	mov	r5,r18
 8007ea4:	9809883a 	mov	r4,r19
 8007ea8:	10001a26 	beq	r2,zero,8007f14 <___vfiprintf_internal_r+0xdec>
 8007eac:	d9c00215 	stw	r7,8(sp)
 8007eb0:	da400115 	stw	r9,4(sp)
 8007eb4:	800701c0 	call	800701c <__sprint_r.part.0>
 8007eb8:	103d6e1e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007ebc:	da400117 	ldw	r9,4(sp)
 8007ec0:	d9000a17 	ldw	r4,40(sp)
 8007ec4:	d8800b17 	ldw	r2,44(sp)
 8007ec8:	4a7ffc04 	addi	r9,r9,-16
 8007ecc:	48c00448 	cmpgei	r3,r9,17
 8007ed0:	8811883a 	mov	r8,r17
 8007ed4:	21400044 	addi	r5,r4,1
 8007ed8:	d9c00217 	ldw	r7,8(sp)
 8007edc:	03000404 	movi	r12,16
 8007ee0:	183fe61e 	bne	r3,zero,8007e7c <___vfiprintf_internal_r+0xd54>
 8007ee4:	41000204 	addi	r4,r8,8
 8007ee8:	1245883a 	add	r2,r2,r9
 8007eec:	41c00015 	stw	r7,0(r8)
 8007ef0:	42400115 	stw	r9,4(r8)
 8007ef4:	d8800b15 	stw	r2,44(sp)
 8007ef8:	d9400a15 	stw	r5,40(sp)
 8007efc:	28c00208 	cmpgei	r3,r5,8
 8007f00:	1800721e 	bne	r3,zero,80080cc <___vfiprintf_internal_r+0xfa4>
 8007f04:	29400044 	addi	r5,r5,1
 8007f08:	20c00204 	addi	r3,r4,8
 8007f0c:	2011883a 	mov	r8,r4
 8007f10:	003eac06 	br	80079c4 <___vfiprintf_internal_r+0x89c>
 8007f14:	01400044 	movi	r5,1
 8007f18:	0009883a 	mov	r4,zero
 8007f1c:	8811883a 	mov	r8,r17
 8007f20:	003fd306 	br	8007e70 <___vfiprintf_internal_r+0xd48>
 8007f24:	d9800904 	addi	r6,sp,36
 8007f28:	900b883a 	mov	r5,r18
 8007f2c:	9809883a 	mov	r4,r19
 8007f30:	800701c0 	call	800701c <__sprint_r.part.0>
 8007f34:	103ebc26 	beq	r2,zero,8007a28 <___vfiprintf_internal_r+0x900>
 8007f38:	003d4e06 	br	8007474 <___vfiprintf_internal_r+0x34c>
 8007f3c:	01800044 	movi	r6,1
 8007f40:	0009883a 	mov	r4,zero
 8007f44:	8811883a 	mov	r8,r17
 8007f48:	003f8a06 	br	8007d74 <___vfiprintf_internal_r+0xc4c>
 8007f4c:	10007026 	beq	r2,zero,8008110 <___vfiprintf_internal_r+0xfe8>
 8007f50:	d9800904 	addi	r6,sp,36
 8007f54:	900b883a 	mov	r5,r18
 8007f58:	9809883a 	mov	r4,r19
 8007f5c:	da400515 	stw	r9,20(sp)
 8007f60:	db000215 	stw	r12,8(sp)
 8007f64:	db400115 	stw	r13,4(sp)
 8007f68:	800701c0 	call	800701c <__sprint_r.part.0>
 8007f6c:	103d411e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8007f70:	d9000a17 	ldw	r4,40(sp)
 8007f74:	d8800b17 	ldw	r2,44(sp)
 8007f78:	d8c01804 	addi	r3,sp,96
 8007f7c:	21400044 	addi	r5,r4,1
 8007f80:	8811883a 	mov	r8,r17
 8007f84:	da400517 	ldw	r9,20(sp)
 8007f88:	db000217 	ldw	r12,8(sp)
 8007f8c:	db400117 	ldw	r13,4(sp)
 8007f90:	003e6f06 	br	8007950 <___vfiprintf_internal_r+0x828>
 8007f94:	d8800884 	addi	r2,sp,34
 8007f98:	d8801615 	stw	r2,88(sp)
 8007f9c:	00800084 	movi	r2,2
 8007fa0:	d8801715 	stw	r2,92(sp)
 8007fa4:	d8c01804 	addi	r3,sp,96
 8007fa8:	01400044 	movi	r5,1
 8007fac:	1811883a 	mov	r8,r3
 8007fb0:	2809883a 	mov	r4,r5
 8007fb4:	21400044 	addi	r5,r4,1
 8007fb8:	40c00204 	addi	r3,r8,8
 8007fbc:	003e7d06 	br	80079b4 <___vfiprintf_internal_r+0x88c>
 8007fc0:	a019883a 	mov	r12,r20
 8007fc4:	003f0506 	br	8007bdc <___vfiprintf_internal_r+0xab4>
 8007fc8:	19400450 	cmplti	r5,r3,17
 8007fcc:	01c20074 	movhi	r7,2049
 8007fd0:	2801031e 	bne	r5,zero,80083e0 <___vfiprintf_internal_r+0x12b8>
 8007fd4:	39ff5d04 	addi	r7,r7,-652
 8007fd8:	03800404 	movi	r14,16
 8007fdc:	00000706 	br	8007ffc <___vfiprintf_internal_r+0xed4>
 8007fe0:	23c00084 	addi	r15,r4,2
 8007fe4:	42000204 	addi	r8,r8,8
 8007fe8:	3009883a 	mov	r4,r6
 8007fec:	18fffc04 	addi	r3,r3,-16
 8007ff0:	19400448 	cmpgei	r5,r3,17
 8007ff4:	28002026 	beq	r5,zero,8008078 <___vfiprintf_internal_r+0xf50>
 8007ff8:	21800044 	addi	r6,r4,1
 8007ffc:	10800404 	addi	r2,r2,16
 8008000:	41c00015 	stw	r7,0(r8)
 8008004:	43800115 	stw	r14,4(r8)
 8008008:	d8800b15 	stw	r2,44(sp)
 800800c:	d9800a15 	stw	r6,40(sp)
 8008010:	31400208 	cmpgei	r5,r6,8
 8008014:	283ff226 	beq	r5,zero,8007fe0 <___vfiprintf_internal_r+0xeb8>
 8008018:	d9800904 	addi	r6,sp,36
 800801c:	900b883a 	mov	r5,r18
 8008020:	9809883a 	mov	r4,r19
 8008024:	10001f26 	beq	r2,zero,80080a4 <___vfiprintf_internal_r+0xf7c>
 8008028:	d9c00715 	stw	r7,28(sp)
 800802c:	d8c00615 	stw	r3,24(sp)
 8008030:	da400515 	stw	r9,20(sp)
 8008034:	db000215 	stw	r12,8(sp)
 8008038:	db400115 	stw	r13,4(sp)
 800803c:	800701c0 	call	800701c <__sprint_r.part.0>
 8008040:	103d0c1e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8008044:	d8c00617 	ldw	r3,24(sp)
 8008048:	d9000a17 	ldw	r4,40(sp)
 800804c:	d8800b17 	ldw	r2,44(sp)
 8008050:	18fffc04 	addi	r3,r3,-16
 8008054:	19400448 	cmpgei	r5,r3,17
 8008058:	8811883a 	mov	r8,r17
 800805c:	23c00044 	addi	r15,r4,1
 8008060:	d9c00717 	ldw	r7,28(sp)
 8008064:	03800404 	movi	r14,16
 8008068:	da400517 	ldw	r9,20(sp)
 800806c:	db000217 	ldw	r12,8(sp)
 8008070:	db400117 	ldw	r13,4(sp)
 8008074:	283fe01e 	bne	r5,zero,8007ff8 <___vfiprintf_internal_r+0xed0>
 8008078:	10c5883a 	add	r2,r2,r3
 800807c:	40c00115 	stw	r3,4(r8)
 8008080:	41c00015 	stw	r7,0(r8)
 8008084:	d8800b15 	stw	r2,44(sp)
 8008088:	dbc00a15 	stw	r15,40(sp)
 800808c:	78c00208 	cmpgei	r3,r15,8
 8008090:	18002c1e 	bne	r3,zero,8008144 <___vfiprintf_internal_r+0x101c>
 8008094:	42000204 	addi	r8,r8,8
 8008098:	79400044 	addi	r5,r15,1
 800809c:	7809883a 	mov	r4,r15
 80080a0:	003e1b06 	br	8007910 <___vfiprintf_internal_r+0x7e8>
 80080a4:	0009883a 	mov	r4,zero
 80080a8:	03c00044 	movi	r15,1
 80080ac:	8811883a 	mov	r8,r17
 80080b0:	003fce06 	br	8007fec <___vfiprintf_internal_r+0xec4>
 80080b4:	8540010e 	bge	r16,r21,80080bc <___vfiprintf_internal_r+0xf94>
 80080b8:	a821883a 	mov	r16,r21
 80080bc:	d8800017 	ldw	r2,0(sp)
 80080c0:	1405883a 	add	r2,r2,r16
 80080c4:	d8800015 	stw	r2,0(sp)
 80080c8:	003e5706 	br	8007a28 <___vfiprintf_internal_r+0x900>
 80080cc:	10008126 	beq	r2,zero,80082d4 <___vfiprintf_internal_r+0x11ac>
 80080d0:	d9800904 	addi	r6,sp,36
 80080d4:	900b883a 	mov	r5,r18
 80080d8:	9809883a 	mov	r4,r19
 80080dc:	800701c0 	call	800701c <__sprint_r.part.0>
 80080e0:	103ce41e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 80080e4:	d9400a17 	ldw	r5,40(sp)
 80080e8:	d8800b17 	ldw	r2,44(sp)
 80080ec:	d8c01804 	addi	r3,sp,96
 80080f0:	29400044 	addi	r5,r5,1
 80080f4:	8811883a 	mov	r8,r17
 80080f8:	003e3206 	br	80079c4 <___vfiprintf_internal_r+0x89c>
 80080fc:	d8000a15 	stw	zero,40(sp)
 8008100:	8811883a 	mov	r8,r17
 8008104:	003c4a06 	br	8007230 <___vfiprintf_internal_r+0x108>
 8008108:	002d883a 	mov	r22,zero
 800810c:	003d4406 	br	8007620 <___vfiprintf_internal_r+0x4f8>
 8008110:	68003326 	beq	r13,zero,80081e0 <___vfiprintf_internal_r+0x10b8>
 8008114:	d8800884 	addi	r2,sp,34
 8008118:	d8801615 	stw	r2,88(sp)
 800811c:	00800084 	movi	r2,2
 8008120:	d8801715 	stw	r2,92(sp)
 8008124:	da001804 	addi	r8,sp,96
 8008128:	01000044 	movi	r4,1
 800812c:	003fa106 	br	8007fb4 <___vfiprintf_internal_r+0xe8c>
 8008130:	d8c01804 	addi	r3,sp,96
 8008134:	01400044 	movi	r5,1
 8008138:	0009883a 	mov	r4,zero
 800813c:	8811883a 	mov	r8,r17
 8008140:	003e1c06 	br	80079b4 <___vfiprintf_internal_r+0x88c>
 8008144:	10003826 	beq	r2,zero,8008228 <___vfiprintf_internal_r+0x1100>
 8008148:	d9800904 	addi	r6,sp,36
 800814c:	900b883a 	mov	r5,r18
 8008150:	9809883a 	mov	r4,r19
 8008154:	da400515 	stw	r9,20(sp)
 8008158:	db000215 	stw	r12,8(sp)
 800815c:	db400115 	stw	r13,4(sp)
 8008160:	800701c0 	call	800701c <__sprint_r.part.0>
 8008164:	103cc31e 	bne	r2,zero,8007474 <___vfiprintf_internal_r+0x34c>
 8008168:	d9000a17 	ldw	r4,40(sp)
 800816c:	d8800b17 	ldw	r2,44(sp)
 8008170:	8811883a 	mov	r8,r17
 8008174:	21400044 	addi	r5,r4,1
 8008178:	da400517 	ldw	r9,20(sp)
 800817c:	db000217 	ldw	r12,8(sp)
 8008180:	db400117 	ldw	r13,4(sp)
 8008184:	003de206 	br	8007910 <___vfiprintf_internal_r+0x7e8>
 8008188:	e029883a 	mov	r20,fp
 800818c:	003c2d06 	br	8007244 <___vfiprintf_internal_r+0x11c>
 8008190:	882f883a 	mov	r23,r17
 8008194:	003ecf06 	br	8007cd4 <___vfiprintf_internal_r+0xbac>
 8008198:	31400044 	addi	r5,r6,1
 800819c:	68c00204 	addi	r3,r13,8
 80081a0:	3009883a 	mov	r4,r6
 80081a4:	6811883a 	mov	r8,r13
 80081a8:	003e0406 	br	80079bc <___vfiprintf_internal_r+0x894>
 80081ac:	00c00c04 	movi	r3,48
 80081b0:	d88008c5 	stb	r2,35(sp)
 80081b4:	d8c00885 	stb	r3,34(sp)
 80081b8:	63000094 	ori	r12,r12,2
 80081bc:	00800084 	movi	r2,2
 80081c0:	003d3606 	br	800769c <___vfiprintf_internal_r+0x574>
 80081c4:	d9400017 	ldw	r5,0(sp)
 80081c8:	20800017 	ldw	r2,0(r4)
 80081cc:	d8c00315 	stw	r3,12(sp)
 80081d0:	2809d7fa 	srai	r4,r5,31
 80081d4:	11400015 	stw	r5,0(r2)
 80081d8:	11000115 	stw	r4,4(r2)
 80081dc:	003bfb06 	br	80071cc <___vfiprintf_internal_r+0xa4>
 80081e0:	0009883a 	mov	r4,zero
 80081e4:	d8c01804 	addi	r3,sp,96
 80081e8:	01400044 	movi	r5,1
 80081ec:	8811883a 	mov	r8,r17
 80081f0:	003df006 	br	80079b4 <___vfiprintf_internal_r+0x88c>
 80081f4:	0421c83a 	sub	r16,zero,r16
 80081f8:	ddc00315 	stw	r23,12(sp)
 80081fc:	003cdb06 	br	800756c <___vfiprintf_internal_r+0x444>
 8008200:	b809883a 	mov	r4,r23
 8008204:	da000215 	stw	r8,8(sp)
 8008208:	db000115 	stw	r12,4(sp)
 800820c:	8006f840 	call	8006f84 <strlen>
 8008210:	102d883a 	mov	r22,r2
 8008214:	102b883a 	mov	r21,r2
 8008218:	dd000315 	stw	r20,12(sp)
 800821c:	db000117 	ldw	r12,4(sp)
 8008220:	da000217 	ldw	r8,8(sp)
 8008224:	003dad06 	br	80078dc <___vfiprintf_internal_r+0x7b4>
 8008228:	d8c00847 	ldb	r3,33(sp)
 800822c:	1800551e 	bne	r3,zero,8008384 <___vfiprintf_internal_r+0x125c>
 8008230:	683f581e 	bne	r13,zero,8007f94 <___vfiprintf_internal_r+0xe6c>
 8008234:	0009883a 	mov	r4,zero
 8008238:	d8c01804 	addi	r3,sp,96
 800823c:	01400044 	movi	r5,1
 8008240:	8811883a 	mov	r8,r17
 8008244:	003ddd06 	br	80079bc <___vfiprintf_internal_r+0x894>
 8008248:	d8800317 	ldw	r2,12(sp)
 800824c:	10800017 	ldw	r2,0(r2)
 8008250:	d8c00315 	stw	r3,12(sp)
 8008254:	d8c00017 	ldw	r3,0(sp)
 8008258:	10c00015 	stw	r3,0(r2)
 800825c:	003bdb06 	br	80071cc <___vfiprintf_internal_r+0xa4>
 8008260:	882f883a 	mov	r23,r17
 8008264:	00000206 	br	8008270 <___vfiprintf_internal_r+0x1148>
 8008268:	102b883a 	mov	r21,r2
 800826c:	182d883a 	mov	r22,r3
 8008270:	a809883a 	mov	r4,r21
 8008274:	b00b883a 	mov	r5,r22
 8008278:	01800284 	movi	r6,10
 800827c:	000f883a 	mov	r7,zero
 8008280:	db400615 	stw	r13,24(sp)
 8008284:	da000515 	stw	r8,20(sp)
 8008288:	da400215 	stw	r9,8(sp)
 800828c:	db000115 	stw	r12,4(sp)
 8008290:	800a1c40 	call	800a1c4 <__umoddi3>
 8008294:	10800c04 	addi	r2,r2,48
 8008298:	bdffffc4 	addi	r23,r23,-1
 800829c:	a809883a 	mov	r4,r21
 80082a0:	b00b883a 	mov	r5,r22
 80082a4:	b8800005 	stb	r2,0(r23)
 80082a8:	01800284 	movi	r6,10
 80082ac:	000f883a 	mov	r7,zero
 80082b0:	8009ba80 	call	8009ba8 <__udivdi3>
 80082b4:	db000117 	ldw	r12,4(sp)
 80082b8:	da400217 	ldw	r9,8(sp)
 80082bc:	da000517 	ldw	r8,20(sp)
 80082c0:	db400617 	ldw	r13,24(sp)
 80082c4:	b03fe81e 	bne	r22,zero,8008268 <___vfiprintf_internal_r+0x1140>
 80082c8:	ad4002a8 	cmpgeui	r21,r21,10
 80082cc:	a83fe61e 	bne	r21,zero,8008268 <___vfiprintf_internal_r+0x1140>
 80082d0:	003e9606 	br	8007d2c <___vfiprintf_internal_r+0xc04>
 80082d4:	00c00044 	movi	r3,1
 80082d8:	d8c00a15 	stw	r3,40(sp)
 80082dc:	b005883a 	mov	r2,r22
 80082e0:	ddc01615 	stw	r23,88(sp)
 80082e4:	dd801715 	stw	r22,92(sp)
 80082e8:	dd800b15 	stw	r22,44(sp)
 80082ec:	d8c01804 	addi	r3,sp,96
 80082f0:	003dc306 	br	8007a00 <___vfiprintf_internal_r+0x8d8>
 80082f4:	10c00060 	cmpeqi	r3,r2,1
 80082f8:	a019883a 	mov	r12,r20
 80082fc:	183e3926 	beq	r3,zero,8007be4 <___vfiprintf_internal_r+0xabc>
 8008300:	003e6f06 	br	8007cc0 <___vfiprintf_internal_r+0xb98>
 8008304:	e0800043 	ldbu	r2,1(fp)
 8008308:	63000814 	ori	r12,r12,32
 800830c:	e7000044 	addi	fp,fp,1
 8008310:	10803fcc 	andi	r2,r2,255
 8008314:	1080201c 	xori	r2,r2,128
 8008318:	10bfe004 	addi	r2,r2,-128
 800831c:	003bd106 	br	8007264 <___vfiprintf_internal_r+0x13c>
 8008320:	488001f0 	cmpltui	r2,r9,7
 8008324:	482d883a 	mov	r22,r9
 8008328:	1000011e 	bne	r2,zero,8008330 <___vfiprintf_internal_r+0x1208>
 800832c:	05800184 	movi	r22,6
 8008330:	05c20074 	movhi	r23,2049
 8008334:	b02b883a 	mov	r21,r22
 8008338:	dd000315 	stw	r20,12(sp)
 800833c:	bdff0104 	addi	r23,r23,-1020
 8008340:	003d6606 	br	80078dc <___vfiprintf_internal_r+0x7b4>
 8008344:	d8800315 	stw	r2,12(sp)
 8008348:	002d883a 	mov	r22,zero
 800834c:	00800044 	movi	r2,1
 8008350:	003cd206 	br	800769c <___vfiprintf_internal_r+0x574>
 8008354:	d8800315 	stw	r2,12(sp)
 8008358:	002d883a 	mov	r22,zero
 800835c:	0005883a 	mov	r2,zero
 8008360:	003cce06 	br	800769c <___vfiprintf_internal_r+0x574>
 8008364:	1809883a 	mov	r4,r3
 8008368:	39ff5904 	addi	r7,r7,-668
 800836c:	003ede06 	br	8007ee8 <___vfiprintf_internal_r+0xdc0>
 8008370:	d8c01804 	addi	r3,sp,96
 8008374:	01400044 	movi	r5,1
 8008378:	0009883a 	mov	r4,zero
 800837c:	8811883a 	mov	r8,r17
 8008380:	003d8e06 	br	80079bc <___vfiprintf_internal_r+0x894>
 8008384:	d8800844 	addi	r2,sp,33
 8008388:	d8801615 	stw	r2,88(sp)
 800838c:	00800044 	movi	r2,1
 8008390:	d8801715 	stw	r2,92(sp)
 8008394:	d8c01804 	addi	r3,sp,96
 8008398:	01400044 	movi	r5,1
 800839c:	003d6806 	br	8007940 <___vfiprintf_internal_r+0x818>
 80083a0:	d9800845 	stb	r6,33(sp)
 80083a4:	003c5306 	br	80074f4 <___vfiprintf_internal_r+0x3cc>
 80083a8:	482b883a 	mov	r21,r9
 80083ac:	dd000315 	stw	r20,12(sp)
 80083b0:	482d883a 	mov	r22,r9
 80083b4:	003d4906 	br	80078dc <___vfiprintf_internal_r+0x7b4>
 80083b8:	d9800845 	stb	r6,33(sp)
 80083bc:	003cd906 	br	8007724 <___vfiprintf_internal_r+0x5fc>
 80083c0:	d9800845 	stb	r6,33(sp)
 80083c4:	003ce906 	br	800776c <___vfiprintf_internal_r+0x644>
 80083c8:	d9800845 	stb	r6,33(sp)
 80083cc:	003c8a06 	br	80075f8 <___vfiprintf_internal_r+0x4d0>
 80083d0:	d9800845 	stb	r6,33(sp)
 80083d4:	003dd206 	br	8007b20 <___vfiprintf_internal_r+0x9f8>
 80083d8:	d9800845 	stb	r6,33(sp)
 80083dc:	003ddd06 	br	8007b54 <___vfiprintf_internal_r+0xa2c>
 80083e0:	301f883a 	mov	r15,r6
 80083e4:	39ff5d04 	addi	r7,r7,-652
 80083e8:	003f2306 	br	8008078 <___vfiprintf_internal_r+0xf50>
 80083ec:	d9800845 	stb	r6,33(sp)
 80083f0:	003d1606 	br	800784c <___vfiprintf_internal_r+0x724>
 80083f4:	d9800845 	stb	r6,33(sp)
 80083f8:	003d0406 	br	800780c <___vfiprintf_internal_r+0x6e4>
 80083fc:	d9800845 	stb	r6,33(sp)
 8008400:	003cb806 	br	80076e4 <___vfiprintf_internal_r+0x5bc>
 8008404:	d9800845 	stb	r6,33(sp)
 8008408:	003ddf06 	br	8007b88 <___vfiprintf_internal_r+0xa60>
 800840c:	29800044 	addi	r6,r5,1
 8008410:	39ff5d04 	addi	r7,r7,-652
 8008414:	003db106 	br	8007adc <___vfiprintf_internal_r+0x9b4>
 8008418:	181b883a 	mov	r13,r3
 800841c:	280d883a 	mov	r6,r5
 8008420:	39ff5904 	addi	r7,r7,-668
 8008424:	003e7306 	br	8007df4 <___vfiprintf_internal_r+0xccc>
 8008428:	00bfffc4 	movi	r2,-1
 800842c:	d8800015 	stw	r2,0(sp)
 8008430:	003c1306 	br	8007480 <___vfiprintf_internal_r+0x358>
 8008434:	d8800317 	ldw	r2,12(sp)
 8008438:	12400017 	ldw	r9,0(r2)
 800843c:	15c00104 	addi	r23,r2,4
 8008440:	4800010e 	bge	r9,zero,8008448 <___vfiprintf_internal_r+0x1320>
 8008444:	027fffc4 	movi	r9,-1
 8008448:	e0800043 	ldbu	r2,1(fp)
 800844c:	ddc00315 	stw	r23,12(sp)
 8008450:	1839883a 	mov	fp,r3
 8008454:	10803fcc 	andi	r2,r2,255
 8008458:	1080201c 	xori	r2,r2,128
 800845c:	10bfe004 	addi	r2,r2,-128
 8008460:	003b8006 	br	8007264 <___vfiprintf_internal_r+0x13c>

08008464 <__vfiprintf_internal>:
 8008464:	00820074 	movhi	r2,2049
 8008468:	300f883a 	mov	r7,r6
 800846c:	280d883a 	mov	r6,r5
 8008470:	200b883a 	mov	r5,r4
 8008474:	11073d17 	ldw	r4,7412(r2)
 8008478:	80071281 	jmpi	8007128 <___vfiprintf_internal_r>

0800847c <__sbprintf>:
 800847c:	2880030b 	ldhu	r2,12(r5)
 8008480:	2b001917 	ldw	r12,100(r5)
 8008484:	2ac0038b 	ldhu	r11,14(r5)
 8008488:	2a800717 	ldw	r10,28(r5)
 800848c:	2a400917 	ldw	r9,36(r5)
 8008490:	defee204 	addi	sp,sp,-1144
 8008494:	da001a04 	addi	r8,sp,104
 8008498:	00c10004 	movi	r3,1024
 800849c:	dc011a15 	stw	r16,1128(sp)
 80084a0:	10bfff4c 	andi	r2,r2,65533
 80084a4:	2821883a 	mov	r16,r5
 80084a8:	d80b883a 	mov	r5,sp
 80084ac:	dc811c15 	stw	r18,1136(sp)
 80084b0:	dc411b15 	stw	r17,1132(sp)
 80084b4:	dfc11d15 	stw	ra,1140(sp)
 80084b8:	2025883a 	mov	r18,r4
 80084bc:	d880030d 	sth	r2,12(sp)
 80084c0:	db001915 	stw	r12,100(sp)
 80084c4:	dac0038d 	sth	r11,14(sp)
 80084c8:	da800715 	stw	r10,28(sp)
 80084cc:	da400915 	stw	r9,36(sp)
 80084d0:	da000015 	stw	r8,0(sp)
 80084d4:	da000415 	stw	r8,16(sp)
 80084d8:	d8c00215 	stw	r3,8(sp)
 80084dc:	d8c00515 	stw	r3,20(sp)
 80084e0:	d8000615 	stw	zero,24(sp)
 80084e4:	80071280 	call	8007128 <___vfiprintf_internal_r>
 80084e8:	1023883a 	mov	r17,r2
 80084ec:	10000d0e 	bge	r2,zero,8008524 <__sbprintf+0xa8>
 80084f0:	d880030b 	ldhu	r2,12(sp)
 80084f4:	1080100c 	andi	r2,r2,64
 80084f8:	10000326 	beq	r2,zero,8008508 <__sbprintf+0x8c>
 80084fc:	8080030b 	ldhu	r2,12(r16)
 8008500:	10801014 	ori	r2,r2,64
 8008504:	8080030d 	sth	r2,12(r16)
 8008508:	8805883a 	mov	r2,r17
 800850c:	dfc11d17 	ldw	ra,1140(sp)
 8008510:	dc811c17 	ldw	r18,1136(sp)
 8008514:	dc411b17 	ldw	r17,1132(sp)
 8008518:	dc011a17 	ldw	r16,1128(sp)
 800851c:	dec11e04 	addi	sp,sp,1144
 8008520:	f800283a 	ret
 8008524:	d80b883a 	mov	r5,sp
 8008528:	9009883a 	mov	r4,r18
 800852c:	800492c0 	call	800492c <_fflush_r>
 8008530:	103fef26 	beq	r2,zero,80084f0 <__sbprintf+0x74>
 8008534:	047fffc4 	movi	r17,-1
 8008538:	003fed06 	br	80084f0 <__sbprintf+0x74>

0800853c <_write_r>:
 800853c:	defffe04 	addi	sp,sp,-8
 8008540:	2805883a 	mov	r2,r5
 8008544:	dc000015 	stw	r16,0(sp)
 8008548:	300b883a 	mov	r5,r6
 800854c:	2021883a 	mov	r16,r4
 8008550:	380d883a 	mov	r6,r7
 8008554:	1009883a 	mov	r4,r2
 8008558:	00820074 	movhi	r2,2049
 800855c:	dfc00115 	stw	ra,4(sp)
 8008560:	100e4415 	stw	zero,14608(r2)
 8008564:	800db440 	call	800db44 <write>
 8008568:	10ffffd8 	cmpnei	r3,r2,-1
 800856c:	18000426 	beq	r3,zero,8008580 <_write_r+0x44>
 8008570:	dfc00117 	ldw	ra,4(sp)
 8008574:	dc000017 	ldw	r16,0(sp)
 8008578:	dec00204 	addi	sp,sp,8
 800857c:	f800283a 	ret
 8008580:	00c20074 	movhi	r3,2049
 8008584:	18ce4417 	ldw	r3,14608(r3)
 8008588:	183ff926 	beq	r3,zero,8008570 <_write_r+0x34>
 800858c:	80c00015 	stw	r3,0(r16)
 8008590:	dfc00117 	ldw	ra,4(sp)
 8008594:	dc000017 	ldw	r16,0(sp)
 8008598:	dec00204 	addi	sp,sp,8
 800859c:	f800283a 	ret

080085a0 <_close_r>:
 80085a0:	defffe04 	addi	sp,sp,-8
 80085a4:	dc000015 	stw	r16,0(sp)
 80085a8:	00820074 	movhi	r2,2049
 80085ac:	2021883a 	mov	r16,r4
 80085b0:	2809883a 	mov	r4,r5
 80085b4:	dfc00115 	stw	ra,4(sp)
 80085b8:	100e4415 	stw	zero,14608(r2)
 80085bc:	800d2bc0 	call	800d2bc <close>
 80085c0:	10ffffd8 	cmpnei	r3,r2,-1
 80085c4:	18000426 	beq	r3,zero,80085d8 <_close_r+0x38>
 80085c8:	dfc00117 	ldw	ra,4(sp)
 80085cc:	dc000017 	ldw	r16,0(sp)
 80085d0:	dec00204 	addi	sp,sp,8
 80085d4:	f800283a 	ret
 80085d8:	00c20074 	movhi	r3,2049
 80085dc:	18ce4417 	ldw	r3,14608(r3)
 80085e0:	183ff926 	beq	r3,zero,80085c8 <_close_r+0x28>
 80085e4:	80c00015 	stw	r3,0(r16)
 80085e8:	dfc00117 	ldw	ra,4(sp)
 80085ec:	dc000017 	ldw	r16,0(sp)
 80085f0:	dec00204 	addi	sp,sp,8
 80085f4:	f800283a 	ret

080085f8 <_calloc_r>:
 80085f8:	defffe04 	addi	sp,sp,-8
 80085fc:	2805883a 	mov	r2,r5
 8008600:	dc000015 	stw	r16,0(sp)
 8008604:	300b883a 	mov	r5,r6
 8008608:	2021883a 	mov	r16,r4
 800860c:	1009883a 	mov	r4,r2
 8008610:	dfc00115 	stw	ra,4(sp)
 8008614:	80008b80 	call	80008b8 <__mulsi3>
 8008618:	100b883a 	mov	r5,r2
 800861c:	8009883a 	mov	r4,r16
 8008620:	800546c0 	call	800546c <_malloc_r>
 8008624:	1007883a 	mov	r3,r2
 8008628:	10000c26 	beq	r2,zero,800865c <_calloc_r+0x64>
 800862c:	11bfff17 	ldw	r6,-4(r2)
 8008630:	00bfff04 	movi	r2,-4
 8008634:	308c703a 	and	r6,r6,r2
 8008638:	31bfff04 	addi	r6,r6,-4
 800863c:	30800968 	cmpgeui	r2,r6,37
 8008640:	1000151e 	bne	r2,zero,8008698 <_calloc_r+0xa0>
 8008644:	30800530 	cmpltui	r2,r6,20
 8008648:	10000926 	beq	r2,zero,8008670 <_calloc_r+0x78>
 800864c:	1805883a 	mov	r2,r3
 8008650:	10000015 	stw	zero,0(r2)
 8008654:	10000115 	stw	zero,4(r2)
 8008658:	10000215 	stw	zero,8(r2)
 800865c:	1805883a 	mov	r2,r3
 8008660:	dfc00117 	ldw	ra,4(sp)
 8008664:	dc000017 	ldw	r16,0(sp)
 8008668:	dec00204 	addi	sp,sp,8
 800866c:	f800283a 	ret
 8008670:	18000015 	stw	zero,0(r3)
 8008674:	18000115 	stw	zero,4(r3)
 8008678:	30800728 	cmpgeui	r2,r6,28
 800867c:	10000b26 	beq	r2,zero,80086ac <_calloc_r+0xb4>
 8008680:	18000215 	stw	zero,8(r3)
 8008684:	18000315 	stw	zero,12(r3)
 8008688:	31800920 	cmpeqi	r6,r6,36
 800868c:	3000091e 	bne	r6,zero,80086b4 <_calloc_r+0xbc>
 8008690:	18800404 	addi	r2,r3,16
 8008694:	003fee06 	br	8008650 <_calloc_r+0x58>
 8008698:	1809883a 	mov	r4,r3
 800869c:	000b883a 	mov	r5,zero
 80086a0:	8005d480 	call	8005d48 <memset>
 80086a4:	1007883a 	mov	r3,r2
 80086a8:	003fec06 	br	800865c <_calloc_r+0x64>
 80086ac:	18800204 	addi	r2,r3,8
 80086b0:	003fe706 	br	8008650 <_calloc_r+0x58>
 80086b4:	18000415 	stw	zero,16(r3)
 80086b8:	18800604 	addi	r2,r3,24
 80086bc:	18000515 	stw	zero,20(r3)
 80086c0:	003fe306 	br	8008650 <_calloc_r+0x58>

080086c4 <_fclose_r>:
 80086c4:	defffc04 	addi	sp,sp,-16
 80086c8:	dfc00315 	stw	ra,12(sp)
 80086cc:	dc800215 	stw	r18,8(sp)
 80086d0:	dc400115 	stw	r17,4(sp)
 80086d4:	dc000015 	stw	r16,0(sp)
 80086d8:	28000726 	beq	r5,zero,80086f8 <_fclose_r+0x34>
 80086dc:	2023883a 	mov	r17,r4
 80086e0:	2821883a 	mov	r16,r5
 80086e4:	20000226 	beq	r4,zero,80086f0 <_fclose_r+0x2c>
 80086e8:	20800e17 	ldw	r2,56(r4)
 80086ec:	10002726 	beq	r2,zero,800878c <_fclose_r+0xc8>
 80086f0:	8080030f 	ldh	r2,12(r16)
 80086f4:	1000081e 	bne	r2,zero,8008718 <_fclose_r+0x54>
 80086f8:	0025883a 	mov	r18,zero
 80086fc:	9005883a 	mov	r2,r18
 8008700:	dfc00317 	ldw	ra,12(sp)
 8008704:	dc800217 	ldw	r18,8(sp)
 8008708:	dc400117 	ldw	r17,4(sp)
 800870c:	dc000017 	ldw	r16,0(sp)
 8008710:	dec00404 	addi	sp,sp,16
 8008714:	f800283a 	ret
 8008718:	800b883a 	mov	r5,r16
 800871c:	8809883a 	mov	r4,r17
 8008720:	80047040 	call	8004704 <__sflush_r>
 8008724:	1025883a 	mov	r18,r2
 8008728:	80800b17 	ldw	r2,44(r16)
 800872c:	10000426 	beq	r2,zero,8008740 <_fclose_r+0x7c>
 8008730:	81400717 	ldw	r5,28(r16)
 8008734:	8809883a 	mov	r4,r17
 8008738:	103ee83a 	callr	r2
 800873c:	10001716 	blt	r2,zero,800879c <_fclose_r+0xd8>
 8008740:	8080030b 	ldhu	r2,12(r16)
 8008744:	1080200c 	andi	r2,r2,128
 8008748:	1000181e 	bne	r2,zero,80087ac <_fclose_r+0xe8>
 800874c:	81400c17 	ldw	r5,48(r16)
 8008750:	28000526 	beq	r5,zero,8008768 <_fclose_r+0xa4>
 8008754:	80801004 	addi	r2,r16,64
 8008758:	28800226 	beq	r5,r2,8008764 <_fclose_r+0xa0>
 800875c:	8809883a 	mov	r4,r17
 8008760:	8004e240 	call	8004e24 <_free_r>
 8008764:	80000c15 	stw	zero,48(r16)
 8008768:	81401117 	ldw	r5,68(r16)
 800876c:	28000326 	beq	r5,zero,800877c <_fclose_r+0xb8>
 8008770:	8809883a 	mov	r4,r17
 8008774:	8004e240 	call	8004e24 <_free_r>
 8008778:	80001115 	stw	zero,68(r16)
 800877c:	8004cd00 	call	8004cd0 <__sfp_lock_acquire>
 8008780:	8000030d 	sth	zero,12(r16)
 8008784:	8004cd40 	call	8004cd4 <__sfp_lock_release>
 8008788:	003fdc06 	br	80086fc <_fclose_r+0x38>
 800878c:	8004cc00 	call	8004cc0 <__sinit>
 8008790:	8080030f 	ldh	r2,12(r16)
 8008794:	103fd826 	beq	r2,zero,80086f8 <_fclose_r+0x34>
 8008798:	003fdf06 	br	8008718 <_fclose_r+0x54>
 800879c:	8080030b 	ldhu	r2,12(r16)
 80087a0:	04bfffc4 	movi	r18,-1
 80087a4:	1080200c 	andi	r2,r2,128
 80087a8:	103fe826 	beq	r2,zero,800874c <_fclose_r+0x88>
 80087ac:	81400417 	ldw	r5,16(r16)
 80087b0:	8809883a 	mov	r4,r17
 80087b4:	8004e240 	call	8004e24 <_free_r>
 80087b8:	003fe406 	br	800874c <_fclose_r+0x88>

080087bc <fclose>:
 80087bc:	00820074 	movhi	r2,2049
 80087c0:	200b883a 	mov	r5,r4
 80087c4:	11073d17 	ldw	r4,7412(r2)
 80087c8:	80086c41 	jmpi	80086c4 <_fclose_r>

080087cc <__fputwc>:
 80087cc:	defff904 	addi	sp,sp,-28
 80087d0:	dcc00415 	stw	r19,16(sp)
 80087d4:	dc800315 	stw	r18,12(sp)
 80087d8:	dc000115 	stw	r16,4(sp)
 80087dc:	dfc00615 	stw	ra,24(sp)
 80087e0:	dd000515 	stw	r20,20(sp)
 80087e4:	dc400215 	stw	r17,8(sp)
 80087e8:	2025883a 	mov	r18,r4
 80087ec:	2827883a 	mov	r19,r5
 80087f0:	3021883a 	mov	r16,r6
 80087f4:	8008fb80 	call	8008fb8 <__locale_mb_cur_max>
 80087f8:	10800058 	cmpnei	r2,r2,1
 80087fc:	1000071e 	bne	r2,zero,800881c <__fputwc+0x50>
 8008800:	98bfffc4 	addi	r2,r19,-1
 8008804:	10803fe8 	cmpgeui	r2,r2,255
 8008808:	1000041e 	bne	r2,zero,800881c <__fputwc+0x50>
 800880c:	980b883a 	mov	r5,r19
 8008810:	dcc000c5 	stb	r19,3(sp)
 8008814:	05000044 	movi	r20,1
 8008818:	00000a06 	br	8008844 <__fputwc+0x78>
 800881c:	81c01704 	addi	r7,r16,92
 8008820:	980d883a 	mov	r6,r19
 8008824:	d94000c4 	addi	r5,sp,3
 8008828:	9009883a 	mov	r4,r18
 800882c:	8009a7c0 	call	8009a7c <_wcrtomb_r>
 8008830:	1029883a 	mov	r20,r2
 8008834:	10bfffd8 	cmpnei	r2,r2,-1
 8008838:	10003426 	beq	r2,zero,800890c <__fputwc+0x140>
 800883c:	a0002926 	beq	r20,zero,80088e4 <__fputwc+0x118>
 8008840:	d94000c3 	ldbu	r5,3(sp)
 8008844:	0023883a 	mov	r17,zero
 8008848:	00000a06 	br	8008874 <__fputwc+0xa8>
 800884c:	80800017 	ldw	r2,0(r16)
 8008850:	11400005 	stb	r5,0(r2)
 8008854:	80800017 	ldw	r2,0(r16)
 8008858:	10800044 	addi	r2,r2,1
 800885c:	80800015 	stw	r2,0(r16)
 8008860:	8c400044 	addi	r17,r17,1
 8008864:	d88000c4 	addi	r2,sp,3
 8008868:	1445883a 	add	r2,r2,r17
 800886c:	8d001d2e 	bgeu	r17,r20,80088e4 <__fputwc+0x118>
 8008870:	11400003 	ldbu	r5,0(r2)
 8008874:	80800217 	ldw	r2,8(r16)
 8008878:	10bfffc4 	addi	r2,r2,-1
 800887c:	80800215 	stw	r2,8(r16)
 8008880:	103ff20e 	bge	r2,zero,800884c <__fputwc+0x80>
 8008884:	80c00617 	ldw	r3,24(r16)
 8008888:	10c01016 	blt	r2,r3,80088cc <__fputwc+0x100>
 800888c:	80800017 	ldw	r2,0(r16)
 8008890:	11400005 	stb	r5,0(r2)
 8008894:	80800017 	ldw	r2,0(r16)
 8008898:	10c00003 	ldbu	r3,0(r2)
 800889c:	10800044 	addi	r2,r2,1
 80088a0:	18c002a0 	cmpeqi	r3,r3,10
 80088a4:	183fed26 	beq	r3,zero,800885c <__fputwc+0x90>
 80088a8:	800d883a 	mov	r6,r16
 80088ac:	01400284 	movi	r5,10
 80088b0:	9009883a 	mov	r4,r18
 80088b4:	80099200 	call	8009920 <__swbuf_r>
 80088b8:	10bfffe0 	cmpeqi	r2,r2,-1
 80088bc:	10803fcc 	andi	r2,r2,255
 80088c0:	103fe726 	beq	r2,zero,8008860 <__fputwc+0x94>
 80088c4:	053fffc4 	movi	r20,-1
 80088c8:	00000706 	br	80088e8 <__fputwc+0x11c>
 80088cc:	29403fcc 	andi	r5,r5,255
 80088d0:	800d883a 	mov	r6,r16
 80088d4:	9009883a 	mov	r4,r18
 80088d8:	80099200 	call	8009920 <__swbuf_r>
 80088dc:	10bfffe0 	cmpeqi	r2,r2,-1
 80088e0:	003ff606 	br	80088bc <__fputwc+0xf0>
 80088e4:	9829883a 	mov	r20,r19
 80088e8:	a005883a 	mov	r2,r20
 80088ec:	dfc00617 	ldw	ra,24(sp)
 80088f0:	dd000517 	ldw	r20,20(sp)
 80088f4:	dcc00417 	ldw	r19,16(sp)
 80088f8:	dc800317 	ldw	r18,12(sp)
 80088fc:	dc400217 	ldw	r17,8(sp)
 8008900:	dc000117 	ldw	r16,4(sp)
 8008904:	dec00704 	addi	sp,sp,28
 8008908:	f800283a 	ret
 800890c:	8080030b 	ldhu	r2,12(r16)
 8008910:	10801014 	ori	r2,r2,64
 8008914:	8080030d 	sth	r2,12(r16)
 8008918:	003ff306 	br	80088e8 <__fputwc+0x11c>

0800891c <_fputwc_r>:
 800891c:	3080030b 	ldhu	r2,12(r6)
 8008920:	10c8000c 	andi	r3,r2,8192
 8008924:	1800051e 	bne	r3,zero,800893c <_fputwc_r+0x20>
 8008928:	30c01917 	ldw	r3,100(r6)
 800892c:	10880014 	ori	r2,r2,8192
 8008930:	3080030d 	sth	r2,12(r6)
 8008934:	18880014 	ori	r2,r3,8192
 8008938:	30801915 	stw	r2,100(r6)
 800893c:	80087cc1 	jmpi	80087cc <__fputwc>

08008940 <fputwc>:
 8008940:	defffc04 	addi	sp,sp,-16
 8008944:	00820074 	movhi	r2,2049
 8008948:	dc000115 	stw	r16,4(sp)
 800894c:	14073d17 	ldw	r16,7412(r2)
 8008950:	dc400215 	stw	r17,8(sp)
 8008954:	dfc00315 	stw	ra,12(sp)
 8008958:	2023883a 	mov	r17,r4
 800895c:	80000226 	beq	r16,zero,8008968 <fputwc+0x28>
 8008960:	80800e17 	ldw	r2,56(r16)
 8008964:	10001026 	beq	r2,zero,80089a8 <fputwc+0x68>
 8008968:	2880030b 	ldhu	r2,12(r5)
 800896c:	10c8000c 	andi	r3,r2,8192
 8008970:	1800051e 	bne	r3,zero,8008988 <fputwc+0x48>
 8008974:	28c01917 	ldw	r3,100(r5)
 8008978:	10880014 	ori	r2,r2,8192
 800897c:	2880030d 	sth	r2,12(r5)
 8008980:	18880014 	ori	r2,r3,8192
 8008984:	28801915 	stw	r2,100(r5)
 8008988:	280d883a 	mov	r6,r5
 800898c:	8009883a 	mov	r4,r16
 8008990:	880b883a 	mov	r5,r17
 8008994:	dfc00317 	ldw	ra,12(sp)
 8008998:	dc400217 	ldw	r17,8(sp)
 800899c:	dc000117 	ldw	r16,4(sp)
 80089a0:	dec00404 	addi	sp,sp,16
 80089a4:	80087cc1 	jmpi	80087cc <__fputwc>
 80089a8:	8009883a 	mov	r4,r16
 80089ac:	d9400015 	stw	r5,0(sp)
 80089b0:	8004cc00 	call	8004cc0 <__sinit>
 80089b4:	d9400017 	ldw	r5,0(sp)
 80089b8:	003feb06 	br	8008968 <fputwc+0x28>

080089bc <_fstat_r>:
 80089bc:	defffe04 	addi	sp,sp,-8
 80089c0:	2805883a 	mov	r2,r5
 80089c4:	dc000015 	stw	r16,0(sp)
 80089c8:	300b883a 	mov	r5,r6
 80089cc:	2021883a 	mov	r16,r4
 80089d0:	1009883a 	mov	r4,r2
 80089d4:	00820074 	movhi	r2,2049
 80089d8:	dfc00115 	stw	ra,4(sp)
 80089dc:	100e4415 	stw	zero,14608(r2)
 80089e0:	800d4000 	call	800d400 <fstat>
 80089e4:	10ffffd8 	cmpnei	r3,r2,-1
 80089e8:	18000426 	beq	r3,zero,80089fc <_fstat_r+0x40>
 80089ec:	dfc00117 	ldw	ra,4(sp)
 80089f0:	dc000017 	ldw	r16,0(sp)
 80089f4:	dec00204 	addi	sp,sp,8
 80089f8:	f800283a 	ret
 80089fc:	00c20074 	movhi	r3,2049
 8008a00:	18ce4417 	ldw	r3,14608(r3)
 8008a04:	183ff926 	beq	r3,zero,80089ec <_fstat_r+0x30>
 8008a08:	80c00015 	stw	r3,0(r16)
 8008a0c:	dfc00117 	ldw	ra,4(sp)
 8008a10:	dc000017 	ldw	r16,0(sp)
 8008a14:	dec00204 	addi	sp,sp,8
 8008a18:	f800283a 	ret

08008a1c <__sfvwrite_r>:
 8008a1c:	30800217 	ldw	r2,8(r6)
 8008a20:	1000ca26 	beq	r2,zero,8008d4c <__sfvwrite_r+0x330>
 8008a24:	2880030b 	ldhu	r2,12(r5)
 8008a28:	defff304 	addi	sp,sp,-52
 8008a2c:	dd000715 	stw	r20,28(sp)
 8008a30:	dc000315 	stw	r16,12(sp)
 8008a34:	dfc00c15 	stw	ra,48(sp)
 8008a38:	df000b15 	stw	fp,44(sp)
 8008a3c:	ddc00a15 	stw	r23,40(sp)
 8008a40:	dd800915 	stw	r22,36(sp)
 8008a44:	dd400815 	stw	r21,32(sp)
 8008a48:	dcc00615 	stw	r19,24(sp)
 8008a4c:	dc800515 	stw	r18,20(sp)
 8008a50:	dc400415 	stw	r17,16(sp)
 8008a54:	d9000015 	stw	r4,0(sp)
 8008a58:	10c0020c 	andi	r3,r2,8
 8008a5c:	2821883a 	mov	r16,r5
 8008a60:	3029883a 	mov	r20,r6
 8008a64:	18002426 	beq	r3,zero,8008af8 <__sfvwrite_r+0xdc>
 8008a68:	28c00417 	ldw	r3,16(r5)
 8008a6c:	18002226 	beq	r3,zero,8008af8 <__sfvwrite_r+0xdc>
 8008a70:	10c0008c 	andi	r3,r2,2
 8008a74:	a4400017 	ldw	r17,0(r20)
 8008a78:	18002726 	beq	r3,zero,8008b18 <__sfvwrite_r+0xfc>
 8008a7c:	80c00917 	ldw	r3,36(r16)
 8008a80:	80800717 	ldw	r2,28(r16)
 8008a84:	05600034 	movhi	r21,32768
 8008a88:	0027883a 	mov	r19,zero
 8008a8c:	0025883a 	mov	r18,zero
 8008a90:	ad7f0004 	addi	r21,r21,-1024
 8008a94:	980d883a 	mov	r6,r19
 8008a98:	100b883a 	mov	r5,r2
 8008a9c:	d9000017 	ldw	r4,0(sp)
 8008aa0:	90001126 	beq	r18,zero,8008ae8 <__sfvwrite_r+0xcc>
 8008aa4:	900f883a 	mov	r7,r18
 8008aa8:	ac80012e 	bgeu	r21,r18,8008ab0 <__sfvwrite_r+0x94>
 8008aac:	a80f883a 	mov	r7,r21
 8008ab0:	183ee83a 	callr	r3
 8008ab4:	0080a00e 	bge	zero,r2,8008d38 <__sfvwrite_r+0x31c>
 8008ab8:	a0c00217 	ldw	r3,8(r20)
 8008abc:	98a7883a 	add	r19,r19,r2
 8008ac0:	90a5c83a 	sub	r18,r18,r2
 8008ac4:	1885c83a 	sub	r2,r3,r2
 8008ac8:	a0800215 	stw	r2,8(r20)
 8008acc:	10006426 	beq	r2,zero,8008c60 <__sfvwrite_r+0x244>
 8008ad0:	80800717 	ldw	r2,28(r16)
 8008ad4:	80c00917 	ldw	r3,36(r16)
 8008ad8:	980d883a 	mov	r6,r19
 8008adc:	100b883a 	mov	r5,r2
 8008ae0:	d9000017 	ldw	r4,0(sp)
 8008ae4:	903fef1e 	bne	r18,zero,8008aa4 <__sfvwrite_r+0x88>
 8008ae8:	8cc00017 	ldw	r19,0(r17)
 8008aec:	8c800117 	ldw	r18,4(r17)
 8008af0:	8c400204 	addi	r17,r17,8
 8008af4:	003fe706 	br	8008a94 <__sfvwrite_r+0x78>
 8008af8:	d9000017 	ldw	r4,0(sp)
 8008afc:	800b883a 	mov	r5,r16
 8008b00:	8002ca80 	call	8002ca8 <__swsetup_r>
 8008b04:	1000f81e 	bne	r2,zero,8008ee8 <__sfvwrite_r+0x4cc>
 8008b08:	8080030b 	ldhu	r2,12(r16)
 8008b0c:	a4400017 	ldw	r17,0(r20)
 8008b10:	10c0008c 	andi	r3,r2,2
 8008b14:	183fd91e 	bne	r3,zero,8008a7c <__sfvwrite_r+0x60>
 8008b18:	10c0004c 	andi	r3,r2,1
 8008b1c:	84800217 	ldw	r18,8(r16)
 8008b20:	87000017 	ldw	fp,0(r16)
 8008b24:	18008b1e 	bne	r3,zero,8008d54 <__sfvwrite_r+0x338>
 8008b28:	00e00034 	movhi	r3,32768
 8008b2c:	18ffff84 	addi	r3,r3,-2
 8008b30:	01200034 	movhi	r4,32768
 8008b34:	d8c00115 	stw	r3,4(sp)
 8008b38:	20ffffc4 	addi	r3,r4,-1
 8008b3c:	002d883a 	mov	r22,zero
 8008b40:	002f883a 	mov	r23,zero
 8008b44:	d8c00215 	stw	r3,8(sp)
 8008b48:	b8004126 	beq	r23,zero,8008c50 <__sfvwrite_r+0x234>
 8008b4c:	1100800c 	andi	r4,r2,512
 8008b50:	20009126 	beq	r4,zero,8008d98 <__sfvwrite_r+0x37c>
 8008b54:	902b883a 	mov	r21,r18
 8008b58:	bc80b836 	bltu	r23,r18,8008e3c <__sfvwrite_r+0x420>
 8008b5c:	1101200c 	andi	r4,r2,1152
 8008b60:	20002626 	beq	r4,zero,8008bfc <__sfvwrite_r+0x1e0>
 8008b64:	84800517 	ldw	r18,20(r16)
 8008b68:	81400417 	ldw	r5,16(r16)
 8008b6c:	b9000044 	addi	r4,r23,1
 8008b70:	948d883a 	add	r6,r18,r18
 8008b74:	348d883a 	add	r6,r6,r18
 8008b78:	3024d7fa 	srli	r18,r6,31
 8008b7c:	e167c83a 	sub	r19,fp,r5
 8008b80:	24c9883a 	add	r4,r4,r19
 8008b84:	91a5883a 	add	r18,r18,r6
 8008b88:	9025d07a 	srai	r18,r18,1
 8008b8c:	900d883a 	mov	r6,r18
 8008b90:	9100022e 	bgeu	r18,r4,8008b9c <__sfvwrite_r+0x180>
 8008b94:	2025883a 	mov	r18,r4
 8008b98:	200d883a 	mov	r6,r4
 8008b9c:	1081000c 	andi	r2,r2,1024
 8008ba0:	1000bf26 	beq	r2,zero,8008ea0 <__sfvwrite_r+0x484>
 8008ba4:	d9000017 	ldw	r4,0(sp)
 8008ba8:	300b883a 	mov	r5,r6
 8008bac:	800546c0 	call	800546c <_malloc_r>
 8008bb0:	1000c826 	beq	r2,zero,8008ed4 <__sfvwrite_r+0x4b8>
 8008bb4:	81400417 	ldw	r5,16(r16)
 8008bb8:	980d883a 	mov	r6,r19
 8008bbc:	1009883a 	mov	r4,r2
 8008bc0:	80008e00 	call	80008e0 <memcpy>
 8008bc4:	100f883a 	mov	r7,r2
 8008bc8:	8080030b 	ldhu	r2,12(r16)
 8008bcc:	00fedfc4 	movi	r3,-1153
 8008bd0:	10c4703a 	and	r2,r2,r3
 8008bd4:	10802014 	ori	r2,r2,128
 8008bd8:	8080030d 	sth	r2,12(r16)
 8008bdc:	94c5c83a 	sub	r2,r18,r19
 8008be0:	3cf9883a 	add	fp,r7,r19
 8008be4:	84800515 	stw	r18,20(r16)
 8008be8:	81c00415 	stw	r7,16(r16)
 8008bec:	87000015 	stw	fp,0(r16)
 8008bf0:	b825883a 	mov	r18,r23
 8008bf4:	80800215 	stw	r2,8(r16)
 8008bf8:	b82b883a 	mov	r21,r23
 8008bfc:	a80d883a 	mov	r6,r21
 8008c00:	b00b883a 	mov	r5,r22
 8008c04:	e009883a 	mov	r4,fp
 8008c08:	800908c0 	call	800908c <memmove>
 8008c0c:	80800217 	ldw	r2,8(r16)
 8008c10:	81800017 	ldw	r6,0(r16)
 8008c14:	b827883a 	mov	r19,r23
 8008c18:	14a5c83a 	sub	r18,r2,r18
 8008c1c:	354d883a 	add	r6,r6,r21
 8008c20:	84800215 	stw	r18,8(r16)
 8008c24:	81800015 	stw	r6,0(r16)
 8008c28:	002f883a 	mov	r23,zero
 8008c2c:	a0800217 	ldw	r2,8(r20)
 8008c30:	b4ed883a 	add	r22,r22,r19
 8008c34:	14e7c83a 	sub	r19,r2,r19
 8008c38:	a4c00215 	stw	r19,8(r20)
 8008c3c:	98000826 	beq	r19,zero,8008c60 <__sfvwrite_r+0x244>
 8008c40:	8080030b 	ldhu	r2,12(r16)
 8008c44:	84800217 	ldw	r18,8(r16)
 8008c48:	87000017 	ldw	fp,0(r16)
 8008c4c:	b83fbf1e 	bne	r23,zero,8008b4c <__sfvwrite_r+0x130>
 8008c50:	8d800017 	ldw	r22,0(r17)
 8008c54:	8dc00117 	ldw	r23,4(r17)
 8008c58:	8c400204 	addi	r17,r17,8
 8008c5c:	003fba06 	br	8008b48 <__sfvwrite_r+0x12c>
 8008c60:	0005883a 	mov	r2,zero
 8008c64:	dfc00c17 	ldw	ra,48(sp)
 8008c68:	df000b17 	ldw	fp,44(sp)
 8008c6c:	ddc00a17 	ldw	r23,40(sp)
 8008c70:	dd800917 	ldw	r22,36(sp)
 8008c74:	dd400817 	ldw	r21,32(sp)
 8008c78:	dd000717 	ldw	r20,28(sp)
 8008c7c:	dcc00617 	ldw	r19,24(sp)
 8008c80:	dc800517 	ldw	r18,20(sp)
 8008c84:	dc400417 	ldw	r17,16(sp)
 8008c88:	dc000317 	ldw	r16,12(sp)
 8008c8c:	dec00d04 	addi	sp,sp,52
 8008c90:	f800283a 	ret
 8008c94:	b1c07116 	blt	r22,r7,8008e5c <__sfvwrite_r+0x440>
 8008c98:	80800917 	ldw	r2,36(r16)
 8008c9c:	81400717 	ldw	r5,28(r16)
 8008ca0:	d9000017 	ldw	r4,0(sp)
 8008ca4:	b80d883a 	mov	r6,r23
 8008ca8:	103ee83a 	callr	r2
 8008cac:	1025883a 	mov	r18,r2
 8008cb0:	0080210e 	bge	zero,r2,8008d38 <__sfvwrite_r+0x31c>
 8008cb4:	acabc83a 	sub	r21,r21,r18
 8008cb8:	a8006326 	beq	r21,zero,8008e48 <__sfvwrite_r+0x42c>
 8008cbc:	00800044 	movi	r2,1
 8008cc0:	a0c00217 	ldw	r3,8(r20)
 8008cc4:	bcaf883a 	add	r23,r23,r18
 8008cc8:	9ca7c83a 	sub	r19,r19,r18
 8008ccc:	1ca5c83a 	sub	r18,r3,r18
 8008cd0:	a4800215 	stw	r18,8(r20)
 8008cd4:	903fe226 	beq	r18,zero,8008c60 <__sfvwrite_r+0x244>
 8008cd8:	84800217 	ldw	r18,8(r16)
 8008cdc:	87000017 	ldw	fp,0(r16)
 8008ce0:	98002126 	beq	r19,zero,8008d68 <__sfvwrite_r+0x34c>
 8008ce4:	10002426 	beq	r2,zero,8008d78 <__sfvwrite_r+0x35c>
 8008ce8:	a805883a 	mov	r2,r21
 8008cec:	982d883a 	mov	r22,r19
 8008cf0:	14c0012e 	bgeu	r2,r19,8008cf8 <__sfvwrite_r+0x2dc>
 8008cf4:	102d883a 	mov	r22,r2
 8008cf8:	80800417 	ldw	r2,16(r16)
 8008cfc:	81c00517 	ldw	r7,20(r16)
 8008d00:	173fe42e 	bgeu	r2,fp,8008c94 <__sfvwrite_r+0x278>
 8008d04:	3ca5883a 	add	r18,r7,r18
 8008d08:	95bfe20e 	bge	r18,r22,8008c94 <__sfvwrite_r+0x278>
 8008d0c:	b80b883a 	mov	r5,r23
 8008d10:	e009883a 	mov	r4,fp
 8008d14:	900d883a 	mov	r6,r18
 8008d18:	800908c0 	call	800908c <memmove>
 8008d1c:	80800017 	ldw	r2,0(r16)
 8008d20:	d9000017 	ldw	r4,0(sp)
 8008d24:	800b883a 	mov	r5,r16
 8008d28:	1485883a 	add	r2,r2,r18
 8008d2c:	80800015 	stw	r2,0(r16)
 8008d30:	800492c0 	call	800492c <_fflush_r>
 8008d34:	103fdf26 	beq	r2,zero,8008cb4 <__sfvwrite_r+0x298>
 8008d38:	8080030b 	ldhu	r2,12(r16)
 8008d3c:	10801014 	ori	r2,r2,64
 8008d40:	8080030d 	sth	r2,12(r16)
 8008d44:	00bfffc4 	movi	r2,-1
 8008d48:	003fc606 	br	8008c64 <__sfvwrite_r+0x248>
 8008d4c:	0005883a 	mov	r2,zero
 8008d50:	f800283a 	ret
 8008d54:	0027883a 	mov	r19,zero
 8008d58:	002b883a 	mov	r21,zero
 8008d5c:	0005883a 	mov	r2,zero
 8008d60:	002f883a 	mov	r23,zero
 8008d64:	983fdf1e 	bne	r19,zero,8008ce4 <__sfvwrite_r+0x2c8>
 8008d68:	8cc00117 	ldw	r19,4(r17)
 8008d6c:	8dc00017 	ldw	r23,0(r17)
 8008d70:	8c400204 	addi	r17,r17,8
 8008d74:	983ffc26 	beq	r19,zero,8008d68 <__sfvwrite_r+0x34c>
 8008d78:	980d883a 	mov	r6,r19
 8008d7c:	01400284 	movi	r5,10
 8008d80:	b809883a 	mov	r4,r23
 8008d84:	8005c600 	call	8005c60 <memchr>
 8008d88:	10004226 	beq	r2,zero,8008e94 <__sfvwrite_r+0x478>
 8008d8c:	10800044 	addi	r2,r2,1
 8008d90:	15ebc83a 	sub	r21,r2,r23
 8008d94:	003fd406 	br	8008ce8 <__sfvwrite_r+0x2cc>
 8008d98:	80800417 	ldw	r2,16(r16)
 8008d9c:	17001436 	bltu	r2,fp,8008df0 <__sfvwrite_r+0x3d4>
 8008da0:	84c00517 	ldw	r19,20(r16)
 8008da4:	bcc01236 	bltu	r23,r19,8008df0 <__sfvwrite_r+0x3d4>
 8008da8:	d8800117 	ldw	r2,4(sp)
 8008dac:	15c0372e 	bgeu	r2,r23,8008e8c <__sfvwrite_r+0x470>
 8008db0:	d9000217 	ldw	r4,8(sp)
 8008db4:	980b883a 	mov	r5,r19
 8008db8:	800a78c0 	call	800a78c <__divsi3>
 8008dbc:	980b883a 	mov	r5,r19
 8008dc0:	1009883a 	mov	r4,r2
 8008dc4:	80008b80 	call	80008b8 <__mulsi3>
 8008dc8:	81400717 	ldw	r5,28(r16)
 8008dcc:	82800917 	ldw	r10,36(r16)
 8008dd0:	d9000017 	ldw	r4,0(sp)
 8008dd4:	100f883a 	mov	r7,r2
 8008dd8:	b00d883a 	mov	r6,r22
 8008ddc:	503ee83a 	callr	r10
 8008de0:	00bfd50e 	bge	zero,r2,8008d38 <__sfvwrite_r+0x31c>
 8008de4:	1027883a 	mov	r19,r2
 8008de8:	bcefc83a 	sub	r23,r23,r19
 8008dec:	003f8f06 	br	8008c2c <__sfvwrite_r+0x210>
 8008df0:	9027883a 	mov	r19,r18
 8008df4:	bc80012e 	bgeu	r23,r18,8008dfc <__sfvwrite_r+0x3e0>
 8008df8:	b827883a 	mov	r19,r23
 8008dfc:	e009883a 	mov	r4,fp
 8008e00:	980d883a 	mov	r6,r19
 8008e04:	b00b883a 	mov	r5,r22
 8008e08:	800908c0 	call	800908c <memmove>
 8008e0c:	80800217 	ldw	r2,8(r16)
 8008e10:	81000017 	ldw	r4,0(r16)
 8008e14:	14c5c83a 	sub	r2,r2,r19
 8008e18:	24c9883a 	add	r4,r4,r19
 8008e1c:	80800215 	stw	r2,8(r16)
 8008e20:	81000015 	stw	r4,0(r16)
 8008e24:	103ff01e 	bne	r2,zero,8008de8 <__sfvwrite_r+0x3cc>
 8008e28:	d9000017 	ldw	r4,0(sp)
 8008e2c:	800b883a 	mov	r5,r16
 8008e30:	800492c0 	call	800492c <_fflush_r>
 8008e34:	103fec26 	beq	r2,zero,8008de8 <__sfvwrite_r+0x3cc>
 8008e38:	003fbf06 	br	8008d38 <__sfvwrite_r+0x31c>
 8008e3c:	b825883a 	mov	r18,r23
 8008e40:	b82b883a 	mov	r21,r23
 8008e44:	003f6d06 	br	8008bfc <__sfvwrite_r+0x1e0>
 8008e48:	d9000017 	ldw	r4,0(sp)
 8008e4c:	800b883a 	mov	r5,r16
 8008e50:	800492c0 	call	800492c <_fflush_r>
 8008e54:	103f9a26 	beq	r2,zero,8008cc0 <__sfvwrite_r+0x2a4>
 8008e58:	003fb706 	br	8008d38 <__sfvwrite_r+0x31c>
 8008e5c:	b00d883a 	mov	r6,r22
 8008e60:	b80b883a 	mov	r5,r23
 8008e64:	e009883a 	mov	r4,fp
 8008e68:	800908c0 	call	800908c <memmove>
 8008e6c:	80c00217 	ldw	r3,8(r16)
 8008e70:	80800017 	ldw	r2,0(r16)
 8008e74:	b025883a 	mov	r18,r22
 8008e78:	1d87c83a 	sub	r3,r3,r22
 8008e7c:	15ad883a 	add	r22,r2,r22
 8008e80:	80c00215 	stw	r3,8(r16)
 8008e84:	85800015 	stw	r22,0(r16)
 8008e88:	003f8a06 	br	8008cb4 <__sfvwrite_r+0x298>
 8008e8c:	b809883a 	mov	r4,r23
 8008e90:	003fc806 	br	8008db4 <__sfvwrite_r+0x398>
 8008e94:	98800044 	addi	r2,r19,1
 8008e98:	102b883a 	mov	r21,r2
 8008e9c:	003f9306 	br	8008cec <__sfvwrite_r+0x2d0>
 8008ea0:	d9000017 	ldw	r4,0(sp)
 8008ea4:	800921c0 	call	800921c <_realloc_r>
 8008ea8:	100f883a 	mov	r7,r2
 8008eac:	103f4b1e 	bne	r2,zero,8008bdc <__sfvwrite_r+0x1c0>
 8008eb0:	dc400017 	ldw	r17,0(sp)
 8008eb4:	81400417 	ldw	r5,16(r16)
 8008eb8:	8809883a 	mov	r4,r17
 8008ebc:	8004e240 	call	8004e24 <_free_r>
 8008ec0:	8080030b 	ldhu	r2,12(r16)
 8008ec4:	00c00304 	movi	r3,12
 8008ec8:	88c00015 	stw	r3,0(r17)
 8008ecc:	10bfdfcc 	andi	r2,r2,65407
 8008ed0:	003f9a06 	br	8008d3c <__sfvwrite_r+0x320>
 8008ed4:	d8c00017 	ldw	r3,0(sp)
 8008ed8:	00800304 	movi	r2,12
 8008edc:	18800015 	stw	r2,0(r3)
 8008ee0:	8080030b 	ldhu	r2,12(r16)
 8008ee4:	003f9506 	br	8008d3c <__sfvwrite_r+0x320>
 8008ee8:	00bfffc4 	movi	r2,-1
 8008eec:	003f5d06 	br	8008c64 <__sfvwrite_r+0x248>

08008ef0 <_isatty_r>:
 8008ef0:	defffe04 	addi	sp,sp,-8
 8008ef4:	dc000015 	stw	r16,0(sp)
 8008ef8:	00820074 	movhi	r2,2049
 8008efc:	2021883a 	mov	r16,r4
 8008f00:	2809883a 	mov	r4,r5
 8008f04:	dfc00115 	stw	ra,4(sp)
 8008f08:	100e4415 	stw	zero,14608(r2)
 8008f0c:	800d4f80 	call	800d4f8 <isatty>
 8008f10:	10ffffd8 	cmpnei	r3,r2,-1
 8008f14:	18000426 	beq	r3,zero,8008f28 <_isatty_r+0x38>
 8008f18:	dfc00117 	ldw	ra,4(sp)
 8008f1c:	dc000017 	ldw	r16,0(sp)
 8008f20:	dec00204 	addi	sp,sp,8
 8008f24:	f800283a 	ret
 8008f28:	00c20074 	movhi	r3,2049
 8008f2c:	18ce4417 	ldw	r3,14608(r3)
 8008f30:	183ff926 	beq	r3,zero,8008f18 <_isatty_r+0x28>
 8008f34:	80c00015 	stw	r3,0(r16)
 8008f38:	dfc00117 	ldw	ra,4(sp)
 8008f3c:	dc000017 	ldw	r16,0(sp)
 8008f40:	dec00204 	addi	sp,sp,8
 8008f44:	f800283a 	ret

08008f48 <_setlocale_r>:
 8008f48:	30001826 	beq	r6,zero,8008fac <_setlocale_r+0x64>
 8008f4c:	01420074 	movhi	r5,2049
 8008f50:	defffe04 	addi	sp,sp,-8
 8008f54:	297f6204 	addi	r5,r5,-632
 8008f58:	3009883a 	mov	r4,r6
 8008f5c:	dc000015 	stw	r16,0(sp)
 8008f60:	dfc00115 	stw	ra,4(sp)
 8008f64:	3021883a 	mov	r16,r6
 8008f68:	80098480 	call	8009848 <strcmp>
 8008f6c:	1000061e 	bne	r2,zero,8008f88 <_setlocale_r+0x40>
 8008f70:	00820074 	movhi	r2,2049
 8008f74:	10bf6104 	addi	r2,r2,-636
 8008f78:	dfc00117 	ldw	ra,4(sp)
 8008f7c:	dc000017 	ldw	r16,0(sp)
 8008f80:	dec00204 	addi	sp,sp,8
 8008f84:	f800283a 	ret
 8008f88:	01420074 	movhi	r5,2049
 8008f8c:	297f6104 	addi	r5,r5,-636
 8008f90:	8009883a 	mov	r4,r16
 8008f94:	80098480 	call	8009848 <strcmp>
 8008f98:	103ff526 	beq	r2,zero,8008f70 <_setlocale_r+0x28>
 8008f9c:	80800003 	ldbu	r2,0(r16)
 8008fa0:	103ff326 	beq	r2,zero,8008f70 <_setlocale_r+0x28>
 8008fa4:	0005883a 	mov	r2,zero
 8008fa8:	003ff306 	br	8008f78 <_setlocale_r+0x30>
 8008fac:	00820074 	movhi	r2,2049
 8008fb0:	10bf6104 	addi	r2,r2,-636
 8008fb4:	f800283a 	ret

08008fb8 <__locale_mb_cur_max>:
 8008fb8:	00820074 	movhi	r2,2049
 8008fbc:	1082a807 	ldb	r2,2720(r2)
 8008fc0:	f800283a 	ret

08008fc4 <setlocale>:
 8008fc4:	00820074 	movhi	r2,2049
 8008fc8:	280d883a 	mov	r6,r5
 8008fcc:	200b883a 	mov	r5,r4
 8008fd0:	11073d17 	ldw	r4,7412(r2)
 8008fd4:	8008f481 	jmpi	8008f48 <_setlocale_r>

08008fd8 <_lseek_r>:
 8008fd8:	defffe04 	addi	sp,sp,-8
 8008fdc:	2805883a 	mov	r2,r5
 8008fe0:	dc000015 	stw	r16,0(sp)
 8008fe4:	300b883a 	mov	r5,r6
 8008fe8:	2021883a 	mov	r16,r4
 8008fec:	380d883a 	mov	r6,r7
 8008ff0:	1009883a 	mov	r4,r2
 8008ff4:	00820074 	movhi	r2,2049
 8008ff8:	dfc00115 	stw	ra,4(sp)
 8008ffc:	100e4415 	stw	zero,14608(r2)
 8009000:	800d6d00 	call	800d6d0 <lseek>
 8009004:	10ffffd8 	cmpnei	r3,r2,-1
 8009008:	18000426 	beq	r3,zero,800901c <_lseek_r+0x44>
 800900c:	dfc00117 	ldw	ra,4(sp)
 8009010:	dc000017 	ldw	r16,0(sp)
 8009014:	dec00204 	addi	sp,sp,8
 8009018:	f800283a 	ret
 800901c:	00c20074 	movhi	r3,2049
 8009020:	18ce4417 	ldw	r3,14608(r3)
 8009024:	183ff926 	beq	r3,zero,800900c <_lseek_r+0x34>
 8009028:	80c00015 	stw	r3,0(r16)
 800902c:	dfc00117 	ldw	ra,4(sp)
 8009030:	dc000017 	ldw	r16,0(sp)
 8009034:	dec00204 	addi	sp,sp,8
 8009038:	f800283a 	ret

0800903c <_mbtowc_r>:
 800903c:	00820074 	movhi	r2,2049
 8009040:	10829717 	ldw	r2,2652(r2)
 8009044:	1000683a 	jmp	r2

08009048 <__ascii_mbtowc>:
 8009048:	deffff04 	addi	sp,sp,-4
 800904c:	28000826 	beq	r5,zero,8009070 <__ascii_mbtowc+0x28>
 8009050:	30000926 	beq	r6,zero,8009078 <__ascii_mbtowc+0x30>
 8009054:	38000b26 	beq	r7,zero,8009084 <__ascii_mbtowc+0x3c>
 8009058:	30800003 	ldbu	r2,0(r6)
 800905c:	28800015 	stw	r2,0(r5)
 8009060:	30800003 	ldbu	r2,0(r6)
 8009064:	1004c03a 	cmpne	r2,r2,zero
 8009068:	dec00104 	addi	sp,sp,4
 800906c:	f800283a 	ret
 8009070:	d80b883a 	mov	r5,sp
 8009074:	303ff71e 	bne	r6,zero,8009054 <__ascii_mbtowc+0xc>
 8009078:	0005883a 	mov	r2,zero
 800907c:	dec00104 	addi	sp,sp,4
 8009080:	f800283a 	ret
 8009084:	00bfff84 	movi	r2,-2
 8009088:	003ff706 	br	8009068 <__ascii_mbtowc+0x20>

0800908c <memmove>:
 800908c:	2005883a 	mov	r2,r4
 8009090:	29000a2e 	bgeu	r5,r4,80090bc <memmove+0x30>
 8009094:	2989883a 	add	r4,r5,r6
 8009098:	1100082e 	bgeu	r2,r4,80090bc <memmove+0x30>
 800909c:	1187883a 	add	r3,r2,r6
 80090a0:	30003e26 	beq	r6,zero,800919c <memmove+0x110>
 80090a4:	213fffc4 	addi	r4,r4,-1
 80090a8:	21400003 	ldbu	r5,0(r4)
 80090ac:	18ffffc4 	addi	r3,r3,-1
 80090b0:	19400005 	stb	r5,0(r3)
 80090b4:	10fffb1e 	bne	r2,r3,80090a4 <memmove+0x18>
 80090b8:	f800283a 	ret
 80090bc:	30c00430 	cmpltui	r3,r6,16
 80090c0:	18000b26 	beq	r3,zero,80090f0 <memmove+0x64>
 80090c4:	1007883a 	mov	r3,r2
 80090c8:	31ffffc4 	addi	r7,r6,-1
 80090cc:	30003726 	beq	r6,zero,80091ac <memmove+0x120>
 80090d0:	39c00044 	addi	r7,r7,1
 80090d4:	29cf883a 	add	r7,r5,r7
 80090d8:	29400044 	addi	r5,r5,1
 80090dc:	29bfffc3 	ldbu	r6,-1(r5)
 80090e0:	18c00044 	addi	r3,r3,1
 80090e4:	19bfffc5 	stb	r6,-1(r3)
 80090e8:	29fffb1e 	bne	r5,r7,80090d8 <memmove+0x4c>
 80090ec:	f800283a 	ret
 80090f0:	2886b03a 	or	r3,r5,r2
 80090f4:	18c000cc 	andi	r3,r3,3
 80090f8:	1800291e 	bne	r3,zero,80091a0 <memmove+0x114>
 80090fc:	327ffc04 	addi	r9,r6,-16
 8009100:	4812d13a 	srli	r9,r9,4
 8009104:	280f883a 	mov	r7,r5
 8009108:	1007883a 	mov	r3,r2
 800910c:	4a400044 	addi	r9,r9,1
 8009110:	4812913a 	slli	r9,r9,4
 8009114:	1251883a 	add	r8,r2,r9
 8009118:	39000017 	ldw	r4,0(r7)
 800911c:	18c00404 	addi	r3,r3,16
 8009120:	39c00404 	addi	r7,r7,16
 8009124:	193ffc15 	stw	r4,-16(r3)
 8009128:	393ffd17 	ldw	r4,-12(r7)
 800912c:	193ffd15 	stw	r4,-12(r3)
 8009130:	393ffe17 	ldw	r4,-8(r7)
 8009134:	193ffe15 	stw	r4,-8(r3)
 8009138:	393fff17 	ldw	r4,-4(r7)
 800913c:	193fff15 	stw	r4,-4(r3)
 8009140:	40fff51e 	bne	r8,r3,8009118 <memmove+0x8c>
 8009144:	3100030c 	andi	r4,r6,12
 8009148:	2a4b883a 	add	r5,r5,r9
 800914c:	320003cc 	andi	r8,r6,15
 8009150:	20001726 	beq	r4,zero,80091b0 <memmove+0x124>
 8009154:	2813883a 	mov	r9,r5
 8009158:	180f883a 	mov	r7,r3
 800915c:	4a400104 	addi	r9,r9,4
 8009160:	39c00104 	addi	r7,r7,4
 8009164:	4abfff17 	ldw	r10,-4(r9)
 8009168:	41c9c83a 	sub	r4,r8,r7
 800916c:	1909883a 	add	r4,r3,r4
 8009170:	3abfff15 	stw	r10,-4(r7)
 8009174:	21000128 	cmpgeui	r4,r4,4
 8009178:	203ff81e 	bne	r4,zero,800915c <memmove+0xd0>
 800917c:	413fff04 	addi	r4,r8,-4
 8009180:	2008d0ba 	srli	r4,r4,2
 8009184:	318000cc 	andi	r6,r6,3
 8009188:	21000044 	addi	r4,r4,1
 800918c:	200890ba 	slli	r4,r4,2
 8009190:	1907883a 	add	r3,r3,r4
 8009194:	290b883a 	add	r5,r5,r4
 8009198:	003fcb06 	br	80090c8 <memmove+0x3c>
 800919c:	f800283a 	ret
 80091a0:	31ffffc4 	addi	r7,r6,-1
 80091a4:	1007883a 	mov	r3,r2
 80091a8:	003fc906 	br	80090d0 <memmove+0x44>
 80091ac:	f800283a 	ret
 80091b0:	400d883a 	mov	r6,r8
 80091b4:	003fc406 	br	80090c8 <memmove+0x3c>

080091b8 <_read_r>:
 80091b8:	defffe04 	addi	sp,sp,-8
 80091bc:	2805883a 	mov	r2,r5
 80091c0:	dc000015 	stw	r16,0(sp)
 80091c4:	300b883a 	mov	r5,r6
 80091c8:	2021883a 	mov	r16,r4
 80091cc:	380d883a 	mov	r6,r7
 80091d0:	1009883a 	mov	r4,r2
 80091d4:	00820074 	movhi	r2,2049
 80091d8:	dfc00115 	stw	ra,4(sp)
 80091dc:	100e4415 	stw	zero,14608(r2)
 80091e0:	800d8b00 	call	800d8b0 <read>
 80091e4:	10ffffd8 	cmpnei	r3,r2,-1
 80091e8:	18000426 	beq	r3,zero,80091fc <_read_r+0x44>
 80091ec:	dfc00117 	ldw	ra,4(sp)
 80091f0:	dc000017 	ldw	r16,0(sp)
 80091f4:	dec00204 	addi	sp,sp,8
 80091f8:	f800283a 	ret
 80091fc:	00c20074 	movhi	r3,2049
 8009200:	18ce4417 	ldw	r3,14608(r3)
 8009204:	183ff926 	beq	r3,zero,80091ec <_read_r+0x34>
 8009208:	80c00015 	stw	r3,0(r16)
 800920c:	dfc00117 	ldw	ra,4(sp)
 8009210:	dc000017 	ldw	r16,0(sp)
 8009214:	dec00204 	addi	sp,sp,8
 8009218:	f800283a 	ret

0800921c <_realloc_r>:
 800921c:	defff504 	addi	sp,sp,-44
 8009220:	dcc00415 	stw	r19,16(sp)
 8009224:	dfc00a15 	stw	ra,40(sp)
 8009228:	df000915 	stw	fp,36(sp)
 800922c:	ddc00815 	stw	r23,32(sp)
 8009230:	dd800715 	stw	r22,28(sp)
 8009234:	dd400615 	stw	r21,24(sp)
 8009238:	dd000515 	stw	r20,20(sp)
 800923c:	dc800315 	stw	r18,12(sp)
 8009240:	dc400215 	stw	r17,8(sp)
 8009244:	dc000115 	stw	r16,4(sp)
 8009248:	3027883a 	mov	r19,r6
 800924c:	28008b26 	beq	r5,zero,800947c <_realloc_r+0x260>
 8009250:	282d883a 	mov	r22,r5
 8009254:	202b883a 	mov	r21,r4
 8009258:	9c0002c4 	addi	r16,r19,11
 800925c:	800d82c0 	call	800d82c <__malloc_lock>
 8009260:	808005f0 	cmpltui	r2,r16,23
 8009264:	1000521e 	bne	r2,zero,80093b0 <_realloc_r+0x194>
 8009268:	017ffe04 	movi	r5,-8
 800926c:	8160703a 	and	r16,r16,r5
 8009270:	8007883a 	mov	r3,r16
 8009274:	80005116 	blt	r16,zero,80093bc <_realloc_r+0x1a0>
 8009278:	84c05036 	bltu	r16,r19,80093bc <_realloc_r+0x1a0>
 800927c:	b0bfff17 	ldw	r2,-4(r22)
 8009280:	017fff04 	movi	r5,-4
 8009284:	b4bffe04 	addi	r18,r22,-8
 8009288:	1162703a 	and	r17,r2,r5
 800928c:	9469883a 	add	r20,r18,r17
 8009290:	88c0390e 	bge	r17,r3,8009378 <_realloc_r+0x15c>
 8009294:	07020074 	movhi	fp,2049
 8009298:	e7015c04 	addi	fp,fp,1392
 800929c:	e2000217 	ldw	r8,8(fp)
 80092a0:	a1000117 	ldw	r4,4(r20)
 80092a4:	45008e26 	beq	r8,r20,80094e0 <_realloc_r+0x2c4>
 80092a8:	01bfff84 	movi	r6,-2
 80092ac:	218c703a 	and	r6,r4,r6
 80092b0:	a18d883a 	add	r6,r20,r6
 80092b4:	31800117 	ldw	r6,4(r6)
 80092b8:	3180004c 	andi	r6,r6,1
 80092bc:	30004f1e 	bne	r6,zero,80093fc <_realloc_r+0x1e0>
 80092c0:	2148703a 	and	r4,r4,r5
 80092c4:	890b883a 	add	r5,r17,r4
 80092c8:	28c0cb0e 	bge	r5,r3,80095f8 <_realloc_r+0x3dc>
 80092cc:	1080004c 	andi	r2,r2,1
 80092d0:	10004c1e 	bne	r2,zero,8009404 <_realloc_r+0x1e8>
 80092d4:	b1fffe17 	ldw	r7,-8(r22)
 80092d8:	00bfff04 	movi	r2,-4
 80092dc:	91cfc83a 	sub	r7,r18,r7
 80092e0:	39400117 	ldw	r5,4(r7)
 80092e4:	288a703a 	and	r5,r5,r2
 80092e8:	a0000426 	beq	r20,zero,80092fc <_realloc_r+0xe0>
 80092ec:	896f883a 	add	r23,r17,r5
 80092f0:	b92f883a 	add	r23,r23,r4
 80092f4:	4500cb26 	beq	r8,r20,8009624 <_realloc_r+0x408>
 80092f8:	b8c0930e 	bge	r23,r3,8009548 <_realloc_r+0x32c>
 80092fc:	38004126 	beq	r7,zero,8009404 <_realloc_r+0x1e8>
 8009300:	896f883a 	add	r23,r17,r5
 8009304:	b8c03f16 	blt	r23,r3,8009404 <_realloc_r+0x1e8>
 8009308:	38c00217 	ldw	r3,8(r7)
 800930c:	38800317 	ldw	r2,12(r7)
 8009310:	89bfff04 	addi	r6,r17,-4
 8009314:	31000968 	cmpgeui	r4,r6,37
 8009318:	18800315 	stw	r2,12(r3)
 800931c:	10c00215 	stw	r3,8(r2)
 8009320:	3de9883a 	add	r20,r7,r23
 8009324:	38c00204 	addi	r3,r7,8
 8009328:	2000f81e 	bne	r4,zero,800970c <_realloc_r+0x4f0>
 800932c:	30800530 	cmpltui	r2,r6,20
 8009330:	b1000017 	ldw	r4,0(r22)
 8009334:	1000eb1e 	bne	r2,zero,80096e4 <_realloc_r+0x4c8>
 8009338:	39000215 	stw	r4,8(r7)
 800933c:	b1000117 	ldw	r4,4(r22)
 8009340:	30800728 	cmpgeui	r2,r6,28
 8009344:	39000315 	stw	r4,12(r7)
 8009348:	1001041e 	bne	r2,zero,800975c <_realloc_r+0x540>
 800934c:	b1000217 	ldw	r4,8(r22)
 8009350:	38800404 	addi	r2,r7,16
 8009354:	b5800204 	addi	r22,r22,8
 8009358:	11000015 	stw	r4,0(r2)
 800935c:	b1000117 	ldw	r4,4(r22)
 8009360:	b823883a 	mov	r17,r23
 8009364:	3825883a 	mov	r18,r7
 8009368:	11000115 	stw	r4,4(r2)
 800936c:	b1000217 	ldw	r4,8(r22)
 8009370:	182d883a 	mov	r22,r3
 8009374:	11000215 	stw	r4,8(r2)
 8009378:	91800117 	ldw	r6,4(r18)
 800937c:	8c05c83a 	sub	r2,r17,r16
 8009380:	10c00430 	cmpltui	r3,r2,16
 8009384:	3180004c 	andi	r6,r6,1
 8009388:	18004926 	beq	r3,zero,80094b0 <_realloc_r+0x294>
 800938c:	898cb03a 	or	r6,r17,r6
 8009390:	91800115 	stw	r6,4(r18)
 8009394:	a0800117 	ldw	r2,4(r20)
 8009398:	10800054 	ori	r2,r2,1
 800939c:	a0800115 	stw	r2,4(r20)
 80093a0:	a809883a 	mov	r4,r21
 80093a4:	800d8500 	call	800d850 <__malloc_unlock>
 80093a8:	b027883a 	mov	r19,r22
 80093ac:	00000606 	br	80093c8 <_realloc_r+0x1ac>
 80093b0:	04000404 	movi	r16,16
 80093b4:	00c00404 	movi	r3,16
 80093b8:	84ffb02e 	bgeu	r16,r19,800927c <_realloc_r+0x60>
 80093bc:	00800304 	movi	r2,12
 80093c0:	a8800015 	stw	r2,0(r21)
 80093c4:	0027883a 	mov	r19,zero
 80093c8:	9805883a 	mov	r2,r19
 80093cc:	dfc00a17 	ldw	ra,40(sp)
 80093d0:	df000917 	ldw	fp,36(sp)
 80093d4:	ddc00817 	ldw	r23,32(sp)
 80093d8:	dd800717 	ldw	r22,28(sp)
 80093dc:	dd400617 	ldw	r21,24(sp)
 80093e0:	dd000517 	ldw	r20,20(sp)
 80093e4:	dcc00417 	ldw	r19,16(sp)
 80093e8:	dc800317 	ldw	r18,12(sp)
 80093ec:	dc400217 	ldw	r17,8(sp)
 80093f0:	dc000117 	ldw	r16,4(sp)
 80093f4:	dec00b04 	addi	sp,sp,44
 80093f8:	f800283a 	ret
 80093fc:	1080004c 	andi	r2,r2,1
 8009400:	10007826 	beq	r2,zero,80095e4 <_realloc_r+0x3c8>
 8009404:	980b883a 	mov	r5,r19
 8009408:	a809883a 	mov	r4,r21
 800940c:	800546c0 	call	800546c <_malloc_r>
 8009410:	1027883a 	mov	r19,r2
 8009414:	10001626 	beq	r2,zero,8009470 <_realloc_r+0x254>
 8009418:	b0bfff17 	ldw	r2,-4(r22)
 800941c:	013fff84 	movi	r4,-2
 8009420:	98fffe04 	addi	r3,r19,-8
 8009424:	1104703a 	and	r2,r2,r4
 8009428:	9085883a 	add	r2,r18,r2
 800942c:	10c06726 	beq	r2,r3,80095cc <_realloc_r+0x3b0>
 8009430:	89bfff04 	addi	r6,r17,-4
 8009434:	30800968 	cmpgeui	r2,r6,37
 8009438:	1000761e 	bne	r2,zero,8009614 <_realloc_r+0x3f8>
 800943c:	30800530 	cmpltui	r2,r6,20
 8009440:	b1000017 	ldw	r4,0(r22)
 8009444:	10003726 	beq	r2,zero,8009524 <_realloc_r+0x308>
 8009448:	9805883a 	mov	r2,r19
 800944c:	b007883a 	mov	r3,r22
 8009450:	11000015 	stw	r4,0(r2)
 8009454:	19000117 	ldw	r4,4(r3)
 8009458:	11000115 	stw	r4,4(r2)
 800945c:	18c00217 	ldw	r3,8(r3)
 8009460:	10c00215 	stw	r3,8(r2)
 8009464:	b00b883a 	mov	r5,r22
 8009468:	a809883a 	mov	r4,r21
 800946c:	8004e240 	call	8004e24 <_free_r>
 8009470:	a809883a 	mov	r4,r21
 8009474:	800d8500 	call	800d850 <__malloc_unlock>
 8009478:	003fd306 	br	80093c8 <_realloc_r+0x1ac>
 800947c:	300b883a 	mov	r5,r6
 8009480:	dfc00a17 	ldw	ra,40(sp)
 8009484:	df000917 	ldw	fp,36(sp)
 8009488:	ddc00817 	ldw	r23,32(sp)
 800948c:	dd800717 	ldw	r22,28(sp)
 8009490:	dd400617 	ldw	r21,24(sp)
 8009494:	dd000517 	ldw	r20,20(sp)
 8009498:	dcc00417 	ldw	r19,16(sp)
 800949c:	dc800317 	ldw	r18,12(sp)
 80094a0:	dc400217 	ldw	r17,8(sp)
 80094a4:	dc000117 	ldw	r16,4(sp)
 80094a8:	dec00b04 	addi	sp,sp,44
 80094ac:	800546c1 	jmpi	800546c <_malloc_r>
 80094b0:	340cb03a 	or	r6,r6,r16
 80094b4:	91800115 	stw	r6,4(r18)
 80094b8:	940b883a 	add	r5,r18,r16
 80094bc:	10800054 	ori	r2,r2,1
 80094c0:	28800115 	stw	r2,4(r5)
 80094c4:	a0800117 	ldw	r2,4(r20)
 80094c8:	29400204 	addi	r5,r5,8
 80094cc:	a809883a 	mov	r4,r21
 80094d0:	10800054 	ori	r2,r2,1
 80094d4:	a0800115 	stw	r2,4(r20)
 80094d8:	8004e240 	call	8004e24 <_free_r>
 80094dc:	003fb006 	br	80093a0 <_realloc_r+0x184>
 80094e0:	2148703a 	and	r4,r4,r5
 80094e4:	890b883a 	add	r5,r17,r4
 80094e8:	81800404 	addi	r6,r16,16
 80094ec:	29bf7716 	blt	r5,r6,80092cc <_realloc_r+0xb0>
 80094f0:	9425883a 	add	r18,r18,r16
 80094f4:	2c05c83a 	sub	r2,r5,r16
 80094f8:	e4800215 	stw	r18,8(fp)
 80094fc:	10800054 	ori	r2,r2,1
 8009500:	90800115 	stw	r2,4(r18)
 8009504:	b0bfff17 	ldw	r2,-4(r22)
 8009508:	a809883a 	mov	r4,r21
 800950c:	b027883a 	mov	r19,r22
 8009510:	1080004c 	andi	r2,r2,1
 8009514:	1420b03a 	or	r16,r2,r16
 8009518:	b43fff15 	stw	r16,-4(r22)
 800951c:	800d8500 	call	800d850 <__malloc_unlock>
 8009520:	003fa906 	br	80093c8 <_realloc_r+0x1ac>
 8009524:	99000015 	stw	r4,0(r19)
 8009528:	b0c00117 	ldw	r3,4(r22)
 800952c:	30800728 	cmpgeui	r2,r6,28
 8009530:	98c00115 	stw	r3,4(r19)
 8009534:	1000611e 	bne	r2,zero,80096bc <_realloc_r+0x4a0>
 8009538:	b0c00204 	addi	r3,r22,8
 800953c:	98800204 	addi	r2,r19,8
 8009540:	b1000217 	ldw	r4,8(r22)
 8009544:	003fc206 	br	8009450 <_realloc_r+0x234>
 8009548:	a0800317 	ldw	r2,12(r20)
 800954c:	a0c00217 	ldw	r3,8(r20)
 8009550:	89bfff04 	addi	r6,r17,-4
 8009554:	31000968 	cmpgeui	r4,r6,37
 8009558:	18800315 	stw	r2,12(r3)
 800955c:	10c00215 	stw	r3,8(r2)
 8009560:	38c00217 	ldw	r3,8(r7)
 8009564:	38800317 	ldw	r2,12(r7)
 8009568:	3a000204 	addi	r8,r7,8
 800956c:	3de9883a 	add	r20,r7,r23
 8009570:	18800315 	stw	r2,12(r3)
 8009574:	10c00215 	stw	r3,8(r2)
 8009578:	20006f1e 	bne	r4,zero,8009738 <_realloc_r+0x51c>
 800957c:	30800530 	cmpltui	r2,r6,20
 8009580:	b0c00017 	ldw	r3,0(r22)
 8009584:	10006a1e 	bne	r2,zero,8009730 <_realloc_r+0x514>
 8009588:	38c00215 	stw	r3,8(r7)
 800958c:	b0c00117 	ldw	r3,4(r22)
 8009590:	30800728 	cmpgeui	r2,r6,28
 8009594:	38c00315 	stw	r3,12(r7)
 8009598:	10007a1e 	bne	r2,zero,8009784 <_realloc_r+0x568>
 800959c:	b0c00217 	ldw	r3,8(r22)
 80095a0:	38800404 	addi	r2,r7,16
 80095a4:	b5800204 	addi	r22,r22,8
 80095a8:	10c00015 	stw	r3,0(r2)
 80095ac:	b0c00117 	ldw	r3,4(r22)
 80095b0:	b823883a 	mov	r17,r23
 80095b4:	3825883a 	mov	r18,r7
 80095b8:	10c00115 	stw	r3,4(r2)
 80095bc:	b0c00217 	ldw	r3,8(r22)
 80095c0:	402d883a 	mov	r22,r8
 80095c4:	10c00215 	stw	r3,8(r2)
 80095c8:	003f6b06 	br	8009378 <_realloc_r+0x15c>
 80095cc:	98bfff17 	ldw	r2,-4(r19)
 80095d0:	00ffff04 	movi	r3,-4
 80095d4:	10c4703a 	and	r2,r2,r3
 80095d8:	88a3883a 	add	r17,r17,r2
 80095dc:	9469883a 	add	r20,r18,r17
 80095e0:	003f6506 	br	8009378 <_realloc_r+0x15c>
 80095e4:	b1fffe17 	ldw	r7,-8(r22)
 80095e8:	91cfc83a 	sub	r7,r18,r7
 80095ec:	39000117 	ldw	r4,4(r7)
 80095f0:	214a703a 	and	r5,r4,r5
 80095f4:	003f4106 	br	80092fc <_realloc_r+0xe0>
 80095f8:	a0800317 	ldw	r2,12(r20)
 80095fc:	a0c00217 	ldw	r3,8(r20)
 8009600:	2823883a 	mov	r17,r5
 8009604:	9169883a 	add	r20,r18,r5
 8009608:	18800315 	stw	r2,12(r3)
 800960c:	10c00215 	stw	r3,8(r2)
 8009610:	003f5906 	br	8009378 <_realloc_r+0x15c>
 8009614:	b00b883a 	mov	r5,r22
 8009618:	9809883a 	mov	r4,r19
 800961c:	800908c0 	call	800908c <memmove>
 8009620:	003f9006 	br	8009464 <_realloc_r+0x248>
 8009624:	80800404 	addi	r2,r16,16
 8009628:	b8bf3416 	blt	r23,r2,80092fc <_realloc_r+0xe0>
 800962c:	38800317 	ldw	r2,12(r7)
 8009630:	38c00217 	ldw	r3,8(r7)
 8009634:	89bfff04 	addi	r6,r17,-4
 8009638:	31000968 	cmpgeui	r4,r6,37
 800963c:	18800315 	stw	r2,12(r3)
 8009640:	10c00215 	stw	r3,8(r2)
 8009644:	3cc00204 	addi	r19,r7,8
 8009648:	20005a1e 	bne	r4,zero,80097b4 <_realloc_r+0x598>
 800964c:	30800530 	cmpltui	r2,r6,20
 8009650:	b0c00017 	ldw	r3,0(r22)
 8009654:	1000551e 	bne	r2,zero,80097ac <_realloc_r+0x590>
 8009658:	38c00215 	stw	r3,8(r7)
 800965c:	b0c00117 	ldw	r3,4(r22)
 8009660:	30800728 	cmpgeui	r2,r6,28
 8009664:	38c00315 	stw	r3,12(r7)
 8009668:	1000661e 	bne	r2,zero,8009804 <_realloc_r+0x5e8>
 800966c:	b0c00217 	ldw	r3,8(r22)
 8009670:	38800404 	addi	r2,r7,16
 8009674:	b5800204 	addi	r22,r22,8
 8009678:	10c00015 	stw	r3,0(r2)
 800967c:	b0c00117 	ldw	r3,4(r22)
 8009680:	10c00115 	stw	r3,4(r2)
 8009684:	b0c00217 	ldw	r3,8(r22)
 8009688:	10c00215 	stw	r3,8(r2)
 800968c:	3c07883a 	add	r3,r7,r16
 8009690:	bc05c83a 	sub	r2,r23,r16
 8009694:	e0c00215 	stw	r3,8(fp)
 8009698:	10800054 	ori	r2,r2,1
 800969c:	18800115 	stw	r2,4(r3)
 80096a0:	38800117 	ldw	r2,4(r7)
 80096a4:	a809883a 	mov	r4,r21
 80096a8:	1080004c 	andi	r2,r2,1
 80096ac:	1420b03a 	or	r16,r2,r16
 80096b0:	3c000115 	stw	r16,4(r7)
 80096b4:	800d8500 	call	800d850 <__malloc_unlock>
 80096b8:	003f4306 	br	80093c8 <_realloc_r+0x1ac>
 80096bc:	b0800217 	ldw	r2,8(r22)
 80096c0:	31800920 	cmpeqi	r6,r6,36
 80096c4:	98800215 	stw	r2,8(r19)
 80096c8:	b0800317 	ldw	r2,12(r22)
 80096cc:	98800315 	stw	r2,12(r19)
 80096d0:	3000061e 	bne	r6,zero,80096ec <_realloc_r+0x4d0>
 80096d4:	b0c00404 	addi	r3,r22,16
 80096d8:	98800404 	addi	r2,r19,16
 80096dc:	b1000417 	ldw	r4,16(r22)
 80096e0:	003f5b06 	br	8009450 <_realloc_r+0x234>
 80096e4:	1805883a 	mov	r2,r3
 80096e8:	003f1b06 	br	8009358 <_realloc_r+0x13c>
 80096ec:	b1000417 	ldw	r4,16(r22)
 80096f0:	b0c00604 	addi	r3,r22,24
 80096f4:	98800604 	addi	r2,r19,24
 80096f8:	99000415 	stw	r4,16(r19)
 80096fc:	b1000517 	ldw	r4,20(r22)
 8009700:	99000515 	stw	r4,20(r19)
 8009704:	b1000617 	ldw	r4,24(r22)
 8009708:	003f5106 	br	8009450 <_realloc_r+0x234>
 800970c:	b00b883a 	mov	r5,r22
 8009710:	1809883a 	mov	r4,r3
 8009714:	d9c00015 	stw	r7,0(sp)
 8009718:	800908c0 	call	800908c <memmove>
 800971c:	d9c00017 	ldw	r7,0(sp)
 8009720:	102d883a 	mov	r22,r2
 8009724:	b823883a 	mov	r17,r23
 8009728:	3825883a 	mov	r18,r7
 800972c:	003f1206 	br	8009378 <_realloc_r+0x15c>
 8009730:	4005883a 	mov	r2,r8
 8009734:	003f9c06 	br	80095a8 <_realloc_r+0x38c>
 8009738:	b00b883a 	mov	r5,r22
 800973c:	4009883a 	mov	r4,r8
 8009740:	d9c00015 	stw	r7,0(sp)
 8009744:	800908c0 	call	800908c <memmove>
 8009748:	d9c00017 	ldw	r7,0(sp)
 800974c:	102d883a 	mov	r22,r2
 8009750:	b823883a 	mov	r17,r23
 8009754:	3825883a 	mov	r18,r7
 8009758:	003f0706 	br	8009378 <_realloc_r+0x15c>
 800975c:	b0800217 	ldw	r2,8(r22)
 8009760:	31800920 	cmpeqi	r6,r6,36
 8009764:	38800415 	stw	r2,16(r7)
 8009768:	b0800317 	ldw	r2,12(r22)
 800976c:	38800515 	stw	r2,20(r7)
 8009770:	b1000417 	ldw	r4,16(r22)
 8009774:	3000151e 	bne	r6,zero,80097cc <_realloc_r+0x5b0>
 8009778:	38800604 	addi	r2,r7,24
 800977c:	b5800404 	addi	r22,r22,16
 8009780:	003ef506 	br	8009358 <_realloc_r+0x13c>
 8009784:	b0800217 	ldw	r2,8(r22)
 8009788:	31800920 	cmpeqi	r6,r6,36
 800978c:	38800415 	stw	r2,16(r7)
 8009790:	b0800317 	ldw	r2,12(r22)
 8009794:	38800515 	stw	r2,20(r7)
 8009798:	b0c00417 	ldw	r3,16(r22)
 800979c:	3000121e 	bne	r6,zero,80097e8 <_realloc_r+0x5cc>
 80097a0:	38800604 	addi	r2,r7,24
 80097a4:	b5800404 	addi	r22,r22,16
 80097a8:	003f7f06 	br	80095a8 <_realloc_r+0x38c>
 80097ac:	9805883a 	mov	r2,r19
 80097b0:	003fb106 	br	8009678 <_realloc_r+0x45c>
 80097b4:	b00b883a 	mov	r5,r22
 80097b8:	9809883a 	mov	r4,r19
 80097bc:	d9c00015 	stw	r7,0(sp)
 80097c0:	800908c0 	call	800908c <memmove>
 80097c4:	d9c00017 	ldw	r7,0(sp)
 80097c8:	003fb006 	br	800968c <_realloc_r+0x470>
 80097cc:	b5800604 	addi	r22,r22,24
 80097d0:	39000615 	stw	r4,24(r7)
 80097d4:	b13fff17 	ldw	r4,-4(r22)
 80097d8:	38800804 	addi	r2,r7,32
 80097dc:	39000715 	stw	r4,28(r7)
 80097e0:	b1000017 	ldw	r4,0(r22)
 80097e4:	003edc06 	br	8009358 <_realloc_r+0x13c>
 80097e8:	b5800604 	addi	r22,r22,24
 80097ec:	38c00615 	stw	r3,24(r7)
 80097f0:	b0ffff17 	ldw	r3,-4(r22)
 80097f4:	38800804 	addi	r2,r7,32
 80097f8:	38c00715 	stw	r3,28(r7)
 80097fc:	b0c00017 	ldw	r3,0(r22)
 8009800:	003f6906 	br	80095a8 <_realloc_r+0x38c>
 8009804:	b0800217 	ldw	r2,8(r22)
 8009808:	31800920 	cmpeqi	r6,r6,36
 800980c:	38800415 	stw	r2,16(r7)
 8009810:	b0800317 	ldw	r2,12(r22)
 8009814:	38800515 	stw	r2,20(r7)
 8009818:	b0c00417 	ldw	r3,16(r22)
 800981c:	3000031e 	bne	r6,zero,800982c <_realloc_r+0x610>
 8009820:	38800604 	addi	r2,r7,24
 8009824:	b5800404 	addi	r22,r22,16
 8009828:	003f9306 	br	8009678 <_realloc_r+0x45c>
 800982c:	b5800604 	addi	r22,r22,24
 8009830:	38c00615 	stw	r3,24(r7)
 8009834:	b0ffff17 	ldw	r3,-4(r22)
 8009838:	38800804 	addi	r2,r7,32
 800983c:	38c00715 	stw	r3,28(r7)
 8009840:	b0c00017 	ldw	r3,0(r22)
 8009844:	003f8c06 	br	8009678 <_realloc_r+0x45c>

08009848 <strcmp>:
 8009848:	2144b03a 	or	r2,r4,r5
 800984c:	108000cc 	andi	r2,r2,3
 8009850:	1000171e 	bne	r2,zero,80098b0 <strcmp+0x68>
 8009854:	20800017 	ldw	r2,0(r4)
 8009858:	28c00017 	ldw	r3,0(r5)
 800985c:	10c0141e 	bne	r2,r3,80098b0 <strcmp+0x68>
 8009860:	027fbff4 	movhi	r9,65279
 8009864:	4a7fbfc4 	addi	r9,r9,-257
 8009868:	1247883a 	add	r3,r2,r9
 800986c:	02202074 	movhi	r8,32897
 8009870:	0084303a 	nor	r2,zero,r2
 8009874:	1884703a 	and	r2,r3,r2
 8009878:	42202004 	addi	r8,r8,-32640
 800987c:	1204703a 	and	r2,r2,r8
 8009880:	10000226 	beq	r2,zero,800988c <strcmp+0x44>
 8009884:	00002406 	br	8009918 <strcmp+0xd0>
 8009888:	1000231e 	bne	r2,zero,8009918 <strcmp+0xd0>
 800988c:	21000104 	addi	r4,r4,4
 8009890:	20c00017 	ldw	r3,0(r4)
 8009894:	29400104 	addi	r5,r5,4
 8009898:	29800017 	ldw	r6,0(r5)
 800989c:	1a45883a 	add	r2,r3,r9
 80098a0:	00ce303a 	nor	r7,zero,r3
 80098a4:	11c4703a 	and	r2,r2,r7
 80098a8:	1204703a 	and	r2,r2,r8
 80098ac:	19bff626 	beq	r3,r6,8009888 <strcmp+0x40>
 80098b0:	20800003 	ldbu	r2,0(r4)
 80098b4:	10c03fcc 	andi	r3,r2,255
 80098b8:	18c0201c 	xori	r3,r3,128
 80098bc:	18ffe004 	addi	r3,r3,-128
 80098c0:	18000d26 	beq	r3,zero,80098f8 <strcmp+0xb0>
 80098c4:	29800007 	ldb	r6,0(r5)
 80098c8:	10803fcc 	andi	r2,r2,255
 80098cc:	19800326 	beq	r3,r6,80098dc <strcmp+0x94>
 80098d0:	00000a06 	br	80098fc <strcmp+0xb4>
 80098d4:	29800007 	ldb	r6,0(r5)
 80098d8:	11800b1e 	bne	r2,r6,8009908 <strcmp+0xc0>
 80098dc:	21000044 	addi	r4,r4,1
 80098e0:	20c00003 	ldbu	r3,0(r4)
 80098e4:	29400044 	addi	r5,r5,1
 80098e8:	18803fcc 	andi	r2,r3,255
 80098ec:	1080201c 	xori	r2,r2,128
 80098f0:	10bfe004 	addi	r2,r2,-128
 80098f4:	103ff71e 	bne	r2,zero,80098d4 <strcmp+0x8c>
 80098f8:	0005883a 	mov	r2,zero
 80098fc:	28c00003 	ldbu	r3,0(r5)
 8009900:	10c5c83a 	sub	r2,r2,r3
 8009904:	f800283a 	ret
 8009908:	18803fcc 	andi	r2,r3,255
 800990c:	28c00003 	ldbu	r3,0(r5)
 8009910:	10c5c83a 	sub	r2,r2,r3
 8009914:	f800283a 	ret
 8009918:	0005883a 	mov	r2,zero
 800991c:	f800283a 	ret

08009920 <__swbuf_r>:
 8009920:	defffb04 	addi	sp,sp,-20
 8009924:	dc800215 	stw	r18,8(sp)
 8009928:	dc400115 	stw	r17,4(sp)
 800992c:	dc000015 	stw	r16,0(sp)
 8009930:	dfc00415 	stw	ra,16(sp)
 8009934:	dcc00315 	stw	r19,12(sp)
 8009938:	2023883a 	mov	r17,r4
 800993c:	2825883a 	mov	r18,r5
 8009940:	3021883a 	mov	r16,r6
 8009944:	20000226 	beq	r4,zero,8009950 <__swbuf_r+0x30>
 8009948:	20800e17 	ldw	r2,56(r4)
 800994c:	10003e26 	beq	r2,zero,8009a48 <__swbuf_r+0x128>
 8009950:	80800617 	ldw	r2,24(r16)
 8009954:	80c0030b 	ldhu	r3,12(r16)
 8009958:	80800215 	stw	r2,8(r16)
 800995c:	1880020c 	andi	r2,r3,8
 8009960:	10001f26 	beq	r2,zero,80099e0 <__swbuf_r+0xc0>
 8009964:	80800417 	ldw	r2,16(r16)
 8009968:	10001d26 	beq	r2,zero,80099e0 <__swbuf_r+0xc0>
 800996c:	1908000c 	andi	r4,r3,8192
 8009970:	94c03fcc 	andi	r19,r18,255
 8009974:	20002326 	beq	r4,zero,8009a04 <__swbuf_r+0xe4>
 8009978:	80c00017 	ldw	r3,0(r16)
 800997c:	81000517 	ldw	r4,20(r16)
 8009980:	1885c83a 	sub	r2,r3,r2
 8009984:	1100290e 	bge	r2,r4,8009a2c <__swbuf_r+0x10c>
 8009988:	10800044 	addi	r2,r2,1
 800998c:	81000217 	ldw	r4,8(r16)
 8009990:	19400044 	addi	r5,r3,1
 8009994:	81400015 	stw	r5,0(r16)
 8009998:	213fffc4 	addi	r4,r4,-1
 800999c:	81000215 	stw	r4,8(r16)
 80099a0:	1c800005 	stb	r18,0(r3)
 80099a4:	80c00517 	ldw	r3,20(r16)
 80099a8:	18802926 	beq	r3,r2,8009a50 <__swbuf_r+0x130>
 80099ac:	8080030b 	ldhu	r2,12(r16)
 80099b0:	1080004c 	andi	r2,r2,1
 80099b4:	10000226 	beq	r2,zero,80099c0 <__swbuf_r+0xa0>
 80099b8:	98800298 	cmpnei	r2,r19,10
 80099bc:	10002426 	beq	r2,zero,8009a50 <__swbuf_r+0x130>
 80099c0:	9805883a 	mov	r2,r19
 80099c4:	dfc00417 	ldw	ra,16(sp)
 80099c8:	dcc00317 	ldw	r19,12(sp)
 80099cc:	dc800217 	ldw	r18,8(sp)
 80099d0:	dc400117 	ldw	r17,4(sp)
 80099d4:	dc000017 	ldw	r16,0(sp)
 80099d8:	dec00504 	addi	sp,sp,20
 80099dc:	f800283a 	ret
 80099e0:	800b883a 	mov	r5,r16
 80099e4:	8809883a 	mov	r4,r17
 80099e8:	8002ca80 	call	8002ca8 <__swsetup_r>
 80099ec:	10001c1e 	bne	r2,zero,8009a60 <__swbuf_r+0x140>
 80099f0:	80c0030b 	ldhu	r3,12(r16)
 80099f4:	80800417 	ldw	r2,16(r16)
 80099f8:	94c03fcc 	andi	r19,r18,255
 80099fc:	1908000c 	andi	r4,r3,8192
 8009a00:	203fdd1e 	bne	r4,zero,8009978 <__swbuf_r+0x58>
 8009a04:	81001917 	ldw	r4,100(r16)
 8009a08:	18c80014 	ori	r3,r3,8192
 8009a0c:	0177ffc4 	movi	r5,-8193
 8009a10:	2148703a 	and	r4,r4,r5
 8009a14:	80c0030d 	sth	r3,12(r16)
 8009a18:	80c00017 	ldw	r3,0(r16)
 8009a1c:	81001915 	stw	r4,100(r16)
 8009a20:	81000517 	ldw	r4,20(r16)
 8009a24:	1885c83a 	sub	r2,r3,r2
 8009a28:	113fd716 	blt	r2,r4,8009988 <__swbuf_r+0x68>
 8009a2c:	800b883a 	mov	r5,r16
 8009a30:	8809883a 	mov	r4,r17
 8009a34:	800492c0 	call	800492c <_fflush_r>
 8009a38:	1000091e 	bne	r2,zero,8009a60 <__swbuf_r+0x140>
 8009a3c:	80c00017 	ldw	r3,0(r16)
 8009a40:	00800044 	movi	r2,1
 8009a44:	003fd106 	br	800998c <__swbuf_r+0x6c>
 8009a48:	8004cc00 	call	8004cc0 <__sinit>
 8009a4c:	003fc006 	br	8009950 <__swbuf_r+0x30>
 8009a50:	800b883a 	mov	r5,r16
 8009a54:	8809883a 	mov	r4,r17
 8009a58:	800492c0 	call	800492c <_fflush_r>
 8009a5c:	103fd826 	beq	r2,zero,80099c0 <__swbuf_r+0xa0>
 8009a60:	04ffffc4 	movi	r19,-1
 8009a64:	003fd606 	br	80099c0 <__swbuf_r+0xa0>

08009a68 <__swbuf>:
 8009a68:	00820074 	movhi	r2,2049
 8009a6c:	280d883a 	mov	r6,r5
 8009a70:	200b883a 	mov	r5,r4
 8009a74:	11073d17 	ldw	r4,7412(r2)
 8009a78:	80099201 	jmpi	8009920 <__swbuf_r>

08009a7c <_wcrtomb_r>:
 8009a7c:	defffa04 	addi	sp,sp,-24
 8009a80:	dc400415 	stw	r17,16(sp)
 8009a84:	dc000315 	stw	r16,12(sp)
 8009a88:	00820074 	movhi	r2,2049
 8009a8c:	dfc00515 	stw	ra,20(sp)
 8009a90:	2021883a 	mov	r16,r4
 8009a94:	3823883a 	mov	r17,r7
 8009a98:	10829617 	ldw	r2,2648(r2)
 8009a9c:	28000826 	beq	r5,zero,8009ac0 <_wcrtomb_r+0x44>
 8009aa0:	103ee83a 	callr	r2
 8009aa4:	10ffffd8 	cmpnei	r3,r2,-1
 8009aa8:	18000a26 	beq	r3,zero,8009ad4 <_wcrtomb_r+0x58>
 8009aac:	dfc00517 	ldw	ra,20(sp)
 8009ab0:	dc400417 	ldw	r17,16(sp)
 8009ab4:	dc000317 	ldw	r16,12(sp)
 8009ab8:	dec00604 	addi	sp,sp,24
 8009abc:	f800283a 	ret
 8009ac0:	000d883a 	mov	r6,zero
 8009ac4:	d9400084 	addi	r5,sp,2
 8009ac8:	103ee83a 	callr	r2
 8009acc:	10ffffd8 	cmpnei	r3,r2,-1
 8009ad0:	183ff61e 	bne	r3,zero,8009aac <_wcrtomb_r+0x30>
 8009ad4:	00802284 	movi	r2,138
 8009ad8:	88000015 	stw	zero,0(r17)
 8009adc:	80800015 	stw	r2,0(r16)
 8009ae0:	00bfffc4 	movi	r2,-1
 8009ae4:	003ff106 	br	8009aac <_wcrtomb_r+0x30>

08009ae8 <wcrtomb>:
 8009ae8:	defffa04 	addi	sp,sp,-24
 8009aec:	00820074 	movhi	r2,2049
 8009af0:	dc400415 	stw	r17,16(sp)
 8009af4:	dc000315 	stw	r16,12(sp)
 8009af8:	dfc00515 	stw	ra,20(sp)
 8009afc:	14073d17 	ldw	r16,7412(r2)
 8009b00:	00820074 	movhi	r2,2049
 8009b04:	3023883a 	mov	r17,r6
 8009b08:	10829617 	ldw	r2,2648(r2)
 8009b0c:	300f883a 	mov	r7,r6
 8009b10:	20000b26 	beq	r4,zero,8009b40 <wcrtomb+0x58>
 8009b14:	280d883a 	mov	r6,r5
 8009b18:	200b883a 	mov	r5,r4
 8009b1c:	8009883a 	mov	r4,r16
 8009b20:	103ee83a 	callr	r2
 8009b24:	10ffffd8 	cmpnei	r3,r2,-1
 8009b28:	18000b26 	beq	r3,zero,8009b58 <wcrtomb+0x70>
 8009b2c:	dfc00517 	ldw	ra,20(sp)
 8009b30:	dc400417 	ldw	r17,16(sp)
 8009b34:	dc000317 	ldw	r16,12(sp)
 8009b38:	dec00604 	addi	sp,sp,24
 8009b3c:	f800283a 	ret
 8009b40:	000d883a 	mov	r6,zero
 8009b44:	d9400084 	addi	r5,sp,2
 8009b48:	8009883a 	mov	r4,r16
 8009b4c:	103ee83a 	callr	r2
 8009b50:	10ffffd8 	cmpnei	r3,r2,-1
 8009b54:	183ff51e 	bne	r3,zero,8009b2c <wcrtomb+0x44>
 8009b58:	00802284 	movi	r2,138
 8009b5c:	88000015 	stw	zero,0(r17)
 8009b60:	80800015 	stw	r2,0(r16)
 8009b64:	00bfffc4 	movi	r2,-1
 8009b68:	003ff006 	br	8009b2c <wcrtomb+0x44>

08009b6c <_wctomb_r>:
 8009b6c:	00820074 	movhi	r2,2049
 8009b70:	10829617 	ldw	r2,2648(r2)
 8009b74:	1000683a 	jmp	r2

08009b78 <__ascii_wctomb>:
 8009b78:	28000926 	beq	r5,zero,8009ba0 <__ascii_wctomb+0x28>
 8009b7c:	30804030 	cmpltui	r2,r6,256
 8009b80:	10000326 	beq	r2,zero,8009b90 <__ascii_wctomb+0x18>
 8009b84:	29800005 	stb	r6,0(r5)
 8009b88:	00800044 	movi	r2,1
 8009b8c:	f800283a 	ret
 8009b90:	00802284 	movi	r2,138
 8009b94:	20800015 	stw	r2,0(r4)
 8009b98:	00bfffc4 	movi	r2,-1
 8009b9c:	f800283a 	ret
 8009ba0:	0005883a 	mov	r2,zero
 8009ba4:	f800283a 	ret

08009ba8 <__udivdi3>:
 8009ba8:	defff504 	addi	sp,sp,-44
 8009bac:	dd000515 	stw	r20,20(sp)
 8009bb0:	dc000115 	stw	r16,4(sp)
 8009bb4:	dfc00a15 	stw	ra,40(sp)
 8009bb8:	df000915 	stw	fp,36(sp)
 8009bbc:	ddc00815 	stw	r23,32(sp)
 8009bc0:	dd800715 	stw	r22,28(sp)
 8009bc4:	dd400615 	stw	r21,24(sp)
 8009bc8:	dcc00415 	stw	r19,16(sp)
 8009bcc:	dc800315 	stw	r18,12(sp)
 8009bd0:	dc400215 	stw	r17,8(sp)
 8009bd4:	2029883a 	mov	r20,r4
 8009bd8:	2821883a 	mov	r16,r5
 8009bdc:	38008c1e 	bne	r7,zero,8009e10 <__udivdi3+0x268>
 8009be0:	3827883a 	mov	r19,r7
 8009be4:	3023883a 	mov	r17,r6
 8009be8:	2025883a 	mov	r18,r4
 8009bec:	2980422e 	bgeu	r5,r6,8009cf8 <__udivdi3+0x150>
 8009bf0:	00bfffd4 	movui	r2,65535
 8009bf4:	282f883a 	mov	r23,r5
 8009bf8:	1180af2e 	bgeu	r2,r6,8009eb8 <__udivdi3+0x310>
 8009bfc:	00804034 	movhi	r2,256
 8009c00:	30815936 	bltu	r6,r2,800a168 <__udivdi3+0x5c0>
 8009c04:	3006d63a 	srli	r3,r6,24
 8009c08:	04c00604 	movi	r19,24
 8009c0c:	00820074 	movhi	r2,2049
 8009c10:	1885883a 	add	r2,r3,r2
 8009c14:	10800543 	ldbu	r2,21(r2)
 8009c18:	14e7883a 	add	r19,r2,r19
 8009c1c:	00800804 	movi	r2,32
 8009c20:	14c5c83a 	sub	r2,r2,r19
 8009c24:	10000526 	beq	r2,zero,8009c3c <__udivdi3+0x94>
 8009c28:	80a0983a 	sll	r16,r16,r2
 8009c2c:	a4e6d83a 	srl	r19,r20,r19
 8009c30:	30a2983a 	sll	r17,r6,r2
 8009c34:	a0a4983a 	sll	r18,r20,r2
 8009c38:	9c2eb03a 	or	r23,r19,r16
 8009c3c:	882ad43a 	srli	r21,r17,16
 8009c40:	b809883a 	mov	r4,r23
 8009c44:	8dbfffcc 	andi	r22,r17,65535
 8009c48:	a80b883a 	mov	r5,r21
 8009c4c:	800a8e80 	call	800a8e8 <__umodsi3>
 8009c50:	a80b883a 	mov	r5,r21
 8009c54:	b809883a 	mov	r4,r23
 8009c58:	1029883a 	mov	r20,r2
 8009c5c:	800a8840 	call	800a884 <__udivsi3>
 8009c60:	100b883a 	mov	r5,r2
 8009c64:	b009883a 	mov	r4,r22
 8009c68:	1021883a 	mov	r16,r2
 8009c6c:	80008b80 	call	80008b8 <__mulsi3>
 8009c70:	a028943a 	slli	r20,r20,16
 8009c74:	9006d43a 	srli	r3,r18,16
 8009c78:	a0c6b03a 	or	r3,r20,r3
 8009c7c:	1880052e 	bgeu	r3,r2,8009c94 <__udivdi3+0xec>
 8009c80:	1c47883a 	add	r3,r3,r17
 8009c84:	813fffc4 	addi	r4,r16,-1
 8009c88:	1c400136 	bltu	r3,r17,8009c90 <__udivdi3+0xe8>
 8009c8c:	18814736 	bltu	r3,r2,800a1ac <__udivdi3+0x604>
 8009c90:	2021883a 	mov	r16,r4
 8009c94:	18a7c83a 	sub	r19,r3,r2
 8009c98:	9809883a 	mov	r4,r19
 8009c9c:	a80b883a 	mov	r5,r21
 8009ca0:	800a8e80 	call	800a8e8 <__umodsi3>
 8009ca4:	1029883a 	mov	r20,r2
 8009ca8:	9809883a 	mov	r4,r19
 8009cac:	a80b883a 	mov	r5,r21
 8009cb0:	a028943a 	slli	r20,r20,16
 8009cb4:	800a8840 	call	800a884 <__udivsi3>
 8009cb8:	100b883a 	mov	r5,r2
 8009cbc:	b009883a 	mov	r4,r22
 8009cc0:	94bfffcc 	andi	r18,r18,65535
 8009cc4:	1027883a 	mov	r19,r2
 8009cc8:	a4a4b03a 	or	r18,r20,r18
 8009ccc:	80008b80 	call	80008b8 <__mulsi3>
 8009cd0:	9080052e 	bgeu	r18,r2,8009ce8 <__udivdi3+0x140>
 8009cd4:	8ca5883a 	add	r18,r17,r18
 8009cd8:	98ffffc4 	addi	r3,r19,-1
 8009cdc:	94400136 	bltu	r18,r17,8009ce4 <__udivdi3+0x13c>
 8009ce0:	90813036 	bltu	r18,r2,800a1a4 <__udivdi3+0x5fc>
 8009ce4:	1827883a 	mov	r19,r3
 8009ce8:	8004943a 	slli	r2,r16,16
 8009cec:	0007883a 	mov	r3,zero
 8009cf0:	14c4b03a 	or	r2,r2,r19
 8009cf4:	00005a06 	br	8009e60 <__udivdi3+0x2b8>
 8009cf8:	3000041e 	bne	r6,zero,8009d0c <__udivdi3+0x164>
 8009cfc:	000b883a 	mov	r5,zero
 8009d00:	01000044 	movi	r4,1
 8009d04:	800a8840 	call	800a884 <__udivsi3>
 8009d08:	1023883a 	mov	r17,r2
 8009d0c:	00bfffd4 	movui	r2,65535
 8009d10:	1440642e 	bgeu	r2,r17,8009ea4 <__udivdi3+0x2fc>
 8009d14:	00804034 	movhi	r2,256
 8009d18:	88811036 	bltu	r17,r2,800a15c <__udivdi3+0x5b4>
 8009d1c:	8806d63a 	srli	r3,r17,24
 8009d20:	04c00604 	movi	r19,24
 8009d24:	00820074 	movhi	r2,2049
 8009d28:	1885883a 	add	r2,r3,r2
 8009d2c:	10800543 	ldbu	r2,21(r2)
 8009d30:	00c00804 	movi	r3,32
 8009d34:	14e7883a 	add	r19,r2,r19
 8009d38:	1cc7c83a 	sub	r3,r3,r19
 8009d3c:	1800631e 	bne	r3,zero,8009ecc <__udivdi3+0x324>
 8009d40:	882ad43a 	srli	r21,r17,16
 8009d44:	8461c83a 	sub	r16,r16,r17
 8009d48:	8dbfffcc 	andi	r22,r17,65535
 8009d4c:	00c00044 	movi	r3,1
 8009d50:	8009883a 	mov	r4,r16
 8009d54:	a80b883a 	mov	r5,r21
 8009d58:	d8c00015 	stw	r3,0(sp)
 8009d5c:	800a8e80 	call	800a8e8 <__umodsi3>
 8009d60:	8009883a 	mov	r4,r16
 8009d64:	a80b883a 	mov	r5,r21
 8009d68:	1029883a 	mov	r20,r2
 8009d6c:	800a8840 	call	800a884 <__udivsi3>
 8009d70:	1009883a 	mov	r4,r2
 8009d74:	b00b883a 	mov	r5,r22
 8009d78:	1021883a 	mov	r16,r2
 8009d7c:	80008b80 	call	80008b8 <__mulsi3>
 8009d80:	a028943a 	slli	r20,r20,16
 8009d84:	9008d43a 	srli	r4,r18,16
 8009d88:	d8c00017 	ldw	r3,0(sp)
 8009d8c:	a108b03a 	or	r4,r20,r4
 8009d90:	2080052e 	bgeu	r4,r2,8009da8 <__udivdi3+0x200>
 8009d94:	2449883a 	add	r4,r4,r17
 8009d98:	817fffc4 	addi	r5,r16,-1
 8009d9c:	24400136 	bltu	r4,r17,8009da4 <__udivdi3+0x1fc>
 8009da0:	20810536 	bltu	r4,r2,800a1b8 <__udivdi3+0x610>
 8009da4:	2821883a 	mov	r16,r5
 8009da8:	20a7c83a 	sub	r19,r4,r2
 8009dac:	9809883a 	mov	r4,r19
 8009db0:	a80b883a 	mov	r5,r21
 8009db4:	d8c00015 	stw	r3,0(sp)
 8009db8:	800a8e80 	call	800a8e8 <__umodsi3>
 8009dbc:	1029883a 	mov	r20,r2
 8009dc0:	9809883a 	mov	r4,r19
 8009dc4:	a80b883a 	mov	r5,r21
 8009dc8:	a028943a 	slli	r20,r20,16
 8009dcc:	800a8840 	call	800a884 <__udivsi3>
 8009dd0:	b00b883a 	mov	r5,r22
 8009dd4:	1009883a 	mov	r4,r2
 8009dd8:	94bfffcc 	andi	r18,r18,65535
 8009ddc:	1027883a 	mov	r19,r2
 8009de0:	a4a4b03a 	or	r18,r20,r18
 8009de4:	80008b80 	call	80008b8 <__mulsi3>
 8009de8:	d8c00017 	ldw	r3,0(sp)
 8009dec:	9080052e 	bgeu	r18,r2,8009e04 <__udivdi3+0x25c>
 8009df0:	8ca5883a 	add	r18,r17,r18
 8009df4:	993fffc4 	addi	r4,r19,-1
 8009df8:	94400136 	bltu	r18,r17,8009e00 <__udivdi3+0x258>
 8009dfc:	9080e736 	bltu	r18,r2,800a19c <__udivdi3+0x5f4>
 8009e00:	2027883a 	mov	r19,r4
 8009e04:	8004943a 	slli	r2,r16,16
 8009e08:	14c4b03a 	or	r2,r2,r19
 8009e0c:	00001406 	br	8009e60 <__udivdi3+0x2b8>
 8009e10:	29c01136 	bltu	r5,r7,8009e58 <__udivdi3+0x2b0>
 8009e14:	00bfffd4 	movui	r2,65535
 8009e18:	11c01d2e 	bgeu	r2,r7,8009e90 <__udivdi3+0x2e8>
 8009e1c:	00804034 	movhi	r2,256
 8009e20:	3880c336 	bltu	r7,r2,800a130 <__udivdi3+0x588>
 8009e24:	3808d63a 	srli	r4,r7,24
 8009e28:	00c00604 	movi	r3,24
 8009e2c:	00820074 	movhi	r2,2049
 8009e30:	2085883a 	add	r2,r4,r2
 8009e34:	11000543 	ldbu	r4,21(r2)
 8009e38:	20c9883a 	add	r4,r4,r3
 8009e3c:	00c00804 	movi	r3,32
 8009e40:	192fc83a 	sub	r23,r3,r4
 8009e44:	b800581e 	bne	r23,zero,8009fa8 <__udivdi3+0x400>
 8009e48:	3c00bc36 	bltu	r7,r16,800a13c <__udivdi3+0x594>
 8009e4c:	a185403a 	cmpgeu	r2,r20,r6
 8009e50:	0007883a 	mov	r3,zero
 8009e54:	00000206 	br	8009e60 <__udivdi3+0x2b8>
 8009e58:	0007883a 	mov	r3,zero
 8009e5c:	0005883a 	mov	r2,zero
 8009e60:	dfc00a17 	ldw	ra,40(sp)
 8009e64:	df000917 	ldw	fp,36(sp)
 8009e68:	ddc00817 	ldw	r23,32(sp)
 8009e6c:	dd800717 	ldw	r22,28(sp)
 8009e70:	dd400617 	ldw	r21,24(sp)
 8009e74:	dd000517 	ldw	r20,20(sp)
 8009e78:	dcc00417 	ldw	r19,16(sp)
 8009e7c:	dc800317 	ldw	r18,12(sp)
 8009e80:	dc400217 	ldw	r17,8(sp)
 8009e84:	dc000117 	ldw	r16,4(sp)
 8009e88:	dec00b04 	addi	sp,sp,44
 8009e8c:	f800283a 	ret
 8009e90:	38804030 	cmpltui	r2,r7,256
 8009e94:	1000ac1e 	bne	r2,zero,800a148 <__udivdi3+0x5a0>
 8009e98:	3808d23a 	srli	r4,r7,8
 8009e9c:	00c00204 	movi	r3,8
 8009ea0:	003fe206 	br	8009e2c <__udivdi3+0x284>
 8009ea4:	88804030 	cmpltui	r2,r17,256
 8009ea8:	1000b21e 	bne	r2,zero,800a174 <__udivdi3+0x5cc>
 8009eac:	8806d23a 	srli	r3,r17,8
 8009eb0:	04c00204 	movi	r19,8
 8009eb4:	003f9b06 	br	8009d24 <__udivdi3+0x17c>
 8009eb8:	30804030 	cmpltui	r2,r6,256
 8009ebc:	1000a51e 	bne	r2,zero,800a154 <__udivdi3+0x5ac>
 8009ec0:	3006d23a 	srli	r3,r6,8
 8009ec4:	04c00204 	movi	r19,8
 8009ec8:	003f5006 	br	8009c0c <__udivdi3+0x64>
 8009ecc:	88e2983a 	sll	r17,r17,r3
 8009ed0:	84eed83a 	srl	r23,r16,r19
 8009ed4:	a0e4983a 	sll	r18,r20,r3
 8009ed8:	882ad43a 	srli	r21,r17,16
 8009edc:	b809883a 	mov	r4,r23
 8009ee0:	80e0983a 	sll	r16,r16,r3
 8009ee4:	a80b883a 	mov	r5,r21
 8009ee8:	800a8e80 	call	800a8e8 <__umodsi3>
 8009eec:	b809883a 	mov	r4,r23
 8009ef0:	a4e6d83a 	srl	r19,r20,r19
 8009ef4:	a80b883a 	mov	r5,r21
 8009ef8:	1029883a 	mov	r20,r2
 8009efc:	8dbfffcc 	andi	r22,r17,65535
 8009f00:	800a8840 	call	800a884 <__udivsi3>
 8009f04:	b009883a 	mov	r4,r22
 8009f08:	100b883a 	mov	r5,r2
 8009f0c:	9c26b03a 	or	r19,r19,r16
 8009f10:	102f883a 	mov	r23,r2
 8009f14:	80008b80 	call	80008b8 <__mulsi3>
 8009f18:	a028943a 	slli	r20,r20,16
 8009f1c:	9808d43a 	srli	r4,r19,16
 8009f20:	a108b03a 	or	r4,r20,r4
 8009f24:	2080062e 	bgeu	r4,r2,8009f40 <__udivdi3+0x398>
 8009f28:	2449883a 	add	r4,r4,r17
 8009f2c:	b8ffffc4 	addi	r3,r23,-1
 8009f30:	24409836 	bltu	r4,r17,800a194 <__udivdi3+0x5ec>
 8009f34:	2080972e 	bgeu	r4,r2,800a194 <__udivdi3+0x5ec>
 8009f38:	bdffff84 	addi	r23,r23,-2
 8009f3c:	2449883a 	add	r4,r4,r17
 8009f40:	20a1c83a 	sub	r16,r4,r2
 8009f44:	8009883a 	mov	r4,r16
 8009f48:	a80b883a 	mov	r5,r21
 8009f4c:	800a8e80 	call	800a8e8 <__umodsi3>
 8009f50:	1029883a 	mov	r20,r2
 8009f54:	8009883a 	mov	r4,r16
 8009f58:	a80b883a 	mov	r5,r21
 8009f5c:	a020943a 	slli	r16,r20,16
 8009f60:	800a8840 	call	800a884 <__udivsi3>
 8009f64:	100b883a 	mov	r5,r2
 8009f68:	b009883a 	mov	r4,r22
 8009f6c:	9cffffcc 	andi	r19,r19,65535
 8009f70:	1039883a 	mov	fp,r2
 8009f74:	84e0b03a 	or	r16,r16,r19
 8009f78:	80008b80 	call	80008b8 <__mulsi3>
 8009f7c:	8080062e 	bgeu	r16,r2,8009f98 <__udivdi3+0x3f0>
 8009f80:	8461883a 	add	r16,r16,r17
 8009f84:	e0ffffc4 	addi	r3,fp,-1
 8009f88:	84407e36 	bltu	r16,r17,800a184 <__udivdi3+0x5dc>
 8009f8c:	80807d2e 	bgeu	r16,r2,800a184 <__udivdi3+0x5dc>
 8009f90:	e73fff84 	addi	fp,fp,-2
 8009f94:	8461883a 	add	r16,r16,r17
 8009f98:	b806943a 	slli	r3,r23,16
 8009f9c:	80a1c83a 	sub	r16,r16,r2
 8009fa0:	1f06b03a 	or	r3,r3,fp
 8009fa4:	003f6a06 	br	8009d50 <__udivdi3+0x1a8>
 8009fa8:	3106d83a 	srl	r3,r6,r4
 8009fac:	3dce983a 	sll	r7,r7,r23
 8009fb0:	8122d83a 	srl	r17,r16,r4
 8009fb4:	a104d83a 	srl	r2,r20,r4
 8009fb8:	19ecb03a 	or	r22,r3,r7
 8009fbc:	b024d43a 	srli	r18,r22,16
 8009fc0:	85e0983a 	sll	r16,r16,r23
 8009fc4:	8809883a 	mov	r4,r17
 8009fc8:	900b883a 	mov	r5,r18
 8009fcc:	1420b03a 	or	r16,r2,r16
 8009fd0:	b0bfffcc 	andi	r2,r22,65535
 8009fd4:	35ea983a 	sll	r21,r6,r23
 8009fd8:	d8800015 	stw	r2,0(sp)
 8009fdc:	800a8e80 	call	800a8e8 <__umodsi3>
 8009fe0:	900b883a 	mov	r5,r18
 8009fe4:	8809883a 	mov	r4,r17
 8009fe8:	1027883a 	mov	r19,r2
 8009fec:	800a8840 	call	800a884 <__udivsi3>
 8009ff0:	b13fffcc 	andi	r4,r22,65535
 8009ff4:	100b883a 	mov	r5,r2
 8009ff8:	1039883a 	mov	fp,r2
 8009ffc:	80008b80 	call	80008b8 <__mulsi3>
 800a000:	9826943a 	slli	r19,r19,16
 800a004:	8008d43a 	srli	r4,r16,16
 800a008:	9908b03a 	or	r4,r19,r4
 800a00c:	2080062e 	bgeu	r4,r2,800a028 <__udivdi3+0x480>
 800a010:	2589883a 	add	r4,r4,r22
 800a014:	e0ffffc4 	addi	r3,fp,-1
 800a018:	25805c36 	bltu	r4,r22,800a18c <__udivdi3+0x5e4>
 800a01c:	20805b2e 	bgeu	r4,r2,800a18c <__udivdi3+0x5e4>
 800a020:	e73fff84 	addi	fp,fp,-2
 800a024:	2589883a 	add	r4,r4,r22
 800a028:	20a3c83a 	sub	r17,r4,r2
 800a02c:	8809883a 	mov	r4,r17
 800a030:	900b883a 	mov	r5,r18
 800a034:	800a8e80 	call	800a8e8 <__umodsi3>
 800a038:	1027883a 	mov	r19,r2
 800a03c:	8809883a 	mov	r4,r17
 800a040:	900b883a 	mov	r5,r18
 800a044:	9826943a 	slli	r19,r19,16
 800a048:	800a8840 	call	800a884 <__udivsi3>
 800a04c:	100b883a 	mov	r5,r2
 800a050:	b13fffcc 	andi	r4,r22,65535
 800a054:	843fffcc 	andi	r16,r16,65535
 800a058:	1023883a 	mov	r17,r2
 800a05c:	9c20b03a 	or	r16,r19,r16
 800a060:	80008b80 	call	80008b8 <__mulsi3>
 800a064:	8080062e 	bgeu	r16,r2,800a080 <__udivdi3+0x4d8>
 800a068:	85a1883a 	add	r16,r16,r22
 800a06c:	88ffffc4 	addi	r3,r17,-1
 800a070:	85804236 	bltu	r16,r22,800a17c <__udivdi3+0x5d4>
 800a074:	8080412e 	bgeu	r16,r2,800a17c <__udivdi3+0x5d4>
 800a078:	8c7fff84 	addi	r17,r17,-2
 800a07c:	85a1883a 	add	r16,r16,r22
 800a080:	e038943a 	slli	fp,fp,16
 800a084:	adbfffcc 	andi	r22,r21,65535
 800a088:	b00b883a 	mov	r5,r22
 800a08c:	e478b03a 	or	fp,fp,r17
 800a090:	e024d43a 	srli	r18,fp,16
 800a094:	e4ffffcc 	andi	r19,fp,65535
 800a098:	9809883a 	mov	r4,r19
 800a09c:	a82ad43a 	srli	r21,r21,16
 800a0a0:	80a1c83a 	sub	r16,r16,r2
 800a0a4:	80008b80 	call	80008b8 <__mulsi3>
 800a0a8:	9009883a 	mov	r4,r18
 800a0ac:	b00b883a 	mov	r5,r22
 800a0b0:	d8800015 	stw	r2,0(sp)
 800a0b4:	80008b80 	call	80008b8 <__mulsi3>
 800a0b8:	9009883a 	mov	r4,r18
 800a0bc:	a80b883a 	mov	r5,r21
 800a0c0:	1023883a 	mov	r17,r2
 800a0c4:	80008b80 	call	80008b8 <__mulsi3>
 800a0c8:	a80b883a 	mov	r5,r21
 800a0cc:	9809883a 	mov	r4,r19
 800a0d0:	1025883a 	mov	r18,r2
 800a0d4:	80008b80 	call	80008b8 <__mulsi3>
 800a0d8:	d9800017 	ldw	r6,0(sp)
 800a0dc:	1445883a 	add	r2,r2,r17
 800a0e0:	3006d43a 	srli	r3,r6,16
 800a0e4:	1885883a 	add	r2,r3,r2
 800a0e8:	1440022e 	bgeu	r2,r17,800a0f4 <__udivdi3+0x54c>
 800a0ec:	00c00074 	movhi	r3,1
 800a0f0:	90e5883a 	add	r18,r18,r3
 800a0f4:	1006d43a 	srli	r3,r2,16
 800a0f8:	1c87883a 	add	r3,r3,r18
 800a0fc:	80c00936 	bltu	r16,r3,800a124 <__udivdi3+0x57c>
 800a100:	80c00326 	beq	r16,r3,800a110 <__udivdi3+0x568>
 800a104:	e005883a 	mov	r2,fp
 800a108:	0007883a 	mov	r3,zero
 800a10c:	003f5406 	br	8009e60 <__udivdi3+0x2b8>
 800a110:	1004943a 	slli	r2,r2,16
 800a114:	a5c6983a 	sll	r3,r20,r23
 800a118:	31bfffcc 	andi	r6,r6,65535
 800a11c:	1185883a 	add	r2,r2,r6
 800a120:	18bff82e 	bgeu	r3,r2,800a104 <__udivdi3+0x55c>
 800a124:	e0bfffc4 	addi	r2,fp,-1
 800a128:	0007883a 	mov	r3,zero
 800a12c:	003f4c06 	br	8009e60 <__udivdi3+0x2b8>
 800a130:	3808d43a 	srli	r4,r7,16
 800a134:	00c00404 	movi	r3,16
 800a138:	003f3c06 	br	8009e2c <__udivdi3+0x284>
 800a13c:	0007883a 	mov	r3,zero
 800a140:	00800044 	movi	r2,1
 800a144:	003f4606 	br	8009e60 <__udivdi3+0x2b8>
 800a148:	3809883a 	mov	r4,r7
 800a14c:	0007883a 	mov	r3,zero
 800a150:	003f3606 	br	8009e2c <__udivdi3+0x284>
 800a154:	3007883a 	mov	r3,r6
 800a158:	003eac06 	br	8009c0c <__udivdi3+0x64>
 800a15c:	8806d43a 	srli	r3,r17,16
 800a160:	04c00404 	movi	r19,16
 800a164:	003eef06 	br	8009d24 <__udivdi3+0x17c>
 800a168:	3006d43a 	srli	r3,r6,16
 800a16c:	04c00404 	movi	r19,16
 800a170:	003ea606 	br	8009c0c <__udivdi3+0x64>
 800a174:	8807883a 	mov	r3,r17
 800a178:	003eea06 	br	8009d24 <__udivdi3+0x17c>
 800a17c:	1823883a 	mov	r17,r3
 800a180:	003fbf06 	br	800a080 <__udivdi3+0x4d8>
 800a184:	1839883a 	mov	fp,r3
 800a188:	003f8306 	br	8009f98 <__udivdi3+0x3f0>
 800a18c:	1839883a 	mov	fp,r3
 800a190:	003fa506 	br	800a028 <__udivdi3+0x480>
 800a194:	182f883a 	mov	r23,r3
 800a198:	003f6906 	br	8009f40 <__udivdi3+0x398>
 800a19c:	9cffff84 	addi	r19,r19,-2
 800a1a0:	003f1806 	br	8009e04 <__udivdi3+0x25c>
 800a1a4:	9cffff84 	addi	r19,r19,-2
 800a1a8:	003ecf06 	br	8009ce8 <__udivdi3+0x140>
 800a1ac:	843fff84 	addi	r16,r16,-2
 800a1b0:	1c47883a 	add	r3,r3,r17
 800a1b4:	003eb706 	br	8009c94 <__udivdi3+0xec>
 800a1b8:	843fff84 	addi	r16,r16,-2
 800a1bc:	2449883a 	add	r4,r4,r17
 800a1c0:	003ef906 	br	8009da8 <__udivdi3+0x200>

0800a1c4 <__umoddi3>:
 800a1c4:	defff304 	addi	sp,sp,-52
 800a1c8:	dc400415 	stw	r17,16(sp)
 800a1cc:	dc000315 	stw	r16,12(sp)
 800a1d0:	dfc00c15 	stw	ra,48(sp)
 800a1d4:	df000b15 	stw	fp,44(sp)
 800a1d8:	ddc00a15 	stw	r23,40(sp)
 800a1dc:	dd800915 	stw	r22,36(sp)
 800a1e0:	dd400815 	stw	r21,32(sp)
 800a1e4:	dd000715 	stw	r20,28(sp)
 800a1e8:	dcc00615 	stw	r19,24(sp)
 800a1ec:	dc800515 	stw	r18,20(sp)
 800a1f0:	2823883a 	mov	r17,r5
 800a1f4:	2021883a 	mov	r16,r4
 800a1f8:	3800781e 	bne	r7,zero,800a3dc <__umoddi3+0x218>
 800a1fc:	3825883a 	mov	r18,r7
 800a200:	3027883a 	mov	r19,r6
 800a204:	2029883a 	mov	r20,r4
 800a208:	29803d2e 	bgeu	r5,r6,800a300 <__umoddi3+0x13c>
 800a20c:	00bfffd4 	movui	r2,65535
 800a210:	2839883a 	mov	fp,r5
 800a214:	11809f36 	bltu	r2,r6,800a494 <__umoddi3+0x2d0>
 800a218:	30804030 	cmpltui	r2,r6,256
 800a21c:	1001451e 	bne	r2,zero,800a734 <__umoddi3+0x570>
 800a220:	3006d23a 	srli	r3,r6,8
 800a224:	04800204 	movi	r18,8
 800a228:	00820074 	movhi	r2,2049
 800a22c:	1885883a 	add	r2,r3,r2
 800a230:	11000543 	ldbu	r4,21(r2)
 800a234:	00800804 	movi	r2,32
 800a238:	2489883a 	add	r4,r4,r18
 800a23c:	1125c83a 	sub	r18,r2,r4
 800a240:	90000526 	beq	r18,zero,800a258 <__umoddi3+0x94>
 800a244:	8ca2983a 	sll	r17,r17,r18
 800a248:	8108d83a 	srl	r4,r16,r4
 800a24c:	34a6983a 	sll	r19,r6,r18
 800a250:	84a8983a 	sll	r20,r16,r18
 800a254:	2478b03a 	or	fp,r4,r17
 800a258:	982cd43a 	srli	r22,r19,16
 800a25c:	e009883a 	mov	r4,fp
 800a260:	9dffffcc 	andi	r23,r19,65535
 800a264:	b00b883a 	mov	r5,r22
 800a268:	800a8e80 	call	800a8e8 <__umodsi3>
 800a26c:	b00b883a 	mov	r5,r22
 800a270:	e009883a 	mov	r4,fp
 800a274:	102b883a 	mov	r21,r2
 800a278:	800a8840 	call	800a884 <__udivsi3>
 800a27c:	100b883a 	mov	r5,r2
 800a280:	b809883a 	mov	r4,r23
 800a284:	80008b80 	call	80008b8 <__mulsi3>
 800a288:	a82a943a 	slli	r21,r21,16
 800a28c:	a006d43a 	srli	r3,r20,16
 800a290:	a8c6b03a 	or	r3,r21,r3
 800a294:	1880032e 	bgeu	r3,r2,800a2a4 <__umoddi3+0xe0>
 800a298:	1cc7883a 	add	r3,r3,r19
 800a29c:	1cc00136 	bltu	r3,r19,800a2a4 <__umoddi3+0xe0>
 800a2a0:	18813836 	bltu	r3,r2,800a784 <__umoddi3+0x5c0>
 800a2a4:	18a1c83a 	sub	r16,r3,r2
 800a2a8:	b00b883a 	mov	r5,r22
 800a2ac:	8009883a 	mov	r4,r16
 800a2b0:	800a8e80 	call	800a8e8 <__umodsi3>
 800a2b4:	b00b883a 	mov	r5,r22
 800a2b8:	8009883a 	mov	r4,r16
 800a2bc:	1023883a 	mov	r17,r2
 800a2c0:	800a8840 	call	800a884 <__udivsi3>
 800a2c4:	100b883a 	mov	r5,r2
 800a2c8:	b809883a 	mov	r4,r23
 800a2cc:	8822943a 	slli	r17,r17,16
 800a2d0:	80008b80 	call	80008b8 <__mulsi3>
 800a2d4:	a0ffffcc 	andi	r3,r20,65535
 800a2d8:	88c6b03a 	or	r3,r17,r3
 800a2dc:	1880042e 	bgeu	r3,r2,800a2f0 <__umoddi3+0x12c>
 800a2e0:	1cc7883a 	add	r3,r3,r19
 800a2e4:	1cc00236 	bltu	r3,r19,800a2f0 <__umoddi3+0x12c>
 800a2e8:	1880012e 	bgeu	r3,r2,800a2f0 <__umoddi3+0x12c>
 800a2ec:	1cc7883a 	add	r3,r3,r19
 800a2f0:	1885c83a 	sub	r2,r3,r2
 800a2f4:	1484d83a 	srl	r2,r2,r18
 800a2f8:	0007883a 	mov	r3,zero
 800a2fc:	00003a06 	br	800a3e8 <__umoddi3+0x224>
 800a300:	3000041e 	bne	r6,zero,800a314 <__umoddi3+0x150>
 800a304:	000b883a 	mov	r5,zero
 800a308:	01000044 	movi	r4,1
 800a30c:	800a8840 	call	800a884 <__udivsi3>
 800a310:	1027883a 	mov	r19,r2
 800a314:	00bfffd4 	movui	r2,65535
 800a318:	14c0592e 	bgeu	r2,r19,800a480 <__umoddi3+0x2bc>
 800a31c:	00804034 	movhi	r2,256
 800a320:	98810c36 	bltu	r19,r2,800a754 <__umoddi3+0x590>
 800a324:	9806d63a 	srli	r3,r19,24
 800a328:	04800604 	movi	r18,24
 800a32c:	00820074 	movhi	r2,2049
 800a330:	1885883a 	add	r2,r3,r2
 800a334:	10c00543 	ldbu	r3,21(r2)
 800a338:	00800804 	movi	r2,32
 800a33c:	1c87883a 	add	r3,r3,r18
 800a340:	10e5c83a 	sub	r18,r2,r3
 800a344:	9000c51e 	bne	r18,zero,800a65c <__umoddi3+0x498>
 800a348:	982ad43a 	srli	r21,r19,16
 800a34c:	8ce3c83a 	sub	r17,r17,r19
 800a350:	9dbfffcc 	andi	r22,r19,65535
 800a354:	a80b883a 	mov	r5,r21
 800a358:	8809883a 	mov	r4,r17
 800a35c:	800a8e80 	call	800a8e8 <__umodsi3>
 800a360:	a80b883a 	mov	r5,r21
 800a364:	8809883a 	mov	r4,r17
 800a368:	102f883a 	mov	r23,r2
 800a36c:	800a8840 	call	800a884 <__udivsi3>
 800a370:	b00b883a 	mov	r5,r22
 800a374:	1009883a 	mov	r4,r2
 800a378:	80008b80 	call	80008b8 <__mulsi3>
 800a37c:	b82e943a 	slli	r23,r23,16
 800a380:	a006d43a 	srli	r3,r20,16
 800a384:	b8c6b03a 	or	r3,r23,r3
 800a388:	1880042e 	bgeu	r3,r2,800a39c <__umoddi3+0x1d8>
 800a38c:	1cc7883a 	add	r3,r3,r19
 800a390:	1cc00236 	bltu	r3,r19,800a39c <__umoddi3+0x1d8>
 800a394:	1880012e 	bgeu	r3,r2,800a39c <__umoddi3+0x1d8>
 800a398:	1cc7883a 	add	r3,r3,r19
 800a39c:	18a1c83a 	sub	r16,r3,r2
 800a3a0:	a80b883a 	mov	r5,r21
 800a3a4:	8009883a 	mov	r4,r16
 800a3a8:	800a8e80 	call	800a8e8 <__umodsi3>
 800a3ac:	1023883a 	mov	r17,r2
 800a3b0:	a80b883a 	mov	r5,r21
 800a3b4:	8009883a 	mov	r4,r16
 800a3b8:	800a8840 	call	800a884 <__udivsi3>
 800a3bc:	8822943a 	slli	r17,r17,16
 800a3c0:	b00b883a 	mov	r5,r22
 800a3c4:	1009883a 	mov	r4,r2
 800a3c8:	80008b80 	call	80008b8 <__mulsi3>
 800a3cc:	a53fffcc 	andi	r20,r20,65535
 800a3d0:	8d06b03a 	or	r3,r17,r20
 800a3d4:	18bfc62e 	bgeu	r3,r2,800a2f0 <__umoddi3+0x12c>
 800a3d8:	003fc106 	br	800a2e0 <__umoddi3+0x11c>
 800a3dc:	2005883a 	mov	r2,r4
 800a3e0:	29c00d2e 	bgeu	r5,r7,800a418 <__umoddi3+0x254>
 800a3e4:	2807883a 	mov	r3,r5
 800a3e8:	dfc00c17 	ldw	ra,48(sp)
 800a3ec:	df000b17 	ldw	fp,44(sp)
 800a3f0:	ddc00a17 	ldw	r23,40(sp)
 800a3f4:	dd800917 	ldw	r22,36(sp)
 800a3f8:	dd400817 	ldw	r21,32(sp)
 800a3fc:	dd000717 	ldw	r20,28(sp)
 800a400:	dcc00617 	ldw	r19,24(sp)
 800a404:	dc800517 	ldw	r18,20(sp)
 800a408:	dc400417 	ldw	r17,16(sp)
 800a40c:	dc000317 	ldw	r16,12(sp)
 800a410:	dec00d04 	addi	sp,sp,52
 800a414:	f800283a 	ret
 800a418:	013fffd4 	movui	r4,65535
 800a41c:	2807883a 	mov	r3,r5
 800a420:	21c0122e 	bgeu	r4,r7,800a46c <__umoddi3+0x2a8>
 800a424:	01004034 	movhi	r4,256
 800a428:	3900c736 	bltu	r7,r4,800a748 <__umoddi3+0x584>
 800a42c:	3810d63a 	srli	r8,r7,24
 800a430:	01400604 	movi	r5,24
 800a434:	01020074 	movhi	r4,2049
 800a438:	4109883a 	add	r4,r8,r4
 800a43c:	25000543 	ldbu	r20,21(r4)
 800a440:	05400804 	movi	r21,32
 800a444:	a169883a 	add	r20,r20,r5
 800a448:	ad2bc83a 	sub	r21,r21,r20
 800a44c:	a800161e 	bne	r21,zero,800a4a8 <__umoddi3+0x2e4>
 800a450:	3c400136 	bltu	r7,r17,800a458 <__umoddi3+0x294>
 800a454:	81bfe436 	bltu	r16,r6,800a3e8 <__umoddi3+0x224>
 800a458:	8185c83a 	sub	r2,r16,r6
 800a45c:	89cfc83a 	sub	r7,r17,r7
 800a460:	8087803a 	cmpltu	r3,r16,r2
 800a464:	38c7c83a 	sub	r3,r7,r3
 800a468:	003fdf06 	br	800a3e8 <__umoddi3+0x224>
 800a46c:	39004030 	cmpltui	r4,r7,256
 800a470:	2000b21e 	bne	r4,zero,800a73c <__umoddi3+0x578>
 800a474:	3810d23a 	srli	r8,r7,8
 800a478:	01400204 	movi	r5,8
 800a47c:	003fed06 	br	800a434 <__umoddi3+0x270>
 800a480:	98804030 	cmpltui	r2,r19,256
 800a484:	1000b61e 	bne	r2,zero,800a760 <__umoddi3+0x59c>
 800a488:	9806d23a 	srli	r3,r19,8
 800a48c:	04800204 	movi	r18,8
 800a490:	003fa606 	br	800a32c <__umoddi3+0x168>
 800a494:	00804034 	movhi	r2,256
 800a498:	3080b336 	bltu	r6,r2,800a768 <__umoddi3+0x5a4>
 800a49c:	3006d63a 	srli	r3,r6,24
 800a4a0:	04800604 	movi	r18,24
 800a4a4:	003f6006 	br	800a228 <__umoddi3+0x64>
 800a4a8:	3508d83a 	srl	r4,r6,r20
 800a4ac:	3d4e983a 	sll	r7,r7,r21
 800a4b0:	8d38d83a 	srl	fp,r17,r20
 800a4b4:	8504d83a 	srl	r2,r16,r20
 800a4b8:	21e4b03a 	or	r18,r4,r7
 800a4bc:	902cd43a 	srli	r22,r18,16
 800a4c0:	8d62983a 	sll	r17,r17,r21
 800a4c4:	e009883a 	mov	r4,fp
 800a4c8:	b00b883a 	mov	r5,r22
 800a4cc:	3566983a 	sll	r19,r6,r21
 800a4d0:	1462b03a 	or	r17,r2,r17
 800a4d4:	800a8e80 	call	800a8e8 <__umodsi3>
 800a4d8:	e009883a 	mov	r4,fp
 800a4dc:	b00b883a 	mov	r5,r22
 800a4e0:	95ffffcc 	andi	r23,r18,65535
 800a4e4:	d8800015 	stw	r2,0(sp)
 800a4e8:	800a8840 	call	800a884 <__udivsi3>
 800a4ec:	100b883a 	mov	r5,r2
 800a4f0:	b809883a 	mov	r4,r23
 800a4f4:	1039883a 	mov	fp,r2
 800a4f8:	80008b80 	call	80008b8 <__mulsi3>
 800a4fc:	d9800017 	ldw	r6,0(sp)
 800a500:	8806d43a 	srli	r3,r17,16
 800a504:	8560983a 	sll	r16,r16,r21
 800a508:	300c943a 	slli	r6,r6,16
 800a50c:	30c6b03a 	or	r3,r6,r3
 800a510:	1880062e 	bgeu	r3,r2,800a52c <__umoddi3+0x368>
 800a514:	1c87883a 	add	r3,r3,r18
 800a518:	e13fffc4 	addi	r4,fp,-1
 800a51c:	1c809736 	bltu	r3,r18,800a77c <__umoddi3+0x5b8>
 800a520:	1880962e 	bgeu	r3,r2,800a77c <__umoddi3+0x5b8>
 800a524:	e73fff84 	addi	fp,fp,-2
 800a528:	1c87883a 	add	r3,r3,r18
 800a52c:	1887c83a 	sub	r3,r3,r2
 800a530:	b00b883a 	mov	r5,r22
 800a534:	1809883a 	mov	r4,r3
 800a538:	d8c00115 	stw	r3,4(sp)
 800a53c:	800a8e80 	call	800a8e8 <__umodsi3>
 800a540:	d8c00117 	ldw	r3,4(sp)
 800a544:	b00b883a 	mov	r5,r22
 800a548:	d8800015 	stw	r2,0(sp)
 800a54c:	1809883a 	mov	r4,r3
 800a550:	800a8840 	call	800a884 <__udivsi3>
 800a554:	100b883a 	mov	r5,r2
 800a558:	b809883a 	mov	r4,r23
 800a55c:	102d883a 	mov	r22,r2
 800a560:	80008b80 	call	80008b8 <__mulsi3>
 800a564:	d9800017 	ldw	r6,0(sp)
 800a568:	8c7fffcc 	andi	r17,r17,65535
 800a56c:	300c943a 	slli	r6,r6,16
 800a570:	3462b03a 	or	r17,r6,r17
 800a574:	8880062e 	bgeu	r17,r2,800a590 <__umoddi3+0x3cc>
 800a578:	8ca3883a 	add	r17,r17,r18
 800a57c:	b0ffffc4 	addi	r3,r22,-1
 800a580:	8c807c36 	bltu	r17,r18,800a774 <__umoddi3+0x5b0>
 800a584:	88807b2e 	bgeu	r17,r2,800a774 <__umoddi3+0x5b0>
 800a588:	b5bfff84 	addi	r22,r22,-2
 800a58c:	8ca3883a 	add	r17,r17,r18
 800a590:	e038943a 	slli	fp,fp,16
 800a594:	980cd43a 	srli	r6,r19,16
 800a598:	98ffffcc 	andi	r3,r19,65535
 800a59c:	e5b8b03a 	or	fp,fp,r22
 800a5a0:	e02cd43a 	srli	r22,fp,16
 800a5a4:	e73fffcc 	andi	fp,fp,65535
 800a5a8:	180b883a 	mov	r5,r3
 800a5ac:	e009883a 	mov	r4,fp
 800a5b0:	d9800215 	stw	r6,8(sp)
 800a5b4:	d8c00015 	stw	r3,0(sp)
 800a5b8:	88a3c83a 	sub	r17,r17,r2
 800a5bc:	80008b80 	call	80008b8 <__mulsi3>
 800a5c0:	d8c00017 	ldw	r3,0(sp)
 800a5c4:	b009883a 	mov	r4,r22
 800a5c8:	102f883a 	mov	r23,r2
 800a5cc:	180b883a 	mov	r5,r3
 800a5d0:	80008b80 	call	80008b8 <__mulsi3>
 800a5d4:	d9800217 	ldw	r6,8(sp)
 800a5d8:	b009883a 	mov	r4,r22
 800a5dc:	d8800115 	stw	r2,4(sp)
 800a5e0:	300b883a 	mov	r5,r6
 800a5e4:	d9800015 	stw	r6,0(sp)
 800a5e8:	80008b80 	call	80008b8 <__mulsi3>
 800a5ec:	d9800017 	ldw	r6,0(sp)
 800a5f0:	e009883a 	mov	r4,fp
 800a5f4:	102d883a 	mov	r22,r2
 800a5f8:	300b883a 	mov	r5,r6
 800a5fc:	80008b80 	call	80008b8 <__mulsi3>
 800a600:	d9c00117 	ldw	r7,4(sp)
 800a604:	b808d43a 	srli	r4,r23,16
 800a608:	11c5883a 	add	r2,r2,r7
 800a60c:	2085883a 	add	r2,r4,r2
 800a610:	11c0022e 	bgeu	r2,r7,800a61c <__umoddi3+0x458>
 800a614:	00c00074 	movhi	r3,1
 800a618:	b0ed883a 	add	r22,r22,r3
 800a61c:	1006d43a 	srli	r3,r2,16
 800a620:	1004943a 	slli	r2,r2,16
 800a624:	bdffffcc 	andi	r23,r23,65535
 800a628:	1d87883a 	add	r3,r3,r22
 800a62c:	15c5883a 	add	r2,r2,r23
 800a630:	88c03a36 	bltu	r17,r3,800a71c <__umoddi3+0x558>
 800a634:	88c03826 	beq	r17,r3,800a718 <__umoddi3+0x554>
 800a638:	8085c83a 	sub	r2,r16,r2
 800a63c:	80a1803a 	cmpltu	r16,r16,r2
 800a640:	88c7c83a 	sub	r3,r17,r3
 800a644:	1c07c83a 	sub	r3,r3,r16
 800a648:	1d20983a 	sll	r16,r3,r20
 800a64c:	1544d83a 	srl	r2,r2,r21
 800a650:	1d46d83a 	srl	r3,r3,r21
 800a654:	8084b03a 	or	r2,r16,r2
 800a658:	003f6306 	br	800a3e8 <__umoddi3+0x224>
 800a65c:	9ca6983a 	sll	r19,r19,r18
 800a660:	88f8d83a 	srl	fp,r17,r3
 800a664:	80c6d83a 	srl	r3,r16,r3
 800a668:	982ad43a 	srli	r21,r19,16
 800a66c:	8ca2983a 	sll	r17,r17,r18
 800a670:	e009883a 	mov	r4,fp
 800a674:	a80b883a 	mov	r5,r21
 800a678:	1c6eb03a 	or	r23,r3,r17
 800a67c:	800a8e80 	call	800a8e8 <__umodsi3>
 800a680:	a80b883a 	mov	r5,r21
 800a684:	e009883a 	mov	r4,fp
 800a688:	1029883a 	mov	r20,r2
 800a68c:	9dbfffcc 	andi	r22,r19,65535
 800a690:	800a8840 	call	800a884 <__udivsi3>
 800a694:	b009883a 	mov	r4,r22
 800a698:	100b883a 	mov	r5,r2
 800a69c:	80008b80 	call	80008b8 <__mulsi3>
 800a6a0:	a006943a 	slli	r3,r20,16
 800a6a4:	b808d43a 	srli	r4,r23,16
 800a6a8:	84a8983a 	sll	r20,r16,r18
 800a6ac:	1906b03a 	or	r3,r3,r4
 800a6b0:	1880042e 	bgeu	r3,r2,800a6c4 <__umoddi3+0x500>
 800a6b4:	1cc7883a 	add	r3,r3,r19
 800a6b8:	1cc00236 	bltu	r3,r19,800a6c4 <__umoddi3+0x500>
 800a6bc:	1880012e 	bgeu	r3,r2,800a6c4 <__umoddi3+0x500>
 800a6c0:	1cc7883a 	add	r3,r3,r19
 800a6c4:	18a3c83a 	sub	r17,r3,r2
 800a6c8:	8809883a 	mov	r4,r17
 800a6cc:	a80b883a 	mov	r5,r21
 800a6d0:	800a8e80 	call	800a8e8 <__umodsi3>
 800a6d4:	1021883a 	mov	r16,r2
 800a6d8:	8809883a 	mov	r4,r17
 800a6dc:	a80b883a 	mov	r5,r21
 800a6e0:	8022943a 	slli	r17,r16,16
 800a6e4:	800a8840 	call	800a884 <__udivsi3>
 800a6e8:	100b883a 	mov	r5,r2
 800a6ec:	b009883a 	mov	r4,r22
 800a6f0:	bdffffcc 	andi	r23,r23,65535
 800a6f4:	80008b80 	call	80008b8 <__mulsi3>
 800a6f8:	8de2b03a 	or	r17,r17,r23
 800a6fc:	8880042e 	bgeu	r17,r2,800a710 <__umoddi3+0x54c>
 800a700:	8ce3883a 	add	r17,r17,r19
 800a704:	8cc00236 	bltu	r17,r19,800a710 <__umoddi3+0x54c>
 800a708:	8880012e 	bgeu	r17,r2,800a710 <__umoddi3+0x54c>
 800a70c:	8ce3883a 	add	r17,r17,r19
 800a710:	88a3c83a 	sub	r17,r17,r2
 800a714:	003f0f06 	br	800a354 <__umoddi3+0x190>
 800a718:	80bfc72e 	bgeu	r16,r2,800a638 <__umoddi3+0x474>
 800a71c:	14e7c83a 	sub	r19,r2,r19
 800a720:	14c5803a 	cmpltu	r2,r2,r19
 800a724:	1489883a 	add	r4,r2,r18
 800a728:	1907c83a 	sub	r3,r3,r4
 800a72c:	9805883a 	mov	r2,r19
 800a730:	003fc106 	br	800a638 <__umoddi3+0x474>
 800a734:	3007883a 	mov	r3,r6
 800a738:	003ebb06 	br	800a228 <__umoddi3+0x64>
 800a73c:	3811883a 	mov	r8,r7
 800a740:	000b883a 	mov	r5,zero
 800a744:	003f3b06 	br	800a434 <__umoddi3+0x270>
 800a748:	3810d43a 	srli	r8,r7,16
 800a74c:	01400404 	movi	r5,16
 800a750:	003f3806 	br	800a434 <__umoddi3+0x270>
 800a754:	9806d43a 	srli	r3,r19,16
 800a758:	04800404 	movi	r18,16
 800a75c:	003ef306 	br	800a32c <__umoddi3+0x168>
 800a760:	9807883a 	mov	r3,r19
 800a764:	003ef106 	br	800a32c <__umoddi3+0x168>
 800a768:	3006d43a 	srli	r3,r6,16
 800a76c:	04800404 	movi	r18,16
 800a770:	003ead06 	br	800a228 <__umoddi3+0x64>
 800a774:	182d883a 	mov	r22,r3
 800a778:	003f8506 	br	800a590 <__umoddi3+0x3cc>
 800a77c:	2039883a 	mov	fp,r4
 800a780:	003f6a06 	br	800a52c <__umoddi3+0x368>
 800a784:	1cc7883a 	add	r3,r3,r19
 800a788:	003ec606 	br	800a2a4 <__umoddi3+0xe0>

0800a78c <__divsi3>:
 800a78c:	20001a16 	blt	r4,zero,800a7f8 <__divsi3+0x6c>
 800a790:	000f883a 	mov	r7,zero
 800a794:	2800020e 	bge	r5,zero,800a7a0 <__divsi3+0x14>
 800a798:	014bc83a 	sub	r5,zero,r5
 800a79c:	39c0005c 	xori	r7,r7,1
 800a7a0:	200d883a 	mov	r6,r4
 800a7a4:	00c00044 	movi	r3,1
 800a7a8:	2900092e 	bgeu	r5,r4,800a7d0 <__divsi3+0x44>
 800a7ac:	00800804 	movi	r2,32
 800a7b0:	00c00044 	movi	r3,1
 800a7b4:	00000106 	br	800a7bc <__divsi3+0x30>
 800a7b8:	10001226 	beq	r2,zero,800a804 <__divsi3+0x78>
 800a7bc:	294b883a 	add	r5,r5,r5
 800a7c0:	10bfffc4 	addi	r2,r2,-1
 800a7c4:	18c7883a 	add	r3,r3,r3
 800a7c8:	293ffb36 	bltu	r5,r4,800a7b8 <__divsi3+0x2c>
 800a7cc:	18000d26 	beq	r3,zero,800a804 <__divsi3+0x78>
 800a7d0:	0005883a 	mov	r2,zero
 800a7d4:	31400236 	bltu	r6,r5,800a7e0 <__divsi3+0x54>
 800a7d8:	314dc83a 	sub	r6,r6,r5
 800a7dc:	10c4b03a 	or	r2,r2,r3
 800a7e0:	1806d07a 	srli	r3,r3,1
 800a7e4:	280ad07a 	srli	r5,r5,1
 800a7e8:	183ffa1e 	bne	r3,zero,800a7d4 <__divsi3+0x48>
 800a7ec:	38000126 	beq	r7,zero,800a7f4 <__divsi3+0x68>
 800a7f0:	0085c83a 	sub	r2,zero,r2
 800a7f4:	f800283a 	ret
 800a7f8:	0109c83a 	sub	r4,zero,r4
 800a7fc:	01c00044 	movi	r7,1
 800a800:	003fe406 	br	800a794 <__divsi3+0x8>
 800a804:	0005883a 	mov	r2,zero
 800a808:	003ff806 	br	800a7ec <__divsi3+0x60>

0800a80c <__modsi3>:
 800a80c:	20001a16 	blt	r4,zero,800a878 <__modsi3+0x6c>
 800a810:	000f883a 	mov	r7,zero
 800a814:	2005883a 	mov	r2,r4
 800a818:	2800010e 	bge	r5,zero,800a820 <__modsi3+0x14>
 800a81c:	014bc83a 	sub	r5,zero,r5
 800a820:	00c00044 	movi	r3,1
 800a824:	2900092e 	bgeu	r5,r4,800a84c <__modsi3+0x40>
 800a828:	01800804 	movi	r6,32
 800a82c:	00c00044 	movi	r3,1
 800a830:	00000106 	br	800a838 <__modsi3+0x2c>
 800a834:	30000d26 	beq	r6,zero,800a86c <__modsi3+0x60>
 800a838:	294b883a 	add	r5,r5,r5
 800a83c:	31bfffc4 	addi	r6,r6,-1
 800a840:	18c7883a 	add	r3,r3,r3
 800a844:	293ffb36 	bltu	r5,r4,800a834 <__modsi3+0x28>
 800a848:	18000826 	beq	r3,zero,800a86c <__modsi3+0x60>
 800a84c:	1806d07a 	srli	r3,r3,1
 800a850:	11400136 	bltu	r2,r5,800a858 <__modsi3+0x4c>
 800a854:	1145c83a 	sub	r2,r2,r5
 800a858:	280ad07a 	srli	r5,r5,1
 800a85c:	183ffb1e 	bne	r3,zero,800a84c <__modsi3+0x40>
 800a860:	38000126 	beq	r7,zero,800a868 <__modsi3+0x5c>
 800a864:	0085c83a 	sub	r2,zero,r2
 800a868:	f800283a 	ret
 800a86c:	2005883a 	mov	r2,r4
 800a870:	383ffd26 	beq	r7,zero,800a868 <__modsi3+0x5c>
 800a874:	003ffb06 	br	800a864 <__modsi3+0x58>
 800a878:	0109c83a 	sub	r4,zero,r4
 800a87c:	01c00044 	movi	r7,1
 800a880:	003fe406 	br	800a814 <__modsi3+0x8>

0800a884 <__udivsi3>:
 800a884:	200d883a 	mov	r6,r4
 800a888:	2900152e 	bgeu	r5,r4,800a8e0 <__udivsi3+0x5c>
 800a88c:	28001416 	blt	r5,zero,800a8e0 <__udivsi3+0x5c>
 800a890:	00800804 	movi	r2,32
 800a894:	00c00044 	movi	r3,1
 800a898:	00000206 	br	800a8a4 <__udivsi3+0x20>
 800a89c:	10000e26 	beq	r2,zero,800a8d8 <__udivsi3+0x54>
 800a8a0:	28000516 	blt	r5,zero,800a8b8 <__udivsi3+0x34>
 800a8a4:	294b883a 	add	r5,r5,r5
 800a8a8:	10bfffc4 	addi	r2,r2,-1
 800a8ac:	18c7883a 	add	r3,r3,r3
 800a8b0:	293ffa36 	bltu	r5,r4,800a89c <__udivsi3+0x18>
 800a8b4:	18000826 	beq	r3,zero,800a8d8 <__udivsi3+0x54>
 800a8b8:	0005883a 	mov	r2,zero
 800a8bc:	31400236 	bltu	r6,r5,800a8c8 <__udivsi3+0x44>
 800a8c0:	314dc83a 	sub	r6,r6,r5
 800a8c4:	10c4b03a 	or	r2,r2,r3
 800a8c8:	1806d07a 	srli	r3,r3,1
 800a8cc:	280ad07a 	srli	r5,r5,1
 800a8d0:	183ffa1e 	bne	r3,zero,800a8bc <__udivsi3+0x38>
 800a8d4:	f800283a 	ret
 800a8d8:	0005883a 	mov	r2,zero
 800a8dc:	f800283a 	ret
 800a8e0:	00c00044 	movi	r3,1
 800a8e4:	003ff406 	br	800a8b8 <__udivsi3+0x34>

0800a8e8 <__umodsi3>:
 800a8e8:	2005883a 	mov	r2,r4
 800a8ec:	2900132e 	bgeu	r5,r4,800a93c <__umodsi3+0x54>
 800a8f0:	28001216 	blt	r5,zero,800a93c <__umodsi3+0x54>
 800a8f4:	01800804 	movi	r6,32
 800a8f8:	00c00044 	movi	r3,1
 800a8fc:	00000206 	br	800a908 <__umodsi3+0x20>
 800a900:	30000c26 	beq	r6,zero,800a934 <__umodsi3+0x4c>
 800a904:	28000516 	blt	r5,zero,800a91c <__umodsi3+0x34>
 800a908:	294b883a 	add	r5,r5,r5
 800a90c:	31bfffc4 	addi	r6,r6,-1
 800a910:	18c7883a 	add	r3,r3,r3
 800a914:	293ffa36 	bltu	r5,r4,800a900 <__umodsi3+0x18>
 800a918:	18000626 	beq	r3,zero,800a934 <__umodsi3+0x4c>
 800a91c:	1806d07a 	srli	r3,r3,1
 800a920:	11400136 	bltu	r2,r5,800a928 <__umodsi3+0x40>
 800a924:	1145c83a 	sub	r2,r2,r5
 800a928:	280ad07a 	srli	r5,r5,1
 800a92c:	183ffb1e 	bne	r3,zero,800a91c <__umodsi3+0x34>
 800a930:	f800283a 	ret
 800a934:	2005883a 	mov	r2,r4
 800a938:	f800283a 	ret
 800a93c:	00c00044 	movi	r3,1
 800a940:	003ff606 	br	800a91c <__umodsi3+0x34>

0800a944 <__adddf3>:
 800a944:	02000434 	movhi	r8,16
 800a948:	defffb04 	addi	sp,sp,-20
 800a94c:	423fffc4 	addi	r8,r8,-1
 800a950:	2a12703a 	and	r9,r5,r8
 800a954:	3a06703a 	and	r3,r7,r8
 800a958:	3804d53a 	srli	r2,r7,20
 800a95c:	dc000015 	stw	r16,0(sp)
 800a960:	2820d53a 	srli	r16,r5,20
 800a964:	2016d77a 	srli	r11,r4,29
 800a968:	3014d77a 	srli	r10,r6,29
 800a96c:	280ad7fa 	srli	r5,r5,31
 800a970:	481290fa 	slli	r9,r9,3
 800a974:	180690fa 	slli	r3,r3,3
 800a978:	380ed7fa 	srli	r7,r7,31
 800a97c:	dc400115 	stw	r17,4(sp)
 800a980:	8401ffcc 	andi	r16,r16,2047
 800a984:	1081ffcc 	andi	r2,r2,2047
 800a988:	dfc00415 	stw	ra,16(sp)
 800a98c:	dcc00315 	stw	r19,12(sp)
 800a990:	dc800215 	stw	r18,8(sp)
 800a994:	5a52b03a 	or	r9,r11,r9
 800a998:	50c6b03a 	or	r3,r10,r3
 800a99c:	2823883a 	mov	r17,r5
 800a9a0:	201890fa 	slli	r12,r4,3
 800a9a4:	301690fa 	slli	r11,r6,3
 800a9a8:	8095c83a 	sub	r10,r16,r2
 800a9ac:	29c06a26 	beq	r5,r7,800ab58 <__adddf3+0x214>
 800a9b0:	0280590e 	bge	zero,r10,800ab18 <__adddf3+0x1d4>
 800a9b4:	10007c26 	beq	r2,zero,800aba8 <__adddf3+0x264>
 800a9b8:	8081ffd8 	cmpnei	r2,r16,2047
 800a9bc:	10010726 	beq	r2,zero,800addc <__adddf3+0x498>
 800a9c0:	18c02034 	orhi	r3,r3,128
 800a9c4:	50800e48 	cmpgei	r2,r10,57
 800a9c8:	1000ed1e 	bne	r2,zero,800ad80 <__adddf3+0x43c>
 800a9cc:	50800808 	cmpgei	r2,r10,32
 800a9d0:	1001541e 	bne	r2,zero,800af24 <__adddf3+0x5e0>
 800a9d4:	01000804 	movi	r4,32
 800a9d8:	2289c83a 	sub	r4,r4,r10
 800a9dc:	1926983a 	sll	r19,r3,r4
 800a9e0:	5a84d83a 	srl	r2,r11,r10
 800a9e4:	5908983a 	sll	r4,r11,r4
 800a9e8:	1a86d83a 	srl	r3,r3,r10
 800a9ec:	98a6b03a 	or	r19,r19,r2
 800a9f0:	2016c03a 	cmpne	r11,r4,zero
 800a9f4:	9ae6b03a 	or	r19,r19,r11
 800a9f8:	48d3c83a 	sub	r9,r9,r3
 800a9fc:	64e7c83a 	sub	r19,r12,r19
 800aa00:	64c9803a 	cmpltu	r4,r12,r19
 800aa04:	4909c83a 	sub	r4,r9,r4
 800aa08:	2080202c 	andhi	r2,r4,128
 800aa0c:	10008726 	beq	r2,zero,800ac2c <__adddf3+0x2e8>
 800aa10:	02402034 	movhi	r9,128
 800aa14:	4a7fffc4 	addi	r9,r9,-1
 800aa18:	2264703a 	and	r18,r4,r9
 800aa1c:	9000cf26 	beq	r18,zero,800ad5c <__adddf3+0x418>
 800aa20:	9009883a 	mov	r4,r18
 800aa24:	800d22c0 	call	800d22c <__clzsi2>
 800aa28:	10fffe04 	addi	r3,r2,-8
 800aa2c:	01000804 	movi	r4,32
 800aa30:	20c9c83a 	sub	r4,r4,r3
 800aa34:	990ad83a 	srl	r5,r19,r4
 800aa38:	90c8983a 	sll	r4,r18,r3
 800aa3c:	98e6983a 	sll	r19,r19,r3
 800aa40:	2908b03a 	or	r4,r5,r4
 800aa44:	1c00be16 	blt	r3,r16,800ad40 <__adddf3+0x3fc>
 800aa48:	1c21c83a 	sub	r16,r3,r16
 800aa4c:	81400044 	addi	r5,r16,1
 800aa50:	28800808 	cmpgei	r2,r5,32
 800aa54:	10011b1e 	bne	r2,zero,800aec4 <__adddf3+0x580>
 800aa58:	00800804 	movi	r2,32
 800aa5c:	1145c83a 	sub	r2,r2,r5
 800aa60:	9946d83a 	srl	r3,r19,r5
 800aa64:	98a6983a 	sll	r19,r19,r2
 800aa68:	2084983a 	sll	r2,r4,r2
 800aa6c:	2148d83a 	srl	r4,r4,r5
 800aa70:	9826c03a 	cmpne	r19,r19,zero
 800aa74:	10c4b03a 	or	r2,r2,r3
 800aa78:	14e6b03a 	or	r19,r2,r19
 800aa7c:	0021883a 	mov	r16,zero
 800aa80:	988001cc 	andi	r2,r19,7
 800aa84:	10000726 	beq	r2,zero,800aaa4 <__adddf3+0x160>
 800aa88:	988003cc 	andi	r2,r19,15
 800aa8c:	10800120 	cmpeqi	r2,r2,4
 800aa90:	1000041e 	bne	r2,zero,800aaa4 <__adddf3+0x160>
 800aa94:	99400104 	addi	r5,r19,4
 800aa98:	2ce7803a 	cmpltu	r19,r5,r19
 800aa9c:	24c9883a 	add	r4,r4,r19
 800aaa0:	2827883a 	mov	r19,r5
 800aaa4:	2080202c 	andhi	r2,r4,128
 800aaa8:	10006226 	beq	r2,zero,800ac34 <__adddf3+0x2f0>
 800aaac:	84000044 	addi	r16,r16,1
 800aab0:	8081ffe0 	cmpeqi	r2,r16,2047
 800aab4:	8401ffcc 	andi	r16,r16,2047
 800aab8:	1000731e 	bne	r2,zero,800ac88 <__adddf3+0x344>
 800aabc:	017fe034 	movhi	r5,65408
 800aac0:	297fffc4 	addi	r5,r5,-1
 800aac4:	214a703a 	and	r5,r4,r5
 800aac8:	2804977a 	slli	r2,r5,29
 800aacc:	280a927a 	slli	r5,r5,9
 800aad0:	9826d0fa 	srli	r19,r19,3
 800aad4:	2808d33a 	srli	r4,r5,12
 800aad8:	14c4b03a 	or	r2,r2,r19
 800aadc:	8020953a 	slli	r16,r16,20
 800aae0:	00c00434 	movhi	r3,16
 800aae4:	8c403fcc 	andi	r17,r17,255
 800aae8:	882297fa 	slli	r17,r17,31
 800aaec:	18ffffc4 	addi	r3,r3,-1
 800aaf0:	20c6703a 	and	r3,r4,r3
 800aaf4:	1c06b03a 	or	r3,r3,r16
 800aaf8:	1c46b03a 	or	r3,r3,r17
 800aafc:	dfc00417 	ldw	ra,16(sp)
 800ab00:	dcc00317 	ldw	r19,12(sp)
 800ab04:	dc800217 	ldw	r18,8(sp)
 800ab08:	dc400117 	ldw	r17,4(sp)
 800ab0c:	dc000017 	ldw	r16,0(sp)
 800ab10:	dec00504 	addi	sp,sp,20
 800ab14:	f800283a 	ret
 800ab18:	50002b1e 	bne	r10,zero,800abc8 <__adddf3+0x284>
 800ab1c:	80800044 	addi	r2,r16,1
 800ab20:	1081ff8c 	andi	r2,r2,2046
 800ab24:	1000a11e 	bne	r2,zero,800adac <__adddf3+0x468>
 800ab28:	4b0ab03a 	or	r5,r9,r12
 800ab2c:	1ac4b03a 	or	r2,r3,r11
 800ab30:	80015c1e 	bne	r16,zero,800b0a4 <__adddf3+0x760>
 800ab34:	28012826 	beq	r5,zero,800afd8 <__adddf3+0x694>
 800ab38:	1001671e 	bne	r2,zero,800b0d8 <__adddf3+0x794>
 800ab3c:	4826977a 	slli	r19,r9,29
 800ab40:	00c80034 	movhi	r3,8192
 800ab44:	18ffffc4 	addi	r3,r3,-1
 800ab48:	20c4703a 	and	r2,r4,r3
 800ab4c:	9884b03a 	or	r2,r19,r2
 800ab50:	4812d0fa 	srli	r9,r9,3
 800ab54:	00003d06 	br	800ac4c <__adddf3+0x308>
 800ab58:	02804f0e 	bge	zero,r10,800ac98 <__adddf3+0x354>
 800ab5c:	10002426 	beq	r2,zero,800abf0 <__adddf3+0x2ac>
 800ab60:	8081ffd8 	cmpnei	r2,r16,2047
 800ab64:	10009d26 	beq	r2,zero,800addc <__adddf3+0x498>
 800ab68:	18c02034 	orhi	r3,r3,128
 800ab6c:	50800e48 	cmpgei	r2,r10,57
 800ab70:	10003b1e 	bne	r2,zero,800ac60 <__adddf3+0x31c>
 800ab74:	50800808 	cmpgei	r2,r10,32
 800ab78:	10010326 	beq	r2,zero,800af88 <__adddf3+0x644>
 800ab7c:	54fff804 	addi	r19,r10,-32
 800ab80:	51000820 	cmpeqi	r4,r10,32
 800ab84:	1cc4d83a 	srl	r2,r3,r19
 800ab88:	2000041e 	bne	r4,zero,800ab9c <__adddf3+0x258>
 800ab8c:	01001004 	movi	r4,64
 800ab90:	2295c83a 	sub	r10,r4,r10
 800ab94:	1a86983a 	sll	r3,r3,r10
 800ab98:	58d6b03a 	or	r11,r11,r3
 800ab9c:	5826c03a 	cmpne	r19,r11,zero
 800aba0:	98a6b03a 	or	r19,r19,r2
 800aba4:	00003006 	br	800ac68 <__adddf3+0x324>
 800aba8:	1ac4b03a 	or	r2,r3,r11
 800abac:	10007726 	beq	r2,zero,800ad8c <__adddf3+0x448>
 800abb0:	50bfffc4 	addi	r2,r10,-1
 800abb4:	10011926 	beq	r2,zero,800b01c <__adddf3+0x6d8>
 800abb8:	5281ffd8 	cmpnei	r10,r10,2047
 800abbc:	50012026 	beq	r10,zero,800b040 <__adddf3+0x6fc>
 800abc0:	1015883a 	mov	r10,r2
 800abc4:	003f7f06 	br	800a9c4 <__adddf3+0x80>
 800abc8:	1409c83a 	sub	r4,r2,r16
 800abcc:	8000a61e 	bne	r16,zero,800ae68 <__adddf3+0x524>
 800abd0:	4b0ab03a 	or	r5,r9,r12
 800abd4:	2800f726 	beq	r5,zero,800afb4 <__adddf3+0x670>
 800abd8:	217fffc4 	addi	r5,r4,-1
 800abdc:	28017f26 	beq	r5,zero,800b1dc <__adddf3+0x898>
 800abe0:	2101ffd8 	cmpnei	r4,r4,2047
 800abe4:	2001a326 	beq	r4,zero,800b274 <__adddf3+0x930>
 800abe8:	2809883a 	mov	r4,r5
 800abec:	0000a106 	br	800ae74 <__adddf3+0x530>
 800abf0:	1ac4b03a 	or	r2,r3,r11
 800abf4:	10006526 	beq	r2,zero,800ad8c <__adddf3+0x448>
 800abf8:	50bfffc4 	addi	r2,r10,-1
 800abfc:	10000426 	beq	r2,zero,800ac10 <__adddf3+0x2cc>
 800ac00:	5281ffd8 	cmpnei	r10,r10,2047
 800ac04:	50014326 	beq	r10,zero,800b114 <__adddf3+0x7d0>
 800ac08:	1015883a 	mov	r10,r2
 800ac0c:	003fd706 	br	800ab6c <__adddf3+0x228>
 800ac10:	62e7883a 	add	r19,r12,r11
 800ac14:	48d3883a 	add	r9,r9,r3
 800ac18:	9b09803a 	cmpltu	r4,r19,r12
 800ac1c:	4909883a 	add	r4,r9,r4
 800ac20:	2080202c 	andhi	r2,r4,128
 800ac24:	1000b41e 	bne	r2,zero,800aef8 <__adddf3+0x5b4>
 800ac28:	04000044 	movi	r16,1
 800ac2c:	988001cc 	andi	r2,r19,7
 800ac30:	103f951e 	bne	r2,zero,800aa88 <__adddf3+0x144>
 800ac34:	9826d0fa 	srli	r19,r19,3
 800ac38:	2004977a 	slli	r2,r4,29
 800ac3c:	2012d0fa 	srli	r9,r4,3
 800ac40:	9884b03a 	or	r2,r19,r2
 800ac44:	80c1ffe0 	cmpeqi	r3,r16,2047
 800ac48:	1800351e 	bne	r3,zero,800ad20 <__adddf3+0x3dc>
 800ac4c:	01000434 	movhi	r4,16
 800ac50:	213fffc4 	addi	r4,r4,-1
 800ac54:	4908703a 	and	r4,r9,r4
 800ac58:	8401ffcc 	andi	r16,r16,2047
 800ac5c:	003f9f06 	br	800aadc <__adddf3+0x198>
 800ac60:	1ac8b03a 	or	r4,r3,r11
 800ac64:	2026c03a 	cmpne	r19,r4,zero
 800ac68:	9b27883a 	add	r19,r19,r12
 800ac6c:	9b09803a 	cmpltu	r4,r19,r12
 800ac70:	2249883a 	add	r4,r4,r9
 800ac74:	2080202c 	andhi	r2,r4,128
 800ac78:	103fec26 	beq	r2,zero,800ac2c <__adddf3+0x2e8>
 800ac7c:	84000044 	addi	r16,r16,1
 800ac80:	8081ffe0 	cmpeqi	r2,r16,2047
 800ac84:	10009d26 	beq	r2,zero,800aefc <__adddf3+0x5b8>
 800ac88:	0401ffc4 	movi	r16,2047
 800ac8c:	0009883a 	mov	r4,zero
 800ac90:	0005883a 	mov	r2,zero
 800ac94:	003f9106 	br	800aadc <__adddf3+0x198>
 800ac98:	5000571e 	bne	r10,zero,800adf8 <__adddf3+0x4b4>
 800ac9c:	80800044 	addi	r2,r16,1
 800aca0:	1141ff8c 	andi	r5,r2,2046
 800aca4:	2800ed1e 	bne	r5,zero,800b05c <__adddf3+0x718>
 800aca8:	4b04b03a 	or	r2,r9,r12
 800acac:	8000a826 	beq	r16,zero,800af50 <__adddf3+0x60c>
 800acb0:	10010226 	beq	r2,zero,800b0bc <__adddf3+0x778>
 800acb4:	1ad6b03a 	or	r11,r3,r11
 800acb8:	480a977a 	slli	r5,r9,29
 800acbc:	4812d0fa 	srli	r9,r9,3
 800acc0:	58015f26 	beq	r11,zero,800b240 <__adddf3+0x8fc>
 800acc4:	02080034 	movhi	r8,8192
 800acc8:	423fffc4 	addi	r8,r8,-1
 800accc:	2204703a 	and	r2,r4,r8
 800acd0:	4900022c 	andhi	r4,r9,8
 800acd4:	114ab03a 	or	r5,r2,r5
 800acd8:	20000826 	beq	r4,zero,800acfc <__adddf3+0x3b8>
 800acdc:	1808d0fa 	srli	r4,r3,3
 800ace0:	2080022c 	andhi	r2,r4,8
 800ace4:	1000051e 	bne	r2,zero,800acfc <__adddf3+0x3b8>
 800ace8:	1806977a 	slli	r3,r3,29
 800acec:	3204703a 	and	r2,r6,r8
 800acf0:	3823883a 	mov	r17,r7
 800acf4:	10cab03a 	or	r5,r2,r3
 800acf8:	2013883a 	mov	r9,r4
 800acfc:	2804d77a 	srli	r2,r5,29
 800ad00:	480890fa 	slli	r4,r9,3
 800ad04:	00c80034 	movhi	r3,8192
 800ad08:	18ffffc4 	addi	r3,r3,-1
 800ad0c:	1108b03a 	or	r4,r2,r4
 800ad10:	2004977a 	slli	r2,r4,29
 800ad14:	2012d0fa 	srli	r9,r4,3
 800ad18:	28ca703a 	and	r5,r5,r3
 800ad1c:	1144b03a 	or	r2,r2,r5
 800ad20:	4886b03a 	or	r3,r9,r2
 800ad24:	18016b26 	beq	r3,zero,800b2d4 <__adddf3+0x990>
 800ad28:	00c00434 	movhi	r3,16
 800ad2c:	49000234 	orhi	r4,r9,8
 800ad30:	18ffffc4 	addi	r3,r3,-1
 800ad34:	20c8703a 	and	r4,r4,r3
 800ad38:	0401ffc4 	movi	r16,2047
 800ad3c:	003f6706 	br	800aadc <__adddf3+0x198>
 800ad40:	017fe034 	movhi	r5,65408
 800ad44:	297fffc4 	addi	r5,r5,-1
 800ad48:	988001cc 	andi	r2,r19,7
 800ad4c:	80e1c83a 	sub	r16,r16,r3
 800ad50:	2148703a 	and	r4,r4,r5
 800ad54:	103f4c1e 	bne	r2,zero,800aa88 <__adddf3+0x144>
 800ad58:	003fb606 	br	800ac34 <__adddf3+0x2f0>
 800ad5c:	9809883a 	mov	r4,r19
 800ad60:	800d22c0 	call	800d22c <__clzsi2>
 800ad64:	10c00604 	addi	r3,r2,24
 800ad68:	19000808 	cmpgei	r4,r3,32
 800ad6c:	203f2f26 	beq	r4,zero,800aa2c <__adddf3+0xe8>
 800ad70:	113ffe04 	addi	r4,r2,-8
 800ad74:	9908983a 	sll	r4,r19,r4
 800ad78:	0027883a 	mov	r19,zero
 800ad7c:	003f3106 	br	800aa44 <__adddf3+0x100>
 800ad80:	1ac8b03a 	or	r4,r3,r11
 800ad84:	2026c03a 	cmpne	r19,r4,zero
 800ad88:	003f1c06 	br	800a9fc <__adddf3+0xb8>
 800ad8c:	4826977a 	slli	r19,r9,29
 800ad90:	00c80034 	movhi	r3,8192
 800ad94:	18ffffc4 	addi	r3,r3,-1
 800ad98:	20c4703a 	and	r2,r4,r3
 800ad9c:	14c4b03a 	or	r2,r2,r19
 800ada0:	4812d0fa 	srli	r9,r9,3
 800ada4:	5021883a 	mov	r16,r10
 800ada8:	003fa606 	br	800ac44 <__adddf3+0x300>
 800adac:	62e7c83a 	sub	r19,r12,r11
 800adb0:	48e5c83a 	sub	r18,r9,r3
 800adb4:	64c9803a 	cmpltu	r4,r12,r19
 800adb8:	9125c83a 	sub	r18,r18,r4
 800adbc:	9080202c 	andhi	r2,r18,128
 800adc0:	1000b21e 	bne	r2,zero,800b08c <__adddf3+0x748>
 800adc4:	9c84b03a 	or	r2,r19,r18
 800adc8:	103f141e 	bne	r2,zero,800aa1c <__adddf3+0xd8>
 800adcc:	0013883a 	mov	r9,zero
 800add0:	0021883a 	mov	r16,zero
 800add4:	0023883a 	mov	r17,zero
 800add8:	003f9c06 	br	800ac4c <__adddf3+0x308>
 800addc:	4826977a 	slli	r19,r9,29
 800ade0:	00c80034 	movhi	r3,8192
 800ade4:	18ffffc4 	addi	r3,r3,-1
 800ade8:	20c4703a 	and	r2,r4,r3
 800adec:	14c4b03a 	or	r2,r2,r19
 800adf0:	4812d0fa 	srli	r9,r9,3
 800adf4:	003fca06 	br	800ad20 <__adddf3+0x3dc>
 800adf8:	1409c83a 	sub	r4,r2,r16
 800adfc:	80005e1e 	bne	r16,zero,800af78 <__adddf3+0x634>
 800ae00:	4b0ab03a 	or	r5,r9,r12
 800ae04:	28011326 	beq	r5,zero,800b254 <__adddf3+0x910>
 800ae08:	217fffc4 	addi	r5,r4,-1
 800ae0c:	28012c26 	beq	r5,zero,800b2c0 <__adddf3+0x97c>
 800ae10:	2101ffd8 	cmpnei	r4,r4,2047
 800ae14:	2000a926 	beq	r4,zero,800b0bc <__adddf3+0x778>
 800ae18:	2809883a 	mov	r4,r5
 800ae1c:	21400e48 	cmpgei	r5,r4,57
 800ae20:	2800b91e 	bne	r5,zero,800b108 <__adddf3+0x7c4>
 800ae24:	21400808 	cmpgei	r5,r4,32
 800ae28:	28011a1e 	bne	r5,zero,800b294 <__adddf3+0x950>
 800ae2c:	01400804 	movi	r5,32
 800ae30:	290bc83a 	sub	r5,r5,r4
 800ae34:	4966983a 	sll	r19,r9,r5
 800ae38:	610cd83a 	srl	r6,r12,r4
 800ae3c:	614a983a 	sll	r5,r12,r5
 800ae40:	4912d83a 	srl	r9,r9,r4
 800ae44:	99a6b03a 	or	r19,r19,r6
 800ae48:	280ac03a 	cmpne	r5,r5,zero
 800ae4c:	9966b03a 	or	r19,r19,r5
 800ae50:	1a47883a 	add	r3,r3,r9
 800ae54:	9ae7883a 	add	r19,r19,r11
 800ae58:	9ac9803a 	cmpltu	r4,r19,r11
 800ae5c:	20c9883a 	add	r4,r4,r3
 800ae60:	1021883a 	mov	r16,r2
 800ae64:	003f8306 	br	800ac74 <__adddf3+0x330>
 800ae68:	1141ffd8 	cmpnei	r5,r2,2047
 800ae6c:	28006326 	beq	r5,zero,800affc <__adddf3+0x6b8>
 800ae70:	4a402034 	orhi	r9,r9,128
 800ae74:	21400e48 	cmpgei	r5,r4,57
 800ae78:	28006e1e 	bne	r5,zero,800b034 <__adddf3+0x6f0>
 800ae7c:	21400808 	cmpgei	r5,r4,32
 800ae80:	2800ab1e 	bne	r5,zero,800b130 <__adddf3+0x7ec>
 800ae84:	01400804 	movi	r5,32
 800ae88:	290bc83a 	sub	r5,r5,r4
 800ae8c:	4966983a 	sll	r19,r9,r5
 800ae90:	610cd83a 	srl	r6,r12,r4
 800ae94:	614a983a 	sll	r5,r12,r5
 800ae98:	4912d83a 	srl	r9,r9,r4
 800ae9c:	99a6b03a 	or	r19,r19,r6
 800aea0:	280ac03a 	cmpne	r5,r5,zero
 800aea4:	9966b03a 	or	r19,r19,r5
 800aea8:	1a47c83a 	sub	r3,r3,r9
 800aeac:	5ce7c83a 	sub	r19,r11,r19
 800aeb0:	5cc9803a 	cmpltu	r4,r11,r19
 800aeb4:	1909c83a 	sub	r4,r3,r4
 800aeb8:	3823883a 	mov	r17,r7
 800aebc:	1021883a 	mov	r16,r2
 800aec0:	003ed106 	br	800aa08 <__adddf3+0xc4>
 800aec4:	843ff844 	addi	r16,r16,-31
 800aec8:	28800820 	cmpeqi	r2,r5,32
 800aecc:	2420d83a 	srl	r16,r4,r16
 800aed0:	1000041e 	bne	r2,zero,800aee4 <__adddf3+0x5a0>
 800aed4:	00801004 	movi	r2,64
 800aed8:	114bc83a 	sub	r5,r2,r5
 800aedc:	2148983a 	sll	r4,r4,r5
 800aee0:	9926b03a 	or	r19,r19,r4
 800aee4:	9826c03a 	cmpne	r19,r19,zero
 800aee8:	9c26b03a 	or	r19,r19,r16
 800aeec:	0009883a 	mov	r4,zero
 800aef0:	0021883a 	mov	r16,zero
 800aef4:	003f4d06 	br	800ac2c <__adddf3+0x2e8>
 800aef8:	04000084 	movi	r16,2
 800aefc:	00bfe034 	movhi	r2,65408
 800af00:	10bfffc4 	addi	r2,r2,-1
 800af04:	208a703a 	and	r5,r4,r2
 800af08:	9804d07a 	srli	r2,r19,1
 800af0c:	280697fa 	slli	r3,r5,31
 800af10:	9cc0004c 	andi	r19,r19,1
 800af14:	14e6b03a 	or	r19,r2,r19
 800af18:	2808d07a 	srli	r4,r5,1
 800af1c:	1ce6b03a 	or	r19,r3,r19
 800af20:	003ed706 	br	800aa80 <__adddf3+0x13c>
 800af24:	54fff804 	addi	r19,r10,-32
 800af28:	50800820 	cmpeqi	r2,r10,32
 800af2c:	1ce6d83a 	srl	r19,r3,r19
 800af30:	1000041e 	bne	r2,zero,800af44 <__adddf3+0x600>
 800af34:	00801004 	movi	r2,64
 800af38:	1295c83a 	sub	r10,r2,r10
 800af3c:	1a86983a 	sll	r3,r3,r10
 800af40:	58d6b03a 	or	r11,r11,r3
 800af44:	5808c03a 	cmpne	r4,r11,zero
 800af48:	24e6b03a 	or	r19,r4,r19
 800af4c:	003eab06 	br	800a9fc <__adddf3+0xb8>
 800af50:	1000a926 	beq	r2,zero,800b1f8 <__adddf3+0x8b4>
 800af54:	1ac4b03a 	or	r2,r3,r11
 800af58:	1000ae1e 	bne	r2,zero,800b214 <__adddf3+0x8d0>
 800af5c:	4806977a 	slli	r3,r9,29
 800af60:	00880034 	movhi	r2,8192
 800af64:	10bfffc4 	addi	r2,r2,-1
 800af68:	2084703a 	and	r2,r4,r2
 800af6c:	10c4b03a 	or	r2,r2,r3
 800af70:	4812d0fa 	srli	r9,r9,3
 800af74:	003f3506 	br	800ac4c <__adddf3+0x308>
 800af78:	1141ffd8 	cmpnei	r5,r2,2047
 800af7c:	28004f26 	beq	r5,zero,800b0bc <__adddf3+0x778>
 800af80:	4a402034 	orhi	r9,r9,128
 800af84:	003fa506 	br	800ae1c <__adddf3+0x4d8>
 800af88:	01000804 	movi	r4,32
 800af8c:	2289c83a 	sub	r4,r4,r10
 800af90:	1926983a 	sll	r19,r3,r4
 800af94:	5a84d83a 	srl	r2,r11,r10
 800af98:	5908983a 	sll	r4,r11,r4
 800af9c:	1a86d83a 	srl	r3,r3,r10
 800afa0:	98a6b03a 	or	r19,r19,r2
 800afa4:	2016c03a 	cmpne	r11,r4,zero
 800afa8:	9ae6b03a 	or	r19,r19,r11
 800afac:	48d3883a 	add	r9,r9,r3
 800afb0:	003f2d06 	br	800ac68 <__adddf3+0x324>
 800afb4:	01480034 	movhi	r5,8192
 800afb8:	1826977a 	slli	r19,r3,29
 800afbc:	297fffc4 	addi	r5,r5,-1
 800afc0:	3144703a 	and	r2,r6,r5
 800afc4:	14c4b03a 	or	r2,r2,r19
 800afc8:	1812d0fa 	srli	r9,r3,3
 800afcc:	3823883a 	mov	r17,r7
 800afd0:	2021883a 	mov	r16,r4
 800afd4:	003f1b06 	br	800ac44 <__adddf3+0x300>
 800afd8:	10007d26 	beq	r2,zero,800b1d0 <__adddf3+0x88c>
 800afdc:	00880034 	movhi	r2,8192
 800afe0:	1808977a 	slli	r4,r3,29
 800afe4:	10bfffc4 	addi	r2,r2,-1
 800afe8:	3084703a 	and	r2,r6,r2
 800afec:	1104b03a 	or	r2,r2,r4
 800aff0:	1812d0fa 	srli	r9,r3,3
 800aff4:	3823883a 	mov	r17,r7
 800aff8:	003f1406 	br	800ac4c <__adddf3+0x308>
 800affc:	180a977a 	slli	r5,r3,29
 800b000:	01080034 	movhi	r4,8192
 800b004:	213fffc4 	addi	r4,r4,-1
 800b008:	3104703a 	and	r2,r6,r4
 800b00c:	2884b03a 	or	r2,r5,r2
 800b010:	1812d0fa 	srli	r9,r3,3
 800b014:	3823883a 	mov	r17,r7
 800b018:	003f4106 	br	800ad20 <__adddf3+0x3dc>
 800b01c:	62e7c83a 	sub	r19,r12,r11
 800b020:	48d3c83a 	sub	r9,r9,r3
 800b024:	64c9803a 	cmpltu	r4,r12,r19
 800b028:	4909c83a 	sub	r4,r9,r4
 800b02c:	04000044 	movi	r16,1
 800b030:	003e7506 	br	800aa08 <__adddf3+0xc4>
 800b034:	4b12b03a 	or	r9,r9,r12
 800b038:	4826c03a 	cmpne	r19,r9,zero
 800b03c:	003f9b06 	br	800aeac <__adddf3+0x568>
 800b040:	4826977a 	slli	r19,r9,29
 800b044:	00c80034 	movhi	r3,8192
 800b048:	18ffffc4 	addi	r3,r3,-1
 800b04c:	20c4703a 	and	r2,r4,r3
 800b050:	9884b03a 	or	r2,r19,r2
 800b054:	4812d0fa 	srli	r9,r9,3
 800b058:	003f3106 	br	800ad20 <__adddf3+0x3dc>
 800b05c:	1101ffe0 	cmpeqi	r4,r2,2047
 800b060:	203f091e 	bne	r4,zero,800ac88 <__adddf3+0x344>
 800b064:	62d7883a 	add	r11,r12,r11
 800b068:	5b09803a 	cmpltu	r4,r11,r12
 800b06c:	48d3883a 	add	r9,r9,r3
 800b070:	490b883a 	add	r5,r9,r4
 800b074:	282697fa 	slli	r19,r5,31
 800b078:	5816d07a 	srli	r11,r11,1
 800b07c:	2808d07a 	srli	r4,r5,1
 800b080:	1021883a 	mov	r16,r2
 800b084:	9ae6b03a 	or	r19,r19,r11
 800b088:	003ee806 	br	800ac2c <__adddf3+0x2e8>
 800b08c:	5b27c83a 	sub	r19,r11,r12
 800b090:	1a53c83a 	sub	r9,r3,r9
 800b094:	5cc9803a 	cmpltu	r4,r11,r19
 800b098:	4925c83a 	sub	r18,r9,r4
 800b09c:	3823883a 	mov	r17,r7
 800b0a0:	003e5e06 	br	800aa1c <__adddf3+0xd8>
 800b0a4:	28002d1e 	bne	r5,zero,800b15c <__adddf3+0x818>
 800b0a8:	103fd41e 	bne	r2,zero,800affc <__adddf3+0x6b8>
 800b0ac:	00bfffc4 	movi	r2,-1
 800b0b0:	0023883a 	mov	r17,zero
 800b0b4:	4013883a 	mov	r9,r8
 800b0b8:	003f1b06 	br	800ad28 <__adddf3+0x3e4>
 800b0bc:	00880034 	movhi	r2,8192
 800b0c0:	1808977a 	slli	r4,r3,29
 800b0c4:	10bfffc4 	addi	r2,r2,-1
 800b0c8:	3084703a 	and	r2,r6,r2
 800b0cc:	1104b03a 	or	r2,r2,r4
 800b0d0:	1812d0fa 	srli	r9,r3,3
 800b0d4:	003f1206 	br	800ad20 <__adddf3+0x3dc>
 800b0d8:	62e7c83a 	sub	r19,r12,r11
 800b0dc:	48cbc83a 	sub	r5,r9,r3
 800b0e0:	64c9803a 	cmpltu	r4,r12,r19
 800b0e4:	2909c83a 	sub	r4,r5,r4
 800b0e8:	2080202c 	andhi	r2,r4,128
 800b0ec:	10003626 	beq	r2,zero,800b1c8 <__adddf3+0x884>
 800b0f0:	5b27c83a 	sub	r19,r11,r12
 800b0f4:	1a53c83a 	sub	r9,r3,r9
 800b0f8:	5cc9803a 	cmpltu	r4,r11,r19
 800b0fc:	4909c83a 	sub	r4,r9,r4
 800b100:	3823883a 	mov	r17,r7
 800b104:	003e5e06 	br	800aa80 <__adddf3+0x13c>
 800b108:	4b12b03a 	or	r9,r9,r12
 800b10c:	4826c03a 	cmpne	r19,r9,zero
 800b110:	003f5006 	br	800ae54 <__adddf3+0x510>
 800b114:	4806977a 	slli	r3,r9,29
 800b118:	00880034 	movhi	r2,8192
 800b11c:	10bfffc4 	addi	r2,r2,-1
 800b120:	2084703a 	and	r2,r4,r2
 800b124:	10c4b03a 	or	r2,r2,r3
 800b128:	4812d0fa 	srli	r9,r9,3
 800b12c:	003efc06 	br	800ad20 <__adddf3+0x3dc>
 800b130:	217ff804 	addi	r5,r4,-32
 800b134:	21800820 	cmpeqi	r6,r4,32
 800b138:	494ad83a 	srl	r5,r9,r5
 800b13c:	3000041e 	bne	r6,zero,800b150 <__adddf3+0x80c>
 800b140:	01801004 	movi	r6,64
 800b144:	3109c83a 	sub	r4,r6,r4
 800b148:	4912983a 	sll	r9,r9,r4
 800b14c:	6258b03a 	or	r12,r12,r9
 800b150:	6026c03a 	cmpne	r19,r12,zero
 800b154:	9966b03a 	or	r19,r19,r5
 800b158:	003f5406 	br	800aeac <__adddf3+0x568>
 800b15c:	480a977a 	slli	r5,r9,29
 800b160:	4812d0fa 	srli	r9,r9,3
 800b164:	10003626 	beq	r2,zero,800b240 <__adddf3+0x8fc>
 800b168:	02080034 	movhi	r8,8192
 800b16c:	423fffc4 	addi	r8,r8,-1
 800b170:	2204703a 	and	r2,r4,r8
 800b174:	4900022c 	andhi	r4,r9,8
 800b178:	114ab03a 	or	r5,r2,r5
 800b17c:	20000826 	beq	r4,zero,800b1a0 <__adddf3+0x85c>
 800b180:	1808d0fa 	srli	r4,r3,3
 800b184:	2080022c 	andhi	r2,r4,8
 800b188:	1000051e 	bne	r2,zero,800b1a0 <__adddf3+0x85c>
 800b18c:	1806977a 	slli	r3,r3,29
 800b190:	3204703a 	and	r2,r6,r8
 800b194:	3823883a 	mov	r17,r7
 800b198:	10cab03a 	or	r5,r2,r3
 800b19c:	2013883a 	mov	r9,r4
 800b1a0:	480890fa 	slli	r4,r9,3
 800b1a4:	2804d77a 	srli	r2,r5,29
 800b1a8:	00c80034 	movhi	r3,8192
 800b1ac:	18ffffc4 	addi	r3,r3,-1
 800b1b0:	1108b03a 	or	r4,r2,r4
 800b1b4:	200c977a 	slli	r6,r4,29
 800b1b8:	28c4703a 	and	r2,r5,r3
 800b1bc:	2012d0fa 	srli	r9,r4,3
 800b1c0:	3084b03a 	or	r2,r6,r2
 800b1c4:	003ed606 	br	800ad20 <__adddf3+0x3dc>
 800b1c8:	9904b03a 	or	r2,r19,r4
 800b1cc:	103e971e 	bne	r2,zero,800ac2c <__adddf3+0x2e8>
 800b1d0:	0013883a 	mov	r9,zero
 800b1d4:	0023883a 	mov	r17,zero
 800b1d8:	003e9c06 	br	800ac4c <__adddf3+0x308>
 800b1dc:	5b27c83a 	sub	r19,r11,r12
 800b1e0:	1a53c83a 	sub	r9,r3,r9
 800b1e4:	5cc9803a 	cmpltu	r4,r11,r19
 800b1e8:	4909c83a 	sub	r4,r9,r4
 800b1ec:	3823883a 	mov	r17,r7
 800b1f0:	04000044 	movi	r16,1
 800b1f4:	003e0406 	br	800aa08 <__adddf3+0xc4>
 800b1f8:	180a977a 	slli	r5,r3,29
 800b1fc:	01080034 	movhi	r4,8192
 800b200:	213fffc4 	addi	r4,r4,-1
 800b204:	3104703a 	and	r2,r6,r4
 800b208:	2884b03a 	or	r2,r5,r2
 800b20c:	1812d0fa 	srli	r9,r3,3
 800b210:	003e8e06 	br	800ac4c <__adddf3+0x308>
 800b214:	62e7883a 	add	r19,r12,r11
 800b218:	48d3883a 	add	r9,r9,r3
 800b21c:	9b09803a 	cmpltu	r4,r19,r12
 800b220:	4909883a 	add	r4,r9,r4
 800b224:	2080202c 	andhi	r2,r4,128
 800b228:	103e8026 	beq	r2,zero,800ac2c <__adddf3+0x2e8>
 800b22c:	00bfe034 	movhi	r2,65408
 800b230:	10bfffc4 	addi	r2,r2,-1
 800b234:	2088703a 	and	r4,r4,r2
 800b238:	04000044 	movi	r16,1
 800b23c:	003e7b06 	br	800ac2c <__adddf3+0x2e8>
 800b240:	00880034 	movhi	r2,8192
 800b244:	10bfffc4 	addi	r2,r2,-1
 800b248:	2084703a 	and	r2,r4,r2
 800b24c:	1144b03a 	or	r2,r2,r5
 800b250:	003eb306 	br	800ad20 <__adddf3+0x3dc>
 800b254:	180e977a 	slli	r7,r3,29
 800b258:	01480034 	movhi	r5,8192
 800b25c:	297fffc4 	addi	r5,r5,-1
 800b260:	3144703a 	and	r2,r6,r5
 800b264:	3884b03a 	or	r2,r7,r2
 800b268:	1812d0fa 	srli	r9,r3,3
 800b26c:	2021883a 	mov	r16,r4
 800b270:	003e7406 	br	800ac44 <__adddf3+0x300>
 800b274:	00880034 	movhi	r2,8192
 800b278:	1808977a 	slli	r4,r3,29
 800b27c:	10bfffc4 	addi	r2,r2,-1
 800b280:	3084703a 	and	r2,r6,r2
 800b284:	1104b03a 	or	r2,r2,r4
 800b288:	1812d0fa 	srli	r9,r3,3
 800b28c:	3823883a 	mov	r17,r7
 800b290:	003ea306 	br	800ad20 <__adddf3+0x3dc>
 800b294:	217ff804 	addi	r5,r4,-32
 800b298:	21800820 	cmpeqi	r6,r4,32
 800b29c:	494ad83a 	srl	r5,r9,r5
 800b2a0:	3000041e 	bne	r6,zero,800b2b4 <__adddf3+0x970>
 800b2a4:	01801004 	movi	r6,64
 800b2a8:	3109c83a 	sub	r4,r6,r4
 800b2ac:	4912983a 	sll	r9,r9,r4
 800b2b0:	6258b03a 	or	r12,r12,r9
 800b2b4:	6026c03a 	cmpne	r19,r12,zero
 800b2b8:	9966b03a 	or	r19,r19,r5
 800b2bc:	003ee506 	br	800ae54 <__adddf3+0x510>
 800b2c0:	62e7883a 	add	r19,r12,r11
 800b2c4:	48d3883a 	add	r9,r9,r3
 800b2c8:	9ac9803a 	cmpltu	r4,r19,r11
 800b2cc:	4909883a 	add	r4,r9,r4
 800b2d0:	003e5306 	br	800ac20 <__adddf3+0x2dc>
 800b2d4:	0005883a 	mov	r2,zero
 800b2d8:	0401ffc4 	movi	r16,2047
 800b2dc:	0009883a 	mov	r4,zero
 800b2e0:	003dfe06 	br	800aadc <__adddf3+0x198>

0800b2e4 <__divdf3>:
 800b2e4:	deffef04 	addi	sp,sp,-68
 800b2e8:	2804d53a 	srli	r2,r5,20
 800b2ec:	dd000b15 	stw	r20,44(sp)
 800b2f0:	2828d7fa 	srli	r20,r5,31
 800b2f4:	dc400815 	stw	r17,32(sp)
 800b2f8:	04400434 	movhi	r17,16
 800b2fc:	dd800d15 	stw	r22,52(sp)
 800b300:	dcc00a15 	stw	r19,40(sp)
 800b304:	8c7fffc4 	addi	r17,r17,-1
 800b308:	dfc01015 	stw	ra,64(sp)
 800b30c:	df000f15 	stw	fp,60(sp)
 800b310:	ddc00e15 	stw	r23,56(sp)
 800b314:	dd400c15 	stw	r21,48(sp)
 800b318:	dc800915 	stw	r18,36(sp)
 800b31c:	dc000715 	stw	r16,28(sp)
 800b320:	1081ffcc 	andi	r2,r2,2047
 800b324:	2027883a 	mov	r19,r4
 800b328:	2c62703a 	and	r17,r5,r17
 800b32c:	a02d883a 	mov	r22,r20
 800b330:	10008726 	beq	r2,zero,800b550 <__divdf3+0x26c>
 800b334:	10c1ffe0 	cmpeqi	r3,r2,2047
 800b338:	18009d1e 	bne	r3,zero,800b5b0 <__divdf3+0x2cc>
 800b33c:	880a90fa 	slli	r5,r17,3
 800b340:	2008d77a 	srli	r4,r4,29
 800b344:	982690fa 	slli	r19,r19,3
 800b348:	14bf0044 	addi	r18,r2,-1023
 800b34c:	2148b03a 	or	r4,r4,r5
 800b350:	24002034 	orhi	r16,r4,128
 800b354:	0023883a 	mov	r17,zero
 800b358:	002f883a 	mov	r23,zero
 800b35c:	3806d53a 	srli	r3,r7,20
 800b360:	01000434 	movhi	r4,16
 800b364:	213fffc4 	addi	r4,r4,-1
 800b368:	18c1ffcc 	andi	r3,r3,2047
 800b36c:	392a703a 	and	r21,r7,r4
 800b370:	3838d7fa 	srli	fp,r7,31
 800b374:	18006326 	beq	r3,zero,800b504 <__divdf3+0x220>
 800b378:	1881ffe0 	cmpeqi	r2,r3,2047
 800b37c:	1000201e 	bne	r2,zero,800b400 <__divdf3+0x11c>
 800b380:	a80890fa 	slli	r4,r21,3
 800b384:	300ed77a 	srli	r7,r6,29
 800b388:	300a90fa 	slli	r5,r6,3
 800b38c:	18ff0044 	addi	r3,r3,-1023
 800b390:	3908b03a 	or	r4,r7,r4
 800b394:	90e5c83a 	sub	r18,r18,r3
 800b398:	25402034 	orhi	r21,r4,128
 800b39c:	0007883a 	mov	r3,zero
 800b3a0:	88800428 	cmpgeui	r2,r17,16
 800b3a4:	a70cf03a 	xor	r6,r20,fp
 800b3a8:	1000ab1e 	bne	r2,zero,800b658 <__divdf3+0x374>
 800b3ac:	882290ba 	slli	r17,r17,2
 800b3b0:	00820074 	movhi	r2,2049
 800b3b4:	8885883a 	add	r2,r17,r2
 800b3b8:	10acf017 	ldw	r2,-19520(r2)
 800b3bc:	1000683a 	jmp	r2
 800b3c0:	0800b658 	cmpnei	zero,at,729
 800b3c4:	0800b4f4 	orhi	zero,at,723
 800b3c8:	0800b498 	cmpnei	zero,at,722
 800b3cc:	0800b41c 	xori	zero,at,720
 800b3d0:	0800b498 	cmpnei	zero,at,722
 800b3d4:	0800b614 	ori	zero,at,728
 800b3d8:	0800b498 	cmpnei	zero,at,722
 800b3dc:	0800b41c 	xori	zero,at,720
 800b3e0:	0800b4f4 	orhi	zero,at,723
 800b3e4:	0800b4f4 	orhi	zero,at,723
 800b3e8:	0800b614 	ori	zero,at,728
 800b3ec:	0800b41c 	xori	zero,at,720
 800b3f0:	0800b42c 	andhi	zero,at,720
 800b3f4:	0800b42c 	andhi	zero,at,720
 800b3f8:	0800b42c 	andhi	zero,at,720
 800b3fc:	0800b62c 	andhi	zero,at,728
 800b400:	a98ab03a 	or	r5,r21,r6
 800b404:	94be0044 	addi	r18,r18,-2047
 800b408:	28007e1e 	bne	r5,zero,800b604 <__divdf3+0x320>
 800b40c:	8c400094 	ori	r17,r17,2
 800b410:	002b883a 	mov	r21,zero
 800b414:	00c00084 	movi	r3,2
 800b418:	003fe106 	br	800b3a0 <__divdf3+0xbc>
 800b41c:	e02d883a 	mov	r22,fp
 800b420:	a821883a 	mov	r16,r21
 800b424:	2827883a 	mov	r19,r5
 800b428:	182f883a 	mov	r23,r3
 800b42c:	b88000a0 	cmpeqi	r2,r23,2
 800b430:	1001ab1e 	bne	r2,zero,800bae0 <__divdf3+0x7fc>
 800b434:	b88000e0 	cmpeqi	r2,r23,3
 800b438:	1001f91e 	bne	r2,zero,800bc20 <__divdf3+0x93c>
 800b43c:	b8800060 	cmpeqi	r2,r23,1
 800b440:	1000141e 	bne	r2,zero,800b494 <__divdf3+0x1b0>
 800b444:	9500ffc4 	addi	r20,r18,1023
 800b448:	b00d883a 	mov	r6,r22
 800b44c:	0501870e 	bge	zero,r20,800ba6c <__divdf3+0x788>
 800b450:	988001cc 	andi	r2,r19,7
 800b454:	1001c11e 	bne	r2,zero,800bb5c <__divdf3+0x878>
 800b458:	9826d0fa 	srli	r19,r19,3
 800b45c:	8080402c 	andhi	r2,r16,256
 800b460:	10000426 	beq	r2,zero,800b474 <__divdf3+0x190>
 800b464:	00bfc034 	movhi	r2,65280
 800b468:	10bfffc4 	addi	r2,r2,-1
 800b46c:	80a0703a 	and	r16,r16,r2
 800b470:	95010004 	addi	r20,r18,1024
 800b474:	a081ffc8 	cmpgei	r2,r20,2047
 800b478:	10001e1e 	bne	r2,zero,800b4f4 <__divdf3+0x210>
 800b47c:	8006977a 	slli	r3,r16,29
 800b480:	8008927a 	slli	r4,r16,9
 800b484:	a081ffcc 	andi	r2,r20,2047
 800b488:	1ce6b03a 	or	r19,r3,r19
 800b48c:	2008d33a 	srli	r4,r4,12
 800b490:	00000406 	br	800b4a4 <__divdf3+0x1c0>
 800b494:	b00d883a 	mov	r6,r22
 800b498:	0005883a 	mov	r2,zero
 800b49c:	0009883a 	mov	r4,zero
 800b4a0:	0027883a 	mov	r19,zero
 800b4a4:	1004953a 	slli	r2,r2,20
 800b4a8:	00c00434 	movhi	r3,16
 800b4ac:	300c97fa 	slli	r6,r6,31
 800b4b0:	18ffffc4 	addi	r3,r3,-1
 800b4b4:	20c6703a 	and	r3,r4,r3
 800b4b8:	1886b03a 	or	r3,r3,r2
 800b4bc:	1986b03a 	or	r3,r3,r6
 800b4c0:	9805883a 	mov	r2,r19
 800b4c4:	dfc01017 	ldw	ra,64(sp)
 800b4c8:	df000f17 	ldw	fp,60(sp)
 800b4cc:	ddc00e17 	ldw	r23,56(sp)
 800b4d0:	dd800d17 	ldw	r22,52(sp)
 800b4d4:	dd400c17 	ldw	r21,48(sp)
 800b4d8:	dd000b17 	ldw	r20,44(sp)
 800b4dc:	dcc00a17 	ldw	r19,40(sp)
 800b4e0:	dc800917 	ldw	r18,36(sp)
 800b4e4:	dc400817 	ldw	r17,32(sp)
 800b4e8:	dc000717 	ldw	r16,28(sp)
 800b4ec:	dec01104 	addi	sp,sp,68
 800b4f0:	f800283a 	ret
 800b4f4:	0081ffc4 	movi	r2,2047
 800b4f8:	0009883a 	mov	r4,zero
 800b4fc:	0027883a 	mov	r19,zero
 800b500:	003fe806 	br	800b4a4 <__divdf3+0x1c0>
 800b504:	a98ab03a 	or	r5,r21,r6
 800b508:	28003a26 	beq	r5,zero,800b5f4 <__divdf3+0x310>
 800b50c:	a8014926 	beq	r21,zero,800ba34 <__divdf3+0x750>
 800b510:	a809883a 	mov	r4,r21
 800b514:	d9800015 	stw	r6,0(sp)
 800b518:	800d22c0 	call	800d22c <__clzsi2>
 800b51c:	d9800017 	ldw	r6,0(sp)
 800b520:	11fffd44 	addi	r7,r2,-11
 800b524:	00c00744 	movi	r3,29
 800b528:	117ffe04 	addi	r5,r2,-8
 800b52c:	19c7c83a 	sub	r3,r3,r7
 800b530:	a948983a 	sll	r4,r21,r5
 800b534:	30c6d83a 	srl	r3,r6,r3
 800b538:	314a983a 	sll	r5,r6,r5
 800b53c:	192ab03a 	or	r21,r3,r4
 800b540:	1485883a 	add	r2,r2,r18
 800b544:	1480fcc4 	addi	r18,r2,1011
 800b548:	0007883a 	mov	r3,zero
 800b54c:	003f9406 	br	800b3a0 <__divdf3+0xbc>
 800b550:	2460b03a 	or	r16,r4,r17
 800b554:	202b883a 	mov	r21,r4
 800b558:	80002126 	beq	r16,zero,800b5e0 <__divdf3+0x2fc>
 800b55c:	d9c00115 	stw	r7,4(sp)
 800b560:	d9800015 	stw	r6,0(sp)
 800b564:	88012826 	beq	r17,zero,800ba08 <__divdf3+0x724>
 800b568:	8809883a 	mov	r4,r17
 800b56c:	800d22c0 	call	800d22c <__clzsi2>
 800b570:	d9800017 	ldw	r6,0(sp)
 800b574:	d9c00117 	ldw	r7,4(sp)
 800b578:	1025883a 	mov	r18,r2
 800b57c:	143ffd44 	addi	r16,r2,-11
 800b580:	01000744 	movi	r4,29
 800b584:	94fffe04 	addi	r19,r18,-8
 800b588:	2409c83a 	sub	r4,r4,r16
 800b58c:	8cca983a 	sll	r5,r17,r19
 800b590:	a908d83a 	srl	r4,r21,r4
 800b594:	ace6983a 	sll	r19,r21,r19
 800b598:	2160b03a 	or	r16,r4,r5
 800b59c:	00bf0344 	movi	r2,-1011
 800b5a0:	14a5c83a 	sub	r18,r2,r18
 800b5a4:	0023883a 	mov	r17,zero
 800b5a8:	002f883a 	mov	r23,zero
 800b5ac:	003f6b06 	br	800b35c <__divdf3+0x78>
 800b5b0:	2460b03a 	or	r16,r4,r17
 800b5b4:	8000051e 	bne	r16,zero,800b5cc <__divdf3+0x2e8>
 800b5b8:	0027883a 	mov	r19,zero
 800b5bc:	04400204 	movi	r17,8
 800b5c0:	0481ffc4 	movi	r18,2047
 800b5c4:	05c00084 	movi	r23,2
 800b5c8:	003f6406 	br	800b35c <__divdf3+0x78>
 800b5cc:	8821883a 	mov	r16,r17
 800b5d0:	0481ffc4 	movi	r18,2047
 800b5d4:	04400304 	movi	r17,12
 800b5d8:	05c000c4 	movi	r23,3
 800b5dc:	003f5f06 	br	800b35c <__divdf3+0x78>
 800b5e0:	0027883a 	mov	r19,zero
 800b5e4:	04400104 	movi	r17,4
 800b5e8:	0025883a 	mov	r18,zero
 800b5ec:	05c00044 	movi	r23,1
 800b5f0:	003f5a06 	br	800b35c <__divdf3+0x78>
 800b5f4:	8c400054 	ori	r17,r17,1
 800b5f8:	002b883a 	mov	r21,zero
 800b5fc:	00c00044 	movi	r3,1
 800b600:	003f6706 	br	800b3a0 <__divdf3+0xbc>
 800b604:	8c4000d4 	ori	r17,r17,3
 800b608:	300b883a 	mov	r5,r6
 800b60c:	00c000c4 	movi	r3,3
 800b610:	003f6306 	br	800b3a0 <__divdf3+0xbc>
 800b614:	01000434 	movhi	r4,16
 800b618:	000d883a 	mov	r6,zero
 800b61c:	213fffc4 	addi	r4,r4,-1
 800b620:	04ffffc4 	movi	r19,-1
 800b624:	0081ffc4 	movi	r2,2047
 800b628:	003f9e06 	br	800b4a4 <__divdf3+0x1c0>
 800b62c:	8080022c 	andhi	r2,r16,8
 800b630:	1000d426 	beq	r2,zero,800b984 <__divdf3+0x6a0>
 800b634:	a880022c 	andhi	r2,r21,8
 800b638:	1000d21e 	bne	r2,zero,800b984 <__divdf3+0x6a0>
 800b63c:	00800434 	movhi	r2,16
 800b640:	a9000234 	orhi	r4,r21,8
 800b644:	10bfffc4 	addi	r2,r2,-1
 800b648:	2088703a 	and	r4,r4,r2
 800b64c:	e00d883a 	mov	r6,fp
 800b650:	2827883a 	mov	r19,r5
 800b654:	003ff306 	br	800b624 <__divdf3+0x340>
 800b658:	ac00e536 	bltu	r21,r16,800b9f0 <__divdf3+0x70c>
 800b65c:	ac00e326 	beq	r21,r16,800b9ec <__divdf3+0x708>
 800b660:	94bfffc4 	addi	r18,r18,-1
 800b664:	0029883a 	mov	r20,zero
 800b668:	280ed63a 	srli	r7,r5,24
 800b66c:	a82a923a 	slli	r21,r21,8
 800b670:	2804923a 	slli	r2,r5,8
 800b674:	8009883a 	mov	r4,r16
 800b678:	3d62b03a 	or	r17,r7,r21
 800b67c:	882ad43a 	srli	r21,r17,16
 800b680:	d9800115 	stw	r6,4(sp)
 800b684:	d8800015 	stw	r2,0(sp)
 800b688:	a80b883a 	mov	r5,r21
 800b68c:	800a8840 	call	800a884 <__udivsi3>
 800b690:	8f3fffcc 	andi	fp,r17,65535
 800b694:	100b883a 	mov	r5,r2
 800b698:	e009883a 	mov	r4,fp
 800b69c:	102f883a 	mov	r23,r2
 800b6a0:	80008b80 	call	80008b8 <__mulsi3>
 800b6a4:	a80b883a 	mov	r5,r21
 800b6a8:	8009883a 	mov	r4,r16
 800b6ac:	102d883a 	mov	r22,r2
 800b6b0:	800a8e80 	call	800a8e8 <__umodsi3>
 800b6b4:	1006943a 	slli	r3,r2,16
 800b6b8:	9804d43a 	srli	r2,r19,16
 800b6bc:	d9800117 	ldw	r6,4(sp)
 800b6c0:	10c4b03a 	or	r2,r2,r3
 800b6c4:	1580042e 	bgeu	r2,r22,800b6d8 <__divdf3+0x3f4>
 800b6c8:	1445883a 	add	r2,r2,r17
 800b6cc:	b8ffffc4 	addi	r3,r23,-1
 800b6d0:	1441102e 	bgeu	r2,r17,800bb14 <__divdf3+0x830>
 800b6d4:	182f883a 	mov	r23,r3
 800b6d8:	15adc83a 	sub	r22,r2,r22
 800b6dc:	a80b883a 	mov	r5,r21
 800b6e0:	b009883a 	mov	r4,r22
 800b6e4:	d9800215 	stw	r6,8(sp)
 800b6e8:	800a8840 	call	800a884 <__udivsi3>
 800b6ec:	100b883a 	mov	r5,r2
 800b6f0:	e009883a 	mov	r4,fp
 800b6f4:	1021883a 	mov	r16,r2
 800b6f8:	80008b80 	call	80008b8 <__mulsi3>
 800b6fc:	a80b883a 	mov	r5,r21
 800b700:	b009883a 	mov	r4,r22
 800b704:	d8800115 	stw	r2,4(sp)
 800b708:	800a8e80 	call	800a8e8 <__umodsi3>
 800b70c:	1004943a 	slli	r2,r2,16
 800b710:	da000117 	ldw	r8,4(sp)
 800b714:	9cffffcc 	andi	r19,r19,65535
 800b718:	9884b03a 	or	r2,r19,r2
 800b71c:	d9800217 	ldw	r6,8(sp)
 800b720:	1200042e 	bgeu	r2,r8,800b734 <__divdf3+0x450>
 800b724:	1445883a 	add	r2,r2,r17
 800b728:	80ffffc4 	addi	r3,r16,-1
 800b72c:	1440f52e 	bgeu	r2,r17,800bb04 <__divdf3+0x820>
 800b730:	1821883a 	mov	r16,r3
 800b734:	b808943a 	slli	r4,r23,16
 800b738:	d8c00017 	ldw	r3,0(sp)
 800b73c:	1211c83a 	sub	r8,r2,r8
 800b740:	2420b03a 	or	r16,r4,r16
 800b744:	182cd43a 	srli	r22,r3,16
 800b748:	1dffffcc 	andi	r23,r3,65535
 800b74c:	8026d43a 	srli	r19,r16,16
 800b750:	80ffffcc 	andi	r3,r16,65535
 800b754:	180b883a 	mov	r5,r3
 800b758:	b809883a 	mov	r4,r23
 800b75c:	d9800615 	stw	r6,24(sp)
 800b760:	da000415 	stw	r8,16(sp)
 800b764:	d8c00515 	stw	r3,20(sp)
 800b768:	80008b80 	call	80008b8 <__mulsi3>
 800b76c:	b80b883a 	mov	r5,r23
 800b770:	9809883a 	mov	r4,r19
 800b774:	d8800315 	stw	r2,12(sp)
 800b778:	80008b80 	call	80008b8 <__mulsi3>
 800b77c:	b00b883a 	mov	r5,r22
 800b780:	9809883a 	mov	r4,r19
 800b784:	d8800215 	stw	r2,8(sp)
 800b788:	80008b80 	call	80008b8 <__mulsi3>
 800b78c:	d8c00517 	ldw	r3,20(sp)
 800b790:	b009883a 	mov	r4,r22
 800b794:	d8800115 	stw	r2,4(sp)
 800b798:	180b883a 	mov	r5,r3
 800b79c:	80008b80 	call	80008b8 <__mulsi3>
 800b7a0:	da400317 	ldw	r9,12(sp)
 800b7a4:	dac00217 	ldw	r11,8(sp)
 800b7a8:	da800117 	ldw	r10,4(sp)
 800b7ac:	4806d43a 	srli	r3,r9,16
 800b7b0:	12c5883a 	add	r2,r2,r11
 800b7b4:	da000417 	ldw	r8,16(sp)
 800b7b8:	1887883a 	add	r3,r3,r2
 800b7bc:	d9800617 	ldw	r6,24(sp)
 800b7c0:	1ac0022e 	bgeu	r3,r11,800b7cc <__divdf3+0x4e8>
 800b7c4:	00800074 	movhi	r2,1
 800b7c8:	5095883a 	add	r10,r10,r2
 800b7cc:	1826d43a 	srli	r19,r3,16
 800b7d0:	1806943a 	slli	r3,r3,16
 800b7d4:	4a7fffcc 	andi	r9,r9,65535
 800b7d8:	9aa7883a 	add	r19,r19,r10
 800b7dc:	1a47883a 	add	r3,r3,r9
 800b7e0:	44c07736 	bltu	r8,r19,800b9c0 <__divdf3+0x6dc>
 800b7e4:	44c07526 	beq	r8,r19,800b9bc <__divdf3+0x6d8>
 800b7e8:	a0c7c83a 	sub	r3,r20,r3
 800b7ec:	44c5c83a 	sub	r2,r8,r19
 800b7f0:	a0e7803a 	cmpltu	r19,r20,r3
 800b7f4:	d8c00115 	stw	r3,4(sp)
 800b7f8:	14e7c83a 	sub	r19,r2,r19
 800b7fc:	9500ffc4 	addi	r20,r18,1023
 800b800:	8cc0cd26 	beq	r17,r19,800bb38 <__divdf3+0x854>
 800b804:	a80b883a 	mov	r5,r21
 800b808:	9809883a 	mov	r4,r19
 800b80c:	d9800415 	stw	r6,16(sp)
 800b810:	800a8840 	call	800a884 <__udivsi3>
 800b814:	100b883a 	mov	r5,r2
 800b818:	e009883a 	mov	r4,fp
 800b81c:	d8800315 	stw	r2,12(sp)
 800b820:	80008b80 	call	80008b8 <__mulsi3>
 800b824:	9809883a 	mov	r4,r19
 800b828:	a80b883a 	mov	r5,r21
 800b82c:	d8800215 	stw	r2,8(sp)
 800b830:	800a8e80 	call	800a8e8 <__umodsi3>
 800b834:	d8c00117 	ldw	r3,4(sp)
 800b838:	1008943a 	slli	r4,r2,16
 800b83c:	da400217 	ldw	r9,8(sp)
 800b840:	1804d43a 	srli	r2,r3,16
 800b844:	da000317 	ldw	r8,12(sp)
 800b848:	d9800417 	ldw	r6,16(sp)
 800b84c:	1104b03a 	or	r2,r2,r4
 800b850:	1240062e 	bgeu	r2,r9,800b86c <__divdf3+0x588>
 800b854:	1445883a 	add	r2,r2,r17
 800b858:	413fffc4 	addi	r4,r8,-1
 800b85c:	1440bd36 	bltu	r2,r17,800bb54 <__divdf3+0x870>
 800b860:	1240bc2e 	bgeu	r2,r9,800bb54 <__divdf3+0x870>
 800b864:	423fff84 	addi	r8,r8,-2
 800b868:	1445883a 	add	r2,r2,r17
 800b86c:	1267c83a 	sub	r19,r2,r9
 800b870:	a80b883a 	mov	r5,r21
 800b874:	9809883a 	mov	r4,r19
 800b878:	d8c00415 	stw	r3,16(sp)
 800b87c:	d9800315 	stw	r6,12(sp)
 800b880:	da000215 	stw	r8,8(sp)
 800b884:	800a8840 	call	800a884 <__udivsi3>
 800b888:	e009883a 	mov	r4,fp
 800b88c:	100b883a 	mov	r5,r2
 800b890:	d8800115 	stw	r2,4(sp)
 800b894:	80008b80 	call	80008b8 <__mulsi3>
 800b898:	a80b883a 	mov	r5,r21
 800b89c:	9809883a 	mov	r4,r19
 800b8a0:	1039883a 	mov	fp,r2
 800b8a4:	800a8e80 	call	800a8e8 <__umodsi3>
 800b8a8:	d8c00417 	ldw	r3,16(sp)
 800b8ac:	1004943a 	slli	r2,r2,16
 800b8b0:	da400117 	ldw	r9,4(sp)
 800b8b4:	18ffffcc 	andi	r3,r3,65535
 800b8b8:	1886b03a 	or	r3,r3,r2
 800b8bc:	da000217 	ldw	r8,8(sp)
 800b8c0:	d9800317 	ldw	r6,12(sp)
 800b8c4:	1f00062e 	bgeu	r3,fp,800b8e0 <__divdf3+0x5fc>
 800b8c8:	1c47883a 	add	r3,r3,r17
 800b8cc:	48bfffc4 	addi	r2,r9,-1
 800b8d0:	1c409e36 	bltu	r3,r17,800bb4c <__divdf3+0x868>
 800b8d4:	1f009d2e 	bgeu	r3,fp,800bb4c <__divdf3+0x868>
 800b8d8:	4a7fff84 	addi	r9,r9,-2
 800b8dc:	1c47883a 	add	r3,r3,r17
 800b8e0:	4010943a 	slli	r8,r8,16
 800b8e4:	1f2bc83a 	sub	r21,r3,fp
 800b8e8:	b80b883a 	mov	r5,r23
 800b8ec:	4266b03a 	or	r19,r8,r9
 800b8f0:	98ffffcc 	andi	r3,r19,65535
 800b8f4:	9838d43a 	srli	fp,r19,16
 800b8f8:	1809883a 	mov	r4,r3
 800b8fc:	d9800415 	stw	r6,16(sp)
 800b900:	d8c00315 	stw	r3,12(sp)
 800b904:	80008b80 	call	80008b8 <__mulsi3>
 800b908:	b80b883a 	mov	r5,r23
 800b90c:	e009883a 	mov	r4,fp
 800b910:	d8800215 	stw	r2,8(sp)
 800b914:	80008b80 	call	80008b8 <__mulsi3>
 800b918:	e00b883a 	mov	r5,fp
 800b91c:	b009883a 	mov	r4,r22
 800b920:	d8800115 	stw	r2,4(sp)
 800b924:	80008b80 	call	80008b8 <__mulsi3>
 800b928:	d8c00317 	ldw	r3,12(sp)
 800b92c:	b009883a 	mov	r4,r22
 800b930:	102f883a 	mov	r23,r2
 800b934:	180b883a 	mov	r5,r3
 800b938:	80008b80 	call	80008b8 <__mulsi3>
 800b93c:	da000217 	ldw	r8,8(sp)
 800b940:	da400117 	ldw	r9,4(sp)
 800b944:	d9800417 	ldw	r6,16(sp)
 800b948:	4006d43a 	srli	r3,r8,16
 800b94c:	1245883a 	add	r2,r2,r9
 800b950:	1885883a 	add	r2,r3,r2
 800b954:	1240022e 	bgeu	r2,r9,800b960 <__divdf3+0x67c>
 800b958:	00c00074 	movhi	r3,1
 800b95c:	b8ef883a 	add	r23,r23,r3
 800b960:	1008d43a 	srli	r4,r2,16
 800b964:	1004943a 	slli	r2,r2,16
 800b968:	423fffcc 	andi	r8,r8,65535
 800b96c:	25c9883a 	add	r4,r4,r23
 800b970:	1205883a 	add	r2,r2,r8
 800b974:	a9000a36 	bltu	r21,r4,800b9a0 <__divdf3+0x6bc>
 800b978:	a9000826 	beq	r21,r4,800b99c <__divdf3+0x6b8>
 800b97c:	9cc00054 	ori	r19,r19,1
 800b980:	003eb206 	br	800b44c <__divdf3+0x168>
 800b984:	00800434 	movhi	r2,16
 800b988:	81000234 	orhi	r4,r16,8
 800b98c:	10bfffc4 	addi	r2,r2,-1
 800b990:	2088703a 	and	r4,r4,r2
 800b994:	a00d883a 	mov	r6,r20
 800b998:	003f2206 	br	800b624 <__divdf3+0x340>
 800b99c:	103eab26 	beq	r2,zero,800b44c <__divdf3+0x168>
 800b9a0:	8d47883a 	add	r3,r17,r21
 800b9a4:	997fffc4 	addi	r5,r19,-1
 800b9a8:	1c405e36 	bltu	r3,r17,800bb24 <__divdf3+0x840>
 800b9ac:	19007b36 	bltu	r3,r4,800bb9c <__divdf3+0x8b8>
 800b9b0:	1900a126 	beq	r3,r4,800bc38 <__divdf3+0x954>
 800b9b4:	2827883a 	mov	r19,r5
 800b9b8:	003ff006 	br	800b97c <__divdf3+0x698>
 800b9bc:	a0ff8a2e 	bgeu	r20,r3,800b7e8 <__divdf3+0x504>
 800b9c0:	d8800017 	ldw	r2,0(sp)
 800b9c4:	a0a9883a 	add	r20,r20,r2
 800b9c8:	a085803a 	cmpltu	r2,r20,r2
 800b9cc:	1445883a 	add	r2,r2,r17
 800b9d0:	4091883a 	add	r8,r8,r2
 800b9d4:	80bfffc4 	addi	r2,r16,-1
 800b9d8:	8a00462e 	bgeu	r17,r8,800baf4 <__divdf3+0x810>
 800b9dc:	44c06836 	bltu	r8,r19,800bb80 <__divdf3+0x89c>
 800b9e0:	9a006626 	beq	r19,r8,800bb7c <__divdf3+0x898>
 800b9e4:	1021883a 	mov	r16,r2
 800b9e8:	003f7f06 	br	800b7e8 <__divdf3+0x504>
 800b9ec:	997f1c36 	bltu	r19,r5,800b660 <__divdf3+0x37c>
 800b9f0:	800697fa 	slli	r3,r16,31
 800b9f4:	9804d07a 	srli	r2,r19,1
 800b9f8:	982897fa 	slli	r20,r19,31
 800b9fc:	8020d07a 	srli	r16,r16,1
 800ba00:	18a6b03a 	or	r19,r3,r2
 800ba04:	003f1806 	br	800b668 <__divdf3+0x384>
 800ba08:	800d22c0 	call	800d22c <__clzsi2>
 800ba0c:	14000544 	addi	r16,r2,21
 800ba10:	81000748 	cmpgei	r4,r16,29
 800ba14:	14800804 	addi	r18,r2,32
 800ba18:	d9800017 	ldw	r6,0(sp)
 800ba1c:	d9c00117 	ldw	r7,4(sp)
 800ba20:	203ed726 	beq	r4,zero,800b580 <__divdf3+0x29c>
 800ba24:	113ffe04 	addi	r4,r2,-8
 800ba28:	9920983a 	sll	r16,r19,r4
 800ba2c:	0027883a 	mov	r19,zero
 800ba30:	003eda06 	br	800b59c <__divdf3+0x2b8>
 800ba34:	3009883a 	mov	r4,r6
 800ba38:	d9800015 	stw	r6,0(sp)
 800ba3c:	800d22c0 	call	800d22c <__clzsi2>
 800ba40:	11c00544 	addi	r7,r2,21
 800ba44:	38c00748 	cmpgei	r3,r7,29
 800ba48:	1009883a 	mov	r4,r2
 800ba4c:	d9800017 	ldw	r6,0(sp)
 800ba50:	10800804 	addi	r2,r2,32
 800ba54:	183eb326 	beq	r3,zero,800b524 <__divdf3+0x240>
 800ba58:	213ffe04 	addi	r4,r4,-8
 800ba5c:	312a983a 	sll	r21,r6,r4
 800ba60:	000b883a 	mov	r5,zero
 800ba64:	003eb606 	br	800b540 <__divdf3+0x25c>
 800ba68:	04ffffc4 	movi	r19,-1
 800ba6c:	01000044 	movi	r4,1
 800ba70:	2509c83a 	sub	r4,r4,r20
 800ba74:	20800e48 	cmpgei	r2,r4,57
 800ba78:	103e871e 	bne	r2,zero,800b498 <__divdf3+0x1b4>
 800ba7c:	20800808 	cmpgei	r2,r4,32
 800ba80:	10004e1e 	bne	r2,zero,800bbbc <__divdf3+0x8d8>
 800ba84:	90810784 	addi	r2,r18,1054
 800ba88:	8086983a 	sll	r3,r16,r2
 800ba8c:	990ad83a 	srl	r5,r19,r4
 800ba90:	9884983a 	sll	r2,r19,r2
 800ba94:	8108d83a 	srl	r4,r16,r4
 800ba98:	1966b03a 	or	r19,r3,r5
 800ba9c:	1004c03a 	cmpne	r2,r2,zero
 800baa0:	98a6b03a 	or	r19,r19,r2
 800baa4:	988001cc 	andi	r2,r19,7
 800baa8:	10000726 	beq	r2,zero,800bac8 <__divdf3+0x7e4>
 800baac:	988003cc 	andi	r2,r19,15
 800bab0:	10800120 	cmpeqi	r2,r2,4
 800bab4:	1000041e 	bne	r2,zero,800bac8 <__divdf3+0x7e4>
 800bab8:	98800104 	addi	r2,r19,4
 800babc:	14e7803a 	cmpltu	r19,r2,r19
 800bac0:	24c9883a 	add	r4,r4,r19
 800bac4:	1027883a 	mov	r19,r2
 800bac8:	2080202c 	andhi	r2,r4,128
 800bacc:	10005026 	beq	r2,zero,800bc10 <__divdf3+0x92c>
 800bad0:	00800044 	movi	r2,1
 800bad4:	0009883a 	mov	r4,zero
 800bad8:	0027883a 	mov	r19,zero
 800badc:	003e7106 	br	800b4a4 <__divdf3+0x1c0>
 800bae0:	b00d883a 	mov	r6,r22
 800bae4:	0081ffc4 	movi	r2,2047
 800bae8:	0009883a 	mov	r4,zero
 800baec:	0027883a 	mov	r19,zero
 800baf0:	003e6c06 	br	800b4a4 <__divdf3+0x1c0>
 800baf4:	8a3fbb1e 	bne	r17,r8,800b9e4 <__divdf3+0x700>
 800baf8:	d9000017 	ldw	r4,0(sp)
 800bafc:	a13fb936 	bltu	r20,r4,800b9e4 <__divdf3+0x700>
 800bb00:	003fb606 	br	800b9dc <__divdf3+0x6f8>
 800bb04:	123f0a2e 	bgeu	r2,r8,800b730 <__divdf3+0x44c>
 800bb08:	843fff84 	addi	r16,r16,-2
 800bb0c:	1445883a 	add	r2,r2,r17
 800bb10:	003f0806 	br	800b734 <__divdf3+0x450>
 800bb14:	15beef2e 	bgeu	r2,r22,800b6d4 <__divdf3+0x3f0>
 800bb18:	bdffff84 	addi	r23,r23,-2
 800bb1c:	1445883a 	add	r2,r2,r17
 800bb20:	003eed06 	br	800b6d8 <__divdf3+0x3f4>
 800bb24:	2827883a 	mov	r19,r5
 800bb28:	193f941e 	bne	r3,r4,800b97c <__divdf3+0x698>
 800bb2c:	d8c00017 	ldw	r3,0(sp)
 800bb30:	18bf921e 	bne	r3,r2,800b97c <__divdf3+0x698>
 800bb34:	003e4506 	br	800b44c <__divdf3+0x168>
 800bb38:	053fcb0e 	bge	zero,r20,800ba68 <__divdf3+0x784>
 800bb3c:	0027883a 	mov	r19,zero
 800bb40:	00c00044 	movi	r3,1
 800bb44:	80e1883a 	add	r16,r16,r3
 800bb48:	003e4406 	br	800b45c <__divdf3+0x178>
 800bb4c:	1013883a 	mov	r9,r2
 800bb50:	003f6306 	br	800b8e0 <__divdf3+0x5fc>
 800bb54:	2011883a 	mov	r8,r4
 800bb58:	003f4406 	br	800b86c <__divdf3+0x588>
 800bb5c:	988003cc 	andi	r2,r19,15
 800bb60:	10800118 	cmpnei	r2,r2,4
 800bb64:	103e3c26 	beq	r2,zero,800b458 <__divdf3+0x174>
 800bb68:	98800104 	addi	r2,r19,4
 800bb6c:	00fffec4 	movi	r3,-5
 800bb70:	1cc7803a 	cmpltu	r3,r3,r19
 800bb74:	1026d0fa 	srli	r19,r2,3
 800bb78:	003ff206 	br	800bb44 <__divdf3+0x860>
 800bb7c:	a0ff992e 	bgeu	r20,r3,800b9e4 <__divdf3+0x700>
 800bb80:	d8800017 	ldw	r2,0(sp)
 800bb84:	843fff84 	addi	r16,r16,-2
 800bb88:	a0a9883a 	add	r20,r20,r2
 800bb8c:	a085803a 	cmpltu	r2,r20,r2
 800bb90:	1445883a 	add	r2,r2,r17
 800bb94:	4091883a 	add	r8,r8,r2
 800bb98:	003f1306 	br	800b7e8 <__divdf3+0x504>
 800bb9c:	d9c00017 	ldw	r7,0(sp)
 800bba0:	9cffff84 	addi	r19,r19,-2
 800bba4:	39cb883a 	add	r5,r7,r7
 800bba8:	29cf803a 	cmpltu	r7,r5,r7
 800bbac:	3c4f883a 	add	r7,r7,r17
 800bbb0:	19c7883a 	add	r3,r3,r7
 800bbb4:	d9400015 	stw	r5,0(sp)
 800bbb8:	003fdb06 	br	800bb28 <__divdf3+0x844>
 800bbbc:	00bff844 	movi	r2,-31
 800bbc0:	1529c83a 	sub	r20,r2,r20
 800bbc4:	21000820 	cmpeqi	r4,r4,32
 800bbc8:	8528d83a 	srl	r20,r16,r20
 800bbcc:	2000031e 	bne	r4,zero,800bbdc <__divdf3+0x8f8>
 800bbd0:	90810f84 	addi	r2,r18,1086
 800bbd4:	8088983a 	sll	r4,r16,r2
 800bbd8:	9926b03a 	or	r19,r19,r4
 800bbdc:	9826c03a 	cmpne	r19,r19,zero
 800bbe0:	9d26b03a 	or	r19,r19,r20
 800bbe4:	9c0001cc 	andi	r16,r19,7
 800bbe8:	8000051e 	bne	r16,zero,800bc00 <__divdf3+0x91c>
 800bbec:	0009883a 	mov	r4,zero
 800bbf0:	9826d0fa 	srli	r19,r19,3
 800bbf4:	0005883a 	mov	r2,zero
 800bbf8:	9c26b03a 	or	r19,r19,r16
 800bbfc:	003e2906 	br	800b4a4 <__divdf3+0x1c0>
 800bc00:	988003cc 	andi	r2,r19,15
 800bc04:	10800118 	cmpnei	r2,r2,4
 800bc08:	0009883a 	mov	r4,zero
 800bc0c:	103faa1e 	bne	r2,zero,800bab8 <__divdf3+0x7d4>
 800bc10:	2004927a 	slli	r2,r4,9
 800bc14:	2020977a 	slli	r16,r4,29
 800bc18:	1008d33a 	srli	r4,r2,12
 800bc1c:	003ff406 	br	800bbf0 <__divdf3+0x90c>
 800bc20:	00800434 	movhi	r2,16
 800bc24:	81000234 	orhi	r4,r16,8
 800bc28:	10bfffc4 	addi	r2,r2,-1
 800bc2c:	2088703a 	and	r4,r4,r2
 800bc30:	b00d883a 	mov	r6,r22
 800bc34:	003e7b06 	br	800b624 <__divdf3+0x340>
 800bc38:	d9c00017 	ldw	r7,0(sp)
 800bc3c:	38bfd736 	bltu	r7,r2,800bb9c <__divdf3+0x8b8>
 800bc40:	2827883a 	mov	r19,r5
 800bc44:	003fb906 	br	800bb2c <__divdf3+0x848>

0800bc48 <__eqdf2>:
 800bc48:	2810d53a 	srli	r8,r5,20
 800bc4c:	3806d53a 	srli	r3,r7,20
 800bc50:	00800434 	movhi	r2,16
 800bc54:	4201ffcc 	andi	r8,r8,2047
 800bc58:	10bfffc4 	addi	r2,r2,-1
 800bc5c:	4281ffd8 	cmpnei	r10,r8,2047
 800bc60:	2892703a 	and	r9,r5,r2
 800bc64:	18c1ffcc 	andi	r3,r3,2047
 800bc68:	3884703a 	and	r2,r7,r2
 800bc6c:	280ad7fa 	srli	r5,r5,31
 800bc70:	380ed7fa 	srli	r7,r7,31
 800bc74:	50000626 	beq	r10,zero,800bc90 <__eqdf2+0x48>
 800bc78:	1a81ffe0 	cmpeqi	r10,r3,2047
 800bc7c:	5000021e 	bne	r10,zero,800bc88 <__eqdf2+0x40>
 800bc80:	40c0011e 	bne	r8,r3,800bc88 <__eqdf2+0x40>
 800bc84:	48800826 	beq	r9,r2,800bca8 <__eqdf2+0x60>
 800bc88:	00800044 	movi	r2,1
 800bc8c:	f800283a 	ret
 800bc90:	4914b03a 	or	r10,r9,r4
 800bc94:	503ffc1e 	bne	r10,zero,800bc88 <__eqdf2+0x40>
 800bc98:	18c1ffd8 	cmpnei	r3,r3,2047
 800bc9c:	183ffa1e 	bne	r3,zero,800bc88 <__eqdf2+0x40>
 800bca0:	1184b03a 	or	r2,r2,r6
 800bca4:	103ff81e 	bne	r2,zero,800bc88 <__eqdf2+0x40>
 800bca8:	21bff71e 	bne	r4,r6,800bc88 <__eqdf2+0x40>
 800bcac:	29c00426 	beq	r5,r7,800bcc0 <__eqdf2+0x78>
 800bcb0:	403ff51e 	bne	r8,zero,800bc88 <__eqdf2+0x40>
 800bcb4:	4904b03a 	or	r2,r9,r4
 800bcb8:	1004c03a 	cmpne	r2,r2,zero
 800bcbc:	f800283a 	ret
 800bcc0:	0005883a 	mov	r2,zero
 800bcc4:	f800283a 	ret

0800bcc8 <__gedf2>:
 800bcc8:	2810d53a 	srli	r8,r5,20
 800bccc:	3812d53a 	srli	r9,r7,20
 800bcd0:	00800434 	movhi	r2,16
 800bcd4:	4201ffcc 	andi	r8,r8,2047
 800bcd8:	10bfffc4 	addi	r2,r2,-1
 800bcdc:	4281ffd8 	cmpnei	r10,r8,2047
 800bce0:	2896703a 	and	r11,r5,r2
 800bce4:	3886703a 	and	r3,r7,r2
 800bce8:	280ad7fa 	srli	r5,r5,31
 800bcec:	4a41ffcc 	andi	r9,r9,2047
 800bcf0:	3804d7fa 	srli	r2,r7,31
 800bcf4:	50000b26 	beq	r10,zero,800bd24 <__gedf2+0x5c>
 800bcf8:	49c1ffd8 	cmpnei	r7,r9,2047
 800bcfc:	38000d26 	beq	r7,zero,800bd34 <__gedf2+0x6c>
 800bd00:	4000191e 	bne	r8,zero,800bd68 <__gedf2+0xa0>
 800bd04:	5914b03a 	or	r10,r11,r4
 800bd08:	500f003a 	cmpeq	r7,r10,zero
 800bd0c:	4800131e 	bne	r9,zero,800bd5c <__gedf2+0x94>
 800bd10:	1998b03a 	or	r12,r3,r6
 800bd14:	6000111e 	bne	r12,zero,800bd5c <__gedf2+0x94>
 800bd18:	50000a1e 	bne	r10,zero,800bd44 <__gedf2+0x7c>
 800bd1c:	0005883a 	mov	r2,zero
 800bd20:	f800283a 	ret
 800bd24:	590eb03a 	or	r7,r11,r4
 800bd28:	38001e1e 	bne	r7,zero,800bda4 <__gedf2+0xdc>
 800bd2c:	49c1ffe0 	cmpeqi	r7,r9,2047
 800bd30:	38000d26 	beq	r7,zero,800bd68 <__gedf2+0xa0>
 800bd34:	198eb03a 	or	r7,r3,r6
 800bd38:	38001a1e 	bne	r7,zero,800bda4 <__gedf2+0xdc>
 800bd3c:	40000526 	beq	r8,zero,800bd54 <__gedf2+0x8c>
 800bd40:	28800d26 	beq	r5,r2,800bd78 <__gedf2+0xb0>
 800bd44:	00800044 	movi	r2,1
 800bd48:	28000626 	beq	r5,zero,800bd64 <__gedf2+0x9c>
 800bd4c:	00bfffc4 	movi	r2,-1
 800bd50:	f800283a 	ret
 800bd54:	590eb03a 	or	r7,r11,r4
 800bd58:	380f003a 	cmpeq	r7,r7,zero
 800bd5c:	383ff826 	beq	r7,zero,800bd40 <__gedf2+0x78>
 800bd60:	103ffa26 	beq	r2,zero,800bd4c <__gedf2+0x84>
 800bd64:	f800283a 	ret
 800bd68:	483ff51e 	bne	r9,zero,800bd40 <__gedf2+0x78>
 800bd6c:	198eb03a 	or	r7,r3,r6
 800bd70:	383ff31e 	bne	r7,zero,800bd40 <__gedf2+0x78>
 800bd74:	003ff306 	br	800bd44 <__gedf2+0x7c>
 800bd78:	4a000716 	blt	r9,r8,800bd98 <__gedf2+0xd0>
 800bd7c:	427ff816 	blt	r8,r9,800bd60 <__gedf2+0x98>
 800bd80:	1afff036 	bltu	r3,r11,800bd44 <__gedf2+0x7c>
 800bd84:	58c00926 	beq	r11,r3,800bdac <__gedf2+0xe4>
 800bd88:	58ffe42e 	bgeu	r11,r3,800bd1c <__gedf2+0x54>
 800bd8c:	283fef26 	beq	r5,zero,800bd4c <__gedf2+0x84>
 800bd90:	2805883a 	mov	r2,r5
 800bd94:	f800283a 	ret
 800bd98:	103fec1e 	bne	r2,zero,800bd4c <__gedf2+0x84>
 800bd9c:	00800044 	movi	r2,1
 800bda0:	f800283a 	ret
 800bda4:	00bfff84 	movi	r2,-2
 800bda8:	f800283a 	ret
 800bdac:	313fe536 	bltu	r6,r4,800bd44 <__gedf2+0x7c>
 800bdb0:	21bfda2e 	bgeu	r4,r6,800bd1c <__gedf2+0x54>
 800bdb4:	003ff506 	br	800bd8c <__gedf2+0xc4>

0800bdb8 <__ledf2>:
 800bdb8:	2810d53a 	srli	r8,r5,20
 800bdbc:	3812d53a 	srli	r9,r7,20
 800bdc0:	00800434 	movhi	r2,16
 800bdc4:	4201ffcc 	andi	r8,r8,2047
 800bdc8:	10bfffc4 	addi	r2,r2,-1
 800bdcc:	4281ffd8 	cmpnei	r10,r8,2047
 800bdd0:	2896703a 	and	r11,r5,r2
 800bdd4:	3886703a 	and	r3,r7,r2
 800bdd8:	280ad7fa 	srli	r5,r5,31
 800bddc:	4a41ffcc 	andi	r9,r9,2047
 800bde0:	3804d7fa 	srli	r2,r7,31
 800bde4:	50000b26 	beq	r10,zero,800be14 <__ledf2+0x5c>
 800bde8:	49c1ffd8 	cmpnei	r7,r9,2047
 800bdec:	38000d26 	beq	r7,zero,800be24 <__ledf2+0x6c>
 800bdf0:	40001b1e 	bne	r8,zero,800be60 <__ledf2+0xa8>
 800bdf4:	5914b03a 	or	r10,r11,r4
 800bdf8:	500f003a 	cmpeq	r7,r10,zero
 800bdfc:	48000e1e 	bne	r9,zero,800be38 <__ledf2+0x80>
 800be00:	1998b03a 	or	r12,r3,r6
 800be04:	60000c1e 	bne	r12,zero,800be38 <__ledf2+0x80>
 800be08:	50000d1e 	bne	r10,zero,800be40 <__ledf2+0x88>
 800be0c:	0005883a 	mov	r2,zero
 800be10:	f800283a 	ret
 800be14:	590eb03a 	or	r7,r11,r4
 800be18:	38000d1e 	bne	r7,zero,800be50 <__ledf2+0x98>
 800be1c:	49c1ffe0 	cmpeqi	r7,r9,2047
 800be20:	38000f26 	beq	r7,zero,800be60 <__ledf2+0xa8>
 800be24:	198eb03a 	or	r7,r3,r6
 800be28:	3800091e 	bne	r7,zero,800be50 <__ledf2+0x98>
 800be2c:	4000031e 	bne	r8,zero,800be3c <__ledf2+0x84>
 800be30:	590eb03a 	or	r7,r11,r4
 800be34:	380f003a 	cmpeq	r7,r7,zero
 800be38:	3800071e 	bne	r7,zero,800be58 <__ledf2+0xa0>
 800be3c:	28800c26 	beq	r5,r2,800be70 <__ledf2+0xb8>
 800be40:	00800044 	movi	r2,1
 800be44:	28000526 	beq	r5,zero,800be5c <__ledf2+0xa4>
 800be48:	00bfffc4 	movi	r2,-1
 800be4c:	f800283a 	ret
 800be50:	00800084 	movi	r2,2
 800be54:	f800283a 	ret
 800be58:	103ffb26 	beq	r2,zero,800be48 <__ledf2+0x90>
 800be5c:	f800283a 	ret
 800be60:	483ff61e 	bne	r9,zero,800be3c <__ledf2+0x84>
 800be64:	198eb03a 	or	r7,r3,r6
 800be68:	383ff41e 	bne	r7,zero,800be3c <__ledf2+0x84>
 800be6c:	003ff406 	br	800be40 <__ledf2+0x88>
 800be70:	4a00030e 	bge	r9,r8,800be80 <__ledf2+0xc8>
 800be74:	103ff41e 	bne	r2,zero,800be48 <__ledf2+0x90>
 800be78:	00800044 	movi	r2,1
 800be7c:	f800283a 	ret
 800be80:	427ff516 	blt	r8,r9,800be58 <__ledf2+0xa0>
 800be84:	1affee36 	bltu	r3,r11,800be40 <__ledf2+0x88>
 800be88:	58c00426 	beq	r11,r3,800be9c <__ledf2+0xe4>
 800be8c:	58ffdf2e 	bgeu	r11,r3,800be0c <__ledf2+0x54>
 800be90:	283fed26 	beq	r5,zero,800be48 <__ledf2+0x90>
 800be94:	2805883a 	mov	r2,r5
 800be98:	f800283a 	ret
 800be9c:	313fe836 	bltu	r6,r4,800be40 <__ledf2+0x88>
 800bea0:	21bfda2e 	bgeu	r4,r6,800be0c <__ledf2+0x54>
 800bea4:	003ffa06 	br	800be90 <__ledf2+0xd8>

0800bea8 <__muldf3>:
 800bea8:	2810d53a 	srli	r8,r5,20
 800beac:	deffef04 	addi	sp,sp,-68
 800beb0:	dc000715 	stw	r16,28(sp)
 800beb4:	04000434 	movhi	r16,16
 800beb8:	dd000b15 	stw	r20,44(sp)
 800bebc:	dc800915 	stw	r18,36(sp)
 800bec0:	843fffc4 	addi	r16,r16,-1
 800bec4:	dfc01015 	stw	ra,64(sp)
 800bec8:	df000f15 	stw	fp,60(sp)
 800becc:	ddc00e15 	stw	r23,56(sp)
 800bed0:	dd800d15 	stw	r22,52(sp)
 800bed4:	dd400c15 	stw	r21,48(sp)
 800bed8:	dcc00a15 	stw	r19,40(sp)
 800bedc:	dc400815 	stw	r17,32(sp)
 800bee0:	4201ffcc 	andi	r8,r8,2047
 800bee4:	2025883a 	mov	r18,r4
 800bee8:	2c20703a 	and	r16,r5,r16
 800beec:	2828d7fa 	srli	r20,r5,31
 800bef0:	40005d26 	beq	r8,zero,800c068 <__muldf3+0x1c0>
 800bef4:	4081ffe0 	cmpeqi	r2,r8,2047
 800bef8:	1000721e 	bne	r2,zero,800c0c4 <__muldf3+0x21c>
 800befc:	802090fa 	slli	r16,r16,3
 800bf00:	2006d77a 	srli	r3,r4,29
 800bf04:	202c90fa 	slli	r22,r4,3
 800bf08:	423f0044 	addi	r8,r8,-1023
 800bf0c:	1c20b03a 	or	r16,r3,r16
 800bf10:	84002034 	orhi	r16,r16,128
 800bf14:	0027883a 	mov	r19,zero
 800bf18:	002f883a 	mov	r23,zero
 800bf1c:	3806d53a 	srli	r3,r7,20
 800bf20:	04400434 	movhi	r17,16
 800bf24:	8c7fffc4 	addi	r17,r17,-1
 800bf28:	18c1ffcc 	andi	r3,r3,2047
 800bf2c:	3c62703a 	and	r17,r7,r17
 800bf30:	382ad7fa 	srli	r21,r7,31
 800bf34:	18006a26 	beq	r3,zero,800c0e0 <__muldf3+0x238>
 800bf38:	1881ffe0 	cmpeqi	r2,r3,2047
 800bf3c:	1000211e 	bne	r2,zero,800bfc4 <__muldf3+0x11c>
 800bf40:	882290fa 	slli	r17,r17,3
 800bf44:	3008d77a 	srli	r4,r6,29
 800bf48:	302490fa 	slli	r18,r6,3
 800bf4c:	18ff0044 	addi	r3,r3,-1023
 800bf50:	2462b03a 	or	r17,r4,r17
 800bf54:	40d1883a 	add	r8,r8,r3
 800bf58:	8c402034 	orhi	r17,r17,128
 800bf5c:	0007883a 	mov	r3,zero
 800bf60:	98800428 	cmpgeui	r2,r19,16
 800bf64:	a54cf03a 	xor	r6,r20,r21
 800bf68:	42400044 	addi	r9,r8,1
 800bf6c:	10009b1e 	bne	r2,zero,800c1dc <__muldf3+0x334>
 800bf70:	982690ba 	slli	r19,r19,2
 800bf74:	00820074 	movhi	r2,2049
 800bf78:	9885883a 	add	r2,r19,r2
 800bf7c:	10afe117 	ldw	r2,-16508(r2)
 800bf80:	1000683a 	jmp	r2
 800bf84:	0800c1dc 	xori	zero,at,775
 800bf88:	0800bfe4 	muli	zero,at,767
 800bf8c:	0800bfe4 	muli	zero,at,767
 800bf90:	0800bfe0 	cmpeqi	zero,at,767
 800bf94:	0800bff0 	cmpltui	zero,at,767
 800bf98:	0800bff0 	cmpltui	zero,at,767
 800bf9c:	0800c198 	cmpnei	zero,at,774
 800bfa0:	0800bfe0 	cmpeqi	zero,at,767
 800bfa4:	0800bff0 	cmpltui	zero,at,767
 800bfa8:	0800c198 	cmpnei	zero,at,774
 800bfac:	0800bff0 	cmpltui	zero,at,767
 800bfb0:	0800bfe0 	cmpeqi	zero,at,767
 800bfb4:	0800c190 	cmplti	zero,at,774
 800bfb8:	0800c190 	cmplti	zero,at,774
 800bfbc:	0800c190 	cmplti	zero,at,774
 800bfc0:	0800c1b0 	cmpltui	zero,at,774
 800bfc4:	3464b03a 	or	r18,r6,r17
 800bfc8:	4201ffc4 	addi	r8,r8,2047
 800bfcc:	90006c1e 	bne	r18,zero,800c180 <__muldf3+0x2d8>
 800bfd0:	9cc00094 	ori	r19,r19,2
 800bfd4:	0023883a 	mov	r17,zero
 800bfd8:	00c00084 	movi	r3,2
 800bfdc:	003fe006 	br	800bf60 <__muldf3+0xb8>
 800bfe0:	a80d883a 	mov	r6,r21
 800bfe4:	8821883a 	mov	r16,r17
 800bfe8:	902d883a 	mov	r22,r18
 800bfec:	182f883a 	mov	r23,r3
 800bff0:	b88000a0 	cmpeqi	r2,r23,2
 800bff4:	1000501e 	bne	r2,zero,800c138 <__muldf3+0x290>
 800bff8:	b88000e0 	cmpeqi	r2,r23,3
 800bffc:	10019d1e 	bne	r2,zero,800c674 <__muldf3+0x7cc>
 800c000:	b8800060 	cmpeqi	r2,r23,1
 800c004:	10012a26 	beq	r2,zero,800c4b0 <__muldf3+0x608>
 800c008:	0007883a 	mov	r3,zero
 800c00c:	0021883a 	mov	r16,zero
 800c010:	002d883a 	mov	r22,zero
 800c014:	04400434 	movhi	r17,16
 800c018:	1806953a 	slli	r3,r3,20
 800c01c:	31803fcc 	andi	r6,r6,255
 800c020:	8c7fffc4 	addi	r17,r17,-1
 800c024:	300c97fa 	slli	r6,r6,31
 800c028:	8460703a 	and	r16,r16,r17
 800c02c:	80c6b03a 	or	r3,r16,r3
 800c030:	1986b03a 	or	r3,r3,r6
 800c034:	b005883a 	mov	r2,r22
 800c038:	dfc01017 	ldw	ra,64(sp)
 800c03c:	df000f17 	ldw	fp,60(sp)
 800c040:	ddc00e17 	ldw	r23,56(sp)
 800c044:	dd800d17 	ldw	r22,52(sp)
 800c048:	dd400c17 	ldw	r21,48(sp)
 800c04c:	dd000b17 	ldw	r20,44(sp)
 800c050:	dcc00a17 	ldw	r19,40(sp)
 800c054:	dc800917 	ldw	r18,36(sp)
 800c058:	dc400817 	ldw	r17,32(sp)
 800c05c:	dc000717 	ldw	r16,28(sp)
 800c060:	dec01104 	addi	sp,sp,68
 800c064:	f800283a 	ret
 800c068:	812cb03a 	or	r22,r16,r4
 800c06c:	b0003f26 	beq	r22,zero,800c16c <__muldf3+0x2c4>
 800c070:	d9c00115 	stw	r7,4(sp)
 800c074:	d9800015 	stw	r6,0(sp)
 800c078:	80013b26 	beq	r16,zero,800c568 <__muldf3+0x6c0>
 800c07c:	8009883a 	mov	r4,r16
 800c080:	800d22c0 	call	800d22c <__clzsi2>
 800c084:	d9800017 	ldw	r6,0(sp)
 800c088:	d9c00117 	ldw	r7,4(sp)
 800c08c:	1007883a 	mov	r3,r2
 800c090:	117ffd44 	addi	r5,r2,-11
 800c094:	01000744 	movi	r4,29
 800c098:	1dbffe04 	addi	r22,r3,-8
 800c09c:	2149c83a 	sub	r4,r4,r5
 800c0a0:	85a0983a 	sll	r16,r16,r22
 800c0a4:	9108d83a 	srl	r4,r18,r4
 800c0a8:	95ac983a 	sll	r22,r18,r22
 800c0ac:	2420b03a 	or	r16,r4,r16
 800c0b0:	023f0344 	movi	r8,-1011
 800c0b4:	40d1c83a 	sub	r8,r8,r3
 800c0b8:	0027883a 	mov	r19,zero
 800c0bc:	002f883a 	mov	r23,zero
 800c0c0:	003f9606 	br	800bf1c <__muldf3+0x74>
 800c0c4:	812cb03a 	or	r22,r16,r4
 800c0c8:	b000231e 	bne	r22,zero,800c158 <__muldf3+0x2b0>
 800c0cc:	0021883a 	mov	r16,zero
 800c0d0:	04c00204 	movi	r19,8
 800c0d4:	0201ffc4 	movi	r8,2047
 800c0d8:	05c00084 	movi	r23,2
 800c0dc:	003f8f06 	br	800bf1c <__muldf3+0x74>
 800c0e0:	3464b03a 	or	r18,r6,r17
 800c0e4:	90001826 	beq	r18,zero,800c148 <__muldf3+0x2a0>
 800c0e8:	88011126 	beq	r17,zero,800c530 <__muldf3+0x688>
 800c0ec:	8809883a 	mov	r4,r17
 800c0f0:	d9800115 	stw	r6,4(sp)
 800c0f4:	da000015 	stw	r8,0(sp)
 800c0f8:	800d22c0 	call	800d22c <__clzsi2>
 800c0fc:	da000017 	ldw	r8,0(sp)
 800c100:	d9800117 	ldw	r6,4(sp)
 800c104:	1007883a 	mov	r3,r2
 800c108:	117ffd44 	addi	r5,r2,-11
 800c10c:	01000744 	movi	r4,29
 800c110:	1cbffe04 	addi	r18,r3,-8
 800c114:	2149c83a 	sub	r4,r4,r5
 800c118:	8ca2983a 	sll	r17,r17,r18
 800c11c:	3108d83a 	srl	r4,r6,r4
 800c120:	34a4983a 	sll	r18,r6,r18
 800c124:	2462b03a 	or	r17,r4,r17
 800c128:	40d1c83a 	sub	r8,r8,r3
 800c12c:	423f0344 	addi	r8,r8,-1011
 800c130:	0007883a 	mov	r3,zero
 800c134:	003f8a06 	br	800bf60 <__muldf3+0xb8>
 800c138:	00c1ffc4 	movi	r3,2047
 800c13c:	0021883a 	mov	r16,zero
 800c140:	002d883a 	mov	r22,zero
 800c144:	003fb306 	br	800c014 <__muldf3+0x16c>
 800c148:	9cc00054 	ori	r19,r19,1
 800c14c:	0023883a 	mov	r17,zero
 800c150:	00c00044 	movi	r3,1
 800c154:	003f8206 	br	800bf60 <__muldf3+0xb8>
 800c158:	202d883a 	mov	r22,r4
 800c15c:	04c00304 	movi	r19,12
 800c160:	0201ffc4 	movi	r8,2047
 800c164:	05c000c4 	movi	r23,3
 800c168:	003f6c06 	br	800bf1c <__muldf3+0x74>
 800c16c:	0021883a 	mov	r16,zero
 800c170:	04c00104 	movi	r19,4
 800c174:	0011883a 	mov	r8,zero
 800c178:	05c00044 	movi	r23,1
 800c17c:	003f6706 	br	800bf1c <__muldf3+0x74>
 800c180:	9cc000d4 	ori	r19,r19,3
 800c184:	3025883a 	mov	r18,r6
 800c188:	00c000c4 	movi	r3,3
 800c18c:	003f7406 	br	800bf60 <__muldf3+0xb8>
 800c190:	a00d883a 	mov	r6,r20
 800c194:	003f9606 	br	800bff0 <__muldf3+0x148>
 800c198:	04000434 	movhi	r16,16
 800c19c:	000d883a 	mov	r6,zero
 800c1a0:	843fffc4 	addi	r16,r16,-1
 800c1a4:	05bfffc4 	movi	r22,-1
 800c1a8:	00c1ffc4 	movi	r3,2047
 800c1ac:	003f9906 	br	800c014 <__muldf3+0x16c>
 800c1b0:	8080022c 	andhi	r2,r16,8
 800c1b4:	1000d826 	beq	r2,zero,800c518 <__muldf3+0x670>
 800c1b8:	8880022c 	andhi	r2,r17,8
 800c1bc:	1000d61e 	bne	r2,zero,800c518 <__muldf3+0x670>
 800c1c0:	00800434 	movhi	r2,16
 800c1c4:	8c000234 	orhi	r16,r17,8
 800c1c8:	10bfffc4 	addi	r2,r2,-1
 800c1cc:	80a0703a 	and	r16,r16,r2
 800c1d0:	a80d883a 	mov	r6,r21
 800c1d4:	902d883a 	mov	r22,r18
 800c1d8:	003ff306 	br	800c1a8 <__muldf3+0x300>
 800c1dc:	b028d43a 	srli	r20,r22,16
 800c1e0:	902ed43a 	srli	r23,r18,16
 800c1e4:	b5bfffcc 	andi	r22,r22,65535
 800c1e8:	94bfffcc 	andi	r18,r18,65535
 800c1ec:	b00b883a 	mov	r5,r22
 800c1f0:	9009883a 	mov	r4,r18
 800c1f4:	d9800215 	stw	r6,8(sp)
 800c1f8:	da000115 	stw	r8,4(sp)
 800c1fc:	da400015 	stw	r9,0(sp)
 800c200:	80008b80 	call	80008b8 <__mulsi3>
 800c204:	900b883a 	mov	r5,r18
 800c208:	a009883a 	mov	r4,r20
 800c20c:	1027883a 	mov	r19,r2
 800c210:	80008b80 	call	80008b8 <__mulsi3>
 800c214:	b80b883a 	mov	r5,r23
 800c218:	a009883a 	mov	r4,r20
 800c21c:	102b883a 	mov	r21,r2
 800c220:	80008b80 	call	80008b8 <__mulsi3>
 800c224:	b00b883a 	mov	r5,r22
 800c228:	b809883a 	mov	r4,r23
 800c22c:	1039883a 	mov	fp,r2
 800c230:	80008b80 	call	80008b8 <__mulsi3>
 800c234:	9806d43a 	srli	r3,r19,16
 800c238:	1545883a 	add	r2,r2,r21
 800c23c:	da400017 	ldw	r9,0(sp)
 800c240:	1885883a 	add	r2,r3,r2
 800c244:	da000117 	ldw	r8,4(sp)
 800c248:	d9800217 	ldw	r6,8(sp)
 800c24c:	1540022e 	bgeu	r2,r21,800c258 <__muldf3+0x3b0>
 800c250:	00c00074 	movhi	r3,1
 800c254:	e0f9883a 	add	fp,fp,r3
 800c258:	1006943a 	slli	r3,r2,16
 800c25c:	1004d43a 	srli	r2,r2,16
 800c260:	882ad43a 	srli	r21,r17,16
 800c264:	9cffffcc 	andi	r19,r19,65535
 800c268:	8c7fffcc 	andi	r17,r17,65535
 800c26c:	b00b883a 	mov	r5,r22
 800c270:	8809883a 	mov	r4,r17
 800c274:	d8800015 	stw	r2,0(sp)
 800c278:	1cc5883a 	add	r2,r3,r19
 800c27c:	d9800515 	stw	r6,20(sp)
 800c280:	da000415 	stw	r8,16(sp)
 800c284:	da400315 	stw	r9,12(sp)
 800c288:	d8800115 	stw	r2,4(sp)
 800c28c:	80008b80 	call	80008b8 <__mulsi3>
 800c290:	a009883a 	mov	r4,r20
 800c294:	880b883a 	mov	r5,r17
 800c298:	d8800215 	stw	r2,8(sp)
 800c29c:	80008b80 	call	80008b8 <__mulsi3>
 800c2a0:	a009883a 	mov	r4,r20
 800c2a4:	a80b883a 	mov	r5,r21
 800c2a8:	1027883a 	mov	r19,r2
 800c2ac:	80008b80 	call	80008b8 <__mulsi3>
 800c2b0:	b00b883a 	mov	r5,r22
 800c2b4:	a809883a 	mov	r4,r21
 800c2b8:	1029883a 	mov	r20,r2
 800c2bc:	80008b80 	call	80008b8 <__mulsi3>
 800c2c0:	d9c00217 	ldw	r7,8(sp)
 800c2c4:	14c5883a 	add	r2,r2,r19
 800c2c8:	da400317 	ldw	r9,12(sp)
 800c2cc:	3806d43a 	srli	r3,r7,16
 800c2d0:	da000417 	ldw	r8,16(sp)
 800c2d4:	d9800517 	ldw	r6,20(sp)
 800c2d8:	1885883a 	add	r2,r3,r2
 800c2dc:	14c0022e 	bgeu	r2,r19,800c2e8 <__muldf3+0x440>
 800c2e0:	00c00074 	movhi	r3,1
 800c2e4:	a0e9883a 	add	r20,r20,r3
 800c2e8:	1006d43a 	srli	r3,r2,16
 800c2ec:	1004943a 	slli	r2,r2,16
 800c2f0:	802cd43a 	srli	r22,r16,16
 800c2f4:	843fffcc 	andi	r16,r16,65535
 800c2f8:	3cffffcc 	andi	r19,r7,65535
 800c2fc:	9009883a 	mov	r4,r18
 800c300:	800b883a 	mov	r5,r16
 800c304:	d9800615 	stw	r6,24(sp)
 800c308:	da000515 	stw	r8,20(sp)
 800c30c:	da400415 	stw	r9,16(sp)
 800c310:	1d29883a 	add	r20,r3,r20
 800c314:	14e7883a 	add	r19,r2,r19
 800c318:	80008b80 	call	80008b8 <__mulsi3>
 800c31c:	900b883a 	mov	r5,r18
 800c320:	b009883a 	mov	r4,r22
 800c324:	d8800315 	stw	r2,12(sp)
 800c328:	80008b80 	call	80008b8 <__mulsi3>
 800c32c:	b00b883a 	mov	r5,r22
 800c330:	b809883a 	mov	r4,r23
 800c334:	1025883a 	mov	r18,r2
 800c338:	80008b80 	call	80008b8 <__mulsi3>
 800c33c:	800b883a 	mov	r5,r16
 800c340:	b809883a 	mov	r4,r23
 800c344:	d8800215 	stw	r2,8(sp)
 800c348:	80008b80 	call	80008b8 <__mulsi3>
 800c34c:	d8c00317 	ldw	r3,12(sp)
 800c350:	d9400017 	ldw	r5,0(sp)
 800c354:	1485883a 	add	r2,r2,r18
 800c358:	1808d43a 	srli	r4,r3,16
 800c35c:	2ccf883a 	add	r7,r5,r19
 800c360:	da800217 	ldw	r10,8(sp)
 800c364:	2085883a 	add	r2,r4,r2
 800c368:	da400417 	ldw	r9,16(sp)
 800c36c:	da000517 	ldw	r8,20(sp)
 800c370:	d9800617 	ldw	r6,24(sp)
 800c374:	1480022e 	bgeu	r2,r18,800c380 <__muldf3+0x4d8>
 800c378:	01000074 	movhi	r4,1
 800c37c:	5115883a 	add	r10,r10,r4
 800c380:	1024d43a 	srli	r18,r2,16
 800c384:	1004943a 	slli	r2,r2,16
 800c388:	1dffffcc 	andi	r23,r3,65535
 800c38c:	8809883a 	mov	r4,r17
 800c390:	800b883a 	mov	r5,r16
 800c394:	d9800615 	stw	r6,24(sp)
 800c398:	da000515 	stw	r8,20(sp)
 800c39c:	da400415 	stw	r9,16(sp)
 800c3a0:	d9c00315 	stw	r7,12(sp)
 800c3a4:	92a5883a 	add	r18,r18,r10
 800c3a8:	15ef883a 	add	r23,r2,r23
 800c3ac:	80008b80 	call	80008b8 <__mulsi3>
 800c3b0:	880b883a 	mov	r5,r17
 800c3b4:	b009883a 	mov	r4,r22
 800c3b8:	d8800215 	stw	r2,8(sp)
 800c3bc:	80008b80 	call	80008b8 <__mulsi3>
 800c3c0:	b00b883a 	mov	r5,r22
 800c3c4:	a809883a 	mov	r4,r21
 800c3c8:	d8800015 	stw	r2,0(sp)
 800c3cc:	80008b80 	call	80008b8 <__mulsi3>
 800c3d0:	800b883a 	mov	r5,r16
 800c3d4:	a809883a 	mov	r4,r21
 800c3d8:	1023883a 	mov	r17,r2
 800c3dc:	80008b80 	call	80008b8 <__mulsi3>
 800c3e0:	da800217 	ldw	r10,8(sp)
 800c3e4:	d8c00017 	ldw	r3,0(sp)
 800c3e8:	d9c00317 	ldw	r7,12(sp)
 800c3ec:	500ad43a 	srli	r5,r10,16
 800c3f0:	10c5883a 	add	r2,r2,r3
 800c3f4:	da400417 	ldw	r9,16(sp)
 800c3f8:	288b883a 	add	r5,r5,r2
 800c3fc:	da000517 	ldw	r8,20(sp)
 800c400:	d9800617 	ldw	r6,24(sp)
 800c404:	28c0022e 	bgeu	r5,r3,800c410 <__muldf3+0x568>
 800c408:	00800074 	movhi	r2,1
 800c40c:	88a3883a 	add	r17,r17,r2
 800c410:	2806943a 	slli	r3,r5,16
 800c414:	52bfffcc 	andi	r10,r10,65535
 800c418:	3f39883a 	add	fp,r7,fp
 800c41c:	1a87883a 	add	r3,r3,r10
 800c420:	e4e7803a 	cmpltu	r19,fp,r19
 800c424:	1d07883a 	add	r3,r3,r20
 800c428:	e5f9883a 	add	fp,fp,r23
 800c42c:	1ce1883a 	add	r16,r3,r19
 800c430:	e5c9803a 	cmpltu	r4,fp,r23
 800c434:	848f883a 	add	r7,r16,r18
 800c438:	280ad43a 	srli	r5,r5,16
 800c43c:	3915883a 	add	r10,r7,r4
 800c440:	1d29803a 	cmpltu	r20,r3,r20
 800c444:	84e1803a 	cmpltu	r16,r16,r19
 800c448:	5109803a 	cmpltu	r4,r10,r4
 800c44c:	a420b03a 	or	r16,r20,r16
 800c450:	3ca5803a 	cmpltu	r18,r7,r18
 800c454:	8161883a 	add	r16,r16,r5
 800c458:	9108b03a 	or	r4,r18,r4
 800c45c:	8121883a 	add	r16,r16,r4
 800c460:	e02c927a 	slli	r22,fp,9
 800c464:	8461883a 	add	r16,r16,r17
 800c468:	d8c00117 	ldw	r3,4(sp)
 800c46c:	5004d5fa 	srli	r2,r10,23
 800c470:	8020927a 	slli	r16,r16,9
 800c474:	e038d5fa 	srli	fp,fp,23
 800c478:	b0ecb03a 	or	r22,r22,r3
 800c47c:	5014927a 	slli	r10,r10,9
 800c480:	80a0b03a 	or	r16,r16,r2
 800c484:	b02cc03a 	cmpne	r22,r22,zero
 800c488:	b72cb03a 	or	r22,r22,fp
 800c48c:	8080402c 	andhi	r2,r16,256
 800c490:	b2acb03a 	or	r22,r22,r10
 800c494:	10005c26 	beq	r2,zero,800c608 <__muldf3+0x760>
 800c498:	b004d07a 	srli	r2,r22,1
 800c49c:	800697fa 	slli	r3,r16,31
 800c4a0:	b580004c 	andi	r22,r22,1
 800c4a4:	8020d07a 	srli	r16,r16,1
 800c4a8:	15acb03a 	or	r22,r2,r22
 800c4ac:	b0ecb03a 	or	r22,r22,r3
 800c4b0:	48c0ffc4 	addi	r3,r9,1023
 800c4b4:	00c0370e 	bge	zero,r3,800c594 <__muldf3+0x6ec>
 800c4b8:	b08001cc 	andi	r2,r22,7
 800c4bc:	10000726 	beq	r2,zero,800c4dc <__muldf3+0x634>
 800c4c0:	b08003cc 	andi	r2,r22,15
 800c4c4:	10800120 	cmpeqi	r2,r2,4
 800c4c8:	1000041e 	bne	r2,zero,800c4dc <__muldf3+0x634>
 800c4cc:	b0800104 	addi	r2,r22,4
 800c4d0:	15ad803a 	cmpltu	r22,r2,r22
 800c4d4:	85a1883a 	add	r16,r16,r22
 800c4d8:	102d883a 	mov	r22,r2
 800c4dc:	8080402c 	andhi	r2,r16,256
 800c4e0:	10000426 	beq	r2,zero,800c4f4 <__muldf3+0x64c>
 800c4e4:	00bfc034 	movhi	r2,65280
 800c4e8:	10bfffc4 	addi	r2,r2,-1
 800c4ec:	80a0703a 	and	r16,r16,r2
 800c4f0:	48c10004 	addi	r3,r9,1024
 800c4f4:	1881ffc8 	cmpgei	r2,r3,2047
 800c4f8:	103f0f1e 	bne	r2,zero,800c138 <__muldf3+0x290>
 800c4fc:	8004977a 	slli	r2,r16,29
 800c500:	b02cd0fa 	srli	r22,r22,3
 800c504:	8020927a 	slli	r16,r16,9
 800c508:	18c1ffcc 	andi	r3,r3,2047
 800c50c:	15acb03a 	or	r22,r2,r22
 800c510:	8020d33a 	srli	r16,r16,12
 800c514:	003ebf06 	br	800c014 <__muldf3+0x16c>
 800c518:	00800434 	movhi	r2,16
 800c51c:	84000234 	orhi	r16,r16,8
 800c520:	10bfffc4 	addi	r2,r2,-1
 800c524:	80a0703a 	and	r16,r16,r2
 800c528:	a00d883a 	mov	r6,r20
 800c52c:	003f1e06 	br	800c1a8 <__muldf3+0x300>
 800c530:	3009883a 	mov	r4,r6
 800c534:	da000115 	stw	r8,4(sp)
 800c538:	d9800015 	stw	r6,0(sp)
 800c53c:	800d22c0 	call	800d22c <__clzsi2>
 800c540:	11400544 	addi	r5,r2,21
 800c544:	29000748 	cmpgei	r4,r5,29
 800c548:	10c00804 	addi	r3,r2,32
 800c54c:	d9800017 	ldw	r6,0(sp)
 800c550:	da000117 	ldw	r8,4(sp)
 800c554:	203eed26 	beq	r4,zero,800c10c <__muldf3+0x264>
 800c558:	147ffe04 	addi	r17,r2,-8
 800c55c:	3462983a 	sll	r17,r6,r17
 800c560:	0025883a 	mov	r18,zero
 800c564:	003ef006 	br	800c128 <__muldf3+0x280>
 800c568:	800d22c0 	call	800d22c <__clzsi2>
 800c56c:	11400544 	addi	r5,r2,21
 800c570:	29000748 	cmpgei	r4,r5,29
 800c574:	10c00804 	addi	r3,r2,32
 800c578:	d9800017 	ldw	r6,0(sp)
 800c57c:	d9c00117 	ldw	r7,4(sp)
 800c580:	203ec426 	beq	r4,zero,800c094 <__muldf3+0x1ec>
 800c584:	143ffe04 	addi	r16,r2,-8
 800c588:	9420983a 	sll	r16,r18,r16
 800c58c:	002d883a 	mov	r22,zero
 800c590:	003ec706 	br	800c0b0 <__muldf3+0x208>
 800c594:	00800044 	movi	r2,1
 800c598:	10c5c83a 	sub	r2,r2,r3
 800c59c:	11000e48 	cmpgei	r4,r2,57
 800c5a0:	203e991e 	bne	r4,zero,800c008 <__muldf3+0x160>
 800c5a4:	11000808 	cmpgei	r4,r2,32
 800c5a8:	2000191e 	bne	r4,zero,800c610 <__muldf3+0x768>
 800c5ac:	4a410784 	addi	r9,r9,1054
 800c5b0:	8246983a 	sll	r3,r16,r9
 800c5b4:	b088d83a 	srl	r4,r22,r2
 800c5b8:	b26c983a 	sll	r22,r22,r9
 800c5bc:	80a0d83a 	srl	r16,r16,r2
 800c5c0:	1904b03a 	or	r2,r3,r4
 800c5c4:	b02cc03a 	cmpne	r22,r22,zero
 800c5c8:	1584b03a 	or	r2,r2,r22
 800c5cc:	10c001cc 	andi	r3,r2,7
 800c5d0:	18000726 	beq	r3,zero,800c5f0 <__muldf3+0x748>
 800c5d4:	10c003cc 	andi	r3,r2,15
 800c5d8:	18c00120 	cmpeqi	r3,r3,4
 800c5dc:	1800041e 	bne	r3,zero,800c5f0 <__muldf3+0x748>
 800c5e0:	10c00104 	addi	r3,r2,4
 800c5e4:	1885803a 	cmpltu	r2,r3,r2
 800c5e8:	80a1883a 	add	r16,r16,r2
 800c5ec:	1805883a 	mov	r2,r3
 800c5f0:	80c0202c 	andhi	r3,r16,128
 800c5f4:	18001b26 	beq	r3,zero,800c664 <__muldf3+0x7bc>
 800c5f8:	00c00044 	movi	r3,1
 800c5fc:	0021883a 	mov	r16,zero
 800c600:	002d883a 	mov	r22,zero
 800c604:	003e8306 	br	800c014 <__muldf3+0x16c>
 800c608:	4013883a 	mov	r9,r8
 800c60c:	003fa806 	br	800c4b0 <__muldf3+0x608>
 800c610:	013ff844 	movi	r4,-31
 800c614:	20c7c83a 	sub	r3,r4,r3
 800c618:	10800820 	cmpeqi	r2,r2,32
 800c61c:	80c6d83a 	srl	r3,r16,r3
 800c620:	1000031e 	bne	r2,zero,800c630 <__muldf3+0x788>
 800c624:	4a410f84 	addi	r9,r9,1086
 800c628:	8260983a 	sll	r16,r16,r9
 800c62c:	b42cb03a 	or	r22,r22,r16
 800c630:	b02cc03a 	cmpne	r22,r22,zero
 800c634:	b0c4b03a 	or	r2,r22,r3
 800c638:	158001cc 	andi	r22,r2,7
 800c63c:	b000051e 	bne	r22,zero,800c654 <__muldf3+0x7ac>
 800c640:	0021883a 	mov	r16,zero
 800c644:	1004d0fa 	srli	r2,r2,3
 800c648:	0007883a 	mov	r3,zero
 800c64c:	15acb03a 	or	r22,r2,r22
 800c650:	003e7006 	br	800c014 <__muldf3+0x16c>
 800c654:	10c003cc 	andi	r3,r2,15
 800c658:	18c00118 	cmpnei	r3,r3,4
 800c65c:	0021883a 	mov	r16,zero
 800c660:	183fdf1e 	bne	r3,zero,800c5e0 <__muldf3+0x738>
 800c664:	8006927a 	slli	r3,r16,9
 800c668:	802c977a 	slli	r22,r16,29
 800c66c:	1820d33a 	srli	r16,r3,12
 800c670:	003ff406 	br	800c644 <__muldf3+0x79c>
 800c674:	00800434 	movhi	r2,16
 800c678:	84000234 	orhi	r16,r16,8
 800c67c:	10bfffc4 	addi	r2,r2,-1
 800c680:	80a0703a 	and	r16,r16,r2
 800c684:	003ec806 	br	800c1a8 <__muldf3+0x300>

0800c688 <__subdf3>:
 800c688:	00800434 	movhi	r2,16
 800c68c:	3812d53a 	srli	r9,r7,20
 800c690:	10bfffc4 	addi	r2,r2,-1
 800c694:	defffb04 	addi	sp,sp,-20
 800c698:	2890703a 	and	r8,r5,r2
 800c69c:	3884703a 	and	r2,r7,r2
 800c6a0:	2806d7fa 	srli	r3,r5,31
 800c6a4:	dcc00315 	stw	r19,12(sp)
 800c6a8:	dc400115 	stw	r17,4(sp)
 800c6ac:	280ad53a 	srli	r5,r5,20
 800c6b0:	401090fa 	slli	r8,r8,3
 800c6b4:	2026d77a 	srli	r19,r4,29
 800c6b8:	100490fa 	slli	r2,r2,3
 800c6bc:	3022d77a 	srli	r17,r6,29
 800c6c0:	4a81ffcc 	andi	r10,r9,2047
 800c6c4:	dc800215 	stw	r18,8(sp)
 800c6c8:	dc000015 	stw	r16,0(sp)
 800c6cc:	dfc00415 	stw	ra,16(sp)
 800c6d0:	5241ffe0 	cmpeqi	r9,r10,2047
 800c6d4:	1825883a 	mov	r18,r3
 800c6d8:	2c01ffcc 	andi	r16,r5,2047
 800c6dc:	18c03fcc 	andi	r3,r3,255
 800c6e0:	9a18b03a 	or	r12,r19,r8
 800c6e4:	201a90fa 	slli	r13,r4,3
 800c6e8:	380ed7fa 	srli	r7,r7,31
 800c6ec:	8896b03a 	or	r11,r17,r2
 800c6f0:	301c90fa 	slli	r14,r6,3
 800c6f4:	4800711e 	bne	r9,zero,800c8bc <__subdf3+0x234>
 800c6f8:	39c0005c 	xori	r7,r7,1
 800c6fc:	8291c83a 	sub	r8,r16,r10
 800c700:	19c05a26 	beq	r3,r7,800c86c <__subdf3+0x1e4>
 800c704:	0200720e 	bge	zero,r8,800c8d0 <__subdf3+0x248>
 800c708:	50008126 	beq	r10,zero,800c910 <__subdf3+0x288>
 800c70c:	8081ffd8 	cmpnei	r2,r16,2047
 800c710:	10011626 	beq	r2,zero,800cb6c <__subdf3+0x4e4>
 800c714:	5ac02034 	orhi	r11,r11,128
 800c718:	40800e48 	cmpgei	r2,r8,57
 800c71c:	1000fe1e 	bne	r2,zero,800cb18 <__subdf3+0x490>
 800c720:	40800808 	cmpgei	r2,r8,32
 800c724:	10015e1e 	bne	r2,zero,800cca0 <__subdf3+0x618>
 800c728:	00800804 	movi	r2,32
 800c72c:	1205c83a 	sub	r2,r2,r8
 800c730:	58a2983a 	sll	r17,r11,r2
 800c734:	7206d83a 	srl	r3,r14,r8
 800c738:	709c983a 	sll	r14,r14,r2
 800c73c:	5a04d83a 	srl	r2,r11,r8
 800c740:	88e2b03a 	or	r17,r17,r3
 800c744:	701cc03a 	cmpne	r14,r14,zero
 800c748:	8ba2b03a 	or	r17,r17,r14
 800c74c:	6099c83a 	sub	r12,r12,r2
 800c750:	6c63c83a 	sub	r17,r13,r17
 800c754:	6c49803a 	cmpltu	r4,r13,r17
 800c758:	6109c83a 	sub	r4,r12,r4
 800c75c:	2080202c 	andhi	r2,r4,128
 800c760:	10009f26 	beq	r2,zero,800c9e0 <__subdf3+0x358>
 800c764:	04c02034 	movhi	r19,128
 800c768:	9cffffc4 	addi	r19,r19,-1
 800c76c:	24e6703a 	and	r19,r4,r19
 800c770:	9800e026 	beq	r19,zero,800caf4 <__subdf3+0x46c>
 800c774:	9809883a 	mov	r4,r19
 800c778:	800d22c0 	call	800d22c <__clzsi2>
 800c77c:	123ffe04 	addi	r8,r2,-8
 800c780:	01000804 	movi	r4,32
 800c784:	2209c83a 	sub	r4,r4,r8
 800c788:	8906d83a 	srl	r3,r17,r4
 800c78c:	9a08983a 	sll	r4,r19,r8
 800c790:	8a22983a 	sll	r17,r17,r8
 800c794:	1908b03a 	or	r4,r3,r4
 800c798:	4400cf16 	blt	r8,r16,800cad8 <__subdf3+0x450>
 800c79c:	4411c83a 	sub	r8,r8,r16
 800c7a0:	40800044 	addi	r2,r8,1
 800c7a4:	10c00808 	cmpgei	r3,r2,32
 800c7a8:	1801251e 	bne	r3,zero,800cc40 <__subdf3+0x5b8>
 800c7ac:	00c00804 	movi	r3,32
 800c7b0:	1887c83a 	sub	r3,r3,r2
 800c7b4:	888ad83a 	srl	r5,r17,r2
 800c7b8:	88e2983a 	sll	r17,r17,r3
 800c7bc:	20c6983a 	sll	r3,r4,r3
 800c7c0:	2088d83a 	srl	r4,r4,r2
 800c7c4:	8822c03a 	cmpne	r17,r17,zero
 800c7c8:	1946b03a 	or	r3,r3,r5
 800c7cc:	1c62b03a 	or	r17,r3,r17
 800c7d0:	0021883a 	mov	r16,zero
 800c7d4:	888001cc 	andi	r2,r17,7
 800c7d8:	10000726 	beq	r2,zero,800c7f8 <__subdf3+0x170>
 800c7dc:	888003cc 	andi	r2,r17,15
 800c7e0:	10800120 	cmpeqi	r2,r2,4
 800c7e4:	1000041e 	bne	r2,zero,800c7f8 <__subdf3+0x170>
 800c7e8:	88c00104 	addi	r3,r17,4
 800c7ec:	1c63803a 	cmpltu	r17,r3,r17
 800c7f0:	2449883a 	add	r4,r4,r17
 800c7f4:	1823883a 	mov	r17,r3
 800c7f8:	2080202c 	andhi	r2,r4,128
 800c7fc:	10007a26 	beq	r2,zero,800c9e8 <__subdf3+0x360>
 800c800:	82000044 	addi	r8,r16,1
 800c804:	4081ffe0 	cmpeqi	r2,r8,2047
 800c808:	4201ffcc 	andi	r8,r8,2047
 800c80c:	10008c1e 	bne	r2,zero,800ca40 <__subdf3+0x3b8>
 800c810:	00bfe034 	movhi	r2,65408
 800c814:	10bfffc4 	addi	r2,r2,-1
 800c818:	2084703a 	and	r2,r4,r2
 800c81c:	1008927a 	slli	r4,r2,9
 800c820:	8822d0fa 	srli	r17,r17,3
 800c824:	100c977a 	slli	r6,r2,29
 800c828:	2008d33a 	srli	r4,r4,12
 800c82c:	3444b03a 	or	r2,r6,r17
 800c830:	4010953a 	slli	r8,r8,20
 800c834:	00c00434 	movhi	r3,16
 800c838:	94803fcc 	andi	r18,r18,255
 800c83c:	902497fa 	slli	r18,r18,31
 800c840:	18ffffc4 	addi	r3,r3,-1
 800c844:	20c6703a 	and	r3,r4,r3
 800c848:	1a06b03a 	or	r3,r3,r8
 800c84c:	1c86b03a 	or	r3,r3,r18
 800c850:	dfc00417 	ldw	ra,16(sp)
 800c854:	dcc00317 	ldw	r19,12(sp)
 800c858:	dc800217 	ldw	r18,8(sp)
 800c85c:	dc400117 	ldw	r17,4(sp)
 800c860:	dc000017 	ldw	r16,0(sp)
 800c864:	dec00504 	addi	sp,sp,20
 800c868:	f800283a 	ret
 800c86c:	0200320e 	bge	zero,r8,800c938 <__subdf3+0x2b0>
 800c870:	50004c26 	beq	r10,zero,800c9a4 <__subdf3+0x31c>
 800c874:	8081ffd8 	cmpnei	r2,r16,2047
 800c878:	1000bc26 	beq	r2,zero,800cb6c <__subdf3+0x4e4>
 800c87c:	5ac02034 	orhi	r11,r11,128
 800c880:	40800e48 	cmpgei	r2,r8,57
 800c884:	1000641e 	bne	r2,zero,800ca18 <__subdf3+0x390>
 800c888:	40800808 	cmpgei	r2,r8,32
 800c88c:	10011726 	beq	r2,zero,800ccec <__subdf3+0x664>
 800c890:	447ff804 	addi	r17,r8,-32
 800c894:	40800820 	cmpeqi	r2,r8,32
 800c898:	5c46d83a 	srl	r3,r11,r17
 800c89c:	1000041e 	bne	r2,zero,800c8b0 <__subdf3+0x228>
 800c8a0:	00801004 	movi	r2,64
 800c8a4:	1205c83a 	sub	r2,r2,r8
 800c8a8:	5884983a 	sll	r2,r11,r2
 800c8ac:	709cb03a 	or	r14,r14,r2
 800c8b0:	7022c03a 	cmpne	r17,r14,zero
 800c8b4:	88e2b03a 	or	r17,r17,r3
 800c8b8:	00005906 	br	800ca20 <__subdf3+0x398>
 800c8bc:	5b8ab03a 	or	r5,r11,r14
 800c8c0:	823e0044 	addi	r8,r16,-2047
 800c8c4:	28001a1e 	bne	r5,zero,800c930 <__subdf3+0x2a8>
 800c8c8:	39c0005c 	xori	r7,r7,1
 800c8cc:	19c01a26 	beq	r3,r7,800c938 <__subdf3+0x2b0>
 800c8d0:	4000291e 	bne	r8,zero,800c978 <__subdf3+0x2f0>
 800c8d4:	80800044 	addi	r2,r16,1
 800c8d8:	1081ff8c 	andi	r2,r2,2046
 800c8dc:	1000911e 	bne	r2,zero,800cb24 <__subdf3+0x49c>
 800c8e0:	6346b03a 	or	r3,r12,r13
 800c8e4:	5b84b03a 	or	r2,r11,r14
 800c8e8:	8001551e 	bne	r16,zero,800ce40 <__subdf3+0x7b8>
 800c8ec:	18011b26 	beq	r3,zero,800cd5c <__subdf3+0x6d4>
 800c8f0:	1001641e 	bne	r2,zero,800ce84 <__subdf3+0x7fc>
 800c8f4:	00880034 	movhi	r2,8192
 800c8f8:	6022977a 	slli	r17,r12,29
 800c8fc:	10bfffc4 	addi	r2,r2,-1
 800c900:	2088703a 	and	r4,r4,r2
 800c904:	2444b03a 	or	r2,r4,r17
 800c908:	6026d0fa 	srli	r19,r12,3
 800c90c:	00003d06 	br	800ca04 <__subdf3+0x37c>
 800c910:	5b84b03a 	or	r2,r11,r14
 800c914:	10008e26 	beq	r2,zero,800cb50 <__subdf3+0x4c8>
 800c918:	40bfffc4 	addi	r2,r8,-1
 800c91c:	10011f26 	beq	r2,zero,800cd9c <__subdf3+0x714>
 800c920:	4201ffd8 	cmpnei	r8,r8,2047
 800c924:	40012d26 	beq	r8,zero,800cddc <__subdf3+0x754>
 800c928:	1011883a 	mov	r8,r2
 800c92c:	003f7a06 	br	800c718 <__subdf3+0x90>
 800c930:	39c03fcc 	andi	r7,r7,255
 800c934:	19ffe61e 	bne	r3,r7,800c8d0 <__subdf3+0x248>
 800c938:	4000931e 	bne	r8,zero,800cb88 <__subdf3+0x500>
 800c93c:	80c00044 	addi	r3,r16,1
 800c940:	1881ff8c 	andi	r2,r3,2046
 800c944:	10012c1e 	bne	r2,zero,800cdf8 <__subdf3+0x770>
 800c948:	6344b03a 	or	r2,r12,r13
 800c94c:	8000f91e 	bne	r16,zero,800cd34 <__subdf3+0x6ac>
 800c950:	10017326 	beq	r2,zero,800cf20 <__subdf3+0x898>
 800c954:	5b84b03a 	or	r2,r11,r14
 800c958:	1001781e 	bne	r2,zero,800cf3c <__subdf3+0x8b4>
 800c95c:	6004977a 	slli	r2,r12,29
 800c960:	00c80034 	movhi	r3,8192
 800c964:	18ffffc4 	addi	r3,r3,-1
 800c968:	20c6703a 	and	r3,r4,r3
 800c96c:	10c4b03a 	or	r2,r2,r3
 800c970:	6026d0fa 	srli	r19,r12,3
 800c974:	00002306 	br	800ca04 <__subdf3+0x37c>
 800c978:	5411c83a 	sub	r8,r10,r16
 800c97c:	3825883a 	mov	r18,r7
 800c980:	8000991e 	bne	r16,zero,800cbe8 <__subdf3+0x560>
 800c984:	6344b03a 	or	r2,r12,r13
 800c988:	1000e326 	beq	r2,zero,800cd18 <__subdf3+0x690>
 800c98c:	40bfffc4 	addi	r2,r8,-1
 800c990:	10015d26 	beq	r2,zero,800cf08 <__subdf3+0x880>
 800c994:	4201ffd8 	cmpnei	r8,r8,2047
 800c998:	4000f926 	beq	r8,zero,800cd80 <__subdf3+0x6f8>
 800c99c:	1011883a 	mov	r8,r2
 800c9a0:	00009406 	br	800cbf4 <__subdf3+0x56c>
 800c9a4:	5b84b03a 	or	r2,r11,r14
 800c9a8:	10010226 	beq	r2,zero,800cdb4 <__subdf3+0x72c>
 800c9ac:	40bfffc4 	addi	r2,r8,-1
 800c9b0:	10000426 	beq	r2,zero,800c9c4 <__subdf3+0x33c>
 800c9b4:	4201ffd8 	cmpnei	r8,r8,2047
 800c9b8:	40014126 	beq	r8,zero,800cec0 <__subdf3+0x838>
 800c9bc:	1011883a 	mov	r8,r2
 800c9c0:	003faf06 	br	800c880 <__subdf3+0x1f8>
 800c9c4:	6ba3883a 	add	r17,r13,r14
 800c9c8:	62c9883a 	add	r4,r12,r11
 800c9cc:	8b5b803a 	cmpltu	r13,r17,r13
 800c9d0:	2349883a 	add	r4,r4,r13
 800c9d4:	2080202c 	andhi	r2,r4,128
 800c9d8:	1000a61e 	bne	r2,zero,800cc74 <__subdf3+0x5ec>
 800c9dc:	04000044 	movi	r16,1
 800c9e0:	888001cc 	andi	r2,r17,7
 800c9e4:	103f7d1e 	bne	r2,zero,800c7dc <__subdf3+0x154>
 800c9e8:	8822d0fa 	srli	r17,r17,3
 800c9ec:	2004977a 	slli	r2,r4,29
 800c9f0:	2026d0fa 	srli	r19,r4,3
 800c9f4:	8011883a 	mov	r8,r16
 800c9f8:	8884b03a 	or	r2,r17,r2
 800c9fc:	40c1ffe0 	cmpeqi	r3,r8,2047
 800ca00:	18002d1e 	bne	r3,zero,800cab8 <__subdf3+0x430>
 800ca04:	01000434 	movhi	r4,16
 800ca08:	213fffc4 	addi	r4,r4,-1
 800ca0c:	9908703a 	and	r4,r19,r4
 800ca10:	4201ffcc 	andi	r8,r8,2047
 800ca14:	003f8606 	br	800c830 <__subdf3+0x1a8>
 800ca18:	5ba2b03a 	or	r17,r11,r14
 800ca1c:	8822c03a 	cmpne	r17,r17,zero
 800ca20:	8b63883a 	add	r17,r17,r13
 800ca24:	8b49803a 	cmpltu	r4,r17,r13
 800ca28:	2309883a 	add	r4,r4,r12
 800ca2c:	2080202c 	andhi	r2,r4,128
 800ca30:	103feb26 	beq	r2,zero,800c9e0 <__subdf3+0x358>
 800ca34:	84000044 	addi	r16,r16,1
 800ca38:	8081ffe0 	cmpeqi	r2,r16,2047
 800ca3c:	10008e26 	beq	r2,zero,800cc78 <__subdf3+0x5f0>
 800ca40:	0201ffc4 	movi	r8,2047
 800ca44:	0009883a 	mov	r4,zero
 800ca48:	0005883a 	mov	r2,zero
 800ca4c:	003f7806 	br	800c830 <__subdf3+0x1a8>
 800ca50:	6010977a 	slli	r8,r12,29
 800ca54:	6026d0fa 	srli	r19,r12,3
 800ca58:	1000bb26 	beq	r2,zero,800cd48 <__subdf3+0x6c0>
 800ca5c:	01480034 	movhi	r5,8192
 800ca60:	297fffc4 	addi	r5,r5,-1
 800ca64:	2146703a 	and	r3,r4,r5
 800ca68:	9880022c 	andhi	r2,r19,8
 800ca6c:	1a06b03a 	or	r3,r3,r8
 800ca70:	10000826 	beq	r2,zero,800ca94 <__subdf3+0x40c>
 800ca74:	5808d0fa 	srli	r4,r11,3
 800ca78:	2080022c 	andhi	r2,r4,8
 800ca7c:	1000051e 	bne	r2,zero,800ca94 <__subdf3+0x40c>
 800ca80:	5804977a 	slli	r2,r11,29
 800ca84:	3146703a 	and	r3,r6,r5
 800ca88:	3825883a 	mov	r18,r7
 800ca8c:	1886b03a 	or	r3,r3,r2
 800ca90:	2027883a 	mov	r19,r4
 800ca94:	1804d77a 	srli	r2,r3,29
 800ca98:	980890fa 	slli	r4,r19,3
 800ca9c:	01480034 	movhi	r5,8192
 800caa0:	297fffc4 	addi	r5,r5,-1
 800caa4:	1108b03a 	or	r4,r2,r4
 800caa8:	2004977a 	slli	r2,r4,29
 800caac:	2026d0fa 	srli	r19,r4,3
 800cab0:	1946703a 	and	r3,r3,r5
 800cab4:	10c4b03a 	or	r2,r2,r3
 800cab8:	14c6b03a 	or	r3,r2,r19
 800cabc:	18014926 	beq	r3,zero,800cfe4 <__subdf3+0x95c>
 800cac0:	00c00434 	movhi	r3,16
 800cac4:	99000234 	orhi	r4,r19,8
 800cac8:	18ffffc4 	addi	r3,r3,-1
 800cacc:	20c8703a 	and	r4,r4,r3
 800cad0:	0201ffc4 	movi	r8,2047
 800cad4:	003f5606 	br	800c830 <__subdf3+0x1a8>
 800cad8:	00bfe034 	movhi	r2,65408
 800cadc:	10bfffc4 	addi	r2,r2,-1
 800cae0:	2088703a 	and	r4,r4,r2
 800cae4:	888001cc 	andi	r2,r17,7
 800cae8:	8221c83a 	sub	r16,r16,r8
 800caec:	103f3b1e 	bne	r2,zero,800c7dc <__subdf3+0x154>
 800caf0:	003fbd06 	br	800c9e8 <__subdf3+0x360>
 800caf4:	8809883a 	mov	r4,r17
 800caf8:	800d22c0 	call	800d22c <__clzsi2>
 800cafc:	12000604 	addi	r8,r2,24
 800cb00:	40c00808 	cmpgei	r3,r8,32
 800cb04:	183f1e26 	beq	r3,zero,800c780 <__subdf3+0xf8>
 800cb08:	113ffe04 	addi	r4,r2,-8
 800cb0c:	8908983a 	sll	r4,r17,r4
 800cb10:	0023883a 	mov	r17,zero
 800cb14:	003f2006 	br	800c798 <__subdf3+0x110>
 800cb18:	5ba2b03a 	or	r17,r11,r14
 800cb1c:	8822c03a 	cmpne	r17,r17,zero
 800cb20:	003f0b06 	br	800c750 <__subdf3+0xc8>
 800cb24:	6ba3c83a 	sub	r17,r13,r14
 800cb28:	62e7c83a 	sub	r19,r12,r11
 800cb2c:	6c49803a 	cmpltu	r4,r13,r17
 800cb30:	9927c83a 	sub	r19,r19,r4
 800cb34:	9880202c 	andhi	r2,r19,128
 800cb38:	1000bb1e 	bne	r2,zero,800ce28 <__subdf3+0x7a0>
 800cb3c:	8cc4b03a 	or	r2,r17,r19
 800cb40:	103f0b1e 	bne	r2,zero,800c770 <__subdf3+0xe8>
 800cb44:	0027883a 	mov	r19,zero
 800cb48:	0025883a 	mov	r18,zero
 800cb4c:	003fad06 	br	800ca04 <__subdf3+0x37c>
 800cb50:	00880034 	movhi	r2,8192
 800cb54:	6022977a 	slli	r17,r12,29
 800cb58:	10bfffc4 	addi	r2,r2,-1
 800cb5c:	2088703a 	and	r4,r4,r2
 800cb60:	2444b03a 	or	r2,r4,r17
 800cb64:	6026d0fa 	srli	r19,r12,3
 800cb68:	003fa406 	br	800c9fc <__subdf3+0x374>
 800cb6c:	00880034 	movhi	r2,8192
 800cb70:	6022977a 	slli	r17,r12,29
 800cb74:	10bfffc4 	addi	r2,r2,-1
 800cb78:	2088703a 	and	r4,r4,r2
 800cb7c:	2444b03a 	or	r2,r4,r17
 800cb80:	6026d0fa 	srli	r19,r12,3
 800cb84:	003fcc06 	br	800cab8 <__subdf3+0x430>
 800cb88:	5411c83a 	sub	r8,r10,r16
 800cb8c:	80004f26 	beq	r16,zero,800cccc <__subdf3+0x644>
 800cb90:	5081ffd8 	cmpnei	r2,r10,2047
 800cb94:	1000b426 	beq	r2,zero,800ce68 <__subdf3+0x7e0>
 800cb98:	63002034 	orhi	r12,r12,128
 800cb9c:	40800e48 	cmpgei	r2,r8,57
 800cba0:	1000c41e 	bne	r2,zero,800ceb4 <__subdf3+0x82c>
 800cba4:	40800808 	cmpgei	r2,r8,32
 800cba8:	1000f91e 	bne	r2,zero,800cf90 <__subdf3+0x908>
 800cbac:	00800804 	movi	r2,32
 800cbb0:	1205c83a 	sub	r2,r2,r8
 800cbb4:	60a2983a 	sll	r17,r12,r2
 800cbb8:	6a06d83a 	srl	r3,r13,r8
 800cbbc:	6884983a 	sll	r2,r13,r2
 800cbc0:	6210d83a 	srl	r8,r12,r8
 800cbc4:	88e2b03a 	or	r17,r17,r3
 800cbc8:	1004c03a 	cmpne	r2,r2,zero
 800cbcc:	88a2b03a 	or	r17,r17,r2
 800cbd0:	5a17883a 	add	r11,r11,r8
 800cbd4:	8ba3883a 	add	r17,r17,r14
 800cbd8:	8b85803a 	cmpltu	r2,r17,r14
 800cbdc:	12c9883a 	add	r4,r2,r11
 800cbe0:	5021883a 	mov	r16,r10
 800cbe4:	003f9106 	br	800ca2c <__subdf3+0x3a4>
 800cbe8:	5081ffd8 	cmpnei	r2,r10,2047
 800cbec:	10006426 	beq	r2,zero,800cd80 <__subdf3+0x6f8>
 800cbf0:	63002034 	orhi	r12,r12,128
 800cbf4:	40800e48 	cmpgei	r2,r8,57
 800cbf8:	1000751e 	bne	r2,zero,800cdd0 <__subdf3+0x748>
 800cbfc:	40800808 	cmpgei	r2,r8,32
 800cc00:	1000b61e 	bne	r2,zero,800cedc <__subdf3+0x854>
 800cc04:	00800804 	movi	r2,32
 800cc08:	1205c83a 	sub	r2,r2,r8
 800cc0c:	60a2983a 	sll	r17,r12,r2
 800cc10:	6a06d83a 	srl	r3,r13,r8
 800cc14:	6884983a 	sll	r2,r13,r2
 800cc18:	6210d83a 	srl	r8,r12,r8
 800cc1c:	88e2b03a 	or	r17,r17,r3
 800cc20:	1004c03a 	cmpne	r2,r2,zero
 800cc24:	88a2b03a 	or	r17,r17,r2
 800cc28:	5a17c83a 	sub	r11,r11,r8
 800cc2c:	7463c83a 	sub	r17,r14,r17
 800cc30:	7445803a 	cmpltu	r2,r14,r17
 800cc34:	5889c83a 	sub	r4,r11,r2
 800cc38:	5021883a 	mov	r16,r10
 800cc3c:	003ec706 	br	800c75c <__subdf3+0xd4>
 800cc40:	423ff844 	addi	r8,r8,-31
 800cc44:	10c00820 	cmpeqi	r3,r2,32
 800cc48:	2210d83a 	srl	r8,r4,r8
 800cc4c:	1800041e 	bne	r3,zero,800cc60 <__subdf3+0x5d8>
 800cc50:	00c01004 	movi	r3,64
 800cc54:	1885c83a 	sub	r2,r3,r2
 800cc58:	2088983a 	sll	r4,r4,r2
 800cc5c:	8922b03a 	or	r17,r17,r4
 800cc60:	8822c03a 	cmpne	r17,r17,zero
 800cc64:	8a22b03a 	or	r17,r17,r8
 800cc68:	0009883a 	mov	r4,zero
 800cc6c:	0021883a 	mov	r16,zero
 800cc70:	003f5b06 	br	800c9e0 <__subdf3+0x358>
 800cc74:	04000084 	movi	r16,2
 800cc78:	00bfe034 	movhi	r2,65408
 800cc7c:	10bfffc4 	addi	r2,r2,-1
 800cc80:	2084703a 	and	r2,r4,r2
 800cc84:	8806d07a 	srli	r3,r17,1
 800cc88:	100a97fa 	slli	r5,r2,31
 800cc8c:	8c40004c 	andi	r17,r17,1
 800cc90:	1c62b03a 	or	r17,r3,r17
 800cc94:	1008d07a 	srli	r4,r2,1
 800cc98:	2c62b03a 	or	r17,r5,r17
 800cc9c:	003ecd06 	br	800c7d4 <__subdf3+0x14c>
 800cca0:	447ff804 	addi	r17,r8,-32
 800cca4:	40800820 	cmpeqi	r2,r8,32
 800cca8:	5c46d83a 	srl	r3,r11,r17
 800ccac:	1000041e 	bne	r2,zero,800ccc0 <__subdf3+0x638>
 800ccb0:	00801004 	movi	r2,64
 800ccb4:	1205c83a 	sub	r2,r2,r8
 800ccb8:	5884983a 	sll	r2,r11,r2
 800ccbc:	709cb03a 	or	r14,r14,r2
 800ccc0:	7022c03a 	cmpne	r17,r14,zero
 800ccc4:	88e2b03a 	or	r17,r17,r3
 800ccc8:	003ea106 	br	800c750 <__subdf3+0xc8>
 800cccc:	6344b03a 	or	r2,r12,r13
 800ccd0:	1000a526 	beq	r2,zero,800cf68 <__subdf3+0x8e0>
 800ccd4:	40bfffc4 	addi	r2,r8,-1
 800ccd8:	1000bd26 	beq	r2,zero,800cfd0 <__subdf3+0x948>
 800ccdc:	4201ffd8 	cmpnei	r8,r8,2047
 800cce0:	40006126 	beq	r8,zero,800ce68 <__subdf3+0x7e0>
 800cce4:	1011883a 	mov	r8,r2
 800cce8:	003fac06 	br	800cb9c <__subdf3+0x514>
 800ccec:	00800804 	movi	r2,32
 800ccf0:	1205c83a 	sub	r2,r2,r8
 800ccf4:	58a2983a 	sll	r17,r11,r2
 800ccf8:	7206d83a 	srl	r3,r14,r8
 800ccfc:	709c983a 	sll	r14,r14,r2
 800cd00:	5a04d83a 	srl	r2,r11,r8
 800cd04:	88e2b03a 	or	r17,r17,r3
 800cd08:	701cc03a 	cmpne	r14,r14,zero
 800cd0c:	8ba2b03a 	or	r17,r17,r14
 800cd10:	6099883a 	add	r12,r12,r2
 800cd14:	003f4206 	br	800ca20 <__subdf3+0x398>
 800cd18:	5808977a 	slli	r4,r11,29
 800cd1c:	00c80034 	movhi	r3,8192
 800cd20:	18ffffc4 	addi	r3,r3,-1
 800cd24:	30cc703a 	and	r6,r6,r3
 800cd28:	2184b03a 	or	r2,r4,r6
 800cd2c:	5826d0fa 	srli	r19,r11,3
 800cd30:	003f3206 	br	800c9fc <__subdf3+0x374>
 800cd34:	10004c26 	beq	r2,zero,800ce68 <__subdf3+0x7e0>
 800cd38:	5b9cb03a 	or	r14,r11,r14
 800cd3c:	6010977a 	slli	r8,r12,29
 800cd40:	6026d0fa 	srli	r19,r12,3
 800cd44:	703f451e 	bne	r14,zero,800ca5c <__subdf3+0x3d4>
 800cd48:	00880034 	movhi	r2,8192
 800cd4c:	10bfffc4 	addi	r2,r2,-1
 800cd50:	2084703a 	and	r2,r4,r2
 800cd54:	1204b03a 	or	r2,r2,r8
 800cd58:	003f5706 	br	800cab8 <__subdf3+0x430>
 800cd5c:	103f7926 	beq	r2,zero,800cb44 <__subdf3+0x4bc>
 800cd60:	5804977a 	slli	r2,r11,29
 800cd64:	00c80034 	movhi	r3,8192
 800cd68:	18ffffc4 	addi	r3,r3,-1
 800cd6c:	30c6703a 	and	r3,r6,r3
 800cd70:	10c4b03a 	or	r2,r2,r3
 800cd74:	5826d0fa 	srli	r19,r11,3
 800cd78:	3825883a 	mov	r18,r7
 800cd7c:	003f2106 	br	800ca04 <__subdf3+0x37c>
 800cd80:	5804977a 	slli	r2,r11,29
 800cd84:	00c80034 	movhi	r3,8192
 800cd88:	18ffffc4 	addi	r3,r3,-1
 800cd8c:	30c6703a 	and	r3,r6,r3
 800cd90:	10c4b03a 	or	r2,r2,r3
 800cd94:	5826d0fa 	srli	r19,r11,3
 800cd98:	003f4706 	br	800cab8 <__subdf3+0x430>
 800cd9c:	6ba3c83a 	sub	r17,r13,r14
 800cda0:	62c9c83a 	sub	r4,r12,r11
 800cda4:	6c5b803a 	cmpltu	r13,r13,r17
 800cda8:	2349c83a 	sub	r4,r4,r13
 800cdac:	04000044 	movi	r16,1
 800cdb0:	003e6a06 	br	800c75c <__subdf3+0xd4>
 800cdb4:	6004977a 	slli	r2,r12,29
 800cdb8:	00c80034 	movhi	r3,8192
 800cdbc:	18ffffc4 	addi	r3,r3,-1
 800cdc0:	20c8703a 	and	r4,r4,r3
 800cdc4:	1104b03a 	or	r2,r2,r4
 800cdc8:	6026d0fa 	srli	r19,r12,3
 800cdcc:	003f0b06 	br	800c9fc <__subdf3+0x374>
 800cdd0:	6366b03a 	or	r19,r12,r13
 800cdd4:	9822c03a 	cmpne	r17,r19,zero
 800cdd8:	003f9406 	br	800cc2c <__subdf3+0x5a4>
 800cddc:	6004977a 	slli	r2,r12,29
 800cde0:	00c80034 	movhi	r3,8192
 800cde4:	18ffffc4 	addi	r3,r3,-1
 800cde8:	20c8703a 	and	r4,r4,r3
 800cdec:	1104b03a 	or	r2,r2,r4
 800cdf0:	6026d0fa 	srli	r19,r12,3
 800cdf4:	003f3006 	br	800cab8 <__subdf3+0x430>
 800cdf8:	1881ffe0 	cmpeqi	r2,r3,2047
 800cdfc:	103f101e 	bne	r2,zero,800ca40 <__subdf3+0x3b8>
 800ce00:	6b9d883a 	add	r14,r13,r14
 800ce04:	62c9883a 	add	r4,r12,r11
 800ce08:	7345803a 	cmpltu	r2,r14,r13
 800ce0c:	2085883a 	add	r2,r4,r2
 800ce10:	102297fa 	slli	r17,r2,31
 800ce14:	701cd07a 	srli	r14,r14,1
 800ce18:	1008d07a 	srli	r4,r2,1
 800ce1c:	1821883a 	mov	r16,r3
 800ce20:	8ba2b03a 	or	r17,r17,r14
 800ce24:	003eee06 	br	800c9e0 <__subdf3+0x358>
 800ce28:	7363c83a 	sub	r17,r14,r13
 800ce2c:	5b09c83a 	sub	r4,r11,r12
 800ce30:	7467803a 	cmpltu	r19,r14,r17
 800ce34:	24e7c83a 	sub	r19,r4,r19
 800ce38:	3825883a 	mov	r18,r7
 800ce3c:	003e4c06 	br	800c770 <__subdf3+0xe8>
 800ce40:	183f031e 	bne	r3,zero,800ca50 <__subdf3+0x3c8>
 800ce44:	10005d26 	beq	r2,zero,800cfbc <__subdf3+0x934>
 800ce48:	00880034 	movhi	r2,8192
 800ce4c:	5806977a 	slli	r3,r11,29
 800ce50:	10bfffc4 	addi	r2,r2,-1
 800ce54:	3084703a 	and	r2,r6,r2
 800ce58:	10c4b03a 	or	r2,r2,r3
 800ce5c:	5826d0fa 	srli	r19,r11,3
 800ce60:	3825883a 	mov	r18,r7
 800ce64:	003f1406 	br	800cab8 <__subdf3+0x430>
 800ce68:	00880034 	movhi	r2,8192
 800ce6c:	5806977a 	slli	r3,r11,29
 800ce70:	10bfffc4 	addi	r2,r2,-1
 800ce74:	3084703a 	and	r2,r6,r2
 800ce78:	10c4b03a 	or	r2,r2,r3
 800ce7c:	5826d0fa 	srli	r19,r11,3
 800ce80:	003f0d06 	br	800cab8 <__subdf3+0x430>
 800ce84:	6ba3c83a 	sub	r17,r13,r14
 800ce88:	62c5c83a 	sub	r2,r12,r11
 800ce8c:	6c49803a 	cmpltu	r4,r13,r17
 800ce90:	1109c83a 	sub	r4,r2,r4
 800ce94:	2080202c 	andhi	r2,r4,128
 800ce98:	10003a26 	beq	r2,zero,800cf84 <__subdf3+0x8fc>
 800ce9c:	7363c83a 	sub	r17,r14,r13
 800cea0:	5b09c83a 	sub	r4,r11,r12
 800cea4:	745d803a 	cmpltu	r14,r14,r17
 800cea8:	2389c83a 	sub	r4,r4,r14
 800ceac:	3825883a 	mov	r18,r7
 800ceb0:	003e4806 	br	800c7d4 <__subdf3+0x14c>
 800ceb4:	6362b03a 	or	r17,r12,r13
 800ceb8:	8822c03a 	cmpne	r17,r17,zero
 800cebc:	003f4506 	br	800cbd4 <__subdf3+0x54c>
 800cec0:	6004977a 	slli	r2,r12,29
 800cec4:	00c80034 	movhi	r3,8192
 800cec8:	18ffffc4 	addi	r3,r3,-1
 800cecc:	20c6703a 	and	r3,r4,r3
 800ced0:	10c4b03a 	or	r2,r2,r3
 800ced4:	6026d0fa 	srli	r19,r12,3
 800ced8:	003ef706 	br	800cab8 <__subdf3+0x430>
 800cedc:	40bff804 	addi	r2,r8,-32
 800cee0:	40c00820 	cmpeqi	r3,r8,32
 800cee4:	6084d83a 	srl	r2,r12,r2
 800cee8:	1800041e 	bne	r3,zero,800cefc <__subdf3+0x874>
 800ceec:	04c01004 	movi	r19,64
 800cef0:	9a11c83a 	sub	r8,r19,r8
 800cef4:	6226983a 	sll	r19,r12,r8
 800cef8:	6cdab03a 	or	r13,r13,r19
 800cefc:	6822c03a 	cmpne	r17,r13,zero
 800cf00:	88a2b03a 	or	r17,r17,r2
 800cf04:	003f4906 	br	800cc2c <__subdf3+0x5a4>
 800cf08:	7363c83a 	sub	r17,r14,r13
 800cf0c:	5b09c83a 	sub	r4,r11,r12
 800cf10:	745d803a 	cmpltu	r14,r14,r17
 800cf14:	2389c83a 	sub	r4,r4,r14
 800cf18:	04000044 	movi	r16,1
 800cf1c:	003e0f06 	br	800c75c <__subdf3+0xd4>
 800cf20:	00880034 	movhi	r2,8192
 800cf24:	5806977a 	slli	r3,r11,29
 800cf28:	10bfffc4 	addi	r2,r2,-1
 800cf2c:	3084703a 	and	r2,r6,r2
 800cf30:	10c4b03a 	or	r2,r2,r3
 800cf34:	5826d0fa 	srli	r19,r11,3
 800cf38:	003eb206 	br	800ca04 <__subdf3+0x37c>
 800cf3c:	6ba3883a 	add	r17,r13,r14
 800cf40:	62c9883a 	add	r4,r12,r11
 800cf44:	8b5b803a 	cmpltu	r13,r17,r13
 800cf48:	2349883a 	add	r4,r4,r13
 800cf4c:	2080202c 	andhi	r2,r4,128
 800cf50:	103ea326 	beq	r2,zero,800c9e0 <__subdf3+0x358>
 800cf54:	00bfe034 	movhi	r2,65408
 800cf58:	10bfffc4 	addi	r2,r2,-1
 800cf5c:	2088703a 	and	r4,r4,r2
 800cf60:	04000044 	movi	r16,1
 800cf64:	003e9e06 	br	800c9e0 <__subdf3+0x358>
 800cf68:	00880034 	movhi	r2,8192
 800cf6c:	5806977a 	slli	r3,r11,29
 800cf70:	10bfffc4 	addi	r2,r2,-1
 800cf74:	3084703a 	and	r2,r6,r2
 800cf78:	10c4b03a 	or	r2,r2,r3
 800cf7c:	5826d0fa 	srli	r19,r11,3
 800cf80:	003e9e06 	br	800c9fc <__subdf3+0x374>
 800cf84:	8904b03a 	or	r2,r17,r4
 800cf88:	103eee26 	beq	r2,zero,800cb44 <__subdf3+0x4bc>
 800cf8c:	003e9406 	br	800c9e0 <__subdf3+0x358>
 800cf90:	40bff804 	addi	r2,r8,-32
 800cf94:	40c00820 	cmpeqi	r3,r8,32
 800cf98:	6084d83a 	srl	r2,r12,r2
 800cf9c:	1800041e 	bne	r3,zero,800cfb0 <__subdf3+0x928>
 800cfa0:	04c01004 	movi	r19,64
 800cfa4:	9a11c83a 	sub	r8,r19,r8
 800cfa8:	6226983a 	sll	r19,r12,r8
 800cfac:	6cdab03a 	or	r13,r13,r19
 800cfb0:	6822c03a 	cmpne	r17,r13,zero
 800cfb4:	88a2b03a 	or	r17,r17,r2
 800cfb8:	003f0606 	br	800cbd4 <__subdf3+0x54c>
 800cfbc:	04c00434 	movhi	r19,16
 800cfc0:	9cffffc4 	addi	r19,r19,-1
 800cfc4:	0025883a 	mov	r18,zero
 800cfc8:	00bfffc4 	movi	r2,-1
 800cfcc:	003ebc06 	br	800cac0 <__subdf3+0x438>
 800cfd0:	6ba3883a 	add	r17,r13,r14
 800cfd4:	62c9883a 	add	r4,r12,r11
 800cfd8:	8b9d803a 	cmpltu	r14,r17,r14
 800cfdc:	2389883a 	add	r4,r4,r14
 800cfe0:	003e7c06 	br	800c9d4 <__subdf3+0x34c>
 800cfe4:	0005883a 	mov	r2,zero
 800cfe8:	0201ffc4 	movi	r8,2047
 800cfec:	0009883a 	mov	r4,zero
 800cff0:	003e0f06 	br	800c830 <__subdf3+0x1a8>

0800cff4 <__unorddf2>:
 800cff4:	2806d53a 	srli	r3,r5,20
 800cff8:	3810d53a 	srli	r8,r7,20
 800cffc:	00800434 	movhi	r2,16
 800d000:	18c1ffcc 	andi	r3,r3,2047
 800d004:	10bfffc4 	addi	r2,r2,-1
 800d008:	18c1ffd8 	cmpnei	r3,r3,2047
 800d00c:	288a703a 	and	r5,r5,r2
 800d010:	388e703a 	and	r7,r7,r2
 800d014:	4201ffcc 	andi	r8,r8,2047
 800d018:	18000426 	beq	r3,zero,800d02c <__unorddf2+0x38>
 800d01c:	4201ffd8 	cmpnei	r8,r8,2047
 800d020:	40000626 	beq	r8,zero,800d03c <__unorddf2+0x48>
 800d024:	0005883a 	mov	r2,zero
 800d028:	f800283a 	ret
 800d02c:	214ab03a 	or	r5,r4,r5
 800d030:	283ffa26 	beq	r5,zero,800d01c <__unorddf2+0x28>
 800d034:	00800044 	movi	r2,1
 800d038:	f800283a 	ret
 800d03c:	398eb03a 	or	r7,r7,r6
 800d040:	3804c03a 	cmpne	r2,r7,zero
 800d044:	f800283a 	ret

0800d048 <__fixdfsi>:
 800d048:	280cd53a 	srli	r6,r5,20
 800d04c:	00c00434 	movhi	r3,16
 800d050:	18ffffc4 	addi	r3,r3,-1
 800d054:	3181ffcc 	andi	r6,r6,2047
 800d058:	31c0ffd0 	cmplti	r7,r6,1023
 800d05c:	28c6703a 	and	r3,r5,r3
 800d060:	280ad7fa 	srli	r5,r5,31
 800d064:	3800061e 	bne	r7,zero,800d080 <__fixdfsi+0x38>
 800d068:	30810790 	cmplti	r2,r6,1054
 800d06c:	1000061e 	bne	r2,zero,800d088 <__fixdfsi+0x40>
 800d070:	00a00034 	movhi	r2,32768
 800d074:	10bfffc4 	addi	r2,r2,-1
 800d078:	2885883a 	add	r2,r5,r2
 800d07c:	f800283a 	ret
 800d080:	0005883a 	mov	r2,zero
 800d084:	f800283a 	ret
 800d088:	00810cc4 	movi	r2,1075
 800d08c:	118fc83a 	sub	r7,r2,r6
 800d090:	38800808 	cmpgei	r2,r7,32
 800d094:	18c00434 	orhi	r3,r3,16
 800d098:	1000071e 	bne	r2,zero,800d0b8 <__fixdfsi+0x70>
 800d09c:	30befb44 	addi	r2,r6,-1043
 800d0a0:	1886983a 	sll	r3,r3,r2
 800d0a4:	21c4d83a 	srl	r2,r4,r7
 800d0a8:	1884b03a 	or	r2,r3,r2
 800d0ac:	283ff526 	beq	r5,zero,800d084 <__fixdfsi+0x3c>
 800d0b0:	0085c83a 	sub	r2,zero,r2
 800d0b4:	f800283a 	ret
 800d0b8:	008104c4 	movi	r2,1043
 800d0bc:	1185c83a 	sub	r2,r2,r6
 800d0c0:	1884d83a 	srl	r2,r3,r2
 800d0c4:	003ff906 	br	800d0ac <__fixdfsi+0x64>

0800d0c8 <__floatsidf>:
 800d0c8:	defffd04 	addi	sp,sp,-12
 800d0cc:	dfc00215 	stw	ra,8(sp)
 800d0d0:	dc400115 	stw	r17,4(sp)
 800d0d4:	dc000015 	stw	r16,0(sp)
 800d0d8:	20001326 	beq	r4,zero,800d128 <__floatsidf+0x60>
 800d0dc:	2021883a 	mov	r16,r4
 800d0e0:	2022d7fa 	srli	r17,r4,31
 800d0e4:	20002116 	blt	r4,zero,800d16c <__floatsidf+0xa4>
 800d0e8:	8009883a 	mov	r4,r16
 800d0ec:	800d22c0 	call	800d22c <__clzsi2>
 800d0f0:	01010784 	movi	r4,1054
 800d0f4:	2089c83a 	sub	r4,r4,r2
 800d0f8:	10c002c8 	cmpgei	r3,r2,11
 800d0fc:	2101ffcc 	andi	r4,r4,2047
 800d100:	18001c1e 	bne	r3,zero,800d174 <__floatsidf+0xac>
 800d104:	018002c4 	movi	r6,11
 800d108:	308dc83a 	sub	r6,r6,r2
 800d10c:	818ad83a 	srl	r5,r16,r6
 800d110:	00c00434 	movhi	r3,16
 800d114:	10800544 	addi	r2,r2,21
 800d118:	18ffffc4 	addi	r3,r3,-1
 800d11c:	8084983a 	sll	r2,r16,r2
 800d120:	28ca703a 	and	r5,r5,r3
 800d124:	00000406 	br	800d138 <__floatsidf+0x70>
 800d128:	0023883a 	mov	r17,zero
 800d12c:	0009883a 	mov	r4,zero
 800d130:	000b883a 	mov	r5,zero
 800d134:	0005883a 	mov	r2,zero
 800d138:	2008953a 	slli	r4,r4,20
 800d13c:	8c403fcc 	andi	r17,r17,255
 800d140:	01800434 	movhi	r6,16
 800d144:	31bfffc4 	addi	r6,r6,-1
 800d148:	880697fa 	slli	r3,r17,31
 800d14c:	298a703a 	and	r5,r5,r6
 800d150:	290ab03a 	or	r5,r5,r4
 800d154:	28c6b03a 	or	r3,r5,r3
 800d158:	dfc00217 	ldw	ra,8(sp)
 800d15c:	dc400117 	ldw	r17,4(sp)
 800d160:	dc000017 	ldw	r16,0(sp)
 800d164:	dec00304 	addi	sp,sp,12
 800d168:	f800283a 	ret
 800d16c:	0121c83a 	sub	r16,zero,r4
 800d170:	003fdd06 	br	800d0e8 <__floatsidf+0x20>
 800d174:	10bffd44 	addi	r2,r2,-11
 800d178:	808a983a 	sll	r5,r16,r2
 800d17c:	00800434 	movhi	r2,16
 800d180:	10bfffc4 	addi	r2,r2,-1
 800d184:	288a703a 	and	r5,r5,r2
 800d188:	0005883a 	mov	r2,zero
 800d18c:	003fea06 	br	800d138 <__floatsidf+0x70>

0800d190 <__floatunsidf>:
 800d190:	defffe04 	addi	sp,sp,-8
 800d194:	dc000015 	stw	r16,0(sp)
 800d198:	dfc00115 	stw	ra,4(sp)
 800d19c:	2021883a 	mov	r16,r4
 800d1a0:	20000f26 	beq	r4,zero,800d1e0 <__floatunsidf+0x50>
 800d1a4:	800d22c0 	call	800d22c <__clzsi2>
 800d1a8:	01010784 	movi	r4,1054
 800d1ac:	2089c83a 	sub	r4,r4,r2
 800d1b0:	10c002c8 	cmpgei	r3,r2,11
 800d1b4:	2101ffcc 	andi	r4,r4,2047
 800d1b8:	1800151e 	bne	r3,zero,800d210 <__floatunsidf+0x80>
 800d1bc:	00c002c4 	movi	r3,11
 800d1c0:	1887c83a 	sub	r3,r3,r2
 800d1c4:	80c6d83a 	srl	r3,r16,r3
 800d1c8:	01400434 	movhi	r5,16
 800d1cc:	10800544 	addi	r2,r2,21
 800d1d0:	297fffc4 	addi	r5,r5,-1
 800d1d4:	80a0983a 	sll	r16,r16,r2
 800d1d8:	1944703a 	and	r2,r3,r5
 800d1dc:	00000206 	br	800d1e8 <__floatunsidf+0x58>
 800d1e0:	0009883a 	mov	r4,zero
 800d1e4:	0005883a 	mov	r2,zero
 800d1e8:	2008953a 	slli	r4,r4,20
 800d1ec:	00c00434 	movhi	r3,16
 800d1f0:	18ffffc4 	addi	r3,r3,-1
 800d1f4:	10c6703a 	and	r3,r2,r3
 800d1f8:	1906b03a 	or	r3,r3,r4
 800d1fc:	8005883a 	mov	r2,r16
 800d200:	dfc00117 	ldw	ra,4(sp)
 800d204:	dc000017 	ldw	r16,0(sp)
 800d208:	dec00204 	addi	sp,sp,8
 800d20c:	f800283a 	ret
 800d210:	10bffd44 	addi	r2,r2,-11
 800d214:	8084983a 	sll	r2,r16,r2
 800d218:	00c00434 	movhi	r3,16
 800d21c:	18ffffc4 	addi	r3,r3,-1
 800d220:	10c4703a 	and	r2,r2,r3
 800d224:	0021883a 	mov	r16,zero
 800d228:	003fef06 	br	800d1e8 <__floatunsidf+0x58>

0800d22c <__clzsi2>:
 800d22c:	00bfffd4 	movui	r2,65535
 800d230:	11000b36 	bltu	r2,r4,800d260 <__clzsi2+0x34>
 800d234:	20804030 	cmpltui	r2,r4,256
 800d238:	1000071e 	bne	r2,zero,800d258 <__clzsi2+0x2c>
 800d23c:	2008d23a 	srli	r4,r4,8
 800d240:	01400604 	movi	r5,24
 800d244:	00c20074 	movhi	r3,2049
 800d248:	20c7883a 	add	r3,r4,r3
 800d24c:	18800543 	ldbu	r2,21(r3)
 800d250:	2885c83a 	sub	r2,r5,r2
 800d254:	f800283a 	ret
 800d258:	01400804 	movi	r5,32
 800d25c:	003ff906 	br	800d244 <__clzsi2+0x18>
 800d260:	00804034 	movhi	r2,256
 800d264:	20800336 	bltu	r4,r2,800d274 <__clzsi2+0x48>
 800d268:	2008d63a 	srli	r4,r4,24
 800d26c:	01400204 	movi	r5,8
 800d270:	003ff406 	br	800d244 <__clzsi2+0x18>
 800d274:	2008d43a 	srli	r4,r4,16
 800d278:	01400404 	movi	r5,16
 800d27c:	003ff106 	br	800d244 <__clzsi2+0x18>

0800d280 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800d280:	defffe04 	addi	sp,sp,-8
 800d284:	dfc00115 	stw	ra,4(sp)
 800d288:	df000015 	stw	fp,0(sp)
 800d28c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d290:	d0a00a17 	ldw	r2,-32728(gp)
 800d294:	10000326 	beq	r2,zero,800d2a4 <alt_get_errno+0x24>
 800d298:	d0a00a17 	ldw	r2,-32728(gp)
 800d29c:	103ee83a 	callr	r2
 800d2a0:	00000106 	br	800d2a8 <alt_get_errno+0x28>
 800d2a4:	d0a70904 	addi	r2,gp,-25564
}
 800d2a8:	e037883a 	mov	sp,fp
 800d2ac:	dfc00117 	ldw	ra,4(sp)
 800d2b0:	df000017 	ldw	fp,0(sp)
 800d2b4:	dec00204 	addi	sp,sp,8
 800d2b8:	f800283a 	ret

0800d2bc <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800d2bc:	defffb04 	addi	sp,sp,-20
 800d2c0:	dfc00415 	stw	ra,16(sp)
 800d2c4:	df000315 	stw	fp,12(sp)
 800d2c8:	df000304 	addi	fp,sp,12
 800d2cc:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800d2d0:	e0bffd17 	ldw	r2,-12(fp)
 800d2d4:	10000916 	blt	r2,zero,800d2fc <close+0x40>
 800d2d8:	e0fffd17 	ldw	r3,-12(fp)
 800d2dc:	1805883a 	mov	r2,r3
 800d2e0:	1085883a 	add	r2,r2,r2
 800d2e4:	10c5883a 	add	r2,r2,r3
 800d2e8:	100490ba 	slli	r2,r2,2
 800d2ec:	00c20074 	movhi	r3,2049
 800d2f0:	18c2c304 	addi	r3,r3,2828
 800d2f4:	10c5883a 	add	r2,r2,r3
 800d2f8:	00000106 	br	800d300 <close+0x44>
 800d2fc:	0005883a 	mov	r2,zero
 800d300:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 800d304:	e0bfff17 	ldw	r2,-4(fp)
 800d308:	10001926 	beq	r2,zero,800d370 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800d30c:	e0bfff17 	ldw	r2,-4(fp)
 800d310:	10800017 	ldw	r2,0(r2)
 800d314:	10800417 	ldw	r2,16(r2)
 800d318:	10000626 	beq	r2,zero,800d334 <close+0x78>
 800d31c:	e0bfff17 	ldw	r2,-4(fp)
 800d320:	10800017 	ldw	r2,0(r2)
 800d324:	10800417 	ldw	r2,16(r2)
 800d328:	e13fff17 	ldw	r4,-4(fp)
 800d32c:	103ee83a 	callr	r2
 800d330:	00000106 	br	800d338 <close+0x7c>
 800d334:	0005883a 	mov	r2,zero
 800d338:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800d33c:	e13ffd17 	ldw	r4,-12(fp)
 800d340:	800d9b80 	call	800d9b8 <alt_release_fd>
    if (rval < 0)
 800d344:	e0bffe17 	ldw	r2,-8(fp)
 800d348:	1000070e 	bge	r2,zero,800d368 <close+0xac>
    {
      ALT_ERRNO = -rval;
 800d34c:	800d2800 	call	800d280 <alt_get_errno>
 800d350:	1007883a 	mov	r3,r2
 800d354:	e0bffe17 	ldw	r2,-8(fp)
 800d358:	0085c83a 	sub	r2,zero,r2
 800d35c:	18800015 	stw	r2,0(r3)
      return -1;
 800d360:	00bfffc4 	movi	r2,-1
 800d364:	00000706 	br	800d384 <close+0xc8>
    }
    return 0;
 800d368:	0005883a 	mov	r2,zero
 800d36c:	00000506 	br	800d384 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d370:	800d2800 	call	800d280 <alt_get_errno>
 800d374:	1007883a 	mov	r3,r2
 800d378:	00801444 	movi	r2,81
 800d37c:	18800015 	stw	r2,0(r3)
    return -1;
 800d380:	00bfffc4 	movi	r2,-1
  }
}
 800d384:	e037883a 	mov	sp,fp
 800d388:	dfc00117 	ldw	ra,4(sp)
 800d38c:	df000017 	ldw	fp,0(sp)
 800d390:	dec00204 	addi	sp,sp,8
 800d394:	f800283a 	ret

0800d398 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800d398:	defffc04 	addi	sp,sp,-16
 800d39c:	df000315 	stw	fp,12(sp)
 800d3a0:	df000304 	addi	fp,sp,12
 800d3a4:	e13fff15 	stw	r4,-4(fp)
 800d3a8:	e17ffe15 	stw	r5,-8(fp)
 800d3ac:	e1bffd15 	stw	r6,-12(fp)
  return len;
 800d3b0:	e0bffd17 	ldw	r2,-12(fp)
}
 800d3b4:	e037883a 	mov	sp,fp
 800d3b8:	df000017 	ldw	fp,0(sp)
 800d3bc:	dec00104 	addi	sp,sp,4
 800d3c0:	f800283a 	ret

0800d3c4 <alt_get_errno>:
{
 800d3c4:	defffe04 	addi	sp,sp,-8
 800d3c8:	dfc00115 	stw	ra,4(sp)
 800d3cc:	df000015 	stw	fp,0(sp)
 800d3d0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d3d4:	d0a00a17 	ldw	r2,-32728(gp)
 800d3d8:	10000326 	beq	r2,zero,800d3e8 <alt_get_errno+0x24>
 800d3dc:	d0a00a17 	ldw	r2,-32728(gp)
 800d3e0:	103ee83a 	callr	r2
 800d3e4:	00000106 	br	800d3ec <alt_get_errno+0x28>
 800d3e8:	d0a70904 	addi	r2,gp,-25564
}
 800d3ec:	e037883a 	mov	sp,fp
 800d3f0:	dfc00117 	ldw	ra,4(sp)
 800d3f4:	df000017 	ldw	fp,0(sp)
 800d3f8:	dec00204 	addi	sp,sp,8
 800d3fc:	f800283a 	ret

0800d400 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 800d400:	defffb04 	addi	sp,sp,-20
 800d404:	dfc00415 	stw	ra,16(sp)
 800d408:	df000315 	stw	fp,12(sp)
 800d40c:	df000304 	addi	fp,sp,12
 800d410:	e13ffe15 	stw	r4,-8(fp)
 800d414:	e17ffd15 	stw	r5,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d418:	e0bffe17 	ldw	r2,-8(fp)
 800d41c:	10000916 	blt	r2,zero,800d444 <fstat+0x44>
 800d420:	e0fffe17 	ldw	r3,-8(fp)
 800d424:	1805883a 	mov	r2,r3
 800d428:	1085883a 	add	r2,r2,r2
 800d42c:	10c5883a 	add	r2,r2,r3
 800d430:	100490ba 	slli	r2,r2,2
 800d434:	00c20074 	movhi	r3,2049
 800d438:	18c2c304 	addi	r3,r3,2828
 800d43c:	10c5883a 	add	r2,r2,r3
 800d440:	00000106 	br	800d448 <fstat+0x48>
 800d444:	0005883a 	mov	r2,zero
 800d448:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800d44c:	e0bfff17 	ldw	r2,-4(fp)
 800d450:	10001026 	beq	r2,zero,800d494 <fstat+0x94>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 800d454:	e0bfff17 	ldw	r2,-4(fp)
 800d458:	10800017 	ldw	r2,0(r2)
 800d45c:	10800817 	ldw	r2,32(r2)
 800d460:	10000726 	beq	r2,zero,800d480 <fstat+0x80>
    {
      return fd->dev->fstat(fd, st);
 800d464:	e0bfff17 	ldw	r2,-4(fp)
 800d468:	10800017 	ldw	r2,0(r2)
 800d46c:	10800817 	ldw	r2,32(r2)
 800d470:	e17ffd17 	ldw	r5,-12(fp)
 800d474:	e13fff17 	ldw	r4,-4(fp)
 800d478:	103ee83a 	callr	r2
 800d47c:	00000a06 	br	800d4a8 <fstat+0xa8>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 800d480:	e0bffd17 	ldw	r2,-12(fp)
 800d484:	00c80004 	movi	r3,8192
 800d488:	10c00115 	stw	r3,4(r2)
      return 0;
 800d48c:	0005883a 	mov	r2,zero
 800d490:	00000506 	br	800d4a8 <fstat+0xa8>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d494:	800d3c40 	call	800d3c4 <alt_get_errno>
 800d498:	1007883a 	mov	r3,r2
 800d49c:	00801444 	movi	r2,81
 800d4a0:	18800015 	stw	r2,0(r3)
    return -1;
 800d4a4:	00bfffc4 	movi	r2,-1
  }
}
 800d4a8:	e037883a 	mov	sp,fp
 800d4ac:	dfc00117 	ldw	ra,4(sp)
 800d4b0:	df000017 	ldw	fp,0(sp)
 800d4b4:	dec00204 	addi	sp,sp,8
 800d4b8:	f800283a 	ret

0800d4bc <alt_get_errno>:
{
 800d4bc:	defffe04 	addi	sp,sp,-8
 800d4c0:	dfc00115 	stw	ra,4(sp)
 800d4c4:	df000015 	stw	fp,0(sp)
 800d4c8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d4cc:	d0a00a17 	ldw	r2,-32728(gp)
 800d4d0:	10000326 	beq	r2,zero,800d4e0 <alt_get_errno+0x24>
 800d4d4:	d0a00a17 	ldw	r2,-32728(gp)
 800d4d8:	103ee83a 	callr	r2
 800d4dc:	00000106 	br	800d4e4 <alt_get_errno+0x28>
 800d4e0:	d0a70904 	addi	r2,gp,-25564
}
 800d4e4:	e037883a 	mov	sp,fp
 800d4e8:	dfc00117 	ldw	ra,4(sp)
 800d4ec:	df000017 	ldw	fp,0(sp)
 800d4f0:	dec00204 	addi	sp,sp,8
 800d4f4:	f800283a 	ret

0800d4f8 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 800d4f8:	deffea04 	addi	sp,sp,-88
 800d4fc:	dfc01515 	stw	ra,84(sp)
 800d500:	df001415 	stw	fp,80(sp)
 800d504:	df001404 	addi	fp,sp,80
 800d508:	e13fec15 	stw	r4,-80(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d50c:	e0bfec17 	ldw	r2,-80(fp)
 800d510:	10000916 	blt	r2,zero,800d538 <isatty+0x40>
 800d514:	e0ffec17 	ldw	r3,-80(fp)
 800d518:	1805883a 	mov	r2,r3
 800d51c:	1085883a 	add	r2,r2,r2
 800d520:	10c5883a 	add	r2,r2,r3
 800d524:	100490ba 	slli	r2,r2,2
 800d528:	00c20074 	movhi	r3,2049
 800d52c:	18c2c304 	addi	r3,r3,2828
 800d530:	10c5883a 	add	r2,r2,r3
 800d534:	00000106 	br	800d53c <isatty+0x44>
 800d538:	0005883a 	mov	r2,zero
 800d53c:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800d540:	e0bfff17 	ldw	r2,-4(fp)
 800d544:	10000e26 	beq	r2,zero,800d580 <isatty+0x88>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 800d548:	e0bfff17 	ldw	r2,-4(fp)
 800d54c:	10800017 	ldw	r2,0(r2)
 800d550:	10800817 	ldw	r2,32(r2)
 800d554:	1000021e 	bne	r2,zero,800d560 <isatty+0x68>
    {
      return 1;
 800d558:	00800044 	movi	r2,1
 800d55c:	00000d06 	br	800d594 <isatty+0x9c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 800d560:	e0bfed04 	addi	r2,fp,-76
 800d564:	100b883a 	mov	r5,r2
 800d568:	e13fec17 	ldw	r4,-80(fp)
 800d56c:	800d4000 	call	800d400 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 800d570:	e0bfee17 	ldw	r2,-72(fp)
 800d574:	10880020 	cmpeqi	r2,r2,8192
 800d578:	10803fcc 	andi	r2,r2,255
 800d57c:	00000506 	br	800d594 <isatty+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800d580:	800d4bc0 	call	800d4bc <alt_get_errno>
 800d584:	1007883a 	mov	r3,r2
 800d588:	00801444 	movi	r2,81
 800d58c:	18800015 	stw	r2,0(r3)
    return 0;
 800d590:	0005883a 	mov	r2,zero
  }
}
 800d594:	e037883a 	mov	sp,fp
 800d598:	dfc00117 	ldw	ra,4(sp)
 800d59c:	df000017 	ldw	fp,0(sp)
 800d5a0:	dec00204 	addi	sp,sp,8
 800d5a4:	f800283a 	ret

0800d5a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800d5a8:	defffc04 	addi	sp,sp,-16
 800d5ac:	df000315 	stw	fp,12(sp)
 800d5b0:	df000304 	addi	fp,sp,12
 800d5b4:	e13fff15 	stw	r4,-4(fp)
 800d5b8:	e17ffe15 	stw	r5,-8(fp)
 800d5bc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 800d5c0:	e0fffe17 	ldw	r3,-8(fp)
 800d5c4:	e0bfff17 	ldw	r2,-4(fp)
 800d5c8:	18800c26 	beq	r3,r2,800d5fc <alt_load_section+0x54>
  {
    while( to != end )
 800d5cc:	00000806 	br	800d5f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800d5d0:	e0ffff17 	ldw	r3,-4(fp)
 800d5d4:	18800104 	addi	r2,r3,4
 800d5d8:	e0bfff15 	stw	r2,-4(fp)
 800d5dc:	e0bffe17 	ldw	r2,-8(fp)
 800d5e0:	11000104 	addi	r4,r2,4
 800d5e4:	e13ffe15 	stw	r4,-8(fp)
 800d5e8:	18c00017 	ldw	r3,0(r3)
 800d5ec:	10c00015 	stw	r3,0(r2)
    while( to != end )
 800d5f0:	e0fffe17 	ldw	r3,-8(fp)
 800d5f4:	e0bffd17 	ldw	r2,-12(fp)
 800d5f8:	18bff51e 	bne	r3,r2,800d5d0 <alt_load_section+0x28>
    }
  }
}
 800d5fc:	0001883a 	nop
 800d600:	e037883a 	mov	sp,fp
 800d604:	df000017 	ldw	fp,0(sp)
 800d608:	dec00104 	addi	sp,sp,4
 800d60c:	f800283a 	ret

0800d610 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800d610:	defffe04 	addi	sp,sp,-8
 800d614:	dfc00115 	stw	ra,4(sp)
 800d618:	df000015 	stw	fp,0(sp)
 800d61c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800d620:	01820074 	movhi	r6,2049
 800d624:	31874a04 	addi	r6,r6,7464
 800d628:	01420074 	movhi	r5,2049
 800d62c:	29405304 	addi	r5,r5,332
 800d630:	01020074 	movhi	r4,2049
 800d634:	21074a04 	addi	r4,r4,7464
 800d638:	800d5a80 	call	800d5a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800d63c:	01820034 	movhi	r6,2048
 800d640:	31808904 	addi	r6,r6,548
 800d644:	01420034 	movhi	r5,2048
 800d648:	29400804 	addi	r5,r5,32
 800d64c:	01020034 	movhi	r4,2048
 800d650:	21000804 	addi	r4,r4,32
 800d654:	800d5a80 	call	800d5a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800d658:	01820074 	movhi	r6,2049
 800d65c:	31805304 	addi	r6,r6,332
 800d660:	01420074 	movhi	r5,2049
 800d664:	297ea404 	addi	r5,r5,-1392
 800d668:	01020074 	movhi	r4,2049
 800d66c:	213ea404 	addi	r4,r4,-1392
 800d670:	800d5a80 	call	800d5a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800d674:	800eaf40 	call	800eaf4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 800d678:	800ecb40 	call	800ecb4 <alt_icache_flush_all>
}
 800d67c:	0001883a 	nop
 800d680:	e037883a 	mov	sp,fp
 800d684:	dfc00117 	ldw	ra,4(sp)
 800d688:	df000017 	ldw	fp,0(sp)
 800d68c:	dec00204 	addi	sp,sp,8
 800d690:	f800283a 	ret

0800d694 <alt_get_errno>:
{
 800d694:	defffe04 	addi	sp,sp,-8
 800d698:	dfc00115 	stw	ra,4(sp)
 800d69c:	df000015 	stw	fp,0(sp)
 800d6a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d6a4:	d0a00a17 	ldw	r2,-32728(gp)
 800d6a8:	10000326 	beq	r2,zero,800d6b8 <alt_get_errno+0x24>
 800d6ac:	d0a00a17 	ldw	r2,-32728(gp)
 800d6b0:	103ee83a 	callr	r2
 800d6b4:	00000106 	br	800d6bc <alt_get_errno+0x28>
 800d6b8:	d0a70904 	addi	r2,gp,-25564
}
 800d6bc:	e037883a 	mov	sp,fp
 800d6c0:	dfc00117 	ldw	ra,4(sp)
 800d6c4:	df000017 	ldw	fp,0(sp)
 800d6c8:	dec00204 	addi	sp,sp,8
 800d6cc:	f800283a 	ret

0800d6d0 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 800d6d0:	defff904 	addi	sp,sp,-28
 800d6d4:	dfc00615 	stw	ra,24(sp)
 800d6d8:	df000515 	stw	fp,20(sp)
 800d6dc:	df000504 	addi	fp,sp,20
 800d6e0:	e13ffd15 	stw	r4,-12(fp)
 800d6e4:	e17ffc15 	stw	r5,-16(fp)
 800d6e8:	e1bffb15 	stw	r6,-20(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 800d6ec:	e03fff15 	stw	zero,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d6f0:	e0bffd17 	ldw	r2,-12(fp)
 800d6f4:	10000916 	blt	r2,zero,800d71c <lseek+0x4c>
 800d6f8:	e0fffd17 	ldw	r3,-12(fp)
 800d6fc:	1805883a 	mov	r2,r3
 800d700:	1085883a 	add	r2,r2,r2
 800d704:	10c5883a 	add	r2,r2,r3
 800d708:	100490ba 	slli	r2,r2,2
 800d70c:	00c20074 	movhi	r3,2049
 800d710:	18c2c304 	addi	r3,r3,2828
 800d714:	10c5883a 	add	r2,r2,r3
 800d718:	00000106 	br	800d720 <lseek+0x50>
 800d71c:	0005883a 	mov	r2,zero
 800d720:	e0bffe15 	stw	r2,-8(fp)
  
  if (fd) 
 800d724:	e0bffe17 	ldw	r2,-8(fp)
 800d728:	10001026 	beq	r2,zero,800d76c <lseek+0x9c>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 800d72c:	e0bffe17 	ldw	r2,-8(fp)
 800d730:	10800017 	ldw	r2,0(r2)
 800d734:	10800717 	ldw	r2,28(r2)
 800d738:	10000926 	beq	r2,zero,800d760 <lseek+0x90>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 800d73c:	e0bffe17 	ldw	r2,-8(fp)
 800d740:	10800017 	ldw	r2,0(r2)
 800d744:	10800717 	ldw	r2,28(r2)
 800d748:	e1bffb17 	ldw	r6,-20(fp)
 800d74c:	e17ffc17 	ldw	r5,-16(fp)
 800d750:	e13ffe17 	ldw	r4,-8(fp)
 800d754:	103ee83a 	callr	r2
 800d758:	e0bfff15 	stw	r2,-4(fp)
 800d75c:	00000506 	br	800d774 <lseek+0xa4>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 800d760:	00bfde84 	movi	r2,-134
 800d764:	e0bfff15 	stw	r2,-4(fp)
 800d768:	00000206 	br	800d774 <lseek+0xa4>
    }
  }
  else  
  {
    rc = -EBADFD;
 800d76c:	00bfebc4 	movi	r2,-81
 800d770:	e0bfff15 	stw	r2,-4(fp)
  }

  if (rc < 0)
 800d774:	e0bfff17 	ldw	r2,-4(fp)
 800d778:	1000070e 	bge	r2,zero,800d798 <lseek+0xc8>
  {
    ALT_ERRNO = -rc;
 800d77c:	800d6940 	call	800d694 <alt_get_errno>
 800d780:	1007883a 	mov	r3,r2
 800d784:	e0bfff17 	ldw	r2,-4(fp)
 800d788:	0085c83a 	sub	r2,zero,r2
 800d78c:	18800015 	stw	r2,0(r3)
    rc = -1;
 800d790:	00bfffc4 	movi	r2,-1
 800d794:	e0bfff15 	stw	r2,-4(fp)
  }

  return rc;
 800d798:	e0bfff17 	ldw	r2,-4(fp)
}
 800d79c:	e037883a 	mov	sp,fp
 800d7a0:	dfc00117 	ldw	ra,4(sp)
 800d7a4:	df000017 	ldw	fp,0(sp)
 800d7a8:	dec00204 	addi	sp,sp,8
 800d7ac:	f800283a 	ret

0800d7b0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800d7b0:	defffd04 	addi	sp,sp,-12
 800d7b4:	dfc00215 	stw	ra,8(sp)
 800d7b8:	df000115 	stw	fp,4(sp)
 800d7bc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800d7c0:	0009883a 	mov	r4,zero
 800d7c4:	800dc7c0 	call	800dc7c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800d7c8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800d7cc:	800dcb40 	call	800dcb4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800d7d0:	01820074 	movhi	r6,2049
 800d7d4:	31804904 	addi	r6,r6,292
 800d7d8:	01420074 	movhi	r5,2049
 800d7dc:	29404904 	addi	r5,r5,292
 800d7e0:	01020074 	movhi	r4,2049
 800d7e4:	21004904 	addi	r4,r4,292
 800d7e8:	800f03c0 	call	800f03c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800d7ec:	800ebf40 	call	800ebf4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800d7f0:	01020074 	movhi	r4,2049
 800d7f4:	213b1504 	addi	r4,r4,-5036
 800d7f8:	800f7e00 	call	800f7e0 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800d7fc:	d0a70b17 	ldw	r2,-25556(gp)
 800d800:	d0e70c17 	ldw	r3,-25552(gp)
 800d804:	d1270d17 	ldw	r4,-25548(gp)
 800d808:	200d883a 	mov	r6,r4
 800d80c:	180b883a 	mov	r5,r3
 800d810:	1009883a 	mov	r4,r2
 800d814:	80002f40 	call	80002f4 <main>
 800d818:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800d81c:	01000044 	movi	r4,1
 800d820:	800d2bc0 	call	800d2bc <close>
  exit (result);
 800d824:	e13fff17 	ldw	r4,-4(fp)
 800d828:	800f7f40 	call	800f7f4 <exit>

0800d82c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800d82c:	defffe04 	addi	sp,sp,-8
 800d830:	df000115 	stw	fp,4(sp)
 800d834:	df000104 	addi	fp,sp,4
 800d838:	e13fff15 	stw	r4,-4(fp)
}
 800d83c:	0001883a 	nop
 800d840:	e037883a 	mov	sp,fp
 800d844:	df000017 	ldw	fp,0(sp)
 800d848:	dec00104 	addi	sp,sp,4
 800d84c:	f800283a 	ret

0800d850 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800d850:	defffe04 	addi	sp,sp,-8
 800d854:	df000115 	stw	fp,4(sp)
 800d858:	df000104 	addi	fp,sp,4
 800d85c:	e13fff15 	stw	r4,-4(fp)
}
 800d860:	0001883a 	nop
 800d864:	e037883a 	mov	sp,fp
 800d868:	df000017 	ldw	fp,0(sp)
 800d86c:	dec00104 	addi	sp,sp,4
 800d870:	f800283a 	ret

0800d874 <alt_get_errno>:
{
 800d874:	defffe04 	addi	sp,sp,-8
 800d878:	dfc00115 	stw	ra,4(sp)
 800d87c:	df000015 	stw	fp,0(sp)
 800d880:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d884:	d0a00a17 	ldw	r2,-32728(gp)
 800d888:	10000326 	beq	r2,zero,800d898 <alt_get_errno+0x24>
 800d88c:	d0a00a17 	ldw	r2,-32728(gp)
 800d890:	103ee83a 	callr	r2
 800d894:	00000106 	br	800d89c <alt_get_errno+0x28>
 800d898:	d0a70904 	addi	r2,gp,-25564
}
 800d89c:	e037883a 	mov	sp,fp
 800d8a0:	dfc00117 	ldw	ra,4(sp)
 800d8a4:	df000017 	ldw	fp,0(sp)
 800d8a8:	dec00204 	addi	sp,sp,8
 800d8ac:	f800283a 	ret

0800d8b0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 800d8b0:	defff904 	addi	sp,sp,-28
 800d8b4:	dfc00615 	stw	ra,24(sp)
 800d8b8:	df000515 	stw	fp,20(sp)
 800d8bc:	df000504 	addi	fp,sp,20
 800d8c0:	e13ffd15 	stw	r4,-12(fp)
 800d8c4:	e17ffc15 	stw	r5,-16(fp)
 800d8c8:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800d8cc:	e0bffd17 	ldw	r2,-12(fp)
 800d8d0:	10000916 	blt	r2,zero,800d8f8 <read+0x48>
 800d8d4:	e0fffd17 	ldw	r3,-12(fp)
 800d8d8:	1805883a 	mov	r2,r3
 800d8dc:	1085883a 	add	r2,r2,r2
 800d8e0:	10c5883a 	add	r2,r2,r3
 800d8e4:	100490ba 	slli	r2,r2,2
 800d8e8:	00c20074 	movhi	r3,2049
 800d8ec:	18c2c304 	addi	r3,r3,2828
 800d8f0:	10c5883a 	add	r2,r2,r3
 800d8f4:	00000106 	br	800d8fc <read+0x4c>
 800d8f8:	0005883a 	mov	r2,zero
 800d8fc:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800d900:	e0bfff17 	ldw	r2,-4(fp)
 800d904:	10002226 	beq	r2,zero,800d990 <read+0xe0>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d908:	e0bfff17 	ldw	r2,-4(fp)
 800d90c:	10800217 	ldw	r2,8(r2)
 800d910:	108000cc 	andi	r2,r2,3
 800d914:	10800060 	cmpeqi	r2,r2,1
 800d918:	1000181e 	bne	r2,zero,800d97c <read+0xcc>
        (fd->dev->read))
 800d91c:	e0bfff17 	ldw	r2,-4(fp)
 800d920:	10800017 	ldw	r2,0(r2)
 800d924:	10800517 	ldw	r2,20(r2)
    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 800d928:	10001426 	beq	r2,zero,800d97c <read+0xcc>
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 800d92c:	e0bfff17 	ldw	r2,-4(fp)
 800d930:	10800017 	ldw	r2,0(r2)
 800d934:	10800517 	ldw	r2,20(r2)
 800d938:	e0fffb17 	ldw	r3,-20(fp)
 800d93c:	180d883a 	mov	r6,r3
 800d940:	e17ffc17 	ldw	r5,-16(fp)
 800d944:	e13fff17 	ldw	r4,-4(fp)
 800d948:	103ee83a 	callr	r2
 800d94c:	e0bffe15 	stw	r2,-8(fp)
 800d950:	e0bffe17 	ldw	r2,-8(fp)
 800d954:	1000070e 	bge	r2,zero,800d974 <read+0xc4>
        {
          ALT_ERRNO = -rval;
 800d958:	800d8740 	call	800d874 <alt_get_errno>
 800d95c:	1007883a 	mov	r3,r2
 800d960:	e0bffe17 	ldw	r2,-8(fp)
 800d964:	0085c83a 	sub	r2,zero,r2
 800d968:	18800015 	stw	r2,0(r3)
          return -1;
 800d96c:	00bfffc4 	movi	r2,-1
 800d970:	00000c06 	br	800d9a4 <read+0xf4>
        }
        return rval;
 800d974:	e0bffe17 	ldw	r2,-8(fp)
 800d978:	00000a06 	br	800d9a4 <read+0xf4>
      }
      else
      {
        ALT_ERRNO = EACCES;
 800d97c:	800d8740 	call	800d874 <alt_get_errno>
 800d980:	1007883a 	mov	r3,r2
 800d984:	00800344 	movi	r2,13
 800d988:	18800015 	stw	r2,0(r3)
 800d98c:	00000406 	br	800d9a0 <read+0xf0>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 800d990:	800d8740 	call	800d874 <alt_get_errno>
 800d994:	1007883a 	mov	r3,r2
 800d998:	00801444 	movi	r2,81
 800d99c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800d9a0:	00bfffc4 	movi	r2,-1
}
 800d9a4:	e037883a 	mov	sp,fp
 800d9a8:	dfc00117 	ldw	ra,4(sp)
 800d9ac:	df000017 	ldw	fp,0(sp)
 800d9b0:	dec00204 	addi	sp,sp,8
 800d9b4:	f800283a 	ret

0800d9b8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d9b8:	defffe04 	addi	sp,sp,-8
 800d9bc:	df000115 	stw	fp,4(sp)
 800d9c0:	df000104 	addi	fp,sp,4
 800d9c4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d9c8:	e0bfff17 	ldw	r2,-4(fp)
 800d9cc:	108000d0 	cmplti	r2,r2,3
 800d9d0:	1000101e 	bne	r2,zero,800da14 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d9d4:	e0ffff17 	ldw	r3,-4(fp)
 800d9d8:	1805883a 	mov	r2,r3
 800d9dc:	1085883a 	add	r2,r2,r2
 800d9e0:	10c5883a 	add	r2,r2,r3
 800d9e4:	100490ba 	slli	r2,r2,2
 800d9e8:	00c20074 	movhi	r3,2049
 800d9ec:	10c7883a 	add	r3,r2,r3
 800d9f0:	1802c515 	stw	zero,2836(r3)
    alt_fd_list[fd].dev      = 0;
 800d9f4:	e0ffff17 	ldw	r3,-4(fp)
 800d9f8:	1805883a 	mov	r2,r3
 800d9fc:	1085883a 	add	r2,r2,r2
 800da00:	10c5883a 	add	r2,r2,r3
 800da04:	100490ba 	slli	r2,r2,2
 800da08:	00c20074 	movhi	r3,2049
 800da0c:	10c7883a 	add	r3,r2,r3
 800da10:	1802c315 	stw	zero,2828(r3)
  }
}
 800da14:	0001883a 	nop
 800da18:	e037883a 	mov	sp,fp
 800da1c:	df000017 	ldw	fp,0(sp)
 800da20:	dec00104 	addi	sp,sp,4
 800da24:	f800283a 	ret

0800da28 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800da28:	defff904 	addi	sp,sp,-28
 800da2c:	df000615 	stw	fp,24(sp)
 800da30:	df000604 	addi	fp,sp,24
 800da34:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 800da38:	0005303a 	rdctl	r2,status
 800da3c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800da40:	e0fffd17 	ldw	r3,-12(fp)
 800da44:	00bfff84 	movi	r2,-2
 800da48:	1884703a 	and	r2,r3,r2
 800da4c:	1001703a 	wrctl	status,r2
  return context;
 800da50:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800da54:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800da58:	d0a00b17 	ldw	r2,-32724(gp)
 800da5c:	10c000c4 	addi	r3,r2,3
 800da60:	00bfff04 	movi	r2,-4
 800da64:	1884703a 	and	r2,r3,r2
 800da68:	d0a00b15 	stw	r2,-32724(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800da6c:	d0e00b17 	ldw	r3,-32724(gp)
 800da70:	e0bffa17 	ldw	r2,-24(fp)
 800da74:	1887883a 	add	r3,r3,r2
 800da78:	00830034 	movhi	r2,3072
 800da7c:	10800004 	addi	r2,r2,0
 800da80:	10c0062e 	bgeu	r2,r3,800da9c <sbrk+0x74>
 800da84:	e0bfff17 	ldw	r2,-4(fp)
 800da88:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800da8c:	e0bffc17 	ldw	r2,-16(fp)
 800da90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800da94:	00bfffc4 	movi	r2,-1
 800da98:	00000b06 	br	800dac8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800da9c:	d0a00b17 	ldw	r2,-32724(gp)
 800daa0:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 800daa4:	d0e00b17 	ldw	r3,-32724(gp)
 800daa8:	e0bffa17 	ldw	r2,-24(fp)
 800daac:	1885883a 	add	r2,r3,r2
 800dab0:	d0a00b15 	stw	r2,-32724(gp)
 800dab4:	e0bfff17 	ldw	r2,-4(fp)
 800dab8:	e0bffb15 	stw	r2,-20(fp)
 800dabc:	e0bffb17 	ldw	r2,-20(fp)
 800dac0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800dac4:	e0bffe17 	ldw	r2,-8(fp)
} 
 800dac8:	e037883a 	mov	sp,fp
 800dacc:	df000017 	ldw	fp,0(sp)
 800dad0:	dec00104 	addi	sp,sp,4
 800dad4:	f800283a 	ret

0800dad8 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800dad8:	defffd04 	addi	sp,sp,-12
 800dadc:	dfc00215 	stw	ra,8(sp)
 800dae0:	df000115 	stw	fp,4(sp)
 800dae4:	df000104 	addi	fp,sp,4
 800dae8:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800daec:	e13fff17 	ldw	r4,-4(fp)
 800daf0:	800e99c0 	call	800e99c <alt_busy_sleep>
}
 800daf4:	e037883a 	mov	sp,fp
 800daf8:	dfc00117 	ldw	ra,4(sp)
 800dafc:	df000017 	ldw	fp,0(sp)
 800db00:	dec00204 	addi	sp,sp,8
 800db04:	f800283a 	ret

0800db08 <alt_get_errno>:
{
 800db08:	defffe04 	addi	sp,sp,-8
 800db0c:	dfc00115 	stw	ra,4(sp)
 800db10:	df000015 	stw	fp,0(sp)
 800db14:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800db18:	d0a00a17 	ldw	r2,-32728(gp)
 800db1c:	10000326 	beq	r2,zero,800db2c <alt_get_errno+0x24>
 800db20:	d0a00a17 	ldw	r2,-32728(gp)
 800db24:	103ee83a 	callr	r2
 800db28:	00000106 	br	800db30 <alt_get_errno+0x28>
 800db2c:	d0a70904 	addi	r2,gp,-25564
}
 800db30:	e037883a 	mov	sp,fp
 800db34:	dfc00117 	ldw	ra,4(sp)
 800db38:	df000017 	ldw	fp,0(sp)
 800db3c:	dec00204 	addi	sp,sp,8
 800db40:	f800283a 	ret

0800db44 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 800db44:	defff904 	addi	sp,sp,-28
 800db48:	dfc00615 	stw	ra,24(sp)
 800db4c:	df000515 	stw	fp,20(sp)
 800db50:	df000504 	addi	fp,sp,20
 800db54:	e13ffd15 	stw	r4,-12(fp)
 800db58:	e17ffc15 	stw	r5,-16(fp)
 800db5c:	e1bffb15 	stw	r6,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 800db60:	e0bffd17 	ldw	r2,-12(fp)
 800db64:	10000916 	blt	r2,zero,800db8c <write+0x48>
 800db68:	e0fffd17 	ldw	r3,-12(fp)
 800db6c:	1805883a 	mov	r2,r3
 800db70:	1085883a 	add	r2,r2,r2
 800db74:	10c5883a 	add	r2,r2,r3
 800db78:	100490ba 	slli	r2,r2,2
 800db7c:	00c20074 	movhi	r3,2049
 800db80:	18c2c304 	addi	r3,r3,2828
 800db84:	10c5883a 	add	r2,r2,r3
 800db88:	00000106 	br	800db90 <write+0x4c>
 800db8c:	0005883a 	mov	r2,zero
 800db90:	e0bfff15 	stw	r2,-4(fp)
  
  if (fd)
 800db94:	e0bfff17 	ldw	r2,-4(fp)
 800db98:	10002126 	beq	r2,zero,800dc20 <write+0xdc>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 800db9c:	e0bfff17 	ldw	r2,-4(fp)
 800dba0:	10800217 	ldw	r2,8(r2)
 800dba4:	108000cc 	andi	r2,r2,3
 800dba8:	10001826 	beq	r2,zero,800dc0c <write+0xc8>
 800dbac:	e0bfff17 	ldw	r2,-4(fp)
 800dbb0:	10800017 	ldw	r2,0(r2)
 800dbb4:	10800617 	ldw	r2,24(r2)
 800dbb8:	10001426 	beq	r2,zero,800dc0c <write+0xc8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 800dbbc:	e0bfff17 	ldw	r2,-4(fp)
 800dbc0:	10800017 	ldw	r2,0(r2)
 800dbc4:	10800617 	ldw	r2,24(r2)
 800dbc8:	e0fffb17 	ldw	r3,-20(fp)
 800dbcc:	180d883a 	mov	r6,r3
 800dbd0:	e17ffc17 	ldw	r5,-16(fp)
 800dbd4:	e13fff17 	ldw	r4,-4(fp)
 800dbd8:	103ee83a 	callr	r2
 800dbdc:	e0bffe15 	stw	r2,-8(fp)
 800dbe0:	e0bffe17 	ldw	r2,-8(fp)
 800dbe4:	1000070e 	bge	r2,zero,800dc04 <write+0xc0>
      {
        ALT_ERRNO = -rval;
 800dbe8:	800db080 	call	800db08 <alt_get_errno>
 800dbec:	1007883a 	mov	r3,r2
 800dbf0:	e0bffe17 	ldw	r2,-8(fp)
 800dbf4:	0085c83a 	sub	r2,zero,r2
 800dbf8:	18800015 	stw	r2,0(r3)
        return -1;
 800dbfc:	00bfffc4 	movi	r2,-1
 800dc00:	00000c06 	br	800dc34 <write+0xf0>
      }
      return rval;
 800dc04:	e0bffe17 	ldw	r2,-8(fp)
 800dc08:	00000a06 	br	800dc34 <write+0xf0>
    }
    else
    {
      ALT_ERRNO = EACCES;
 800dc0c:	800db080 	call	800db08 <alt_get_errno>
 800dc10:	1007883a 	mov	r3,r2
 800dc14:	00800344 	movi	r2,13
 800dc18:	18800015 	stw	r2,0(r3)
 800dc1c:	00000406 	br	800dc30 <write+0xec>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 800dc20:	800db080 	call	800db08 <alt_get_errno>
 800dc24:	1007883a 	mov	r3,r2
 800dc28:	00801444 	movi	r2,81
 800dc2c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 800dc30:	00bfffc4 	movi	r2,-1
}
 800dc34:	e037883a 	mov	sp,fp
 800dc38:	dfc00117 	ldw	ra,4(sp)
 800dc3c:	df000017 	ldw	fp,0(sp)
 800dc40:	dec00204 	addi	sp,sp,8
 800dc44:	f800283a 	ret

0800dc48 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800dc48:	defffd04 	addi	sp,sp,-12
 800dc4c:	dfc00215 	stw	ra,8(sp)
 800dc50:	df000115 	stw	fp,4(sp)
 800dc54:	df000104 	addi	fp,sp,4
 800dc58:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800dc5c:	d1600704 	addi	r5,gp,-32740
 800dc60:	e13fff17 	ldw	r4,-4(fp)
 800dc64:	800eb500 	call	800eb50 <alt_dev_llist_insert>
}
 800dc68:	e037883a 	mov	sp,fp
 800dc6c:	dfc00117 	ldw	ra,4(sp)
 800dc70:	df000017 	ldw	fp,0(sp)
 800dc74:	dec00204 	addi	sp,sp,8
 800dc78:	f800283a 	ret

0800dc7c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800dc7c:	defffd04 	addi	sp,sp,-12
 800dc80:	dfc00215 	stw	ra,8(sp)
 800dc84:	df000115 	stw	fp,4(sp)
 800dc88:	df000104 	addi	fp,sp,4
 800dc8c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800dc90:	800f4d40 	call	800f4d4 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800dc94:	00800044 	movi	r2,1
 800dc98:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800dc9c:	0001883a 	nop
 800dca0:	e037883a 	mov	sp,fp
 800dca4:	dfc00117 	ldw	ra,4(sp)
 800dca8:	df000017 	ldw	fp,0(sp)
 800dcac:	dec00204 	addi	sp,sp,8
 800dcb0:	f800283a 	ret

0800dcb4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800dcb4:	defffe04 	addi	sp,sp,-8
 800dcb8:	dfc00115 	stw	ra,4(sp)
 800dcbc:	df000015 	stw	fp,0(sp)
 800dcc0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800dcc4:	01c0fa04 	movi	r7,1000
 800dcc8:	01800084 	movi	r6,2
 800dccc:	000b883a 	mov	r5,zero
 800dcd0:	01003004 	movi	r4,192
 800dcd4:	800e7f40 	call	800e7f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800dcd8:	01800044 	movi	r6,1
 800dcdc:	000b883a 	mov	r5,zero
 800dce0:	01020074 	movhi	r4,2049
 800dce4:	21032d04 	addi	r4,r4,3252
 800dce8:	800de7c0 	call	800de7c <altera_avalon_jtag_uart_init>
 800dcec:	01020074 	movhi	r4,2049
 800dcf0:	21032304 	addi	r4,r4,3212
 800dcf4:	800dc480 	call	800dc48 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800dcf8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800dcfc:	0001883a 	nop
}
 800dd00:	0001883a 	nop
 800dd04:	e037883a 	mov	sp,fp
 800dd08:	dfc00117 	ldw	ra,4(sp)
 800dd0c:	df000017 	ldw	fp,0(sp)
 800dd10:	dec00204 	addi	sp,sp,8
 800dd14:	f800283a 	ret

0800dd18 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800dd18:	defffa04 	addi	sp,sp,-24
 800dd1c:	dfc00515 	stw	ra,20(sp)
 800dd20:	df000415 	stw	fp,16(sp)
 800dd24:	df000404 	addi	fp,sp,16
 800dd28:	e13ffe15 	stw	r4,-8(fp)
 800dd2c:	e17ffd15 	stw	r5,-12(fp)
 800dd30:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800dd34:	e0bffe17 	ldw	r2,-8(fp)
 800dd38:	10800017 	ldw	r2,0(r2)
 800dd3c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800dd40:	e0bfff17 	ldw	r2,-4(fp)
 800dd44:	10c00a04 	addi	r3,r2,40
 800dd48:	e0bffe17 	ldw	r2,-8(fp)
 800dd4c:	10800217 	ldw	r2,8(r2)
 800dd50:	100f883a 	mov	r7,r2
 800dd54:	e1bffc17 	ldw	r6,-16(fp)
 800dd58:	e17ffd17 	ldw	r5,-12(fp)
 800dd5c:	1809883a 	mov	r4,r3
 800dd60:	800e33c0 	call	800e33c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800dd64:	e037883a 	mov	sp,fp
 800dd68:	dfc00117 	ldw	ra,4(sp)
 800dd6c:	df000017 	ldw	fp,0(sp)
 800dd70:	dec00204 	addi	sp,sp,8
 800dd74:	f800283a 	ret

0800dd78 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800dd78:	defffa04 	addi	sp,sp,-24
 800dd7c:	dfc00515 	stw	ra,20(sp)
 800dd80:	df000415 	stw	fp,16(sp)
 800dd84:	df000404 	addi	fp,sp,16
 800dd88:	e13ffe15 	stw	r4,-8(fp)
 800dd8c:	e17ffd15 	stw	r5,-12(fp)
 800dd90:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800dd94:	e0bffe17 	ldw	r2,-8(fp)
 800dd98:	10800017 	ldw	r2,0(r2)
 800dd9c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800dda0:	e0bfff17 	ldw	r2,-4(fp)
 800dda4:	10c00a04 	addi	r3,r2,40
 800dda8:	e0bffe17 	ldw	r2,-8(fp)
 800ddac:	10800217 	ldw	r2,8(r2)
 800ddb0:	100f883a 	mov	r7,r2
 800ddb4:	e1bffc17 	ldw	r6,-16(fp)
 800ddb8:	e17ffd17 	ldw	r5,-12(fp)
 800ddbc:	1809883a 	mov	r4,r3
 800ddc0:	800e5580 	call	800e558 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800ddc4:	e037883a 	mov	sp,fp
 800ddc8:	dfc00117 	ldw	ra,4(sp)
 800ddcc:	df000017 	ldw	fp,0(sp)
 800ddd0:	dec00204 	addi	sp,sp,8
 800ddd4:	f800283a 	ret

0800ddd8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800ddd8:	defffc04 	addi	sp,sp,-16
 800dddc:	dfc00315 	stw	ra,12(sp)
 800dde0:	df000215 	stw	fp,8(sp)
 800dde4:	df000204 	addi	fp,sp,8
 800dde8:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800ddec:	e0bffe17 	ldw	r2,-8(fp)
 800ddf0:	10800017 	ldw	r2,0(r2)
 800ddf4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800ddf8:	e0bfff17 	ldw	r2,-4(fp)
 800ddfc:	10c00a04 	addi	r3,r2,40
 800de00:	e0bffe17 	ldw	r2,-8(fp)
 800de04:	10800217 	ldw	r2,8(r2)
 800de08:	100b883a 	mov	r5,r2
 800de0c:	1809883a 	mov	r4,r3
 800de10:	800e1e00 	call	800e1e0 <altera_avalon_jtag_uart_close>
}
 800de14:	e037883a 	mov	sp,fp
 800de18:	dfc00117 	ldw	ra,4(sp)
 800de1c:	df000017 	ldw	fp,0(sp)
 800de20:	dec00204 	addi	sp,sp,8
 800de24:	f800283a 	ret

0800de28 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800de28:	defffa04 	addi	sp,sp,-24
 800de2c:	dfc00515 	stw	ra,20(sp)
 800de30:	df000415 	stw	fp,16(sp)
 800de34:	df000404 	addi	fp,sp,16
 800de38:	e13ffe15 	stw	r4,-8(fp)
 800de3c:	e17ffd15 	stw	r5,-12(fp)
 800de40:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800de44:	e0bffe17 	ldw	r2,-8(fp)
 800de48:	10800017 	ldw	r2,0(r2)
 800de4c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800de50:	e0bfff17 	ldw	r2,-4(fp)
 800de54:	10800a04 	addi	r2,r2,40
 800de58:	e1bffc17 	ldw	r6,-16(fp)
 800de5c:	e17ffd17 	ldw	r5,-12(fp)
 800de60:	1009883a 	mov	r4,r2
 800de64:	800e2480 	call	800e248 <altera_avalon_jtag_uart_ioctl>
}
 800de68:	e037883a 	mov	sp,fp
 800de6c:	dfc00117 	ldw	ra,4(sp)
 800de70:	df000017 	ldw	fp,0(sp)
 800de74:	dec00204 	addi	sp,sp,8
 800de78:	f800283a 	ret

0800de7c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800de7c:	defffa04 	addi	sp,sp,-24
 800de80:	dfc00515 	stw	ra,20(sp)
 800de84:	df000415 	stw	fp,16(sp)
 800de88:	df000404 	addi	fp,sp,16
 800de8c:	e13fff15 	stw	r4,-4(fp)
 800de90:	e17ffe15 	stw	r5,-8(fp)
 800de94:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800de98:	e0bfff17 	ldw	r2,-4(fp)
 800de9c:	00c00044 	movi	r3,1
 800dea0:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800dea4:	e0bfff17 	ldw	r2,-4(fp)
 800dea8:	10800017 	ldw	r2,0(r2)
 800deac:	10800104 	addi	r2,r2,4
 800deb0:	1007883a 	mov	r3,r2
 800deb4:	e0bfff17 	ldw	r2,-4(fp)
 800deb8:	10800817 	ldw	r2,32(r2)
 800debc:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800dec0:	e0bffe17 	ldw	r2,-8(fp)
 800dec4:	e0fffd17 	ldw	r3,-12(fp)
 800dec8:	d8000015 	stw	zero,0(sp)
 800decc:	e1ffff17 	ldw	r7,-4(fp)
 800ded0:	01820074 	movhi	r6,2049
 800ded4:	31b7cf04 	addi	r6,r6,-8388
 800ded8:	180b883a 	mov	r5,r3
 800dedc:	1009883a 	mov	r4,r2
 800dee0:	800ecd40 	call	800ecd4 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800dee4:	e0bfff17 	ldw	r2,-4(fp)
 800dee8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800deec:	e0bfff17 	ldw	r2,-4(fp)
 800def0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800def4:	d0e70f17 	ldw	r3,-25540(gp)
 800def8:	e1ffff17 	ldw	r7,-4(fp)
 800defc:	01820074 	movhi	r6,2049
 800df00:	31b85004 	addi	r6,r6,-7872
 800df04:	180b883a 	mov	r5,r3
 800df08:	1009883a 	mov	r4,r2
 800df0c:	800e8700 	call	800e870 <alt_alarm_start>
 800df10:	1000040e 	bge	r2,zero,800df24 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800df14:	e0ffff17 	ldw	r3,-4(fp)
 800df18:	00a00034 	movhi	r2,32768
 800df1c:	10bfffc4 	addi	r2,r2,-1
 800df20:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800df24:	0001883a 	nop
 800df28:	e037883a 	mov	sp,fp
 800df2c:	dfc00117 	ldw	ra,4(sp)
 800df30:	df000017 	ldw	fp,0(sp)
 800df34:	dec00204 	addi	sp,sp,8
 800df38:	f800283a 	ret

0800df3c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800df3c:	defff804 	addi	sp,sp,-32
 800df40:	df000715 	stw	fp,28(sp)
 800df44:	df000704 	addi	fp,sp,28
 800df48:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800df4c:	e0bff917 	ldw	r2,-28(fp)
 800df50:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 800df54:	e0bffd17 	ldw	r2,-12(fp)
 800df58:	10800017 	ldw	r2,0(r2)
 800df5c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800df60:	e0bffc17 	ldw	r2,-16(fp)
 800df64:	10800104 	addi	r2,r2,4
 800df68:	10800037 	ldwio	r2,0(r2)
 800df6c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800df70:	e0bffb17 	ldw	r2,-20(fp)
 800df74:	1080c00c 	andi	r2,r2,768
 800df78:	10006b26 	beq	r2,zero,800e128 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800df7c:	e0bffb17 	ldw	r2,-20(fp)
 800df80:	1080400c 	andi	r2,r2,256
 800df84:	10003426 	beq	r2,zero,800e058 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800df88:	00800074 	movhi	r2,1
 800df8c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800df90:	e0bffd17 	ldw	r2,-12(fp)
 800df94:	10800a17 	ldw	r2,40(r2)
 800df98:	10800044 	addi	r2,r2,1
 800df9c:	1081ffcc 	andi	r2,r2,2047
 800dfa0:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 800dfa4:	e0bffd17 	ldw	r2,-12(fp)
 800dfa8:	10800b17 	ldw	r2,44(r2)
 800dfac:	e0fffa17 	ldw	r3,-24(fp)
 800dfb0:	18801426 	beq	r3,r2,800e004 <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800dfb4:	e0bffc17 	ldw	r2,-16(fp)
 800dfb8:	10800037 	ldwio	r2,0(r2)
 800dfbc:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800dfc0:	e0bfff17 	ldw	r2,-4(fp)
 800dfc4:	10a0000c 	andi	r2,r2,32768
 800dfc8:	10001026 	beq	r2,zero,800e00c <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800dfcc:	e0bffd17 	ldw	r2,-12(fp)
 800dfd0:	10800a17 	ldw	r2,40(r2)
 800dfd4:	e0ffff17 	ldw	r3,-4(fp)
 800dfd8:	1809883a 	mov	r4,r3
 800dfdc:	e0fffd17 	ldw	r3,-12(fp)
 800dfe0:	1885883a 	add	r2,r3,r2
 800dfe4:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800dfe8:	e0bffd17 	ldw	r2,-12(fp)
 800dfec:	10800a17 	ldw	r2,40(r2)
 800dff0:	10800044 	addi	r2,r2,1
 800dff4:	10c1ffcc 	andi	r3,r2,2047
 800dff8:	e0bffd17 	ldw	r2,-12(fp)
 800dffc:	10c00a15 	stw	r3,40(r2)
      {
 800e000:	003fe306 	br	800df90 <altera_avalon_jtag_uart_irq+0x54>
          break;
 800e004:	0001883a 	nop
 800e008:	00000106 	br	800e010 <altera_avalon_jtag_uart_irq+0xd4>
          break;
 800e00c:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800e010:	e0bfff17 	ldw	r2,-4(fp)
 800e014:	10bfffec 	andhi	r2,r2,65535
 800e018:	10000f26 	beq	r2,zero,800e058 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e01c:	e0bffd17 	ldw	r2,-12(fp)
 800e020:	10c00817 	ldw	r3,32(r2)
 800e024:	00bfff84 	movi	r2,-2
 800e028:	1886703a 	and	r3,r3,r2
 800e02c:	e0bffd17 	ldw	r2,-12(fp)
 800e030:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800e034:	e0bffc17 	ldw	r2,-16(fp)
 800e038:	10800104 	addi	r2,r2,4
 800e03c:	1007883a 	mov	r3,r2
 800e040:	e0bffd17 	ldw	r2,-12(fp)
 800e044:	10800817 	ldw	r2,32(r2)
 800e048:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e04c:	e0bffc17 	ldw	r2,-16(fp)
 800e050:	10800104 	addi	r2,r2,4
 800e054:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800e058:	e0bffb17 	ldw	r2,-20(fp)
 800e05c:	1080800c 	andi	r2,r2,512
 800e060:	103fbf26 	beq	r2,zero,800df60 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800e064:	e0bffb17 	ldw	r2,-20(fp)
 800e068:	1004d43a 	srli	r2,r2,16
 800e06c:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800e070:	00001306 	br	800e0c0 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800e074:	e0bffc17 	ldw	r2,-16(fp)
 800e078:	e0fffd17 	ldw	r3,-12(fp)
 800e07c:	18c00d17 	ldw	r3,52(r3)
 800e080:	e13ffd17 	ldw	r4,-12(fp)
 800e084:	20c7883a 	add	r3,r4,r3
 800e088:	18c20e03 	ldbu	r3,2104(r3)
 800e08c:	18c03fcc 	andi	r3,r3,255
 800e090:	18c0201c 	xori	r3,r3,128
 800e094:	18ffe004 	addi	r3,r3,-128
 800e098:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e09c:	e0bffd17 	ldw	r2,-12(fp)
 800e0a0:	10800d17 	ldw	r2,52(r2)
 800e0a4:	10800044 	addi	r2,r2,1
 800e0a8:	10c1ffcc 	andi	r3,r2,2047
 800e0ac:	e0bffd17 	ldw	r2,-12(fp)
 800e0b0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800e0b4:	e0bffe17 	ldw	r2,-8(fp)
 800e0b8:	10bfffc4 	addi	r2,r2,-1
 800e0bc:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 800e0c0:	e0bffe17 	ldw	r2,-8(fp)
 800e0c4:	10000526 	beq	r2,zero,800e0dc <altera_avalon_jtag_uart_irq+0x1a0>
 800e0c8:	e0bffd17 	ldw	r2,-12(fp)
 800e0cc:	10c00d17 	ldw	r3,52(r2)
 800e0d0:	e0bffd17 	ldw	r2,-12(fp)
 800e0d4:	10800c17 	ldw	r2,48(r2)
 800e0d8:	18bfe61e 	bne	r3,r2,800e074 <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
 800e0dc:	e0bffe17 	ldw	r2,-8(fp)
 800e0e0:	103f9f26 	beq	r2,zero,800df60 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e0e4:	e0bffd17 	ldw	r2,-12(fp)
 800e0e8:	10c00817 	ldw	r3,32(r2)
 800e0ec:	00bfff44 	movi	r2,-3
 800e0f0:	1886703a 	and	r3,r3,r2
 800e0f4:	e0bffd17 	ldw	r2,-12(fp)
 800e0f8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e0fc:	e0bffd17 	ldw	r2,-12(fp)
 800e100:	10800017 	ldw	r2,0(r2)
 800e104:	10800104 	addi	r2,r2,4
 800e108:	1007883a 	mov	r3,r2
 800e10c:	e0bffd17 	ldw	r2,-12(fp)
 800e110:	10800817 	ldw	r2,32(r2)
 800e114:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800e118:	e0bffc17 	ldw	r2,-16(fp)
 800e11c:	10800104 	addi	r2,r2,4
 800e120:	10800037 	ldwio	r2,0(r2)
  {
 800e124:	003f8e06 	br	800df60 <altera_avalon_jtag_uart_irq+0x24>
      break;
 800e128:	0001883a 	nop
      }
    }
  }
}
 800e12c:	0001883a 	nop
 800e130:	e037883a 	mov	sp,fp
 800e134:	df000017 	ldw	fp,0(sp)
 800e138:	dec00104 	addi	sp,sp,4
 800e13c:	f800283a 	ret

0800e140 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800e140:	defffc04 	addi	sp,sp,-16
 800e144:	df000315 	stw	fp,12(sp)
 800e148:	df000304 	addi	fp,sp,12
 800e14c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800e150:	e0bffd17 	ldw	r2,-12(fp)
 800e154:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800e158:	e0bfff17 	ldw	r2,-4(fp)
 800e15c:	10800017 	ldw	r2,0(r2)
 800e160:	10800104 	addi	r2,r2,4
 800e164:	10800037 	ldwio	r2,0(r2)
 800e168:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800e16c:	e0bffe17 	ldw	r2,-8(fp)
 800e170:	1081000c 	andi	r2,r2,1024
 800e174:	10000b26 	beq	r2,zero,800e1a4 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800e178:	e0bfff17 	ldw	r2,-4(fp)
 800e17c:	10800017 	ldw	r2,0(r2)
 800e180:	10800104 	addi	r2,r2,4
 800e184:	1007883a 	mov	r3,r2
 800e188:	e0bfff17 	ldw	r2,-4(fp)
 800e18c:	10800817 	ldw	r2,32(r2)
 800e190:	10810014 	ori	r2,r2,1024
 800e194:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800e198:	e0bfff17 	ldw	r2,-4(fp)
 800e19c:	10000915 	stw	zero,36(r2)
 800e1a0:	00000a06 	br	800e1cc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800e1a4:	e0bfff17 	ldw	r2,-4(fp)
 800e1a8:	10c00917 	ldw	r3,36(r2)
 800e1ac:	00a00034 	movhi	r2,32768
 800e1b0:	10bfff04 	addi	r2,r2,-4
 800e1b4:	10c00536 	bltu	r2,r3,800e1cc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800e1b8:	e0bfff17 	ldw	r2,-4(fp)
 800e1bc:	10800917 	ldw	r2,36(r2)
 800e1c0:	10c00044 	addi	r3,r2,1
 800e1c4:	e0bfff17 	ldw	r2,-4(fp)
 800e1c8:	10c00915 	stw	r3,36(r2)
 800e1cc:	d0a70f17 	ldw	r2,-25540(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800e1d0:	e037883a 	mov	sp,fp
 800e1d4:	df000017 	ldw	fp,0(sp)
 800e1d8:	dec00104 	addi	sp,sp,4
 800e1dc:	f800283a 	ret

0800e1e0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800e1e0:	defffd04 	addi	sp,sp,-12
 800e1e4:	df000215 	stw	fp,8(sp)
 800e1e8:	df000204 	addi	fp,sp,8
 800e1ec:	e13fff15 	stw	r4,-4(fp)
 800e1f0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e1f4:	00000506 	br	800e20c <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800e1f8:	e0bffe17 	ldw	r2,-8(fp)
 800e1fc:	1090000c 	andi	r2,r2,16384
 800e200:	10000226 	beq	r2,zero,800e20c <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800e204:	00bffd44 	movi	r2,-11
 800e208:	00000b06 	br	800e238 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800e20c:	e0bfff17 	ldw	r2,-4(fp)
 800e210:	10c00d17 	ldw	r3,52(r2)
 800e214:	e0bfff17 	ldw	r2,-4(fp)
 800e218:	10800c17 	ldw	r2,48(r2)
 800e21c:	18800526 	beq	r3,r2,800e234 <altera_avalon_jtag_uart_close+0x54>
 800e220:	e0bfff17 	ldw	r2,-4(fp)
 800e224:	10c00917 	ldw	r3,36(r2)
 800e228:	e0bfff17 	ldw	r2,-4(fp)
 800e22c:	10800117 	ldw	r2,4(r2)
 800e230:	18bff136 	bltu	r3,r2,800e1f8 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 800e234:	0005883a 	mov	r2,zero
}
 800e238:	e037883a 	mov	sp,fp
 800e23c:	df000017 	ldw	fp,0(sp)
 800e240:	dec00104 	addi	sp,sp,4
 800e244:	f800283a 	ret

0800e248 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800e248:	defffa04 	addi	sp,sp,-24
 800e24c:	df000515 	stw	fp,20(sp)
 800e250:	df000504 	addi	fp,sp,20
 800e254:	e13ffd15 	stw	r4,-12(fp)
 800e258:	e17ffc15 	stw	r5,-16(fp)
 800e25c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 800e260:	00bff9c4 	movi	r2,-25
 800e264:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 800e268:	e0bffc17 	ldw	r2,-16(fp)
 800e26c:	109a8060 	cmpeqi	r2,r2,27137
 800e270:	1000041e 	bne	r2,zero,800e284 <altera_avalon_jtag_uart_ioctl+0x3c>
 800e274:	e0bffc17 	ldw	r2,-16(fp)
 800e278:	109a80a0 	cmpeqi	r2,r2,27138
 800e27c:	1000181e 	bne	r2,zero,800e2e0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800e280:	00002906 	br	800e328 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 800e284:	e0bffd17 	ldw	r2,-12(fp)
 800e288:	10c00117 	ldw	r3,4(r2)
 800e28c:	00a00034 	movhi	r2,32768
 800e290:	10bfffc4 	addi	r2,r2,-1
 800e294:	18802126 	beq	r3,r2,800e31c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 800e298:	e0bffb17 	ldw	r2,-20(fp)
 800e29c:	10800017 	ldw	r2,0(r2)
 800e2a0:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800e2a4:	e0bffe17 	ldw	r2,-8(fp)
 800e2a8:	10800090 	cmplti	r2,r2,2
 800e2ac:	1000061e 	bne	r2,zero,800e2c8 <altera_avalon_jtag_uart_ioctl+0x80>
 800e2b0:	e0fffe17 	ldw	r3,-8(fp)
 800e2b4:	00a00034 	movhi	r2,32768
 800e2b8:	10bfffc4 	addi	r2,r2,-1
 800e2bc:	18800226 	beq	r3,r2,800e2c8 <altera_avalon_jtag_uart_ioctl+0x80>
 800e2c0:	e0bffe17 	ldw	r2,-8(fp)
 800e2c4:	00000206 	br	800e2d0 <altera_avalon_jtag_uart_ioctl+0x88>
 800e2c8:	00a00034 	movhi	r2,32768
 800e2cc:	10bfff84 	addi	r2,r2,-2
 800e2d0:	e0fffd17 	ldw	r3,-12(fp)
 800e2d4:	18800115 	stw	r2,4(r3)
      rc = 0;
 800e2d8:	e03fff15 	stw	zero,-4(fp)
    break;
 800e2dc:	00000f06 	br	800e31c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 800e2e0:	e0bffd17 	ldw	r2,-12(fp)
 800e2e4:	10c00117 	ldw	r3,4(r2)
 800e2e8:	00a00034 	movhi	r2,32768
 800e2ec:	10bfffc4 	addi	r2,r2,-1
 800e2f0:	18800c26 	beq	r3,r2,800e324 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800e2f4:	e0bffd17 	ldw	r2,-12(fp)
 800e2f8:	10c00917 	ldw	r3,36(r2)
 800e2fc:	e0bffd17 	ldw	r2,-12(fp)
 800e300:	10800117 	ldw	r2,4(r2)
 800e304:	1885803a 	cmpltu	r2,r3,r2
 800e308:	10c03fcc 	andi	r3,r2,255
 800e30c:	e0bffb17 	ldw	r2,-20(fp)
 800e310:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800e314:	e03fff15 	stw	zero,-4(fp)
    break;
 800e318:	00000206 	br	800e324 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 800e31c:	0001883a 	nop
 800e320:	00000106 	br	800e328 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 800e324:	0001883a 	nop
  }

  return rc;
 800e328:	e0bfff17 	ldw	r2,-4(fp)
}
 800e32c:	e037883a 	mov	sp,fp
 800e330:	df000017 	ldw	fp,0(sp)
 800e334:	dec00104 	addi	sp,sp,4
 800e338:	f800283a 	ret

0800e33c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800e33c:	defff304 	addi	sp,sp,-52
 800e340:	dfc00c15 	stw	ra,48(sp)
 800e344:	df000b15 	stw	fp,44(sp)
 800e348:	df000b04 	addi	fp,sp,44
 800e34c:	e13ff815 	stw	r4,-32(fp)
 800e350:	e17ff715 	stw	r5,-36(fp)
 800e354:	e1bff615 	stw	r6,-40(fp)
 800e358:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 800e35c:	e0bff717 	ldw	r2,-36(fp)
 800e360:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800e364:	00004706 	br	800e484 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800e368:	e0bff817 	ldw	r2,-32(fp)
 800e36c:	10800a17 	ldw	r2,40(r2)
 800e370:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 800e374:	e0bff817 	ldw	r2,-32(fp)
 800e378:	10800b17 	ldw	r2,44(r2)
 800e37c:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 800e380:	e0fffd17 	ldw	r3,-12(fp)
 800e384:	e0bffc17 	ldw	r2,-16(fp)
 800e388:	18800536 	bltu	r3,r2,800e3a0 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800e38c:	e0fffd17 	ldw	r3,-12(fp)
 800e390:	e0bffc17 	ldw	r2,-16(fp)
 800e394:	1885c83a 	sub	r2,r3,r2
 800e398:	e0bffe15 	stw	r2,-8(fp)
 800e39c:	00000406 	br	800e3b0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800e3a0:	00c20004 	movi	r3,2048
 800e3a4:	e0bffc17 	ldw	r2,-16(fp)
 800e3a8:	1885c83a 	sub	r2,r3,r2
 800e3ac:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 800e3b0:	e0bffe17 	ldw	r2,-8(fp)
 800e3b4:	10001e26 	beq	r2,zero,800e430 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800e3b8:	e0fff617 	ldw	r3,-40(fp)
 800e3bc:	e0bffe17 	ldw	r2,-8(fp)
 800e3c0:	1880022e 	bgeu	r3,r2,800e3cc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800e3c4:	e0bff617 	ldw	r2,-40(fp)
 800e3c8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800e3cc:	e0bff817 	ldw	r2,-32(fp)
 800e3d0:	10c00e04 	addi	r3,r2,56
 800e3d4:	e0bffc17 	ldw	r2,-16(fp)
 800e3d8:	1885883a 	add	r2,r3,r2
 800e3dc:	e1bffe17 	ldw	r6,-8(fp)
 800e3e0:	100b883a 	mov	r5,r2
 800e3e4:	e13fff17 	ldw	r4,-4(fp)
 800e3e8:	80008e00 	call	80008e0 <memcpy>
      ptr   += n;
 800e3ec:	e0ffff17 	ldw	r3,-4(fp)
 800e3f0:	e0bffe17 	ldw	r2,-8(fp)
 800e3f4:	1885883a 	add	r2,r3,r2
 800e3f8:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 800e3fc:	e0fff617 	ldw	r3,-40(fp)
 800e400:	e0bffe17 	ldw	r2,-8(fp)
 800e404:	1885c83a 	sub	r2,r3,r2
 800e408:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e40c:	e0fffc17 	ldw	r3,-16(fp)
 800e410:	e0bffe17 	ldw	r2,-8(fp)
 800e414:	1885883a 	add	r2,r3,r2
 800e418:	10c1ffcc 	andi	r3,r2,2047
 800e41c:	e0bff817 	ldw	r2,-32(fp)
 800e420:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800e424:	e0bff617 	ldw	r2,-40(fp)
 800e428:	00bfcf16 	blt	zero,r2,800e368 <altera_avalon_jtag_uart_read+0x2c>
 800e42c:	00000106 	br	800e434 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 800e430:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 800e434:	e0ffff17 	ldw	r3,-4(fp)
 800e438:	e0bff717 	ldw	r2,-36(fp)
 800e43c:	1880141e 	bne	r3,r2,800e490 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800e440:	e0bff517 	ldw	r2,-44(fp)
 800e444:	1090000c 	andi	r2,r2,16384
 800e448:	1000131e 	bne	r2,zero,800e498 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800e44c:	0001883a 	nop
 800e450:	e0bff817 	ldw	r2,-32(fp)
 800e454:	10800a17 	ldw	r2,40(r2)
 800e458:	e0fffd17 	ldw	r3,-12(fp)
 800e45c:	1880051e 	bne	r3,r2,800e474 <altera_avalon_jtag_uart_read+0x138>
 800e460:	e0bff817 	ldw	r2,-32(fp)
 800e464:	10c00917 	ldw	r3,36(r2)
 800e468:	e0bff817 	ldw	r2,-32(fp)
 800e46c:	10800117 	ldw	r2,4(r2)
 800e470:	18bff736 	bltu	r3,r2,800e450 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800e474:	e0bff817 	ldw	r2,-32(fp)
 800e478:	10800a17 	ldw	r2,40(r2)
 800e47c:	e0fffd17 	ldw	r3,-12(fp)
 800e480:	18800726 	beq	r3,r2,800e4a0 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 800e484:	e0bff617 	ldw	r2,-40(fp)
 800e488:	00bfb716 	blt	zero,r2,800e368 <altera_avalon_jtag_uart_read+0x2c>
 800e48c:	00000506 	br	800e4a4 <altera_avalon_jtag_uart_read+0x168>
      break;
 800e490:	0001883a 	nop
 800e494:	00000306 	br	800e4a4 <altera_avalon_jtag_uart_read+0x168>
      break;
 800e498:	0001883a 	nop
 800e49c:	00000106 	br	800e4a4 <altera_avalon_jtag_uart_read+0x168>
      break;
 800e4a0:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800e4a4:	e0ffff17 	ldw	r3,-4(fp)
 800e4a8:	e0bff717 	ldw	r2,-36(fp)
 800e4ac:	18801826 	beq	r3,r2,800e510 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
 800e4b0:	0005303a 	rdctl	r2,status
 800e4b4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e4b8:	e0fff917 	ldw	r3,-28(fp)
 800e4bc:	00bfff84 	movi	r2,-2
 800e4c0:	1884703a 	and	r2,r3,r2
 800e4c4:	1001703a 	wrctl	status,r2
  return context;
 800e4c8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800e4cc:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800e4d0:	e0bff817 	ldw	r2,-32(fp)
 800e4d4:	10800817 	ldw	r2,32(r2)
 800e4d8:	10c00054 	ori	r3,r2,1
 800e4dc:	e0bff817 	ldw	r2,-32(fp)
 800e4e0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e4e4:	e0bff817 	ldw	r2,-32(fp)
 800e4e8:	10800017 	ldw	r2,0(r2)
 800e4ec:	10800104 	addi	r2,r2,4
 800e4f0:	1007883a 	mov	r3,r2
 800e4f4:	e0bff817 	ldw	r2,-32(fp)
 800e4f8:	10800817 	ldw	r2,32(r2)
 800e4fc:	18800035 	stwio	r2,0(r3)
 800e500:	e0bffb17 	ldw	r2,-20(fp)
 800e504:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 800e508:	e0bffa17 	ldw	r2,-24(fp)
 800e50c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800e510:	e0ffff17 	ldw	r3,-4(fp)
 800e514:	e0bff717 	ldw	r2,-36(fp)
 800e518:	18800426 	beq	r3,r2,800e52c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800e51c:	e0ffff17 	ldw	r3,-4(fp)
 800e520:	e0bff717 	ldw	r2,-36(fp)
 800e524:	1885c83a 	sub	r2,r3,r2
 800e528:	00000606 	br	800e544 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800e52c:	e0bff517 	ldw	r2,-44(fp)
 800e530:	1090000c 	andi	r2,r2,16384
 800e534:	10000226 	beq	r2,zero,800e540 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800e538:	00bffd44 	movi	r2,-11
 800e53c:	00000106 	br	800e544 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800e540:	00bffec4 	movi	r2,-5
}
 800e544:	e037883a 	mov	sp,fp
 800e548:	dfc00117 	ldw	ra,4(sp)
 800e54c:	df000017 	ldw	fp,0(sp)
 800e550:	dec00204 	addi	sp,sp,8
 800e554:	f800283a 	ret

0800e558 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800e558:	defff304 	addi	sp,sp,-52
 800e55c:	dfc00c15 	stw	ra,48(sp)
 800e560:	df000b15 	stw	fp,44(sp)
 800e564:	df000b04 	addi	fp,sp,44
 800e568:	e13ff815 	stw	r4,-32(fp)
 800e56c:	e17ff715 	stw	r5,-36(fp)
 800e570:	e1bff615 	stw	r6,-40(fp)
 800e574:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800e578:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800e57c:	e0bff717 	ldw	r2,-36(fp)
 800e580:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800e584:	00003706 	br	800e664 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800e588:	e0bff817 	ldw	r2,-32(fp)
 800e58c:	10800c17 	ldw	r2,48(r2)
 800e590:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 800e594:	e0bff817 	ldw	r2,-32(fp)
 800e598:	10800d17 	ldw	r2,52(r2)
 800e59c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 800e5a0:	e0fffc17 	ldw	r3,-16(fp)
 800e5a4:	e0bfff17 	ldw	r2,-4(fp)
 800e5a8:	1880062e 	bgeu	r3,r2,800e5c4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800e5ac:	e0ffff17 	ldw	r3,-4(fp)
 800e5b0:	e0bffc17 	ldw	r2,-16(fp)
 800e5b4:	1885c83a 	sub	r2,r3,r2
 800e5b8:	10bfffc4 	addi	r2,r2,-1
 800e5bc:	e0bffe15 	stw	r2,-8(fp)
 800e5c0:	00000b06 	br	800e5f0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800e5c4:	e0bfff17 	ldw	r2,-4(fp)
 800e5c8:	10000526 	beq	r2,zero,800e5e0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800e5cc:	00c20004 	movi	r3,2048
 800e5d0:	e0bffc17 	ldw	r2,-16(fp)
 800e5d4:	1885c83a 	sub	r2,r3,r2
 800e5d8:	e0bffe15 	stw	r2,-8(fp)
 800e5dc:	00000406 	br	800e5f0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800e5e0:	00c1ffc4 	movi	r3,2047
 800e5e4:	e0bffc17 	ldw	r2,-16(fp)
 800e5e8:	1885c83a 	sub	r2,r3,r2
 800e5ec:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 800e5f0:	e0bffe17 	ldw	r2,-8(fp)
 800e5f4:	10001e26 	beq	r2,zero,800e670 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800e5f8:	e0fff617 	ldw	r3,-40(fp)
 800e5fc:	e0bffe17 	ldw	r2,-8(fp)
 800e600:	1880022e 	bgeu	r3,r2,800e60c <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800e604:	e0bff617 	ldw	r2,-40(fp)
 800e608:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800e60c:	e0bff817 	ldw	r2,-32(fp)
 800e610:	10c20e04 	addi	r3,r2,2104
 800e614:	e0bffc17 	ldw	r2,-16(fp)
 800e618:	1885883a 	add	r2,r3,r2
 800e61c:	e1bffe17 	ldw	r6,-8(fp)
 800e620:	e17ff717 	ldw	r5,-36(fp)
 800e624:	1009883a 	mov	r4,r2
 800e628:	80008e00 	call	80008e0 <memcpy>
      ptr   += n;
 800e62c:	e0fff717 	ldw	r3,-36(fp)
 800e630:	e0bffe17 	ldw	r2,-8(fp)
 800e634:	1885883a 	add	r2,r3,r2
 800e638:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 800e63c:	e0fff617 	ldw	r3,-40(fp)
 800e640:	e0bffe17 	ldw	r2,-8(fp)
 800e644:	1885c83a 	sub	r2,r3,r2
 800e648:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800e64c:	e0fffc17 	ldw	r3,-16(fp)
 800e650:	e0bffe17 	ldw	r2,-8(fp)
 800e654:	1885883a 	add	r2,r3,r2
 800e658:	10c1ffcc 	andi	r3,r2,2047
 800e65c:	e0bff817 	ldw	r2,-32(fp)
 800e660:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 800e664:	e0bff617 	ldw	r2,-40(fp)
 800e668:	00bfc716 	blt	zero,r2,800e588 <altera_avalon_jtag_uart_write+0x30>
 800e66c:	00000106 	br	800e674 <altera_avalon_jtag_uart_write+0x11c>
        break;
 800e670:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 800e674:	0005303a 	rdctl	r2,status
 800e678:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e67c:	e0fff917 	ldw	r3,-28(fp)
 800e680:	00bfff84 	movi	r2,-2
 800e684:	1884703a 	and	r2,r3,r2
 800e688:	1001703a 	wrctl	status,r2
  return context;
 800e68c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800e690:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800e694:	e0bff817 	ldw	r2,-32(fp)
 800e698:	10800817 	ldw	r2,32(r2)
 800e69c:	10c00094 	ori	r3,r2,2
 800e6a0:	e0bff817 	ldw	r2,-32(fp)
 800e6a4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800e6a8:	e0bff817 	ldw	r2,-32(fp)
 800e6ac:	10800017 	ldw	r2,0(r2)
 800e6b0:	10800104 	addi	r2,r2,4
 800e6b4:	1007883a 	mov	r3,r2
 800e6b8:	e0bff817 	ldw	r2,-32(fp)
 800e6bc:	10800817 	ldw	r2,32(r2)
 800e6c0:	18800035 	stwio	r2,0(r3)
 800e6c4:	e0bffb17 	ldw	r2,-20(fp)
 800e6c8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 800e6cc:	e0bffa17 	ldw	r2,-24(fp)
 800e6d0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800e6d4:	e0bff617 	ldw	r2,-40(fp)
 800e6d8:	0080100e 	bge	zero,r2,800e71c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800e6dc:	e0bff517 	ldw	r2,-44(fp)
 800e6e0:	1090000c 	andi	r2,r2,16384
 800e6e4:	1000101e 	bne	r2,zero,800e728 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800e6e8:	0001883a 	nop
 800e6ec:	e0bff817 	ldw	r2,-32(fp)
 800e6f0:	10800d17 	ldw	r2,52(r2)
 800e6f4:	e0ffff17 	ldw	r3,-4(fp)
 800e6f8:	1880051e 	bne	r3,r2,800e710 <altera_avalon_jtag_uart_write+0x1b8>
 800e6fc:	e0bff817 	ldw	r2,-32(fp)
 800e700:	10c00917 	ldw	r3,36(r2)
 800e704:	e0bff817 	ldw	r2,-32(fp)
 800e708:	10800117 	ldw	r2,4(r2)
 800e70c:	18bff736 	bltu	r3,r2,800e6ec <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800e710:	e0bff817 	ldw	r2,-32(fp)
 800e714:	10800917 	ldw	r2,36(r2)
 800e718:	1000051e 	bne	r2,zero,800e730 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800e71c:	e0bff617 	ldw	r2,-40(fp)
 800e720:	00bfd016 	blt	zero,r2,800e664 <altera_avalon_jtag_uart_write+0x10c>
 800e724:	00000306 	br	800e734 <altera_avalon_jtag_uart_write+0x1dc>
        break;
 800e728:	0001883a 	nop
 800e72c:	00000106 	br	800e734 <altera_avalon_jtag_uart_write+0x1dc>
         break;
 800e730:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800e734:	e0fff717 	ldw	r3,-36(fp)
 800e738:	e0bffd17 	ldw	r2,-12(fp)
 800e73c:	18800426 	beq	r3,r2,800e750 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800e740:	e0fff717 	ldw	r3,-36(fp)
 800e744:	e0bffd17 	ldw	r2,-12(fp)
 800e748:	1885c83a 	sub	r2,r3,r2
 800e74c:	00000606 	br	800e768 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800e750:	e0bff517 	ldw	r2,-44(fp)
 800e754:	1090000c 	andi	r2,r2,16384
 800e758:	10000226 	beq	r2,zero,800e764 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800e75c:	00bffd44 	movi	r2,-11
 800e760:	00000106 	br	800e768 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800e764:	00bffec4 	movi	r2,-5
}
 800e768:	e037883a 	mov	sp,fp
 800e76c:	dfc00117 	ldw	ra,4(sp)
 800e770:	df000017 	ldw	fp,0(sp)
 800e774:	dec00204 	addi	sp,sp,8
 800e778:	f800283a 	ret

0800e77c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800e77c:	defffa04 	addi	sp,sp,-24
 800e780:	dfc00515 	stw	ra,20(sp)
 800e784:	df000415 	stw	fp,16(sp)
 800e788:	df000404 	addi	fp,sp,16
 800e78c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800e790:	0007883a 	mov	r3,zero
 800e794:	e0bffc17 	ldw	r2,-16(fp)
 800e798:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800e79c:	e0bffc17 	ldw	r2,-16(fp)
 800e7a0:	10800104 	addi	r2,r2,4
 800e7a4:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 800e7a8:	0005303a 	rdctl	r2,status
 800e7ac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e7b0:	e0fffd17 	ldw	r3,-12(fp)
 800e7b4:	00bfff84 	movi	r2,-2
 800e7b8:	1884703a 	and	r2,r3,r2
 800e7bc:	1001703a 	wrctl	status,r2
  return context;
 800e7c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800e7c4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 800e7c8:	800f3cc0 	call	800f3cc <alt_tick>
 800e7cc:	e0bfff17 	ldw	r2,-4(fp)
 800e7d0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 800e7d4:	e0bffe17 	ldw	r2,-8(fp)
 800e7d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800e7dc:	0001883a 	nop
 800e7e0:	e037883a 	mov	sp,fp
 800e7e4:	dfc00117 	ldw	ra,4(sp)
 800e7e8:	df000017 	ldw	fp,0(sp)
 800e7ec:	dec00204 	addi	sp,sp,8
 800e7f0:	f800283a 	ret

0800e7f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800e7f4:	defff804 	addi	sp,sp,-32
 800e7f8:	dfc00715 	stw	ra,28(sp)
 800e7fc:	df000615 	stw	fp,24(sp)
 800e800:	df000604 	addi	fp,sp,24
 800e804:	e13ffe15 	stw	r4,-8(fp)
 800e808:	e17ffd15 	stw	r5,-12(fp)
 800e80c:	e1bffc15 	stw	r6,-16(fp)
 800e810:	e1fffb15 	stw	r7,-20(fp)
 800e814:	e0bffb17 	ldw	r2,-20(fp)
 800e818:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800e81c:	d0a70f17 	ldw	r2,-25540(gp)
 800e820:	1000021e 	bne	r2,zero,800e82c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800e824:	e0bfff17 	ldw	r2,-4(fp)
 800e828:	d0a70f15 	stw	r2,-25540(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800e82c:	e0bffe17 	ldw	r2,-8(fp)
 800e830:	10800104 	addi	r2,r2,4
 800e834:	00c001c4 	movi	r3,7
 800e838:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800e83c:	d8000015 	stw	zero,0(sp)
 800e840:	e1fffe17 	ldw	r7,-8(fp)
 800e844:	01820074 	movhi	r6,2049
 800e848:	31b9df04 	addi	r6,r6,-6276
 800e84c:	e17ffc17 	ldw	r5,-16(fp)
 800e850:	e13ffd17 	ldw	r4,-12(fp)
 800e854:	800ecd40 	call	800ecd4 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800e858:	0001883a 	nop
 800e85c:	e037883a 	mov	sp,fp
 800e860:	dfc00117 	ldw	ra,4(sp)
 800e864:	df000017 	ldw	fp,0(sp)
 800e868:	dec00204 	addi	sp,sp,8
 800e86c:	f800283a 	ret

0800e870 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800e870:	defff504 	addi	sp,sp,-44
 800e874:	df000a15 	stw	fp,40(sp)
 800e878:	df000a04 	addi	fp,sp,40
 800e87c:	e13ff915 	stw	r4,-28(fp)
 800e880:	e17ff815 	stw	r5,-32(fp)
 800e884:	e1bff715 	stw	r6,-36(fp)
 800e888:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800e88c:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 800e890:	d0a70f17 	ldw	r2,-25540(gp)
  
  if (alt_ticks_per_second ())
 800e894:	10003c26 	beq	r2,zero,800e988 <alt_alarm_start+0x118>
  {
    if (alarm)
 800e898:	e0bff917 	ldw	r2,-28(fp)
 800e89c:	10003826 	beq	r2,zero,800e980 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800e8a0:	e0bff917 	ldw	r2,-28(fp)
 800e8a4:	e0fff717 	ldw	r3,-36(fp)
 800e8a8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800e8ac:	e0bff917 	ldw	r2,-28(fp)
 800e8b0:	e0fff617 	ldw	r3,-40(fp)
 800e8b4:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 800e8b8:	0005303a 	rdctl	r2,status
 800e8bc:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800e8c0:	e0fffd17 	ldw	r3,-12(fp)
 800e8c4:	00bfff84 	movi	r2,-2
 800e8c8:	1884703a 	and	r2,r3,r2
 800e8cc:	1001703a 	wrctl	status,r2
  return context;
 800e8d0:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 800e8d4:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800e8d8:	d0a71017 	ldw	r2,-25536(gp)
      
      current_nticks = alt_nticks();
 800e8dc:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800e8e0:	e0fff817 	ldw	r3,-32(fp)
 800e8e4:	e0bfff17 	ldw	r2,-4(fp)
 800e8e8:	1885883a 	add	r2,r3,r2
 800e8ec:	10c00044 	addi	r3,r2,1
 800e8f0:	e0bff917 	ldw	r2,-28(fp)
 800e8f4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800e8f8:	e0bff917 	ldw	r2,-28(fp)
 800e8fc:	10c00217 	ldw	r3,8(r2)
 800e900:	e0bfff17 	ldw	r2,-4(fp)
 800e904:	1880042e 	bgeu	r3,r2,800e918 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800e908:	e0bff917 	ldw	r2,-28(fp)
 800e90c:	00c00044 	movi	r3,1
 800e910:	10c00405 	stb	r3,16(r2)
 800e914:	00000206 	br	800e920 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800e918:	e0bff917 	ldw	r2,-28(fp)
 800e91c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800e920:	e0bff917 	ldw	r2,-28(fp)
 800e924:	d0e00d04 	addi	r3,gp,-32716
 800e928:	e0fffb15 	stw	r3,-20(fp)
 800e92c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800e930:	e0bffa17 	ldw	r2,-24(fp)
 800e934:	e0fffb17 	ldw	r3,-20(fp)
 800e938:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800e93c:	e0bffb17 	ldw	r2,-20(fp)
 800e940:	10c00017 	ldw	r3,0(r2)
 800e944:	e0bffa17 	ldw	r2,-24(fp)
 800e948:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800e94c:	e0bffb17 	ldw	r2,-20(fp)
 800e950:	10800017 	ldw	r2,0(r2)
 800e954:	e0fffa17 	ldw	r3,-24(fp)
 800e958:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800e95c:	e0bffb17 	ldw	r2,-20(fp)
 800e960:	e0fffa17 	ldw	r3,-24(fp)
 800e964:	10c00015 	stw	r3,0(r2)
 800e968:	e0bffe17 	ldw	r2,-8(fp)
 800e96c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800e970:	e0bffc17 	ldw	r2,-16(fp)
 800e974:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800e978:	0005883a 	mov	r2,zero
 800e97c:	00000306 	br	800e98c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800e980:	00bffa84 	movi	r2,-22
 800e984:	00000106 	br	800e98c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800e988:	00bfde84 	movi	r2,-134
  }
}
 800e98c:	e037883a 	mov	sp,fp
 800e990:	df000017 	ldw	fp,0(sp)
 800e994:	dec00104 	addi	sp,sp,4
 800e998:	f800283a 	ret

0800e99c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800e99c:	defffa04 	addi	sp,sp,-24
 800e9a0:	dfc00515 	stw	ra,20(sp)
 800e9a4:	df000415 	stw	fp,16(sp)
 800e9a8:	df000404 	addi	fp,sp,16
 800e9ac:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800e9b0:	00800244 	movi	r2,9
 800e9b4:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800e9b8:	014003f4 	movhi	r5,15
 800e9bc:	29509004 	addi	r5,r5,16960
 800e9c0:	e13ffe17 	ldw	r4,-8(fp)
 800e9c4:	80008b80 	call	80008b8 <__mulsi3>
 800e9c8:	100b883a 	mov	r5,r2
 800e9cc:	0100bef4 	movhi	r4,763
 800e9d0:	213c2004 	addi	r4,r4,-3968
 800e9d4:	800a8840 	call	800a884 <__udivsi3>
  big_loops = us / (INT_MAX/
 800e9d8:	100b883a 	mov	r5,r2
 800e9dc:	01200034 	movhi	r4,32768
 800e9e0:	213fffc4 	addi	r4,r4,-1
 800e9e4:	800a8840 	call	800a884 <__udivsi3>
 800e9e8:	100b883a 	mov	r5,r2
 800e9ec:	e13ffc17 	ldw	r4,-16(fp)
 800e9f0:	800a8840 	call	800a884 <__udivsi3>
 800e9f4:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 800e9f8:	e0bffd17 	ldw	r2,-12(fp)
 800e9fc:	10002a26 	beq	r2,zero,800eaa8 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800ea00:	e03fff15 	stw	zero,-4(fp)
 800ea04:	00001706 	br	800ea64 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800ea08:	00a00034 	movhi	r2,32768
 800ea0c:	10bfffc4 	addi	r2,r2,-1
 800ea10:	10bfffc4 	addi	r2,r2,-1
 800ea14:	103ffe1e 	bne	r2,zero,800ea10 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800ea18:	014003f4 	movhi	r5,15
 800ea1c:	29509004 	addi	r5,r5,16960
 800ea20:	e13ffe17 	ldw	r4,-8(fp)
 800ea24:	80008b80 	call	80008b8 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800ea28:	100b883a 	mov	r5,r2
 800ea2c:	0100bef4 	movhi	r4,763
 800ea30:	213c2004 	addi	r4,r4,-3968
 800ea34:	800a8840 	call	800a884 <__udivsi3>
 800ea38:	100b883a 	mov	r5,r2
 800ea3c:	01200034 	movhi	r4,32768
 800ea40:	213fffc4 	addi	r4,r4,-1
 800ea44:	800a8840 	call	800a884 <__udivsi3>
 800ea48:	1007883a 	mov	r3,r2
 800ea4c:	e0bffc17 	ldw	r2,-16(fp)
 800ea50:	10c5c83a 	sub	r2,r2,r3
 800ea54:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 800ea58:	e0bfff17 	ldw	r2,-4(fp)
 800ea5c:	10800044 	addi	r2,r2,1
 800ea60:	e0bfff15 	stw	r2,-4(fp)
 800ea64:	e0ffff17 	ldw	r3,-4(fp)
 800ea68:	e0bffd17 	ldw	r2,-12(fp)
 800ea6c:	18bfe616 	blt	r3,r2,800ea08 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800ea70:	014003f4 	movhi	r5,15
 800ea74:	29509004 	addi	r5,r5,16960
 800ea78:	e13ffe17 	ldw	r4,-8(fp)
 800ea7c:	80008b80 	call	80008b8 <__mulsi3>
 800ea80:	100b883a 	mov	r5,r2
 800ea84:	0100bef4 	movhi	r4,763
 800ea88:	213c2004 	addi	r4,r4,-3968
 800ea8c:	800a8840 	call	800a884 <__udivsi3>
 800ea90:	e17ffc17 	ldw	r5,-16(fp)
 800ea94:	1009883a 	mov	r4,r2
 800ea98:	80008b80 	call	80008b8 <__mulsi3>
    __asm__ volatile (
 800ea9c:	10bfffc4 	addi	r2,r2,-1
 800eaa0:	103ffe1e 	bne	r2,zero,800ea9c <alt_busy_sleep+0x100>
 800eaa4:	00000d06 	br	800eadc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800eaa8:	014003f4 	movhi	r5,15
 800eaac:	29509004 	addi	r5,r5,16960
 800eab0:	e13ffe17 	ldw	r4,-8(fp)
 800eab4:	80008b80 	call	80008b8 <__mulsi3>
 800eab8:	100b883a 	mov	r5,r2
 800eabc:	0100bef4 	movhi	r4,763
 800eac0:	213c2004 	addi	r4,r4,-3968
 800eac4:	800a8840 	call	800a884 <__udivsi3>
 800eac8:	e17ffc17 	ldw	r5,-16(fp)
 800eacc:	1009883a 	mov	r4,r2
 800ead0:	80008b80 	call	80008b8 <__mulsi3>
    __asm__ volatile (
 800ead4:	10bfffc4 	addi	r2,r2,-1
 800ead8:	00bffe16 	blt	zero,r2,800ead4 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800eadc:	0005883a 	mov	r2,zero
}
 800eae0:	e037883a 	mov	sp,fp
 800eae4:	dfc00117 	ldw	ra,4(sp)
 800eae8:	df000017 	ldw	fp,0(sp)
 800eaec:	dec00204 	addi	sp,sp,8
 800eaf0:	f800283a 	ret

0800eaf4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800eaf4:	deffff04 	addi	sp,sp,-4
 800eaf8:	df000015 	stw	fp,0(sp)
 800eafc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800eb00:	0001883a 	nop
 800eb04:	e037883a 	mov	sp,fp
 800eb08:	df000017 	ldw	fp,0(sp)
 800eb0c:	dec00104 	addi	sp,sp,4
 800eb10:	f800283a 	ret

0800eb14 <alt_get_errno>:
{
 800eb14:	defffe04 	addi	sp,sp,-8
 800eb18:	dfc00115 	stw	ra,4(sp)
 800eb1c:	df000015 	stw	fp,0(sp)
 800eb20:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800eb24:	d0a00a17 	ldw	r2,-32728(gp)
 800eb28:	10000326 	beq	r2,zero,800eb38 <alt_get_errno+0x24>
 800eb2c:	d0a00a17 	ldw	r2,-32728(gp)
 800eb30:	103ee83a 	callr	r2
 800eb34:	00000106 	br	800eb3c <alt_get_errno+0x28>
 800eb38:	d0a70904 	addi	r2,gp,-25564
}
 800eb3c:	e037883a 	mov	sp,fp
 800eb40:	dfc00117 	ldw	ra,4(sp)
 800eb44:	df000017 	ldw	fp,0(sp)
 800eb48:	dec00204 	addi	sp,sp,8
 800eb4c:	f800283a 	ret

0800eb50 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800eb50:	defffa04 	addi	sp,sp,-24
 800eb54:	dfc00515 	stw	ra,20(sp)
 800eb58:	df000415 	stw	fp,16(sp)
 800eb5c:	df000404 	addi	fp,sp,16
 800eb60:	e13ffd15 	stw	r4,-12(fp)
 800eb64:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800eb68:	e0bffd17 	ldw	r2,-12(fp)
 800eb6c:	10000326 	beq	r2,zero,800eb7c <alt_dev_llist_insert+0x2c>
 800eb70:	e0bffd17 	ldw	r2,-12(fp)
 800eb74:	10800217 	ldw	r2,8(r2)
 800eb78:	1000061e 	bne	r2,zero,800eb94 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800eb7c:	800eb140 	call	800eb14 <alt_get_errno>
 800eb80:	1007883a 	mov	r3,r2
 800eb84:	00800584 	movi	r2,22
 800eb88:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800eb8c:	00bffa84 	movi	r2,-22
 800eb90:	00001306 	br	800ebe0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800eb94:	e0bffd17 	ldw	r2,-12(fp)
 800eb98:	e0fffc17 	ldw	r3,-16(fp)
 800eb9c:	e0ffff15 	stw	r3,-4(fp)
 800eba0:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 800eba4:	e0bffe17 	ldw	r2,-8(fp)
 800eba8:	e0ffff17 	ldw	r3,-4(fp)
 800ebac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800ebb0:	e0bfff17 	ldw	r2,-4(fp)
 800ebb4:	10c00017 	ldw	r3,0(r2)
 800ebb8:	e0bffe17 	ldw	r2,-8(fp)
 800ebbc:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 800ebc0:	e0bfff17 	ldw	r2,-4(fp)
 800ebc4:	10800017 	ldw	r2,0(r2)
 800ebc8:	e0fffe17 	ldw	r3,-8(fp)
 800ebcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800ebd0:	e0bfff17 	ldw	r2,-4(fp)
 800ebd4:	e0fffe17 	ldw	r3,-8(fp)
 800ebd8:	10c00015 	stw	r3,0(r2)

  return 0;  
 800ebdc:	0005883a 	mov	r2,zero
}
 800ebe0:	e037883a 	mov	sp,fp
 800ebe4:	dfc00117 	ldw	ra,4(sp)
 800ebe8:	df000017 	ldw	fp,0(sp)
 800ebec:	dec00204 	addi	sp,sp,8
 800ebf0:	f800283a 	ret

0800ebf4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800ebf4:	defffd04 	addi	sp,sp,-12
 800ebf8:	dfc00215 	stw	ra,8(sp)
 800ebfc:	df000115 	stw	fp,4(sp)
 800ec00:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800ec04:	00820074 	movhi	r2,2049
 800ec08:	10bea304 	addi	r2,r2,-1396
 800ec0c:	e0bfff15 	stw	r2,-4(fp)
 800ec10:	00000606 	br	800ec2c <_do_ctors+0x38>
        (*ctor) (); 
 800ec14:	e0bfff17 	ldw	r2,-4(fp)
 800ec18:	10800017 	ldw	r2,0(r2)
 800ec1c:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800ec20:	e0bfff17 	ldw	r2,-4(fp)
 800ec24:	10bfff04 	addi	r2,r2,-4
 800ec28:	e0bfff15 	stw	r2,-4(fp)
 800ec2c:	e0ffff17 	ldw	r3,-4(fp)
 800ec30:	00820074 	movhi	r2,2049
 800ec34:	10bea404 	addi	r2,r2,-1392
 800ec38:	18bff62e 	bgeu	r3,r2,800ec14 <_do_ctors+0x20>
}
 800ec3c:	0001883a 	nop
 800ec40:	e037883a 	mov	sp,fp
 800ec44:	dfc00117 	ldw	ra,4(sp)
 800ec48:	df000017 	ldw	fp,0(sp)
 800ec4c:	dec00204 	addi	sp,sp,8
 800ec50:	f800283a 	ret

0800ec54 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800ec54:	defffd04 	addi	sp,sp,-12
 800ec58:	dfc00215 	stw	ra,8(sp)
 800ec5c:	df000115 	stw	fp,4(sp)
 800ec60:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800ec64:	00820074 	movhi	r2,2049
 800ec68:	10bea304 	addi	r2,r2,-1396
 800ec6c:	e0bfff15 	stw	r2,-4(fp)
 800ec70:	00000606 	br	800ec8c <_do_dtors+0x38>
        (*dtor) (); 
 800ec74:	e0bfff17 	ldw	r2,-4(fp)
 800ec78:	10800017 	ldw	r2,0(r2)
 800ec7c:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800ec80:	e0bfff17 	ldw	r2,-4(fp)
 800ec84:	10bfff04 	addi	r2,r2,-4
 800ec88:	e0bfff15 	stw	r2,-4(fp)
 800ec8c:	e0ffff17 	ldw	r3,-4(fp)
 800ec90:	00820074 	movhi	r2,2049
 800ec94:	10bea404 	addi	r2,r2,-1392
 800ec98:	18bff62e 	bgeu	r3,r2,800ec74 <_do_dtors+0x20>
}
 800ec9c:	0001883a 	nop
 800eca0:	e037883a 	mov	sp,fp
 800eca4:	dfc00117 	ldw	ra,4(sp)
 800eca8:	df000017 	ldw	fp,0(sp)
 800ecac:	dec00204 	addi	sp,sp,8
 800ecb0:	f800283a 	ret

0800ecb4 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800ecb4:	deffff04 	addi	sp,sp,-4
 800ecb8:	df000015 	stw	fp,0(sp)
 800ecbc:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800ecc0:	0001883a 	nop
 800ecc4:	e037883a 	mov	sp,fp
 800ecc8:	df000017 	ldw	fp,0(sp)
 800eccc:	dec00104 	addi	sp,sp,4
 800ecd0:	f800283a 	ret

0800ecd4 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800ecd4:	defff904 	addi	sp,sp,-28
 800ecd8:	dfc00615 	stw	ra,24(sp)
 800ecdc:	df000515 	stw	fp,20(sp)
 800ece0:	df000504 	addi	fp,sp,20
 800ece4:	e13fff15 	stw	r4,-4(fp)
 800ece8:	e17ffe15 	stw	r5,-8(fp)
 800ecec:	e1bffd15 	stw	r6,-12(fp)
 800ecf0:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800ecf4:	e0800217 	ldw	r2,8(fp)
 800ecf8:	d8800015 	stw	r2,0(sp)
 800ecfc:	e1fffc17 	ldw	r7,-16(fp)
 800ed00:	e1bffd17 	ldw	r6,-12(fp)
 800ed04:	e17ffe17 	ldw	r5,-8(fp)
 800ed08:	e13fff17 	ldw	r4,-4(fp)
 800ed0c:	800ee840 	call	800ee84 <alt_iic_isr_register>
}  
 800ed10:	e037883a 	mov	sp,fp
 800ed14:	dfc00117 	ldw	ra,4(sp)
 800ed18:	df000017 	ldw	fp,0(sp)
 800ed1c:	dec00204 	addi	sp,sp,8
 800ed20:	f800283a 	ret

0800ed24 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800ed24:	defff904 	addi	sp,sp,-28
 800ed28:	df000615 	stw	fp,24(sp)
 800ed2c:	df000604 	addi	fp,sp,24
 800ed30:	e13ffb15 	stw	r4,-20(fp)
 800ed34:	e17ffa15 	stw	r5,-24(fp)
 800ed38:	e0bffa17 	ldw	r2,-24(fp)
 800ed3c:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 800ed40:	0005303a 	rdctl	r2,status
 800ed44:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ed48:	e0fffe17 	ldw	r3,-8(fp)
 800ed4c:	00bfff84 	movi	r2,-2
 800ed50:	1884703a 	and	r2,r3,r2
 800ed54:	1001703a 	wrctl	status,r2
  return context;
 800ed58:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800ed5c:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 800ed60:	00c00044 	movi	r3,1
 800ed64:	e0bfff17 	ldw	r2,-4(fp)
 800ed68:	1884983a 	sll	r2,r3,r2
 800ed6c:	1007883a 	mov	r3,r2
 800ed70:	d0a70e17 	ldw	r2,-25544(gp)
 800ed74:	1884b03a 	or	r2,r3,r2
 800ed78:	d0a70e15 	stw	r2,-25544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800ed7c:	d0a70e17 	ldw	r2,-25544(gp)
 800ed80:	100170fa 	wrctl	ienable,r2
 800ed84:	e0bffd17 	ldw	r2,-12(fp)
 800ed88:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800ed8c:	e0bffc17 	ldw	r2,-16(fp)
 800ed90:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800ed94:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800ed98:	0001883a 	nop
}
 800ed9c:	e037883a 	mov	sp,fp
 800eda0:	df000017 	ldw	fp,0(sp)
 800eda4:	dec00104 	addi	sp,sp,4
 800eda8:	f800283a 	ret

0800edac <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800edac:	defff904 	addi	sp,sp,-28
 800edb0:	df000615 	stw	fp,24(sp)
 800edb4:	df000604 	addi	fp,sp,24
 800edb8:	e13ffb15 	stw	r4,-20(fp)
 800edbc:	e17ffa15 	stw	r5,-24(fp)
 800edc0:	e0bffa17 	ldw	r2,-24(fp)
 800edc4:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 800edc8:	0005303a 	rdctl	r2,status
 800edcc:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800edd0:	e0fffe17 	ldw	r3,-8(fp)
 800edd4:	00bfff84 	movi	r2,-2
 800edd8:	1884703a 	and	r2,r3,r2
 800eddc:	1001703a 	wrctl	status,r2
  return context;
 800ede0:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 800ede4:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 800ede8:	00c00044 	movi	r3,1
 800edec:	e0bfff17 	ldw	r2,-4(fp)
 800edf0:	1884983a 	sll	r2,r3,r2
 800edf4:	0084303a 	nor	r2,zero,r2
 800edf8:	1007883a 	mov	r3,r2
 800edfc:	d0a70e17 	ldw	r2,-25544(gp)
 800ee00:	1884703a 	and	r2,r3,r2
 800ee04:	d0a70e15 	stw	r2,-25544(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800ee08:	d0a70e17 	ldw	r2,-25544(gp)
 800ee0c:	100170fa 	wrctl	ienable,r2
 800ee10:	e0bffd17 	ldw	r2,-12(fp)
 800ee14:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800ee18:	e0bffc17 	ldw	r2,-16(fp)
 800ee1c:	1001703a 	wrctl	status,r2
  return 0;
 800ee20:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800ee24:	0001883a 	nop
}
 800ee28:	e037883a 	mov	sp,fp
 800ee2c:	df000017 	ldw	fp,0(sp)
 800ee30:	dec00104 	addi	sp,sp,4
 800ee34:	f800283a 	ret

0800ee38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800ee38:	defffc04 	addi	sp,sp,-16
 800ee3c:	df000315 	stw	fp,12(sp)
 800ee40:	df000304 	addi	fp,sp,12
 800ee44:	e13ffe15 	stw	r4,-8(fp)
 800ee48:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800ee4c:	000530fa 	rdctl	r2,ienable
 800ee50:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800ee54:	00c00044 	movi	r3,1
 800ee58:	e0bffd17 	ldw	r2,-12(fp)
 800ee5c:	1884983a 	sll	r2,r3,r2
 800ee60:	1007883a 	mov	r3,r2
 800ee64:	e0bfff17 	ldw	r2,-4(fp)
 800ee68:	1884703a 	and	r2,r3,r2
 800ee6c:	1004c03a 	cmpne	r2,r2,zero
 800ee70:	10803fcc 	andi	r2,r2,255
}
 800ee74:	e037883a 	mov	sp,fp
 800ee78:	df000017 	ldw	fp,0(sp)
 800ee7c:	dec00104 	addi	sp,sp,4
 800ee80:	f800283a 	ret

0800ee84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800ee84:	defff504 	addi	sp,sp,-44
 800ee88:	dfc00a15 	stw	ra,40(sp)
 800ee8c:	df000915 	stw	fp,36(sp)
 800ee90:	df000904 	addi	fp,sp,36
 800ee94:	e13ffa15 	stw	r4,-24(fp)
 800ee98:	e17ff915 	stw	r5,-28(fp)
 800ee9c:	e1bff815 	stw	r6,-32(fp)
 800eea0:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 800eea4:	00bffa84 	movi	r2,-22
 800eea8:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800eeac:	e0bff917 	ldw	r2,-28(fp)
 800eeb0:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800eeb4:	e0bffe17 	ldw	r2,-8(fp)
 800eeb8:	10800808 	cmpgei	r2,r2,32
 800eebc:	1000241e 	bne	r2,zero,800ef50 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
 800eec0:	0005303a 	rdctl	r2,status
 800eec4:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800eec8:	e0fffc17 	ldw	r3,-16(fp)
 800eecc:	00bfff84 	movi	r2,-2
 800eed0:	1884703a 	and	r2,r3,r2
 800eed4:	1001703a 	wrctl	status,r2
  return context;
 800eed8:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800eedc:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 800eee0:	e0bffe17 	ldw	r2,-8(fp)
 800eee4:	100890fa 	slli	r4,r2,3
 800eee8:	e0fff817 	ldw	r3,-32(fp)
 800eeec:	00820074 	movhi	r2,2049
 800eef0:	2085883a 	add	r2,r4,r2
 800eef4:	10ce5715 	stw	r3,14684(r2)
    alt_irq[id].context = isr_context;
 800eef8:	e0bffe17 	ldw	r2,-8(fp)
 800eefc:	100890fa 	slli	r4,r2,3
 800ef00:	e0fff717 	ldw	r3,-36(fp)
 800ef04:	00820074 	movhi	r2,2049
 800ef08:	2085883a 	add	r2,r4,r2
 800ef0c:	10ce5815 	stw	r3,14688(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800ef10:	e0bff817 	ldw	r2,-32(fp)
 800ef14:	10000526 	beq	r2,zero,800ef2c <alt_iic_isr_register+0xa8>
 800ef18:	e0bffe17 	ldw	r2,-8(fp)
 800ef1c:	100b883a 	mov	r5,r2
 800ef20:	e13ffa17 	ldw	r4,-24(fp)
 800ef24:	800ed240 	call	800ed24 <alt_ic_irq_enable>
 800ef28:	00000406 	br	800ef3c <alt_iic_isr_register+0xb8>
 800ef2c:	e0bffe17 	ldw	r2,-8(fp)
 800ef30:	100b883a 	mov	r5,r2
 800ef34:	e13ffa17 	ldw	r4,-24(fp)
 800ef38:	800edac0 	call	800edac <alt_ic_irq_disable>
 800ef3c:	e0bfff15 	stw	r2,-4(fp)
 800ef40:	e0bffd17 	ldw	r2,-12(fp)
 800ef44:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 800ef48:	e0bffb17 	ldw	r2,-20(fp)
 800ef4c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800ef50:	e0bfff17 	ldw	r2,-4(fp)
}
 800ef54:	e037883a 	mov	sp,fp
 800ef58:	dfc00117 	ldw	ra,4(sp)
 800ef5c:	df000017 	ldw	fp,0(sp)
 800ef60:	dec00204 	addi	sp,sp,8
 800ef64:	f800283a 	ret

0800ef68 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800ef68:	defff904 	addi	sp,sp,-28
 800ef6c:	dfc00615 	stw	ra,24(sp)
 800ef70:	df000515 	stw	fp,20(sp)
 800ef74:	df000504 	addi	fp,sp,20
 800ef78:	e13ffe15 	stw	r4,-8(fp)
 800ef7c:	e17ffd15 	stw	r5,-12(fp)
 800ef80:	e1bffc15 	stw	r6,-16(fp)
 800ef84:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 800ef88:	e1bffb17 	ldw	r6,-20(fp)
 800ef8c:	e17ffc17 	ldw	r5,-16(fp)
 800ef90:	e13ffd17 	ldw	r4,-12(fp)
 800ef94:	800f1d00 	call	800f1d0 <open>
 800ef98:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 800ef9c:	e0bfff17 	ldw	r2,-4(fp)
 800efa0:	10002016 	blt	r2,zero,800f024 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 800efa4:	e0ffff17 	ldw	r3,-4(fp)
 800efa8:	1805883a 	mov	r2,r3
 800efac:	1085883a 	add	r2,r2,r2
 800efb0:	10c5883a 	add	r2,r2,r3
 800efb4:	100490ba 	slli	r2,r2,2
 800efb8:	00c20074 	movhi	r3,2049
 800efbc:	10c7883a 	add	r3,r2,r3
 800efc0:	18c2c317 	ldw	r3,2828(r3)
 800efc4:	e0bffe17 	ldw	r2,-8(fp)
 800efc8:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800efcc:	e0ffff17 	ldw	r3,-4(fp)
 800efd0:	1805883a 	mov	r2,r3
 800efd4:	1085883a 	add	r2,r2,r2
 800efd8:	10c5883a 	add	r2,r2,r3
 800efdc:	100490ba 	slli	r2,r2,2
 800efe0:	00c20074 	movhi	r3,2049
 800efe4:	10c7883a 	add	r3,r2,r3
 800efe8:	18c2c417 	ldw	r3,2832(r3)
 800efec:	e0bffe17 	ldw	r2,-8(fp)
 800eff0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800eff4:	e0ffff17 	ldw	r3,-4(fp)
 800eff8:	1805883a 	mov	r2,r3
 800effc:	1085883a 	add	r2,r2,r2
 800f000:	10c5883a 	add	r2,r2,r3
 800f004:	100490ba 	slli	r2,r2,2
 800f008:	00c20074 	movhi	r3,2049
 800f00c:	10c7883a 	add	r3,r2,r3
 800f010:	18c2c517 	ldw	r3,2836(r3)
 800f014:	e0bffe17 	ldw	r2,-8(fp)
 800f018:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800f01c:	e13fff17 	ldw	r4,-4(fp)
 800f020:	800d9b80 	call	800d9b8 <alt_release_fd>
  }
} 
 800f024:	0001883a 	nop
 800f028:	e037883a 	mov	sp,fp
 800f02c:	dfc00117 	ldw	ra,4(sp)
 800f030:	df000017 	ldw	fp,0(sp)
 800f034:	dec00204 	addi	sp,sp,8
 800f038:	f800283a 	ret

0800f03c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800f03c:	defffb04 	addi	sp,sp,-20
 800f040:	dfc00415 	stw	ra,16(sp)
 800f044:	df000315 	stw	fp,12(sp)
 800f048:	df000304 	addi	fp,sp,12
 800f04c:	e13fff15 	stw	r4,-4(fp)
 800f050:	e17ffe15 	stw	r5,-8(fp)
 800f054:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800f058:	01c07fc4 	movi	r7,511
 800f05c:	01800044 	movi	r6,1
 800f060:	e17fff17 	ldw	r5,-4(fp)
 800f064:	01020074 	movhi	r4,2049
 800f068:	2102c604 	addi	r4,r4,2840
 800f06c:	800ef680 	call	800ef68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800f070:	01c07fc4 	movi	r7,511
 800f074:	000d883a 	mov	r6,zero
 800f078:	e17ffe17 	ldw	r5,-8(fp)
 800f07c:	01020074 	movhi	r4,2049
 800f080:	2102c304 	addi	r4,r4,2828
 800f084:	800ef680 	call	800ef68 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800f088:	01c07fc4 	movi	r7,511
 800f08c:	01800044 	movi	r6,1
 800f090:	e17ffd17 	ldw	r5,-12(fp)
 800f094:	01020074 	movhi	r4,2049
 800f098:	2102c904 	addi	r4,r4,2852
 800f09c:	800ef680 	call	800ef68 <alt_open_fd>
}  
 800f0a0:	0001883a 	nop
 800f0a4:	e037883a 	mov	sp,fp
 800f0a8:	dfc00117 	ldw	ra,4(sp)
 800f0ac:	df000017 	ldw	fp,0(sp)
 800f0b0:	dec00204 	addi	sp,sp,8
 800f0b4:	f800283a 	ret

0800f0b8 <alt_get_errno>:
{
 800f0b8:	defffe04 	addi	sp,sp,-8
 800f0bc:	dfc00115 	stw	ra,4(sp)
 800f0c0:	df000015 	stw	fp,0(sp)
 800f0c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800f0c8:	d0a00a17 	ldw	r2,-32728(gp)
 800f0cc:	10000326 	beq	r2,zero,800f0dc <alt_get_errno+0x24>
 800f0d0:	d0a00a17 	ldw	r2,-32728(gp)
 800f0d4:	103ee83a 	callr	r2
 800f0d8:	00000106 	br	800f0e0 <alt_get_errno+0x28>
 800f0dc:	d0a70904 	addi	r2,gp,-25564
}
 800f0e0:	e037883a 	mov	sp,fp
 800f0e4:	dfc00117 	ldw	ra,4(sp)
 800f0e8:	df000017 	ldw	fp,0(sp)
 800f0ec:	dec00204 	addi	sp,sp,8
 800f0f0:	f800283a 	ret

0800f0f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800f0f4:	defffd04 	addi	sp,sp,-12
 800f0f8:	df000215 	stw	fp,8(sp)
 800f0fc:	df000204 	addi	fp,sp,8
 800f100:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800f104:	e0bffe17 	ldw	r2,-8(fp)
 800f108:	10800217 	ldw	r2,8(r2)
 800f10c:	10d00034 	orhi	r3,r2,16384
 800f110:	e0bffe17 	ldw	r2,-8(fp)
 800f114:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800f118:	e03fff15 	stw	zero,-4(fp)
 800f11c:	00002306 	br	800f1ac <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f120:	e0ffff17 	ldw	r3,-4(fp)
 800f124:	1805883a 	mov	r2,r3
 800f128:	1085883a 	add	r2,r2,r2
 800f12c:	10c5883a 	add	r2,r2,r3
 800f130:	100490ba 	slli	r2,r2,2
 800f134:	00c20074 	movhi	r3,2049
 800f138:	10c7883a 	add	r3,r2,r3
 800f13c:	18c2c317 	ldw	r3,2828(r3)
 800f140:	e0bffe17 	ldw	r2,-8(fp)
 800f144:	10800017 	ldw	r2,0(r2)
 800f148:	1880151e 	bne	r3,r2,800f1a0 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f14c:	e0ffff17 	ldw	r3,-4(fp)
 800f150:	1805883a 	mov	r2,r3
 800f154:	1085883a 	add	r2,r2,r2
 800f158:	10c5883a 	add	r2,r2,r3
 800f15c:	100490ba 	slli	r2,r2,2
 800f160:	00c20074 	movhi	r3,2049
 800f164:	10c7883a 	add	r3,r2,r3
 800f168:	1882c517 	ldw	r2,2836(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 800f16c:	10000c0e 	bge	r2,zero,800f1a0 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 800f170:	e0ffff17 	ldw	r3,-4(fp)
 800f174:	1805883a 	mov	r2,r3
 800f178:	1085883a 	add	r2,r2,r2
 800f17c:	10c5883a 	add	r2,r2,r3
 800f180:	100490ba 	slli	r2,r2,2
 800f184:	00c20074 	movhi	r3,2049
 800f188:	18c2c304 	addi	r3,r3,2828
 800f18c:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800f190:	e0fffe17 	ldw	r3,-8(fp)
 800f194:	18800226 	beq	r3,r2,800f1a0 <alt_file_locked+0xac>
    {
      return -EACCES;
 800f198:	00bffcc4 	movi	r2,-13
 800f19c:	00000806 	br	800f1c0 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 800f1a0:	e0bfff17 	ldw	r2,-4(fp)
 800f1a4:	10800044 	addi	r2,r2,1
 800f1a8:	e0bfff15 	stw	r2,-4(fp)
 800f1ac:	d0a00917 	ldw	r2,-32732(gp)
 800f1b0:	1007883a 	mov	r3,r2
 800f1b4:	e0bfff17 	ldw	r2,-4(fp)
 800f1b8:	18bfd92e 	bgeu	r3,r2,800f120 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800f1bc:	0005883a 	mov	r2,zero
}
 800f1c0:	e037883a 	mov	sp,fp
 800f1c4:	df000017 	ldw	fp,0(sp)
 800f1c8:	dec00104 	addi	sp,sp,4
 800f1cc:	f800283a 	ret

0800f1d0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800f1d0:	defff604 	addi	sp,sp,-40
 800f1d4:	dfc00915 	stw	ra,36(sp)
 800f1d8:	df000815 	stw	fp,32(sp)
 800f1dc:	df000804 	addi	fp,sp,32
 800f1e0:	e13ffa15 	stw	r4,-24(fp)
 800f1e4:	e17ff915 	stw	r5,-28(fp)
 800f1e8:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800f1ec:	00bfffc4 	movi	r2,-1
 800f1f0:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 800f1f4:	00bffb44 	movi	r2,-19
 800f1f8:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 800f1fc:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800f200:	d1600704 	addi	r5,gp,-32740
 800f204:	e13ffa17 	ldw	r4,-24(fp)
 800f208:	800f4f80 	call	800f4f8 <alt_find_dev>
 800f20c:	e0bfff15 	stw	r2,-4(fp)
 800f210:	e0bfff17 	ldw	r2,-4(fp)
 800f214:	1000051e 	bne	r2,zero,800f22c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800f218:	e13ffa17 	ldw	r4,-24(fp)
 800f21c:	800f5880 	call	800f588 <alt_find_file>
 800f220:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 800f224:	00800044 	movi	r2,1
 800f228:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800f22c:	e0bfff17 	ldw	r2,-4(fp)
 800f230:	10002c26 	beq	r2,zero,800f2e4 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800f234:	e13fff17 	ldw	r4,-4(fp)
 800f238:	800f6900 	call	800f690 <alt_get_fd>
 800f23c:	e0bffe15 	stw	r2,-8(fp)
 800f240:	e0bffe17 	ldw	r2,-8(fp)
 800f244:	1000030e 	bge	r2,zero,800f254 <open+0x84>
    {
      status = index;
 800f248:	e0bffe17 	ldw	r2,-8(fp)
 800f24c:	e0bffd15 	stw	r2,-12(fp)
 800f250:	00002606 	br	800f2ec <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800f254:	e0fffe17 	ldw	r3,-8(fp)
 800f258:	1805883a 	mov	r2,r3
 800f25c:	1085883a 	add	r2,r2,r2
 800f260:	10c5883a 	add	r2,r2,r3
 800f264:	100490ba 	slli	r2,r2,2
 800f268:	00c20074 	movhi	r3,2049
 800f26c:	18c2c304 	addi	r3,r3,2828
 800f270:	10c5883a 	add	r2,r2,r3
 800f274:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800f278:	e0fff917 	ldw	r3,-28(fp)
 800f27c:	00900034 	movhi	r2,16384
 800f280:	10bfffc4 	addi	r2,r2,-1
 800f284:	1886703a 	and	r3,r3,r2
 800f288:	e0bffb17 	ldw	r2,-20(fp)
 800f28c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800f290:	e0bffc17 	ldw	r2,-16(fp)
 800f294:	1000051e 	bne	r2,zero,800f2ac <open+0xdc>
 800f298:	e13ffb17 	ldw	r4,-20(fp)
 800f29c:	800f0f40 	call	800f0f4 <alt_file_locked>
 800f2a0:	e0bffd15 	stw	r2,-12(fp)
 800f2a4:	e0bffd17 	ldw	r2,-12(fp)
 800f2a8:	10001016 	blt	r2,zero,800f2ec <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800f2ac:	e0bfff17 	ldw	r2,-4(fp)
 800f2b0:	10800317 	ldw	r2,12(r2)
 800f2b4:	10000826 	beq	r2,zero,800f2d8 <open+0x108>
 800f2b8:	e0bfff17 	ldw	r2,-4(fp)
 800f2bc:	10800317 	ldw	r2,12(r2)
 800f2c0:	e1fff817 	ldw	r7,-32(fp)
 800f2c4:	e1bff917 	ldw	r6,-28(fp)
 800f2c8:	e17ffa17 	ldw	r5,-24(fp)
 800f2cc:	e13ffb17 	ldw	r4,-20(fp)
 800f2d0:	103ee83a 	callr	r2
 800f2d4:	00000106 	br	800f2dc <open+0x10c>
 800f2d8:	0005883a 	mov	r2,zero
 800f2dc:	e0bffd15 	stw	r2,-12(fp)
 800f2e0:	00000206 	br	800f2ec <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800f2e4:	00bffb44 	movi	r2,-19
 800f2e8:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800f2ec:	e0bffd17 	ldw	r2,-12(fp)
 800f2f0:	1000090e 	bge	r2,zero,800f318 <open+0x148>
  {
    alt_release_fd (index);  
 800f2f4:	e13ffe17 	ldw	r4,-8(fp)
 800f2f8:	800d9b80 	call	800d9b8 <alt_release_fd>
    ALT_ERRNO = -status;
 800f2fc:	800f0b80 	call	800f0b8 <alt_get_errno>
 800f300:	1007883a 	mov	r3,r2
 800f304:	e0bffd17 	ldw	r2,-12(fp)
 800f308:	0085c83a 	sub	r2,zero,r2
 800f30c:	18800015 	stw	r2,0(r3)
    return -1;
 800f310:	00bfffc4 	movi	r2,-1
 800f314:	00000106 	br	800f31c <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800f318:	e0bffe17 	ldw	r2,-8(fp)
}
 800f31c:	e037883a 	mov	sp,fp
 800f320:	dfc00117 	ldw	ra,4(sp)
 800f324:	df000017 	ldw	fp,0(sp)
 800f328:	dec00204 	addi	sp,sp,8
 800f32c:	f800283a 	ret

0800f330 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800f330:	defffa04 	addi	sp,sp,-24
 800f334:	df000515 	stw	fp,20(sp)
 800f338:	df000504 	addi	fp,sp,20
 800f33c:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 800f340:	0005303a 	rdctl	r2,status
 800f344:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800f348:	e0fffc17 	ldw	r3,-16(fp)
 800f34c:	00bfff84 	movi	r2,-2
 800f350:	1884703a 	and	r2,r3,r2
 800f354:	1001703a 	wrctl	status,r2
  return context;
 800f358:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800f35c:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 800f360:	e0bffb17 	ldw	r2,-20(fp)
 800f364:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800f368:	e0bffd17 	ldw	r2,-12(fp)
 800f36c:	10800017 	ldw	r2,0(r2)
 800f370:	e0fffd17 	ldw	r3,-12(fp)
 800f374:	18c00117 	ldw	r3,4(r3)
 800f378:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800f37c:	e0bffd17 	ldw	r2,-12(fp)
 800f380:	10800117 	ldw	r2,4(r2)
 800f384:	e0fffd17 	ldw	r3,-12(fp)
 800f388:	18c00017 	ldw	r3,0(r3)
 800f38c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800f390:	e0bffd17 	ldw	r2,-12(fp)
 800f394:	e0fffd17 	ldw	r3,-12(fp)
 800f398:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800f39c:	e0bffd17 	ldw	r2,-12(fp)
 800f3a0:	e0fffd17 	ldw	r3,-12(fp)
 800f3a4:	10c00015 	stw	r3,0(r2)
 800f3a8:	e0bfff17 	ldw	r2,-4(fp)
 800f3ac:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 800f3b0:	e0bffe17 	ldw	r2,-8(fp)
 800f3b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800f3b8:	0001883a 	nop
 800f3bc:	e037883a 	mov	sp,fp
 800f3c0:	df000017 	ldw	fp,0(sp)
 800f3c4:	dec00104 	addi	sp,sp,4
 800f3c8:	f800283a 	ret

0800f3cc <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800f3cc:	defffb04 	addi	sp,sp,-20
 800f3d0:	dfc00415 	stw	ra,16(sp)
 800f3d4:	df000315 	stw	fp,12(sp)
 800f3d8:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800f3dc:	d0a00d17 	ldw	r2,-32716(gp)
 800f3e0:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800f3e4:	d0a71017 	ldw	r2,-25536(gp)
 800f3e8:	10800044 	addi	r2,r2,1
 800f3ec:	d0a71015 	stw	r2,-25536(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f3f0:	00002e06 	br	800f4ac <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800f3f4:	e0bfff17 	ldw	r2,-4(fp)
 800f3f8:	10800017 	ldw	r2,0(r2)
 800f3fc:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800f400:	e0bfff17 	ldw	r2,-4(fp)
 800f404:	10800403 	ldbu	r2,16(r2)
 800f408:	10803fcc 	andi	r2,r2,255
 800f40c:	10000426 	beq	r2,zero,800f420 <alt_tick+0x54>
 800f410:	d0a71017 	ldw	r2,-25536(gp)
 800f414:	1000021e 	bne	r2,zero,800f420 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800f418:	e0bfff17 	ldw	r2,-4(fp)
 800f41c:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800f420:	e0bfff17 	ldw	r2,-4(fp)
 800f424:	10800217 	ldw	r2,8(r2)
 800f428:	d0e71017 	ldw	r3,-25536(gp)
 800f42c:	18801d36 	bltu	r3,r2,800f4a4 <alt_tick+0xd8>
 800f430:	e0bfff17 	ldw	r2,-4(fp)
 800f434:	10800403 	ldbu	r2,16(r2)
 800f438:	10803fcc 	andi	r2,r2,255
 800f43c:	1000191e 	bne	r2,zero,800f4a4 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800f440:	e0bfff17 	ldw	r2,-4(fp)
 800f444:	10800317 	ldw	r2,12(r2)
 800f448:	e0ffff17 	ldw	r3,-4(fp)
 800f44c:	18c00517 	ldw	r3,20(r3)
 800f450:	1809883a 	mov	r4,r3
 800f454:	103ee83a 	callr	r2
 800f458:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800f45c:	e0bffd17 	ldw	r2,-12(fp)
 800f460:	1000031e 	bne	r2,zero,800f470 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800f464:	e13fff17 	ldw	r4,-4(fp)
 800f468:	800f3300 	call	800f330 <alt_alarm_stop>
 800f46c:	00000d06 	br	800f4a4 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800f470:	e0bfff17 	ldw	r2,-4(fp)
 800f474:	10c00217 	ldw	r3,8(r2)
 800f478:	e0bffd17 	ldw	r2,-12(fp)
 800f47c:	1887883a 	add	r3,r3,r2
 800f480:	e0bfff17 	ldw	r2,-4(fp)
 800f484:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800f488:	e0bfff17 	ldw	r2,-4(fp)
 800f48c:	10c00217 	ldw	r3,8(r2)
 800f490:	d0a71017 	ldw	r2,-25536(gp)
 800f494:	1880032e 	bgeu	r3,r2,800f4a4 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800f498:	e0bfff17 	ldw	r2,-4(fp)
 800f49c:	00c00044 	movi	r3,1
 800f4a0:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800f4a4:	e0bffe17 	ldw	r2,-8(fp)
 800f4a8:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 800f4ac:	e0ffff17 	ldw	r3,-4(fp)
 800f4b0:	d0a00d04 	addi	r2,gp,-32716
 800f4b4:	18bfcf1e 	bne	r3,r2,800f3f4 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800f4b8:	0001883a 	nop
}
 800f4bc:	0001883a 	nop
 800f4c0:	e037883a 	mov	sp,fp
 800f4c4:	dfc00117 	ldw	ra,4(sp)
 800f4c8:	df000017 	ldw	fp,0(sp)
 800f4cc:	dec00204 	addi	sp,sp,8
 800f4d0:	f800283a 	ret

0800f4d4 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800f4d4:	deffff04 	addi	sp,sp,-4
 800f4d8:	df000015 	stw	fp,0(sp)
 800f4dc:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800f4e0:	000170fa 	wrctl	ienable,zero
}
 800f4e4:	0001883a 	nop
 800f4e8:	e037883a 	mov	sp,fp
 800f4ec:	df000017 	ldw	fp,0(sp)
 800f4f0:	dec00104 	addi	sp,sp,4
 800f4f4:	f800283a 	ret

0800f4f8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800f4f8:	defffa04 	addi	sp,sp,-24
 800f4fc:	dfc00515 	stw	ra,20(sp)
 800f500:	df000415 	stw	fp,16(sp)
 800f504:	df000404 	addi	fp,sp,16
 800f508:	e13ffd15 	stw	r4,-12(fp)
 800f50c:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800f510:	e0bffc17 	ldw	r2,-16(fp)
 800f514:	10800017 	ldw	r2,0(r2)
 800f518:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800f51c:	e13ffd17 	ldw	r4,-12(fp)
 800f520:	8006f840 	call	8006f84 <strlen>
 800f524:	10800044 	addi	r2,r2,1
 800f528:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800f52c:	00000d06 	br	800f564 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800f530:	e0bfff17 	ldw	r2,-4(fp)
 800f534:	10800217 	ldw	r2,8(r2)
 800f538:	e0fffe17 	ldw	r3,-8(fp)
 800f53c:	180d883a 	mov	r6,r3
 800f540:	e17ffd17 	ldw	r5,-12(fp)
 800f544:	1009883a 	mov	r4,r2
 800f548:	800f8280 	call	800f828 <memcmp>
 800f54c:	1000021e 	bne	r2,zero,800f558 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800f550:	e0bfff17 	ldw	r2,-4(fp)
 800f554:	00000706 	br	800f574 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800f558:	e0bfff17 	ldw	r2,-4(fp)
 800f55c:	10800017 	ldw	r2,0(r2)
 800f560:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 800f564:	e0ffff17 	ldw	r3,-4(fp)
 800f568:	e0bffc17 	ldw	r2,-16(fp)
 800f56c:	18bff01e 	bne	r3,r2,800f530 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 800f570:	0005883a 	mov	r2,zero
}
 800f574:	e037883a 	mov	sp,fp
 800f578:	dfc00117 	ldw	ra,4(sp)
 800f57c:	df000017 	ldw	fp,0(sp)
 800f580:	dec00204 	addi	sp,sp,8
 800f584:	f800283a 	ret

0800f588 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800f588:	defffb04 	addi	sp,sp,-20
 800f58c:	dfc00415 	stw	ra,16(sp)
 800f590:	df000315 	stw	fp,12(sp)
 800f594:	df000304 	addi	fp,sp,12
 800f598:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800f59c:	d0a00517 	ldw	r2,-32748(gp)
 800f5a0:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800f5a4:	00003106 	br	800f66c <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800f5a8:	e0bfff17 	ldw	r2,-4(fp)
 800f5ac:	10800217 	ldw	r2,8(r2)
 800f5b0:	1009883a 	mov	r4,r2
 800f5b4:	8006f840 	call	8006f84 <strlen>
 800f5b8:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800f5bc:	e0bfff17 	ldw	r2,-4(fp)
 800f5c0:	10c00217 	ldw	r3,8(r2)
 800f5c4:	e0bffe17 	ldw	r2,-8(fp)
 800f5c8:	10bfffc4 	addi	r2,r2,-1
 800f5cc:	1885883a 	add	r2,r3,r2
 800f5d0:	10800003 	ldbu	r2,0(r2)
 800f5d4:	10803fcc 	andi	r2,r2,255
 800f5d8:	1080201c 	xori	r2,r2,128
 800f5dc:	10bfe004 	addi	r2,r2,-128
 800f5e0:	10800bd8 	cmpnei	r2,r2,47
 800f5e4:	1000031e 	bne	r2,zero,800f5f4 <alt_find_file+0x6c>
    {
      len -= 1;
 800f5e8:	e0bffe17 	ldw	r2,-8(fp)
 800f5ec:	10bfffc4 	addi	r2,r2,-1
 800f5f0:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f5f4:	e0bffe17 	ldw	r2,-8(fp)
 800f5f8:	e0fffd17 	ldw	r3,-12(fp)
 800f5fc:	1885883a 	add	r2,r3,r2
 800f600:	10800003 	ldbu	r2,0(r2)
 800f604:	10803fcc 	andi	r2,r2,255
 800f608:	1080201c 	xori	r2,r2,128
 800f60c:	10bfe004 	addi	r2,r2,-128
 800f610:	10800be0 	cmpeqi	r2,r2,47
 800f614:	1000081e 	bne	r2,zero,800f638 <alt_find_file+0xb0>
 800f618:	e0bffe17 	ldw	r2,-8(fp)
 800f61c:	e0fffd17 	ldw	r3,-12(fp)
 800f620:	1885883a 	add	r2,r3,r2
 800f624:	10800003 	ldbu	r2,0(r2)
 800f628:	10803fcc 	andi	r2,r2,255
 800f62c:	1080201c 	xori	r2,r2,128
 800f630:	10bfe004 	addi	r2,r2,-128
 800f634:	10000a1e 	bne	r2,zero,800f660 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800f638:	e0bfff17 	ldw	r2,-4(fp)
 800f63c:	10800217 	ldw	r2,8(r2)
 800f640:	e0fffe17 	ldw	r3,-8(fp)
 800f644:	180d883a 	mov	r6,r3
 800f648:	e17ffd17 	ldw	r5,-12(fp)
 800f64c:	1009883a 	mov	r4,r2
 800f650:	800f8280 	call	800f828 <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 800f654:	1000021e 	bne	r2,zero,800f660 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 800f658:	e0bfff17 	ldw	r2,-4(fp)
 800f65c:	00000706 	br	800f67c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800f660:	e0bfff17 	ldw	r2,-4(fp)
 800f664:	10800017 	ldw	r2,0(r2)
 800f668:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 800f66c:	e0ffff17 	ldw	r3,-4(fp)
 800f670:	d0a00504 	addi	r2,gp,-32748
 800f674:	18bfcc1e 	bne	r3,r2,800f5a8 <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 800f678:	0005883a 	mov	r2,zero
}
 800f67c:	e037883a 	mov	sp,fp
 800f680:	dfc00117 	ldw	ra,4(sp)
 800f684:	df000017 	ldw	fp,0(sp)
 800f688:	dec00204 	addi	sp,sp,8
 800f68c:	f800283a 	ret

0800f690 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800f690:	defffc04 	addi	sp,sp,-16
 800f694:	df000315 	stw	fp,12(sp)
 800f698:	df000304 	addi	fp,sp,12
 800f69c:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 800f6a0:	00bffa04 	movi	r2,-24
 800f6a4:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800f6a8:	e03fff15 	stw	zero,-4(fp)
 800f6ac:	00001d06 	br	800f724 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 800f6b0:	e0ffff17 	ldw	r3,-4(fp)
 800f6b4:	1805883a 	mov	r2,r3
 800f6b8:	1085883a 	add	r2,r2,r2
 800f6bc:	10c5883a 	add	r2,r2,r3
 800f6c0:	100490ba 	slli	r2,r2,2
 800f6c4:	00c20074 	movhi	r3,2049
 800f6c8:	10c7883a 	add	r3,r2,r3
 800f6cc:	1882c317 	ldw	r2,2828(r3)
 800f6d0:	1000111e 	bne	r2,zero,800f718 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800f6d4:	e0ffff17 	ldw	r3,-4(fp)
 800f6d8:	1805883a 	mov	r2,r3
 800f6dc:	1085883a 	add	r2,r2,r2
 800f6e0:	10c5883a 	add	r2,r2,r3
 800f6e4:	100490ba 	slli	r2,r2,2
 800f6e8:	e13ffd17 	ldw	r4,-12(fp)
 800f6ec:	00c20074 	movhi	r3,2049
 800f6f0:	10c7883a 	add	r3,r2,r3
 800f6f4:	1902c315 	stw	r4,2828(r3)
      if (i > alt_max_fd)
 800f6f8:	d0e00917 	ldw	r3,-32732(gp)
 800f6fc:	e0bfff17 	ldw	r2,-4(fp)
 800f700:	1880020e 	bge	r3,r2,800f70c <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 800f704:	e0bfff17 	ldw	r2,-4(fp)
 800f708:	d0a00915 	stw	r2,-32732(gp)
      }
      rc = i;
 800f70c:	e0bfff17 	ldw	r2,-4(fp)
 800f710:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800f714:	00000706 	br	800f734 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 800f718:	e0bfff17 	ldw	r2,-4(fp)
 800f71c:	10800044 	addi	r2,r2,1
 800f720:	e0bfff15 	stw	r2,-4(fp)
 800f724:	e0bfff17 	ldw	r2,-4(fp)
 800f728:	10800810 	cmplti	r2,r2,32
 800f72c:	103fe01e 	bne	r2,zero,800f6b0 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 800f730:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800f734:	e0bffe17 	ldw	r2,-8(fp)
}
 800f738:	e037883a 	mov	sp,fp
 800f73c:	df000017 	ldw	fp,0(sp)
 800f740:	dec00104 	addi	sp,sp,4
 800f744:	f800283a 	ret

0800f748 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800f748:	defffe04 	addi	sp,sp,-8
 800f74c:	df000115 	stw	fp,4(sp)
 800f750:	df000104 	addi	fp,sp,4
 800f754:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800f758:	e0bfff17 	ldw	r2,-4(fp)
 800f75c:	10bffe84 	addi	r2,r2,-6
 800f760:	10c00428 	cmpgeui	r3,r2,16
 800f764:	1800191e 	bne	r3,zero,800f7cc <alt_exception_cause_generated_bad_addr+0x84>
 800f768:	100690ba 	slli	r3,r2,2
 800f76c:	00820074 	movhi	r2,2049
 800f770:	1885883a 	add	r2,r3,r2
 800f774:	10bddf17 	ldw	r2,-2180(r2)
 800f778:	1000683a 	jmp	r2
 800f77c:	0800f7bc 	xorhi	zero,at,990
 800f780:	0800f7bc 	xorhi	zero,at,990
 800f784:	0800f7cc 	andi	zero,at,991
 800f788:	0800f7cc 	andi	zero,at,991
 800f78c:	0800f7cc 	andi	zero,at,991
 800f790:	0800f7bc 	xorhi	zero,at,990
 800f794:	0800f7c4 	addi	zero,at,991
 800f798:	0800f7cc 	andi	zero,at,991
 800f79c:	0800f7bc 	xorhi	zero,at,990
 800f7a0:	0800f7bc 	xorhi	zero,at,990
 800f7a4:	0800f7cc 	andi	zero,at,991
 800f7a8:	0800f7bc 	xorhi	zero,at,990
 800f7ac:	0800f7c4 	addi	zero,at,991
 800f7b0:	0800f7cc 	andi	zero,at,991
 800f7b4:	0800f7cc 	andi	zero,at,991
 800f7b8:	0800f7bc 	xorhi	zero,at,990
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800f7bc:	00800044 	movi	r2,1
 800f7c0:	00000306 	br	800f7d0 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800f7c4:	0005883a 	mov	r2,zero
 800f7c8:	00000106 	br	800f7d0 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 800f7cc:	0005883a 	mov	r2,zero
  }
}
 800f7d0:	e037883a 	mov	sp,fp
 800f7d4:	df000017 	ldw	fp,0(sp)
 800f7d8:	dec00104 	addi	sp,sp,4
 800f7dc:	f800283a 	ret

0800f7e0 <atexit>:
 800f7e0:	200b883a 	mov	r5,r4
 800f7e4:	000f883a 	mov	r7,zero
 800f7e8:	000d883a 	mov	r6,zero
 800f7ec:	0009883a 	mov	r4,zero
 800f7f0:	800f8b41 	jmpi	800f8b4 <__register_exitproc>

0800f7f4 <exit>:
 800f7f4:	defffe04 	addi	sp,sp,-8
 800f7f8:	000b883a 	mov	r5,zero
 800f7fc:	dc000015 	stw	r16,0(sp)
 800f800:	dfc00115 	stw	ra,4(sp)
 800f804:	2021883a 	mov	r16,r4
 800f808:	800f9440 	call	800f944 <__call_exitprocs>
 800f80c:	00820074 	movhi	r2,2049
 800f810:	11073c17 	ldw	r4,7408(r2)
 800f814:	20800f17 	ldw	r2,60(r4)
 800f818:	10000126 	beq	r2,zero,800f820 <exit+0x2c>
 800f81c:	103ee83a 	callr	r2
 800f820:	8009883a 	mov	r4,r16
 800f824:	800fa5c0 	call	800fa5c <_exit>

0800f828 <memcmp>:
 800f828:	30800130 	cmpltui	r2,r6,4
 800f82c:	10000b1e 	bne	r2,zero,800f85c <memcmp+0x34>
 800f830:	2144b03a 	or	r2,r4,r5
 800f834:	108000cc 	andi	r2,r2,3
 800f838:	10001a1e 	bne	r2,zero,800f8a4 <memcmp+0x7c>
 800f83c:	20c00017 	ldw	r3,0(r4)
 800f840:	28800017 	ldw	r2,0(r5)
 800f844:	1880171e 	bne	r3,r2,800f8a4 <memcmp+0x7c>
 800f848:	31bfff04 	addi	r6,r6,-4
 800f84c:	30800128 	cmpgeui	r2,r6,4
 800f850:	21000104 	addi	r4,r4,4
 800f854:	29400104 	addi	r5,r5,4
 800f858:	103ff81e 	bne	r2,zero,800f83c <memcmp+0x14>
 800f85c:	30ffffc4 	addi	r3,r6,-1
 800f860:	30000e26 	beq	r6,zero,800f89c <memcmp+0x74>
 800f864:	29800003 	ldbu	r6,0(r5)
 800f868:	20800003 	ldbu	r2,0(r4)
 800f86c:	30800f1e 	bne	r6,r2,800f8ac <memcmp+0x84>
 800f870:	18800044 	addi	r2,r3,1
 800f874:	20c00044 	addi	r3,r4,1
 800f878:	2089883a 	add	r4,r4,r2
 800f87c:	00000506 	br	800f894 <memcmp+0x6c>
 800f880:	18800003 	ldbu	r2,0(r3)
 800f884:	29800003 	ldbu	r6,0(r5)
 800f888:	18c00044 	addi	r3,r3,1
 800f88c:	10803fcc 	andi	r2,r2,255
 800f890:	1180061e 	bne	r2,r6,800f8ac <memcmp+0x84>
 800f894:	29400044 	addi	r5,r5,1
 800f898:	193ff91e 	bne	r3,r4,800f880 <memcmp+0x58>
 800f89c:	0005883a 	mov	r2,zero
 800f8a0:	f800283a 	ret
 800f8a4:	30ffffc4 	addi	r3,r6,-1
 800f8a8:	003fee06 	br	800f864 <memcmp+0x3c>
 800f8ac:	1185c83a 	sub	r2,r2,r6
 800f8b0:	f800283a 	ret

0800f8b4 <__register_exitproc>:
 800f8b4:	00820074 	movhi	r2,2049
 800f8b8:	10c73c17 	ldw	r3,7408(r2)
 800f8bc:	18805217 	ldw	r2,328(r3)
 800f8c0:	10001726 	beq	r2,zero,800f920 <__register_exitproc+0x6c>
 800f8c4:	10c00117 	ldw	r3,4(r2)
 800f8c8:	1a000808 	cmpgei	r8,r3,32
 800f8cc:	40001b1e 	bne	r8,zero,800f93c <__register_exitproc+0x88>
 800f8d0:	20000b26 	beq	r4,zero,800f900 <__register_exitproc+0x4c>
 800f8d4:	181090ba 	slli	r8,r3,2
 800f8d8:	02400044 	movi	r9,1
 800f8dc:	48d2983a 	sll	r9,r9,r3
 800f8e0:	1211883a 	add	r8,r2,r8
 800f8e4:	41802215 	stw	r6,136(r8)
 800f8e8:	11806217 	ldw	r6,392(r2)
 800f8ec:	21000098 	cmpnei	r4,r4,2
 800f8f0:	324cb03a 	or	r6,r6,r9
 800f8f4:	11806215 	stw	r6,392(r2)
 800f8f8:	41c04215 	stw	r7,264(r8)
 800f8fc:	20000b26 	beq	r4,zero,800f92c <__register_exitproc+0x78>
 800f900:	19000084 	addi	r4,r3,2
 800f904:	200890ba 	slli	r4,r4,2
 800f908:	18c00044 	addi	r3,r3,1
 800f90c:	10c00115 	stw	r3,4(r2)
 800f910:	1105883a 	add	r2,r2,r4
 800f914:	11400015 	stw	r5,0(r2)
 800f918:	0005883a 	mov	r2,zero
 800f91c:	f800283a 	ret
 800f920:	18805304 	addi	r2,r3,332
 800f924:	18805215 	stw	r2,328(r3)
 800f928:	003fe606 	br	800f8c4 <__register_exitproc+0x10>
 800f92c:	11006317 	ldw	r4,396(r2)
 800f930:	2252b03a 	or	r9,r4,r9
 800f934:	12406315 	stw	r9,396(r2)
 800f938:	003ff106 	br	800f900 <__register_exitproc+0x4c>
 800f93c:	00bfffc4 	movi	r2,-1
 800f940:	f800283a 	ret

0800f944 <__call_exitprocs>:
 800f944:	defff704 	addi	sp,sp,-36
 800f948:	00820074 	movhi	r2,2049
 800f94c:	ddc00715 	stw	r23,28(sp)
 800f950:	15c73c17 	ldw	r23,7408(r2)
 800f954:	dd400515 	stw	r21,20(sp)
 800f958:	dd000415 	stw	r20,16(sp)
 800f95c:	dcc00315 	stw	r19,12(sp)
 800f960:	dfc00815 	stw	ra,32(sp)
 800f964:	dd800615 	stw	r22,24(sp)
 800f968:	dc800215 	stw	r18,8(sp)
 800f96c:	dc400115 	stw	r17,4(sp)
 800f970:	dc000015 	stw	r16,0(sp)
 800f974:	2029883a 	mov	r20,r4
 800f978:	282b883a 	mov	r21,r5
 800f97c:	04c00044 	movi	r19,1
 800f980:	bc805217 	ldw	r18,328(r23)
 800f984:	90000d26 	beq	r18,zero,800f9bc <__call_exitprocs+0x78>
 800f988:	94000117 	ldw	r16,4(r18)
 800f98c:	847fffc4 	addi	r17,r16,-1
 800f990:	88000a16 	blt	r17,zero,800f9bc <__call_exitprocs+0x78>
 800f994:	84000044 	addi	r16,r16,1
 800f998:	802090ba 	slli	r16,r16,2
 800f99c:	9421883a 	add	r16,r18,r16
 800f9a0:	a8001126 	beq	r21,zero,800f9e8 <__call_exitprocs+0xa4>
 800f9a4:	80804017 	ldw	r2,256(r16)
 800f9a8:	15400f26 	beq	r2,r21,800f9e8 <__call_exitprocs+0xa4>
 800f9ac:	8c7fffc4 	addi	r17,r17,-1
 800f9b0:	88bfffd8 	cmpnei	r2,r17,-1
 800f9b4:	843fff04 	addi	r16,r16,-4
 800f9b8:	103ff91e 	bne	r2,zero,800f9a0 <__call_exitprocs+0x5c>
 800f9bc:	dfc00817 	ldw	ra,32(sp)
 800f9c0:	ddc00717 	ldw	r23,28(sp)
 800f9c4:	dd800617 	ldw	r22,24(sp)
 800f9c8:	dd400517 	ldw	r21,20(sp)
 800f9cc:	dd000417 	ldw	r20,16(sp)
 800f9d0:	dcc00317 	ldw	r19,12(sp)
 800f9d4:	dc800217 	ldw	r18,8(sp)
 800f9d8:	dc400117 	ldw	r17,4(sp)
 800f9dc:	dc000017 	ldw	r16,0(sp)
 800f9e0:	dec00904 	addi	sp,sp,36
 800f9e4:	f800283a 	ret
 800f9e8:	90800117 	ldw	r2,4(r18)
 800f9ec:	81800017 	ldw	r6,0(r16)
 800f9f0:	10bfffc4 	addi	r2,r2,-1
 800f9f4:	14401526 	beq	r2,r17,800fa4c <__call_exitprocs+0x108>
 800f9f8:	80000015 	stw	zero,0(r16)
 800f9fc:	303feb26 	beq	r6,zero,800f9ac <__call_exitprocs+0x68>
 800fa00:	9c46983a 	sll	r3,r19,r17
 800fa04:	90806217 	ldw	r2,392(r18)
 800fa08:	95800117 	ldw	r22,4(r18)
 800fa0c:	1884703a 	and	r2,r3,r2
 800fa10:	1000061e 	bne	r2,zero,800fa2c <__call_exitprocs+0xe8>
 800fa14:	303ee83a 	callr	r6
 800fa18:	90800117 	ldw	r2,4(r18)
 800fa1c:	15bfd81e 	bne	r2,r22,800f980 <__call_exitprocs+0x3c>
 800fa20:	b8805217 	ldw	r2,328(r23)
 800fa24:	14bfe126 	beq	r2,r18,800f9ac <__call_exitprocs+0x68>
 800fa28:	003fd506 	br	800f980 <__call_exitprocs+0x3c>
 800fa2c:	90806317 	ldw	r2,396(r18)
 800fa30:	81002017 	ldw	r4,128(r16)
 800fa34:	1886703a 	and	r3,r3,r2
 800fa38:	1800061e 	bne	r3,zero,800fa54 <__call_exitprocs+0x110>
 800fa3c:	200b883a 	mov	r5,r4
 800fa40:	a009883a 	mov	r4,r20
 800fa44:	303ee83a 	callr	r6
 800fa48:	003ff306 	br	800fa18 <__call_exitprocs+0xd4>
 800fa4c:	94400115 	stw	r17,4(r18)
 800fa50:	003fea06 	br	800f9fc <__call_exitprocs+0xb8>
 800fa54:	303ee83a 	callr	r6
 800fa58:	003fef06 	br	800fa18 <__call_exitprocs+0xd4>

0800fa5c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800fa5c:	defffd04 	addi	sp,sp,-12
 800fa60:	df000215 	stw	fp,8(sp)
 800fa64:	df000204 	addi	fp,sp,8
 800fa68:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800fa6c:	0001883a 	nop
 800fa70:	e0bffe17 	ldw	r2,-8(fp)
 800fa74:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800fa78:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800fa7c:	10000226 	beq	r2,zero,800fa88 <_exit+0x2c>
    ALT_SIM_FAIL();
 800fa80:	002af070 	cmpltui	zero,zero,43969
 800fa84:	00000106 	br	800fa8c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800fa88:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800fa8c:	003fff06 	br	800fa8c <_exit+0x30>
