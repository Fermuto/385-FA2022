
lab72.elf:     file format elf32-littlenios2
lab72.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000224

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0000e1e8 memsz 0x0000e1e8 flags r-x
    LOAD off    0x0000f208 vaddr 0x0800e208 paddr 0x0801023c align 2**12
         filesz 0x00002034 memsz 0x00002034 flags rw-
    LOAD off    0x00011270 vaddr 0x08012270 paddr 0x08012270 align 2**12
         filesz 0x00000000 memsz 0x00000158 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000204  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000da10  08000224  08000224  00001224  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000005d4  0800dc34  0800dc34  0000ec34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002034  0800e208  0801023c  0000f208  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000158  08012270  08012270  00011270  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000000  00000000  0001123c  2**0
                  CONTENTS
  7 .sdram        00000000  080123c8  080123c8  0001123c  2**0
                  CONTENTS
  8 .comment      0000002c  00000000  00000000  0001123c  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000c10  00000000  00000000  00011268  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00035b0e  00000000  00000000  00011e78  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000b071  00000000  00000000  00047986  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000133f3  00000000  00000000  000529f7  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  000018ac  00000000  00000000  00065dec  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000038ff  00000000  00000000  00067698  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018ac8  00000000  00000000  0006af97  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00083a60  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001730  00000000  00000000  00083aa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  00087cd2  2**0
                  CONTENTS, READONLY
 19 .cpu          0000000c  00000000  00000000  00087cd5  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00087ce1  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00087ce2  2**0
                  CONTENTS, READONLY
 22 .sysid_hash   00000004  00000000  00000000  00087ce3  2**0
                  CONTENTS, READONLY
 23 .sysid_base   00000004  00000000  00000000  00087ce7  2**0
                  CONTENTS, READONLY
 24 .sysid_time   00000004  00000000  00000000  00087ceb  2**0
                  CONTENTS, READONLY
 25 .stderr_dev   0000000b  00000000  00000000  00087cef  2**0
                  CONTENTS, READONLY
 26 .stdin_dev    0000000b  00000000  00000000  00087cfa  2**0
                  CONTENTS, READONLY
 27 .stdout_dev   0000000b  00000000  00000000  00087d05  2**0
                  CONTENTS, READONLY
 28 .sopc_system_name 00000008  00000000  00000000  00087d10  2**0
                  CONTENTS, READONLY
 29 .quartus_project_dir 00000031  00000000  00000000  00087d18  2**0
                  CONTENTS, READONLY
 30 .jdi          00004e82  00000000  00000000  00087d49  2**0
                  CONTENTS, READONLY
 31 .sopcinfo     0008af3c  00000000  00000000  0008cbcb  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000224 l    d  .text	00000000 .text
0800dc34 l    d  .rodata	00000000 .rodata
0800e208 l    d  .rwdata	00000000 .rwdata
08012270 l    d  .bss	00000000 .bss
00000000 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
080123c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../lab72_bsp//obj/HAL/src/crt0.o
0800025c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 main.c
080101f8 l     O .rwdata	00000004 vga_ctrl
0800e208 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 palette_test.c
080101fc l     O .rwdata	00000004 vga_ctrl
0800e378 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 text_mode_vga_color.c
08010200 l     O .rwdata	00000004 vga_ctrl
0800e4e8 l     O .rwdata	00000170 colors
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 rand.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800dcda l     O .rodata	00000010 blanks.5207
0800dcca l     O .rodata	00000010 zeroes.5208
00000000 l    df *ABS*	00000000 dtoa.c
08002e60 l     F .text	00000234 quorem
00000000 l    df *ABS*	00000000 impure.c
0800e658 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 localeconv.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 mprec.c
0800dcfc l     O .rodata	0000000c p05.4024
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 vfprintf.c
0800de30 l     O .rodata	00000010 blanks.5187
0800de20 l     O .rodata	00000010 zeroes.5188
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
00000000 l    df *ABS*	00000000 mbtowc_r.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 ctype_.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 unorddf2.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_load.c
0800b9a8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08010214 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0800bc38 l     F .text	00000034 alt_dev_reg
0800eff0 l     O .rwdata	00001060 jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0800bf2c l     F .text	00000204 altera_avalon_jtag_uart_irq
0800c130 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0800c76c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
0800cae4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0800cc1c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0800cc48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0800d09c l     F .text	000000d4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0800d1ec l     F .text	0000003c alt_get_errno
0800d228 l     F .text	000000dc alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0801229c g     O .bss	00000004 alt_instruction_exception_handler
08005fb8 g     F .text	00000074 _mprec_log10
08006098 g     F .text	00000074 __any_on
0800dd08 g     O .rodata	00000028 __mprec_tinytens
0800ba94 g     F .text	0000007c alt_main
080122c8 g     O .bss	00000100 alt_irq
0801023c g       *ABS*	00000000 __flash_rwdata_start
0800a370 g     F .text	00000080 .hidden __eqdf2
080123c8 g       *ABS*	00000000 __alt_heap_start
08007944 g     F .text	00000070 _setlocale_r
0800bb34 g     F .text	00000024 __malloc_unlock
08000720 g     F .text	0000025c textVGAColorScreenSaver
08007a24 g     F .text	0000012c memmove
08005158 g     F .text	000000a4 _Balloc
0800a3f0 g     F .text	000000f0 .hidden __gtdf2
0800d678 g     F .text	00000024 altera_nios2_gen2_irq_init
08000000 g     F .entry	0000000c __reset
0800475c g     F .text	00000008 __localeconv_l
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801227c g     O .bss	00000004 errno
08006328 g     F .text	00001138 ___svfiprintf_internal_r
08012288 g     O .bss	00000004 alt_argv
080181f8 g       *ABS*	00000000 _gp
0800bc08 g     F .text	00000030 usleep
08000440 g     F .text	00000050 textVGAColorClr
08010078 g     O .rwdata	00000180 alt_fd_list
0800d69c g     F .text	00000090 alt_find_dev
08005058 g     F .text	00000100 memcpy
0800b7f0 g     F .text	000000c8 .hidden __floatsidf
0800d170 g     F .text	0000007c alt_io_redirect
0800a4e0 g     F .text	000000f0 .hidden __ltdf2
0800dc34 g       *ABS*	00000000 __DTOR_END__
0800d8ec g     F .text	00000098 alt_exception_cause_generated_bad_addr
08005f14 g     F .text	000000a4 __ratio
0800c32c g     F .text	0000021c altera_avalon_jtag_uart_read
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
08000a74 g     F .text	00000064 .hidden __udivsi3
0800dd58 g     O .rodata	000000c8 __mprec_tens
08012278 g     O .bss	00000004 __malloc_top_pad
08004764 g     F .text	0000000c _localeconv_r
08005580 g     F .text	00000034 __i2b
0800610c g     F .text	00000058 _sbrk_r
08010228 g     O .rwdata	00000004 alt_max_fd
08012274 g     O .bss	00000004 __malloc_max_sbrked_mem
0800906c g     F .text	000009a0 .hidden __adddf3
08005cc8 g     F .text	00000104 __b2d
08008aa4 g     F .text	000005c8 .hidden __umoddi3
08010204 g     O .rwdata	00000004 _global_impure_ptr
08007c40 g     F .text	0000062c _realloc_r
080123c8 g       *ABS*	00000000 __bss_end
0800cfb8 g     F .text	000000e4 alt_iic_isr_register
0800d570 g     F .text	00000108 alt_tick
08008488 g     F .text	0000061c .hidden __udivdi3
0800dd30 g     O .rodata	00000028 __mprec_bigtens
0800535c g     F .text	00000110 __s2b
0800b8b8 g     F .text	0000009c .hidden __floatunsidf
08005a58 g     F .text	00000058 __mcmp
0800cf6c g     F .text	0000004c alt_ic_irq_enabled
0800d4d4 g     F .text	0000009c alt_alarm_stop
08012290 g     O .bss	00000004 alt_irq_active
080000fc g     F .exceptions	000000c8 alt_irq_handler
08010050 g     O .rwdata	00000028 alt_dev_null
0800cbfc g     F .text	00000020 alt_dcache_flush_all
0800546c g     F .text	00000064 __hi0bits
0800b770 g     F .text	00000080 .hidden __fixdfsi
0801023c g       *ABS*	00000000 __ram_rwdata_end
08010220 g     O .rwdata	00000008 alt_dev_list
0800e208 g       *ABS*	00000000 __ram_rodata_end
0800a4e0 g     F .text	000000f0 .hidden __ledf2
080057f4 g     F .text	00000128 __pow5mult
08000ad8 g     F .text	0000005c .hidden __umodsi3
080123c8 g       *ABS*	00000000 end
0800be6c g     F .text	000000c0 altera_avalon_jtag_uart_init
080001c4 g     F .exceptions	00000060 alt_instruction_exception_entry
0800dc34 g       *ABS*	00000000 __CTOR_LIST__
0c000000 g       *ABS*	00000000 __alt_stack_pointer
0800c7e4 g     F .text	0000007c alt_avalon_timer_sc_init
0800b954 g     F .text	00000054 .hidden __clzsi2
0800c548 g     F .text	00000224 altera_avalon_jtag_uart_write
08004f70 g     F .text	000000e8 memchr
08000bd0 g     F .text	00000054 _sprintf_r
08007648 g     F .text	000002fc _free_r
0800df51 g     O .rodata	00000180 _ctype_b
080079b4 g     F .text	0000000c __locale_mb_cur_max
0800dae8 g     F .text	00000118 __call_exitprocs
0801020c g     O .rwdata	00000004 __malloc_sbrk_base
08000224 g     F .text	0000003c _start
08012294 g     O .bss	00000004 _alt_tick_rate
08000b70 g     F .text	00000060 rand
0800591c g     F .text	0000013c __lshift
08012298 g     O .bss	00000004 _alt_nticks
0800bca4 g     F .text	00000064 alt_sys_init
08006164 g     F .text	000001c4 __ssprint_r
0800da58 g     F .text	00000090 __register_exitproc
080055b4 g     F .text	00000240 __multiply
0800c1d0 g     F .text	00000068 altera_avalon_jtag_uart_close
08000b34 g     F .text	00000028 .hidden __mulsi3
0800e208 g       *ABS*	00000000 __ram_rwdata_start
0800dc34 g       *ABS*	00000000 __ram_rodata_start
080122a0 g     O .bss	00000028 __malloc_current_mallinfo
08005dcc g     F .text	00000148 __d2b
0800bd08 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0800d834 g     F .text	000000b8 alt_get_fd
0800c98c g     F .text	00000158 alt_busy_sleep
0800d9cc g     F .text	0000008c memcmp
0800bdc8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
080123c8 g       *ABS*	00000000 __alt_stack_base
0800be18 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
08009a0c g     F .text	00000964 .hidden __divdf3
0800602c g     F .text	0000006c __copybits
0800ea7c g     O .rwdata	00000408 __malloc_av_
0800a5d0 g     F .text	000007e0 .hidden __muldf3
0800d72c g     F .text	00000108 alt_find_file
0800cc84 g     F .text	000000a4 alt_dev_llist_insert
0800bb10 g     F .text	00000024 __malloc_lock
0800bb58 g     F .text	000000b0 sbrk
08000d20 g     F .text	00002140 ___svfprintf_internal_r
08007460 g     F .text	000000cc _calloc_r
08012270 g       *ABS*	00000000 __bss_start
08007b50 g     F .text	000000f0 memset
08000260 g     F .text	0000002c main
0801228c g     O .bss	00000004 alt_envp
08012270 g     O .bss	00000004 __malloc_max_total_mem
0800bd68 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08000b5c g     F .text	00000014 srand
0c000000 g       *ABS*	00000000 __alt_heap_limit
08003094 g     F .text	000016c8 _dtoa_r
0800477c g     F .text	000007f4 _malloc_r
08008350 g     F .text	00000030 __ascii_wctomb
0801022c g     O .rwdata	00000004 alt_errno
080079d4 g     F .text	0000000c _mbtowc_r
0800097c g     F .text	00000080 .hidden __divsi3
080005ac g     F .text	00000174 setColorPalette
0800752c g     F .text	0000011c _malloc_trim_r
0800dc34 g       *ABS*	00000000 __CTOR_END__
0800826c g     F .text	000000d8 strcmp
0800dc34 g       *ABS*	00000000 __flash_rodata_start
0800dc34 g       *ABS*	00000000 __DTOR_LIST__
0800a370 g     F .text	00000080 .hidden __nedf2
0800bc6c g     F .text	00000038 alt_irq_init
0800d464 g     F .text	00000070 alt_release_fd
08000c24 g     F .text	00000064 sprintf
0800e0d1 g     O .rodata	00000100 .hidden __clz_tab
08012280 g     O .bss	00000004 _PathLocale
0800d984 g     F .text	00000014 atexit
080079c0 g     F .text	00000014 setlocale
08010208 g     O .rwdata	00000004 _impure_ptr
08012284 g     O .bss	00000004 alt_argc
0800cd88 g     F .text	00000060 _do_dtors
08000020 g       .exceptions	00000000 alt_irq_entry
080079e0 g     F .text	00000044 __ascii_mbtowc
08005c6c g     F .text	0000005c __ulp
08010218 g     O .rwdata	00000008 alt_fs_list
08000020 g       *ABS*	00000000 __ram_exceptions_start
08004770 g     F .text	0000000c localeconv
0800ce08 g     F .text	00000050 alt_ic_isr_register
0801023c g       *ABS*	00000000 _edata
080123c8 g       *ABS*	00000000 _end
08000224 g       *ABS*	00000000 __ram_exceptions_end
0800c238 g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
08000490 g     F .text	0000011c textVGADrawColorText
0800cee0 g     F .text	0000008c alt_ic_irq_disable
08010210 g     O .rwdata	00000004 __malloc_trim_threshold
0800d998 g     F .text	00000034 exit
08005ab0 g     F .text	000001bc __mdiff
080009fc g     F .text	00000078 .hidden __modsi3
0c000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08000000 g       *ABS*	00000000 __alt_mem_sdram
0800de50 g     O .rodata	00000101 _ctype_
0800b71c g     F .text	00000054 .hidden __unorddf2
0800dc00 g     F .text	00000034 _exit
0800c860 g     F .text	0000012c alt_alarm_start
08008380 g     F .text	00000108 .hidden __muldi3
08000c88 g     F .text	00000098 strlen
0800d304 g     F .text	00000160 open
0800a3f0 g     F .text	000000f0 .hidden __gedf2
0800cde8 g     F .text	00000020 alt_icache_flush_all
08010230 g     O .rwdata	00000004 alt_priority_mask
0800ce58 g     F .text	00000088 alt_ic_irq_enable
08008344 g     F .text	0000000c _wctomb_r
0800adb0 g     F .text	0000096c .hidden __subdf3
080054d0 g     F .text	000000b0 __lo0bits
08010234 g     O .rwdata	00000008 alt_alarm_list
0800cd28 g     F .text	00000060 _do_ctors
0800cb20 g     F .text	000000dc close
0800ee84 g     O .rwdata	0000016c __global_locale
0800028c g     F .text	000001b4 paletteTest
0800ba10 g     F .text	00000084 alt_load
08005220 g     F .text	0000013c __multadd
080051fc g     F .text	00000024 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000000:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000004:	08408914 	ori	at,at,548
    jmp r1
 8000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 800008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001c40 	call	80001c4 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffc15 	stw	r2,-16(fp)

  return active;
 8000118:	e0bffc17 	ldw	r2,-16(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bfff15 	stw	r2,-4(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffe15 	stw	r2,-8(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0ffff17 	ldw	r3,-4(fp)
 8000130:	e0bffe17 	ldw	r2,-8(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001126 	beq	r2,zero,8000180 <alt_irq_handler+0x84>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	e0bffd17 	ldw	r2,-12(fp)
 8000140:	100690fa 	slli	r3,r2,3
 8000144:	00820074 	movhi	r2,2049
 8000148:	1885883a 	add	r2,r3,r2
 800014c:	10c8b217 	ldw	r3,8904(r2)
 8000150:	e0bffd17 	ldw	r2,-12(fp)
 8000154:	100890fa 	slli	r4,r2,3
 8000158:	00820074 	movhi	r2,2049
 800015c:	2085883a 	add	r2,r4,r2
 8000160:	1088b317 	ldw	r2,8908(r2)
 8000164:	1009883a 	mov	r4,r2
 8000168:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 800016c:	0001883a 	nop
  NIOS2_READ_IPENDING (active);
 8000170:	0005313a 	rdctl	r2,ipending
 8000174:	e0bffb15 	stw	r2,-20(fp)
  return active;
 8000178:	e0bffb17 	ldw	r2,-20(fp)
 800017c:	00000706 	br	800019c <alt_irq_handler+0xa0>
      }
      mask <<= 1;
 8000180:	e0bffe17 	ldw	r2,-8(fp)
 8000184:	1085883a 	add	r2,r2,r2
 8000188:	e0bffe15 	stw	r2,-8(fp)
      i++;
 800018c:	e0bffd17 	ldw	r2,-12(fp)
 8000190:	10800044 	addi	r2,r2,1
 8000194:	e0bffd15 	stw	r2,-12(fp)
      if (active & mask)
 8000198:	003fe406 	br	800012c <alt_irq_handler+0x30>

    } while (1);

    active = alt_irq_pending ();
 800019c:	e0bfff15 	stw	r2,-4(fp)
    
  } while (active);
 80001a0:	e0bfff17 	ldw	r2,-4(fp)
 80001a4:	103fde1e 	bne	r2,zero,8000120 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001a8:	0001883a 	nop
}
 80001ac:	0001883a 	nop
 80001b0:	e037883a 	mov	sp,fp
 80001b4:	dfc00117 	ldw	ra,4(sp)
 80001b8:	df000017 	ldw	fp,0(sp)
 80001bc:	dec00204 	addi	sp,sp,8
 80001c0:	f800283a 	ret

080001c4 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001c4:	defffb04 	addi	sp,sp,-20
 80001c8:	dfc00415 	stw	ra,16(sp)
 80001cc:	df000315 	stw	fp,12(sp)
 80001d0:	df000304 	addi	fp,sp,12
 80001d4:	e13ffd15 	stw	r4,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 80001d8:	00bfffc4 	movi	r2,-1
 80001dc:	e0bfff15 	stw	r2,-4(fp)
  badaddr = 0;
 80001e0:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 80001e4:	d0a82917 	ldw	r2,-24412(gp)
 80001e8:	10000726 	beq	r2,zero,8000208 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 80001ec:	d0a82917 	ldw	r2,-24412(gp)
 80001f0:	e0ffff17 	ldw	r3,-4(fp)
 80001f4:	e1bffe17 	ldw	r6,-8(fp)
 80001f8:	e17ffd17 	ldw	r5,-12(fp)
 80001fc:	1809883a 	mov	r4,r3
 8000200:	103ee83a 	callr	r2
 8000204:	00000206 	br	8000210 <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000208:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 800020c:	0005883a 	mov	r2,zero
}
 8000210:	e037883a 	mov	sp,fp
 8000214:	dfc00117 	ldw	ra,4(sp)
 8000218:	df000017 	ldw	fp,0(sp)
 800021c:	dec00204 	addi	sp,sp,8
 8000220:	f800283a 	ret

Disassembly of section .text:

08000224 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000224:	06c30034 	movhi	sp,3072
    ori sp, sp, %lo(__alt_stack_pointer)
 8000228:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 800022c:	06820074 	movhi	gp,2049
    ori gp, gp, %lo(_gp)
 8000230:	d6a07e14 	ori	gp,gp,33272
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000234:	00820074 	movhi	r2,2049
    ori r2, r2, %lo(__bss_start)
 8000238:	10889c14 	ori	r2,r2,8816

    movhi r3, %hi(__bss_end)
 800023c:	00c20074 	movhi	r3,2049
    ori r3, r3, %lo(__bss_end)
 8000240:	18c8f214 	ori	r3,r3,9160

    beq r2, r3, 1f
 8000244:	10c00326 	beq	r2,r3,8000254 <_start+0x30>

0:
    stw zero, (r2)
 8000248:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 800024c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 8000250:	10fffd36 	bltu	r2,r3,8000248 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000254:	800ba100 	call	800ba10 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000258:	800ba940 	call	800ba94 <alt_main>

0800025c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 800025c:	003fff06 	br	800025c <alt_after_alt_main>

08000260 <main>:
 */
#include "text_mode_vga_color.h"
#include <system.h>
#include <alt_types.h>

int main(){
 8000260:	defffe04 	addi	sp,sp,-8
 8000264:	dfc00115 	stw	ra,4(sp)
 8000268:	df000015 	stw	fp,0(sp)
 800026c:	d839883a 	mov	fp,sp
	textVGAColorScreenSaver();
 8000270:	80007200 	call	8000720 <textVGAColorScreenSaver>
    return 1;
 8000274:	00800044 	movi	r2,1
}
 8000278:	e037883a 	mov	sp,fp
 800027c:	dfc00117 	ldw	ra,4(sp)
 8000280:	df000017 	ldw	fp,0(sp)
 8000284:	dec00204 	addi	sp,sp,8
 8000288:	f800283a 	ret

0800028c <paletteTest>:

#include "text_mode_vga_color.h"


void paletteTest()
{
 800028c:	defffa04 	addi	sp,sp,-24
 8000290:	dfc00515 	stw	ra,20(sp)
 8000294:	df000415 	stw	fp,16(sp)
 8000298:	dc400315 	stw	r17,12(sp)
 800029c:	dc000215 	stw	r16,8(sp)
 80002a0:	df000404 	addi	fp,sp,16
	textVGAColorClr();
 80002a4:	80004400 	call	8000440 <textVGAColorClr>
	textVGADrawColorText ("This text should cycle through random colors", 0, 0, 0, 1);
 80002a8:	00800044 	movi	r2,1
 80002ac:	d8800015 	stw	r2,0(sp)
 80002b0:	000f883a 	mov	r7,zero
 80002b4:	000d883a 	mov	r6,zero
 80002b8:	000b883a 	mov	r5,zero
 80002bc:	01020074 	movhi	r4,2049
 80002c0:	21370d04 	addi	r4,r4,-9164
 80002c4:	80004900 	call	8000490 <textVGADrawColorText>

	for (int i = 0; i < 100; i ++)
 80002c8:	e03ffd15 	stw	zero,-12(fp)
 80002cc:	00005106 	br	8000414 <paletteTest+0x188>
	{
		usleep (20000);
 80002d0:	01138804 	movi	r4,20000
 80002d4:	800bc080 	call	800bc08 <usleep>
		setColorPalette(0, 	rand() % 16, rand() % 16,rand() % 16); //set color 0 to random color;
 80002d8:	8000b700 	call	8000b70 <rand>
 80002dc:	1007883a 	mov	r3,r2
 80002e0:	00a00034 	movhi	r2,32768
 80002e4:	108003c4 	addi	r2,r2,15
 80002e8:	1884703a 	and	r2,r3,r2
 80002ec:	1000040e 	bge	r2,zero,8000300 <paletteTest+0x74>
 80002f0:	10bfffc4 	addi	r2,r2,-1
 80002f4:	00fffc04 	movi	r3,-16
 80002f8:	10c4b03a 	or	r2,r2,r3
 80002fc:	10800044 	addi	r2,r2,1
 8000300:	14003fcc 	andi	r16,r2,255
 8000304:	8000b700 	call	8000b70 <rand>
 8000308:	1007883a 	mov	r3,r2
 800030c:	00a00034 	movhi	r2,32768
 8000310:	108003c4 	addi	r2,r2,15
 8000314:	1884703a 	and	r2,r3,r2
 8000318:	1000040e 	bge	r2,zero,800032c <paletteTest+0xa0>
 800031c:	10bfffc4 	addi	r2,r2,-1
 8000320:	00fffc04 	movi	r3,-16
 8000324:	10c4b03a 	or	r2,r2,r3
 8000328:	10800044 	addi	r2,r2,1
 800032c:	14403fcc 	andi	r17,r2,255
 8000330:	8000b700 	call	8000b70 <rand>
 8000334:	1007883a 	mov	r3,r2
 8000338:	00a00034 	movhi	r2,32768
 800033c:	108003c4 	addi	r2,r2,15
 8000340:	1884703a 	and	r2,r3,r2
 8000344:	1000040e 	bge	r2,zero,8000358 <paletteTest+0xcc>
 8000348:	10bfffc4 	addi	r2,r2,-1
 800034c:	00fffc04 	movi	r3,-16
 8000350:	10c4b03a 	or	r2,r2,r3
 8000354:	10800044 	addi	r2,r2,1
 8000358:	10803fcc 	andi	r2,r2,255
 800035c:	100f883a 	mov	r7,r2
 8000360:	880d883a 	mov	r6,r17
 8000364:	800b883a 	mov	r5,r16
 8000368:	0009883a 	mov	r4,zero
 800036c:	80005ac0 	call	80005ac <setColorPalette>
		setColorPalette(1, 	rand() % 16, rand() % 16,rand() % 16); //set color 1 to random color;
 8000370:	8000b700 	call	8000b70 <rand>
 8000374:	1007883a 	mov	r3,r2
 8000378:	00a00034 	movhi	r2,32768
 800037c:	108003c4 	addi	r2,r2,15
 8000380:	1884703a 	and	r2,r3,r2
 8000384:	1000040e 	bge	r2,zero,8000398 <paletteTest+0x10c>
 8000388:	10bfffc4 	addi	r2,r2,-1
 800038c:	00fffc04 	movi	r3,-16
 8000390:	10c4b03a 	or	r2,r2,r3
 8000394:	10800044 	addi	r2,r2,1
 8000398:	14003fcc 	andi	r16,r2,255
 800039c:	8000b700 	call	8000b70 <rand>
 80003a0:	1007883a 	mov	r3,r2
 80003a4:	00a00034 	movhi	r2,32768
 80003a8:	108003c4 	addi	r2,r2,15
 80003ac:	1884703a 	and	r2,r3,r2
 80003b0:	1000040e 	bge	r2,zero,80003c4 <paletteTest+0x138>
 80003b4:	10bfffc4 	addi	r2,r2,-1
 80003b8:	00fffc04 	movi	r3,-16
 80003bc:	10c4b03a 	or	r2,r2,r3
 80003c0:	10800044 	addi	r2,r2,1
 80003c4:	14403fcc 	andi	r17,r2,255
 80003c8:	8000b700 	call	8000b70 <rand>
 80003cc:	1007883a 	mov	r3,r2
 80003d0:	00a00034 	movhi	r2,32768
 80003d4:	108003c4 	addi	r2,r2,15
 80003d8:	1884703a 	and	r2,r3,r2
 80003dc:	1000040e 	bge	r2,zero,80003f0 <paletteTest+0x164>
 80003e0:	10bfffc4 	addi	r2,r2,-1
 80003e4:	00fffc04 	movi	r3,-16
 80003e8:	10c4b03a 	or	r2,r2,r3
 80003ec:	10800044 	addi	r2,r2,1
 80003f0:	10803fcc 	andi	r2,r2,255
 80003f4:	100f883a 	mov	r7,r2
 80003f8:	880d883a 	mov	r6,r17
 80003fc:	800b883a 	mov	r5,r16
 8000400:	01000044 	movi	r4,1
 8000404:	80005ac0 	call	80005ac <setColorPalette>
	for (int i = 0; i < 100; i ++)
 8000408:	e0bffd17 	ldw	r2,-12(fp)
 800040c:	10800044 	addi	r2,r2,1
 8000410:	e0bffd15 	stw	r2,-12(fp)
 8000414:	e0bffd17 	ldw	r2,-12(fp)
 8000418:	10801910 	cmplti	r2,r2,100
 800041c:	103fac1e 	bne	r2,zero,80002d0 <paletteTest+0x44>
	}

}
 8000420:	0001883a 	nop
 8000424:	e6fffe04 	addi	sp,fp,-8
 8000428:	dfc00317 	ldw	ra,12(sp)
 800042c:	df000217 	ldw	fp,8(sp)
 8000430:	dc400117 	ldw	r17,4(sp)
 8000434:	dc000017 	ldw	r16,0(sp)
 8000438:	dec00404 	addi	sp,sp,16
 800043c:	f800283a 	ret

08000440 <textVGAColorClr>:
#include <alt_types.h>
#include "text_mode_vga_color.h"
#include <stddef.h>

void textVGAColorClr()
{
 8000440:	defffe04 	addi	sp,sp,-8
 8000444:	df000115 	stw	fp,4(sp)
 8000448:	df000104 	addi	fp,sp,4
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 800044c:	e03fff15 	stw	zero,-4(fp)
 8000450:	00000706 	br	8000470 <textVGAColorClr+0x30>
	{
		vga_ctrl->VRAM[i] = 0x00;
 8000454:	d0e00217 	ldw	r3,-32760(gp)
 8000458:	e0bfff17 	ldw	r2,-4(fp)
 800045c:	1885883a 	add	r2,r3,r2
 8000460:	10000005 	stb	zero,0(r2)
	for (int i = 0; i<(ROWS*COLUMNS) * 2; i++)
 8000464:	e0bfff17 	ldw	r2,-4(fp)
 8000468:	10800044 	addi	r2,r2,1
 800046c:	e0bfff15 	stw	r2,-4(fp)
 8000470:	e0bfff17 	ldw	r2,-4(fp)
 8000474:	1084b010 	cmplti	r2,r2,4800
 8000478:	103ff61e 	bne	r2,zero,8000454 <textVGAColorClr+0x14>
	}
}
 800047c:	0001883a 	nop
 8000480:	e037883a 	mov	sp,fp
 8000484:	df000017 	ldw	fp,0(sp)
 8000488:	dec00104 	addi	sp,sp,4
 800048c:	f800283a 	ret

08000490 <textVGADrawColorText>:

void textVGADrawColorText(char* str, int x, int y, alt_u8 background, alt_u8 foreground)
{
 8000490:	defff604 	addi	sp,sp,-40
 8000494:	dfc00915 	stw	ra,36(sp)
 8000498:	df000815 	stw	fp,32(sp)
 800049c:	dc400715 	stw	r17,28(sp)
 80004a0:	dc000615 	stw	r16,24(sp)
 80004a4:	df000804 	addi	fp,sp,32
 80004a8:	e13ffc15 	stw	r4,-16(fp)
 80004ac:	e17ffb15 	stw	r5,-20(fp)
 80004b0:	e1bffa15 	stw	r6,-24(fp)
 80004b4:	3807883a 	mov	r3,r7
 80004b8:	e0800217 	ldw	r2,8(fp)
 80004bc:	e0fff905 	stb	r3,-28(fp)
 80004c0:	e0bff805 	stb	r2,-32(fp)
	int i = 0;
 80004c4:	e03ffd15 	stw	zero,-12(fp)
	while (str[i]!=0)
 80004c8:	00002806 	br	800056c <textVGADrawColorText+0xdc>
	{
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2] = foreground << 4 | background;
 80004cc:	e0bff803 	ldbu	r2,-32(fp)
 80004d0:	1004913a 	slli	r2,r2,4
 80004d4:	1007883a 	mov	r3,r2
 80004d8:	e0bff903 	ldbu	r2,-28(fp)
 80004dc:	1884b03a 	or	r2,r3,r2
 80004e0:	1023883a 	mov	r17,r2
 80004e4:	d4200217 	ldw	r16,-32760(gp)
 80004e8:	01401404 	movi	r5,80
 80004ec:	e13ffa17 	ldw	r4,-24(fp)
 80004f0:	8000b340 	call	8000b34 <__mulsi3>
 80004f4:	1007883a 	mov	r3,r2
 80004f8:	e0bffb17 	ldw	r2,-20(fp)
 80004fc:	1887883a 	add	r3,r3,r2
 8000500:	e0bffd17 	ldw	r2,-12(fp)
 8000504:	1885883a 	add	r2,r3,r2
 8000508:	1085883a 	add	r2,r2,r2
 800050c:	8807883a 	mov	r3,r17
 8000510:	8085883a 	add	r2,r16,r2
 8000514:	10c00005 	stb	r3,0(r2)
		vga_ctrl->VRAM[(y*COLUMNS + x + i) * 2 + 1] = str[i];
 8000518:	e0bffd17 	ldw	r2,-12(fp)
 800051c:	e0fffc17 	ldw	r3,-16(fp)
 8000520:	1885883a 	add	r2,r3,r2
 8000524:	14400003 	ldbu	r17,0(r2)
 8000528:	d4200217 	ldw	r16,-32760(gp)
 800052c:	01401404 	movi	r5,80
 8000530:	e13ffa17 	ldw	r4,-24(fp)
 8000534:	8000b340 	call	8000b34 <__mulsi3>
 8000538:	1007883a 	mov	r3,r2
 800053c:	e0bffb17 	ldw	r2,-20(fp)
 8000540:	1887883a 	add	r3,r3,r2
 8000544:	e0bffd17 	ldw	r2,-12(fp)
 8000548:	1885883a 	add	r2,r3,r2
 800054c:	1085883a 	add	r2,r2,r2
 8000550:	10800044 	addi	r2,r2,1
 8000554:	8807883a 	mov	r3,r17
 8000558:	8085883a 	add	r2,r16,r2
 800055c:	10c00005 	stb	r3,0(r2)
		i++;
 8000560:	e0bffd17 	ldw	r2,-12(fp)
 8000564:	10800044 	addi	r2,r2,1
 8000568:	e0bffd15 	stw	r2,-12(fp)
	while (str[i]!=0)
 800056c:	e0bffd17 	ldw	r2,-12(fp)
 8000570:	e0fffc17 	ldw	r3,-16(fp)
 8000574:	1885883a 	add	r2,r3,r2
 8000578:	10800003 	ldbu	r2,0(r2)
 800057c:	10803fcc 	andi	r2,r2,255
 8000580:	1080201c 	xori	r2,r2,128
 8000584:	10bfe004 	addi	r2,r2,-128
 8000588:	103fd01e 	bne	r2,zero,80004cc <textVGADrawColorText+0x3c>
	}
}
 800058c:	0001883a 	nop
 8000590:	e6fffe04 	addi	sp,fp,-8
 8000594:	dfc00317 	ldw	ra,12(sp)
 8000598:	df000217 	ldw	fp,8(sp)
 800059c:	dc400117 	ldw	r17,4(sp)
 80005a0:	dc000017 	ldw	r16,0(sp)
 80005a4:	dec00404 	addi	sp,sp,16
 80005a8:	f800283a 	ret

080005ac <setColorPalette>:

void setColorPalette (alt_u8 color, alt_u8 red, alt_u8 green, alt_u8 blue)
{
 80005ac:	defff904 	addi	sp,sp,-28
 80005b0:	df000615 	stw	fp,24(sp)
 80005b4:	df000604 	addi	fp,sp,24
 80005b8:	2005883a 	mov	r2,r4
 80005bc:	3009883a 	mov	r4,r6
 80005c0:	3807883a 	mov	r3,r7
 80005c4:	e0bffd05 	stb	r2,-12(fp)
 80005c8:	2805883a 	mov	r2,r5
 80005cc:	e0bffc05 	stb	r2,-16(fp)
 80005d0:	2005883a 	mov	r2,r4
 80005d4:	e0bffb05 	stb	r2,-20(fp)
 80005d8:	1805883a 	mov	r2,r3
 80005dc:	e0bffa05 	stb	r2,-24(fp)
	//fill in this function to set the color palette starting at offset 0x0000 2000 (from base)
	alt_u32 reading = vga_ctrl->Palette[color / 2];
 80005e0:	d0e00217 	ldw	r3,-32760(gp)
 80005e4:	e0bffd03 	ldbu	r2,-12(fp)
 80005e8:	1004d07a 	srli	r2,r2,1
 80005ec:	10803fcc 	andi	r2,r2,255
 80005f0:	10820004 	addi	r2,r2,2048
 80005f4:	100490ba 	slli	r2,r2,2
 80005f8:	1885883a 	add	r2,r3,r2
 80005fc:	10800017 	ldw	r2,0(r2)
 8000600:	e0bfff15 	stw	r2,-4(fp)
	alt_u32 temp;


	if (color % 2 == 0)
 8000604:	e0bffd03 	ldbu	r2,-12(fp)
 8000608:	1080004c 	andi	r2,r2,1
 800060c:	10803fcc 	andi	r2,r2,255
 8000610:	1000201e 	bne	r2,zero,8000694 <setColorPalette+0xe8>
	{
		temp = reading & 0xFFFFE000;
 8000614:	e0ffff17 	ldw	r3,-4(fp)
 8000618:	00b80004 	movi	r2,-8192
 800061c:	1884703a 	and	r2,r3,r2
 8000620:	e0bffe15 	stw	r2,-8(fp)
		temp += blue << 1;
 8000624:	e0bffa03 	ldbu	r2,-24(fp)
 8000628:	1085883a 	add	r2,r2,r2
 800062c:	1007883a 	mov	r3,r2
 8000630:	e0bffe17 	ldw	r2,-8(fp)
 8000634:	10c5883a 	add	r2,r2,r3
 8000638:	e0bffe15 	stw	r2,-8(fp)
		temp += green << 5;
 800063c:	e0bffb03 	ldbu	r2,-20(fp)
 8000640:	1004917a 	slli	r2,r2,5
 8000644:	1007883a 	mov	r3,r2
 8000648:	e0bffe17 	ldw	r2,-8(fp)
 800064c:	10c5883a 	add	r2,r2,r3
 8000650:	e0bffe15 	stw	r2,-8(fp)
		temp += red << 9;
 8000654:	e0bffc03 	ldbu	r2,-16(fp)
 8000658:	1004927a 	slli	r2,r2,9
 800065c:	1007883a 	mov	r3,r2
 8000660:	e0bffe17 	ldw	r2,-8(fp)
 8000664:	10c5883a 	add	r2,r2,r3
 8000668:	e0bffe15 	stw	r2,-8(fp)
		vga_ctrl->Palette[color / 2] = temp;
 800066c:	d0e00217 	ldw	r3,-32760(gp)
 8000670:	e0bffd03 	ldbu	r2,-12(fp)
 8000674:	1004d07a 	srli	r2,r2,1
 8000678:	10803fcc 	andi	r2,r2,255
 800067c:	10820004 	addi	r2,r2,2048
 8000680:	100490ba 	slli	r2,r2,2
 8000684:	1885883a 	add	r2,r3,r2
 8000688:	e0fffe17 	ldw	r3,-8(fp)
 800068c:	10c00015 	stw	r3,0(r2)
		temp += green << 17;
		temp += red << 21;
		vga_ctrl->Palette[color / 2] = temp;

	}
}
 8000690:	00001e06 	br	800070c <setColorPalette+0x160>
		temp = reading & 0x00001FFF;
 8000694:	e0bfff17 	ldw	r2,-4(fp)
 8000698:	1087ffcc 	andi	r2,r2,8191
 800069c:	e0bffe15 	stw	r2,-8(fp)
		temp += blue << 13;
 80006a0:	e0bffa03 	ldbu	r2,-24(fp)
 80006a4:	1004937a 	slli	r2,r2,13
 80006a8:	1007883a 	mov	r3,r2
 80006ac:	e0bffe17 	ldw	r2,-8(fp)
 80006b0:	10c5883a 	add	r2,r2,r3
 80006b4:	e0bffe15 	stw	r2,-8(fp)
		temp += green << 17;
 80006b8:	e0bffb03 	ldbu	r2,-20(fp)
 80006bc:	1004947a 	slli	r2,r2,17
 80006c0:	1007883a 	mov	r3,r2
 80006c4:	e0bffe17 	ldw	r2,-8(fp)
 80006c8:	10c5883a 	add	r2,r2,r3
 80006cc:	e0bffe15 	stw	r2,-8(fp)
		temp += red << 21;
 80006d0:	e0bffc03 	ldbu	r2,-16(fp)
 80006d4:	1004957a 	slli	r2,r2,21
 80006d8:	1007883a 	mov	r3,r2
 80006dc:	e0bffe17 	ldw	r2,-8(fp)
 80006e0:	10c5883a 	add	r2,r2,r3
 80006e4:	e0bffe15 	stw	r2,-8(fp)
		vga_ctrl->Palette[color / 2] = temp;
 80006e8:	d0e00217 	ldw	r3,-32760(gp)
 80006ec:	e0bffd03 	ldbu	r2,-12(fp)
 80006f0:	1004d07a 	srli	r2,r2,1
 80006f4:	10803fcc 	andi	r2,r2,255
 80006f8:	10820004 	addi	r2,r2,2048
 80006fc:	100490ba 	slli	r2,r2,2
 8000700:	1885883a 	add	r2,r3,r2
 8000704:	e0fffe17 	ldw	r3,-8(fp)
 8000708:	10c00015 	stw	r3,0(r2)
}
 800070c:	0001883a 	nop
 8000710:	e037883a 	mov	sp,fp
 8000714:	df000017 	ldw	fp,0(sp)
 8000718:	dec00104 	addi	sp,sp,4
 800071c:	f800283a 	ret

08000720 <textVGAColorScreenSaver>:


void textVGAColorScreenSaver()
{
 8000720:	deffe104 	addi	sp,sp,-124
 8000724:	dfc01e15 	stw	ra,120(sp)
 8000728:	df001d15 	stw	fp,116(sp)
 800072c:	dc801c15 	stw	r18,112(sp)
 8000730:	dc401b15 	stw	r17,108(sp)
 8000734:	dc001a15 	stw	r16,104(sp)
 8000738:	df001d04 	addi	fp,sp,116
	//This is the function you call for your week 2 demo
	char color_string[80];
    int fg, bg, x, y;
	textVGAColorClr();
 800073c:	80004400 	call	8000440 <textVGAColorClr>
	//initialize palette
	for (int i = 0; i < 16; i++)
 8000740:	e03ffa15 	stw	zero,-24(fp)
 8000744:	00002506 	br	80007dc <textVGAColorScreenSaver+0xbc>
	{
		setColorPalette (i, colors[i].red, colors[i].green, colors[i].blue);
 8000748:	e0bffa17 	ldw	r2,-24(fp)
 800074c:	14003fcc 	andi	r16,r2,255
 8000750:	e0bffa17 	ldw	r2,-24(fp)
 8000754:	014005c4 	movi	r5,23
 8000758:	1009883a 	mov	r4,r2
 800075c:	8000b340 	call	8000b34 <__mulsi3>
 8000760:	1007883a 	mov	r3,r2
 8000764:	00820074 	movhi	r2,2049
 8000768:	1885883a 	add	r2,r3,r2
 800076c:	10b93f03 	ldbu	r2,-6916(r2)
 8000770:	14403fcc 	andi	r17,r2,255
 8000774:	e0bffa17 	ldw	r2,-24(fp)
 8000778:	014005c4 	movi	r5,23
 800077c:	1009883a 	mov	r4,r2
 8000780:	8000b340 	call	8000b34 <__mulsi3>
 8000784:	1007883a 	mov	r3,r2
 8000788:	00820074 	movhi	r2,2049
 800078c:	1885883a 	add	r2,r3,r2
 8000790:	10b93f43 	ldbu	r2,-6915(r2)
 8000794:	14803fcc 	andi	r18,r2,255
 8000798:	e0bffa17 	ldw	r2,-24(fp)
 800079c:	014005c4 	movi	r5,23
 80007a0:	1009883a 	mov	r4,r2
 80007a4:	8000b340 	call	8000b34 <__mulsi3>
 80007a8:	1007883a 	mov	r3,r2
 80007ac:	00820074 	movhi	r2,2049
 80007b0:	1885883a 	add	r2,r3,r2
 80007b4:	10b93f83 	ldbu	r2,-6914(r2)
 80007b8:	10803fcc 	andi	r2,r2,255
 80007bc:	100f883a 	mov	r7,r2
 80007c0:	900d883a 	mov	r6,r18
 80007c4:	880b883a 	mov	r5,r17
 80007c8:	8009883a 	mov	r4,r16
 80007cc:	80005ac0 	call	80005ac <setColorPalette>
	for (int i = 0; i < 16; i++)
 80007d0:	e0bffa17 	ldw	r2,-24(fp)
 80007d4:	10800044 	addi	r2,r2,1
 80007d8:	e0bffa15 	stw	r2,-24(fp)
 80007dc:	e0bffa17 	ldw	r2,-24(fp)
 80007e0:	10800410 	cmplti	r2,r2,16
 80007e4:	103fd81e 	bne	r2,zero,8000748 <textVGAColorScreenSaver+0x28>
	}
	while (1)
	{
		fg = rand() % 16;
 80007e8:	8000b700 	call	8000b70 <rand>
 80007ec:	1007883a 	mov	r3,r2
 80007f0:	00a00034 	movhi	r2,32768
 80007f4:	108003c4 	addi	r2,r2,15
 80007f8:	1884703a 	and	r2,r3,r2
 80007fc:	1000040e 	bge	r2,zero,8000810 <textVGAColorScreenSaver+0xf0>
 8000800:	10bfffc4 	addi	r2,r2,-1
 8000804:	00fffc04 	movi	r3,-16
 8000808:	10c4b03a 	or	r2,r2,r3
 800080c:	10800044 	addi	r2,r2,1
 8000810:	e0bffc15 	stw	r2,-16(fp)
		bg = rand() % 16;
 8000814:	8000b700 	call	8000b70 <rand>
 8000818:	1007883a 	mov	r3,r2
 800081c:	00a00034 	movhi	r2,32768
 8000820:	108003c4 	addi	r2,r2,15
 8000824:	1884703a 	and	r2,r3,r2
 8000828:	1000040e 	bge	r2,zero,800083c <textVGAColorScreenSaver+0x11c>
 800082c:	10bfffc4 	addi	r2,r2,-1
 8000830:	00fffc04 	movi	r3,-16
 8000834:	10c4b03a 	or	r2,r2,r3
 8000838:	10800044 	addi	r2,r2,1
 800083c:	e0bffb15 	stw	r2,-20(fp)
		while (fg == bg)
 8000840:	00001606 	br	800089c <textVGAColorScreenSaver+0x17c>
		{
			fg = rand() % 16;
 8000844:	8000b700 	call	8000b70 <rand>
 8000848:	1007883a 	mov	r3,r2
 800084c:	00a00034 	movhi	r2,32768
 8000850:	108003c4 	addi	r2,r2,15
 8000854:	1884703a 	and	r2,r3,r2
 8000858:	1000040e 	bge	r2,zero,800086c <textVGAColorScreenSaver+0x14c>
 800085c:	10bfffc4 	addi	r2,r2,-1
 8000860:	00fffc04 	movi	r3,-16
 8000864:	10c4b03a 	or	r2,r2,r3
 8000868:	10800044 	addi	r2,r2,1
 800086c:	e0bffc15 	stw	r2,-16(fp)
			bg = rand() % 16;
 8000870:	8000b700 	call	8000b70 <rand>
 8000874:	1007883a 	mov	r3,r2
 8000878:	00a00034 	movhi	r2,32768
 800087c:	108003c4 	addi	r2,r2,15
 8000880:	1884703a 	and	r2,r3,r2
 8000884:	1000040e 	bge	r2,zero,8000898 <textVGAColorScreenSaver+0x178>
 8000888:	10bfffc4 	addi	r2,r2,-1
 800088c:	00fffc04 	movi	r3,-16
 8000890:	10c4b03a 	or	r2,r2,r3
 8000894:	10800044 	addi	r2,r2,1
 8000898:	e0bffb15 	stw	r2,-20(fp)
		while (fg == bg)
 800089c:	e0fffc17 	ldw	r3,-16(fp)
 80008a0:	e0bffb17 	ldw	r2,-20(fp)
 80008a4:	18bfe726 	beq	r3,r2,8000844 <textVGAColorScreenSaver+0x124>
		}
		sprintf(color_string, "Drawing %s text with %s background", colors[fg].name, colors[bg].name);
 80008a8:	014005c4 	movi	r5,23
 80008ac:	e13ffc17 	ldw	r4,-16(fp)
 80008b0:	8000b340 	call	8000b34 <__mulsi3>
 80008b4:	1007883a 	mov	r3,r2
 80008b8:	00820074 	movhi	r2,2049
 80008bc:	10b93a04 	addi	r2,r2,-6936
 80008c0:	18a1883a 	add	r16,r3,r2
 80008c4:	014005c4 	movi	r5,23
 80008c8:	e13ffb17 	ldw	r4,-20(fp)
 80008cc:	8000b340 	call	8000b34 <__mulsi3>
 80008d0:	1007883a 	mov	r3,r2
 80008d4:	00820074 	movhi	r2,2049
 80008d8:	10b93a04 	addi	r2,r2,-6936
 80008dc:	1887883a 	add	r3,r3,r2
 80008e0:	e0bfe404 	addi	r2,fp,-112
 80008e4:	180f883a 	mov	r7,r3
 80008e8:	800d883a 	mov	r6,r16
 80008ec:	01420074 	movhi	r5,2049
 80008f0:	29771904 	addi	r5,r5,-9116
 80008f4:	1009883a 	mov	r4,r2
 80008f8:	8000c240 	call	8000c24 <sprintf>
		x = rand() % (80-strlen(color_string));
 80008fc:	8000b700 	call	8000b70 <rand>
 8000900:	1021883a 	mov	r16,r2
 8000904:	e0bfe404 	addi	r2,fp,-112
 8000908:	1009883a 	mov	r4,r2
 800090c:	8000c880 	call	8000c88 <strlen>
 8000910:	1007883a 	mov	r3,r2
 8000914:	00801404 	movi	r2,80
 8000918:	10c5c83a 	sub	r2,r2,r3
 800091c:	100b883a 	mov	r5,r2
 8000920:	8009883a 	mov	r4,r16
 8000924:	8000ad80 	call	8000ad8 <__umodsi3>
 8000928:	e0bff915 	stw	r2,-28(fp)
		y = rand() % 30;
 800092c:	8000b700 	call	8000b70 <rand>
 8000930:	01400784 	movi	r5,30
 8000934:	1009883a 	mov	r4,r2
 8000938:	80009fc0 	call	80009fc <__modsi3>
 800093c:	e0bff815 	stw	r2,-32(fp)
		textVGADrawColorText (color_string, x, y, bg, fg);
 8000940:	e0bffb17 	ldw	r2,-20(fp)
 8000944:	11003fcc 	andi	r4,r2,255
 8000948:	e0bffc17 	ldw	r2,-16(fp)
 800094c:	10803fcc 	andi	r2,r2,255
 8000950:	e0ffe404 	addi	r3,fp,-112
 8000954:	d8800015 	stw	r2,0(sp)
 8000958:	200f883a 	mov	r7,r4
 800095c:	e1bff817 	ldw	r6,-32(fp)
 8000960:	e17ff917 	ldw	r5,-28(fp)
 8000964:	1809883a 	mov	r4,r3
 8000968:	80004900 	call	8000490 <textVGADrawColorText>
		usleep (100000);
 800096c:	010000b4 	movhi	r4,2
 8000970:	2121a804 	addi	r4,r4,-31072
 8000974:	800bc080 	call	800bc08 <usleep>
	{
 8000978:	003f9b06 	br	80007e8 <textVGAColorScreenSaver+0xc8>

0800097c <__divsi3>:
 800097c:	20001a16 	blt	r4,zero,80009e8 <__divsi3+0x6c>
 8000980:	000f883a 	mov	r7,zero
 8000984:	2800020e 	bge	r5,zero,8000990 <__divsi3+0x14>
 8000988:	014bc83a 	sub	r5,zero,r5
 800098c:	39c0005c 	xori	r7,r7,1
 8000990:	200d883a 	mov	r6,r4
 8000994:	00c00044 	movi	r3,1
 8000998:	2900092e 	bgeu	r5,r4,80009c0 <__divsi3+0x44>
 800099c:	00800804 	movi	r2,32
 80009a0:	00c00044 	movi	r3,1
 80009a4:	00000106 	br	80009ac <__divsi3+0x30>
 80009a8:	10001226 	beq	r2,zero,80009f4 <__divsi3+0x78>
 80009ac:	294b883a 	add	r5,r5,r5
 80009b0:	10bfffc4 	addi	r2,r2,-1
 80009b4:	18c7883a 	add	r3,r3,r3
 80009b8:	293ffb36 	bltu	r5,r4,80009a8 <__divsi3+0x2c>
 80009bc:	18000d26 	beq	r3,zero,80009f4 <__divsi3+0x78>
 80009c0:	0005883a 	mov	r2,zero
 80009c4:	31400236 	bltu	r6,r5,80009d0 <__divsi3+0x54>
 80009c8:	314dc83a 	sub	r6,r6,r5
 80009cc:	10c4b03a 	or	r2,r2,r3
 80009d0:	1806d07a 	srli	r3,r3,1
 80009d4:	280ad07a 	srli	r5,r5,1
 80009d8:	183ffa1e 	bne	r3,zero,80009c4 <__divsi3+0x48>
 80009dc:	38000126 	beq	r7,zero,80009e4 <__divsi3+0x68>
 80009e0:	0085c83a 	sub	r2,zero,r2
 80009e4:	f800283a 	ret
 80009e8:	0109c83a 	sub	r4,zero,r4
 80009ec:	01c00044 	movi	r7,1
 80009f0:	003fe406 	br	8000984 <__divsi3+0x8>
 80009f4:	0005883a 	mov	r2,zero
 80009f8:	003ff806 	br	80009dc <__divsi3+0x60>

080009fc <__modsi3>:
 80009fc:	20001a16 	blt	r4,zero,8000a68 <__modsi3+0x6c>
 8000a00:	000f883a 	mov	r7,zero
 8000a04:	2005883a 	mov	r2,r4
 8000a08:	2800010e 	bge	r5,zero,8000a10 <__modsi3+0x14>
 8000a0c:	014bc83a 	sub	r5,zero,r5
 8000a10:	00c00044 	movi	r3,1
 8000a14:	2900092e 	bgeu	r5,r4,8000a3c <__modsi3+0x40>
 8000a18:	01800804 	movi	r6,32
 8000a1c:	00c00044 	movi	r3,1
 8000a20:	00000106 	br	8000a28 <__modsi3+0x2c>
 8000a24:	30000d26 	beq	r6,zero,8000a5c <__modsi3+0x60>
 8000a28:	294b883a 	add	r5,r5,r5
 8000a2c:	31bfffc4 	addi	r6,r6,-1
 8000a30:	18c7883a 	add	r3,r3,r3
 8000a34:	293ffb36 	bltu	r5,r4,8000a24 <__modsi3+0x28>
 8000a38:	18000826 	beq	r3,zero,8000a5c <__modsi3+0x60>
 8000a3c:	1806d07a 	srli	r3,r3,1
 8000a40:	11400136 	bltu	r2,r5,8000a48 <__modsi3+0x4c>
 8000a44:	1145c83a 	sub	r2,r2,r5
 8000a48:	280ad07a 	srli	r5,r5,1
 8000a4c:	183ffb1e 	bne	r3,zero,8000a3c <__modsi3+0x40>
 8000a50:	38000126 	beq	r7,zero,8000a58 <__modsi3+0x5c>
 8000a54:	0085c83a 	sub	r2,zero,r2
 8000a58:	f800283a 	ret
 8000a5c:	2005883a 	mov	r2,r4
 8000a60:	383ffd26 	beq	r7,zero,8000a58 <__modsi3+0x5c>
 8000a64:	003ffb06 	br	8000a54 <__modsi3+0x58>
 8000a68:	0109c83a 	sub	r4,zero,r4
 8000a6c:	01c00044 	movi	r7,1
 8000a70:	003fe406 	br	8000a04 <__modsi3+0x8>

08000a74 <__udivsi3>:
 8000a74:	200d883a 	mov	r6,r4
 8000a78:	2900152e 	bgeu	r5,r4,8000ad0 <__udivsi3+0x5c>
 8000a7c:	28001416 	blt	r5,zero,8000ad0 <__udivsi3+0x5c>
 8000a80:	00800804 	movi	r2,32
 8000a84:	00c00044 	movi	r3,1
 8000a88:	00000206 	br	8000a94 <__udivsi3+0x20>
 8000a8c:	10000e26 	beq	r2,zero,8000ac8 <__udivsi3+0x54>
 8000a90:	28000516 	blt	r5,zero,8000aa8 <__udivsi3+0x34>
 8000a94:	294b883a 	add	r5,r5,r5
 8000a98:	10bfffc4 	addi	r2,r2,-1
 8000a9c:	18c7883a 	add	r3,r3,r3
 8000aa0:	293ffa36 	bltu	r5,r4,8000a8c <__udivsi3+0x18>
 8000aa4:	18000826 	beq	r3,zero,8000ac8 <__udivsi3+0x54>
 8000aa8:	0005883a 	mov	r2,zero
 8000aac:	31400236 	bltu	r6,r5,8000ab8 <__udivsi3+0x44>
 8000ab0:	314dc83a 	sub	r6,r6,r5
 8000ab4:	10c4b03a 	or	r2,r2,r3
 8000ab8:	1806d07a 	srli	r3,r3,1
 8000abc:	280ad07a 	srli	r5,r5,1
 8000ac0:	183ffa1e 	bne	r3,zero,8000aac <__udivsi3+0x38>
 8000ac4:	f800283a 	ret
 8000ac8:	0005883a 	mov	r2,zero
 8000acc:	f800283a 	ret
 8000ad0:	00c00044 	movi	r3,1
 8000ad4:	003ff406 	br	8000aa8 <__udivsi3+0x34>

08000ad8 <__umodsi3>:
 8000ad8:	2005883a 	mov	r2,r4
 8000adc:	2900132e 	bgeu	r5,r4,8000b2c <__umodsi3+0x54>
 8000ae0:	28001216 	blt	r5,zero,8000b2c <__umodsi3+0x54>
 8000ae4:	01800804 	movi	r6,32
 8000ae8:	00c00044 	movi	r3,1
 8000aec:	00000206 	br	8000af8 <__umodsi3+0x20>
 8000af0:	30000c26 	beq	r6,zero,8000b24 <__umodsi3+0x4c>
 8000af4:	28000516 	blt	r5,zero,8000b0c <__umodsi3+0x34>
 8000af8:	294b883a 	add	r5,r5,r5
 8000afc:	31bfffc4 	addi	r6,r6,-1
 8000b00:	18c7883a 	add	r3,r3,r3
 8000b04:	293ffa36 	bltu	r5,r4,8000af0 <__umodsi3+0x18>
 8000b08:	18000626 	beq	r3,zero,8000b24 <__umodsi3+0x4c>
 8000b0c:	1806d07a 	srli	r3,r3,1
 8000b10:	11400136 	bltu	r2,r5,8000b18 <__umodsi3+0x40>
 8000b14:	1145c83a 	sub	r2,r2,r5
 8000b18:	280ad07a 	srli	r5,r5,1
 8000b1c:	183ffb1e 	bne	r3,zero,8000b0c <__umodsi3+0x34>
 8000b20:	f800283a 	ret
 8000b24:	2005883a 	mov	r2,r4
 8000b28:	f800283a 	ret
 8000b2c:	00c00044 	movi	r3,1
 8000b30:	003ff606 	br	8000b0c <__umodsi3+0x34>

08000b34 <__mulsi3>:
 8000b34:	0005883a 	mov	r2,zero
 8000b38:	20000726 	beq	r4,zero,8000b58 <__mulsi3+0x24>
 8000b3c:	20c0004c 	andi	r3,r4,1
 8000b40:	2008d07a 	srli	r4,r4,1
 8000b44:	18000126 	beq	r3,zero,8000b4c <__mulsi3+0x18>
 8000b48:	1145883a 	add	r2,r2,r5
 8000b4c:	294b883a 	add	r5,r5,r5
 8000b50:	203ffa1e 	bne	r4,zero,8000b3c <__mulsi3+0x8>
 8000b54:	f800283a 	ret
 8000b58:	f800283a 	ret

08000b5c <srand>:
 8000b5c:	00820074 	movhi	r2,2049
 8000b60:	10808217 	ldw	r2,520(r2)
 8000b64:	11002915 	stw	r4,164(r2)
 8000b68:	10002a15 	stw	zero,168(r2)
 8000b6c:	f800283a 	ret

08000b70 <rand>:
 8000b70:	defffe04 	addi	sp,sp,-8
 8000b74:	00820074 	movhi	r2,2049
 8000b78:	dc000015 	stw	r16,0(sp)
 8000b7c:	14008217 	ldw	r16,520(r2)
 8000b80:	dfc00115 	stw	ra,4(sp)
 8000b84:	01932574 	movhi	r6,19605
 8000b88:	81002917 	ldw	r4,164(r16)
 8000b8c:	81402a17 	ldw	r5,168(r16)
 8000b90:	01d614b4 	movhi	r7,22610
 8000b94:	319fcb44 	addi	r6,r6,32557
 8000b98:	39fd0b44 	addi	r7,r7,-3027
 8000b9c:	80083800 	call	8008380 <__muldi3>
 8000ba0:	11400044 	addi	r5,r2,1
 8000ba4:	2885803a 	cmpltu	r2,r5,r2
 8000ba8:	01200034 	movhi	r4,32768
 8000bac:	10c5883a 	add	r2,r2,r3
 8000bb0:	213fffc4 	addi	r4,r4,-1
 8000bb4:	80802a15 	stw	r2,168(r16)
 8000bb8:	1104703a 	and	r2,r2,r4
 8000bbc:	81402915 	stw	r5,164(r16)
 8000bc0:	dfc00117 	ldw	ra,4(sp)
 8000bc4:	dc000017 	ldw	r16,0(sp)
 8000bc8:	dec00204 	addi	sp,sp,8
 8000bcc:	f800283a 	ret

08000bd0 <_sprintf_r>:
 8000bd0:	deffe404 	addi	sp,sp,-112
 8000bd4:	2811883a 	mov	r8,r5
 8000bd8:	dfc01a15 	stw	ra,104(sp)
 8000bdc:	d9c01b15 	stw	r7,108(sp)
 8000be0:	00a00034 	movhi	r2,32768
 8000be4:	00fffff4 	movhi	r3,65535
 8000be8:	10bfffc4 	addi	r2,r2,-1
 8000bec:	18c08204 	addi	r3,r3,520
 8000bf0:	d9c01b04 	addi	r7,sp,108
 8000bf4:	d80b883a 	mov	r5,sp
 8000bf8:	d8c00315 	stw	r3,12(sp)
 8000bfc:	da000015 	stw	r8,0(sp)
 8000c00:	da000415 	stw	r8,16(sp)
 8000c04:	d8800515 	stw	r2,20(sp)
 8000c08:	d8800215 	stw	r2,8(sp)
 8000c0c:	8000d200 	call	8000d20 <___svfprintf_internal_r>
 8000c10:	d8c00017 	ldw	r3,0(sp)
 8000c14:	18000005 	stb	zero,0(r3)
 8000c18:	dfc01a17 	ldw	ra,104(sp)
 8000c1c:	dec01c04 	addi	sp,sp,112
 8000c20:	f800283a 	ret

08000c24 <sprintf>:
 8000c24:	deffe304 	addi	sp,sp,-116
 8000c28:	2011883a 	mov	r8,r4
 8000c2c:	dfc01a15 	stw	ra,104(sp)
 8000c30:	d9801b15 	stw	r6,108(sp)
 8000c34:	d9c01c15 	stw	r7,112(sp)
 8000c38:	00820074 	movhi	r2,2049
 8000c3c:	11008217 	ldw	r4,520(r2)
 8000c40:	00fffff4 	movhi	r3,65535
 8000c44:	00a00034 	movhi	r2,32768
 8000c48:	10bfffc4 	addi	r2,r2,-1
 8000c4c:	18c08204 	addi	r3,r3,520
 8000c50:	280d883a 	mov	r6,r5
 8000c54:	d9c01b04 	addi	r7,sp,108
 8000c58:	d80b883a 	mov	r5,sp
 8000c5c:	d8c00315 	stw	r3,12(sp)
 8000c60:	da000015 	stw	r8,0(sp)
 8000c64:	da000415 	stw	r8,16(sp)
 8000c68:	d8800515 	stw	r2,20(sp)
 8000c6c:	d8800215 	stw	r2,8(sp)
 8000c70:	8000d200 	call	8000d20 <___svfprintf_internal_r>
 8000c74:	d8c00017 	ldw	r3,0(sp)
 8000c78:	18000005 	stb	zero,0(r3)
 8000c7c:	dfc01a17 	ldw	ra,104(sp)
 8000c80:	dec01d04 	addi	sp,sp,116
 8000c84:	f800283a 	ret

08000c88 <strlen>:
 8000c88:	208000cc 	andi	r2,r4,3
 8000c8c:	10002026 	beq	r2,zero,8000d10 <strlen+0x88>
 8000c90:	20800007 	ldb	r2,0(r4)
 8000c94:	10002026 	beq	r2,zero,8000d18 <strlen+0x90>
 8000c98:	2005883a 	mov	r2,r4
 8000c9c:	00000206 	br	8000ca8 <strlen+0x20>
 8000ca0:	10c00007 	ldb	r3,0(r2)
 8000ca4:	18001826 	beq	r3,zero,8000d08 <strlen+0x80>
 8000ca8:	10800044 	addi	r2,r2,1
 8000cac:	10c000cc 	andi	r3,r2,3
 8000cb0:	183ffb1e 	bne	r3,zero,8000ca0 <strlen+0x18>
 8000cb4:	11400017 	ldw	r5,0(r2)
 8000cb8:	01ffbff4 	movhi	r7,65279
 8000cbc:	39ffbfc4 	addi	r7,r7,-257
 8000cc0:	29c7883a 	add	r3,r5,r7
 8000cc4:	01a02074 	movhi	r6,32897
 8000cc8:	014a303a 	nor	r5,zero,r5
 8000ccc:	1946703a 	and	r3,r3,r5
 8000cd0:	31a02004 	addi	r6,r6,-32640
 8000cd4:	1986703a 	and	r3,r3,r6
 8000cd8:	1800091e 	bne	r3,zero,8000d00 <strlen+0x78>
 8000cdc:	10800104 	addi	r2,r2,4
 8000ce0:	11400017 	ldw	r5,0(r2)
 8000ce4:	29c7883a 	add	r3,r5,r7
 8000ce8:	014a303a 	nor	r5,zero,r5
 8000cec:	1946703a 	and	r3,r3,r5
 8000cf0:	1986703a 	and	r3,r3,r6
 8000cf4:	183ff926 	beq	r3,zero,8000cdc <strlen+0x54>
 8000cf8:	00000106 	br	8000d00 <strlen+0x78>
 8000cfc:	10800044 	addi	r2,r2,1
 8000d00:	10c00007 	ldb	r3,0(r2)
 8000d04:	183ffd1e 	bne	r3,zero,8000cfc <strlen+0x74>
 8000d08:	1105c83a 	sub	r2,r2,r4
 8000d0c:	f800283a 	ret
 8000d10:	2005883a 	mov	r2,r4
 8000d14:	003fe706 	br	8000cb4 <strlen+0x2c>
 8000d18:	0005883a 	mov	r2,zero
 8000d1c:	f800283a 	ret

08000d20 <___svfprintf_internal_r>:
 8000d20:	deffbd04 	addi	sp,sp,-268
 8000d24:	dfc04215 	stw	ra,264(sp)
 8000d28:	dd403e15 	stw	r21,248(sp)
 8000d2c:	dcc03c15 	stw	r19,240(sp)
 8000d30:	d9000515 	stw	r4,20(sp)
 8000d34:	2827883a 	mov	r19,r5
 8000d38:	302b883a 	mov	r21,r6
 8000d3c:	d9c00615 	stw	r7,24(sp)
 8000d40:	df004115 	stw	fp,260(sp)
 8000d44:	ddc04015 	stw	r23,256(sp)
 8000d48:	dd803f15 	stw	r22,252(sp)
 8000d4c:	dd003d15 	stw	r20,244(sp)
 8000d50:	dc803b15 	stw	r18,236(sp)
 8000d54:	dc403a15 	stw	r17,232(sp)
 8000d58:	dc003915 	stw	r16,228(sp)
 8000d5c:	80047640 	call	8004764 <_localeconv_r>
 8000d60:	10800017 	ldw	r2,0(r2)
 8000d64:	1009883a 	mov	r4,r2
 8000d68:	d8800d15 	stw	r2,52(sp)
 8000d6c:	8000c880 	call	8000c88 <strlen>
 8000d70:	d8800b15 	stw	r2,44(sp)
 8000d74:	9880030b 	ldhu	r2,12(r19)
 8000d78:	1080200c 	andi	r2,r2,128
 8000d7c:	10000226 	beq	r2,zero,8000d88 <___svfprintf_internal_r+0x68>
 8000d80:	98800417 	ldw	r2,16(r19)
 8000d84:	1005a126 	beq	r2,zero,800240c <___svfprintf_internal_r+0x16ec>
 8000d88:	ddc02904 	addi	r23,sp,164
 8000d8c:	ddc01c15 	stw	r23,112(sp)
 8000d90:	d8001e15 	stw	zero,120(sp)
 8000d94:	d8001d15 	stw	zero,116(sp)
 8000d98:	d8000815 	stw	zero,32(sp)
 8000d9c:	d8000915 	stw	zero,36(sp)
 8000da0:	d8000a15 	stw	zero,40(sp)
 8000da4:	b811883a 	mov	r8,r23
 8000da8:	d8000c15 	stw	zero,48(sp)
 8000dac:	d8001115 	stw	zero,68(sp)
 8000db0:	d8000415 	stw	zero,16(sp)
 8000db4:	a82d883a 	mov	r22,r21
 8000db8:	b0800007 	ldb	r2,0(r22)
 8000dbc:	10009126 	beq	r2,zero,8001004 <___svfprintf_internal_r+0x2e4>
 8000dc0:	10800960 	cmpeqi	r2,r2,37
 8000dc4:	1004fd1e 	bne	r2,zero,80021bc <___svfprintf_internal_r+0x149c>
 8000dc8:	b021883a 	mov	r16,r22
 8000dcc:	00000206 	br	8000dd8 <___svfprintf_internal_r+0xb8>
 8000dd0:	18008226 	beq	r3,zero,8000fdc <___svfprintf_internal_r+0x2bc>
 8000dd4:	8821883a 	mov	r16,r17
 8000dd8:	80800047 	ldb	r2,1(r16)
 8000ddc:	84400044 	addi	r17,r16,1
 8000de0:	10c00958 	cmpnei	r3,r2,37
 8000de4:	103ffa1e 	bne	r2,zero,8000dd0 <___svfprintf_internal_r+0xb0>
 8000de8:	8da5c83a 	sub	r18,r17,r22
 8000dec:	90008526 	beq	r18,zero,8001004 <___svfprintf_internal_r+0x2e4>
 8000df0:	d8c01e17 	ldw	r3,120(sp)
 8000df4:	d8801d17 	ldw	r2,116(sp)
 8000df8:	45800015 	stw	r22,0(r8)
 8000dfc:	1c87883a 	add	r3,r3,r18
 8000e00:	10800044 	addi	r2,r2,1
 8000e04:	d8801d15 	stw	r2,116(sp)
 8000e08:	44800115 	stw	r18,4(r8)
 8000e0c:	d8c01e15 	stw	r3,120(sp)
 8000e10:	10800208 	cmpgei	r2,r2,8
 8000e14:	1000741e 	bne	r2,zero,8000fe8 <___svfprintf_internal_r+0x2c8>
 8000e18:	42000204 	addi	r8,r8,8
 8000e1c:	d8c00417 	ldw	r3,16(sp)
 8000e20:	80800047 	ldb	r2,1(r16)
 8000e24:	1c87883a 	add	r3,r3,r18
 8000e28:	d8c00415 	stw	r3,16(sp)
 8000e2c:	10007526 	beq	r2,zero,8001004 <___svfprintf_internal_r+0x2e4>
 8000e30:	8a800047 	ldb	r10,1(r17)
 8000e34:	8d800044 	addi	r22,r17,1
 8000e38:	d8001545 	stb	zero,85(sp)
 8000e3c:	0009883a 	mov	r4,zero
 8000e40:	000b883a 	mov	r5,zero
 8000e44:	02ffffc4 	movi	r11,-1
 8000e48:	0021883a 	mov	r16,zero
 8000e4c:	0019883a 	mov	r12,zero
 8000e50:	b5800044 	addi	r22,r22,1
 8000e54:	5039883a 	mov	fp,r10
 8000e58:	e0bff804 	addi	r2,fp,-32
 8000e5c:	10c01668 	cmpgeui	r3,r2,89
 8000e60:	18008c1e 	bne	r3,zero,8001094 <___svfprintf_internal_r+0x374>
 8000e64:	100490ba 	slli	r2,r2,2
 8000e68:	00c20034 	movhi	r3,2048
 8000e6c:	10c7883a 	add	r3,r2,r3
 8000e70:	18839e17 	ldw	r2,3704(r3)
 8000e74:	1000683a 	jmp	r2
 8000e78:	0800116c 	andhi	zero,at,69
 8000e7c:	08001094 	ori	zero,at,66
 8000e80:	08001094 	ori	zero,at,66
 8000e84:	08001160 	cmpeqi	zero,at,69
 8000e88:	08001094 	ori	zero,at,66
 8000e8c:	08001094 	ori	zero,at,66
 8000e90:	08001094 	ori	zero,at,66
 8000e94:	08001094 	ori	zero,at,66
 8000e98:	08001094 	ori	zero,at,66
 8000e9c:	08001094 	ori	zero,at,66
 8000ea0:	08001138 	rdprs	zero,at,68
 8000ea4:	08001128 	cmpgeui	zero,at,68
 8000ea8:	08001094 	ori	zero,at,66
 8000eac:	08001110 	cmplti	zero,at,68
 8000eb0:	080010c4 	addi	zero,at,67
 8000eb4:	08001094 	ori	zero,at,66
 8000eb8:	080010b8 	rdprs	zero,at,66
 8000ebc:	0800105c 	xori	zero,at,65
 8000ec0:	0800105c 	xori	zero,at,65
 8000ec4:	0800105c 	xori	zero,at,65
 8000ec8:	0800105c 	xori	zero,at,65
 8000ecc:	0800105c 	xori	zero,at,65
 8000ed0:	0800105c 	xori	zero,at,65
 8000ed4:	0800105c 	xori	zero,at,65
 8000ed8:	0800105c 	xori	zero,at,65
 8000edc:	0800105c 	xori	zero,at,65
 8000ee0:	08001094 	ori	zero,at,66
 8000ee4:	08001094 	ori	zero,at,66
 8000ee8:	08001094 	ori	zero,at,66
 8000eec:	08001094 	ori	zero,at,66
 8000ef0:	08001094 	ori	zero,at,66
 8000ef4:	08001094 	ori	zero,at,66
 8000ef8:	08001094 	ori	zero,at,66
 8000efc:	08001094 	ori	zero,at,66
 8000f00:	08001094 	ori	zero,at,66
 8000f04:	08001094 	ori	zero,at,66
 8000f08:	08001720 	cmpeqi	zero,at,92
 8000f0c:	08001640 	call	800164 <__alt_mem_onchip_memory2_0+0x800164>
 8000f10:	08001094 	ori	zero,at,66
 8000f14:	08001640 	call	800164 <__alt_mem_onchip_memory2_0+0x800164>
 8000f18:	08001094 	ori	zero,at,66
 8000f1c:	08001094 	ori	zero,at,66
 8000f20:	08001094 	ori	zero,at,66
 8000f24:	08001094 	ori	zero,at,66
 8000f28:	08001874 	orhi	zero,at,97
 8000f2c:	08001094 	ori	zero,at,66
 8000f30:	08001094 	ori	zero,at,66
 8000f34:	0800160c 	andi	zero,at,88
 8000f38:	08001094 	ori	zero,at,66
 8000f3c:	08001094 	ori	zero,at,66
 8000f40:	08001094 	ori	zero,at,66
 8000f44:	08001094 	ori	zero,at,66
 8000f48:	08001094 	ori	zero,at,66
 8000f4c:	08001840 	call	800184 <__alt_mem_onchip_memory2_0+0x800184>
 8000f50:	08001094 	ori	zero,at,66
 8000f54:	08001094 	ori	zero,at,66
 8000f58:	080017f8 	rdprs	zero,at,95
 8000f5c:	08001094 	ori	zero,at,66
 8000f60:	08001094 	ori	zero,at,66
 8000f64:	08001094 	ori	zero,at,66
 8000f68:	08001094 	ori	zero,at,66
 8000f6c:	08001094 	ori	zero,at,66
 8000f70:	08001094 	ori	zero,at,66
 8000f74:	08001094 	ori	zero,at,66
 8000f78:	08001094 	ori	zero,at,66
 8000f7c:	08001094 	ori	zero,at,66
 8000f80:	08001094 	ori	zero,at,66
 8000f84:	080012f4 	orhi	zero,at,75
 8000f88:	08001280 	call	800128 <__alt_mem_onchip_memory2_0+0x800128>
 8000f8c:	08001640 	call	800164 <__alt_mem_onchip_memory2_0+0x800164>
 8000f90:	08001640 	call	800164 <__alt_mem_onchip_memory2_0+0x800164>
 8000f94:	08001640 	call	800164 <__alt_mem_onchip_memory2_0+0x800164>
 8000f98:	08001578 	rdprs	zero,at,85
 8000f9c:	08001280 	call	800128 <__alt_mem_onchip_memory2_0+0x800128>
 8000fa0:	08001094 	ori	zero,at,66
 8000fa4:	08001094 	ori	zero,at,66
 8000fa8:	08001564 	muli	zero,at,85
 8000fac:	08001094 	ori	zero,at,66
 8000fb0:	08001524 	muli	zero,at,84
 8000fb4:	080014e4 	muli	zero,at,83
 8000fb8:	08001590 	cmplti	zero,at,86
 8000fbc:	08001584 	addi	zero,at,86
 8000fc0:	08001094 	ori	zero,at,66
 8000fc4:	08001220 	cmpeqi	zero,at,72
 8000fc8:	08001094 	ori	zero,at,66
 8000fcc:	080011e0 	cmpeqi	zero,at,71
 8000fd0:	08001094 	ori	zero,at,66
 8000fd4:	08001094 	ori	zero,at,66
 8000fd8:	08001198 	cmpnei	zero,at,70
 8000fdc:	8da5c83a 	sub	r18,r17,r22
 8000fe0:	903f9326 	beq	r18,zero,8000e30 <___svfprintf_internal_r+0x110>
 8000fe4:	003f8206 	br	8000df0 <___svfprintf_internal_r+0xd0>
 8000fe8:	d9000517 	ldw	r4,20(sp)
 8000fec:	d9801c04 	addi	r6,sp,112
 8000ff0:	980b883a 	mov	r5,r19
 8000ff4:	80061640 	call	8006164 <__ssprint_r>
 8000ff8:	1000081e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8000ffc:	b811883a 	mov	r8,r23
 8001000:	003f8606 	br	8000e1c <___svfprintf_internal_r+0xfc>
 8001004:	d8801e17 	ldw	r2,120(sp)
 8001008:	10000426 	beq	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 800100c:	d9000517 	ldw	r4,20(sp)
 8001010:	d9801c04 	addi	r6,sp,112
 8001014:	980b883a 	mov	r5,r19
 8001018:	80061640 	call	8006164 <__ssprint_r>
 800101c:	9880030b 	ldhu	r2,12(r19)
 8001020:	1080100c 	andi	r2,r2,64
 8001024:	1007371e 	bne	r2,zero,8002d04 <___svfprintf_internal_r+0x1fe4>
 8001028:	d8800417 	ldw	r2,16(sp)
 800102c:	dfc04217 	ldw	ra,264(sp)
 8001030:	df004117 	ldw	fp,260(sp)
 8001034:	ddc04017 	ldw	r23,256(sp)
 8001038:	dd803f17 	ldw	r22,252(sp)
 800103c:	dd403e17 	ldw	r21,248(sp)
 8001040:	dd003d17 	ldw	r20,244(sp)
 8001044:	dcc03c17 	ldw	r19,240(sp)
 8001048:	dc803b17 	ldw	r18,236(sp)
 800104c:	dc403a17 	ldw	r17,232(sp)
 8001050:	dc003917 	ldw	r16,228(sp)
 8001054:	dec04304 	addi	sp,sp,268
 8001058:	f800283a 	ret
 800105c:	0021883a 	mov	r16,zero
 8001060:	e0fff404 	addi	r3,fp,-48
 8001064:	800490ba 	slli	r2,r16,2
 8001068:	b5800044 	addi	r22,r22,1
 800106c:	b73fffc7 	ldb	fp,-1(r22)
 8001070:	1421883a 	add	r16,r2,r16
 8001074:	8421883a 	add	r16,r16,r16
 8001078:	1c21883a 	add	r16,r3,r16
 800107c:	e0fff404 	addi	r3,fp,-48
 8001080:	188002b0 	cmpltui	r2,r3,10
 8001084:	103ff71e 	bne	r2,zero,8001064 <___svfprintf_internal_r+0x344>
 8001088:	e0bff804 	addi	r2,fp,-32
 800108c:	10c01668 	cmpgeui	r3,r2,89
 8001090:	183f7426 	beq	r3,zero,8000e64 <___svfprintf_internal_r+0x144>
 8001094:	21003fcc 	andi	r4,r4,255
 8001098:	2006931e 	bne	r4,zero,8002ae8 <___svfprintf_internal_r+0x1dc8>
 800109c:	e03fd926 	beq	fp,zero,8001004 <___svfprintf_internal_r+0x2e4>
 80010a0:	df001f05 	stb	fp,124(sp)
 80010a4:	d8001545 	stb	zero,85(sp)
 80010a8:	05000044 	movi	r20,1
 80010ac:	05400044 	movi	r21,1
 80010b0:	dc401f04 	addi	r17,sp,124
 80010b4:	00009806 	br	8001318 <___svfprintf_internal_r+0x5f8>
 80010b8:	63002014 	ori	r12,r12,128
 80010bc:	b2800007 	ldb	r10,0(r22)
 80010c0:	003f6306 	br	8000e50 <___svfprintf_internal_r+0x130>
 80010c4:	b7000007 	ldb	fp,0(r22)
 80010c8:	b0800044 	addi	r2,r22,1
 80010cc:	e0c00aa0 	cmpeqi	r3,fp,42
 80010d0:	1807511e 	bne	r3,zero,8002e18 <___svfprintf_internal_r+0x20f8>
 80010d4:	e0fff404 	addi	r3,fp,-48
 80010d8:	198002b0 	cmpltui	r6,r3,10
 80010dc:	102d883a 	mov	r22,r2
 80010e0:	0017883a 	mov	r11,zero
 80010e4:	303f5c26 	beq	r6,zero,8000e58 <___svfprintf_internal_r+0x138>
 80010e8:	580490ba 	slli	r2,r11,2
 80010ec:	b5800044 	addi	r22,r22,1
 80010f0:	b73fffc7 	ldb	fp,-1(r22)
 80010f4:	12d7883a 	add	r11,r2,r11
 80010f8:	5ad7883a 	add	r11,r11,r11
 80010fc:	58d7883a 	add	r11,r11,r3
 8001100:	e0fff404 	addi	r3,fp,-48
 8001104:	188002b0 	cmpltui	r2,r3,10
 8001108:	103ff71e 	bne	r2,zero,80010e8 <___svfprintf_internal_r+0x3c8>
 800110c:	003f5206 	br	8000e58 <___svfprintf_internal_r+0x138>
 8001110:	b7000003 	ldbu	fp,0(r22)
 8001114:	e2803fcc 	andi	r10,fp,255
 8001118:	5280201c 	xori	r10,r10,128
 800111c:	63000114 	ori	r12,r12,4
 8001120:	52bfe004 	addi	r10,r10,-128
 8001124:	003f4a06 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001128:	01000044 	movi	r4,1
 800112c:	01400ac4 	movi	r5,43
 8001130:	b2800007 	ldb	r10,0(r22)
 8001134:	003f4606 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001138:	d8800617 	ldw	r2,24(sp)
 800113c:	b7000003 	ldbu	fp,0(r22)
 8001140:	14000017 	ldw	r16,0(r2)
 8001144:	10800104 	addi	r2,r2,4
 8001148:	80049316 	blt	r16,zero,8002398 <___svfprintf_internal_r+0x1678>
 800114c:	d8800615 	stw	r2,24(sp)
 8001150:	e2803fcc 	andi	r10,fp,255
 8001154:	5280201c 	xori	r10,r10,128
 8001158:	52bfe004 	addi	r10,r10,-128
 800115c:	003f3c06 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001160:	63000054 	ori	r12,r12,1
 8001164:	b2800007 	ldb	r10,0(r22)
 8001168:	003f3906 	br	8000e50 <___svfprintf_internal_r+0x130>
 800116c:	28803fcc 	andi	r2,r5,255
 8001170:	1080201c 	xori	r2,r2,128
 8001174:	10bfe004 	addi	r2,r2,-128
 8001178:	b7000003 	ldbu	fp,0(r22)
 800117c:	103ff41e 	bne	r2,zero,8001150 <___svfprintf_internal_r+0x430>
 8001180:	e2803fcc 	andi	r10,fp,255
 8001184:	5280201c 	xori	r10,r10,128
 8001188:	01000044 	movi	r4,1
 800118c:	01400804 	movi	r5,32
 8001190:	52bfe004 	addi	r10,r10,-128
 8001194:	003f2e06 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001198:	21003fcc 	andi	r4,r4,255
 800119c:	2006b51e 	bne	r4,zero,8002c74 <___svfprintf_internal_r+0x1f54>
 80011a0:	00820074 	movhi	r2,2049
 80011a4:	10b72b04 	addi	r2,r2,-9044
 80011a8:	d8800c15 	stw	r2,48(sp)
 80011ac:	6080080c 	andi	r2,r12,32
 80011b0:	10019826 	beq	r2,zero,8001814 <___svfprintf_internal_r+0xaf4>
 80011b4:	d8800617 	ldw	r2,24(sp)
 80011b8:	15000017 	ldw	r20,0(r2)
 80011bc:	15400117 	ldw	r21,4(r2)
 80011c0:	10800204 	addi	r2,r2,8
 80011c4:	d8800615 	stw	r2,24(sp)
 80011c8:	6080004c 	andi	r2,r12,1
 80011cc:	10000226 	beq	r2,zero,80011d8 <___svfprintf_internal_r+0x4b8>
 80011d0:	a544b03a 	or	r2,r20,r21
 80011d4:	10046a1e 	bne	r2,zero,8002380 <___svfprintf_internal_r+0x1660>
 80011d8:	00800084 	movi	r2,2
 80011dc:	0000fb06 	br	80015cc <___svfprintf_internal_r+0x8ac>
 80011e0:	21003fcc 	andi	r4,r4,255
 80011e4:	20069f1e 	bne	r4,zero,8002c64 <___svfprintf_internal_r+0x1f44>
 80011e8:	6080080c 	andi	r2,r12,32
 80011ec:	1001a41e 	bne	r2,zero,8001880 <___svfprintf_internal_r+0xb60>
 80011f0:	d8800617 	ldw	r2,24(sp)
 80011f4:	60c0040c 	andi	r3,r12,16
 80011f8:	15000017 	ldw	r20,0(r2)
 80011fc:	10800104 	addi	r2,r2,4
 8001200:	1801961e 	bne	r3,zero,800185c <___svfprintf_internal_r+0xb3c>
 8001204:	60c0100c 	andi	r3,r12,64
 8001208:	1805b126 	beq	r3,zero,80028d0 <___svfprintf_internal_r+0x1bb0>
 800120c:	d8800615 	stw	r2,24(sp)
 8001210:	a53fffcc 	andi	r20,r20,65535
 8001214:	002b883a 	mov	r21,zero
 8001218:	00800044 	movi	r2,1
 800121c:	0000eb06 	br	80015cc <___svfprintf_internal_r+0x8ac>
 8001220:	d8800617 	ldw	r2,24(sp)
 8001224:	d8001545 	stb	zero,85(sp)
 8001228:	14400017 	ldw	r17,0(r2)
 800122c:	14800104 	addi	r18,r2,4
 8001230:	88051426 	beq	r17,zero,8002684 <___svfprintf_internal_r+0x1964>
 8001234:	da000e15 	stw	r8,56(sp)
 8001238:	db000715 	stw	r12,28(sp)
 800123c:	58bfffe0 	cmpeqi	r2,r11,-1
 8001240:	10046a1e 	bne	r2,zero,80023ec <___svfprintf_internal_r+0x16cc>
 8001244:	580d883a 	mov	r6,r11
 8001248:	000b883a 	mov	r5,zero
 800124c:	8809883a 	mov	r4,r17
 8001250:	dac00615 	stw	r11,24(sp)
 8001254:	8004f700 	call	8004f70 <memchr>
 8001258:	dac00617 	ldw	r11,24(sp)
 800125c:	db000717 	ldw	r12,28(sp)
 8001260:	da000e17 	ldw	r8,56(sp)
 8001264:	10066d26 	beq	r2,zero,8002c1c <___svfprintf_internal_r+0x1efc>
 8001268:	146bc83a 	sub	r21,r2,r17
 800126c:	a829883a 	mov	r20,r21
 8001270:	a800010e 	bge	r21,zero,8001278 <___svfprintf_internal_r+0x558>
 8001274:	0029883a 	mov	r20,zero
 8001278:	dc800615 	stw	r18,24(sp)
 800127c:	00002606 	br	8001318 <___svfprintf_internal_r+0x5f8>
 8001280:	21003fcc 	andi	r4,r4,255
 8001284:	2006811e 	bne	r4,zero,8002c8c <___svfprintf_internal_r+0x1f6c>
 8001288:	6080080c 	andi	r2,r12,32
 800128c:	1001831e 	bne	r2,zero,800189c <___svfprintf_internal_r+0xb7c>
 8001290:	d8800617 	ldw	r2,24(sp)
 8001294:	60c0040c 	andi	r3,r12,16
 8001298:	10800104 	addi	r2,r2,4
 800129c:	1801271e 	bne	r3,zero,800173c <___svfprintf_internal_r+0xa1c>
 80012a0:	60c0100c 	andi	r3,r12,64
 80012a4:	18012526 	beq	r3,zero,800173c <___svfprintf_internal_r+0xa1c>
 80012a8:	d8c00617 	ldw	r3,24(sp)
 80012ac:	d8800615 	stw	r2,24(sp)
 80012b0:	1d00000f 	ldh	r20,0(r3)
 80012b4:	a02bd7fa 	srai	r21,r20,31
 80012b8:	a805883a 	mov	r2,r21
 80012bc:	10012516 	blt	r2,zero,8001754 <___svfprintf_internal_r+0xa34>
 80012c0:	58bfffd8 	cmpnei	r2,r11,-1
 80012c4:	db401543 	ldbu	r13,85(sp)
 80012c8:	10018226 	beq	r2,zero,80018d4 <___svfprintf_internal_r+0xbb4>
 80012cc:	00ffdfc4 	movi	r3,-129
 80012d0:	a544b03a 	or	r2,r20,r21
 80012d4:	60d8703a 	and	r12,r12,r3
 80012d8:	10017e1e 	bne	r2,zero,80018d4 <___svfprintf_internal_r+0xbb4>
 80012dc:	5801801e 	bne	r11,zero,80018e0 <___svfprintf_internal_r+0xbc0>
 80012e0:	6025883a 	mov	r18,r12
 80012e4:	0017883a 	mov	r11,zero
 80012e8:	002b883a 	mov	r21,zero
 80012ec:	b823883a 	mov	r17,r23
 80012f0:	00018006 	br	80018f4 <___svfprintf_internal_r+0xbd4>
 80012f4:	d8c00617 	ldw	r3,24(sp)
 80012f8:	d8001545 	stb	zero,85(sp)
 80012fc:	05000044 	movi	r20,1
 8001300:	18800017 	ldw	r2,0(r3)
 8001304:	18c00104 	addi	r3,r3,4
 8001308:	d8c00615 	stw	r3,24(sp)
 800130c:	d8801f05 	stb	r2,124(sp)
 8001310:	05400044 	movi	r21,1
 8001314:	dc401f04 	addi	r17,sp,124
 8001318:	6025883a 	mov	r18,r12
 800131c:	0017883a 	mov	r11,zero
 8001320:	d8000715 	stw	zero,28(sp)
 8001324:	9380008c 	andi	r14,r18,2
 8001328:	70000126 	beq	r14,zero,8001330 <___svfprintf_internal_r+0x610>
 800132c:	a5000084 	addi	r20,r20,2
 8001330:	9340210c 	andi	r13,r18,132
 8001334:	d8c01e17 	ldw	r3,120(sp)
 8001338:	6800021e 	bne	r13,zero,8001344 <___svfprintf_internal_r+0x624>
 800133c:	850fc83a 	sub	r7,r16,r20
 8001340:	01c2a616 	blt	zero,r7,8001ddc <___svfprintf_internal_r+0x10bc>
 8001344:	d8801547 	ldb	r2,85(sp)
 8001348:	10000c26 	beq	r2,zero,800137c <___svfprintf_internal_r+0x65c>
 800134c:	d8801d17 	ldw	r2,116(sp)
 8001350:	d9001544 	addi	r4,sp,85
 8001354:	18c00044 	addi	r3,r3,1
 8001358:	10800044 	addi	r2,r2,1
 800135c:	41000015 	stw	r4,0(r8)
 8001360:	01000044 	movi	r4,1
 8001364:	d8801d15 	stw	r2,116(sp)
 8001368:	41000115 	stw	r4,4(r8)
 800136c:	d8c01e15 	stw	r3,120(sp)
 8001370:	10800208 	cmpgei	r2,r2,8
 8001374:	1002d31e 	bne	r2,zero,8001ec4 <___svfprintf_internal_r+0x11a4>
 8001378:	42000204 	addi	r8,r8,8
 800137c:	70000c26 	beq	r14,zero,80013b0 <___svfprintf_internal_r+0x690>
 8001380:	d8801d17 	ldw	r2,116(sp)
 8001384:	d9001584 	addi	r4,sp,86
 8001388:	18c00084 	addi	r3,r3,2
 800138c:	10800044 	addi	r2,r2,1
 8001390:	41000015 	stw	r4,0(r8)
 8001394:	01000084 	movi	r4,2
 8001398:	d8801d15 	stw	r2,116(sp)
 800139c:	41000115 	stw	r4,4(r8)
 80013a0:	d8c01e15 	stw	r3,120(sp)
 80013a4:	10800208 	cmpgei	r2,r2,8
 80013a8:	1002d41e 	bne	r2,zero,8001efc <___svfprintf_internal_r+0x11dc>
 80013ac:	42000204 	addi	r8,r8,8
 80013b0:	6b402018 	cmpnei	r13,r13,128
 80013b4:	6801ca26 	beq	r13,zero,8001ae0 <___svfprintf_internal_r+0xdc0>
 80013b8:	5d4fc83a 	sub	r7,r11,r21
 80013bc:	01c20116 	blt	zero,r7,8001bc4 <___svfprintf_internal_r+0xea4>
 80013c0:	9080400c 	andi	r2,r18,256
 80013c4:	1001791e 	bne	r2,zero,80019ac <___svfprintf_internal_r+0xc8c>
 80013c8:	d8801d17 	ldw	r2,116(sp)
 80013cc:	1d47883a 	add	r3,r3,r21
 80013d0:	44400015 	stw	r17,0(r8)
 80013d4:	10800044 	addi	r2,r2,1
 80013d8:	d8801d15 	stw	r2,116(sp)
 80013dc:	45400115 	stw	r21,4(r8)
 80013e0:	d8c01e15 	stw	r3,120(sp)
 80013e4:	10800208 	cmpgei	r2,r2,8
 80013e8:	1002721e 	bne	r2,zero,8001db4 <___svfprintf_internal_r+0x1094>
 80013ec:	42000204 	addi	r8,r8,8
 80013f0:	9480010c 	andi	r18,r18,4
 80013f4:	90000226 	beq	r18,zero,8001400 <___svfprintf_internal_r+0x6e0>
 80013f8:	8523c83a 	sub	r17,r16,r20
 80013fc:	04400916 	blt	zero,r17,8001424 <___svfprintf_internal_r+0x704>
 8001400:	8500010e 	bge	r16,r20,8001408 <___svfprintf_internal_r+0x6e8>
 8001404:	a021883a 	mov	r16,r20
 8001408:	d8800417 	ldw	r2,16(sp)
 800140c:	1405883a 	add	r2,r2,r16
 8001410:	d8800415 	stw	r2,16(sp)
 8001414:	18021f1e 	bne	r3,zero,8001c94 <___svfprintf_internal_r+0xf74>
 8001418:	d8001d15 	stw	zero,116(sp)
 800141c:	b811883a 	mov	r8,r23
 8001420:	003e6506 	br	8000db8 <___svfprintf_internal_r+0x98>
 8001424:	03020074 	movhi	r12,2049
 8001428:	89000450 	cmplti	r4,r17,17
 800142c:	63373684 	addi	r12,r12,-8998
 8001430:	d8801d17 	ldw	r2,116(sp)
 8001434:	20001c1e 	bne	r4,zero,80014a8 <___svfprintf_internal_r+0x788>
 8001438:	04800404 	movi	r18,16
 800143c:	dd400517 	ldw	r21,20(sp)
 8001440:	6039883a 	mov	fp,r12
 8001444:	00000406 	br	8001458 <___svfprintf_internal_r+0x738>
 8001448:	8c7ffc04 	addi	r17,r17,-16
 800144c:	89000448 	cmpgei	r4,r17,17
 8001450:	42000204 	addi	r8,r8,8
 8001454:	20001326 	beq	r4,zero,80014a4 <___svfprintf_internal_r+0x784>
 8001458:	10800044 	addi	r2,r2,1
 800145c:	18c00404 	addi	r3,r3,16
 8001460:	47000015 	stw	fp,0(r8)
 8001464:	44800115 	stw	r18,4(r8)
 8001468:	d8c01e15 	stw	r3,120(sp)
 800146c:	d8801d15 	stw	r2,116(sp)
 8001470:	11000208 	cmpgei	r4,r2,8
 8001474:	203ff426 	beq	r4,zero,8001448 <___svfprintf_internal_r+0x728>
 8001478:	d9801c04 	addi	r6,sp,112
 800147c:	980b883a 	mov	r5,r19
 8001480:	a809883a 	mov	r4,r21
 8001484:	80061640 	call	8006164 <__ssprint_r>
 8001488:	103ee41e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 800148c:	8c7ffc04 	addi	r17,r17,-16
 8001490:	89000448 	cmpgei	r4,r17,17
 8001494:	d8c01e17 	ldw	r3,120(sp)
 8001498:	d8801d17 	ldw	r2,116(sp)
 800149c:	b811883a 	mov	r8,r23
 80014a0:	203fed1e 	bne	r4,zero,8001458 <___svfprintf_internal_r+0x738>
 80014a4:	e019883a 	mov	r12,fp
 80014a8:	10800044 	addi	r2,r2,1
 80014ac:	1c47883a 	add	r3,r3,r17
 80014b0:	d8801d15 	stw	r2,116(sp)
 80014b4:	43000015 	stw	r12,0(r8)
 80014b8:	44400115 	stw	r17,4(r8)
 80014bc:	d8c01e15 	stw	r3,120(sp)
 80014c0:	10800210 	cmplti	r2,r2,8
 80014c4:	103fce1e 	bne	r2,zero,8001400 <___svfprintf_internal_r+0x6e0>
 80014c8:	d9000517 	ldw	r4,20(sp)
 80014cc:	d9801c04 	addi	r6,sp,112
 80014d0:	980b883a 	mov	r5,r19
 80014d4:	80061640 	call	8006164 <__ssprint_r>
 80014d8:	103ed01e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 80014dc:	d8c01e17 	ldw	r3,120(sp)
 80014e0:	003fc706 	br	8001400 <___svfprintf_internal_r+0x6e0>
 80014e4:	21003fcc 	andi	r4,r4,255
 80014e8:	2005e61e 	bne	r4,zero,8002c84 <___svfprintf_internal_r+0x1f64>
 80014ec:	6080080c 	andi	r2,r12,32
 80014f0:	1000f11e 	bne	r2,zero,80018b8 <___svfprintf_internal_r+0xb98>
 80014f4:	d8800617 	ldw	r2,24(sp)
 80014f8:	60c0040c 	andi	r3,r12,16
 80014fc:	15000017 	ldw	r20,0(r2)
 8001500:	10800104 	addi	r2,r2,4
 8001504:	1800481e 	bne	r3,zero,8001628 <___svfprintf_internal_r+0x908>
 8001508:	60c0100c 	andi	r3,r12,64
 800150c:	18053926 	beq	r3,zero,80029f4 <___svfprintf_internal_r+0x1cd4>
 8001510:	d8800615 	stw	r2,24(sp)
 8001514:	a53fffcc 	andi	r20,r20,65535
 8001518:	002b883a 	mov	r21,zero
 800151c:	0005883a 	mov	r2,zero
 8001520:	00002a06 	br	80015cc <___svfprintf_internal_r+0x8ac>
 8001524:	21003fcc 	andi	r4,r4,255
 8001528:	2005dc1e 	bne	r4,zero,8002c9c <___svfprintf_internal_r+0x1f7c>
 800152c:	d9000617 	ldw	r4,24(sp)
 8001530:	6080080c 	andi	r2,r12,32
 8001534:	20c00104 	addi	r3,r4,4
 8001538:	10038a1e 	bne	r2,zero,8002364 <___svfprintf_internal_r+0x1644>
 800153c:	6080040c 	andi	r2,r12,16
 8001540:	1003de1e 	bne	r2,zero,80024bc <___svfprintf_internal_r+0x179c>
 8001544:	6300100c 	andi	r12,r12,64
 8001548:	6003dc26 	beq	r12,zero,80024bc <___svfprintf_internal_r+0x179c>
 800154c:	d8800617 	ldw	r2,24(sp)
 8001550:	d8c00615 	stw	r3,24(sp)
 8001554:	d8c00417 	ldw	r3,16(sp)
 8001558:	10800017 	ldw	r2,0(r2)
 800155c:	10c0000d 	sth	r3,0(r2)
 8001560:	003e1506 	br	8000db8 <___svfprintf_internal_r+0x98>
 8001564:	b2800007 	ldb	r10,0(r22)
 8001568:	50801b18 	cmpnei	r2,r10,108
 800156c:	10043626 	beq	r2,zero,8002648 <___svfprintf_internal_r+0x1928>
 8001570:	63000414 	ori	r12,r12,16
 8001574:	003e3606 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001578:	63001014 	ori	r12,r12,64
 800157c:	b2800007 	ldb	r10,0(r22)
 8001580:	003e3306 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001584:	63000814 	ori	r12,r12,32
 8001588:	b2800007 	ldb	r10,0(r22)
 800158c:	003e3006 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001590:	d8c00617 	ldw	r3,24(sp)
 8001594:	00800c04 	movi	r2,48
 8001598:	d8801585 	stb	r2,86(sp)
 800159c:	00801e04 	movi	r2,120
 80015a0:	01020074 	movhi	r4,2049
 80015a4:	d88015c5 	stb	r2,87(sp)
 80015a8:	1d000017 	ldw	r20,0(r3)
 80015ac:	18800104 	addi	r2,r3,4
 80015b0:	d8800615 	stw	r2,24(sp)
 80015b4:	20b72b04 	addi	r2,r4,-9044
 80015b8:	d8800c15 	stw	r2,48(sp)
 80015bc:	002b883a 	mov	r21,zero
 80015c0:	63000094 	ori	r12,r12,2
 80015c4:	00800084 	movi	r2,2
 80015c8:	07001e04 	movi	fp,120
 80015cc:	d8001545 	stb	zero,85(sp)
 80015d0:	58ffffe0 	cmpeqi	r3,r11,-1
 80015d4:	001b883a 	mov	r13,zero
 80015d8:	1800681e 	bne	r3,zero,800177c <___svfprintf_internal_r+0xa5c>
 80015dc:	04bfdfc4 	movi	r18,-129
 80015e0:	a546b03a 	or	r3,r20,r21
 80015e4:	64a4703a 	and	r18,r12,r18
 80015e8:	1801fa1e 	bne	r3,zero,8001dd4 <___svfprintf_internal_r+0x10b4>
 80015ec:	5804121e 	bne	r11,zero,8002638 <___svfprintf_internal_r+0x1918>
 80015f0:	103f3c1e 	bne	r2,zero,80012e4 <___svfprintf_internal_r+0x5c4>
 80015f4:	6540004c 	andi	r21,r12,1
 80015f8:	a8030426 	beq	r21,zero,800220c <___svfprintf_internal_r+0x14ec>
 80015fc:	00800c04 	movi	r2,48
 8001600:	d88028c5 	stb	r2,163(sp)
 8001604:	dc4028c4 	addi	r17,sp,163
 8001608:	0000ba06 	br	80018f4 <___svfprintf_internal_r+0xbd4>
 800160c:	21003fcc 	andi	r4,r4,255
 8001610:	20059a1e 	bne	r4,zero,8002c7c <___svfprintf_internal_r+0x1f5c>
 8001614:	6080080c 	andi	r2,r12,32
 8001618:	63000414 	ori	r12,r12,16
 800161c:	1000a61e 	bne	r2,zero,80018b8 <___svfprintf_internal_r+0xb98>
 8001620:	d8800617 	ldw	r2,24(sp)
 8001624:	10800104 	addi	r2,r2,4
 8001628:	d8c00617 	ldw	r3,24(sp)
 800162c:	002b883a 	mov	r21,zero
 8001630:	d8800615 	stw	r2,24(sp)
 8001634:	1d000017 	ldw	r20,0(r3)
 8001638:	0005883a 	mov	r2,zero
 800163c:	003fe306 	br	80015cc <___svfprintf_internal_r+0x8ac>
 8001640:	21003fcc 	andi	r4,r4,255
 8001644:	2005931e 	bne	r4,zero,8002c94 <___svfprintf_internal_r+0x1f74>
 8001648:	d8c00617 	ldw	r3,24(sp)
 800164c:	00a00034 	movhi	r2,32768
 8001650:	10bfffc4 	addi	r2,r2,-1
 8001654:	1d000117 	ldw	r20,4(r3)
 8001658:	1c800017 	ldw	r18,0(r3)
 800165c:	01dffc34 	movhi	r7,32752
 8001660:	a0a2703a 	and	r17,r20,r2
 8001664:	01bfffc4 	movi	r6,-1
 8001668:	18800204 	addi	r2,r3,8
 800166c:	39ffffc4 	addi	r7,r7,-1
 8001670:	9009883a 	mov	r4,r18
 8001674:	880b883a 	mov	r5,r17
 8001678:	da000f15 	stw	r8,60(sp)
 800167c:	dac00e15 	stw	r11,56(sp)
 8001680:	db000715 	stw	r12,28(sp)
 8001684:	dd000a15 	stw	r20,40(sp)
 8001688:	dc800915 	stw	r18,36(sp)
 800168c:	d8800615 	stw	r2,24(sp)
 8001690:	800b71c0 	call	800b71c <__unorddf2>
 8001694:	db000717 	ldw	r12,28(sp)
 8001698:	dac00e17 	ldw	r11,56(sp)
 800169c:	da000f17 	ldw	r8,60(sp)
 80016a0:	1002dc1e 	bne	r2,zero,8002214 <___svfprintf_internal_r+0x14f4>
 80016a4:	01dffc34 	movhi	r7,32752
 80016a8:	01bfffc4 	movi	r6,-1
 80016ac:	39ffffc4 	addi	r7,r7,-1
 80016b0:	9009883a 	mov	r4,r18
 80016b4:	880b883a 	mov	r5,r17
 80016b8:	800a4e00 	call	800a4e0 <__ledf2>
 80016bc:	db000717 	ldw	r12,28(sp)
 80016c0:	dac00e17 	ldw	r11,56(sp)
 80016c4:	da000f17 	ldw	r8,60(sp)
 80016c8:	0082d20e 	bge	zero,r2,8002214 <___svfprintf_internal_r+0x14f4>
 80016cc:	000d883a 	mov	r6,zero
 80016d0:	000f883a 	mov	r7,zero
 80016d4:	9009883a 	mov	r4,r18
 80016d8:	a00b883a 	mov	r5,r20
 80016dc:	da000e15 	stw	r8,56(sp)
 80016e0:	800a4e00 	call	800a4e0 <__ledf2>
 80016e4:	db000717 	ldw	r12,28(sp)
 80016e8:	da000e17 	ldw	r8,56(sp)
 80016ec:	1004e016 	blt	r2,zero,8002a70 <___svfprintf_internal_r+0x1d50>
 80016f0:	db401543 	ldbu	r13,85(sp)
 80016f4:	e0801210 	cmplti	r2,fp,72
 80016f8:	1004bb1e 	bne	r2,zero,80029e8 <___svfprintf_internal_r+0x1cc8>
 80016fc:	04420074 	movhi	r17,2049
 8001700:	8c772304 	addi	r17,r17,-9076
 8001704:	04bfdfc4 	movi	r18,-129
 8001708:	64a4703a 	and	r18,r12,r18
 800170c:	050000c4 	movi	r20,3
 8001710:	054000c4 	movi	r21,3
 8001714:	0017883a 	mov	r11,zero
 8001718:	d8000715 	stw	zero,28(sp)
 800171c:	00007906 	br	8001904 <___svfprintf_internal_r+0xbe4>
 8001720:	21003fcc 	andi	r4,r4,255
 8001724:	2005511e 	bne	r4,zero,8002c6c <___svfprintf_internal_r+0x1f4c>
 8001728:	6080080c 	andi	r2,r12,32
 800172c:	63000414 	ori	r12,r12,16
 8001730:	10005a1e 	bne	r2,zero,800189c <___svfprintf_internal_r+0xb7c>
 8001734:	d8800617 	ldw	r2,24(sp)
 8001738:	10800104 	addi	r2,r2,4
 800173c:	d8c00617 	ldw	r3,24(sp)
 8001740:	1d000017 	ldw	r20,0(r3)
 8001744:	d8800615 	stw	r2,24(sp)
 8001748:	a02bd7fa 	srai	r21,r20,31
 800174c:	a805883a 	mov	r2,r21
 8001750:	103edb0e 	bge	r2,zero,80012c0 <___svfprintf_internal_r+0x5a0>
 8001754:	0529c83a 	sub	r20,zero,r20
 8001758:	a004c03a 	cmpne	r2,r20,zero
 800175c:	056bc83a 	sub	r21,zero,r21
 8001760:	a8abc83a 	sub	r21,r21,r2
 8001764:	00800b44 	movi	r2,45
 8001768:	d8801545 	stb	r2,85(sp)
 800176c:	58ffffe0 	cmpeqi	r3,r11,-1
 8001770:	03400b44 	movi	r13,45
 8001774:	00800044 	movi	r2,1
 8001778:	183f9826 	beq	r3,zero,80015dc <___svfprintf_internal_r+0x8bc>
 800177c:	10c00060 	cmpeqi	r3,r2,1
 8001780:	1800541e 	bne	r3,zero,80018d4 <___svfprintf_internal_r+0xbb4>
 8001784:	108000a0 	cmpeqi	r2,r2,2
 8001788:	1001e81e 	bne	r2,zero,8001f2c <___svfprintf_internal_r+0x120c>
 800178c:	b807883a 	mov	r3,r23
 8001790:	00000106 	br	8001798 <___svfprintf_internal_r+0xa78>
 8001794:	8807883a 	mov	r3,r17
 8001798:	a008d0fa 	srli	r4,r20,3
 800179c:	a80a977a 	slli	r5,r21,29
 80017a0:	a82ad0fa 	srli	r21,r21,3
 80017a4:	a50001cc 	andi	r20,r20,7
 80017a8:	a0800c04 	addi	r2,r20,48
 80017ac:	2928b03a 	or	r20,r5,r4
 80017b0:	18bfffc5 	stb	r2,-1(r3)
 80017b4:	a548b03a 	or	r4,r20,r21
 80017b8:	1c7fffc4 	addi	r17,r3,-1
 80017bc:	203ff51e 	bne	r4,zero,8001794 <___svfprintf_internal_r+0xa74>
 80017c0:	6100004c 	andi	r4,r12,1
 80017c4:	20007626 	beq	r4,zero,80019a0 <___svfprintf_internal_r+0xc80>
 80017c8:	10803fcc 	andi	r2,r2,255
 80017cc:	1080201c 	xori	r2,r2,128
 80017d0:	10bfe004 	addi	r2,r2,-128
 80017d4:	10800c18 	cmpnei	r2,r2,48
 80017d8:	10007126 	beq	r2,zero,80019a0 <___svfprintf_internal_r+0xc80>
 80017dc:	18ffff84 	addi	r3,r3,-2
 80017e0:	00800c04 	movi	r2,48
 80017e4:	88bfffc5 	stb	r2,-1(r17)
 80017e8:	b8ebc83a 	sub	r21,r23,r3
 80017ec:	6025883a 	mov	r18,r12
 80017f0:	1823883a 	mov	r17,r3
 80017f4:	00003f06 	br	80018f4 <___svfprintf_internal_r+0xbd4>
 80017f8:	21003fcc 	andi	r4,r4,255
 80017fc:	2005171e 	bne	r4,zero,8002c5c <___svfprintf_internal_r+0x1f3c>
 8001800:	00820074 	movhi	r2,2049
 8001804:	10b72604 	addi	r2,r2,-9064
 8001808:	d8800c15 	stw	r2,48(sp)
 800180c:	6080080c 	andi	r2,r12,32
 8001810:	103e681e 	bne	r2,zero,80011b4 <___svfprintf_internal_r+0x494>
 8001814:	d8c00617 	ldw	r3,24(sp)
 8001818:	6080040c 	andi	r2,r12,16
 800181c:	1d000017 	ldw	r20,0(r3)
 8001820:	18c00104 	addi	r3,r3,4
 8001824:	d8c00615 	stw	r3,24(sp)
 8001828:	1002621e 	bne	r2,zero,80021b4 <___svfprintf_internal_r+0x1494>
 800182c:	6080100c 	andi	r2,r12,64
 8001830:	10026026 	beq	r2,zero,80021b4 <___svfprintf_internal_r+0x1494>
 8001834:	a53fffcc 	andi	r20,r20,65535
 8001838:	002b883a 	mov	r21,zero
 800183c:	003e6206 	br	80011c8 <___svfprintf_internal_r+0x4a8>
 8001840:	21003fcc 	andi	r4,r4,255
 8001844:	2005171e 	bne	r4,zero,8002ca4 <___svfprintf_internal_r+0x1f84>
 8001848:	6080080c 	andi	r2,r12,32
 800184c:	63000414 	ori	r12,r12,16
 8001850:	10000b1e 	bne	r2,zero,8001880 <___svfprintf_internal_r+0xb60>
 8001854:	d8800617 	ldw	r2,24(sp)
 8001858:	10800104 	addi	r2,r2,4
 800185c:	d8c00617 	ldw	r3,24(sp)
 8001860:	002b883a 	mov	r21,zero
 8001864:	d8800615 	stw	r2,24(sp)
 8001868:	1d000017 	ldw	r20,0(r3)
 800186c:	00800044 	movi	r2,1
 8001870:	003f5606 	br	80015cc <___svfprintf_internal_r+0x8ac>
 8001874:	63000214 	ori	r12,r12,8
 8001878:	b2800007 	ldb	r10,0(r22)
 800187c:	003d7406 	br	8000e50 <___svfprintf_internal_r+0x130>
 8001880:	d8c00617 	ldw	r3,24(sp)
 8001884:	00800044 	movi	r2,1
 8001888:	1d000017 	ldw	r20,0(r3)
 800188c:	1d400117 	ldw	r21,4(r3)
 8001890:	18c00204 	addi	r3,r3,8
 8001894:	d8c00615 	stw	r3,24(sp)
 8001898:	003f4c06 	br	80015cc <___svfprintf_internal_r+0x8ac>
 800189c:	d8c00617 	ldw	r3,24(sp)
 80018a0:	18800117 	ldw	r2,4(r3)
 80018a4:	1d000017 	ldw	r20,0(r3)
 80018a8:	18c00204 	addi	r3,r3,8
 80018ac:	d8c00615 	stw	r3,24(sp)
 80018b0:	102b883a 	mov	r21,r2
 80018b4:	003e8106 	br	80012bc <___svfprintf_internal_r+0x59c>
 80018b8:	d8c00617 	ldw	r3,24(sp)
 80018bc:	0005883a 	mov	r2,zero
 80018c0:	1d000017 	ldw	r20,0(r3)
 80018c4:	1d400117 	ldw	r21,4(r3)
 80018c8:	18c00204 	addi	r3,r3,8
 80018cc:	d8c00615 	stw	r3,24(sp)
 80018d0:	003f3e06 	br	80015cc <___svfprintf_internal_r+0x8ac>
 80018d4:	a800111e 	bne	r21,zero,800191c <___svfprintf_internal_r+0xbfc>
 80018d8:	a08002a8 	cmpgeui	r2,r20,10
 80018dc:	10000f1e 	bne	r2,zero,800191c <___svfprintf_internal_r+0xbfc>
 80018e0:	a5000c04 	addi	r20,r20,48
 80018e4:	dd0028c5 	stb	r20,163(sp)
 80018e8:	6025883a 	mov	r18,r12
 80018ec:	05400044 	movi	r21,1
 80018f0:	dc4028c4 	addi	r17,sp,163
 80018f4:	5829883a 	mov	r20,r11
 80018f8:	5d40010e 	bge	r11,r21,8001900 <___svfprintf_internal_r+0xbe0>
 80018fc:	a829883a 	mov	r20,r21
 8001900:	d8000715 	stw	zero,28(sp)
 8001904:	6b403fcc 	andi	r13,r13,255
 8001908:	6b40201c 	xori	r13,r13,128
 800190c:	6b7fe004 	addi	r13,r13,-128
 8001910:	683e8426 	beq	r13,zero,8001324 <___svfprintf_internal_r+0x604>
 8001914:	a5000044 	addi	r20,r20,1
 8001918:	003e8206 	br	8001324 <___svfprintf_internal_r+0x604>
 800191c:	dc000e15 	stw	r16,56(sp)
 8001920:	b823883a 	mov	r17,r23
 8001924:	a821883a 	mov	r16,r21
 8001928:	db000715 	stw	r12,28(sp)
 800192c:	982b883a 	mov	r21,r19
 8001930:	dac00f15 	stw	r11,60(sp)
 8001934:	4025883a 	mov	r18,r8
 8001938:	6827883a 	mov	r19,r13
 800193c:	00000206 	br	8001948 <___svfprintf_internal_r+0xc28>
 8001940:	1029883a 	mov	r20,r2
 8001944:	1821883a 	mov	r16,r3
 8001948:	a009883a 	mov	r4,r20
 800194c:	800b883a 	mov	r5,r16
 8001950:	01800284 	movi	r6,10
 8001954:	000f883a 	mov	r7,zero
 8001958:	8008aa40 	call	8008aa4 <__umoddi3>
 800195c:	10800c04 	addi	r2,r2,48
 8001960:	8c7fffc4 	addi	r17,r17,-1
 8001964:	a009883a 	mov	r4,r20
 8001968:	800b883a 	mov	r5,r16
 800196c:	88800005 	stb	r2,0(r17)
 8001970:	01800284 	movi	r6,10
 8001974:	000f883a 	mov	r7,zero
 8001978:	80084880 	call	8008488 <__udivdi3>
 800197c:	803ff01e 	bne	r16,zero,8001940 <___svfprintf_internal_r+0xc20>
 8001980:	a50002a8 	cmpgeui	r20,r20,10
 8001984:	a03fee1e 	bne	r20,zero,8001940 <___svfprintf_internal_r+0xc20>
 8001988:	db000717 	ldw	r12,28(sp)
 800198c:	dc000e17 	ldw	r16,56(sp)
 8001990:	dac00f17 	ldw	r11,60(sp)
 8001994:	981b883a 	mov	r13,r19
 8001998:	9011883a 	mov	r8,r18
 800199c:	a827883a 	mov	r19,r21
 80019a0:	bc6bc83a 	sub	r21,r23,r17
 80019a4:	6025883a 	mov	r18,r12
 80019a8:	003fd206 	br	80018f4 <___svfprintf_internal_r+0xbd4>
 80019ac:	e2801990 	cmplti	r10,fp,102
 80019b0:	5000be1e 	bne	r10,zero,8001cac <___svfprintf_internal_r+0xf8c>
 80019b4:	d9000917 	ldw	r4,36(sp)
 80019b8:	d9400a17 	ldw	r5,40(sp)
 80019bc:	000d883a 	mov	r6,zero
 80019c0:	000f883a 	mov	r7,zero
 80019c4:	da000f15 	stw	r8,60(sp)
 80019c8:	d8c00e15 	stw	r3,56(sp)
 80019cc:	800a3700 	call	800a370 <__eqdf2>
 80019d0:	d8c00e17 	ldw	r3,56(sp)
 80019d4:	da000f17 	ldw	r8,60(sp)
 80019d8:	1001641e 	bne	r2,zero,8001f6c <___svfprintf_internal_r+0x124c>
 80019dc:	d8801d17 	ldw	r2,116(sp)
 80019e0:	01020074 	movhi	r4,2049
 80019e4:	21373204 	addi	r4,r4,-9016
 80019e8:	10800044 	addi	r2,r2,1
 80019ec:	18c00044 	addi	r3,r3,1
 80019f0:	41000015 	stw	r4,0(r8)
 80019f4:	01000044 	movi	r4,1
 80019f8:	d8801d15 	stw	r2,116(sp)
 80019fc:	41000115 	stw	r4,4(r8)
 8001a00:	d8c01e15 	stw	r3,120(sp)
 8001a04:	10800208 	cmpgei	r2,r2,8
 8001a08:	1002fa1e 	bne	r2,zero,80025f4 <___svfprintf_internal_r+0x18d4>
 8001a0c:	42000204 	addi	r8,r8,8
 8001a10:	d8801617 	ldw	r2,88(sp)
 8001a14:	d8c00817 	ldw	r3,32(sp)
 8001a18:	10c00216 	blt	r2,r3,8001a24 <___svfprintf_internal_r+0xd04>
 8001a1c:	9080004c 	andi	r2,r18,1
 8001a20:	10026b26 	beq	r2,zero,80023d0 <___svfprintf_internal_r+0x16b0>
 8001a24:	d8800d17 	ldw	r2,52(sp)
 8001a28:	d8c01e17 	ldw	r3,120(sp)
 8001a2c:	d9000b17 	ldw	r4,44(sp)
 8001a30:	40800015 	stw	r2,0(r8)
 8001a34:	d8801d17 	ldw	r2,116(sp)
 8001a38:	20c7883a 	add	r3,r4,r3
 8001a3c:	41000115 	stw	r4,4(r8)
 8001a40:	10800044 	addi	r2,r2,1
 8001a44:	d8801d15 	stw	r2,116(sp)
 8001a48:	d8c01e15 	stw	r3,120(sp)
 8001a4c:	10800208 	cmpgei	r2,r2,8
 8001a50:	1003041e 	bne	r2,zero,8002664 <___svfprintf_internal_r+0x1944>
 8001a54:	42000204 	addi	r8,r8,8
 8001a58:	d8800817 	ldw	r2,32(sp)
 8001a5c:	147fffc4 	addi	r17,r2,-1
 8001a60:	047e630e 	bge	zero,r17,80013f0 <___svfprintf_internal_r+0x6d0>
 8001a64:	03020074 	movhi	r12,2049
 8001a68:	89000450 	cmplti	r4,r17,17
 8001a6c:	63373284 	addi	r12,r12,-9014
 8001a70:	d8801d17 	ldw	r2,116(sp)
 8001a74:	20033b1e 	bne	r4,zero,8002764 <___svfprintf_internal_r+0x1a44>
 8001a78:	dc000715 	stw	r16,28(sp)
 8001a7c:	05400404 	movi	r21,16
 8001a80:	df000517 	ldw	fp,20(sp)
 8001a84:	6021883a 	mov	r16,r12
 8001a88:	00000406 	br	8001a9c <___svfprintf_internal_r+0xd7c>
 8001a8c:	42000204 	addi	r8,r8,8
 8001a90:	8c7ffc04 	addi	r17,r17,-16
 8001a94:	89000448 	cmpgei	r4,r17,17
 8001a98:	20033026 	beq	r4,zero,800275c <___svfprintf_internal_r+0x1a3c>
 8001a9c:	10800044 	addi	r2,r2,1
 8001aa0:	18c00404 	addi	r3,r3,16
 8001aa4:	44000015 	stw	r16,0(r8)
 8001aa8:	45400115 	stw	r21,4(r8)
 8001aac:	d8c01e15 	stw	r3,120(sp)
 8001ab0:	d8801d15 	stw	r2,116(sp)
 8001ab4:	11000208 	cmpgei	r4,r2,8
 8001ab8:	203ff426 	beq	r4,zero,8001a8c <___svfprintf_internal_r+0xd6c>
 8001abc:	d9801c04 	addi	r6,sp,112
 8001ac0:	980b883a 	mov	r5,r19
 8001ac4:	e009883a 	mov	r4,fp
 8001ac8:	80061640 	call	8006164 <__ssprint_r>
 8001acc:	103d531e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8001ad0:	d8c01e17 	ldw	r3,120(sp)
 8001ad4:	d8801d17 	ldw	r2,116(sp)
 8001ad8:	b811883a 	mov	r8,r23
 8001adc:	003fec06 	br	8001a90 <___svfprintf_internal_r+0xd70>
 8001ae0:	850fc83a 	sub	r7,r16,r20
 8001ae4:	01fe340e 	bge	zero,r7,80013b8 <___svfprintf_internal_r+0x698>
 8001ae8:	03020074 	movhi	r12,2049
 8001aec:	39000450 	cmplti	r4,r7,17
 8001af0:	63373284 	addi	r12,r12,-9014
 8001af4:	d8801d17 	ldw	r2,116(sp)
 8001af8:	2000271e 	bne	r4,zero,8001b98 <___svfprintf_internal_r+0xe78>
 8001afc:	dc800e15 	stw	r18,56(sp)
 8001b00:	dc400f15 	stw	r17,60(sp)
 8001b04:	dc001015 	stw	r16,64(sp)
 8001b08:	03400404 	movi	r13,16
 8001b0c:	3821883a 	mov	r16,r7
 8001b10:	dac01215 	stw	r11,72(sp)
 8001b14:	dc400517 	ldw	r17,20(sp)
 8001b18:	6025883a 	mov	r18,r12
 8001b1c:	00000406 	br	8001b30 <___svfprintf_internal_r+0xe10>
 8001b20:	843ffc04 	addi	r16,r16,-16
 8001b24:	81000448 	cmpgei	r4,r16,17
 8001b28:	42000204 	addi	r8,r8,8
 8001b2c:	20001426 	beq	r4,zero,8001b80 <___svfprintf_internal_r+0xe60>
 8001b30:	10800044 	addi	r2,r2,1
 8001b34:	18c00404 	addi	r3,r3,16
 8001b38:	44800015 	stw	r18,0(r8)
 8001b3c:	43400115 	stw	r13,4(r8)
 8001b40:	d8c01e15 	stw	r3,120(sp)
 8001b44:	d8801d15 	stw	r2,116(sp)
 8001b48:	11000208 	cmpgei	r4,r2,8
 8001b4c:	203ff426 	beq	r4,zero,8001b20 <___svfprintf_internal_r+0xe00>
 8001b50:	d9801c04 	addi	r6,sp,112
 8001b54:	980b883a 	mov	r5,r19
 8001b58:	8809883a 	mov	r4,r17
 8001b5c:	80061640 	call	8006164 <__ssprint_r>
 8001b60:	103d2e1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8001b64:	843ffc04 	addi	r16,r16,-16
 8001b68:	81000448 	cmpgei	r4,r16,17
 8001b6c:	d8c01e17 	ldw	r3,120(sp)
 8001b70:	d8801d17 	ldw	r2,116(sp)
 8001b74:	b811883a 	mov	r8,r23
 8001b78:	03400404 	movi	r13,16
 8001b7c:	203fec1e 	bne	r4,zero,8001b30 <___svfprintf_internal_r+0xe10>
 8001b80:	800f883a 	mov	r7,r16
 8001b84:	9019883a 	mov	r12,r18
 8001b88:	dc400f17 	ldw	r17,60(sp)
 8001b8c:	dc001017 	ldw	r16,64(sp)
 8001b90:	dac01217 	ldw	r11,72(sp)
 8001b94:	dc800e17 	ldw	r18,56(sp)
 8001b98:	10800044 	addi	r2,r2,1
 8001b9c:	19c7883a 	add	r3,r3,r7
 8001ba0:	d8801d15 	stw	r2,116(sp)
 8001ba4:	43000015 	stw	r12,0(r8)
 8001ba8:	41c00115 	stw	r7,4(r8)
 8001bac:	d8c01e15 	stw	r3,120(sp)
 8001bb0:	10800208 	cmpgei	r2,r2,8
 8001bb4:	1002961e 	bne	r2,zero,8002610 <___svfprintf_internal_r+0x18f0>
 8001bb8:	5d4fc83a 	sub	r7,r11,r21
 8001bbc:	42000204 	addi	r8,r8,8
 8001bc0:	01fdff0e 	bge	zero,r7,80013c0 <___svfprintf_internal_r+0x6a0>
 8001bc4:	03020074 	movhi	r12,2049
 8001bc8:	39000450 	cmplti	r4,r7,17
 8001bcc:	63373284 	addi	r12,r12,-9014
 8001bd0:	d8801d17 	ldw	r2,116(sp)
 8001bd4:	2000251e 	bne	r4,zero,8001c6c <___svfprintf_internal_r+0xf4c>
 8001bd8:	dc800e15 	stw	r18,56(sp)
 8001bdc:	dc400f15 	stw	r17,60(sp)
 8001be0:	dc001015 	stw	r16,64(sp)
 8001be4:	02c00404 	movi	r11,16
 8001be8:	3821883a 	mov	r16,r7
 8001bec:	dc400517 	ldw	r17,20(sp)
 8001bf0:	6025883a 	mov	r18,r12
 8001bf4:	00000406 	br	8001c08 <___svfprintf_internal_r+0xee8>
 8001bf8:	843ffc04 	addi	r16,r16,-16
 8001bfc:	81000448 	cmpgei	r4,r16,17
 8001c00:	42000204 	addi	r8,r8,8
 8001c04:	20001426 	beq	r4,zero,8001c58 <___svfprintf_internal_r+0xf38>
 8001c08:	10800044 	addi	r2,r2,1
 8001c0c:	18c00404 	addi	r3,r3,16
 8001c10:	44800015 	stw	r18,0(r8)
 8001c14:	42c00115 	stw	r11,4(r8)
 8001c18:	d8c01e15 	stw	r3,120(sp)
 8001c1c:	d8801d15 	stw	r2,116(sp)
 8001c20:	11000208 	cmpgei	r4,r2,8
 8001c24:	203ff426 	beq	r4,zero,8001bf8 <___svfprintf_internal_r+0xed8>
 8001c28:	d9801c04 	addi	r6,sp,112
 8001c2c:	980b883a 	mov	r5,r19
 8001c30:	8809883a 	mov	r4,r17
 8001c34:	80061640 	call	8006164 <__ssprint_r>
 8001c38:	103cf81e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8001c3c:	843ffc04 	addi	r16,r16,-16
 8001c40:	81000448 	cmpgei	r4,r16,17
 8001c44:	d8c01e17 	ldw	r3,120(sp)
 8001c48:	d8801d17 	ldw	r2,116(sp)
 8001c4c:	b811883a 	mov	r8,r23
 8001c50:	02c00404 	movi	r11,16
 8001c54:	203fec1e 	bne	r4,zero,8001c08 <___svfprintf_internal_r+0xee8>
 8001c58:	800f883a 	mov	r7,r16
 8001c5c:	9019883a 	mov	r12,r18
 8001c60:	dc400f17 	ldw	r17,60(sp)
 8001c64:	dc001017 	ldw	r16,64(sp)
 8001c68:	dc800e17 	ldw	r18,56(sp)
 8001c6c:	10800044 	addi	r2,r2,1
 8001c70:	19c7883a 	add	r3,r3,r7
 8001c74:	d8801d15 	stw	r2,116(sp)
 8001c78:	43000015 	stw	r12,0(r8)
 8001c7c:	41c00115 	stw	r7,4(r8)
 8001c80:	d8c01e15 	stw	r3,120(sp)
 8001c84:	10800208 	cmpgei	r2,r2,8
 8001c88:	1001421e 	bne	r2,zero,8002194 <___svfprintf_internal_r+0x1474>
 8001c8c:	42000204 	addi	r8,r8,8
 8001c90:	003dcb06 	br	80013c0 <___svfprintf_internal_r+0x6a0>
 8001c94:	d9000517 	ldw	r4,20(sp)
 8001c98:	d9801c04 	addi	r6,sp,112
 8001c9c:	980b883a 	mov	r5,r19
 8001ca0:	80061640 	call	8006164 <__ssprint_r>
 8001ca4:	103ddc26 	beq	r2,zero,8001418 <___svfprintf_internal_r+0x6f8>
 8001ca8:	003cdc06 	br	800101c <___svfprintf_internal_r+0x2fc>
 8001cac:	d8800817 	ldw	r2,32(sp)
 8001cb0:	da801d17 	ldw	r10,116(sp)
 8001cb4:	18c00044 	addi	r3,r3,1
 8001cb8:	10800088 	cmpgei	r2,r2,2
 8001cbc:	55400044 	addi	r21,r10,1
 8001cc0:	47000204 	addi	fp,r8,8
 8001cc4:	10010226 	beq	r2,zero,80020d0 <___svfprintf_internal_r+0x13b0>
 8001cc8:	00800044 	movi	r2,1
 8001ccc:	40800115 	stw	r2,4(r8)
 8001cd0:	44400015 	stw	r17,0(r8)
 8001cd4:	d8c01e15 	stw	r3,120(sp)
 8001cd8:	dd401d15 	stw	r21,116(sp)
 8001cdc:	a8800210 	cmplti	r2,r21,8
 8001ce0:	10014126 	beq	r2,zero,80021e8 <___svfprintf_internal_r+0x14c8>
 8001ce4:	d8800b17 	ldw	r2,44(sp)
 8001ce8:	d9000d17 	ldw	r4,52(sp)
 8001cec:	ad400044 	addi	r21,r21,1
 8001cf0:	1887883a 	add	r3,r3,r2
 8001cf4:	e0800115 	stw	r2,4(fp)
 8001cf8:	e1000015 	stw	r4,0(fp)
 8001cfc:	d8c01e15 	stw	r3,120(sp)
 8001d00:	dd401d15 	stw	r21,116(sp)
 8001d04:	a8800208 	cmpgei	r2,r21,8
 8001d08:	10012e1e 	bne	r2,zero,80021c4 <___svfprintf_internal_r+0x14a4>
 8001d0c:	e7000204 	addi	fp,fp,8
 8001d10:	d8800817 	ldw	r2,32(sp)
 8001d14:	d9000917 	ldw	r4,36(sp)
 8001d18:	d9400a17 	ldw	r5,40(sp)
 8001d1c:	aa800044 	addi	r10,r21,1
 8001d20:	e2000204 	addi	r8,fp,8
 8001d24:	12ffffc4 	addi	r11,r2,-1
 8001d28:	000d883a 	mov	r6,zero
 8001d2c:	000f883a 	mov	r7,zero
 8001d30:	d8c01215 	stw	r3,72(sp)
 8001d34:	da801015 	stw	r10,64(sp)
 8001d38:	da800f15 	stw	r10,60(sp)
 8001d3c:	da000e15 	stw	r8,56(sp)
 8001d40:	dac00715 	stw	r11,28(sp)
 8001d44:	800a3700 	call	800a370 <__eqdf2>
 8001d48:	dac00717 	ldw	r11,28(sp)
 8001d4c:	da000e17 	ldw	r8,56(sp)
 8001d50:	db400f17 	ldw	r13,60(sp)
 8001d54:	da801017 	ldw	r10,64(sp)
 8001d58:	d8c01217 	ldw	r3,72(sp)
 8001d5c:	1000e826 	beq	r2,zero,8002100 <___svfprintf_internal_r+0x13e0>
 8001d60:	8c400044 	addi	r17,r17,1
 8001d64:	1ac7883a 	add	r3,r3,r11
 8001d68:	da801d15 	stw	r10,116(sp)
 8001d6c:	e4400015 	stw	r17,0(fp)
 8001d70:	e2c00115 	stw	r11,4(fp)
 8001d74:	d8c01e15 	stw	r3,120(sp)
 8001d78:	52800208 	cmpgei	r10,r10,8
 8001d7c:	5001dc1e 	bne	r10,zero,80024f0 <___svfprintf_internal_r+0x17d0>
 8001d80:	e0800404 	addi	r2,fp,16
 8001d84:	aa800084 	addi	r10,r21,2
 8001d88:	4039883a 	mov	fp,r8
 8001d8c:	1011883a 	mov	r8,r2
 8001d90:	d9001117 	ldw	r4,68(sp)
 8001d94:	d8801844 	addi	r2,sp,97
 8001d98:	da801d15 	stw	r10,116(sp)
 8001d9c:	20c7883a 	add	r3,r4,r3
 8001da0:	e0800015 	stw	r2,0(fp)
 8001da4:	e1000115 	stw	r4,4(fp)
 8001da8:	d8c01e15 	stw	r3,120(sp)
 8001dac:	52800210 	cmplti	r10,r10,8
 8001db0:	503d8f1e 	bne	r10,zero,80013f0 <___svfprintf_internal_r+0x6d0>
 8001db4:	d9000517 	ldw	r4,20(sp)
 8001db8:	d9801c04 	addi	r6,sp,112
 8001dbc:	980b883a 	mov	r5,r19
 8001dc0:	80061640 	call	8006164 <__ssprint_r>
 8001dc4:	103c951e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8001dc8:	d8c01e17 	ldw	r3,120(sp)
 8001dcc:	b811883a 	mov	r8,r23
 8001dd0:	003d8706 	br	80013f0 <___svfprintf_internal_r+0x6d0>
 8001dd4:	9019883a 	mov	r12,r18
 8001dd8:	003e6806 	br	800177c <___svfprintf_internal_r+0xa5c>
 8001ddc:	03020074 	movhi	r12,2049
 8001de0:	39000450 	cmplti	r4,r7,17
 8001de4:	63373684 	addi	r12,r12,-8998
 8001de8:	d8801d17 	ldw	r2,116(sp)
 8001dec:	20002b1e 	bne	r4,zero,8001e9c <___svfprintf_internal_r+0x117c>
 8001df0:	dc801015 	stw	r18,64(sp)
 8001df4:	dc401215 	stw	r17,72(sp)
 8001df8:	dc001315 	stw	r16,76(sp)
 8001dfc:	03c00404 	movi	r15,16
 8001e00:	db800e15 	stw	r14,56(sp)
 8001e04:	db400f15 	stw	r13,60(sp)
 8001e08:	dac01415 	stw	r11,80(sp)
 8001e0c:	3821883a 	mov	r16,r7
 8001e10:	dc400517 	ldw	r17,20(sp)
 8001e14:	6025883a 	mov	r18,r12
 8001e18:	00000406 	br	8001e2c <___svfprintf_internal_r+0x110c>
 8001e1c:	843ffc04 	addi	r16,r16,-16
 8001e20:	81000448 	cmpgei	r4,r16,17
 8001e24:	42000204 	addi	r8,r8,8
 8001e28:	20001426 	beq	r4,zero,8001e7c <___svfprintf_internal_r+0x115c>
 8001e2c:	10800044 	addi	r2,r2,1
 8001e30:	18c00404 	addi	r3,r3,16
 8001e34:	44800015 	stw	r18,0(r8)
 8001e38:	43c00115 	stw	r15,4(r8)
 8001e3c:	d8c01e15 	stw	r3,120(sp)
 8001e40:	d8801d15 	stw	r2,116(sp)
 8001e44:	11000208 	cmpgei	r4,r2,8
 8001e48:	203ff426 	beq	r4,zero,8001e1c <___svfprintf_internal_r+0x10fc>
 8001e4c:	d9801c04 	addi	r6,sp,112
 8001e50:	980b883a 	mov	r5,r19
 8001e54:	8809883a 	mov	r4,r17
 8001e58:	80061640 	call	8006164 <__ssprint_r>
 8001e5c:	103c6f1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8001e60:	843ffc04 	addi	r16,r16,-16
 8001e64:	81000448 	cmpgei	r4,r16,17
 8001e68:	d8c01e17 	ldw	r3,120(sp)
 8001e6c:	d8801d17 	ldw	r2,116(sp)
 8001e70:	b811883a 	mov	r8,r23
 8001e74:	03c00404 	movi	r15,16
 8001e78:	203fec1e 	bne	r4,zero,8001e2c <___svfprintf_internal_r+0x110c>
 8001e7c:	800f883a 	mov	r7,r16
 8001e80:	9019883a 	mov	r12,r18
 8001e84:	db800e17 	ldw	r14,56(sp)
 8001e88:	db400f17 	ldw	r13,60(sp)
 8001e8c:	dc401217 	ldw	r17,72(sp)
 8001e90:	dac01417 	ldw	r11,80(sp)
 8001e94:	dc001317 	ldw	r16,76(sp)
 8001e98:	dc801017 	ldw	r18,64(sp)
 8001e9c:	10800044 	addi	r2,r2,1
 8001ea0:	19c7883a 	add	r3,r3,r7
 8001ea4:	d8801d15 	stw	r2,116(sp)
 8001ea8:	43000015 	stw	r12,0(r8)
 8001eac:	41c00115 	stw	r7,4(r8)
 8001eb0:	d8c01e15 	stw	r3,120(sp)
 8001eb4:	10800208 	cmpgei	r2,r2,8
 8001eb8:	1001c01e 	bne	r2,zero,80025bc <___svfprintf_internal_r+0x189c>
 8001ebc:	42000204 	addi	r8,r8,8
 8001ec0:	003d2006 	br	8001344 <___svfprintf_internal_r+0x624>
 8001ec4:	d9000517 	ldw	r4,20(sp)
 8001ec8:	d9801c04 	addi	r6,sp,112
 8001ecc:	980b883a 	mov	r5,r19
 8001ed0:	dac01015 	stw	r11,64(sp)
 8001ed4:	db400f15 	stw	r13,60(sp)
 8001ed8:	db800e15 	stw	r14,56(sp)
 8001edc:	80061640 	call	8006164 <__ssprint_r>
 8001ee0:	103c4e1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8001ee4:	d8c01e17 	ldw	r3,120(sp)
 8001ee8:	b811883a 	mov	r8,r23
 8001eec:	dac01017 	ldw	r11,64(sp)
 8001ef0:	db400f17 	ldw	r13,60(sp)
 8001ef4:	db800e17 	ldw	r14,56(sp)
 8001ef8:	003d2006 	br	800137c <___svfprintf_internal_r+0x65c>
 8001efc:	d9000517 	ldw	r4,20(sp)
 8001f00:	d9801c04 	addi	r6,sp,112
 8001f04:	980b883a 	mov	r5,r19
 8001f08:	dac00f15 	stw	r11,60(sp)
 8001f0c:	db400e15 	stw	r13,56(sp)
 8001f10:	80061640 	call	8006164 <__ssprint_r>
 8001f14:	103c411e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8001f18:	d8c01e17 	ldw	r3,120(sp)
 8001f1c:	b811883a 	mov	r8,r23
 8001f20:	dac00f17 	ldw	r11,60(sp)
 8001f24:	db400e17 	ldw	r13,56(sp)
 8001f28:	003d2106 	br	80013b0 <___svfprintf_internal_r+0x690>
 8001f2c:	d9000c17 	ldw	r4,48(sp)
 8001f30:	b823883a 	mov	r17,r23
 8001f34:	a08003cc 	andi	r2,r20,15
 8001f38:	a806973a 	slli	r3,r21,28
 8001f3c:	2085883a 	add	r2,r4,r2
 8001f40:	a028d13a 	srli	r20,r20,4
 8001f44:	10800003 	ldbu	r2,0(r2)
 8001f48:	a82ad13a 	srli	r21,r21,4
 8001f4c:	8c7fffc4 	addi	r17,r17,-1
 8001f50:	1d28b03a 	or	r20,r3,r20
 8001f54:	88800005 	stb	r2,0(r17)
 8001f58:	a544b03a 	or	r2,r20,r21
 8001f5c:	103ff51e 	bne	r2,zero,8001f34 <___svfprintf_internal_r+0x1214>
 8001f60:	bc6bc83a 	sub	r21,r23,r17
 8001f64:	6025883a 	mov	r18,r12
 8001f68:	003e6206 	br	80018f4 <___svfprintf_internal_r+0xbd4>
 8001f6c:	d9001617 	ldw	r4,88(sp)
 8001f70:	01016a0e 	bge	zero,r4,800251c <___svfprintf_internal_r+0x17fc>
 8001f74:	d8800817 	ldw	r2,32(sp)
 8001f78:	d9000717 	ldw	r4,28(sp)
 8001f7c:	1039883a 	mov	fp,r2
 8001f80:	20810816 	blt	r4,r2,80023a4 <___svfprintf_internal_r+0x1684>
 8001f84:	07000a0e 	bge	zero,fp,8001fb0 <___svfprintf_internal_r+0x1290>
 8001f88:	d8801d17 	ldw	r2,116(sp)
 8001f8c:	1f07883a 	add	r3,r3,fp
 8001f90:	44400015 	stw	r17,0(r8)
 8001f94:	10800044 	addi	r2,r2,1
 8001f98:	d8801d15 	stw	r2,116(sp)
 8001f9c:	47000115 	stw	fp,4(r8)
 8001fa0:	d8c01e15 	stw	r3,120(sp)
 8001fa4:	10800208 	cmpgei	r2,r2,8
 8001fa8:	1003061e 	bne	r2,zero,8002bc4 <___svfprintf_internal_r+0x1ea4>
 8001fac:	42000204 	addi	r8,r8,8
 8001fb0:	e0010916 	blt	fp,zero,80023d8 <___svfprintf_internal_r+0x16b8>
 8001fb4:	d8800717 	ldw	r2,28(sp)
 8001fb8:	1739c83a 	sub	fp,r2,fp
 8001fbc:	07011c16 	blt	zero,fp,8002430 <___svfprintf_internal_r+0x1710>
 8001fc0:	d9001617 	ldw	r4,88(sp)
 8001fc4:	d8800817 	ldw	r2,32(sp)
 8001fc8:	2080f90e 	bge	r4,r2,80023b0 <___svfprintf_internal_r+0x1690>
 8001fcc:	d8800d17 	ldw	r2,52(sp)
 8001fd0:	d9400b17 	ldw	r5,44(sp)
 8001fd4:	40800015 	stw	r2,0(r8)
 8001fd8:	d8801d17 	ldw	r2,116(sp)
 8001fdc:	1947883a 	add	r3,r3,r5
 8001fe0:	41400115 	stw	r5,4(r8)
 8001fe4:	10800044 	addi	r2,r2,1
 8001fe8:	d8801d15 	stw	r2,116(sp)
 8001fec:	d8c01e15 	stw	r3,120(sp)
 8001ff0:	10800208 	cmpgei	r2,r2,8
 8001ff4:	1002ab1e 	bne	r2,zero,8002aa4 <___svfprintf_internal_r+0x1d84>
 8001ff8:	42000204 	addi	r8,r8,8
 8001ffc:	d8800817 	ldw	r2,32(sp)
 8002000:	d9400717 	ldw	r5,28(sp)
 8002004:	1105c83a 	sub	r2,r2,r4
 8002008:	2901320e 	bge	r5,r4,80024d4 <___svfprintf_internal_r+0x17b4>
 800200c:	1039883a 	mov	fp,r2
 8002010:	07000c0e 	bge	zero,fp,8002044 <___svfprintf_internal_r+0x1324>
 8002014:	d9000717 	ldw	r4,28(sp)
 8002018:	1f07883a 	add	r3,r3,fp
 800201c:	47000115 	stw	fp,4(r8)
 8002020:	8923883a 	add	r17,r17,r4
 8002024:	d9001d17 	ldw	r4,116(sp)
 8002028:	44400015 	stw	r17,0(r8)
 800202c:	d8c01e15 	stw	r3,120(sp)
 8002030:	21000044 	addi	r4,r4,1
 8002034:	d9001d15 	stw	r4,116(sp)
 8002038:	21000208 	cmpgei	r4,r4,8
 800203c:	2002ec1e 	bne	r4,zero,8002bf0 <___svfprintf_internal_r+0x1ed0>
 8002040:	42000204 	addi	r8,r8,8
 8002044:	e000010e 	bge	fp,zero,800204c <___svfprintf_internal_r+0x132c>
 8002048:	0039883a 	mov	fp,zero
 800204c:	1739c83a 	sub	fp,r2,fp
 8002050:	073ce70e 	bge	zero,fp,80013f0 <___svfprintf_internal_r+0x6d0>
 8002054:	03020074 	movhi	r12,2049
 8002058:	e1000450 	cmplti	r4,fp,17
 800205c:	63373284 	addi	r12,r12,-9014
 8002060:	d8801d17 	ldw	r2,116(sp)
 8002064:	2002791e 	bne	r4,zero,8002a4c <___svfprintf_internal_r+0x1d2c>
 8002068:	dc000715 	stw	r16,28(sp)
 800206c:	05400404 	movi	r21,16
 8002070:	dc400517 	ldw	r17,20(sp)
 8002074:	6021883a 	mov	r16,r12
 8002078:	00000406 	br	800208c <___svfprintf_internal_r+0x136c>
 800207c:	42000204 	addi	r8,r8,8
 8002080:	e73ffc04 	addi	fp,fp,-16
 8002084:	e1000448 	cmpgei	r4,fp,17
 8002088:	20026e26 	beq	r4,zero,8002a44 <___svfprintf_internal_r+0x1d24>
 800208c:	10800044 	addi	r2,r2,1
 8002090:	18c00404 	addi	r3,r3,16
 8002094:	44000015 	stw	r16,0(r8)
 8002098:	45400115 	stw	r21,4(r8)
 800209c:	d8c01e15 	stw	r3,120(sp)
 80020a0:	d8801d15 	stw	r2,116(sp)
 80020a4:	11000208 	cmpgei	r4,r2,8
 80020a8:	203ff426 	beq	r4,zero,800207c <___svfprintf_internal_r+0x135c>
 80020ac:	d9801c04 	addi	r6,sp,112
 80020b0:	980b883a 	mov	r5,r19
 80020b4:	8809883a 	mov	r4,r17
 80020b8:	80061640 	call	8006164 <__ssprint_r>
 80020bc:	103bd71e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 80020c0:	d8c01e17 	ldw	r3,120(sp)
 80020c4:	d8801d17 	ldw	r2,116(sp)
 80020c8:	b811883a 	mov	r8,r23
 80020cc:	003fec06 	br	8002080 <___svfprintf_internal_r+0x1360>
 80020d0:	9080004c 	andi	r2,r18,1
 80020d4:	103efc1e 	bne	r2,zero,8001cc8 <___svfprintf_internal_r+0xfa8>
 80020d8:	00800044 	movi	r2,1
 80020dc:	dd401d15 	stw	r21,116(sp)
 80020e0:	44400015 	stw	r17,0(r8)
 80020e4:	40800115 	stw	r2,4(r8)
 80020e8:	d8c01e15 	stw	r3,120(sp)
 80020ec:	ad400208 	cmpgei	r21,r21,8
 80020f0:	a800ff1e 	bne	r21,zero,80024f0 <___svfprintf_internal_r+0x17d0>
 80020f4:	52800084 	addi	r10,r10,2
 80020f8:	42000404 	addi	r8,r8,16
 80020fc:	003f2406 	br	8001d90 <___svfprintf_internal_r+0x1070>
 8002100:	02ff230e 	bge	zero,r11,8001d90 <___svfprintf_internal_r+0x1070>
 8002104:	58800450 	cmplti	r2,r11,17
 8002108:	03020074 	movhi	r12,2049
 800210c:	1003351e 	bne	r2,zero,8002de4 <___svfprintf_internal_r+0x20c4>
 8002110:	63373284 	addi	r12,r12,-9014
 8002114:	dd000715 	stw	r20,28(sp)
 8002118:	dc800e15 	stw	r18,56(sp)
 800211c:	e005883a 	mov	r2,fp
 8002120:	04400404 	movi	r17,16
 8002124:	b039883a 	mov	fp,r22
 8002128:	5825883a 	mov	r18,r11
 800212c:	802d883a 	mov	r22,r16
 8002130:	682b883a 	mov	r21,r13
 8002134:	dc000517 	ldw	r16,20(sp)
 8002138:	6029883a 	mov	r20,r12
 800213c:	00000506 	br	8002154 <___svfprintf_internal_r+0x1434>
 8002140:	10800204 	addi	r2,r2,8
 8002144:	94bffc04 	addi	r18,r18,-16
 8002148:	91000448 	cmpgei	r4,r18,17
 800214c:	20018e26 	beq	r4,zero,8002788 <___svfprintf_internal_r+0x1a68>
 8002150:	ad400044 	addi	r21,r21,1
 8002154:	18c00404 	addi	r3,r3,16
 8002158:	15000015 	stw	r20,0(r2)
 800215c:	14400115 	stw	r17,4(r2)
 8002160:	d8c01e15 	stw	r3,120(sp)
 8002164:	dd401d15 	stw	r21,116(sp)
 8002168:	a9000208 	cmpgei	r4,r21,8
 800216c:	203ff426 	beq	r4,zero,8002140 <___svfprintf_internal_r+0x1420>
 8002170:	d9801c04 	addi	r6,sp,112
 8002174:	980b883a 	mov	r5,r19
 8002178:	8009883a 	mov	r4,r16
 800217c:	80061640 	call	8006164 <__ssprint_r>
 8002180:	103ba61e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002184:	dd401d17 	ldw	r21,116(sp)
 8002188:	d8c01e17 	ldw	r3,120(sp)
 800218c:	b805883a 	mov	r2,r23
 8002190:	003fec06 	br	8002144 <___svfprintf_internal_r+0x1424>
 8002194:	d9000517 	ldw	r4,20(sp)
 8002198:	d9801c04 	addi	r6,sp,112
 800219c:	980b883a 	mov	r5,r19
 80021a0:	80061640 	call	8006164 <__ssprint_r>
 80021a4:	103b9d1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 80021a8:	d8c01e17 	ldw	r3,120(sp)
 80021ac:	b811883a 	mov	r8,r23
 80021b0:	003c8306 	br	80013c0 <___svfprintf_internal_r+0x6a0>
 80021b4:	002b883a 	mov	r21,zero
 80021b8:	003c0306 	br	80011c8 <___svfprintf_internal_r+0x4a8>
 80021bc:	b023883a 	mov	r17,r22
 80021c0:	003b1b06 	br	8000e30 <___svfprintf_internal_r+0x110>
 80021c4:	d9000517 	ldw	r4,20(sp)
 80021c8:	d9801c04 	addi	r6,sp,112
 80021cc:	980b883a 	mov	r5,r19
 80021d0:	80061640 	call	8006164 <__ssprint_r>
 80021d4:	103b911e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 80021d8:	d8c01e17 	ldw	r3,120(sp)
 80021dc:	dd401d17 	ldw	r21,116(sp)
 80021e0:	b839883a 	mov	fp,r23
 80021e4:	003eca06 	br	8001d10 <___svfprintf_internal_r+0xff0>
 80021e8:	d9000517 	ldw	r4,20(sp)
 80021ec:	d9801c04 	addi	r6,sp,112
 80021f0:	980b883a 	mov	r5,r19
 80021f4:	80061640 	call	8006164 <__ssprint_r>
 80021f8:	103b881e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 80021fc:	d8c01e17 	ldw	r3,120(sp)
 8002200:	dd401d17 	ldw	r21,116(sp)
 8002204:	b839883a 	mov	fp,r23
 8002208:	003eb606 	br	8001ce4 <___svfprintf_internal_r+0xfc4>
 800220c:	b823883a 	mov	r17,r23
 8002210:	003db806 	br	80018f4 <___svfprintf_internal_r+0xbd4>
 8002214:	d9000917 	ldw	r4,36(sp)
 8002218:	d9400a17 	ldw	r5,40(sp)
 800221c:	da000f15 	stw	r8,60(sp)
 8002220:	200d883a 	mov	r6,r4
 8002224:	280f883a 	mov	r7,r5
 8002228:	dac00e15 	stw	r11,56(sp)
 800222c:	db000715 	stw	r12,28(sp)
 8002230:	800b71c0 	call	800b71c <__unorddf2>
 8002234:	db000717 	ldw	r12,28(sp)
 8002238:	dac00e17 	ldw	r11,56(sp)
 800223c:	da000f17 	ldw	r8,60(sp)
 8002240:	1002dc1e 	bne	r2,zero,8002db4 <___svfprintf_internal_r+0x2094>
 8002244:	00fff7c4 	movi	r3,-33
 8002248:	e0c6703a 	and	r3,fp,r3
 800224c:	58bfffe0 	cmpeqi	r2,r11,-1
 8002250:	d8c00715 	stw	r3,28(sp)
 8002254:	1002641e 	bne	r2,zero,8002be8 <___svfprintf_internal_r+0x1ec8>
 8002258:	188011d8 	cmpnei	r2,r3,71
 800225c:	1000a126 	beq	r2,zero,80024e4 <___svfprintf_internal_r+0x17c4>
 8002260:	d8800a17 	ldw	r2,40(sp)
 8002264:	64804014 	ori	r18,r12,256
 8002268:	10021716 	blt	r2,zero,8002ac8 <___svfprintf_internal_r+0x1da8>
 800226c:	dd000a17 	ldw	r20,40(sp)
 8002270:	d8000e05 	stb	zero,56(sp)
 8002274:	e08019a0 	cmpeqi	r2,fp,102
 8002278:	d8800f15 	stw	r2,60(sp)
 800227c:	1001561e 	bne	r2,zero,80027d8 <___svfprintf_internal_r+0x1ab8>
 8002280:	e08011a0 	cmpeqi	r2,fp,70
 8002284:	1001541e 	bne	r2,zero,80027d8 <___svfprintf_internal_r+0x1ab8>
 8002288:	d8800717 	ldw	r2,28(sp)
 800228c:	da001215 	stw	r8,72(sp)
 8002290:	db001015 	stw	r12,64(sp)
 8002294:	10801158 	cmpnei	r2,r2,69
 8002298:	10022d26 	beq	r2,zero,8002b50 <___svfprintf_internal_r+0x1e30>
 800229c:	d8801a04 	addi	r2,sp,104
 80022a0:	d8800315 	stw	r2,12(sp)
 80022a4:	d9400917 	ldw	r5,36(sp)
 80022a8:	d8801704 	addi	r2,sp,92
 80022ac:	d9000517 	ldw	r4,20(sp)
 80022b0:	d8800215 	stw	r2,8(sp)
 80022b4:	d8801604 	addi	r2,sp,88
 80022b8:	dac00015 	stw	r11,0(sp)
 80022bc:	d8800115 	stw	r2,4(sp)
 80022c0:	01c00084 	movi	r7,2
 80022c4:	a00d883a 	mov	r6,r20
 80022c8:	dac00815 	stw	r11,32(sp)
 80022cc:	80030940 	call	8003094 <_dtoa_r>
 80022d0:	dac00817 	ldw	r11,32(sp)
 80022d4:	1023883a 	mov	r17,r2
 80022d8:	e08019d8 	cmpnei	r2,fp,103
 80022dc:	db001017 	ldw	r12,64(sp)
 80022e0:	da001217 	ldw	r8,72(sp)
 80022e4:	582b883a 	mov	r21,r11
 80022e8:	10022b1e 	bne	r2,zero,8002b98 <___svfprintf_internal_r+0x1e78>
 80022ec:	6080004c 	andi	r2,r12,1
 80022f0:	10022b1e 	bne	r2,zero,8002ba0 <___svfprintf_internal_r+0x1e80>
 80022f4:	d8c01617 	ldw	r3,88(sp)
 80022f8:	d8800717 	ldw	r2,28(sp)
 80022fc:	d8c00715 	stw	r3,28(sp)
 8002300:	d8c01a17 	ldw	r3,104(sp)
 8002304:	108011e0 	cmpeqi	r2,r2,71
 8002308:	1c47c83a 	sub	r3,r3,r17
 800230c:	d8c00815 	stw	r3,32(sp)
 8002310:	10017426 	beq	r2,zero,80028e4 <___svfprintf_internal_r+0x1bc4>
 8002314:	d8c00717 	ldw	r3,28(sp)
 8002318:	18bfff50 	cmplti	r2,r3,-3
 800231c:	1001701e 	bne	r2,zero,80028e0 <___svfprintf_internal_r+0x1bc0>
 8002320:	58c16f16 	blt	r11,r3,80028e0 <___svfprintf_internal_r+0x1bc0>
 8002324:	d8800717 	ldw	r2,28(sp)
 8002328:	d8c00817 	ldw	r3,32(sp)
 800232c:	10c23f16 	blt	r2,r3,8002c2c <___svfprintf_internal_r+0x1f0c>
 8002330:	6300004c 	andi	r12,r12,1
 8002334:	6002761e 	bne	r12,zero,8002d10 <___svfprintf_internal_r+0x1ff0>
 8002338:	1029883a 	mov	r20,r2
 800233c:	1000010e 	bge	r2,zero,8002344 <___svfprintf_internal_r+0x1624>
 8002340:	0029883a 	mov	r20,zero
 8002344:	dd400717 	ldw	r21,28(sp)
 8002348:	070019c4 	movi	fp,103
 800234c:	d8800e07 	ldb	r2,56(sp)
 8002350:	10021926 	beq	r2,zero,8002bb8 <___svfprintf_internal_r+0x1e98>
 8002354:	00800b44 	movi	r2,45
 8002358:	d8801545 	stb	r2,85(sp)
 800235c:	0017883a 	mov	r11,zero
 8002360:	003d6c06 	br	8001914 <___svfprintf_internal_r+0xbf4>
 8002364:	d9400417 	ldw	r5,16(sp)
 8002368:	20800017 	ldw	r2,0(r4)
 800236c:	d8c00615 	stw	r3,24(sp)
 8002370:	2809d7fa 	srai	r4,r5,31
 8002374:	11400015 	stw	r5,0(r2)
 8002378:	11000115 	stw	r4,4(r2)
 800237c:	003a8e06 	br	8000db8 <___svfprintf_internal_r+0x98>
 8002380:	00800c04 	movi	r2,48
 8002384:	d8801585 	stb	r2,86(sp)
 8002388:	df0015c5 	stb	fp,87(sp)
 800238c:	63000094 	ori	r12,r12,2
 8002390:	00800084 	movi	r2,2
 8002394:	003c8d06 	br	80015cc <___svfprintf_internal_r+0x8ac>
 8002398:	0421c83a 	sub	r16,zero,r16
 800239c:	d8800615 	stw	r2,24(sp)
 80023a0:	003b5c06 	br	8001114 <___svfprintf_internal_r+0x3f4>
 80023a4:	2039883a 	mov	fp,r4
 80023a8:	073ef716 	blt	zero,fp,8001f88 <___svfprintf_internal_r+0x1268>
 80023ac:	003f0006 	br	8001fb0 <___svfprintf_internal_r+0x1290>
 80023b0:	9080004c 	andi	r2,r18,1
 80023b4:	103f051e 	bne	r2,zero,8001fcc <___svfprintf_internal_r+0x12ac>
 80023b8:	d8800817 	ldw	r2,32(sp)
 80023bc:	d9400717 	ldw	r5,28(sp)
 80023c0:	1105c83a 	sub	r2,r2,r4
 80023c4:	2900430e 	bge	r5,r4,80024d4 <___svfprintf_internal_r+0x17b4>
 80023c8:	1039883a 	mov	fp,r2
 80023cc:	003f1d06 	br	8002044 <___svfprintf_internal_r+0x1324>
 80023d0:	d8c01e17 	ldw	r3,120(sp)
 80023d4:	003c0606 	br	80013f0 <___svfprintf_internal_r+0x6d0>
 80023d8:	d8800717 	ldw	r2,28(sp)
 80023dc:	0039883a 	mov	fp,zero
 80023e0:	1739c83a 	sub	fp,r2,fp
 80023e4:	073ef60e 	bge	zero,fp,8001fc0 <___svfprintf_internal_r+0x12a0>
 80023e8:	00001106 	br	8002430 <___svfprintf_internal_r+0x1710>
 80023ec:	8809883a 	mov	r4,r17
 80023f0:	8000c880 	call	8000c88 <strlen>
 80023f4:	102b883a 	mov	r21,r2
 80023f8:	1029883a 	mov	r20,r2
 80023fc:	dc800615 	stw	r18,24(sp)
 8002400:	db000717 	ldw	r12,28(sp)
 8002404:	da000e17 	ldw	r8,56(sp)
 8002408:	003bc306 	br	8001318 <___svfprintf_internal_r+0x5f8>
 800240c:	d9000517 	ldw	r4,20(sp)
 8002410:	01401004 	movi	r5,64
 8002414:	800477c0 	call	800477c <_malloc_r>
 8002418:	98800015 	stw	r2,0(r19)
 800241c:	98800415 	stw	r2,16(r19)
 8002420:	10028926 	beq	r2,zero,8002e48 <___svfprintf_internal_r+0x2128>
 8002424:	00801004 	movi	r2,64
 8002428:	98800515 	stw	r2,20(r19)
 800242c:	003a5606 	br	8000d88 <___svfprintf_internal_r+0x68>
 8002430:	03020074 	movhi	r12,2049
 8002434:	e1000450 	cmplti	r4,fp,17
 8002438:	63373284 	addi	r12,r12,-9014
 800243c:	d8801d17 	ldw	r2,116(sp)
 8002440:	2001761e 	bne	r4,zero,8002a1c <___svfprintf_internal_r+0x1cfc>
 8002444:	dc800e15 	stw	r18,56(sp)
 8002448:	dc400f15 	stw	r17,60(sp)
 800244c:	05400404 	movi	r21,16
 8002450:	e023883a 	mov	r17,fp
 8002454:	6025883a 	mov	r18,r12
 8002458:	b039883a 	mov	fp,r22
 800245c:	802d883a 	mov	r22,r16
 8002460:	dc000517 	ldw	r16,20(sp)
 8002464:	00000406 	br	8002478 <___svfprintf_internal_r+0x1758>
 8002468:	42000204 	addi	r8,r8,8
 800246c:	8c7ffc04 	addi	r17,r17,-16
 8002470:	89000448 	cmpgei	r4,r17,17
 8002474:	20016326 	beq	r4,zero,8002a04 <___svfprintf_internal_r+0x1ce4>
 8002478:	10800044 	addi	r2,r2,1
 800247c:	18c00404 	addi	r3,r3,16
 8002480:	44800015 	stw	r18,0(r8)
 8002484:	45400115 	stw	r21,4(r8)
 8002488:	d8c01e15 	stw	r3,120(sp)
 800248c:	d8801d15 	stw	r2,116(sp)
 8002490:	11000208 	cmpgei	r4,r2,8
 8002494:	203ff426 	beq	r4,zero,8002468 <___svfprintf_internal_r+0x1748>
 8002498:	d9801c04 	addi	r6,sp,112
 800249c:	980b883a 	mov	r5,r19
 80024a0:	8009883a 	mov	r4,r16
 80024a4:	80061640 	call	8006164 <__ssprint_r>
 80024a8:	103adc1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 80024ac:	d8c01e17 	ldw	r3,120(sp)
 80024b0:	d8801d17 	ldw	r2,116(sp)
 80024b4:	b811883a 	mov	r8,r23
 80024b8:	003fec06 	br	800246c <___svfprintf_internal_r+0x174c>
 80024bc:	d8800617 	ldw	r2,24(sp)
 80024c0:	10800017 	ldw	r2,0(r2)
 80024c4:	d8c00615 	stw	r3,24(sp)
 80024c8:	d8c00417 	ldw	r3,16(sp)
 80024cc:	10c00015 	stw	r3,0(r2)
 80024d0:	003a3906 	br	8000db8 <___svfprintf_internal_r+0x98>
 80024d4:	d9000817 	ldw	r4,32(sp)
 80024d8:	d9400717 	ldw	r5,28(sp)
 80024dc:	2179c83a 	sub	fp,r4,r5
 80024e0:	003ecb06 	br	8002010 <___svfprintf_internal_r+0x12f0>
 80024e4:	583f5e1e 	bne	r11,zero,8002260 <___svfprintf_internal_r+0x1540>
 80024e8:	02c00044 	movi	r11,1
 80024ec:	003f5c06 	br	8002260 <___svfprintf_internal_r+0x1540>
 80024f0:	d9000517 	ldw	r4,20(sp)
 80024f4:	d9801c04 	addi	r6,sp,112
 80024f8:	980b883a 	mov	r5,r19
 80024fc:	80061640 	call	8006164 <__ssprint_r>
 8002500:	103ac61e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002504:	da801d17 	ldw	r10,116(sp)
 8002508:	d8c01e17 	ldw	r3,120(sp)
 800250c:	da002b04 	addi	r8,sp,172
 8002510:	52800044 	addi	r10,r10,1
 8002514:	b839883a 	mov	fp,r23
 8002518:	003e1d06 	br	8001d90 <___svfprintf_internal_r+0x1070>
 800251c:	d8801d17 	ldw	r2,116(sp)
 8002520:	01420074 	movhi	r5,2049
 8002524:	29773204 	addi	r5,r5,-9016
 8002528:	10800044 	addi	r2,r2,1
 800252c:	18c00044 	addi	r3,r3,1
 8002530:	41400015 	stw	r5,0(r8)
 8002534:	01400044 	movi	r5,1
 8002538:	d8801d15 	stw	r2,116(sp)
 800253c:	41400115 	stw	r5,4(r8)
 8002540:	d8c01e15 	stw	r3,120(sp)
 8002544:	10800208 	cmpgei	r2,r2,8
 8002548:	10014d1e 	bne	r2,zero,8002a80 <___svfprintf_internal_r+0x1d60>
 800254c:	42000204 	addi	r8,r8,8
 8002550:	2000541e 	bne	r4,zero,80026a4 <___svfprintf_internal_r+0x1984>
 8002554:	d9000817 	ldw	r4,32(sp)
 8002558:	9080004c 	andi	r2,r18,1
 800255c:	1104b03a 	or	r2,r2,r4
 8002560:	103ba326 	beq	r2,zero,80013f0 <___svfprintf_internal_r+0x6d0>
 8002564:	d8800d17 	ldw	r2,52(sp)
 8002568:	d9000b17 	ldw	r4,44(sp)
 800256c:	40800015 	stw	r2,0(r8)
 8002570:	d8801d17 	ldw	r2,116(sp)
 8002574:	20c7883a 	add	r3,r4,r3
 8002578:	41000115 	stw	r4,4(r8)
 800257c:	10800044 	addi	r2,r2,1
 8002580:	d8c01e15 	stw	r3,120(sp)
 8002584:	d8801d15 	stw	r2,116(sp)
 8002588:	11000208 	cmpgei	r4,r2,8
 800258c:	2001581e 	bne	r4,zero,8002af0 <___svfprintf_internal_r+0x1dd0>
 8002590:	42000204 	addi	r8,r8,8
 8002594:	d9000817 	ldw	r4,32(sp)
 8002598:	10800044 	addi	r2,r2,1
 800259c:	d8801d15 	stw	r2,116(sp)
 80025a0:	20c7883a 	add	r3,r4,r3
 80025a4:	44400015 	stw	r17,0(r8)
 80025a8:	41000115 	stw	r4,4(r8)
 80025ac:	d8c01e15 	stw	r3,120(sp)
 80025b0:	10800208 	cmpgei	r2,r2,8
 80025b4:	103b8d26 	beq	r2,zero,80013ec <___svfprintf_internal_r+0x6cc>
 80025b8:	003dfe06 	br	8001db4 <___svfprintf_internal_r+0x1094>
 80025bc:	d9000517 	ldw	r4,20(sp)
 80025c0:	d9801c04 	addi	r6,sp,112
 80025c4:	980b883a 	mov	r5,r19
 80025c8:	dac01015 	stw	r11,64(sp)
 80025cc:	db400f15 	stw	r13,60(sp)
 80025d0:	db800e15 	stw	r14,56(sp)
 80025d4:	80061640 	call	8006164 <__ssprint_r>
 80025d8:	103a901e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 80025dc:	d8c01e17 	ldw	r3,120(sp)
 80025e0:	b811883a 	mov	r8,r23
 80025e4:	dac01017 	ldw	r11,64(sp)
 80025e8:	db400f17 	ldw	r13,60(sp)
 80025ec:	db800e17 	ldw	r14,56(sp)
 80025f0:	003b5406 	br	8001344 <___svfprintf_internal_r+0x624>
 80025f4:	d9000517 	ldw	r4,20(sp)
 80025f8:	d9801c04 	addi	r6,sp,112
 80025fc:	980b883a 	mov	r5,r19
 8002600:	80061640 	call	8006164 <__ssprint_r>
 8002604:	103a851e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002608:	b811883a 	mov	r8,r23
 800260c:	003d0006 	br	8001a10 <___svfprintf_internal_r+0xcf0>
 8002610:	d9000517 	ldw	r4,20(sp)
 8002614:	d9801c04 	addi	r6,sp,112
 8002618:	980b883a 	mov	r5,r19
 800261c:	dac00e15 	stw	r11,56(sp)
 8002620:	80061640 	call	8006164 <__ssprint_r>
 8002624:	103a7d1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002628:	d8c01e17 	ldw	r3,120(sp)
 800262c:	b811883a 	mov	r8,r23
 8002630:	dac00e17 	ldw	r11,56(sp)
 8002634:	003b6006 	br	80013b8 <___svfprintf_internal_r+0x698>
 8002638:	10c00060 	cmpeqi	r3,r2,1
 800263c:	9019883a 	mov	r12,r18
 8002640:	183c5026 	beq	r3,zero,8001784 <___svfprintf_internal_r+0xa64>
 8002644:	003ca606 	br	80018e0 <___svfprintf_internal_r+0xbc0>
 8002648:	b7000043 	ldbu	fp,1(r22)
 800264c:	63000814 	ori	r12,r12,32
 8002650:	b5800044 	addi	r22,r22,1
 8002654:	e2803fcc 	andi	r10,fp,255
 8002658:	5280201c 	xori	r10,r10,128
 800265c:	52bfe004 	addi	r10,r10,-128
 8002660:	0039fb06 	br	8000e50 <___svfprintf_internal_r+0x130>
 8002664:	d9000517 	ldw	r4,20(sp)
 8002668:	d9801c04 	addi	r6,sp,112
 800266c:	980b883a 	mov	r5,r19
 8002670:	80061640 	call	8006164 <__ssprint_r>
 8002674:	103a691e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002678:	d8c01e17 	ldw	r3,120(sp)
 800267c:	b811883a 	mov	r8,r23
 8002680:	003cf506 	br	8001a58 <___svfprintf_internal_r+0xd38>
 8002684:	588001f0 	cmpltui	r2,r11,7
 8002688:	582b883a 	mov	r21,r11
 800268c:	10011426 	beq	r2,zero,8002ae0 <___svfprintf_internal_r+0x1dc0>
 8002690:	04420074 	movhi	r17,2049
 8002694:	a829883a 	mov	r20,r21
 8002698:	dc800615 	stw	r18,24(sp)
 800269c:	8c773004 	addi	r17,r17,-9024
 80026a0:	003b1d06 	br	8001318 <___svfprintf_internal_r+0x5f8>
 80026a4:	d8800d17 	ldw	r2,52(sp)
 80026a8:	d9400b17 	ldw	r5,44(sp)
 80026ac:	40800015 	stw	r2,0(r8)
 80026b0:	d8801d17 	ldw	r2,116(sp)
 80026b4:	28c7883a 	add	r3,r5,r3
 80026b8:	41400115 	stw	r5,4(r8)
 80026bc:	10800044 	addi	r2,r2,1
 80026c0:	d8c01e15 	stw	r3,120(sp)
 80026c4:	d8801d15 	stw	r2,116(sp)
 80026c8:	11400208 	cmpgei	r5,r2,8
 80026cc:	2801081e 	bne	r5,zero,8002af0 <___svfprintf_internal_r+0x1dd0>
 80026d0:	42000204 	addi	r8,r8,8
 80026d4:	203faf0e 	bge	r4,zero,8002594 <___svfprintf_internal_r+0x1874>
 80026d8:	03020074 	movhi	r12,2049
 80026dc:	217ffc08 	cmpgei	r5,r4,-16
 80026e0:	63373284 	addi	r12,r12,-9014
 80026e4:	012bc83a 	sub	r21,zero,r4
 80026e8:	2801751e 	bne	r5,zero,8002cc0 <___svfprintf_internal_r+0x1fa0>
 80026ec:	8009883a 	mov	r4,r16
 80026f0:	dc400715 	stw	r17,28(sp)
 80026f4:	a821883a 	mov	r16,r21
 80026f8:	07000404 	movi	fp,16
 80026fc:	6023883a 	mov	r17,r12
 8002700:	202b883a 	mov	r21,r4
 8002704:	00000406 	br	8002718 <___svfprintf_internal_r+0x19f8>
 8002708:	42000204 	addi	r8,r8,8
 800270c:	843ffc04 	addi	r16,r16,-16
 8002710:	81000448 	cmpgei	r4,r16,17
 8002714:	20016526 	beq	r4,zero,8002cac <___svfprintf_internal_r+0x1f8c>
 8002718:	10800044 	addi	r2,r2,1
 800271c:	18c00404 	addi	r3,r3,16
 8002720:	44400015 	stw	r17,0(r8)
 8002724:	47000115 	stw	fp,4(r8)
 8002728:	d8c01e15 	stw	r3,120(sp)
 800272c:	d8801d15 	stw	r2,116(sp)
 8002730:	11000208 	cmpgei	r4,r2,8
 8002734:	203ff426 	beq	r4,zero,8002708 <___svfprintf_internal_r+0x19e8>
 8002738:	d9000517 	ldw	r4,20(sp)
 800273c:	d9801c04 	addi	r6,sp,112
 8002740:	980b883a 	mov	r5,r19
 8002744:	80061640 	call	8006164 <__ssprint_r>
 8002748:	103a341e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 800274c:	d8c01e17 	ldw	r3,120(sp)
 8002750:	d8801d17 	ldw	r2,116(sp)
 8002754:	b811883a 	mov	r8,r23
 8002758:	003fec06 	br	800270c <___svfprintf_internal_r+0x19ec>
 800275c:	8019883a 	mov	r12,r16
 8002760:	dc000717 	ldw	r16,28(sp)
 8002764:	10800044 	addi	r2,r2,1
 8002768:	1c47883a 	add	r3,r3,r17
 800276c:	d8801d15 	stw	r2,116(sp)
 8002770:	43000015 	stw	r12,0(r8)
 8002774:	44400115 	stw	r17,4(r8)
 8002778:	d8c01e15 	stw	r3,120(sp)
 800277c:	10800208 	cmpgei	r2,r2,8
 8002780:	103b1a26 	beq	r2,zero,80013ec <___svfprintf_internal_r+0x6cc>
 8002784:	003d8b06 	br	8001db4 <___svfprintf_internal_r+0x1094>
 8002788:	9017883a 	mov	r11,r18
 800278c:	a019883a 	mov	r12,r20
 8002790:	dc800e17 	ldw	r18,56(sp)
 8002794:	dd000717 	ldw	r20,28(sp)
 8002798:	b021883a 	mov	r16,r22
 800279c:	aa800044 	addi	r10,r21,1
 80027a0:	e02d883a 	mov	r22,fp
 80027a4:	1039883a 	mov	fp,r2
 80027a8:	10800204 	addi	r2,r2,8
 80027ac:	1ac7883a 	add	r3,r3,r11
 80027b0:	e3000015 	stw	r12,0(fp)
 80027b4:	e2c00115 	stw	r11,4(fp)
 80027b8:	d8c01e15 	stw	r3,120(sp)
 80027bc:	da801d15 	stw	r10,116(sp)
 80027c0:	51000208 	cmpgei	r4,r10,8
 80027c4:	203f4a1e 	bne	r4,zero,80024f0 <___svfprintf_internal_r+0x17d0>
 80027c8:	52800044 	addi	r10,r10,1
 80027cc:	12000204 	addi	r8,r2,8
 80027d0:	1039883a 	mov	fp,r2
 80027d4:	003d6e06 	br	8001d90 <___svfprintf_internal_r+0x1070>
 80027d8:	d8801a04 	addi	r2,sp,104
 80027dc:	d8800315 	stw	r2,12(sp)
 80027e0:	d9400917 	ldw	r5,36(sp)
 80027e4:	d8801704 	addi	r2,sp,92
 80027e8:	d9000517 	ldw	r4,20(sp)
 80027ec:	d8800215 	stw	r2,8(sp)
 80027f0:	d8801604 	addi	r2,sp,88
 80027f4:	dac00015 	stw	r11,0(sp)
 80027f8:	d8800115 	stw	r2,4(sp)
 80027fc:	01c000c4 	movi	r7,3
 8002800:	a00d883a 	mov	r6,r20
 8002804:	da001215 	stw	r8,72(sp)
 8002808:	db001015 	stw	r12,64(sp)
 800280c:	dac00815 	stw	r11,32(sp)
 8002810:	80030940 	call	8003094 <_dtoa_r>
 8002814:	dac00817 	ldw	r11,32(sp)
 8002818:	1023883a 	mov	r17,r2
 800281c:	db001017 	ldw	r12,64(sp)
 8002820:	12eb883a 	add	r21,r2,r11
 8002824:	88800007 	ldb	r2,0(r17)
 8002828:	da001217 	ldw	r8,72(sp)
 800282c:	10800c20 	cmpeqi	r2,r2,48
 8002830:	10013e1e 	bne	r2,zero,8002d2c <___svfprintf_internal_r+0x200c>
 8002834:	d8801617 	ldw	r2,88(sp)
 8002838:	a8ab883a 	add	r21,r21,r2
 800283c:	d9000917 	ldw	r4,36(sp)
 8002840:	000d883a 	mov	r6,zero
 8002844:	000f883a 	mov	r7,zero
 8002848:	a00b883a 	mov	r5,r20
 800284c:	da001215 	stw	r8,72(sp)
 8002850:	dac01015 	stw	r11,64(sp)
 8002854:	db000815 	stw	r12,32(sp)
 8002858:	800a3700 	call	800a370 <__eqdf2>
 800285c:	db000817 	ldw	r12,32(sp)
 8002860:	dac01017 	ldw	r11,64(sp)
 8002864:	da001217 	ldw	r8,72(sp)
 8002868:	10009b26 	beq	r2,zero,8002ad8 <___svfprintf_internal_r+0x1db8>
 800286c:	d8801a17 	ldw	r2,104(sp)
 8002870:	01000c04 	movi	r4,48
 8002874:	1540052e 	bgeu	r2,r21,800288c <___svfprintf_internal_r+0x1b6c>
 8002878:	10c00044 	addi	r3,r2,1
 800287c:	d8c01a15 	stw	r3,104(sp)
 8002880:	11000005 	stb	r4,0(r2)
 8002884:	d8801a17 	ldw	r2,104(sp)
 8002888:	157ffb36 	bltu	r2,r21,8002878 <___svfprintf_internal_r+0x1b58>
 800288c:	1445c83a 	sub	r2,r2,r17
 8002890:	d8c00717 	ldw	r3,28(sp)
 8002894:	d8800815 	stw	r2,32(sp)
 8002898:	d8801617 	ldw	r2,88(sp)
 800289c:	18c011d8 	cmpnei	r3,r3,71
 80028a0:	d8800715 	stw	r2,28(sp)
 80028a4:	183e9b26 	beq	r3,zero,8002314 <___svfprintf_internal_r+0x15f4>
 80028a8:	d8800f17 	ldw	r2,60(sp)
 80028ac:	10000d26 	beq	r2,zero,80028e4 <___svfprintf_internal_r+0x1bc4>
 80028b0:	d8c00717 	ldw	r3,28(sp)
 80028b4:	6080004c 	andi	r2,r12,1
 80028b8:	12c4b03a 	or	r2,r2,r11
 80028bc:	00c0ba0e 	bge	zero,r3,8002ba8 <___svfprintf_internal_r+0x1e88>
 80028c0:	1001381e 	bne	r2,zero,8002da4 <___svfprintf_internal_r+0x2084>
 80028c4:	dd400717 	ldw	r21,28(sp)
 80028c8:	a829883a 	mov	r20,r21
 80028cc:	003e9f06 	br	800234c <___svfprintf_internal_r+0x162c>
 80028d0:	d8800615 	stw	r2,24(sp)
 80028d4:	002b883a 	mov	r21,zero
 80028d8:	00800044 	movi	r2,1
 80028dc:	003b3b06 	br	80015cc <___svfprintf_internal_r+0x8ac>
 80028e0:	e73fff84 	addi	fp,fp,-2
 80028e4:	d8800717 	ldw	r2,28(sp)
 80028e8:	df001845 	stb	fp,97(sp)
 80028ec:	157fffc4 	addi	r21,r2,-1
 80028f0:	dd401615 	stw	r21,88(sp)
 80028f4:	a8009116 	blt	r21,zero,8002b3c <___svfprintf_internal_r+0x1e1c>
 80028f8:	00800ac4 	movi	r2,43
 80028fc:	d8801885 	stb	r2,98(sp)
 8002900:	a8800290 	cmplti	r2,r21,10
 8002904:	1001191e 	bne	r2,zero,8002d6c <___svfprintf_internal_r+0x204c>
 8002908:	dc000f15 	stw	r16,60(sp)
 800290c:	dd001bc4 	addi	r20,sp,111
 8002910:	a821883a 	mov	r16,r21
 8002914:	db000715 	stw	r12,28(sp)
 8002918:	982b883a 	mov	r21,r19
 800291c:	4027883a 	mov	r19,r8
 8002920:	00000206 	br	800292c <___svfprintf_internal_r+0x1c0c>
 8002924:	2029883a 	mov	r20,r4
 8002928:	1021883a 	mov	r16,r2
 800292c:	8009883a 	mov	r4,r16
 8002930:	01400284 	movi	r5,10
 8002934:	80009fc0 	call	80009fc <__modsi3>
 8002938:	10800c04 	addi	r2,r2,48
 800293c:	8009883a 	mov	r4,r16
 8002940:	a0bfffc5 	stb	r2,-1(r20)
 8002944:	01400284 	movi	r5,10
 8002948:	800097c0 	call	800097c <__divsi3>
 800294c:	80c01908 	cmpgei	r3,r16,100
 8002950:	a13fffc4 	addi	r4,r20,-1
 8002954:	183ff31e 	bne	r3,zero,8002924 <___svfprintf_internal_r+0x1c04>
 8002958:	10800c04 	addi	r2,r2,48
 800295c:	20bfffc5 	stb	r2,-1(r4)
 8002960:	a0ffff84 	addi	r3,r20,-2
 8002964:	d9001bc4 	addi	r4,sp,111
 8002968:	9811883a 	mov	r8,r19
 800296c:	db000717 	ldw	r12,28(sp)
 8002970:	dc000f17 	ldw	r16,60(sp)
 8002974:	a827883a 	mov	r19,r21
 8002978:	1901242e 	bgeu	r3,r4,8002e0c <___svfprintf_internal_r+0x20ec>
 800297c:	d90018c4 	addi	r4,sp,99
 8002980:	00000106 	br	8002988 <___svfprintf_internal_r+0x1c68>
 8002984:	18800003 	ldbu	r2,0(r3)
 8002988:	21000044 	addi	r4,r4,1
 800298c:	20bfffc5 	stb	r2,-1(r4)
 8002990:	18c00044 	addi	r3,r3,1
 8002994:	d8801bc4 	addi	r2,sp,111
 8002998:	18bffa1e 	bne	r3,r2,8002984 <___svfprintf_internal_r+0x1c64>
 800299c:	d8801c44 	addi	r2,sp,113
 80029a0:	d8c018c4 	addi	r3,sp,99
 80029a4:	1505c83a 	sub	r2,r2,r20
 80029a8:	1885883a 	add	r2,r3,r2
 80029ac:	d8c01844 	addi	r3,sp,97
 80029b0:	10c5c83a 	sub	r2,r2,r3
 80029b4:	d8801115 	stw	r2,68(sp)
 80029b8:	d8c00817 	ldw	r3,32(sp)
 80029bc:	d9001117 	ldw	r4,68(sp)
 80029c0:	18800088 	cmpgei	r2,r3,2
 80029c4:	192b883a 	add	r21,r3,r4
 80029c8:	1000ef26 	beq	r2,zero,8002d88 <___svfprintf_internal_r+0x2068>
 80029cc:	d8800b17 	ldw	r2,44(sp)
 80029d0:	a8ab883a 	add	r21,r21,r2
 80029d4:	a829883a 	mov	r20,r21
 80029d8:	a800010e 	bge	r21,zero,80029e0 <___svfprintf_internal_r+0x1cc0>
 80029dc:	0029883a 	mov	r20,zero
 80029e0:	d8000715 	stw	zero,28(sp)
 80029e4:	003e5906 	br	800234c <___svfprintf_internal_r+0x162c>
 80029e8:	04420074 	movhi	r17,2049
 80029ec:	8c772204 	addi	r17,r17,-9080
 80029f0:	003b4406 	br	8001704 <___svfprintf_internal_r+0x9e4>
 80029f4:	d8800615 	stw	r2,24(sp)
 80029f8:	002b883a 	mov	r21,zero
 80029fc:	0005883a 	mov	r2,zero
 8002a00:	003af206 	br	80015cc <___svfprintf_internal_r+0x8ac>
 8002a04:	b021883a 	mov	r16,r22
 8002a08:	9019883a 	mov	r12,r18
 8002a0c:	e02d883a 	mov	r22,fp
 8002a10:	dc800e17 	ldw	r18,56(sp)
 8002a14:	8839883a 	mov	fp,r17
 8002a18:	dc400f17 	ldw	r17,60(sp)
 8002a1c:	10800044 	addi	r2,r2,1
 8002a20:	1f07883a 	add	r3,r3,fp
 8002a24:	d8801d15 	stw	r2,116(sp)
 8002a28:	43000015 	stw	r12,0(r8)
 8002a2c:	47000115 	stw	fp,4(r8)
 8002a30:	d8c01e15 	stw	r3,120(sp)
 8002a34:	10800208 	cmpgei	r2,r2,8
 8002a38:	1000381e 	bne	r2,zero,8002b1c <___svfprintf_internal_r+0x1dfc>
 8002a3c:	42000204 	addi	r8,r8,8
 8002a40:	003d5f06 	br	8001fc0 <___svfprintf_internal_r+0x12a0>
 8002a44:	8019883a 	mov	r12,r16
 8002a48:	dc000717 	ldw	r16,28(sp)
 8002a4c:	10800044 	addi	r2,r2,1
 8002a50:	1f07883a 	add	r3,r3,fp
 8002a54:	d8801d15 	stw	r2,116(sp)
 8002a58:	43000015 	stw	r12,0(r8)
 8002a5c:	47000115 	stw	fp,4(r8)
 8002a60:	d8c01e15 	stw	r3,120(sp)
 8002a64:	10800208 	cmpgei	r2,r2,8
 8002a68:	103a6026 	beq	r2,zero,80013ec <___svfprintf_internal_r+0x6cc>
 8002a6c:	003cd106 	br	8001db4 <___svfprintf_internal_r+0x1094>
 8002a70:	00800b44 	movi	r2,45
 8002a74:	d8801545 	stb	r2,85(sp)
 8002a78:	03400b44 	movi	r13,45
 8002a7c:	003b1d06 	br	80016f4 <___svfprintf_internal_r+0x9d4>
 8002a80:	d9000517 	ldw	r4,20(sp)
 8002a84:	d9801c04 	addi	r6,sp,112
 8002a88:	980b883a 	mov	r5,r19
 8002a8c:	80061640 	call	8006164 <__ssprint_r>
 8002a90:	1039621e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002a94:	d9001617 	ldw	r4,88(sp)
 8002a98:	d8c01e17 	ldw	r3,120(sp)
 8002a9c:	b811883a 	mov	r8,r23
 8002aa0:	003eab06 	br	8002550 <___svfprintf_internal_r+0x1830>
 8002aa4:	d9000517 	ldw	r4,20(sp)
 8002aa8:	d9801c04 	addi	r6,sp,112
 8002aac:	980b883a 	mov	r5,r19
 8002ab0:	80061640 	call	8006164 <__ssprint_r>
 8002ab4:	1039591e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002ab8:	d9001617 	ldw	r4,88(sp)
 8002abc:	d8c01e17 	ldw	r3,120(sp)
 8002ac0:	b811883a 	mov	r8,r23
 8002ac4:	003d4d06 	br	8001ffc <___svfprintf_internal_r+0x12dc>
 8002ac8:	1520003c 	xorhi	r20,r2,32768
 8002acc:	00800b44 	movi	r2,45
 8002ad0:	d8800e05 	stb	r2,56(sp)
 8002ad4:	003de706 	br	8002274 <___svfprintf_internal_r+0x1554>
 8002ad8:	a805883a 	mov	r2,r21
 8002adc:	003f6b06 	br	800288c <___svfprintf_internal_r+0x1b6c>
 8002ae0:	05400184 	movi	r21,6
 8002ae4:	003eea06 	br	8002690 <___svfprintf_internal_r+0x1970>
 8002ae8:	d9401545 	stb	r5,85(sp)
 8002aec:	00396b06 	br	800109c <___svfprintf_internal_r+0x37c>
 8002af0:	d9000517 	ldw	r4,20(sp)
 8002af4:	d9801c04 	addi	r6,sp,112
 8002af8:	980b883a 	mov	r5,r19
 8002afc:	80061640 	call	8006164 <__ssprint_r>
 8002b00:	1039461e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002b04:	d9001617 	ldw	r4,88(sp)
 8002b08:	d8c01e17 	ldw	r3,120(sp)
 8002b0c:	d8801d17 	ldw	r2,116(sp)
 8002b10:	b811883a 	mov	r8,r23
 8002b14:	203e9f0e 	bge	r4,zero,8002594 <___svfprintf_internal_r+0x1874>
 8002b18:	003eef06 	br	80026d8 <___svfprintf_internal_r+0x19b8>
 8002b1c:	d9000517 	ldw	r4,20(sp)
 8002b20:	d9801c04 	addi	r6,sp,112
 8002b24:	980b883a 	mov	r5,r19
 8002b28:	80061640 	call	8006164 <__ssprint_r>
 8002b2c:	10393b1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002b30:	d8c01e17 	ldw	r3,120(sp)
 8002b34:	b811883a 	mov	r8,r23
 8002b38:	003d2106 	br	8001fc0 <___svfprintf_internal_r+0x12a0>
 8002b3c:	00c00044 	movi	r3,1
 8002b40:	18abc83a 	sub	r21,r3,r2
 8002b44:	00800b44 	movi	r2,45
 8002b48:	d8801885 	stb	r2,98(sp)
 8002b4c:	003f6c06 	br	8002900 <___svfprintf_internal_r+0x1be0>
 8002b50:	d8801a04 	addi	r2,sp,104
 8002b54:	d8800315 	stw	r2,12(sp)
 8002b58:	d9400917 	ldw	r5,36(sp)
 8002b5c:	d8801704 	addi	r2,sp,92
 8002b60:	d9000517 	ldw	r4,20(sp)
 8002b64:	5d400044 	addi	r21,r11,1
 8002b68:	d8800215 	stw	r2,8(sp)
 8002b6c:	d8801604 	addi	r2,sp,88
 8002b70:	d8800115 	stw	r2,4(sp)
 8002b74:	dd400015 	stw	r21,0(sp)
 8002b78:	01c00084 	movi	r7,2
 8002b7c:	a00d883a 	mov	r6,r20
 8002b80:	dac00815 	stw	r11,32(sp)
 8002b84:	80030940 	call	8003094 <_dtoa_r>
 8002b88:	dac00817 	ldw	r11,32(sp)
 8002b8c:	db001017 	ldw	r12,64(sp)
 8002b90:	da001217 	ldw	r8,72(sp)
 8002b94:	1023883a 	mov	r17,r2
 8002b98:	e08011d8 	cmpnei	r2,fp,71
 8002b9c:	103dd326 	beq	r2,zero,80022ec <___svfprintf_internal_r+0x15cc>
 8002ba0:	8d6b883a 	add	r21,r17,r21
 8002ba4:	003f2506 	br	800283c <___svfprintf_internal_r+0x1b1c>
 8002ba8:	10008a1e 	bne	r2,zero,8002dd4 <___svfprintf_internal_r+0x20b4>
 8002bac:	05000044 	movi	r20,1
 8002bb0:	05400044 	movi	r21,1
 8002bb4:	003de506 	br	800234c <___svfprintf_internal_r+0x162c>
 8002bb8:	db401543 	ldbu	r13,85(sp)
 8002bbc:	0017883a 	mov	r11,zero
 8002bc0:	003b5006 	br	8001904 <___svfprintf_internal_r+0xbe4>
 8002bc4:	d9000517 	ldw	r4,20(sp)
 8002bc8:	d9801c04 	addi	r6,sp,112
 8002bcc:	980b883a 	mov	r5,r19
 8002bd0:	80061640 	call	8006164 <__ssprint_r>
 8002bd4:	1039111e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002bd8:	d8c01e17 	ldw	r3,120(sp)
 8002bdc:	b811883a 	mov	r8,r23
 8002be0:	e03cf40e 	bge	fp,zero,8001fb4 <___svfprintf_internal_r+0x1294>
 8002be4:	003dfc06 	br	80023d8 <___svfprintf_internal_r+0x16b8>
 8002be8:	02c00184 	movi	r11,6
 8002bec:	003d9c06 	br	8002260 <___svfprintf_internal_r+0x1540>
 8002bf0:	d9000517 	ldw	r4,20(sp)
 8002bf4:	d9801c04 	addi	r6,sp,112
 8002bf8:	980b883a 	mov	r5,r19
 8002bfc:	80061640 	call	8006164 <__ssprint_r>
 8002c00:	1039061e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002c04:	d8801617 	ldw	r2,88(sp)
 8002c08:	d9000817 	ldw	r4,32(sp)
 8002c0c:	d8c01e17 	ldw	r3,120(sp)
 8002c10:	b811883a 	mov	r8,r23
 8002c14:	2085c83a 	sub	r2,r4,r2
 8002c18:	003d0a06 	br	8002044 <___svfprintf_internal_r+0x1324>
 8002c1c:	5829883a 	mov	r20,r11
 8002c20:	dc800615 	stw	r18,24(sp)
 8002c24:	582b883a 	mov	r21,r11
 8002c28:	0039bb06 	br	8001318 <___svfprintf_internal_r+0x5f8>
 8002c2c:	d8800817 	ldw	r2,32(sp)
 8002c30:	d8c00b17 	ldw	r3,44(sp)
 8002c34:	10eb883a 	add	r21,r2,r3
 8002c38:	d8800717 	ldw	r2,28(sp)
 8002c3c:	00800316 	blt	zero,r2,8002c4c <___svfprintf_internal_r+0x1f2c>
 8002c40:	d8800717 	ldw	r2,28(sp)
 8002c44:	a8b9c83a 	sub	fp,r21,r2
 8002c48:	e5400044 	addi	r21,fp,1
 8002c4c:	a829883a 	mov	r20,r21
 8002c50:	a8003416 	blt	r21,zero,8002d24 <___svfprintf_internal_r+0x2004>
 8002c54:	070019c4 	movi	fp,103
 8002c58:	003dbc06 	br	800234c <___svfprintf_internal_r+0x162c>
 8002c5c:	d9401545 	stb	r5,85(sp)
 8002c60:	003ae706 	br	8001800 <___svfprintf_internal_r+0xae0>
 8002c64:	d9401545 	stb	r5,85(sp)
 8002c68:	00395f06 	br	80011e8 <___svfprintf_internal_r+0x4c8>
 8002c6c:	d9401545 	stb	r5,85(sp)
 8002c70:	003aad06 	br	8001728 <___svfprintf_internal_r+0xa08>
 8002c74:	d9401545 	stb	r5,85(sp)
 8002c78:	00394906 	br	80011a0 <___svfprintf_internal_r+0x480>
 8002c7c:	d9401545 	stb	r5,85(sp)
 8002c80:	003a6406 	br	8001614 <___svfprintf_internal_r+0x8f4>
 8002c84:	d9401545 	stb	r5,85(sp)
 8002c88:	003a1806 	br	80014ec <___svfprintf_internal_r+0x7cc>
 8002c8c:	d9401545 	stb	r5,85(sp)
 8002c90:	00397d06 	br	8001288 <___svfprintf_internal_r+0x568>
 8002c94:	d9401545 	stb	r5,85(sp)
 8002c98:	003a6b06 	br	8001648 <___svfprintf_internal_r+0x928>
 8002c9c:	d9401545 	stb	r5,85(sp)
 8002ca0:	003a2206 	br	800152c <___svfprintf_internal_r+0x80c>
 8002ca4:	d9401545 	stb	r5,85(sp)
 8002ca8:	003ae706 	br	8001848 <___svfprintf_internal_r+0xb28>
 8002cac:	8819883a 	mov	r12,r17
 8002cb0:	dc400717 	ldw	r17,28(sp)
 8002cb4:	a809883a 	mov	r4,r21
 8002cb8:	802b883a 	mov	r21,r16
 8002cbc:	2021883a 	mov	r16,r4
 8002cc0:	10800044 	addi	r2,r2,1
 8002cc4:	1d47883a 	add	r3,r3,r21
 8002cc8:	43000015 	stw	r12,0(r8)
 8002ccc:	45400115 	stw	r21,4(r8)
 8002cd0:	d8c01e15 	stw	r3,120(sp)
 8002cd4:	d8801d15 	stw	r2,116(sp)
 8002cd8:	11000208 	cmpgei	r4,r2,8
 8002cdc:	203e2c26 	beq	r4,zero,8002590 <___svfprintf_internal_r+0x1870>
 8002ce0:	d9000517 	ldw	r4,20(sp)
 8002ce4:	d9801c04 	addi	r6,sp,112
 8002ce8:	980b883a 	mov	r5,r19
 8002cec:	80061640 	call	8006164 <__ssprint_r>
 8002cf0:	1038ca1e 	bne	r2,zero,800101c <___svfprintf_internal_r+0x2fc>
 8002cf4:	d8c01e17 	ldw	r3,120(sp)
 8002cf8:	d8801d17 	ldw	r2,116(sp)
 8002cfc:	b811883a 	mov	r8,r23
 8002d00:	003e2406 	br	8002594 <___svfprintf_internal_r+0x1874>
 8002d04:	00bfffc4 	movi	r2,-1
 8002d08:	d8800415 	stw	r2,16(sp)
 8002d0c:	0038c606 	br	8001028 <___svfprintf_internal_r+0x308>
 8002d10:	d8800717 	ldw	r2,28(sp)
 8002d14:	d8c00b17 	ldw	r3,44(sp)
 8002d18:	10eb883a 	add	r21,r2,r3
 8002d1c:	a829883a 	mov	r20,r21
 8002d20:	a83fcc0e 	bge	r21,zero,8002c54 <___svfprintf_internal_r+0x1f34>
 8002d24:	0029883a 	mov	r20,zero
 8002d28:	003fca06 	br	8002c54 <___svfprintf_internal_r+0x1f34>
 8002d2c:	d9000917 	ldw	r4,36(sp)
 8002d30:	000d883a 	mov	r6,zero
 8002d34:	000f883a 	mov	r7,zero
 8002d38:	a00b883a 	mov	r5,r20
 8002d3c:	da001215 	stw	r8,72(sp)
 8002d40:	dac01015 	stw	r11,64(sp)
 8002d44:	db000815 	stw	r12,32(sp)
 8002d48:	800a3700 	call	800a370 <__eqdf2>
 8002d4c:	db000817 	ldw	r12,32(sp)
 8002d50:	dac01017 	ldw	r11,64(sp)
 8002d54:	da001217 	ldw	r8,72(sp)
 8002d58:	103eb626 	beq	r2,zero,8002834 <___svfprintf_internal_r+0x1b14>
 8002d5c:	00800044 	movi	r2,1
 8002d60:	12c5c83a 	sub	r2,r2,r11
 8002d64:	d8801615 	stw	r2,88(sp)
 8002d68:	003eb306 	br	8002838 <___svfprintf_internal_r+0x1b18>
 8002d6c:	00800c04 	movi	r2,48
 8002d70:	a8c00c04 	addi	r3,r21,48
 8002d74:	d88018c5 	stb	r2,99(sp)
 8002d78:	00800104 	movi	r2,4
 8002d7c:	d8c01905 	stb	r3,100(sp)
 8002d80:	d8801115 	stw	r2,68(sp)
 8002d84:	003f0c06 	br	80029b8 <___svfprintf_internal_r+0x1c98>
 8002d88:	6080004c 	andi	r2,r12,1
 8002d8c:	d8800715 	stw	r2,28(sp)
 8002d90:	103f0e1e 	bne	r2,zero,80029cc <___svfprintf_internal_r+0x1cac>
 8002d94:	a829883a 	mov	r20,r21
 8002d98:	a83d6c0e 	bge	r21,zero,800234c <___svfprintf_internal_r+0x162c>
 8002d9c:	0029883a 	mov	r20,zero
 8002da0:	003d6a06 	br	800234c <___svfprintf_internal_r+0x162c>
 8002da4:	d8800b17 	ldw	r2,44(sp)
 8002da8:	1885883a 	add	r2,r3,r2
 8002dac:	12eb883a 	add	r21,r2,r11
 8002db0:	003ff806 	br	8002d94 <___svfprintf_internal_r+0x2074>
 8002db4:	d8800a17 	ldw	r2,40(sp)
 8002db8:	10001016 	blt	r2,zero,8002dfc <___svfprintf_internal_r+0x20dc>
 8002dbc:	db401543 	ldbu	r13,85(sp)
 8002dc0:	e0801210 	cmplti	r2,fp,72
 8002dc4:	10000a1e 	bne	r2,zero,8002df0 <___svfprintf_internal_r+0x20d0>
 8002dc8:	04420074 	movhi	r17,2049
 8002dcc:	8c772504 	addi	r17,r17,-9068
 8002dd0:	003a4c06 	br	8001704 <___svfprintf_internal_r+0x9e4>
 8002dd4:	d8800b17 	ldw	r2,44(sp)
 8002dd8:	10800044 	addi	r2,r2,1
 8002ddc:	12eb883a 	add	r21,r2,r11
 8002de0:	003fec06 	br	8002d94 <___svfprintf_internal_r+0x2074>
 8002de4:	4005883a 	mov	r2,r8
 8002de8:	63373284 	addi	r12,r12,-9014
 8002dec:	003e6f06 	br	80027ac <___svfprintf_internal_r+0x1a8c>
 8002df0:	04420074 	movhi	r17,2049
 8002df4:	8c772404 	addi	r17,r17,-9072
 8002df8:	003a4206 	br	8001704 <___svfprintf_internal_r+0x9e4>
 8002dfc:	00800b44 	movi	r2,45
 8002e00:	d8801545 	stb	r2,85(sp)
 8002e04:	03400b44 	movi	r13,45
 8002e08:	003fed06 	br	8002dc0 <___svfprintf_internal_r+0x20a0>
 8002e0c:	00800084 	movi	r2,2
 8002e10:	d8801115 	stw	r2,68(sp)
 8002e14:	003ee806 	br	80029b8 <___svfprintf_internal_r+0x1c98>
 8002e18:	d8c00617 	ldw	r3,24(sp)
 8002e1c:	1ac00017 	ldw	r11,0(r3)
 8002e20:	18c00104 	addi	r3,r3,4
 8002e24:	5800010e 	bge	r11,zero,8002e2c <___svfprintf_internal_r+0x210c>
 8002e28:	02ffffc4 	movi	r11,-1
 8002e2c:	b7000043 	ldbu	fp,1(r22)
 8002e30:	d8c00615 	stw	r3,24(sp)
 8002e34:	102d883a 	mov	r22,r2
 8002e38:	e2803fcc 	andi	r10,fp,255
 8002e3c:	5280201c 	xori	r10,r10,128
 8002e40:	52bfe004 	addi	r10,r10,-128
 8002e44:	00380206 	br	8000e50 <___svfprintf_internal_r+0x130>
 8002e48:	d8c00517 	ldw	r3,20(sp)
 8002e4c:	00800304 	movi	r2,12
 8002e50:	18800015 	stw	r2,0(r3)
 8002e54:	00bfffc4 	movi	r2,-1
 8002e58:	d8800415 	stw	r2,16(sp)
 8002e5c:	00387206 	br	8001028 <___svfprintf_internal_r+0x308>

08002e60 <quorem>:
 8002e60:	defff204 	addi	sp,sp,-56
 8002e64:	dc000415 	stw	r16,16(sp)
 8002e68:	20800417 	ldw	r2,16(r4)
 8002e6c:	2c000417 	ldw	r16,16(r5)
 8002e70:	dfc00d15 	stw	ra,52(sp)
 8002e74:	df000c15 	stw	fp,48(sp)
 8002e78:	ddc00b15 	stw	r23,44(sp)
 8002e7c:	dd800a15 	stw	r22,40(sp)
 8002e80:	dd400915 	stw	r21,36(sp)
 8002e84:	dd000815 	stw	r20,32(sp)
 8002e88:	dcc00715 	stw	r19,28(sp)
 8002e8c:	dc800615 	stw	r18,24(sp)
 8002e90:	dc400515 	stw	r17,20(sp)
 8002e94:	14007d16 	blt	r2,r16,800308c <quorem+0x22c>
 8002e98:	843fffc4 	addi	r16,r16,-1
 8002e9c:	802c90ba 	slli	r22,r16,2
 8002ea0:	2f000504 	addi	fp,r5,20
 8002ea4:	24c00504 	addi	r19,r4,20
 8002ea8:	e5a5883a 	add	r18,fp,r22
 8002eac:	9d85883a 	add	r2,r19,r22
 8002eb0:	95c00017 	ldw	r23,0(r18)
 8002eb4:	15000017 	ldw	r20,0(r2)
 8002eb8:	d9400215 	stw	r5,8(sp)
 8002ebc:	bdc00044 	addi	r23,r23,1
 8002ec0:	d9000115 	stw	r4,4(sp)
 8002ec4:	b80b883a 	mov	r5,r23
 8002ec8:	a009883a 	mov	r4,r20
 8002ecc:	dcc00015 	stw	r19,0(sp)
 8002ed0:	d8800315 	stw	r2,12(sp)
 8002ed4:	8000a740 	call	8000a74 <__udivsi3>
 8002ed8:	1023883a 	mov	r17,r2
 8002edc:	a5c03236 	bltu	r20,r23,8002fa8 <quorem+0x148>
 8002ee0:	e02d883a 	mov	r22,fp
 8002ee4:	9829883a 	mov	r20,r19
 8002ee8:	002b883a 	mov	r21,zero
 8002eec:	002f883a 	mov	r23,zero
 8002ef0:	b5800104 	addi	r22,r22,4
 8002ef4:	b4ffff17 	ldw	r19,-4(r22)
 8002ef8:	880b883a 	mov	r5,r17
 8002efc:	a5000104 	addi	r20,r20,4
 8002f00:	993fffcc 	andi	r4,r19,65535
 8002f04:	8000b340 	call	8000b34 <__mulsi3>
 8002f08:	9808d43a 	srli	r4,r19,16
 8002f0c:	880b883a 	mov	r5,r17
 8002f10:	156b883a 	add	r21,r2,r21
 8002f14:	8000b340 	call	8000b34 <__mulsi3>
 8002f18:	a0ffff17 	ldw	r3,-4(r20)
 8002f1c:	a80ad43a 	srli	r5,r21,16
 8002f20:	a93fffcc 	andi	r4,r21,65535
 8002f24:	b909c83a 	sub	r4,r23,r4
 8002f28:	19bfffcc 	andi	r6,r3,65535
 8002f2c:	2189883a 	add	r4,r4,r6
 8002f30:	1806d43a 	srli	r3,r3,16
 8002f34:	116b883a 	add	r21,r2,r5
 8002f38:	2005d43a 	srai	r2,r4,16
 8002f3c:	a97fffcc 	andi	r5,r21,65535
 8002f40:	1947c83a 	sub	r3,r3,r5
 8002f44:	1887883a 	add	r3,r3,r2
 8002f48:	1804943a 	slli	r2,r3,16
 8002f4c:	213fffcc 	andi	r4,r4,65535
 8002f50:	a82ad43a 	srli	r21,r21,16
 8002f54:	1108b03a 	or	r4,r2,r4
 8002f58:	a13fff15 	stw	r4,-4(r20)
 8002f5c:	182fd43a 	srai	r23,r3,16
 8002f60:	95bfe32e 	bgeu	r18,r22,8002ef0 <quorem+0x90>
 8002f64:	d8c00317 	ldw	r3,12(sp)
 8002f68:	18800017 	ldw	r2,0(r3)
 8002f6c:	10000e1e 	bne	r2,zero,8002fa8 <quorem+0x148>
 8002f70:	d9000017 	ldw	r4,0(sp)
 8002f74:	18bfff04 	addi	r2,r3,-4
 8002f78:	2080092e 	bgeu	r4,r2,8002fa0 <quorem+0x140>
 8002f7c:	18ffff17 	ldw	r3,-4(r3)
 8002f80:	18000326 	beq	r3,zero,8002f90 <quorem+0x130>
 8002f84:	00000606 	br	8002fa0 <quorem+0x140>
 8002f88:	10c00017 	ldw	r3,0(r2)
 8002f8c:	1800041e 	bne	r3,zero,8002fa0 <quorem+0x140>
 8002f90:	d8c00017 	ldw	r3,0(sp)
 8002f94:	10bfff04 	addi	r2,r2,-4
 8002f98:	843fffc4 	addi	r16,r16,-1
 8002f9c:	18bffa36 	bltu	r3,r2,8002f88 <quorem+0x128>
 8002fa0:	d8800117 	ldw	r2,4(sp)
 8002fa4:	14000415 	stw	r16,16(r2)
 8002fa8:	d9400217 	ldw	r5,8(sp)
 8002fac:	d9000117 	ldw	r4,4(sp)
 8002fb0:	8005a580 	call	8005a58 <__mcmp>
 8002fb4:	10002816 	blt	r2,zero,8003058 <quorem+0x1f8>
 8002fb8:	d9800017 	ldw	r6,0(sp)
 8002fbc:	8c400044 	addi	r17,r17,1
 8002fc0:	0007883a 	mov	r3,zero
 8002fc4:	e7000104 	addi	fp,fp,4
 8002fc8:	e13fff17 	ldw	r4,-4(fp)
 8002fcc:	31400017 	ldw	r5,0(r6)
 8002fd0:	31800104 	addi	r6,r6,4
 8002fd4:	20bfffcc 	andi	r2,r4,65535
 8002fd8:	1887c83a 	sub	r3,r3,r2
 8002fdc:	28bfffcc 	andi	r2,r5,65535
 8002fe0:	1885883a 	add	r2,r3,r2
 8002fe4:	2008d43a 	srli	r4,r4,16
 8002fe8:	2806d43a 	srli	r3,r5,16
 8002fec:	100fd43a 	srai	r7,r2,16
 8002ff0:	117fffcc 	andi	r5,r2,65535
 8002ff4:	1907c83a 	sub	r3,r3,r4
 8002ff8:	19c7883a 	add	r3,r3,r7
 8002ffc:	1804943a 	slli	r2,r3,16
 8003000:	1807d43a 	srai	r3,r3,16
 8003004:	1144b03a 	or	r2,r2,r5
 8003008:	30bfff15 	stw	r2,-4(r6)
 800300c:	973fed2e 	bgeu	r18,fp,8002fc4 <quorem+0x164>
 8003010:	800690ba 	slli	r3,r16,2
 8003014:	d9000017 	ldw	r4,0(sp)
 8003018:	20c7883a 	add	r3,r4,r3
 800301c:	18800017 	ldw	r2,0(r3)
 8003020:	10000d1e 	bne	r2,zero,8003058 <quorem+0x1f8>
 8003024:	18bfff04 	addi	r2,r3,-4
 8003028:	2080092e 	bgeu	r4,r2,8003050 <quorem+0x1f0>
 800302c:	18ffff17 	ldw	r3,-4(r3)
 8003030:	18000326 	beq	r3,zero,8003040 <quorem+0x1e0>
 8003034:	00000606 	br	8003050 <quorem+0x1f0>
 8003038:	10c00017 	ldw	r3,0(r2)
 800303c:	1800041e 	bne	r3,zero,8003050 <quorem+0x1f0>
 8003040:	d8c00017 	ldw	r3,0(sp)
 8003044:	10bfff04 	addi	r2,r2,-4
 8003048:	843fffc4 	addi	r16,r16,-1
 800304c:	18bffa36 	bltu	r3,r2,8003038 <quorem+0x1d8>
 8003050:	d8800117 	ldw	r2,4(sp)
 8003054:	14000415 	stw	r16,16(r2)
 8003058:	8805883a 	mov	r2,r17
 800305c:	dfc00d17 	ldw	ra,52(sp)
 8003060:	df000c17 	ldw	fp,48(sp)
 8003064:	ddc00b17 	ldw	r23,44(sp)
 8003068:	dd800a17 	ldw	r22,40(sp)
 800306c:	dd400917 	ldw	r21,36(sp)
 8003070:	dd000817 	ldw	r20,32(sp)
 8003074:	dcc00717 	ldw	r19,28(sp)
 8003078:	dc800617 	ldw	r18,24(sp)
 800307c:	dc400517 	ldw	r17,20(sp)
 8003080:	dc000417 	ldw	r16,16(sp)
 8003084:	dec00e04 	addi	sp,sp,56
 8003088:	f800283a 	ret
 800308c:	0005883a 	mov	r2,zero
 8003090:	003ff206 	br	800305c <quorem+0x1fc>

08003094 <_dtoa_r>:
 8003094:	20801017 	ldw	r2,64(r4)
 8003098:	deffe204 	addi	sp,sp,-120
 800309c:	df001c15 	stw	fp,112(sp)
 80030a0:	dcc01715 	stw	r19,92(sp)
 80030a4:	dc401515 	stw	r17,84(sp)
 80030a8:	dc001415 	stw	r16,80(sp)
 80030ac:	dfc01d15 	stw	ra,116(sp)
 80030b0:	ddc01b15 	stw	r23,108(sp)
 80030b4:	dd801a15 	stw	r22,104(sp)
 80030b8:	dd401915 	stw	r21,100(sp)
 80030bc:	dd001815 	stw	r20,96(sp)
 80030c0:	dc801615 	stw	r18,88(sp)
 80030c4:	d9400115 	stw	r5,4(sp)
 80030c8:	d9c00215 	stw	r7,8(sp)
 80030cc:	2039883a 	mov	fp,r4
 80030d0:	3027883a 	mov	r19,r6
 80030d4:	dc002017 	ldw	r16,128(sp)
 80030d8:	3023883a 	mov	r17,r6
 80030dc:	10000826 	beq	r2,zero,8003100 <_dtoa_r+0x6c>
 80030e0:	21801117 	ldw	r6,68(r4)
 80030e4:	00c00044 	movi	r3,1
 80030e8:	100b883a 	mov	r5,r2
 80030ec:	1986983a 	sll	r3,r3,r6
 80030f0:	11800115 	stw	r6,4(r2)
 80030f4:	10c00215 	stw	r3,8(r2)
 80030f8:	80051fc0 	call	80051fc <_Bfree>
 80030fc:	e0001015 	stw	zero,64(fp)
 8003100:	98018116 	blt	r19,zero,8003708 <_dtoa_r+0x674>
 8003104:	80000015 	stw	zero,0(r16)
 8003108:	989ffc2c 	andhi	r2,r19,32752
 800310c:	00dffc34 	movhi	r3,32752
 8003110:	10c18626 	beq	r2,r3,800372c <_dtoa_r+0x698>
 8003114:	d9000117 	ldw	r4,4(sp)
 8003118:	000d883a 	mov	r6,zero
 800311c:	000f883a 	mov	r7,zero
 8003120:	880b883a 	mov	r5,r17
 8003124:	800a3700 	call	800a370 <__eqdf2>
 8003128:	1000191e 	bne	r2,zero,8003190 <_dtoa_r+0xfc>
 800312c:	d8c01f17 	ldw	r3,124(sp)
 8003130:	00800044 	movi	r2,1
 8003134:	18800015 	stw	r2,0(r3)
 8003138:	d8802117 	ldw	r2,132(sp)
 800313c:	10032426 	beq	r2,zero,8003dd0 <_dtoa_r+0xd3c>
 8003140:	d9002117 	ldw	r4,132(sp)
 8003144:	00820074 	movhi	r2,2049
 8003148:	10b73244 	addi	r2,r2,-9015
 800314c:	00c20074 	movhi	r3,2049
 8003150:	20800015 	stw	r2,0(r4)
 8003154:	18b73204 	addi	r2,r3,-9016
 8003158:	d8800315 	stw	r2,12(sp)
 800315c:	d8800317 	ldw	r2,12(sp)
 8003160:	dfc01d17 	ldw	ra,116(sp)
 8003164:	df001c17 	ldw	fp,112(sp)
 8003168:	ddc01b17 	ldw	r23,108(sp)
 800316c:	dd801a17 	ldw	r22,104(sp)
 8003170:	dd401917 	ldw	r21,100(sp)
 8003174:	dd001817 	ldw	r20,96(sp)
 8003178:	dcc01717 	ldw	r19,92(sp)
 800317c:	dc801617 	ldw	r18,88(sp)
 8003180:	dc401517 	ldw	r17,84(sp)
 8003184:	dc001417 	ldw	r16,80(sp)
 8003188:	dec01e04 	addi	sp,sp,120
 800318c:	f800283a 	ret
 8003190:	dc800117 	ldw	r18,4(sp)
 8003194:	d8801204 	addi	r2,sp,72
 8003198:	9820d53a 	srli	r16,r19,20
 800319c:	d8800015 	stw	r2,0(sp)
 80031a0:	d9c01304 	addi	r7,sp,76
 80031a4:	900b883a 	mov	r5,r18
 80031a8:	880d883a 	mov	r6,r17
 80031ac:	e009883a 	mov	r4,fp
 80031b0:	8005dcc0 	call	8005dcc <__d2b>
 80031b4:	102b883a 	mov	r21,r2
 80031b8:	8001701e 	bne	r16,zero,800377c <_dtoa_r+0x6e8>
 80031bc:	dc801217 	ldw	r18,72(sp)
 80031c0:	dc001317 	ldw	r16,76(sp)
 80031c4:	9421883a 	add	r16,r18,r16
 80031c8:	80810c84 	addi	r2,r16,1074
 80031cc:	10c00850 	cmplti	r3,r2,33
 80031d0:	18030f1e 	bne	r3,zero,8003e10 <_dtoa_r+0xd7c>
 80031d4:	01001004 	movi	r4,64
 80031d8:	2085c83a 	sub	r2,r4,r2
 80031dc:	98a6983a 	sll	r19,r19,r2
 80031e0:	d8800117 	ldw	r2,4(sp)
 80031e4:	81010484 	addi	r4,r16,1042
 80031e8:	1108d83a 	srl	r4,r2,r4
 80031ec:	9908b03a 	or	r4,r19,r4
 80031f0:	800b8b80 	call	800b8b8 <__floatunsidf>
 80031f4:	1009883a 	mov	r4,r2
 80031f8:	017f8434 	movhi	r5,65040
 80031fc:	00800044 	movi	r2,1
 8003200:	194b883a 	add	r5,r3,r5
 8003204:	843fffc4 	addi	r16,r16,-1
 8003208:	d8800a15 	stw	r2,40(sp)
 800320c:	000d883a 	mov	r6,zero
 8003210:	01cffe34 	movhi	r7,16376
 8003214:	800adb00 	call	800adb0 <__subdf3>
 8003218:	0198dbf4 	movhi	r6,25455
 800321c:	01cff4f4 	movhi	r7,16339
 8003220:	3190d844 	addi	r6,r6,17249
 8003224:	39e1e9c4 	addi	r7,r7,-30809
 8003228:	1009883a 	mov	r4,r2
 800322c:	180b883a 	mov	r5,r3
 8003230:	800a5d00 	call	800a5d0 <__muldf3>
 8003234:	01a2d874 	movhi	r6,35681
 8003238:	01cff1f4 	movhi	r7,16327
 800323c:	31b22cc4 	addi	r6,r6,-14157
 8003240:	39e28a04 	addi	r7,r7,-30168
 8003244:	180b883a 	mov	r5,r3
 8003248:	1009883a 	mov	r4,r2
 800324c:	800906c0 	call	800906c <__adddf3>
 8003250:	8009883a 	mov	r4,r16
 8003254:	1029883a 	mov	r20,r2
 8003258:	1827883a 	mov	r19,r3
 800325c:	800b7f00 	call	800b7f0 <__floatsidf>
 8003260:	019427f4 	movhi	r6,20639
 8003264:	01cff4f4 	movhi	r7,16339
 8003268:	319e7ec4 	addi	r6,r6,31227
 800326c:	39d104c4 	addi	r7,r7,17427
 8003270:	1009883a 	mov	r4,r2
 8003274:	180b883a 	mov	r5,r3
 8003278:	800a5d00 	call	800a5d0 <__muldf3>
 800327c:	100d883a 	mov	r6,r2
 8003280:	180f883a 	mov	r7,r3
 8003284:	a009883a 	mov	r4,r20
 8003288:	980b883a 	mov	r5,r19
 800328c:	800906c0 	call	800906c <__adddf3>
 8003290:	1009883a 	mov	r4,r2
 8003294:	180b883a 	mov	r5,r3
 8003298:	1029883a 	mov	r20,r2
 800329c:	1827883a 	mov	r19,r3
 80032a0:	800b7700 	call	800b770 <__fixdfsi>
 80032a4:	000d883a 	mov	r6,zero
 80032a8:	000f883a 	mov	r7,zero
 80032ac:	a009883a 	mov	r4,r20
 80032b0:	980b883a 	mov	r5,r19
 80032b4:	102d883a 	mov	r22,r2
 80032b8:	800a4e00 	call	800a4e0 <__ledf2>
 80032bc:	1002ba16 	blt	r2,zero,8003da8 <_dtoa_r+0xd14>
 80032c0:	9421c83a 	sub	r16,r18,r16
 80032c4:	b08005e8 	cmpgeui	r2,r22,23
 80032c8:	853fffc4 	addi	r20,r16,-1
 80032cc:	1002ae1e 	bne	r2,zero,8003d88 <_dtoa_r+0xcf4>
 80032d0:	b00690fa 	slli	r3,r22,3
 80032d4:	00820074 	movhi	r2,2049
 80032d8:	10b75604 	addi	r2,r2,-8872
 80032dc:	10c5883a 	add	r2,r2,r3
 80032e0:	11800017 	ldw	r6,0(r2)
 80032e4:	11c00117 	ldw	r7,4(r2)
 80032e8:	d9000117 	ldw	r4,4(sp)
 80032ec:	880b883a 	mov	r5,r17
 80032f0:	800a4e00 	call	800a4e0 <__ledf2>
 80032f4:	10026f0e 	bge	r2,zero,8003cb4 <_dtoa_r+0xc20>
 80032f8:	d8000915 	stw	zero,36(sp)
 80032fc:	b5bfffc4 	addi	r22,r22,-1
 8003300:	a002a416 	blt	r20,zero,8003d94 <_dtoa_r+0xd00>
 8003304:	d8000515 	stw	zero,20(sp)
 8003308:	b0026d0e 	bge	r22,zero,8003cc0 <_dtoa_r+0xc2c>
 800330c:	d8800517 	ldw	r2,20(sp)
 8003310:	d8c00217 	ldw	r3,8(sp)
 8003314:	dd800415 	stw	r22,16(sp)
 8003318:	1585c83a 	sub	r2,r2,r22
 800331c:	d8800515 	stw	r2,20(sp)
 8003320:	0585c83a 	sub	r2,zero,r22
 8003324:	d8800815 	stw	r2,32(sp)
 8003328:	188002a8 	cmpgeui	r2,r3,10
 800332c:	002d883a 	mov	r22,zero
 8003330:	1002691e 	bne	r2,zero,8003cd8 <_dtoa_r+0xc44>
 8003334:	18800190 	cmplti	r2,r3,6
 8003338:	1002ba1e 	bne	r2,zero,8003e24 <_dtoa_r+0xd90>
 800333c:	18bfff04 	addi	r2,r3,-4
 8003340:	d8800215 	stw	r2,8(sp)
 8003344:	0021883a 	mov	r16,zero
 8003348:	d8c00217 	ldw	r3,8(sp)
 800334c:	188000e0 	cmpeqi	r2,r3,3
 8003350:	10039d1e 	bne	r2,zero,80041c8 <_dtoa_r+0x1134>
 8003354:	18800108 	cmpgei	r2,r3,4
 8003358:	10027a26 	beq	r2,zero,8003d44 <_dtoa_r+0xcb0>
 800335c:	d8c00217 	ldw	r3,8(sp)
 8003360:	18800120 	cmpeqi	r2,r3,4
 8003364:	10026926 	beq	r2,zero,8003d0c <_dtoa_r+0xc78>
 8003368:	00800044 	movi	r2,1
 800336c:	d8800715 	stw	r2,28(sp)
 8003370:	d8801e17 	ldw	r2,120(sp)
 8003374:	0083670e 	bge	zero,r2,8004114 <_dtoa_r+0x1080>
 8003378:	d8800b15 	stw	r2,44(sp)
 800337c:	d8800615 	stw	r2,24(sp)
 8003380:	100d883a 	mov	r6,r2
 8003384:	e0001115 	stw	zero,68(fp)
 8003388:	30800610 	cmplti	r2,r6,24
 800338c:	dc800617 	ldw	r18,24(sp)
 8003390:	1004eb1e 	bne	r2,zero,8004740 <_dtoa_r+0x16ac>
 8003394:	00c00044 	movi	r3,1
 8003398:	00800104 	movi	r2,4
 800339c:	1085883a 	add	r2,r2,r2
 80033a0:	11000504 	addi	r4,r2,20
 80033a4:	180b883a 	mov	r5,r3
 80033a8:	18c00044 	addi	r3,r3,1
 80033ac:	313ffb2e 	bgeu	r6,r4,800339c <_dtoa_r+0x308>
 80033b0:	e1401115 	stw	r5,68(fp)
 80033b4:	e009883a 	mov	r4,fp
 80033b8:	80051580 	call	8005158 <_Balloc>
 80033bc:	d8800315 	stw	r2,12(sp)
 80033c0:	e0801015 	stw	r2,64(fp)
 80033c4:	948003e8 	cmpgeui	r18,r18,15
 80033c8:	9000fe1e 	bne	r18,zero,80037c4 <_dtoa_r+0x730>
 80033cc:	8000fd26 	beq	r16,zero,80037c4 <_dtoa_r+0x730>
 80033d0:	d9000417 	ldw	r4,16(sp)
 80033d4:	0103c60e 	bge	zero,r4,80042f0 <_dtoa_r+0x125c>
 80033d8:	208003cc 	andi	r2,r4,15
 80033dc:	100690fa 	slli	r3,r2,3
 80033e0:	202fd13a 	srai	r23,r4,4
 80033e4:	00820074 	movhi	r2,2049
 80033e8:	10b75604 	addi	r2,r2,-8872
 80033ec:	10c5883a 	add	r2,r2,r3
 80033f0:	b8c0040c 	andi	r3,r23,16
 80033f4:	12800017 	ldw	r10,0(r2)
 80033f8:	12400117 	ldw	r9,4(r2)
 80033fc:	1803621e 	bne	r3,zero,8004188 <_dtoa_r+0x10f4>
 8003400:	d8800117 	ldw	r2,4(sp)
 8003404:	8827883a 	mov	r19,r17
 8003408:	04000084 	movi	r16,2
 800340c:	d8800c15 	stw	r2,48(sp)
 8003410:	04820074 	movhi	r18,2049
 8003414:	94b74c04 	addi	r18,r18,-8912
 8003418:	b8000f26 	beq	r23,zero,8003458 <_dtoa_r+0x3c4>
 800341c:	5005883a 	mov	r2,r10
 8003420:	4807883a 	mov	r3,r9
 8003424:	b980004c 	andi	r6,r23,1
 8003428:	1009883a 	mov	r4,r2
 800342c:	b82fd07a 	srai	r23,r23,1
 8003430:	180b883a 	mov	r5,r3
 8003434:	30000426 	beq	r6,zero,8003448 <_dtoa_r+0x3b4>
 8003438:	91800017 	ldw	r6,0(r18)
 800343c:	91c00117 	ldw	r7,4(r18)
 8003440:	84000044 	addi	r16,r16,1
 8003444:	800a5d00 	call	800a5d0 <__muldf3>
 8003448:	94800204 	addi	r18,r18,8
 800344c:	b83ff51e 	bne	r23,zero,8003424 <_dtoa_r+0x390>
 8003450:	1015883a 	mov	r10,r2
 8003454:	1813883a 	mov	r9,r3
 8003458:	d9000c17 	ldw	r4,48(sp)
 800345c:	980b883a 	mov	r5,r19
 8003460:	500d883a 	mov	r6,r10
 8003464:	480f883a 	mov	r7,r9
 8003468:	8009a0c0 	call	8009a0c <__divdf3>
 800346c:	1025883a 	mov	r18,r2
 8003470:	1827883a 	mov	r19,r3
 8003474:	d8800917 	ldw	r2,36(sp)
 8003478:	10000626 	beq	r2,zero,8003494 <_dtoa_r+0x400>
 800347c:	000d883a 	mov	r6,zero
 8003480:	01cffc34 	movhi	r7,16368
 8003484:	9009883a 	mov	r4,r18
 8003488:	980b883a 	mov	r5,r19
 800348c:	800a4e00 	call	800a4e0 <__ledf2>
 8003490:	10042616 	blt	r2,zero,800452c <_dtoa_r+0x1498>
 8003494:	8009883a 	mov	r4,r16
 8003498:	800b7f00 	call	800b7f0 <__floatsidf>
 800349c:	900d883a 	mov	r6,r18
 80034a0:	980f883a 	mov	r7,r19
 80034a4:	1009883a 	mov	r4,r2
 80034a8:	180b883a 	mov	r5,r3
 80034ac:	800a5d00 	call	800a5d0 <__muldf3>
 80034b0:	000d883a 	mov	r6,zero
 80034b4:	01d00734 	movhi	r7,16412
 80034b8:	1009883a 	mov	r4,r2
 80034bc:	180b883a 	mov	r5,r3
 80034c0:	800906c0 	call	800906c <__adddf3>
 80034c4:	d8800c15 	stw	r2,48(sp)
 80034c8:	00bf3034 	movhi	r2,64704
 80034cc:	1885883a 	add	r2,r3,r2
 80034d0:	d8800d15 	stw	r2,52(sp)
 80034d4:	d8800617 	ldw	r2,24(sp)
 80034d8:	10036d26 	beq	r2,zero,8004290 <_dtoa_r+0x11fc>
 80034dc:	d8800417 	ldw	r2,16(sp)
 80034e0:	d8800f15 	stw	r2,60(sp)
 80034e4:	d8800617 	ldw	r2,24(sp)
 80034e8:	d8800e15 	stw	r2,56(sp)
 80034ec:	980b883a 	mov	r5,r19
 80034f0:	9009883a 	mov	r4,r18
 80034f4:	800b7700 	call	800b770 <__fixdfsi>
 80034f8:	1009883a 	mov	r4,r2
 80034fc:	102f883a 	mov	r23,r2
 8003500:	800b7f00 	call	800b7f0 <__floatsidf>
 8003504:	100d883a 	mov	r6,r2
 8003508:	180f883a 	mov	r7,r3
 800350c:	9009883a 	mov	r4,r18
 8003510:	980b883a 	mov	r5,r19
 8003514:	800adb00 	call	800adb0 <__subdf3>
 8003518:	1025883a 	mov	r18,r2
 800351c:	d8800e17 	ldw	r2,56(sp)
 8003520:	1821883a 	mov	r16,r3
 8003524:	ba400c04 	addi	r9,r23,48
 8003528:	10bfffc4 	addi	r2,r2,-1
 800352c:	100690fa 	slli	r3,r2,3
 8003530:	00820074 	movhi	r2,2049
 8003534:	10b75604 	addi	r2,r2,-8872
 8003538:	10c5883a 	add	r2,r2,r3
 800353c:	11800017 	ldw	r6,0(r2)
 8003540:	d8c00317 	ldw	r3,12(sp)
 8003544:	11c00117 	ldw	r7,4(r2)
 8003548:	d8800717 	ldw	r2,28(sp)
 800354c:	4811883a 	mov	r8,r9
 8003550:	da001015 	stw	r8,64(sp)
 8003554:	1dc00044 	addi	r23,r3,1
 8003558:	1003a226 	beq	r2,zero,80043e4 <_dtoa_r+0x1350>
 800355c:	0009883a 	mov	r4,zero
 8003560:	014ff834 	movhi	r5,16352
 8003564:	da401115 	stw	r9,68(sp)
 8003568:	8009a0c0 	call	8009a0c <__divdf3>
 800356c:	d9800c17 	ldw	r6,48(sp)
 8003570:	d9c00d17 	ldw	r7,52(sp)
 8003574:	1009883a 	mov	r4,r2
 8003578:	180b883a 	mov	r5,r3
 800357c:	800adb00 	call	800adb0 <__subdf3>
 8003580:	1827883a 	mov	r19,r3
 8003584:	da401117 	ldw	r9,68(sp)
 8003588:	d8c00317 	ldw	r3,12(sp)
 800358c:	900d883a 	mov	r6,r18
 8003590:	800f883a 	mov	r7,r16
 8003594:	1a400005 	stb	r9,0(r3)
 8003598:	1009883a 	mov	r4,r2
 800359c:	980b883a 	mov	r5,r19
 80035a0:	d8800c15 	stw	r2,48(sp)
 80035a4:	800a3f00 	call	800a3f0 <__gedf2>
 80035a8:	da001017 	ldw	r8,64(sp)
 80035ac:	00804816 	blt	zero,r2,80036d0 <_dtoa_r+0x63c>
 80035b0:	900d883a 	mov	r6,r18
 80035b4:	800f883a 	mov	r7,r16
 80035b8:	0009883a 	mov	r4,zero
 80035bc:	014ffc34 	movhi	r5,16368
 80035c0:	da000d15 	stw	r8,52(sp)
 80035c4:	800adb00 	call	800adb0 <__subdf3>
 80035c8:	d9000c17 	ldw	r4,48(sp)
 80035cc:	100d883a 	mov	r6,r2
 80035d0:	180f883a 	mov	r7,r3
 80035d4:	980b883a 	mov	r5,r19
 80035d8:	800a3f00 	call	800a3f0 <__gedf2>
 80035dc:	da000d17 	ldw	r8,52(sp)
 80035e0:	00844e16 	blt	zero,r2,800471c <_dtoa_r+0x1688>
 80035e4:	d8c00e17 	ldw	r3,56(sp)
 80035e8:	18800060 	cmpeqi	r2,r3,1
 80035ec:	1000751e 	bne	r2,zero,80037c4 <_dtoa_r+0x730>
 80035f0:	d8800317 	ldw	r2,12(sp)
 80035f4:	dd800d15 	stw	r22,52(sp)
 80035f8:	dd000e15 	stw	r20,56(sp)
 80035fc:	10c5883a 	add	r2,r2,r3
 8003600:	dd000c17 	ldw	r20,48(sp)
 8003604:	102d883a 	mov	r22,r2
 8003608:	dc400c15 	stw	r17,48(sp)
 800360c:	00000806 	br	8003630 <_dtoa_r+0x59c>
 8003610:	800adb00 	call	800adb0 <__subdf3>
 8003614:	a00d883a 	mov	r6,r20
 8003618:	980f883a 	mov	r7,r19
 800361c:	1009883a 	mov	r4,r2
 8003620:	180b883a 	mov	r5,r3
 8003624:	800a4e00 	call	800a4e0 <__ledf2>
 8003628:	10042316 	blt	r2,zero,80046b8 <_dtoa_r+0x1624>
 800362c:	bd806226 	beq	r23,r22,80037b8 <_dtoa_r+0x724>
 8003630:	a009883a 	mov	r4,r20
 8003634:	980b883a 	mov	r5,r19
 8003638:	000d883a 	mov	r6,zero
 800363c:	01d00934 	movhi	r7,16420
 8003640:	800a5d00 	call	800a5d0 <__muldf3>
 8003644:	000d883a 	mov	r6,zero
 8003648:	01d00934 	movhi	r7,16420
 800364c:	9009883a 	mov	r4,r18
 8003650:	800b883a 	mov	r5,r16
 8003654:	1029883a 	mov	r20,r2
 8003658:	1827883a 	mov	r19,r3
 800365c:	800a5d00 	call	800a5d0 <__muldf3>
 8003660:	180b883a 	mov	r5,r3
 8003664:	1009883a 	mov	r4,r2
 8003668:	1821883a 	mov	r16,r3
 800366c:	1025883a 	mov	r18,r2
 8003670:	800b7700 	call	800b770 <__fixdfsi>
 8003674:	1009883a 	mov	r4,r2
 8003678:	1023883a 	mov	r17,r2
 800367c:	800b7f00 	call	800b7f0 <__floatsidf>
 8003680:	9009883a 	mov	r4,r18
 8003684:	800b883a 	mov	r5,r16
 8003688:	100d883a 	mov	r6,r2
 800368c:	180f883a 	mov	r7,r3
 8003690:	800adb00 	call	800adb0 <__subdf3>
 8003694:	bdc00044 	addi	r23,r23,1
 8003698:	8c400c04 	addi	r17,r17,48
 800369c:	a00d883a 	mov	r6,r20
 80036a0:	980f883a 	mov	r7,r19
 80036a4:	1009883a 	mov	r4,r2
 80036a8:	180b883a 	mov	r5,r3
 80036ac:	bc7fffc5 	stb	r17,-1(r23)
 80036b0:	1025883a 	mov	r18,r2
 80036b4:	1821883a 	mov	r16,r3
 80036b8:	800a4e00 	call	800a4e0 <__ledf2>
 80036bc:	900d883a 	mov	r6,r18
 80036c0:	800f883a 	mov	r7,r16
 80036c4:	0009883a 	mov	r4,zero
 80036c8:	014ffc34 	movhi	r5,16368
 80036cc:	103fd00e 	bge	r2,zero,8003610 <_dtoa_r+0x57c>
 80036d0:	d8800f17 	ldw	r2,60(sp)
 80036d4:	10800044 	addi	r2,r2,1
 80036d8:	d8800415 	stw	r2,16(sp)
 80036dc:	a80b883a 	mov	r5,r21
 80036e0:	e009883a 	mov	r4,fp
 80036e4:	80051fc0 	call	80051fc <_Bfree>
 80036e8:	d8801f17 	ldw	r2,124(sp)
 80036ec:	d8c00417 	ldw	r3,16(sp)
 80036f0:	b8000005 	stb	zero,0(r23)
 80036f4:	10c00015 	stw	r3,0(r2)
 80036f8:	d8802117 	ldw	r2,132(sp)
 80036fc:	103e9726 	beq	r2,zero,800315c <_dtoa_r+0xc8>
 8003700:	15c00015 	stw	r23,0(r2)
 8003704:	003e9506 	br	800315c <_dtoa_r+0xc8>
 8003708:	04600034 	movhi	r17,32768
 800370c:	8c7fffc4 	addi	r17,r17,-1
 8003710:	9c62703a 	and	r17,r19,r17
 8003714:	00800044 	movi	r2,1
 8003718:	8827883a 	mov	r19,r17
 800371c:	80800015 	stw	r2,0(r16)
 8003720:	00dffc34 	movhi	r3,32752
 8003724:	989ffc2c 	andhi	r2,r19,32752
 8003728:	10fe7a1e 	bne	r2,r3,8003114 <_dtoa_r+0x80>
 800372c:	00800434 	movhi	r2,16
 8003730:	d8c01f17 	ldw	r3,124(sp)
 8003734:	10bfffc4 	addi	r2,r2,-1
 8003738:	98a6703a 	and	r19,r19,r2
 800373c:	0089c3c4 	movi	r2,9999
 8003740:	18800015 	stw	r2,0(r3)
 8003744:	d8800117 	ldw	r2,4(sp)
 8003748:	98aab03a 	or	r21,r19,r2
 800374c:	a800141e 	bne	r21,zero,80037a0 <_dtoa_r+0x70c>
 8003750:	d8802117 	ldw	r2,132(sp)
 8003754:	1003f626 	beq	r2,zero,8004730 <_dtoa_r+0x169c>
 8003758:	00820074 	movhi	r2,2049
 800375c:	1007883a 	mov	r3,r2
 8003760:	18f73c04 	addi	r3,r3,-8976
 8003764:	00820074 	movhi	r2,2049
 8003768:	d8c00315 	stw	r3,12(sp)
 800376c:	10b73e04 	addi	r2,r2,-8968
 8003770:	d8c02117 	ldw	r3,132(sp)
 8003774:	18800015 	stw	r2,0(r3)
 8003778:	003e7806 	br	800315c <_dtoa_r+0xc8>
 800377c:	01400434 	movhi	r5,16
 8003780:	297fffc4 	addi	r5,r5,-1
 8003784:	894a703a 	and	r5,r17,r5
 8003788:	9009883a 	mov	r4,r18
 800378c:	294ffc34 	orhi	r5,r5,16368
 8003790:	843f0044 	addi	r16,r16,-1023
 8003794:	dc801217 	ldw	r18,72(sp)
 8003798:	d8000a15 	stw	zero,40(sp)
 800379c:	003e9b06 	br	800320c <_dtoa_r+0x178>
 80037a0:	d8802117 	ldw	r2,132(sp)
 80037a4:	1002461e 	bne	r2,zero,80040c0 <_dtoa_r+0x102c>
 80037a8:	00820074 	movhi	r2,2049
 80037ac:	10b73b04 	addi	r2,r2,-8980
 80037b0:	d8800315 	stw	r2,12(sp)
 80037b4:	003e6906 	br	800315c <_dtoa_r+0xc8>
 80037b8:	dd800d17 	ldw	r22,52(sp)
 80037bc:	dd000e17 	ldw	r20,56(sp)
 80037c0:	dc400c17 	ldw	r17,48(sp)
 80037c4:	d8801317 	ldw	r2,76(sp)
 80037c8:	10009f16 	blt	r2,zero,8003a48 <_dtoa_r+0x9b4>
 80037cc:	d9000417 	ldw	r4,16(sp)
 80037d0:	20c003c8 	cmpgei	r3,r4,15
 80037d4:	18009c1e 	bne	r3,zero,8003a48 <_dtoa_r+0x9b4>
 80037d8:	200690fa 	slli	r3,r4,3
 80037dc:	00820074 	movhi	r2,2049
 80037e0:	10b75604 	addi	r2,r2,-8872
 80037e4:	10c5883a 	add	r2,r2,r3
 80037e8:	14000017 	ldw	r16,0(r2)
 80037ec:	14800117 	ldw	r18,4(r2)
 80037f0:	d8801e17 	ldw	r2,120(sp)
 80037f4:	1000140e 	bge	r2,zero,8003848 <_dtoa_r+0x7b4>
 80037f8:	d8800617 	ldw	r2,24(sp)
 80037fc:	00801216 	blt	zero,r2,8003848 <_dtoa_r+0x7b4>
 8003800:	1002b81e 	bne	r2,zero,80042e4 <_dtoa_r+0x1250>
 8003804:	8009883a 	mov	r4,r16
 8003808:	900b883a 	mov	r5,r18
 800380c:	000d883a 	mov	r6,zero
 8003810:	01d00534 	movhi	r7,16404
 8003814:	800a5d00 	call	800a5d0 <__muldf3>
 8003818:	d9800117 	ldw	r6,4(sp)
 800381c:	880f883a 	mov	r7,r17
 8003820:	1009883a 	mov	r4,r2
 8003824:	180b883a 	mov	r5,r3
 8003828:	800a3f00 	call	800a3f0 <__gedf2>
 800382c:	0025883a 	mov	r18,zero
 8003830:	0021883a 	mov	r16,zero
 8003834:	1001fd16 	blt	r2,zero,800402c <_dtoa_r+0xf98>
 8003838:	d8801e17 	ldw	r2,120(sp)
 800383c:	ddc00317 	ldw	r23,12(sp)
 8003840:	00a2303a 	nor	r17,zero,r2
 8003844:	0001ff06 	br	8004044 <_dtoa_r+0xfb0>
 8003848:	dcc00117 	ldw	r19,4(sp)
 800384c:	800d883a 	mov	r6,r16
 8003850:	900f883a 	mov	r7,r18
 8003854:	880b883a 	mov	r5,r17
 8003858:	9809883a 	mov	r4,r19
 800385c:	8009a0c0 	call	8009a0c <__divdf3>
 8003860:	180b883a 	mov	r5,r3
 8003864:	1009883a 	mov	r4,r2
 8003868:	800b7700 	call	800b770 <__fixdfsi>
 800386c:	1009883a 	mov	r4,r2
 8003870:	102d883a 	mov	r22,r2
 8003874:	800b7f00 	call	800b7f0 <__floatsidf>
 8003878:	800d883a 	mov	r6,r16
 800387c:	900f883a 	mov	r7,r18
 8003880:	1009883a 	mov	r4,r2
 8003884:	180b883a 	mov	r5,r3
 8003888:	800a5d00 	call	800a5d0 <__muldf3>
 800388c:	880b883a 	mov	r5,r17
 8003890:	100d883a 	mov	r6,r2
 8003894:	180f883a 	mov	r7,r3
 8003898:	9809883a 	mov	r4,r19
 800389c:	800adb00 	call	800adb0 <__subdf3>
 80038a0:	dc400317 	ldw	r17,12(sp)
 80038a4:	1009883a 	mov	r4,r2
 80038a8:	d9c00417 	ldw	r7,16(sp)
 80038ac:	b0800c04 	addi	r2,r22,48
 80038b0:	88800005 	stb	r2,0(r17)
 80038b4:	d8800617 	ldw	r2,24(sp)
 80038b8:	39c00044 	addi	r7,r7,1
 80038bc:	d9c00415 	stw	r7,16(sp)
 80038c0:	11800060 	cmpeqi	r6,r2,1
 80038c4:	180b883a 	mov	r5,r3
 80038c8:	2005883a 	mov	r2,r4
 80038cc:	8dc00044 	addi	r23,r17,1
 80038d0:	3000391e 	bne	r6,zero,80039b8 <_dtoa_r+0x924>
 80038d4:	01d00934 	movhi	r7,16420
 80038d8:	800a5d00 	call	800a5d0 <__muldf3>
 80038dc:	000d883a 	mov	r6,zero
 80038e0:	000f883a 	mov	r7,zero
 80038e4:	1009883a 	mov	r4,r2
 80038e8:	180b883a 	mov	r5,r3
 80038ec:	1027883a 	mov	r19,r2
 80038f0:	1829883a 	mov	r20,r3
 80038f4:	800a3700 	call	800a370 <__eqdf2>
 80038f8:	103f7826 	beq	r2,zero,80036dc <_dtoa_r+0x648>
 80038fc:	d8c00617 	ldw	r3,24(sp)
 8003900:	8805883a 	mov	r2,r17
 8003904:	dd400115 	stw	r21,4(sp)
 8003908:	8c400084 	addi	r17,r17,2
 800390c:	10ed883a 	add	r22,r2,r3
 8003910:	00000a06 	br	800393c <_dtoa_r+0x8a8>
 8003914:	800a5d00 	call	800a5d0 <__muldf3>
 8003918:	000d883a 	mov	r6,zero
 800391c:	000f883a 	mov	r7,zero
 8003920:	1009883a 	mov	r4,r2
 8003924:	180b883a 	mov	r5,r3
 8003928:	1027883a 	mov	r19,r2
 800392c:	1829883a 	mov	r20,r3
 8003930:	8c400044 	addi	r17,r17,1
 8003934:	800a3700 	call	800a370 <__eqdf2>
 8003938:	10029d26 	beq	r2,zero,80043b0 <_dtoa_r+0x131c>
 800393c:	800d883a 	mov	r6,r16
 8003940:	900f883a 	mov	r7,r18
 8003944:	9809883a 	mov	r4,r19
 8003948:	a00b883a 	mov	r5,r20
 800394c:	8009a0c0 	call	8009a0c <__divdf3>
 8003950:	180b883a 	mov	r5,r3
 8003954:	1009883a 	mov	r4,r2
 8003958:	800b7700 	call	800b770 <__fixdfsi>
 800395c:	1009883a 	mov	r4,r2
 8003960:	102b883a 	mov	r21,r2
 8003964:	800b7f00 	call	800b7f0 <__floatsidf>
 8003968:	800d883a 	mov	r6,r16
 800396c:	900f883a 	mov	r7,r18
 8003970:	1009883a 	mov	r4,r2
 8003974:	180b883a 	mov	r5,r3
 8003978:	800a5d00 	call	800a5d0 <__muldf3>
 800397c:	100d883a 	mov	r6,r2
 8003980:	180f883a 	mov	r7,r3
 8003984:	9809883a 	mov	r4,r19
 8003988:	a00b883a 	mov	r5,r20
 800398c:	800adb00 	call	800adb0 <__subdf3>
 8003990:	aa400c04 	addi	r9,r21,48
 8003994:	8a7fffc5 	stb	r9,-1(r17)
 8003998:	000d883a 	mov	r6,zero
 800399c:	01d00934 	movhi	r7,16420
 80039a0:	1009883a 	mov	r4,r2
 80039a4:	180b883a 	mov	r5,r3
 80039a8:	882f883a 	mov	r23,r17
 80039ac:	b47fd91e 	bne	r22,r17,8003914 <_dtoa_r+0x880>
 80039b0:	a82d883a 	mov	r22,r21
 80039b4:	dd400117 	ldw	r21,4(sp)
 80039b8:	100d883a 	mov	r6,r2
 80039bc:	180f883a 	mov	r7,r3
 80039c0:	1009883a 	mov	r4,r2
 80039c4:	180b883a 	mov	r5,r3
 80039c8:	800906c0 	call	800906c <__adddf3>
 80039cc:	800d883a 	mov	r6,r16
 80039d0:	900f883a 	mov	r7,r18
 80039d4:	1009883a 	mov	r4,r2
 80039d8:	180b883a 	mov	r5,r3
 80039dc:	1027883a 	mov	r19,r2
 80039e0:	1823883a 	mov	r17,r3
 80039e4:	800a3f00 	call	800a3f0 <__gedf2>
 80039e8:	00800816 	blt	zero,r2,8003a0c <_dtoa_r+0x978>
 80039ec:	800d883a 	mov	r6,r16
 80039f0:	900f883a 	mov	r7,r18
 80039f4:	9809883a 	mov	r4,r19
 80039f8:	880b883a 	mov	r5,r17
 80039fc:	800a3700 	call	800a370 <__eqdf2>
 8003a00:	103f361e 	bne	r2,zero,80036dc <_dtoa_r+0x648>
 8003a04:	b580004c 	andi	r22,r22,1
 8003a08:	b03f3426 	beq	r22,zero,80036dc <_dtoa_r+0x648>
 8003a0c:	ba3fffc3 	ldbu	r8,-1(r23)
 8003a10:	d9000317 	ldw	r4,12(sp)
 8003a14:	00000306 	br	8003a24 <_dtoa_r+0x990>
 8003a18:	20c30e26 	beq	r4,r3,8004654 <_dtoa_r+0x15c0>
 8003a1c:	1a3fffc3 	ldbu	r8,-1(r3)
 8003a20:	182f883a 	mov	r23,r3
 8003a24:	40803fcc 	andi	r2,r8,255
 8003a28:	1080201c 	xori	r2,r2,128
 8003a2c:	10bfe004 	addi	r2,r2,-128
 8003a30:	10800e60 	cmpeqi	r2,r2,57
 8003a34:	b8ffffc4 	addi	r3,r23,-1
 8003a38:	103ff71e 	bne	r2,zero,8003a18 <_dtoa_r+0x984>
 8003a3c:	42000044 	addi	r8,r8,1
 8003a40:	1a000005 	stb	r8,0(r3)
 8003a44:	003f2506 	br	80036dc <_dtoa_r+0x648>
 8003a48:	d8c00717 	ldw	r3,28(sp)
 8003a4c:	1800e426 	beq	r3,zero,8003de0 <_dtoa_r+0xd4c>
 8003a50:	d8c00217 	ldw	r3,8(sp)
 8003a54:	18c00088 	cmpgei	r3,r3,2
 8003a58:	1801ec26 	beq	r3,zero,800420c <_dtoa_r+0x1178>
 8003a5c:	d8800617 	ldw	r2,24(sp)
 8003a60:	14bfffc4 	addi	r18,r2,-1
 8003a64:	d8800817 	ldw	r2,32(sp)
 8003a68:	1481c50e 	bge	r2,r18,8004180 <_dtoa_r+0x10ec>
 8003a6c:	d8800817 	ldw	r2,32(sp)
 8003a70:	dc800815 	stw	r18,32(sp)
 8003a74:	9085c83a 	sub	r2,r18,r2
 8003a78:	b0ad883a 	add	r22,r22,r2
 8003a7c:	0025883a 	mov	r18,zero
 8003a80:	d8800617 	ldw	r2,24(sp)
 8003a84:	10024c16 	blt	r2,zero,80043b8 <_dtoa_r+0x1324>
 8003a88:	d8c00517 	ldw	r3,20(sp)
 8003a8c:	a0a9883a 	add	r20,r20,r2
 8003a90:	1885883a 	add	r2,r3,r2
 8003a94:	1827883a 	mov	r19,r3
 8003a98:	d8800515 	stw	r2,20(sp)
 8003a9c:	01400044 	movi	r5,1
 8003aa0:	e009883a 	mov	r4,fp
 8003aa4:	80055800 	call	8005580 <__i2b>
 8003aa8:	1021883a 	mov	r16,r2
 8003aac:	04c0080e 	bge	zero,r19,8003ad0 <_dtoa_r+0xa3c>
 8003ab0:	0500070e 	bge	zero,r20,8003ad0 <_dtoa_r+0xa3c>
 8003ab4:	9805883a 	mov	r2,r19
 8003ab8:	a4c1a916 	blt	r20,r19,8004160 <_dtoa_r+0x10cc>
 8003abc:	d8c00517 	ldw	r3,20(sp)
 8003ac0:	98a7c83a 	sub	r19,r19,r2
 8003ac4:	a0a9c83a 	sub	r20,r20,r2
 8003ac8:	1887c83a 	sub	r3,r3,r2
 8003acc:	d8c00515 	stw	r3,20(sp)
 8003ad0:	d8800817 	ldw	r2,32(sp)
 8003ad4:	10001426 	beq	r2,zero,8003b28 <_dtoa_r+0xa94>
 8003ad8:	d8800717 	ldw	r2,28(sp)
 8003adc:	10017226 	beq	r2,zero,80040a8 <_dtoa_r+0x1014>
 8003ae0:	04800e0e 	bge	zero,r18,8003b1c <_dtoa_r+0xa88>
 8003ae4:	800b883a 	mov	r5,r16
 8003ae8:	900d883a 	mov	r6,r18
 8003aec:	e009883a 	mov	r4,fp
 8003af0:	80057f40 	call	80057f4 <__pow5mult>
 8003af4:	a80d883a 	mov	r6,r21
 8003af8:	100b883a 	mov	r5,r2
 8003afc:	e009883a 	mov	r4,fp
 8003b00:	1021883a 	mov	r16,r2
 8003b04:	80055b40 	call	80055b4 <__multiply>
 8003b08:	102f883a 	mov	r23,r2
 8003b0c:	a80b883a 	mov	r5,r21
 8003b10:	e009883a 	mov	r4,fp
 8003b14:	80051fc0 	call	80051fc <_Bfree>
 8003b18:	b82b883a 	mov	r21,r23
 8003b1c:	d8800817 	ldw	r2,32(sp)
 8003b20:	148dc83a 	sub	r6,r2,r18
 8003b24:	3001611e 	bne	r6,zero,80040ac <_dtoa_r+0x1018>
 8003b28:	01400044 	movi	r5,1
 8003b2c:	e009883a 	mov	r4,fp
 8003b30:	80055800 	call	8005580 <__i2b>
 8003b34:	1025883a 	mov	r18,r2
 8003b38:	0580bc16 	blt	zero,r22,8003e2c <_dtoa_r+0xd98>
 8003b3c:	d8800217 	ldw	r2,8(sp)
 8003b40:	10800088 	cmpgei	r2,r2,2
 8003b44:	10016526 	beq	r2,zero,80040dc <_dtoa_r+0x1048>
 8003b48:	0023883a 	mov	r17,zero
 8003b4c:	00800044 	movi	r2,1
 8003b50:	b000bf1e 	bne	r22,zero,8003e50 <_dtoa_r+0xdbc>
 8003b54:	1505883a 	add	r2,r2,r20
 8003b58:	108007cc 	andi	r2,r2,31
 8003b5c:	1000aa26 	beq	r2,zero,8003e08 <_dtoa_r+0xd74>
 8003b60:	00c00804 	movi	r3,32
 8003b64:	1887c83a 	sub	r3,r3,r2
 8003b68:	19000150 	cmplti	r4,r3,5
 8003b6c:	2002f61e 	bne	r4,zero,8004748 <_dtoa_r+0x16b4>
 8003b70:	00c00704 	movi	r3,28
 8003b74:	1885c83a 	sub	r2,r3,r2
 8003b78:	d8c00517 	ldw	r3,20(sp)
 8003b7c:	98a7883a 	add	r19,r19,r2
 8003b80:	a0a9883a 	add	r20,r20,r2
 8003b84:	1887883a 	add	r3,r3,r2
 8003b88:	d8c00515 	stw	r3,20(sp)
 8003b8c:	d8800517 	ldw	r2,20(sp)
 8003b90:	00809716 	blt	zero,r2,8003df0 <_dtoa_r+0xd5c>
 8003b94:	0500050e 	bge	zero,r20,8003bac <_dtoa_r+0xb18>
 8003b98:	900b883a 	mov	r5,r18
 8003b9c:	a00d883a 	mov	r6,r20
 8003ba0:	e009883a 	mov	r4,fp
 8003ba4:	800591c0 	call	800591c <__lshift>
 8003ba8:	1025883a 	mov	r18,r2
 8003bac:	d8800917 	ldw	r2,36(sp)
 8003bb0:	10012b1e 	bne	r2,zero,8004060 <_dtoa_r+0xfcc>
 8003bb4:	d8800617 	ldw	r2,24(sp)
 8003bb8:	00810d0e 	bge	zero,r2,8003ff0 <_dtoa_r+0xf5c>
 8003bbc:	d8800417 	ldw	r2,16(sp)
 8003bc0:	10800044 	addi	r2,r2,1
 8003bc4:	d8800415 	stw	r2,16(sp)
 8003bc8:	d8800717 	ldw	r2,28(sp)
 8003bcc:	1000b21e 	bne	r2,zero,8003e98 <_dtoa_r+0xe04>
 8003bd0:	ddc00317 	ldw	r23,12(sp)
 8003bd4:	04400044 	movi	r17,1
 8003bd8:	dcc00617 	ldw	r19,24(sp)
 8003bdc:	00000306 	br	8003bec <_dtoa_r+0xb58>
 8003be0:	80052200 	call	8005220 <__multadd>
 8003be4:	102b883a 	mov	r21,r2
 8003be8:	8c400044 	addi	r17,r17,1
 8003bec:	900b883a 	mov	r5,r18
 8003bf0:	a809883a 	mov	r4,r21
 8003bf4:	8002e600 	call	8002e60 <quorem>
 8003bf8:	10800c04 	addi	r2,r2,48
 8003bfc:	bdc00044 	addi	r23,r23,1
 8003c00:	b8bfffc5 	stb	r2,-1(r23)
 8003c04:	000f883a 	mov	r7,zero
 8003c08:	01800284 	movi	r6,10
 8003c0c:	a80b883a 	mov	r5,r21
 8003c10:	e009883a 	mov	r4,fp
 8003c14:	8cfff216 	blt	r17,r19,8003be0 <_dtoa_r+0xb4c>
 8003c18:	1011883a 	mov	r8,r2
 8003c1c:	0029883a 	mov	r20,zero
 8003c20:	a80b883a 	mov	r5,r21
 8003c24:	01800044 	movi	r6,1
 8003c28:	e009883a 	mov	r4,fp
 8003c2c:	da000115 	stw	r8,4(sp)
 8003c30:	800591c0 	call	800591c <__lshift>
 8003c34:	900b883a 	mov	r5,r18
 8003c38:	1009883a 	mov	r4,r2
 8003c3c:	102b883a 	mov	r21,r2
 8003c40:	8005a580 	call	8005a58 <__mcmp>
 8003c44:	b8ffffc3 	ldbu	r3,-1(r23)
 8003c48:	0081610e 	bge	zero,r2,80041d0 <_dtoa_r+0x113c>
 8003c4c:	d9400317 	ldw	r5,12(sp)
 8003c50:	00000306 	br	8003c60 <_dtoa_r+0xbcc>
 8003c54:	29017726 	beq	r5,r4,8004234 <_dtoa_r+0x11a0>
 8003c58:	20ffffc3 	ldbu	r3,-1(r4)
 8003c5c:	202f883a 	mov	r23,r4
 8003c60:	18803fcc 	andi	r2,r3,255
 8003c64:	1080201c 	xori	r2,r2,128
 8003c68:	10bfe004 	addi	r2,r2,-128
 8003c6c:	10800e60 	cmpeqi	r2,r2,57
 8003c70:	b93fffc4 	addi	r4,r23,-1
 8003c74:	103ff71e 	bne	r2,zero,8003c54 <_dtoa_r+0xbc0>
 8003c78:	18c00044 	addi	r3,r3,1
 8003c7c:	20c00005 	stb	r3,0(r4)
 8003c80:	900b883a 	mov	r5,r18
 8003c84:	e009883a 	mov	r4,fp
 8003c88:	80051fc0 	call	80051fc <_Bfree>
 8003c8c:	803e9326 	beq	r16,zero,80036dc <_dtoa_r+0x648>
 8003c90:	a0000426 	beq	r20,zero,8003ca4 <_dtoa_r+0xc10>
 8003c94:	a4000326 	beq	r20,r16,8003ca4 <_dtoa_r+0xc10>
 8003c98:	a00b883a 	mov	r5,r20
 8003c9c:	e009883a 	mov	r4,fp
 8003ca0:	80051fc0 	call	80051fc <_Bfree>
 8003ca4:	800b883a 	mov	r5,r16
 8003ca8:	e009883a 	mov	r4,fp
 8003cac:	80051fc0 	call	80051fc <_Bfree>
 8003cb0:	003e8a06 	br	80036dc <_dtoa_r+0x648>
 8003cb4:	d8000915 	stw	zero,36(sp)
 8003cb8:	a0003616 	blt	r20,zero,8003d94 <_dtoa_r+0xd00>
 8003cbc:	d8000515 	stw	zero,20(sp)
 8003cc0:	d8c00217 	ldw	r3,8(sp)
 8003cc4:	dd800415 	stw	r22,16(sp)
 8003cc8:	d8000815 	stw	zero,32(sp)
 8003ccc:	188002a8 	cmpgeui	r2,r3,10
 8003cd0:	a5a9883a 	add	r20,r20,r22
 8003cd4:	103d9726 	beq	r2,zero,8003334 <_dtoa_r+0x2a0>
 8003cd8:	00800044 	movi	r2,1
 8003cdc:	d8800715 	stw	r2,28(sp)
 8003ce0:	00bfffc4 	movi	r2,-1
 8003ce4:	04bfffc4 	movi	r18,-1
 8003ce8:	04000044 	movi	r16,1
 8003cec:	d8000215 	stw	zero,8(sp)
 8003cf0:	d8800615 	stw	r2,24(sp)
 8003cf4:	d8001e15 	stw	zero,120(sp)
 8003cf8:	d8800617 	ldw	r2,24(sp)
 8003cfc:	e0001115 	stw	zero,68(fp)
 8003d00:	000b883a 	mov	r5,zero
 8003d04:	d8800b15 	stw	r2,44(sp)
 8003d08:	003daa06 	br	80033b4 <_dtoa_r+0x320>
 8003d0c:	18800160 	cmpeqi	r2,r3,5
 8003d10:	00c00044 	movi	r3,1
 8003d14:	d8c00715 	stw	r3,28(sp)
 8003d18:	10000d26 	beq	r2,zero,8003d50 <_dtoa_r+0xcbc>
 8003d1c:	d8801e17 	ldw	r2,120(sp)
 8003d20:	d8c00417 	ldw	r3,16(sp)
 8003d24:	10c5883a 	add	r2,r2,r3
 8003d28:	d8800b15 	stw	r2,44(sp)
 8003d2c:	10800044 	addi	r2,r2,1
 8003d30:	d8800615 	stw	r2,24(sp)
 8003d34:	100d883a 	mov	r6,r2
 8003d38:	00bd9216 	blt	zero,r2,8003384 <_dtoa_r+0x2f0>
 8003d3c:	01800044 	movi	r6,1
 8003d40:	003d9006 	br	8003384 <_dtoa_r+0x2f0>
 8003d44:	188000a0 	cmpeqi	r2,r3,2
 8003d48:	d8000715 	stw	zero,28(sp)
 8003d4c:	103d881e 	bne	r2,zero,8003370 <_dtoa_r+0x2dc>
 8003d50:	e0001115 	stw	zero,68(fp)
 8003d54:	000b883a 	mov	r5,zero
 8003d58:	e009883a 	mov	r4,fp
 8003d5c:	80051580 	call	8005158 <_Balloc>
 8003d60:	d8800315 	stw	r2,12(sp)
 8003d64:	e0801015 	stw	r2,64(fp)
 8003d68:	00bfffc4 	movi	r2,-1
 8003d6c:	d8800b15 	stw	r2,44(sp)
 8003d70:	00800044 	movi	r2,1
 8003d74:	d8800715 	stw	r2,28(sp)
 8003d78:	00bfffc4 	movi	r2,-1
 8003d7c:	d8001e15 	stw	zero,120(sp)
 8003d80:	d8800615 	stw	r2,24(sp)
 8003d84:	003e8f06 	br	80037c4 <_dtoa_r+0x730>
 8003d88:	00800044 	movi	r2,1
 8003d8c:	d8800915 	stw	r2,36(sp)
 8003d90:	a03d5c0e 	bge	r20,zero,8003304 <_dtoa_r+0x270>
 8003d94:	04800044 	movi	r18,1
 8003d98:	9405c83a 	sub	r2,r18,r16
 8003d9c:	d8800515 	stw	r2,20(sp)
 8003da0:	0029883a 	mov	r20,zero
 8003da4:	003d5806 	br	8003308 <_dtoa_r+0x274>
 8003da8:	b009883a 	mov	r4,r22
 8003dac:	800b7f00 	call	800b7f0 <__floatsidf>
 8003db0:	a00d883a 	mov	r6,r20
 8003db4:	980f883a 	mov	r7,r19
 8003db8:	1009883a 	mov	r4,r2
 8003dbc:	180b883a 	mov	r5,r3
 8003dc0:	800a3700 	call	800a370 <__eqdf2>
 8003dc4:	103d3e26 	beq	r2,zero,80032c0 <_dtoa_r+0x22c>
 8003dc8:	b5bfffc4 	addi	r22,r22,-1
 8003dcc:	003d3c06 	br	80032c0 <_dtoa_r+0x22c>
 8003dd0:	00820074 	movhi	r2,2049
 8003dd4:	10b73204 	addi	r2,r2,-9016
 8003dd8:	d8800315 	stw	r2,12(sp)
 8003ddc:	003cdf06 	br	800315c <_dtoa_r+0xc8>
 8003de0:	dc800817 	ldw	r18,32(sp)
 8003de4:	dcc00517 	ldw	r19,20(sp)
 8003de8:	0021883a 	mov	r16,zero
 8003dec:	003f2f06 	br	8003aac <_dtoa_r+0xa18>
 8003df0:	a80b883a 	mov	r5,r21
 8003df4:	100d883a 	mov	r6,r2
 8003df8:	e009883a 	mov	r4,fp
 8003dfc:	800591c0 	call	800591c <__lshift>
 8003e00:	102b883a 	mov	r21,r2
 8003e04:	003f6306 	br	8003b94 <_dtoa_r+0xb00>
 8003e08:	00800704 	movi	r2,28
 8003e0c:	003f5a06 	br	8003b78 <_dtoa_r+0xae4>
 8003e10:	01000804 	movi	r4,32
 8003e14:	2089c83a 	sub	r4,r4,r2
 8003e18:	d8800117 	ldw	r2,4(sp)
 8003e1c:	1108983a 	sll	r4,r2,r4
 8003e20:	003cf306 	br	80031f0 <_dtoa_r+0x15c>
 8003e24:	04000044 	movi	r16,1
 8003e28:	003d4706 	br	8003348 <_dtoa_r+0x2b4>
 8003e2c:	b00d883a 	mov	r6,r22
 8003e30:	100b883a 	mov	r5,r2
 8003e34:	e009883a 	mov	r4,fp
 8003e38:	80057f40 	call	80057f4 <__pow5mult>
 8003e3c:	1025883a 	mov	r18,r2
 8003e40:	d8800217 	ldw	r2,8(sp)
 8003e44:	10800090 	cmplti	r2,r2,2
 8003e48:	10012f1e 	bne	r2,zero,8004308 <_dtoa_r+0x1274>
 8003e4c:	0023883a 	mov	r17,zero
 8003e50:	90800417 	ldw	r2,16(r18)
 8003e54:	10800104 	addi	r2,r2,4
 8003e58:	100490ba 	slli	r2,r2,2
 8003e5c:	9085883a 	add	r2,r18,r2
 8003e60:	11000017 	ldw	r4,0(r2)
 8003e64:	800546c0 	call	800546c <__hi0bits>
 8003e68:	00c00804 	movi	r3,32
 8003e6c:	1885c83a 	sub	r2,r3,r2
 8003e70:	003f3806 	br	8003b54 <_dtoa_r+0xac0>
 8003e74:	800b883a 	mov	r5,r16
 8003e78:	000f883a 	mov	r7,zero
 8003e7c:	01800284 	movi	r6,10
 8003e80:	e009883a 	mov	r4,fp
 8003e84:	80052200 	call	8005220 <__multadd>
 8003e88:	1021883a 	mov	r16,r2
 8003e8c:	d8800b17 	ldw	r2,44(sp)
 8003e90:	00821b0e 	bge	zero,r2,8004700 <_dtoa_r+0x166c>
 8003e94:	d8800615 	stw	r2,24(sp)
 8003e98:	04c0b316 	blt	zero,r19,8004168 <_dtoa_r+0x10d4>
 8003e9c:	8801341e 	bne	r17,zero,8004370 <_dtoa_r+0x12dc>
 8003ea0:	8027883a 	mov	r19,r16
 8003ea4:	dc400317 	ldw	r17,12(sp)
 8003ea8:	d8c00617 	ldw	r3,24(sp)
 8003eac:	d8800117 	ldw	r2,4(sp)
 8003eb0:	8dffffc4 	addi	r23,r17,-1
 8003eb4:	b8c7883a 	add	r3,r23,r3
 8003eb8:	d8c00615 	stw	r3,24(sp)
 8003ebc:	d8c00217 	ldw	r3,8(sp)
 8003ec0:	1080004c 	andi	r2,r2,1
 8003ec4:	d8800815 	stw	r2,32(sp)
 8003ec8:	10c4b03a 	or	r2,r2,r3
 8003ecc:	d8800715 	stw	r2,28(sp)
 8003ed0:	00002c06 	br	8003f84 <_dtoa_r+0xef0>
 8003ed4:	b80b883a 	mov	r5,r23
 8003ed8:	a809883a 	mov	r4,r21
 8003edc:	da000515 	stw	r8,20(sp)
 8003ee0:	8005a580 	call	8005a58 <__mcmp>
 8003ee4:	b80b883a 	mov	r5,r23
 8003ee8:	e009883a 	mov	r4,fp
 8003eec:	d8800115 	stw	r2,4(sp)
 8003ef0:	80051fc0 	call	80051fc <_Bfree>
 8003ef4:	d8800117 	ldw	r2,4(sp)
 8003ef8:	da000517 	ldw	r8,20(sp)
 8003efc:	1000021e 	bne	r2,zero,8003f08 <_dtoa_r+0xe74>
 8003f00:	d8c00717 	ldw	r3,28(sp)
 8003f04:	1801f226 	beq	r3,zero,80046d0 <_dtoa_r+0x163c>
 8003f08:	8dc00044 	addi	r23,r17,1
 8003f0c:	a0010516 	blt	r20,zero,8004324 <_dtoa_r+0x1290>
 8003f10:	d8c00217 	ldw	r3,8(sp)
 8003f14:	a0e8b03a 	or	r20,r20,r3
 8003f18:	d8c00817 	ldw	r3,32(sp)
 8003f1c:	1d28b03a 	or	r20,r3,r20
 8003f20:	a0010026 	beq	r20,zero,8004324 <_dtoa_r+0x1290>
 8003f24:	00812816 	blt	zero,r2,80043c8 <_dtoa_r+0x1334>
 8003f28:	d8800617 	ldw	r2,24(sp)
 8003f2c:	8a000005 	stb	r8,0(r17)
 8003f30:	14412926 	beq	r2,r17,80043d8 <_dtoa_r+0x1344>
 8003f34:	a80b883a 	mov	r5,r21
 8003f38:	000f883a 	mov	r7,zero
 8003f3c:	01800284 	movi	r6,10
 8003f40:	e009883a 	mov	r4,fp
 8003f44:	80052200 	call	8005220 <__multadd>
 8003f48:	102b883a 	mov	r21,r2
 8003f4c:	000f883a 	mov	r7,zero
 8003f50:	01800284 	movi	r6,10
 8003f54:	800b883a 	mov	r5,r16
 8003f58:	e009883a 	mov	r4,fp
 8003f5c:	84c02026 	beq	r16,r19,8003fe0 <_dtoa_r+0xf4c>
 8003f60:	80052200 	call	8005220 <__multadd>
 8003f64:	980b883a 	mov	r5,r19
 8003f68:	000f883a 	mov	r7,zero
 8003f6c:	01800284 	movi	r6,10
 8003f70:	e009883a 	mov	r4,fp
 8003f74:	1021883a 	mov	r16,r2
 8003f78:	80052200 	call	8005220 <__multadd>
 8003f7c:	1027883a 	mov	r19,r2
 8003f80:	b823883a 	mov	r17,r23
 8003f84:	900b883a 	mov	r5,r18
 8003f88:	a809883a 	mov	r4,r21
 8003f8c:	8002e600 	call	8002e60 <quorem>
 8003f90:	800b883a 	mov	r5,r16
 8003f94:	a809883a 	mov	r4,r21
 8003f98:	102d883a 	mov	r22,r2
 8003f9c:	8005a580 	call	8005a58 <__mcmp>
 8003fa0:	980d883a 	mov	r6,r19
 8003fa4:	900b883a 	mov	r5,r18
 8003fa8:	e009883a 	mov	r4,fp
 8003fac:	1029883a 	mov	r20,r2
 8003fb0:	8005ab00 	call	8005ab0 <__mdiff>
 8003fb4:	102f883a 	mov	r23,r2
 8003fb8:	10800317 	ldw	r2,12(r2)
 8003fbc:	b2000c04 	addi	r8,r22,48
 8003fc0:	103fc426 	beq	r2,zero,8003ed4 <_dtoa_r+0xe40>
 8003fc4:	b80b883a 	mov	r5,r23
 8003fc8:	e009883a 	mov	r4,fp
 8003fcc:	da000115 	stw	r8,4(sp)
 8003fd0:	80051fc0 	call	80051fc <_Bfree>
 8003fd4:	00800044 	movi	r2,1
 8003fd8:	da000117 	ldw	r8,4(sp)
 8003fdc:	003fca06 	br	8003f08 <_dtoa_r+0xe74>
 8003fe0:	80052200 	call	8005220 <__multadd>
 8003fe4:	1021883a 	mov	r16,r2
 8003fe8:	1027883a 	mov	r19,r2
 8003fec:	003fe406 	br	8003f80 <_dtoa_r+0xeec>
 8003ff0:	d8800217 	ldw	r2,8(sp)
 8003ff4:	108000d0 	cmplti	r2,r2,3
 8003ff8:	10004b1e 	bne	r2,zero,8004128 <_dtoa_r+0x1094>
 8003ffc:	d8800617 	ldw	r2,24(sp)
 8004000:	103e0d1e 	bne	r2,zero,8003838 <_dtoa_r+0x7a4>
 8004004:	900b883a 	mov	r5,r18
 8004008:	e009883a 	mov	r4,fp
 800400c:	000f883a 	mov	r7,zero
 8004010:	01800144 	movi	r6,5
 8004014:	80052200 	call	8005220 <__multadd>
 8004018:	100b883a 	mov	r5,r2
 800401c:	a809883a 	mov	r4,r21
 8004020:	1025883a 	mov	r18,r2
 8004024:	8005a580 	call	8005a58 <__mcmp>
 8004028:	00be030e 	bge	zero,r2,8003838 <_dtoa_r+0x7a4>
 800402c:	d8c00317 	ldw	r3,12(sp)
 8004030:	00800c44 	movi	r2,49
 8004034:	18800005 	stb	r2,0(r3)
 8004038:	d8800417 	ldw	r2,16(sp)
 800403c:	1dc00044 	addi	r23,r3,1
 8004040:	14400044 	addi	r17,r2,1
 8004044:	900b883a 	mov	r5,r18
 8004048:	e009883a 	mov	r4,fp
 800404c:	80051fc0 	call	80051fc <_Bfree>
 8004050:	88800044 	addi	r2,r17,1
 8004054:	d8800415 	stw	r2,16(sp)
 8004058:	803f121e 	bne	r16,zero,8003ca4 <_dtoa_r+0xc10>
 800405c:	003d9f06 	br	80036dc <_dtoa_r+0x648>
 8004060:	900b883a 	mov	r5,r18
 8004064:	a809883a 	mov	r4,r21
 8004068:	8005a580 	call	8005a58 <__mcmp>
 800406c:	103ed10e 	bge	r2,zero,8003bb4 <_dtoa_r+0xb20>
 8004070:	a80b883a 	mov	r5,r21
 8004074:	000f883a 	mov	r7,zero
 8004078:	01800284 	movi	r6,10
 800407c:	e009883a 	mov	r4,fp
 8004080:	80052200 	call	8005220 <__multadd>
 8004084:	102b883a 	mov	r21,r2
 8004088:	d8800417 	ldw	r2,16(sp)
 800408c:	153fffc4 	addi	r20,r2,-1
 8004090:	d8800717 	ldw	r2,28(sp)
 8004094:	103f771e 	bne	r2,zero,8003e74 <_dtoa_r+0xde0>
 8004098:	d8800b17 	ldw	r2,44(sp)
 800409c:	0081910e 	bge	zero,r2,80046e4 <_dtoa_r+0x1650>
 80040a0:	d8800615 	stw	r2,24(sp)
 80040a4:	003eca06 	br	8003bd0 <_dtoa_r+0xb3c>
 80040a8:	d9800817 	ldw	r6,32(sp)
 80040ac:	a80b883a 	mov	r5,r21
 80040b0:	e009883a 	mov	r4,fp
 80040b4:	80057f40 	call	80057f4 <__pow5mult>
 80040b8:	102b883a 	mov	r21,r2
 80040bc:	003e9a06 	br	8003b28 <_dtoa_r+0xa94>
 80040c0:	00820074 	movhi	r2,2049
 80040c4:	1007883a 	mov	r3,r2
 80040c8:	18f73b04 	addi	r3,r3,-8980
 80040cc:	00820074 	movhi	r2,2049
 80040d0:	d8c00315 	stw	r3,12(sp)
 80040d4:	10b73bc4 	addi	r2,r2,-8977
 80040d8:	003da506 	br	8003770 <_dtoa_r+0x6dc>
 80040dc:	d8800117 	ldw	r2,4(sp)
 80040e0:	103e991e 	bne	r2,zero,8003b48 <_dtoa_r+0xab4>
 80040e4:	00800434 	movhi	r2,16
 80040e8:	10bfffc4 	addi	r2,r2,-1
 80040ec:	8884703a 	and	r2,r17,r2
 80040f0:	103e951e 	bne	r2,zero,8003b48 <_dtoa_r+0xab4>
 80040f4:	8c5ffc2c 	andhi	r17,r17,32752
 80040f8:	883e9326 	beq	r17,zero,8003b48 <_dtoa_r+0xab4>
 80040fc:	d8800517 	ldw	r2,20(sp)
 8004100:	a5000044 	addi	r20,r20,1
 8004104:	04400044 	movi	r17,1
 8004108:	10800044 	addi	r2,r2,1
 800410c:	d8800515 	stw	r2,20(sp)
 8004110:	003e8e06 	br	8003b4c <_dtoa_r+0xab8>
 8004114:	00800044 	movi	r2,1
 8004118:	04800044 	movi	r18,1
 800411c:	d8800615 	stw	r2,24(sp)
 8004120:	d8801e15 	stw	r2,120(sp)
 8004124:	003ef406 	br	8003cf8 <_dtoa_r+0xc64>
 8004128:	d8800417 	ldw	r2,16(sp)
 800412c:	10800044 	addi	r2,r2,1
 8004130:	d8800415 	stw	r2,16(sp)
 8004134:	d8800717 	ldw	r2,28(sp)
 8004138:	103f571e 	bne	r2,zero,8003e98 <_dtoa_r+0xe04>
 800413c:	900b883a 	mov	r5,r18
 8004140:	a809883a 	mov	r4,r21
 8004144:	8002e600 	call	8002e60 <quorem>
 8004148:	12000c04 	addi	r8,r2,48
 800414c:	d8800317 	ldw	r2,12(sp)
 8004150:	0029883a 	mov	r20,zero
 8004154:	15c00044 	addi	r23,r2,1
 8004158:	12000005 	stb	r8,0(r2)
 800415c:	003eb006 	br	8003c20 <_dtoa_r+0xb8c>
 8004160:	a005883a 	mov	r2,r20
 8004164:	003e5506 	br	8003abc <_dtoa_r+0xa28>
 8004168:	800b883a 	mov	r5,r16
 800416c:	980d883a 	mov	r6,r19
 8004170:	e009883a 	mov	r4,fp
 8004174:	800591c0 	call	800591c <__lshift>
 8004178:	1021883a 	mov	r16,r2
 800417c:	003f4706 	br	8003e9c <_dtoa_r+0xe08>
 8004180:	14a5c83a 	sub	r18,r2,r18
 8004184:	003e3e06 	br	8003a80 <_dtoa_r+0x9ec>
 8004188:	00820074 	movhi	r2,2049
 800418c:	10b74c04 	addi	r2,r2,-8912
 8004190:	11800817 	ldw	r6,32(r2)
 8004194:	11c00917 	ldw	r7,36(r2)
 8004198:	d9000117 	ldw	r4,4(sp)
 800419c:	880b883a 	mov	r5,r17
 80041a0:	da400e15 	stw	r9,56(sp)
 80041a4:	da800d15 	stw	r10,52(sp)
 80041a8:	8009a0c0 	call	8009a0c <__divdf3>
 80041ac:	d8800c15 	stw	r2,48(sp)
 80041b0:	1827883a 	mov	r19,r3
 80041b4:	bdc003cc 	andi	r23,r23,15
 80041b8:	040000c4 	movi	r16,3
 80041bc:	da800d17 	ldw	r10,52(sp)
 80041c0:	da400e17 	ldw	r9,56(sp)
 80041c4:	003c9206 	br	8003410 <_dtoa_r+0x37c>
 80041c8:	d8000715 	stw	zero,28(sp)
 80041cc:	003ed306 	br	8003d1c <_dtoa_r+0xc88>
 80041d0:	1000031e 	bne	r2,zero,80041e0 <_dtoa_r+0x114c>
 80041d4:	da000117 	ldw	r8,4(sp)
 80041d8:	4200004c 	andi	r8,r8,1
 80041dc:	403e9b1e 	bne	r8,zero,8003c4c <_dtoa_r+0xbb8>
 80041e0:	1805883a 	mov	r2,r3
 80041e4:	00000206 	br	80041f0 <_dtoa_r+0x115c>
 80041e8:	b8bfff83 	ldbu	r2,-2(r23)
 80041ec:	182f883a 	mov	r23,r3
 80041f0:	10803fcc 	andi	r2,r2,255
 80041f4:	1080201c 	xori	r2,r2,128
 80041f8:	10bfe004 	addi	r2,r2,-128
 80041fc:	10800c18 	cmpnei	r2,r2,48
 8004200:	b8ffffc4 	addi	r3,r23,-1
 8004204:	103ff826 	beq	r2,zero,80041e8 <_dtoa_r+0x1154>
 8004208:	003e9d06 	br	8003c80 <_dtoa_r+0xbec>
 800420c:	d8c00a17 	ldw	r3,40(sp)
 8004210:	1800bc26 	beq	r3,zero,8004504 <_dtoa_r+0x1470>
 8004214:	d8c00517 	ldw	r3,20(sp)
 8004218:	10810cc4 	addi	r2,r2,1075
 800421c:	a0a9883a 	add	r20,r20,r2
 8004220:	1885883a 	add	r2,r3,r2
 8004224:	1827883a 	mov	r19,r3
 8004228:	dc800817 	ldw	r18,32(sp)
 800422c:	d8800515 	stw	r2,20(sp)
 8004230:	003e1a06 	br	8003a9c <_dtoa_r+0xa08>
 8004234:	d8c00317 	ldw	r3,12(sp)
 8004238:	00800c44 	movi	r2,49
 800423c:	18800005 	stb	r2,0(r3)
 8004240:	d8800417 	ldw	r2,16(sp)
 8004244:	10800044 	addi	r2,r2,1
 8004248:	d8800415 	stw	r2,16(sp)
 800424c:	003e8c06 	br	8003c80 <_dtoa_r+0xbec>
 8004250:	8009883a 	mov	r4,r16
 8004254:	800b7f00 	call	800b7f0 <__floatsidf>
 8004258:	900d883a 	mov	r6,r18
 800425c:	980f883a 	mov	r7,r19
 8004260:	1009883a 	mov	r4,r2
 8004264:	180b883a 	mov	r5,r3
 8004268:	800a5d00 	call	800a5d0 <__muldf3>
 800426c:	000d883a 	mov	r6,zero
 8004270:	01d00734 	movhi	r7,16412
 8004274:	1009883a 	mov	r4,r2
 8004278:	180b883a 	mov	r5,r3
 800427c:	800906c0 	call	800906c <__adddf3>
 8004280:	d8800c15 	stw	r2,48(sp)
 8004284:	00bf3034 	movhi	r2,64704
 8004288:	1885883a 	add	r2,r3,r2
 800428c:	d8800d15 	stw	r2,52(sp)
 8004290:	9009883a 	mov	r4,r18
 8004294:	980b883a 	mov	r5,r19
 8004298:	000d883a 	mov	r6,zero
 800429c:	01d00534 	movhi	r7,16404
 80042a0:	800adb00 	call	800adb0 <__subdf3>
 80042a4:	ddc00c17 	ldw	r23,48(sp)
 80042a8:	dcc00d17 	ldw	r19,52(sp)
 80042ac:	1009883a 	mov	r4,r2
 80042b0:	b80d883a 	mov	r6,r23
 80042b4:	980f883a 	mov	r7,r19
 80042b8:	180b883a 	mov	r5,r3
 80042bc:	1025883a 	mov	r18,r2
 80042c0:	1821883a 	mov	r16,r3
 80042c4:	800a3f00 	call	800a3f0 <__gedf2>
 80042c8:	0080ee16 	blt	zero,r2,8004684 <_dtoa_r+0x15f0>
 80042cc:	99e0003c 	xorhi	r7,r19,32768
 80042d0:	b80d883a 	mov	r6,r23
 80042d4:	9009883a 	mov	r4,r18
 80042d8:	800b883a 	mov	r5,r16
 80042dc:	800a4e00 	call	800a4e0 <__ledf2>
 80042e0:	103d380e 	bge	r2,zero,80037c4 <_dtoa_r+0x730>
 80042e4:	0025883a 	mov	r18,zero
 80042e8:	0021883a 	mov	r16,zero
 80042ec:	003d5206 	br	8003838 <_dtoa_r+0x7a4>
 80042f0:	d8800417 	ldw	r2,16(sp)
 80042f4:	1000ad1e 	bne	r2,zero,80045ac <_dtoa_r+0x1518>
 80042f8:	dc800117 	ldw	r18,4(sp)
 80042fc:	8827883a 	mov	r19,r17
 8004300:	04000084 	movi	r16,2
 8004304:	003c5b06 	br	8003474 <_dtoa_r+0x3e0>
 8004308:	d8800117 	ldw	r2,4(sp)
 800430c:	103ecf1e 	bne	r2,zero,8003e4c <_dtoa_r+0xdb8>
 8004310:	00800434 	movhi	r2,16
 8004314:	10bfffc4 	addi	r2,r2,-1
 8004318:	8884703a 	and	r2,r17,r2
 800431c:	103f7526 	beq	r2,zero,80040f4 <_dtoa_r+0x1060>
 8004320:	003eca06 	br	8003e4c <_dtoa_r+0xdb8>
 8004324:	00800e0e 	bge	zero,r2,8004360 <_dtoa_r+0x12cc>
 8004328:	a80b883a 	mov	r5,r21
 800432c:	01800044 	movi	r6,1
 8004330:	e009883a 	mov	r4,fp
 8004334:	da000115 	stw	r8,4(sp)
 8004338:	800591c0 	call	800591c <__lshift>
 800433c:	900b883a 	mov	r5,r18
 8004340:	1009883a 	mov	r4,r2
 8004344:	102b883a 	mov	r21,r2
 8004348:	8005a580 	call	8005a58 <__mcmp>
 800434c:	da000117 	ldw	r8,4(sp)
 8004350:	0080d50e 	bge	zero,r2,80046a8 <_dtoa_r+0x1614>
 8004354:	42000e60 	cmpeqi	r8,r8,57
 8004358:	4000c31e 	bne	r8,zero,8004668 <_dtoa_r+0x15d4>
 800435c:	b2000c44 	addi	r8,r22,49
 8004360:	8029883a 	mov	r20,r16
 8004364:	8a000005 	stb	r8,0(r17)
 8004368:	9821883a 	mov	r16,r19
 800436c:	003e4406 	br	8003c80 <_dtoa_r+0xbec>
 8004370:	81400117 	ldw	r5,4(r16)
 8004374:	e009883a 	mov	r4,fp
 8004378:	80051580 	call	8005158 <_Balloc>
 800437c:	81800417 	ldw	r6,16(r16)
 8004380:	81400304 	addi	r5,r16,12
 8004384:	11000304 	addi	r4,r2,12
 8004388:	31800084 	addi	r6,r6,2
 800438c:	300c90ba 	slli	r6,r6,2
 8004390:	1023883a 	mov	r17,r2
 8004394:	80050580 	call	8005058 <memcpy>
 8004398:	01800044 	movi	r6,1
 800439c:	880b883a 	mov	r5,r17
 80043a0:	e009883a 	mov	r4,fp
 80043a4:	800591c0 	call	800591c <__lshift>
 80043a8:	1027883a 	mov	r19,r2
 80043ac:	003ebd06 	br	8003ea4 <_dtoa_r+0xe10>
 80043b0:	dd400117 	ldw	r21,4(sp)
 80043b4:	003cc906 	br	80036dc <_dtoa_r+0x648>
 80043b8:	d8800517 	ldw	r2,20(sp)
 80043bc:	d8c00617 	ldw	r3,24(sp)
 80043c0:	10e7c83a 	sub	r19,r2,r3
 80043c4:	003db506 	br	8003a9c <_dtoa_r+0xa08>
 80043c8:	40800e58 	cmpnei	r2,r8,57
 80043cc:	1000a626 	beq	r2,zero,8004668 <_dtoa_r+0x15d4>
 80043d0:	42000044 	addi	r8,r8,1
 80043d4:	003fe206 	br	8004360 <_dtoa_r+0x12cc>
 80043d8:	8029883a 	mov	r20,r16
 80043dc:	9821883a 	mov	r16,r19
 80043e0:	003e0f06 	br	8003c20 <_dtoa_r+0xb8c>
 80043e4:	d9000c17 	ldw	r4,48(sp)
 80043e8:	d9400d17 	ldw	r5,52(sp)
 80043ec:	da401015 	stw	r9,64(sp)
 80043f0:	800a5d00 	call	800a5d0 <__muldf3>
 80043f4:	d9000e17 	ldw	r4,56(sp)
 80043f8:	d8c00d15 	stw	r3,52(sp)
 80043fc:	da401017 	ldw	r9,64(sp)
 8004400:	d8c00317 	ldw	r3,12(sp)
 8004404:	d8800c15 	stw	r2,48(sp)
 8004408:	20800058 	cmpnei	r2,r4,1
 800440c:	1a400005 	stb	r9,0(r3)
 8004410:	1907883a 	add	r3,r3,r4
 8004414:	1809883a 	mov	r4,r3
 8004418:	10001d26 	beq	r2,zero,8004490 <_dtoa_r+0x13fc>
 800441c:	8007883a 	mov	r3,r16
 8004420:	9005883a 	mov	r2,r18
 8004424:	dc400e15 	stw	r17,56(sp)
 8004428:	2021883a 	mov	r16,r4
 800442c:	000d883a 	mov	r6,zero
 8004430:	01d00934 	movhi	r7,16420
 8004434:	1009883a 	mov	r4,r2
 8004438:	180b883a 	mov	r5,r3
 800443c:	800a5d00 	call	800a5d0 <__muldf3>
 8004440:	180b883a 	mov	r5,r3
 8004444:	1009883a 	mov	r4,r2
 8004448:	1825883a 	mov	r18,r3
 800444c:	1023883a 	mov	r17,r2
 8004450:	800b7700 	call	800b770 <__fixdfsi>
 8004454:	1009883a 	mov	r4,r2
 8004458:	1027883a 	mov	r19,r2
 800445c:	800b7f00 	call	800b7f0 <__floatsidf>
 8004460:	100d883a 	mov	r6,r2
 8004464:	180f883a 	mov	r7,r3
 8004468:	8809883a 	mov	r4,r17
 800446c:	900b883a 	mov	r5,r18
 8004470:	bdc00044 	addi	r23,r23,1
 8004474:	9cc00c04 	addi	r19,r19,48
 8004478:	800adb00 	call	800adb0 <__subdf3>
 800447c:	bcffffc5 	stb	r19,-1(r23)
 8004480:	bc3fea1e 	bne	r23,r16,800442c <_dtoa_r+0x1398>
 8004484:	dc400e17 	ldw	r17,56(sp)
 8004488:	1025883a 	mov	r18,r2
 800448c:	1821883a 	mov	r16,r3
 8004490:	d9000c17 	ldw	r4,48(sp)
 8004494:	d9400d17 	ldw	r5,52(sp)
 8004498:	000d883a 	mov	r6,zero
 800449c:	01cff834 	movhi	r7,16352
 80044a0:	800906c0 	call	800906c <__adddf3>
 80044a4:	100d883a 	mov	r6,r2
 80044a8:	180f883a 	mov	r7,r3
 80044ac:	9009883a 	mov	r4,r18
 80044b0:	800b883a 	mov	r5,r16
 80044b4:	800a3f00 	call	800a3f0 <__gedf2>
 80044b8:	00807516 	blt	zero,r2,8004690 <_dtoa_r+0x15fc>
 80044bc:	d9800c17 	ldw	r6,48(sp)
 80044c0:	d9c00d17 	ldw	r7,52(sp)
 80044c4:	0009883a 	mov	r4,zero
 80044c8:	014ff834 	movhi	r5,16352
 80044cc:	800adb00 	call	800adb0 <__subdf3>
 80044d0:	100d883a 	mov	r6,r2
 80044d4:	180f883a 	mov	r7,r3
 80044d8:	9009883a 	mov	r4,r18
 80044dc:	800b883a 	mov	r5,r16
 80044e0:	800a4e00 	call	800a4e0 <__ledf2>
 80044e4:	103cb70e 	bge	r2,zero,80037c4 <_dtoa_r+0x730>
 80044e8:	00000106 	br	80044f0 <_dtoa_r+0x145c>
 80044ec:	182f883a 	mov	r23,r3
 80044f0:	b8bfffc7 	ldb	r2,-1(r23)
 80044f4:	b8ffffc4 	addi	r3,r23,-1
 80044f8:	10800c20 	cmpeqi	r2,r2,48
 80044fc:	103ffb1e 	bne	r2,zero,80044ec <_dtoa_r+0x1458>
 8004500:	003c7306 	br	80036d0 <_dtoa_r+0x63c>
 8004504:	d8c01217 	ldw	r3,72(sp)
 8004508:	d9000517 	ldw	r4,20(sp)
 800450c:	00800d84 	movi	r2,54
 8004510:	10c5c83a 	sub	r2,r2,r3
 8004514:	a0a9883a 	add	r20,r20,r2
 8004518:	2085883a 	add	r2,r4,r2
 800451c:	2027883a 	mov	r19,r4
 8004520:	dc800817 	ldw	r18,32(sp)
 8004524:	d8800515 	stw	r2,20(sp)
 8004528:	003d5c06 	br	8003a9c <_dtoa_r+0xa08>
 800452c:	d8800617 	ldw	r2,24(sp)
 8004530:	103f4726 	beq	r2,zero,8004250 <_dtoa_r+0x11bc>
 8004534:	ddc00b17 	ldw	r23,44(sp)
 8004538:	05fca20e 	bge	zero,r23,80037c4 <_dtoa_r+0x730>
 800453c:	980b883a 	mov	r5,r19
 8004540:	000d883a 	mov	r6,zero
 8004544:	01d00934 	movhi	r7,16420
 8004548:	9009883a 	mov	r4,r18
 800454c:	800a5d00 	call	800a5d0 <__muldf3>
 8004550:	81000044 	addi	r4,r16,1
 8004554:	1025883a 	mov	r18,r2
 8004558:	1827883a 	mov	r19,r3
 800455c:	800b7f00 	call	800b7f0 <__floatsidf>
 8004560:	900d883a 	mov	r6,r18
 8004564:	980f883a 	mov	r7,r19
 8004568:	1009883a 	mov	r4,r2
 800456c:	180b883a 	mov	r5,r3
 8004570:	800a5d00 	call	800a5d0 <__muldf3>
 8004574:	000d883a 	mov	r6,zero
 8004578:	01d00734 	movhi	r7,16412
 800457c:	1009883a 	mov	r4,r2
 8004580:	180b883a 	mov	r5,r3
 8004584:	800906c0 	call	800906c <__adddf3>
 8004588:	d8800c15 	stw	r2,48(sp)
 800458c:	d8800417 	ldw	r2,16(sp)
 8004590:	ddc00e15 	stw	r23,56(sp)
 8004594:	10bfffc4 	addi	r2,r2,-1
 8004598:	d8800f15 	stw	r2,60(sp)
 800459c:	00bf3034 	movhi	r2,64704
 80045a0:	1885883a 	add	r2,r3,r2
 80045a4:	d8800d15 	stw	r2,52(sp)
 80045a8:	003bd006 	br	80034ec <_dtoa_r+0x458>
 80045ac:	d8800417 	ldw	r2,16(sp)
 80045b0:	d9000117 	ldw	r4,4(sp)
 80045b4:	880b883a 	mov	r5,r17
 80045b8:	00afc83a 	sub	r23,zero,r2
 80045bc:	b88003cc 	andi	r2,r23,15
 80045c0:	100690fa 	slli	r3,r2,3
 80045c4:	00820074 	movhi	r2,2049
 80045c8:	10b75604 	addi	r2,r2,-8872
 80045cc:	10c5883a 	add	r2,r2,r3
 80045d0:	11800017 	ldw	r6,0(r2)
 80045d4:	11c00117 	ldw	r7,4(r2)
 80045d8:	b82fd13a 	srai	r23,r23,4
 80045dc:	800a5d00 	call	800a5d0 <__muldf3>
 80045e0:	1025883a 	mov	r18,r2
 80045e4:	1827883a 	mov	r19,r3
 80045e8:	b8004a26 	beq	r23,zero,8004714 <_dtoa_r+0x1680>
 80045ec:	02020074 	movhi	r8,2049
 80045f0:	04000084 	movi	r16,2
 80045f4:	42374c04 	addi	r8,r8,-8912
 80045f8:	dc400c15 	stw	r17,48(sp)
 80045fc:	000f883a 	mov	r7,zero
 8004600:	8023883a 	mov	r17,r16
 8004604:	4021883a 	mov	r16,r8
 8004608:	b980004c 	andi	r6,r23,1
 800460c:	1009883a 	mov	r4,r2
 8004610:	b82fd07a 	srai	r23,r23,1
 8004614:	180b883a 	mov	r5,r3
 8004618:	30000526 	beq	r6,zero,8004630 <_dtoa_r+0x159c>
 800461c:	81c00117 	ldw	r7,4(r16)
 8004620:	81800017 	ldw	r6,0(r16)
 8004624:	8c400044 	addi	r17,r17,1
 8004628:	800a5d00 	call	800a5d0 <__muldf3>
 800462c:	01c00044 	movi	r7,1
 8004630:	84000204 	addi	r16,r16,8
 8004634:	b83ff41e 	bne	r23,zero,8004608 <_dtoa_r+0x1574>
 8004638:	39c03fcc 	andi	r7,r7,255
 800463c:	8821883a 	mov	r16,r17
 8004640:	dc400c17 	ldw	r17,48(sp)
 8004644:	383b8b26 	beq	r7,zero,8003474 <_dtoa_r+0x3e0>
 8004648:	1025883a 	mov	r18,r2
 800464c:	1827883a 	mov	r19,r3
 8004650:	003b8806 	br	8003474 <_dtoa_r+0x3e0>
 8004654:	d8800417 	ldw	r2,16(sp)
 8004658:	02000c44 	movi	r8,49
 800465c:	10800044 	addi	r2,r2,1
 8004660:	d8800415 	stw	r2,16(sp)
 8004664:	003cf606 	br	8003a40 <_dtoa_r+0x9ac>
 8004668:	00800e44 	movi	r2,57
 800466c:	8029883a 	mov	r20,r16
 8004670:	88800005 	stb	r2,0(r17)
 8004674:	9821883a 	mov	r16,r19
 8004678:	00c00e44 	movi	r3,57
 800467c:	d9400317 	ldw	r5,12(sp)
 8004680:	003d7706 	br	8003c60 <_dtoa_r+0xbcc>
 8004684:	0025883a 	mov	r18,zero
 8004688:	0021883a 	mov	r16,zero
 800468c:	003e6706 	br	800402c <_dtoa_r+0xf98>
 8004690:	d8800f17 	ldw	r2,60(sp)
 8004694:	ba3fffc3 	ldbu	r8,-1(r23)
 8004698:	d9000317 	ldw	r4,12(sp)
 800469c:	10800044 	addi	r2,r2,1
 80046a0:	d8800415 	stw	r2,16(sp)
 80046a4:	003cdf06 	br	8003a24 <_dtoa_r+0x990>
 80046a8:	103f2d1e 	bne	r2,zero,8004360 <_dtoa_r+0x12cc>
 80046ac:	4080004c 	andi	r2,r8,1
 80046b0:	103f281e 	bne	r2,zero,8004354 <_dtoa_r+0x12c0>
 80046b4:	003f2a06 	br	8004360 <_dtoa_r+0x12cc>
 80046b8:	d8800f17 	ldw	r2,60(sp)
 80046bc:	8811883a 	mov	r8,r17
 80046c0:	d9000317 	ldw	r4,12(sp)
 80046c4:	10800044 	addi	r2,r2,1
 80046c8:	d8800415 	stw	r2,16(sp)
 80046cc:	003cd506 	br	8003a24 <_dtoa_r+0x990>
 80046d0:	40800e60 	cmpeqi	r2,r8,57
 80046d4:	8dc00044 	addi	r23,r17,1
 80046d8:	103fe31e 	bne	r2,zero,8004668 <_dtoa_r+0x15d4>
 80046dc:	053f1f16 	blt	zero,r20,800435c <_dtoa_r+0x12c8>
 80046e0:	003f1f06 	br	8004360 <_dtoa_r+0x12cc>
 80046e4:	d8800217 	ldw	r2,8(sp)
 80046e8:	108000c8 	cmpgei	r2,r2,3
 80046ec:	103e9326 	beq	r2,zero,800413c <_dtoa_r+0x10a8>
 80046f0:	d8800b17 	ldw	r2,44(sp)
 80046f4:	dd000415 	stw	r20,16(sp)
 80046f8:	d8800615 	stw	r2,24(sp)
 80046fc:	003e3f06 	br	8003ffc <_dtoa_r+0xf68>
 8004700:	d8800217 	ldw	r2,8(sp)
 8004704:	108000c8 	cmpgei	r2,r2,3
 8004708:	103ff91e 	bne	r2,zero,80046f0 <_dtoa_r+0x165c>
 800470c:	d8800b17 	ldw	r2,44(sp)
 8004710:	003de006 	br	8003e94 <_dtoa_r+0xe00>
 8004714:	04000084 	movi	r16,2
 8004718:	003b5606 	br	8003474 <_dtoa_r+0x3e0>
 800471c:	d8800f17 	ldw	r2,60(sp)
 8004720:	d9000317 	ldw	r4,12(sp)
 8004724:	10800044 	addi	r2,r2,1
 8004728:	d8800415 	stw	r2,16(sp)
 800472c:	003cbd06 	br	8003a24 <_dtoa_r+0x990>
 8004730:	00820074 	movhi	r2,2049
 8004734:	10b73c04 	addi	r2,r2,-8976
 8004738:	d8800315 	stw	r2,12(sp)
 800473c:	003a8706 	br	800315c <_dtoa_r+0xc8>
 8004740:	000b883a 	mov	r5,zero
 8004744:	003b1b06 	br	80033b4 <_dtoa_r+0x320>
 8004748:	18c00120 	cmpeqi	r3,r3,4
 800474c:	183d0f1e 	bne	r3,zero,8003b8c <_dtoa_r+0xaf8>
 8004750:	00c00f04 	movi	r3,60
 8004754:	1885c83a 	sub	r2,r3,r2
 8004758:	003d0706 	br	8003b78 <_dtoa_r+0xae4>

0800475c <__localeconv_l>:
 800475c:	20803c04 	addi	r2,r4,240
 8004760:	f800283a 	ret

08004764 <_localeconv_r>:
 8004764:	00820074 	movhi	r2,2049
 8004768:	10bbdd04 	addi	r2,r2,-4236
 800476c:	f800283a 	ret

08004770 <localeconv>:
 8004770:	00820074 	movhi	r2,2049
 8004774:	10bbdd04 	addi	r2,r2,-4236
 8004778:	f800283a 	ret

0800477c <_malloc_r>:
 800477c:	defff604 	addi	sp,sp,-40
 8004780:	dc400115 	stw	r17,4(sp)
 8004784:	2c4002c4 	addi	r17,r5,11
 8004788:	dc800215 	stw	r18,8(sp)
 800478c:	dfc00915 	stw	ra,36(sp)
 8004790:	df000815 	stw	fp,32(sp)
 8004794:	ddc00715 	stw	r23,28(sp)
 8004798:	dd800615 	stw	r22,24(sp)
 800479c:	dd400515 	stw	r21,20(sp)
 80047a0:	dd000415 	stw	r20,16(sp)
 80047a4:	dcc00315 	stw	r19,12(sp)
 80047a8:	dc000015 	stw	r16,0(sp)
 80047ac:	888005e8 	cmpgeui	r2,r17,23
 80047b0:	2025883a 	mov	r18,r4
 80047b4:	10001b1e 	bne	r2,zero,8004824 <_malloc_r+0xa8>
 80047b8:	29400468 	cmpgeui	r5,r5,17
 80047bc:	2800951e 	bne	r5,zero,8004a14 <_malloc_r+0x298>
 80047c0:	800bb100 	call	800bb10 <__malloc_lock>
 80047c4:	04400404 	movi	r17,16
 80047c8:	00800604 	movi	r2,24
 80047cc:	01800084 	movi	r6,2
 80047d0:	04c20074 	movhi	r19,2049
 80047d4:	9cfa9f04 	addi	r19,r19,-5508
 80047d8:	9885883a 	add	r2,r19,r2
 80047dc:	14000117 	ldw	r16,4(r2)
 80047e0:	10fffe04 	addi	r3,r2,-8
 80047e4:	80c09e26 	beq	r16,r3,8004a60 <_malloc_r+0x2e4>
 80047e8:	80800117 	ldw	r2,4(r16)
 80047ec:	81000317 	ldw	r4,12(r16)
 80047f0:	00ffff04 	movi	r3,-4
 80047f4:	10c4703a 	and	r2,r2,r3
 80047f8:	81400217 	ldw	r5,8(r16)
 80047fc:	8085883a 	add	r2,r16,r2
 8004800:	10c00117 	ldw	r3,4(r2)
 8004804:	29000315 	stw	r4,12(r5)
 8004808:	21400215 	stw	r5,8(r4)
 800480c:	18c00054 	ori	r3,r3,1
 8004810:	10c00115 	stw	r3,4(r2)
 8004814:	9009883a 	mov	r4,r18
 8004818:	800bb340 	call	800bb34 <__malloc_unlock>
 800481c:	80800204 	addi	r2,r16,8
 8004820:	00007f06 	br	8004a20 <_malloc_r+0x2a4>
 8004824:	00bffe04 	movi	r2,-8
 8004828:	88a2703a 	and	r17,r17,r2
 800482c:	88007916 	blt	r17,zero,8004a14 <_malloc_r+0x298>
 8004830:	89407836 	bltu	r17,r5,8004a14 <_malloc_r+0x298>
 8004834:	800bb100 	call	800bb10 <__malloc_lock>
 8004838:	88807e28 	cmpgeui	r2,r17,504
 800483c:	10013326 	beq	r2,zero,8004d0c <_malloc_r+0x590>
 8004840:	8804d27a 	srli	r2,r17,9
 8004844:	10008226 	beq	r2,zero,8004a50 <_malloc_r+0x2d4>
 8004848:	10c00168 	cmpgeui	r3,r2,5
 800484c:	1801151e 	bne	r3,zero,8004ca4 <_malloc_r+0x528>
 8004850:	8804d1ba 	srli	r2,r17,6
 8004854:	11800e44 	addi	r6,r2,57
 8004858:	300a90fa 	slli	r5,r6,3
 800485c:	12000e04 	addi	r8,r2,56
 8004860:	04c20074 	movhi	r19,2049
 8004864:	9cfa9f04 	addi	r19,r19,-5508
 8004868:	994b883a 	add	r5,r19,r5
 800486c:	2c000117 	ldw	r16,4(r5)
 8004870:	297ffe04 	addi	r5,r5,-8
 8004874:	2c001126 	beq	r5,r16,80048bc <_malloc_r+0x140>
 8004878:	80800117 	ldw	r2,4(r16)
 800487c:	00ffff04 	movi	r3,-4
 8004880:	10c4703a 	and	r2,r2,r3
 8004884:	1447c83a 	sub	r3,r2,r17
 8004888:	19000408 	cmpgei	r4,r3,16
 800488c:	2000e81e 	bne	r4,zero,8004c30 <_malloc_r+0x4b4>
 8004890:	1800e90e 	bge	r3,zero,8004c38 <_malloc_r+0x4bc>
 8004894:	01ffff04 	movi	r7,-4
 8004898:	00000606 	br	80048b4 <_malloc_r+0x138>
 800489c:	80800117 	ldw	r2,4(r16)
 80048a0:	11c4703a 	and	r2,r2,r7
 80048a4:	1447c83a 	sub	r3,r2,r17
 80048a8:	19000408 	cmpgei	r4,r3,16
 80048ac:	2000e01e 	bne	r4,zero,8004c30 <_malloc_r+0x4b4>
 80048b0:	1800e10e 	bge	r3,zero,8004c38 <_malloc_r+0x4bc>
 80048b4:	84000317 	ldw	r16,12(r16)
 80048b8:	2c3ff81e 	bne	r5,r16,800489c <_malloc_r+0x120>
 80048bc:	9c000417 	ldw	r16,16(r19)
 80048c0:	02020074 	movhi	r8,2049
 80048c4:	423aa104 	addi	r8,r8,-5500
 80048c8:	82006c26 	beq	r16,r8,8004a7c <_malloc_r+0x300>
 80048cc:	80c00117 	ldw	r3,4(r16)
 80048d0:	00bfff04 	movi	r2,-4
 80048d4:	1884703a 	and	r2,r3,r2
 80048d8:	1447c83a 	sub	r3,r2,r17
 80048dc:	19000410 	cmplti	r4,r3,16
 80048e0:	20011526 	beq	r4,zero,8004d38 <_malloc_r+0x5bc>
 80048e4:	9a000515 	stw	r8,20(r19)
 80048e8:	9a000415 	stw	r8,16(r19)
 80048ec:	18010a0e 	bge	r3,zero,8004d18 <_malloc_r+0x59c>
 80048f0:	10c08028 	cmpgeui	r3,r2,512
 80048f4:	1800d21e 	bne	r3,zero,8004c40 <_malloc_r+0x4c4>
 80048f8:	1004d0fa 	srli	r2,r2,3
 80048fc:	99400117 	ldw	r5,4(r19)
 8004900:	10c00044 	addi	r3,r2,1
 8004904:	1009d0ba 	srai	r4,r2,2
 8004908:	180690fa 	slli	r3,r3,3
 800490c:	00800044 	movi	r2,1
 8004910:	1104983a 	sll	r2,r2,r4
 8004914:	98c7883a 	add	r3,r19,r3
 8004918:	19000017 	ldw	r4,0(r3)
 800491c:	1144b03a 	or	r2,r2,r5
 8004920:	197ffe04 	addi	r5,r3,-8
 8004924:	81400315 	stw	r5,12(r16)
 8004928:	81000215 	stw	r4,8(r16)
 800492c:	98800115 	stw	r2,4(r19)
 8004930:	1c000015 	stw	r16,0(r3)
 8004934:	24000315 	stw	r16,12(r4)
 8004938:	3007d0ba 	srai	r3,r6,2
 800493c:	01000044 	movi	r4,1
 8004940:	20c8983a 	sll	r4,r4,r3
 8004944:	11005236 	bltu	r2,r4,8004a90 <_malloc_r+0x314>
 8004948:	2086703a 	and	r3,r4,r2
 800494c:	18000a1e 	bne	r3,zero,8004978 <_malloc_r+0x1fc>
 8004950:	00ffff04 	movi	r3,-4
 8004954:	2109883a 	add	r4,r4,r4
 8004958:	30cc703a 	and	r6,r6,r3
 800495c:	2086703a 	and	r3,r4,r2
 8004960:	31800104 	addi	r6,r6,4
 8004964:	1800041e 	bne	r3,zero,8004978 <_malloc_r+0x1fc>
 8004968:	2109883a 	add	r4,r4,r4
 800496c:	2086703a 	and	r3,r4,r2
 8004970:	31800104 	addi	r6,r6,4
 8004974:	183ffc26 	beq	r3,zero,8004968 <_malloc_r+0x1ec>
 8004978:	027fff04 	movi	r9,-4
 800497c:	301490fa 	slli	r10,r6,3
 8004980:	3017883a 	mov	r11,r6
 8004984:	9a95883a 	add	r10,r19,r10
 8004988:	500f883a 	mov	r7,r10
 800498c:	3c000317 	ldw	r16,12(r7)
 8004990:	3c00cd26 	beq	r7,r16,8004cc8 <_malloc_r+0x54c>
 8004994:	80800117 	ldw	r2,4(r16)
 8004998:	1244703a 	and	r2,r2,r9
 800499c:	1447c83a 	sub	r3,r2,r17
 80049a0:	19400408 	cmpgei	r5,r3,16
 80049a4:	2800081e 	bne	r5,zero,80049c8 <_malloc_r+0x24c>
 80049a8:	1800cc0e 	bge	r3,zero,8004cdc <_malloc_r+0x560>
 80049ac:	84000317 	ldw	r16,12(r16)
 80049b0:	3c00c526 	beq	r7,r16,8004cc8 <_malloc_r+0x54c>
 80049b4:	80800117 	ldw	r2,4(r16)
 80049b8:	1244703a 	and	r2,r2,r9
 80049bc:	1447c83a 	sub	r3,r2,r17
 80049c0:	19400410 	cmplti	r5,r3,16
 80049c4:	283ff81e 	bne	r5,zero,80049a8 <_malloc_r+0x22c>
 80049c8:	81000317 	ldw	r4,12(r16)
 80049cc:	81400217 	ldw	r5,8(r16)
 80049d0:	89800054 	ori	r6,r17,1
 80049d4:	81800115 	stw	r6,4(r16)
 80049d8:	29000315 	stw	r4,12(r5)
 80049dc:	21400215 	stw	r5,8(r4)
 80049e0:	8463883a 	add	r17,r16,r17
 80049e4:	9c400515 	stw	r17,20(r19)
 80049e8:	9c400415 	stw	r17,16(r19)
 80049ec:	19000054 	ori	r4,r3,1
 80049f0:	89000115 	stw	r4,4(r17)
 80049f4:	8085883a 	add	r2,r16,r2
 80049f8:	8a000315 	stw	r8,12(r17)
 80049fc:	8a000215 	stw	r8,8(r17)
 8004a00:	10c00015 	stw	r3,0(r2)
 8004a04:	9009883a 	mov	r4,r18
 8004a08:	800bb340 	call	800bb34 <__malloc_unlock>
 8004a0c:	80800204 	addi	r2,r16,8
 8004a10:	00000306 	br	8004a20 <_malloc_r+0x2a4>
 8004a14:	00800304 	movi	r2,12
 8004a18:	90800015 	stw	r2,0(r18)
 8004a1c:	0005883a 	mov	r2,zero
 8004a20:	dfc00917 	ldw	ra,36(sp)
 8004a24:	df000817 	ldw	fp,32(sp)
 8004a28:	ddc00717 	ldw	r23,28(sp)
 8004a2c:	dd800617 	ldw	r22,24(sp)
 8004a30:	dd400517 	ldw	r21,20(sp)
 8004a34:	dd000417 	ldw	r20,16(sp)
 8004a38:	dcc00317 	ldw	r19,12(sp)
 8004a3c:	dc800217 	ldw	r18,8(sp)
 8004a40:	dc400117 	ldw	r17,4(sp)
 8004a44:	dc000017 	ldw	r16,0(sp)
 8004a48:	dec00a04 	addi	sp,sp,40
 8004a4c:	f800283a 	ret
 8004a50:	01408004 	movi	r5,512
 8004a54:	01801004 	movi	r6,64
 8004a58:	02000fc4 	movi	r8,63
 8004a5c:	003f8006 	br	8004860 <_malloc_r+0xe4>
 8004a60:	14000317 	ldw	r16,12(r2)
 8004a64:	31800084 	addi	r6,r6,2
 8004a68:	143f5f1e 	bne	r2,r16,80047e8 <_malloc_r+0x6c>
 8004a6c:	9c000417 	ldw	r16,16(r19)
 8004a70:	02020074 	movhi	r8,2049
 8004a74:	423aa104 	addi	r8,r8,-5500
 8004a78:	823f941e 	bne	r16,r8,80048cc <_malloc_r+0x150>
 8004a7c:	3007d0ba 	srai	r3,r6,2
 8004a80:	01000044 	movi	r4,1
 8004a84:	98800117 	ldw	r2,4(r19)
 8004a88:	20c8983a 	sll	r4,r4,r3
 8004a8c:	113fae2e 	bgeu	r2,r4,8004948 <_malloc_r+0x1cc>
 8004a90:	9c000217 	ldw	r16,8(r19)
 8004a94:	00bfff04 	movi	r2,-4
 8004a98:	85000117 	ldw	r20,4(r16)
 8004a9c:	a0ac703a 	and	r22,r20,r2
 8004aa0:	b4400336 	bltu	r22,r17,8004ab0 <_malloc_r+0x334>
 8004aa4:	b445c83a 	sub	r2,r22,r17
 8004aa8:	10c00408 	cmpgei	r3,r2,16
 8004aac:	1800561e 	bne	r3,zero,8004c08 <_malloc_r+0x48c>
 8004ab0:	00820074 	movhi	r2,2049
 8004ab4:	10808317 	ldw	r2,524(r2)
 8004ab8:	00c20074 	movhi	r3,2049
 8004abc:	1d089e17 	ldw	r20,8824(r3)
 8004ac0:	10bfffd8 	cmpnei	r2,r2,-1
 8004ac4:	85ab883a 	add	r21,r16,r22
 8004ac8:	8d29883a 	add	r20,r17,r20
 8004acc:	1000c826 	beq	r2,zero,8004df0 <_malloc_r+0x674>
 8004ad0:	a50403c4 	addi	r20,r20,4111
 8004ad4:	00bc0004 	movi	r2,-4096
 8004ad8:	a0a8703a 	and	r20,r20,r2
 8004adc:	a00b883a 	mov	r5,r20
 8004ae0:	9009883a 	mov	r4,r18
 8004ae4:	800610c0 	call	800610c <_sbrk_r>
 8004ae8:	102f883a 	mov	r23,r2
 8004aec:	10bfffd8 	cmpnei	r2,r2,-1
 8004af0:	10009a26 	beq	r2,zero,8004d5c <_malloc_r+0x5e0>
 8004af4:	bd409836 	bltu	r23,r21,8004d58 <_malloc_r+0x5dc>
 8004af8:	00820074 	movhi	r2,2049
 8004afc:	1088a817 	ldw	r2,8864(r2)
 8004b00:	00c20074 	movhi	r3,2049
 8004b04:	a085883a 	add	r2,r20,r2
 8004b08:	1888a815 	stw	r2,8864(r3)
 8004b0c:	1007883a 	mov	r3,r2
 8004b10:	adc0dd26 	beq	r21,r23,8004e88 <_malloc_r+0x70c>
 8004b14:	00820074 	movhi	r2,2049
 8004b18:	10808317 	ldw	r2,524(r2)
 8004b1c:	10bfffd8 	cmpnei	r2,r2,-1
 8004b20:	1000e026 	beq	r2,zero,8004ea4 <_malloc_r+0x728>
 8004b24:	bd6bc83a 	sub	r21,r23,r21
 8004b28:	a8c7883a 	add	r3,r21,r3
 8004b2c:	00820074 	movhi	r2,2049
 8004b30:	10c8a815 	stw	r3,8864(r2)
 8004b34:	bf0001cc 	andi	fp,r23,7
 8004b38:	e000b626 	beq	fp,zero,8004e14 <_malloc_r+0x698>
 8004b3c:	bf2fc83a 	sub	r23,r23,fp
 8004b40:	bdc00204 	addi	r23,r23,8
 8004b44:	00840204 	movi	r2,4104
 8004b48:	1705c83a 	sub	r2,r2,fp
 8004b4c:	bd29883a 	add	r20,r23,r20
 8004b50:	1505c83a 	sub	r2,r2,r20
 8004b54:	1543ffcc 	andi	r21,r2,4095
 8004b58:	a80b883a 	mov	r5,r21
 8004b5c:	9009883a 	mov	r4,r18
 8004b60:	800610c0 	call	800610c <_sbrk_r>
 8004b64:	10ffffe0 	cmpeqi	r3,r2,-1
 8004b68:	1800e41e 	bne	r3,zero,8004efc <_malloc_r+0x780>
 8004b6c:	15c5c83a 	sub	r2,r2,r23
 8004b70:	1569883a 	add	r20,r2,r21
 8004b74:	00820074 	movhi	r2,2049
 8004b78:	1088a817 	ldw	r2,8864(r2)
 8004b7c:	9dc00215 	stw	r23,8(r19)
 8004b80:	a5000054 	ori	r20,r20,1
 8004b84:	a885883a 	add	r2,r21,r2
 8004b88:	00c20074 	movhi	r3,2049
 8004b8c:	1888a815 	stw	r2,8864(r3)
 8004b90:	bd000115 	stw	r20,4(r23)
 8004b94:	84c0c626 	beq	r16,r19,8004eb0 <_malloc_r+0x734>
 8004b98:	b0c00428 	cmpgeui	r3,r22,16
 8004b9c:	1800c626 	beq	r3,zero,8004eb8 <_malloc_r+0x73c>
 8004ba0:	81000117 	ldw	r4,4(r16)
 8004ba4:	017ffe04 	movi	r5,-8
 8004ba8:	b0fffd04 	addi	r3,r22,-12
 8004bac:	1946703a 	and	r3,r3,r5
 8004bb0:	2100004c 	andi	r4,r4,1
 8004bb4:	20c8b03a 	or	r4,r4,r3
 8004bb8:	81000115 	stw	r4,4(r16)
 8004bbc:	01400144 	movi	r5,5
 8004bc0:	80c9883a 	add	r4,r16,r3
 8004bc4:	21400115 	stw	r5,4(r4)
 8004bc8:	21400215 	stw	r5,8(r4)
 8004bcc:	18c00428 	cmpgeui	r3,r3,16
 8004bd0:	1800cf1e 	bne	r3,zero,8004f10 <_malloc_r+0x794>
 8004bd4:	bd000117 	ldw	r20,4(r23)
 8004bd8:	b821883a 	mov	r16,r23
 8004bdc:	00c20074 	movhi	r3,2049
 8004be0:	18c89d17 	ldw	r3,8820(r3)
 8004be4:	1880022e 	bgeu	r3,r2,8004bf0 <_malloc_r+0x474>
 8004be8:	00c20074 	movhi	r3,2049
 8004bec:	18889d15 	stw	r2,8820(r3)
 8004bf0:	00c20074 	movhi	r3,2049
 8004bf4:	18c89c17 	ldw	r3,8816(r3)
 8004bf8:	18805a2e 	bgeu	r3,r2,8004d64 <_malloc_r+0x5e8>
 8004bfc:	00c20074 	movhi	r3,2049
 8004c00:	18889c15 	stw	r2,8816(r3)
 8004c04:	00005706 	br	8004d64 <_malloc_r+0x5e8>
 8004c08:	88c00054 	ori	r3,r17,1
 8004c0c:	80c00115 	stw	r3,4(r16)
 8004c10:	8463883a 	add	r17,r16,r17
 8004c14:	10800054 	ori	r2,r2,1
 8004c18:	9c400215 	stw	r17,8(r19)
 8004c1c:	88800115 	stw	r2,4(r17)
 8004c20:	9009883a 	mov	r4,r18
 8004c24:	800bb340 	call	800bb34 <__malloc_unlock>
 8004c28:	80800204 	addi	r2,r16,8
 8004c2c:	003f7c06 	br	8004a20 <_malloc_r+0x2a4>
 8004c30:	400d883a 	mov	r6,r8
 8004c34:	003f2106 	br	80048bc <_malloc_r+0x140>
 8004c38:	81000317 	ldw	r4,12(r16)
 8004c3c:	003eee06 	br	80047f8 <_malloc_r+0x7c>
 8004c40:	1006d27a 	srli	r3,r2,9
 8004c44:	19000168 	cmpgeui	r4,r3,5
 8004c48:	20003e26 	beq	r4,zero,8004d44 <_malloc_r+0x5c8>
 8004c4c:	19000568 	cmpgeui	r4,r3,21
 8004c50:	20007a1e 	bne	r4,zero,8004e3c <_malloc_r+0x6c0>
 8004c54:	19401704 	addi	r5,r3,92
 8004c58:	280a90fa 	slli	r5,r5,3
 8004c5c:	190016c4 	addi	r4,r3,91
 8004c60:	994b883a 	add	r5,r19,r5
 8004c64:	28c00017 	ldw	r3,0(r5)
 8004c68:	297ffe04 	addi	r5,r5,-8
 8004c6c:	28c06226 	beq	r5,r3,8004df8 <_malloc_r+0x67c>
 8004c70:	01ffff04 	movi	r7,-4
 8004c74:	19000117 	ldw	r4,4(r3)
 8004c78:	21c8703a 	and	r4,r4,r7
 8004c7c:	1100022e 	bgeu	r2,r4,8004c88 <_malloc_r+0x50c>
 8004c80:	18c00217 	ldw	r3,8(r3)
 8004c84:	28fffb1e 	bne	r5,r3,8004c74 <_malloc_r+0x4f8>
 8004c88:	19400317 	ldw	r5,12(r3)
 8004c8c:	98800117 	ldw	r2,4(r19)
 8004c90:	81400315 	stw	r5,12(r16)
 8004c94:	80c00215 	stw	r3,8(r16)
 8004c98:	2c000215 	stw	r16,8(r5)
 8004c9c:	1c000315 	stw	r16,12(r3)
 8004ca0:	003f2506 	br	8004938 <_malloc_r+0x1bc>
 8004ca4:	10c00568 	cmpgeui	r3,r2,21
 8004ca8:	18003826 	beq	r3,zero,8004d8c <_malloc_r+0x610>
 8004cac:	10c01568 	cmpgeui	r3,r2,85
 8004cb0:	1800691e 	bne	r3,zero,8004e58 <_malloc_r+0x6dc>
 8004cb4:	8804d33a 	srli	r2,r17,12
 8004cb8:	11801bc4 	addi	r6,r2,111
 8004cbc:	12001b84 	addi	r8,r2,110
 8004cc0:	300a90fa 	slli	r5,r6,3
 8004cc4:	003ee606 	br	8004860 <_malloc_r+0xe4>
 8004cc8:	5ac00044 	addi	r11,r11,1
 8004ccc:	588000cc 	andi	r2,r11,3
 8004cd0:	39c00204 	addi	r7,r7,8
 8004cd4:	103f2d1e 	bne	r2,zero,800498c <_malloc_r+0x210>
 8004cd8:	00003306 	br	8004da8 <_malloc_r+0x62c>
 8004cdc:	8085883a 	add	r2,r16,r2
 8004ce0:	10c00117 	ldw	r3,4(r2)
 8004ce4:	81000317 	ldw	r4,12(r16)
 8004ce8:	81400217 	ldw	r5,8(r16)
 8004cec:	18c00054 	ori	r3,r3,1
 8004cf0:	10c00115 	stw	r3,4(r2)
 8004cf4:	29000315 	stw	r4,12(r5)
 8004cf8:	21400215 	stw	r5,8(r4)
 8004cfc:	9009883a 	mov	r4,r18
 8004d00:	800bb340 	call	800bb34 <__malloc_unlock>
 8004d04:	80800204 	addi	r2,r16,8
 8004d08:	003f4506 	br	8004a20 <_malloc_r+0x2a4>
 8004d0c:	880cd0fa 	srli	r6,r17,3
 8004d10:	88800204 	addi	r2,r17,8
 8004d14:	003eae06 	br	80047d0 <_malloc_r+0x54>
 8004d18:	8085883a 	add	r2,r16,r2
 8004d1c:	10c00117 	ldw	r3,4(r2)
 8004d20:	9009883a 	mov	r4,r18
 8004d24:	18c00054 	ori	r3,r3,1
 8004d28:	10c00115 	stw	r3,4(r2)
 8004d2c:	800bb340 	call	800bb34 <__malloc_unlock>
 8004d30:	80800204 	addi	r2,r16,8
 8004d34:	003f3a06 	br	8004a20 <_malloc_r+0x2a4>
 8004d38:	89000054 	ori	r4,r17,1
 8004d3c:	81000115 	stw	r4,4(r16)
 8004d40:	003f2706 	br	80049e0 <_malloc_r+0x264>
 8004d44:	1006d1ba 	srli	r3,r2,6
 8004d48:	19400e44 	addi	r5,r3,57
 8004d4c:	19000e04 	addi	r4,r3,56
 8004d50:	280a90fa 	slli	r5,r5,3
 8004d54:	003fc206 	br	8004c60 <_malloc_r+0x4e4>
 8004d58:	84c04626 	beq	r16,r19,8004e74 <_malloc_r+0x6f8>
 8004d5c:	9c000217 	ldw	r16,8(r19)
 8004d60:	85000117 	ldw	r20,4(r16)
 8004d64:	00bfff04 	movi	r2,-4
 8004d68:	a0a8703a 	and	r20,r20,r2
 8004d6c:	a445c83a 	sub	r2,r20,r17
 8004d70:	a4400236 	bltu	r20,r17,8004d7c <_malloc_r+0x600>
 8004d74:	10c00408 	cmpgei	r3,r2,16
 8004d78:	183fa31e 	bne	r3,zero,8004c08 <_malloc_r+0x48c>
 8004d7c:	9009883a 	mov	r4,r18
 8004d80:	800bb340 	call	800bb34 <__malloc_unlock>
 8004d84:	0005883a 	mov	r2,zero
 8004d88:	003f2506 	br	8004a20 <_malloc_r+0x2a4>
 8004d8c:	11801704 	addi	r6,r2,92
 8004d90:	120016c4 	addi	r8,r2,91
 8004d94:	300a90fa 	slli	r5,r6,3
 8004d98:	003eb106 	br	8004860 <_malloc_r+0xe4>
 8004d9c:	50800217 	ldw	r2,8(r10)
 8004da0:	31bfffc4 	addi	r6,r6,-1
 8004da4:	1280701e 	bne	r2,r10,8004f68 <_malloc_r+0x7ec>
 8004da8:	308000cc 	andi	r2,r6,3
 8004dac:	52bffe04 	addi	r10,r10,-8
 8004db0:	103ffa1e 	bne	r2,zero,8004d9c <_malloc_r+0x620>
 8004db4:	98c00117 	ldw	r3,4(r19)
 8004db8:	0104303a 	nor	r2,zero,r4
 8004dbc:	10c4703a 	and	r2,r2,r3
 8004dc0:	98800115 	stw	r2,4(r19)
 8004dc4:	2109883a 	add	r4,r4,r4
 8004dc8:	113f3136 	bltu	r2,r4,8004a90 <_malloc_r+0x314>
 8004dcc:	203f3026 	beq	r4,zero,8004a90 <_malloc_r+0x314>
 8004dd0:	2086703a 	and	r3,r4,r2
 8004dd4:	1800041e 	bne	r3,zero,8004de8 <_malloc_r+0x66c>
 8004dd8:	2109883a 	add	r4,r4,r4
 8004ddc:	2086703a 	and	r3,r4,r2
 8004de0:	5ac00104 	addi	r11,r11,4
 8004de4:	183ffc26 	beq	r3,zero,8004dd8 <_malloc_r+0x65c>
 8004de8:	580d883a 	mov	r6,r11
 8004dec:	003ee306 	br	800497c <_malloc_r+0x200>
 8004df0:	a5000404 	addi	r20,r20,16
 8004df4:	003f3906 	br	8004adc <_malloc_r+0x360>
 8004df8:	2009d0ba 	srai	r4,r4,2
 8004dfc:	00800044 	movi	r2,1
 8004e00:	99c00117 	ldw	r7,4(r19)
 8004e04:	1104983a 	sll	r2,r2,r4
 8004e08:	11c4b03a 	or	r2,r2,r7
 8004e0c:	98800115 	stw	r2,4(r19)
 8004e10:	003f9f06 	br	8004c90 <_malloc_r+0x514>
 8004e14:	bd05883a 	add	r2,r23,r20
 8004e18:	0085c83a 	sub	r2,zero,r2
 8004e1c:	1543ffcc 	andi	r21,r2,4095
 8004e20:	a80b883a 	mov	r5,r21
 8004e24:	9009883a 	mov	r4,r18
 8004e28:	800610c0 	call	800610c <_sbrk_r>
 8004e2c:	10ffffe0 	cmpeqi	r3,r2,-1
 8004e30:	183f4e26 	beq	r3,zero,8004b6c <_malloc_r+0x3f0>
 8004e34:	002b883a 	mov	r21,zero
 8004e38:	003f4e06 	br	8004b74 <_malloc_r+0x3f8>
 8004e3c:	19001568 	cmpgeui	r4,r3,85
 8004e40:	2000201e 	bne	r4,zero,8004ec4 <_malloc_r+0x748>
 8004e44:	1006d33a 	srli	r3,r2,12
 8004e48:	19401bc4 	addi	r5,r3,111
 8004e4c:	19001b84 	addi	r4,r3,110
 8004e50:	280a90fa 	slli	r5,r5,3
 8004e54:	003f8206 	br	8004c60 <_malloc_r+0x4e4>
 8004e58:	10c05568 	cmpgeui	r3,r2,341
 8004e5c:	1800201e 	bne	r3,zero,8004ee0 <_malloc_r+0x764>
 8004e60:	8804d3fa 	srli	r2,r17,15
 8004e64:	11801e04 	addi	r6,r2,120
 8004e68:	12001dc4 	addi	r8,r2,119
 8004e6c:	300a90fa 	slli	r5,r6,3
 8004e70:	003e7b06 	br	8004860 <_malloc_r+0xe4>
 8004e74:	00820074 	movhi	r2,2049
 8004e78:	10c8a817 	ldw	r3,8864(r2)
 8004e7c:	a0c7883a 	add	r3,r20,r3
 8004e80:	10c8a815 	stw	r3,8864(r2)
 8004e84:	003f2306 	br	8004b14 <_malloc_r+0x398>
 8004e88:	a903ffcc 	andi	r4,r21,4095
 8004e8c:	203f211e 	bne	r4,zero,8004b14 <_malloc_r+0x398>
 8004e90:	9c000217 	ldw	r16,8(r19)
 8004e94:	b529883a 	add	r20,r22,r20
 8004e98:	a5000054 	ori	r20,r20,1
 8004e9c:	85000115 	stw	r20,4(r16)
 8004ea0:	003f4e06 	br	8004bdc <_malloc_r+0x460>
 8004ea4:	00820074 	movhi	r2,2049
 8004ea8:	15c08315 	stw	r23,524(r2)
 8004eac:	003f2106 	br	8004b34 <_malloc_r+0x3b8>
 8004eb0:	b821883a 	mov	r16,r23
 8004eb4:	003f4906 	br	8004bdc <_malloc_r+0x460>
 8004eb8:	00800044 	movi	r2,1
 8004ebc:	b8800115 	stw	r2,4(r23)
 8004ec0:	003fae06 	br	8004d7c <_malloc_r+0x600>
 8004ec4:	19005568 	cmpgeui	r4,r3,341
 8004ec8:	2000191e 	bne	r4,zero,8004f30 <_malloc_r+0x7b4>
 8004ecc:	1006d3fa 	srli	r3,r2,15
 8004ed0:	19401e04 	addi	r5,r3,120
 8004ed4:	19001dc4 	addi	r4,r3,119
 8004ed8:	280a90fa 	slli	r5,r5,3
 8004edc:	003f6006 	br	8004c60 <_malloc_r+0x4e4>
 8004ee0:	10815568 	cmpgeui	r2,r2,1365
 8004ee4:	1000191e 	bne	r2,zero,8004f4c <_malloc_r+0x7d0>
 8004ee8:	8804d4ba 	srli	r2,r17,18
 8004eec:	11801f44 	addi	r6,r2,125
 8004ef0:	12001f04 	addi	r8,r2,124
 8004ef4:	300a90fa 	slli	r5,r6,3
 8004ef8:	003e5906 	br	8004860 <_malloc_r+0xe4>
 8004efc:	e73ffe04 	addi	fp,fp,-8
 8004f00:	a729883a 	add	r20,r20,fp
 8004f04:	a5e9c83a 	sub	r20,r20,r23
 8004f08:	002b883a 	mov	r21,zero
 8004f0c:	003f1906 	br	8004b74 <_malloc_r+0x3f8>
 8004f10:	81400204 	addi	r5,r16,8
 8004f14:	9009883a 	mov	r4,r18
 8004f18:	80076480 	call	8007648 <_free_r>
 8004f1c:	9c000217 	ldw	r16,8(r19)
 8004f20:	00820074 	movhi	r2,2049
 8004f24:	1088a817 	ldw	r2,8864(r2)
 8004f28:	85000117 	ldw	r20,4(r16)
 8004f2c:	003f2b06 	br	8004bdc <_malloc_r+0x460>
 8004f30:	18c15568 	cmpgeui	r3,r3,1365
 8004f34:	1800091e 	bne	r3,zero,8004f5c <_malloc_r+0x7e0>
 8004f38:	1006d4ba 	srli	r3,r2,18
 8004f3c:	19401f44 	addi	r5,r3,125
 8004f40:	19001f04 	addi	r4,r3,124
 8004f44:	280a90fa 	slli	r5,r5,3
 8004f48:	003f4506 	br	8004c60 <_malloc_r+0x4e4>
 8004f4c:	0140fe04 	movi	r5,1016
 8004f50:	01801fc4 	movi	r6,127
 8004f54:	02001f84 	movi	r8,126
 8004f58:	003e4106 	br	8004860 <_malloc_r+0xe4>
 8004f5c:	0140fe04 	movi	r5,1016
 8004f60:	01001f84 	movi	r4,126
 8004f64:	003f3e06 	br	8004c60 <_malloc_r+0x4e4>
 8004f68:	98800117 	ldw	r2,4(r19)
 8004f6c:	003f9506 	br	8004dc4 <_malloc_r+0x648>

08004f70 <memchr>:
 8004f70:	208000cc 	andi	r2,r4,3
 8004f74:	280f883a 	mov	r7,r5
 8004f78:	10003526 	beq	r2,zero,8005050 <memchr+0xe0>
 8004f7c:	30bfffc4 	addi	r2,r6,-1
 8004f80:	30001926 	beq	r6,zero,8004fe8 <memchr+0x78>
 8004f84:	20c00003 	ldbu	r3,0(r4)
 8004f88:	29803fcc 	andi	r6,r5,255
 8004f8c:	30c0061e 	bne	r6,r3,8004fa8 <memchr+0x38>
 8004f90:	00001706 	br	8004ff0 <memchr+0x80>
 8004f94:	10bfffc4 	addi	r2,r2,-1
 8004f98:	10ffffe0 	cmpeqi	r3,r2,-1
 8004f9c:	1800121e 	bne	r3,zero,8004fe8 <memchr+0x78>
 8004fa0:	20c00003 	ldbu	r3,0(r4)
 8004fa4:	19801226 	beq	r3,r6,8004ff0 <memchr+0x80>
 8004fa8:	21000044 	addi	r4,r4,1
 8004fac:	20c000cc 	andi	r3,r4,3
 8004fb0:	183ff81e 	bne	r3,zero,8004f94 <memchr+0x24>
 8004fb4:	10c00128 	cmpgeui	r3,r2,4
 8004fb8:	18000f1e 	bne	r3,zero,8004ff8 <memchr+0x88>
 8004fbc:	10000a26 	beq	r2,zero,8004fe8 <memchr+0x78>
 8004fc0:	20c00003 	ldbu	r3,0(r4)
 8004fc4:	29403fcc 	andi	r5,r5,255
 8004fc8:	19400926 	beq	r3,r5,8004ff0 <memchr+0x80>
 8004fcc:	2085883a 	add	r2,r4,r2
 8004fd0:	39403fcc 	andi	r5,r7,255
 8004fd4:	00000206 	br	8004fe0 <memchr+0x70>
 8004fd8:	20c00003 	ldbu	r3,0(r4)
 8004fdc:	19400426 	beq	r3,r5,8004ff0 <memchr+0x80>
 8004fe0:	21000044 	addi	r4,r4,1
 8004fe4:	113ffc1e 	bne	r2,r4,8004fd8 <memchr+0x68>
 8004fe8:	0005883a 	mov	r2,zero
 8004fec:	f800283a 	ret
 8004ff0:	2005883a 	mov	r2,r4
 8004ff4:	f800283a 	ret
 8004ff8:	280c923a 	slli	r6,r5,8
 8004ffc:	2a403fcc 	andi	r9,r5,255
 8005000:	02bfbff4 	movhi	r10,65279
 8005004:	31bfffcc 	andi	r6,r6,65535
 8005008:	3246b03a 	or	r3,r6,r9
 800500c:	1812943a 	slli	r9,r3,16
 8005010:	02202074 	movhi	r8,32897
 8005014:	52bfbfc4 	addi	r10,r10,-257
 8005018:	48d2b03a 	or	r9,r9,r3
 800501c:	42202004 	addi	r8,r8,-32640
 8005020:	20c00017 	ldw	r3,0(r4)
 8005024:	48c6f03a 	xor	r3,r9,r3
 8005028:	1a8d883a 	add	r6,r3,r10
 800502c:	00c6303a 	nor	r3,zero,r3
 8005030:	30c6703a 	and	r3,r6,r3
 8005034:	1a06703a 	and	r3,r3,r8
 8005038:	183fe11e 	bne	r3,zero,8004fc0 <memchr+0x50>
 800503c:	10bfff04 	addi	r2,r2,-4
 8005040:	10c00128 	cmpgeui	r3,r2,4
 8005044:	21000104 	addi	r4,r4,4
 8005048:	183ff51e 	bne	r3,zero,8005020 <memchr+0xb0>
 800504c:	003fdb06 	br	8004fbc <memchr+0x4c>
 8005050:	3005883a 	mov	r2,r6
 8005054:	003fd706 	br	8004fb4 <memchr+0x44>

08005058 <memcpy>:
 8005058:	30c00430 	cmpltui	r3,r6,16
 800505c:	2005883a 	mov	r2,r4
 8005060:	18002d1e 	bne	r3,zero,8005118 <memcpy+0xc0>
 8005064:	2906b03a 	or	r3,r5,r4
 8005068:	18c000cc 	andi	r3,r3,3
 800506c:	1800351e 	bne	r3,zero,8005144 <memcpy+0xec>
 8005070:	32fffc04 	addi	r11,r6,-16
 8005074:	5816d13a 	srli	r11,r11,4
 8005078:	2007883a 	mov	r3,r4
 800507c:	280f883a 	mov	r7,r5
 8005080:	5ac00044 	addi	r11,r11,1
 8005084:	5816913a 	slli	r11,r11,4
 8005088:	22c9883a 	add	r4,r4,r11
 800508c:	3a000017 	ldw	r8,0(r7)
 8005090:	3a800117 	ldw	r10,4(r7)
 8005094:	3a400217 	ldw	r9,8(r7)
 8005098:	39c00404 	addi	r7,r7,16
 800509c:	1a000015 	stw	r8,0(r3)
 80050a0:	3a3fff17 	ldw	r8,-4(r7)
 80050a4:	1a800115 	stw	r10,4(r3)
 80050a8:	1a400215 	stw	r9,8(r3)
 80050ac:	18c00404 	addi	r3,r3,16
 80050b0:	1a3fff15 	stw	r8,-4(r3)
 80050b4:	20fff51e 	bne	r4,r3,800508c <memcpy+0x34>
 80050b8:	3100030c 	andi	r4,r6,12
 80050bc:	2acb883a 	add	r5,r5,r11
 80050c0:	320003cc 	andi	r8,r6,15
 80050c4:	20002226 	beq	r4,zero,8005150 <memcpy+0xf8>
 80050c8:	2809883a 	mov	r4,r5
 80050cc:	1813883a 	mov	r9,r3
 80050d0:	21000104 	addi	r4,r4,4
 80050d4:	22bfff17 	ldw	r10,-4(r4)
 80050d8:	410fc83a 	sub	r7,r8,r4
 80050dc:	4a400104 	addi	r9,r9,4
 80050e0:	29cf883a 	add	r7,r5,r7
 80050e4:	4abfff15 	stw	r10,-4(r9)
 80050e8:	39c00128 	cmpgeui	r7,r7,4
 80050ec:	383ff81e 	bne	r7,zero,80050d0 <memcpy+0x78>
 80050f0:	413fff04 	addi	r4,r8,-4
 80050f4:	2008d0ba 	srli	r4,r4,2
 80050f8:	318000cc 	andi	r6,r6,3
 80050fc:	31ffffc4 	addi	r7,r6,-1
 8005100:	21000044 	addi	r4,r4,1
 8005104:	200890ba 	slli	r4,r4,2
 8005108:	1907883a 	add	r3,r3,r4
 800510c:	290b883a 	add	r5,r5,r4
 8005110:	3000041e 	bne	r6,zero,8005124 <memcpy+0xcc>
 8005114:	f800283a 	ret
 8005118:	2007883a 	mov	r3,r4
 800511c:	31ffffc4 	addi	r7,r6,-1
 8005120:	303ffc26 	beq	r6,zero,8005114 <memcpy+0xbc>
 8005124:	39c00044 	addi	r7,r7,1
 8005128:	19cf883a 	add	r7,r3,r7
 800512c:	29400044 	addi	r5,r5,1
 8005130:	29bfffc3 	ldbu	r6,-1(r5)
 8005134:	18c00044 	addi	r3,r3,1
 8005138:	19bfffc5 	stb	r6,-1(r3)
 800513c:	19fffb1e 	bne	r3,r7,800512c <memcpy+0xd4>
 8005140:	f800283a 	ret
 8005144:	31ffffc4 	addi	r7,r6,-1
 8005148:	2007883a 	mov	r3,r4
 800514c:	003ff506 	br	8005124 <memcpy+0xcc>
 8005150:	400d883a 	mov	r6,r8
 8005154:	003ff106 	br	800511c <memcpy+0xc4>

08005158 <_Balloc>:
 8005158:	20801317 	ldw	r2,76(r4)
 800515c:	defffc04 	addi	sp,sp,-16
 8005160:	dc400115 	stw	r17,4(sp)
 8005164:	dc000015 	stw	r16,0(sp)
 8005168:	dfc00315 	stw	ra,12(sp)
 800516c:	dc800215 	stw	r18,8(sp)
 8005170:	2021883a 	mov	r16,r4
 8005174:	2823883a 	mov	r17,r5
 8005178:	10000e26 	beq	r2,zero,80051b4 <_Balloc+0x5c>
 800517c:	880690ba 	slli	r3,r17,2
 8005180:	10c7883a 	add	r3,r2,r3
 8005184:	18800017 	ldw	r2,0(r3)
 8005188:	10001126 	beq	r2,zero,80051d0 <_Balloc+0x78>
 800518c:	11000017 	ldw	r4,0(r2)
 8005190:	19000015 	stw	r4,0(r3)
 8005194:	10000415 	stw	zero,16(r2)
 8005198:	10000315 	stw	zero,12(r2)
 800519c:	dfc00317 	ldw	ra,12(sp)
 80051a0:	dc800217 	ldw	r18,8(sp)
 80051a4:	dc400117 	ldw	r17,4(sp)
 80051a8:	dc000017 	ldw	r16,0(sp)
 80051ac:	dec00404 	addi	sp,sp,16
 80051b0:	f800283a 	ret
 80051b4:	01800844 	movi	r6,33
 80051b8:	01400104 	movi	r5,4
 80051bc:	80074600 	call	8007460 <_calloc_r>
 80051c0:	80801315 	stw	r2,76(r16)
 80051c4:	103fed1e 	bne	r2,zero,800517c <_Balloc+0x24>
 80051c8:	0005883a 	mov	r2,zero
 80051cc:	003ff306 	br	800519c <_Balloc+0x44>
 80051d0:	04800044 	movi	r18,1
 80051d4:	9464983a 	sll	r18,r18,r17
 80051d8:	01400044 	movi	r5,1
 80051dc:	8009883a 	mov	r4,r16
 80051e0:	91800144 	addi	r6,r18,5
 80051e4:	300c90ba 	slli	r6,r6,2
 80051e8:	80074600 	call	8007460 <_calloc_r>
 80051ec:	103ff626 	beq	r2,zero,80051c8 <_Balloc+0x70>
 80051f0:	14400115 	stw	r17,4(r2)
 80051f4:	14800215 	stw	r18,8(r2)
 80051f8:	003fe606 	br	8005194 <_Balloc+0x3c>

080051fc <_Bfree>:
 80051fc:	28000726 	beq	r5,zero,800521c <_Bfree+0x20>
 8005200:	28c00117 	ldw	r3,4(r5)
 8005204:	20801317 	ldw	r2,76(r4)
 8005208:	180690ba 	slli	r3,r3,2
 800520c:	10c5883a 	add	r2,r2,r3
 8005210:	10c00017 	ldw	r3,0(r2)
 8005214:	28c00015 	stw	r3,0(r5)
 8005218:	11400015 	stw	r5,0(r2)
 800521c:	f800283a 	ret

08005220 <__multadd>:
 8005220:	defff704 	addi	sp,sp,-36
 8005224:	dcc00315 	stw	r19,12(sp)
 8005228:	2cc00417 	ldw	r19,16(r5)
 800522c:	ddc00715 	stw	r23,28(sp)
 8005230:	dd800615 	stw	r22,24(sp)
 8005234:	dd400515 	stw	r21,20(sp)
 8005238:	dd000415 	stw	r20,16(sp)
 800523c:	dc800215 	stw	r18,8(sp)
 8005240:	dc400115 	stw	r17,4(sp)
 8005244:	dfc00815 	stw	ra,32(sp)
 8005248:	dc000015 	stw	r16,0(sp)
 800524c:	2829883a 	mov	r20,r5
 8005250:	202b883a 	mov	r21,r4
 8005254:	3025883a 	mov	r18,r6
 8005258:	3823883a 	mov	r17,r7
 800525c:	2d800504 	addi	r22,r5,20
 8005260:	002f883a 	mov	r23,zero
 8005264:	b4000017 	ldw	r16,0(r22)
 8005268:	900b883a 	mov	r5,r18
 800526c:	b5800104 	addi	r22,r22,4
 8005270:	813fffcc 	andi	r4,r16,65535
 8005274:	8000b340 	call	8000b34 <__mulsi3>
 8005278:	8008d43a 	srli	r4,r16,16
 800527c:	900b883a 	mov	r5,r18
 8005280:	1461883a 	add	r16,r2,r17
 8005284:	8000b340 	call	8000b34 <__mulsi3>
 8005288:	800ed43a 	srli	r7,r16,16
 800528c:	843fffcc 	andi	r16,r16,65535
 8005290:	bdc00044 	addi	r23,r23,1
 8005294:	11c5883a 	add	r2,r2,r7
 8005298:	1006943a 	slli	r3,r2,16
 800529c:	1022d43a 	srli	r17,r2,16
 80052a0:	1c21883a 	add	r16,r3,r16
 80052a4:	b43fff15 	stw	r16,-4(r22)
 80052a8:	bcffee16 	blt	r23,r19,8005264 <__multadd+0x44>
 80052ac:	88000826 	beq	r17,zero,80052d0 <__multadd+0xb0>
 80052b0:	a0800217 	ldw	r2,8(r20)
 80052b4:	9880120e 	bge	r19,r2,8005300 <__multadd+0xe0>
 80052b8:	98800144 	addi	r2,r19,5
 80052bc:	100490ba 	slli	r2,r2,2
 80052c0:	9cc00044 	addi	r19,r19,1
 80052c4:	a085883a 	add	r2,r20,r2
 80052c8:	14400015 	stw	r17,0(r2)
 80052cc:	a4c00415 	stw	r19,16(r20)
 80052d0:	a005883a 	mov	r2,r20
 80052d4:	dfc00817 	ldw	ra,32(sp)
 80052d8:	ddc00717 	ldw	r23,28(sp)
 80052dc:	dd800617 	ldw	r22,24(sp)
 80052e0:	dd400517 	ldw	r21,20(sp)
 80052e4:	dd000417 	ldw	r20,16(sp)
 80052e8:	dcc00317 	ldw	r19,12(sp)
 80052ec:	dc800217 	ldw	r18,8(sp)
 80052f0:	dc400117 	ldw	r17,4(sp)
 80052f4:	dc000017 	ldw	r16,0(sp)
 80052f8:	dec00904 	addi	sp,sp,36
 80052fc:	f800283a 	ret
 8005300:	a1400117 	ldw	r5,4(r20)
 8005304:	a809883a 	mov	r4,r21
 8005308:	29400044 	addi	r5,r5,1
 800530c:	80051580 	call	8005158 <_Balloc>
 8005310:	a1800417 	ldw	r6,16(r20)
 8005314:	a1400304 	addi	r5,r20,12
 8005318:	11000304 	addi	r4,r2,12
 800531c:	31800084 	addi	r6,r6,2
 8005320:	300c90ba 	slli	r6,r6,2
 8005324:	1021883a 	mov	r16,r2
 8005328:	80050580 	call	8005058 <memcpy>
 800532c:	a0000926 	beq	r20,zero,8005354 <__multadd+0x134>
 8005330:	a0c00117 	ldw	r3,4(r20)
 8005334:	a8801317 	ldw	r2,76(r21)
 8005338:	180690ba 	slli	r3,r3,2
 800533c:	10c5883a 	add	r2,r2,r3
 8005340:	10c00017 	ldw	r3,0(r2)
 8005344:	a0c00015 	stw	r3,0(r20)
 8005348:	15000015 	stw	r20,0(r2)
 800534c:	8029883a 	mov	r20,r16
 8005350:	003fd906 	br	80052b8 <__multadd+0x98>
 8005354:	8029883a 	mov	r20,r16
 8005358:	003fd706 	br	80052b8 <__multadd+0x98>

0800535c <__s2b>:
 800535c:	defff904 	addi	sp,sp,-28
 8005360:	dc800215 	stw	r18,8(sp)
 8005364:	dc000015 	stw	r16,0(sp)
 8005368:	2025883a 	mov	r18,r4
 800536c:	2821883a 	mov	r16,r5
 8005370:	39000204 	addi	r4,r7,8
 8005374:	01400244 	movi	r5,9
 8005378:	dcc00315 	stw	r19,12(sp)
 800537c:	dc400115 	stw	r17,4(sp)
 8005380:	dfc00615 	stw	ra,24(sp)
 8005384:	3823883a 	mov	r17,r7
 8005388:	dd400515 	stw	r21,20(sp)
 800538c:	dd000415 	stw	r20,16(sp)
 8005390:	3027883a 	mov	r19,r6
 8005394:	800097c0 	call	800097c <__divsi3>
 8005398:	88c00290 	cmplti	r3,r17,10
 800539c:	1800311e 	bne	r3,zero,8005464 <__s2b+0x108>
 80053a0:	00c00044 	movi	r3,1
 80053a4:	000b883a 	mov	r5,zero
 80053a8:	18c7883a 	add	r3,r3,r3
 80053ac:	29400044 	addi	r5,r5,1
 80053b0:	18bffd16 	blt	r3,r2,80053a8 <__s2b+0x4c>
 80053b4:	9009883a 	mov	r4,r18
 80053b8:	80051580 	call	8005158 <_Balloc>
 80053bc:	d8c00717 	ldw	r3,28(sp)
 80053c0:	10c00515 	stw	r3,20(r2)
 80053c4:	00c00044 	movi	r3,1
 80053c8:	10c00415 	stw	r3,16(r2)
 80053cc:	98c00290 	cmplti	r3,r19,10
 80053d0:	1800211e 	bne	r3,zero,8005458 <__s2b+0xfc>
 80053d4:	85400244 	addi	r21,r16,9
 80053d8:	84e9883a 	add	r20,r16,r19
 80053dc:	a821883a 	mov	r16,r21
 80053e0:	84000044 	addi	r16,r16,1
 80053e4:	81ffffc7 	ldb	r7,-1(r16)
 80053e8:	01800284 	movi	r6,10
 80053ec:	100b883a 	mov	r5,r2
 80053f0:	39fff404 	addi	r7,r7,-48
 80053f4:	9009883a 	mov	r4,r18
 80053f8:	80052200 	call	8005220 <__multadd>
 80053fc:	a43ff81e 	bne	r20,r16,80053e0 <__s2b+0x84>
 8005400:	9c3ffe04 	addi	r16,r19,-8
 8005404:	ac21883a 	add	r16,r21,r16
 8005408:	9c400a0e 	bge	r19,r17,8005434 <__s2b+0xd8>
 800540c:	8ce3c83a 	sub	r17,r17,r19
 8005410:	8463883a 	add	r17,r16,r17
 8005414:	84000044 	addi	r16,r16,1
 8005418:	81ffffc7 	ldb	r7,-1(r16)
 800541c:	01800284 	movi	r6,10
 8005420:	100b883a 	mov	r5,r2
 8005424:	39fff404 	addi	r7,r7,-48
 8005428:	9009883a 	mov	r4,r18
 800542c:	80052200 	call	8005220 <__multadd>
 8005430:	8c3ff81e 	bne	r17,r16,8005414 <__s2b+0xb8>
 8005434:	dfc00617 	ldw	ra,24(sp)
 8005438:	dd400517 	ldw	r21,20(sp)
 800543c:	dd000417 	ldw	r20,16(sp)
 8005440:	dcc00317 	ldw	r19,12(sp)
 8005444:	dc800217 	ldw	r18,8(sp)
 8005448:	dc400117 	ldw	r17,4(sp)
 800544c:	dc000017 	ldw	r16,0(sp)
 8005450:	dec00704 	addi	sp,sp,28
 8005454:	f800283a 	ret
 8005458:	84000284 	addi	r16,r16,10
 800545c:	04c00244 	movi	r19,9
 8005460:	003fe906 	br	8005408 <__s2b+0xac>
 8005464:	000b883a 	mov	r5,zero
 8005468:	003fd206 	br	80053b4 <__s2b+0x58>

0800546c <__hi0bits>:
 800546c:	20bfffec 	andhi	r2,r4,65535
 8005470:	1000131e 	bne	r2,zero,80054c0 <__hi0bits+0x54>
 8005474:	2008943a 	slli	r4,r4,16
 8005478:	00800404 	movi	r2,16
 800547c:	20ffc02c 	andhi	r3,r4,65280
 8005480:	1800021e 	bne	r3,zero,800548c <__hi0bits+0x20>
 8005484:	2008923a 	slli	r4,r4,8
 8005488:	10800204 	addi	r2,r2,8
 800548c:	20fc002c 	andhi	r3,r4,61440
 8005490:	1800021e 	bne	r3,zero,800549c <__hi0bits+0x30>
 8005494:	2008913a 	slli	r4,r4,4
 8005498:	10800104 	addi	r2,r2,4
 800549c:	20f0002c 	andhi	r3,r4,49152
 80054a0:	1800021e 	bne	r3,zero,80054ac <__hi0bits+0x40>
 80054a4:	200890ba 	slli	r4,r4,2
 80054a8:	10800084 	addi	r2,r2,2
 80054ac:	20000316 	blt	r4,zero,80054bc <__hi0bits+0x50>
 80054b0:	2110002c 	andhi	r4,r4,16384
 80054b4:	10800044 	addi	r2,r2,1
 80054b8:	20000326 	beq	r4,zero,80054c8 <__hi0bits+0x5c>
 80054bc:	f800283a 	ret
 80054c0:	0005883a 	mov	r2,zero
 80054c4:	003fed06 	br	800547c <__hi0bits+0x10>
 80054c8:	00800804 	movi	r2,32
 80054cc:	f800283a 	ret

080054d0 <__lo0bits>:
 80054d0:	20c00017 	ldw	r3,0(r4)
 80054d4:	188001cc 	andi	r2,r3,7
 80054d8:	10000826 	beq	r2,zero,80054fc <__lo0bits+0x2c>
 80054dc:	1880004c 	andi	r2,r3,1
 80054e0:	10001f1e 	bne	r2,zero,8005560 <__lo0bits+0x90>
 80054e4:	1880008c 	andi	r2,r3,2
 80054e8:	10002126 	beq	r2,zero,8005570 <__lo0bits+0xa0>
 80054ec:	1806d07a 	srli	r3,r3,1
 80054f0:	00800044 	movi	r2,1
 80054f4:	20c00015 	stw	r3,0(r4)
 80054f8:	f800283a 	ret
 80054fc:	18bfffcc 	andi	r2,r3,65535
 8005500:	1000151e 	bne	r2,zero,8005558 <__lo0bits+0x88>
 8005504:	1806d43a 	srli	r3,r3,16
 8005508:	00800404 	movi	r2,16
 800550c:	19403fcc 	andi	r5,r3,255
 8005510:	2800021e 	bne	r5,zero,800551c <__lo0bits+0x4c>
 8005514:	1806d23a 	srli	r3,r3,8
 8005518:	10800204 	addi	r2,r2,8
 800551c:	194003cc 	andi	r5,r3,15
 8005520:	2800021e 	bne	r5,zero,800552c <__lo0bits+0x5c>
 8005524:	1806d13a 	srli	r3,r3,4
 8005528:	10800104 	addi	r2,r2,4
 800552c:	194000cc 	andi	r5,r3,3
 8005530:	2800021e 	bne	r5,zero,800553c <__lo0bits+0x6c>
 8005534:	1806d0ba 	srli	r3,r3,2
 8005538:	10800084 	addi	r2,r2,2
 800553c:	1940004c 	andi	r5,r3,1
 8005540:	2800031e 	bne	r5,zero,8005550 <__lo0bits+0x80>
 8005544:	1806d07a 	srli	r3,r3,1
 8005548:	10800044 	addi	r2,r2,1
 800554c:	18000626 	beq	r3,zero,8005568 <__lo0bits+0x98>
 8005550:	20c00015 	stw	r3,0(r4)
 8005554:	f800283a 	ret
 8005558:	0005883a 	mov	r2,zero
 800555c:	003feb06 	br	800550c <__lo0bits+0x3c>
 8005560:	0005883a 	mov	r2,zero
 8005564:	f800283a 	ret
 8005568:	00800804 	movi	r2,32
 800556c:	f800283a 	ret
 8005570:	1806d0ba 	srli	r3,r3,2
 8005574:	00800084 	movi	r2,2
 8005578:	20c00015 	stw	r3,0(r4)
 800557c:	f800283a 	ret

08005580 <__i2b>:
 8005580:	defffe04 	addi	sp,sp,-8
 8005584:	dc000015 	stw	r16,0(sp)
 8005588:	2821883a 	mov	r16,r5
 800558c:	01400044 	movi	r5,1
 8005590:	dfc00115 	stw	ra,4(sp)
 8005594:	80051580 	call	8005158 <_Balloc>
 8005598:	01000044 	movi	r4,1
 800559c:	14000515 	stw	r16,20(r2)
 80055a0:	11000415 	stw	r4,16(r2)
 80055a4:	dfc00117 	ldw	ra,4(sp)
 80055a8:	dc000017 	ldw	r16,0(sp)
 80055ac:	dec00204 	addi	sp,sp,8
 80055b0:	f800283a 	ret

080055b4 <__multiply>:
 80055b4:	defff104 	addi	sp,sp,-60
 80055b8:	dd800b15 	stw	r22,44(sp)
 80055bc:	dc400615 	stw	r17,24(sp)
 80055c0:	2d800417 	ldw	r22,16(r5)
 80055c4:	34400417 	ldw	r17,16(r6)
 80055c8:	ddc00c15 	stw	r23,48(sp)
 80055cc:	dc800715 	stw	r18,28(sp)
 80055d0:	dfc00e15 	stw	ra,56(sp)
 80055d4:	df000d15 	stw	fp,52(sp)
 80055d8:	dd400a15 	stw	r21,40(sp)
 80055dc:	dd000915 	stw	r20,36(sp)
 80055e0:	dcc00815 	stw	r19,32(sp)
 80055e4:	dc000515 	stw	r16,20(sp)
 80055e8:	2825883a 	mov	r18,r5
 80055ec:	302f883a 	mov	r23,r6
 80055f0:	b4400516 	blt	r22,r17,8005608 <__multiply+0x54>
 80055f4:	8807883a 	mov	r3,r17
 80055f8:	282f883a 	mov	r23,r5
 80055fc:	b023883a 	mov	r17,r22
 8005600:	3025883a 	mov	r18,r6
 8005604:	182d883a 	mov	r22,r3
 8005608:	b8800217 	ldw	r2,8(r23)
 800560c:	8da9883a 	add	r20,r17,r22
 8005610:	b9400117 	ldw	r5,4(r23)
 8005614:	1500010e 	bge	r2,r20,800561c <__multiply+0x68>
 8005618:	29400044 	addi	r5,r5,1
 800561c:	a02690ba 	slli	r19,r20,2
 8005620:	80051580 	call	8005158 <_Balloc>
 8005624:	10c00504 	addi	r3,r2,20
 8005628:	1cc9883a 	add	r4,r3,r19
 800562c:	d8800415 	stw	r2,16(sp)
 8005630:	d8c00015 	stw	r3,0(sp)
 8005634:	d9000115 	stw	r4,4(sp)
 8005638:	1805883a 	mov	r2,r3
 800563c:	1900042e 	bgeu	r3,r4,8005650 <__multiply+0x9c>
 8005640:	d8c00117 	ldw	r3,4(sp)
 8005644:	10000015 	stw	zero,0(r2)
 8005648:	10800104 	addi	r2,r2,4
 800564c:	10fffc36 	bltu	r2,r3,8005640 <__multiply+0x8c>
 8005650:	b02c90ba 	slli	r22,r22,2
 8005654:	882290ba 	slli	r17,r17,2
 8005658:	94800504 	addi	r18,r18,20
 800565c:	b8800504 	addi	r2,r23,20
 8005660:	9587883a 	add	r3,r18,r22
 8005664:	d8800315 	stw	r2,12(sp)
 8005668:	d8c00215 	stw	r3,8(sp)
 800566c:	1463883a 	add	r17,r2,r17
 8005670:	90c00936 	bltu	r18,r3,8005698 <__multiply+0xe4>
 8005674:	00004606 	br	8005790 <__multiply+0x1dc>
 8005678:	8020d43a 	srli	r16,r16,16
 800567c:	8000271e 	bne	r16,zero,800571c <__multiply+0x168>
 8005680:	d8800017 	ldw	r2,0(sp)
 8005684:	94800104 	addi	r18,r18,4
 8005688:	10800104 	addi	r2,r2,4
 800568c:	d8800015 	stw	r2,0(sp)
 8005690:	d8800217 	ldw	r2,8(sp)
 8005694:	90803e2e 	bgeu	r18,r2,8005790 <__multiply+0x1dc>
 8005698:	94000017 	ldw	r16,0(r18)
 800569c:	873fffcc 	andi	fp,r16,65535
 80056a0:	e03ff526 	beq	fp,zero,8005678 <__multiply+0xc4>
 80056a4:	dcc00017 	ldw	r19,0(sp)
 80056a8:	dd800317 	ldw	r22,12(sp)
 80056ac:	002b883a 	mov	r21,zero
 80056b0:	b5c00017 	ldw	r23,0(r22)
 80056b4:	9c000017 	ldw	r16,0(r19)
 80056b8:	e00b883a 	mov	r5,fp
 80056bc:	b93fffcc 	andi	r4,r23,65535
 80056c0:	8000b340 	call	8000b34 <__mulsi3>
 80056c4:	b808d43a 	srli	r4,r23,16
 80056c8:	80ffffcc 	andi	r3,r16,65535
 80056cc:	10c5883a 	add	r2,r2,r3
 80056d0:	e00b883a 	mov	r5,fp
 80056d4:	156b883a 	add	r21,r2,r21
 80056d8:	8020d43a 	srli	r16,r16,16
 80056dc:	8000b340 	call	8000b34 <__mulsi3>
 80056e0:	a808d43a 	srli	r4,r21,16
 80056e4:	1405883a 	add	r2,r2,r16
 80056e8:	a8ffffcc 	andi	r3,r21,65535
 80056ec:	1105883a 	add	r2,r2,r4
 80056f0:	1008943a 	slli	r4,r2,16
 80056f4:	9cc00104 	addi	r19,r19,4
 80056f8:	b5800104 	addi	r22,r22,4
 80056fc:	20c6b03a 	or	r3,r4,r3
 8005700:	98ffff15 	stw	r3,-4(r19)
 8005704:	102ad43a 	srli	r21,r2,16
 8005708:	b47fe936 	bltu	r22,r17,80056b0 <__multiply+0xfc>
 800570c:	9d400015 	stw	r21,0(r19)
 8005710:	94000017 	ldw	r16,0(r18)
 8005714:	8020d43a 	srli	r16,r16,16
 8005718:	803fd926 	beq	r16,zero,8005680 <__multiply+0xcc>
 800571c:	ddc00017 	ldw	r23,0(sp)
 8005720:	dd400317 	ldw	r21,12(sp)
 8005724:	0027883a 	mov	r19,zero
 8005728:	bd800017 	ldw	r22,0(r23)
 800572c:	b039883a 	mov	fp,r22
 8005730:	a900000b 	ldhu	r4,0(r21)
 8005734:	e038d43a 	srli	fp,fp,16
 8005738:	800b883a 	mov	r5,r16
 800573c:	8000b340 	call	8000b34 <__mulsi3>
 8005740:	1739883a 	add	fp,r2,fp
 8005744:	e4e7883a 	add	r19,fp,r19
 8005748:	9804943a 	slli	r2,r19,16
 800574c:	b0ffffcc 	andi	r3,r22,65535
 8005750:	bdc00104 	addi	r23,r23,4
 8005754:	10c6b03a 	or	r3,r2,r3
 8005758:	b8ffff15 	stw	r3,-4(r23)
 800575c:	ad400104 	addi	r21,r21,4
 8005760:	a93fff8b 	ldhu	r4,-2(r21)
 8005764:	bf000017 	ldw	fp,0(r23)
 8005768:	800b883a 	mov	r5,r16
 800576c:	8000b340 	call	8000b34 <__mulsi3>
 8005770:	980cd43a 	srli	r6,r19,16
 8005774:	e0ffffcc 	andi	r3,fp,65535
 8005778:	10c7883a 	add	r3,r2,r3
 800577c:	19ad883a 	add	r22,r3,r6
 8005780:	b026d43a 	srli	r19,r22,16
 8005784:	ac7fea36 	bltu	r21,r17,8005730 <__multiply+0x17c>
 8005788:	bd800015 	stw	r22,0(r23)
 800578c:	003fbc06 	br	8005680 <__multiply+0xcc>
 8005790:	05000a0e 	bge	zero,r20,80057bc <__multiply+0x208>
 8005794:	d8c00117 	ldw	r3,4(sp)
 8005798:	18bfff17 	ldw	r2,-4(r3)
 800579c:	1cffff04 	addi	r19,r3,-4
 80057a0:	10000326 	beq	r2,zero,80057b0 <__multiply+0x1fc>
 80057a4:	00000506 	br	80057bc <__multiply+0x208>
 80057a8:	98800017 	ldw	r2,0(r19)
 80057ac:	1000031e 	bne	r2,zero,80057bc <__multiply+0x208>
 80057b0:	a53fffc4 	addi	r20,r20,-1
 80057b4:	9cffff04 	addi	r19,r19,-4
 80057b8:	a03ffb1e 	bne	r20,zero,80057a8 <__multiply+0x1f4>
 80057bc:	d8800417 	ldw	r2,16(sp)
 80057c0:	15000415 	stw	r20,16(r2)
 80057c4:	dfc00e17 	ldw	ra,56(sp)
 80057c8:	df000d17 	ldw	fp,52(sp)
 80057cc:	ddc00c17 	ldw	r23,48(sp)
 80057d0:	dd800b17 	ldw	r22,44(sp)
 80057d4:	dd400a17 	ldw	r21,40(sp)
 80057d8:	dd000917 	ldw	r20,36(sp)
 80057dc:	dcc00817 	ldw	r19,32(sp)
 80057e0:	dc800717 	ldw	r18,28(sp)
 80057e4:	dc400617 	ldw	r17,24(sp)
 80057e8:	dc000517 	ldw	r16,20(sp)
 80057ec:	dec00f04 	addi	sp,sp,60
 80057f0:	f800283a 	ret

080057f4 <__pow5mult>:
 80057f4:	defffb04 	addi	sp,sp,-20
 80057f8:	dcc00315 	stw	r19,12(sp)
 80057fc:	dc000015 	stw	r16,0(sp)
 8005800:	dfc00415 	stw	ra,16(sp)
 8005804:	dc800215 	stw	r18,8(sp)
 8005808:	dc400115 	stw	r17,4(sp)
 800580c:	308000cc 	andi	r2,r6,3
 8005810:	3021883a 	mov	r16,r6
 8005814:	2027883a 	mov	r19,r4
 8005818:	10002d1e 	bne	r2,zero,80058d0 <__pow5mult+0xdc>
 800581c:	2825883a 	mov	r18,r5
 8005820:	8021d0ba 	srai	r16,r16,2
 8005824:	80001926 	beq	r16,zero,800588c <__pow5mult+0x98>
 8005828:	9c401217 	ldw	r17,72(r19)
 800582c:	8800061e 	bne	r17,zero,8005848 <__pow5mult+0x54>
 8005830:	00002f06 	br	80058f0 <__pow5mult+0xfc>
 8005834:	8021d07a 	srai	r16,r16,1
 8005838:	80001426 	beq	r16,zero,800588c <__pow5mult+0x98>
 800583c:	88800017 	ldw	r2,0(r17)
 8005840:	10001a26 	beq	r2,zero,80058ac <__pow5mult+0xb8>
 8005844:	1023883a 	mov	r17,r2
 8005848:	8080004c 	andi	r2,r16,1
 800584c:	103ff926 	beq	r2,zero,8005834 <__pow5mult+0x40>
 8005850:	880d883a 	mov	r6,r17
 8005854:	900b883a 	mov	r5,r18
 8005858:	9809883a 	mov	r4,r19
 800585c:	80055b40 	call	80055b4 <__multiply>
 8005860:	90001926 	beq	r18,zero,80058c8 <__pow5mult+0xd4>
 8005864:	91000117 	ldw	r4,4(r18)
 8005868:	98c01317 	ldw	r3,76(r19)
 800586c:	8021d07a 	srai	r16,r16,1
 8005870:	200890ba 	slli	r4,r4,2
 8005874:	1907883a 	add	r3,r3,r4
 8005878:	19000017 	ldw	r4,0(r3)
 800587c:	91000015 	stw	r4,0(r18)
 8005880:	1c800015 	stw	r18,0(r3)
 8005884:	1025883a 	mov	r18,r2
 8005888:	803fec1e 	bne	r16,zero,800583c <__pow5mult+0x48>
 800588c:	9005883a 	mov	r2,r18
 8005890:	dfc00417 	ldw	ra,16(sp)
 8005894:	dcc00317 	ldw	r19,12(sp)
 8005898:	dc800217 	ldw	r18,8(sp)
 800589c:	dc400117 	ldw	r17,4(sp)
 80058a0:	dc000017 	ldw	r16,0(sp)
 80058a4:	dec00504 	addi	sp,sp,20
 80058a8:	f800283a 	ret
 80058ac:	880d883a 	mov	r6,r17
 80058b0:	880b883a 	mov	r5,r17
 80058b4:	9809883a 	mov	r4,r19
 80058b8:	80055b40 	call	80055b4 <__multiply>
 80058bc:	88800015 	stw	r2,0(r17)
 80058c0:	10000015 	stw	zero,0(r2)
 80058c4:	003fdf06 	br	8005844 <__pow5mult+0x50>
 80058c8:	1025883a 	mov	r18,r2
 80058cc:	003fd906 	br	8005834 <__pow5mult+0x40>
 80058d0:	100490ba 	slli	r2,r2,2
 80058d4:	00c20074 	movhi	r3,2049
 80058d8:	000f883a 	mov	r7,zero
 80058dc:	10c7883a 	add	r3,r2,r3
 80058e0:	19b73e17 	ldw	r6,-8968(r3)
 80058e4:	80052200 	call	8005220 <__multadd>
 80058e8:	1025883a 	mov	r18,r2
 80058ec:	003fcc06 	br	8005820 <__pow5mult+0x2c>
 80058f0:	01400044 	movi	r5,1
 80058f4:	9809883a 	mov	r4,r19
 80058f8:	80051580 	call	8005158 <_Balloc>
 80058fc:	1023883a 	mov	r17,r2
 8005900:	00809c44 	movi	r2,625
 8005904:	88800515 	stw	r2,20(r17)
 8005908:	00800044 	movi	r2,1
 800590c:	88800415 	stw	r2,16(r17)
 8005910:	9c401215 	stw	r17,72(r19)
 8005914:	88000015 	stw	zero,0(r17)
 8005918:	003fcb06 	br	8005848 <__pow5mult+0x54>

0800591c <__lshift>:
 800591c:	defff904 	addi	sp,sp,-28
 8005920:	dcc00315 	stw	r19,12(sp)
 8005924:	dc400115 	stw	r17,4(sp)
 8005928:	2cc00417 	ldw	r19,16(r5)
 800592c:	3023d17a 	srai	r17,r6,5
 8005930:	28800217 	ldw	r2,8(r5)
 8005934:	dd400515 	stw	r21,20(sp)
 8005938:	8ce7883a 	add	r19,r17,r19
 800593c:	dd000415 	stw	r20,16(sp)
 8005940:	dc800215 	stw	r18,8(sp)
 8005944:	dc000015 	stw	r16,0(sp)
 8005948:	dfc00615 	stw	ra,24(sp)
 800594c:	9c000044 	addi	r16,r19,1
 8005950:	2825883a 	mov	r18,r5
 8005954:	302b883a 	mov	r21,r6
 8005958:	2029883a 	mov	r20,r4
 800595c:	29400117 	ldw	r5,4(r5)
 8005960:	1400030e 	bge	r2,r16,8005970 <__lshift+0x54>
 8005964:	1085883a 	add	r2,r2,r2
 8005968:	29400044 	addi	r5,r5,1
 800596c:	143ffd16 	blt	r2,r16,8005964 <__lshift+0x48>
 8005970:	a009883a 	mov	r4,r20
 8005974:	80051580 	call	8005158 <_Balloc>
 8005978:	11000504 	addi	r4,r2,20
 800597c:	0440090e 	bge	zero,r17,80059a4 <__lshift+0x88>
 8005980:	8c400144 	addi	r17,r17,5
 8005984:	882290ba 	slli	r17,r17,2
 8005988:	2007883a 	mov	r3,r4
 800598c:	144b883a 	add	r5,r2,r17
 8005990:	18c00104 	addi	r3,r3,4
 8005994:	183fff15 	stw	zero,-4(r3)
 8005998:	28fffd1e 	bne	r5,r3,8005990 <__lshift+0x74>
 800599c:	8c7ffb04 	addi	r17,r17,-20
 80059a0:	2449883a 	add	r4,r4,r17
 80059a4:	92000417 	ldw	r8,16(r18)
 80059a8:	90c00504 	addi	r3,r18,20
 80059ac:	a98007cc 	andi	r6,r21,31
 80059b0:	401090ba 	slli	r8,r8,2
 80059b4:	1a11883a 	add	r8,r3,r8
 80059b8:	30002126 	beq	r6,zero,8005a40 <__lshift+0x124>
 80059bc:	02400804 	movi	r9,32
 80059c0:	4993c83a 	sub	r9,r9,r6
 80059c4:	000f883a 	mov	r7,zero
 80059c8:	19400017 	ldw	r5,0(r3)
 80059cc:	21000104 	addi	r4,r4,4
 80059d0:	18c00104 	addi	r3,r3,4
 80059d4:	298a983a 	sll	r5,r5,r6
 80059d8:	29cab03a 	or	r5,r5,r7
 80059dc:	217fff15 	stw	r5,-4(r4)
 80059e0:	197fff17 	ldw	r5,-4(r3)
 80059e4:	2a4ed83a 	srl	r7,r5,r9
 80059e8:	1a3ff736 	bltu	r3,r8,80059c8 <__lshift+0xac>
 80059ec:	21c00015 	stw	r7,0(r4)
 80059f0:	38000126 	beq	r7,zero,80059f8 <__lshift+0xdc>
 80059f4:	8027883a 	mov	r19,r16
 80059f8:	14c00415 	stw	r19,16(r2)
 80059fc:	90000726 	beq	r18,zero,8005a1c <__lshift+0x100>
 8005a00:	91000117 	ldw	r4,4(r18)
 8005a04:	a0c01317 	ldw	r3,76(r20)
 8005a08:	200890ba 	slli	r4,r4,2
 8005a0c:	1907883a 	add	r3,r3,r4
 8005a10:	19000017 	ldw	r4,0(r3)
 8005a14:	91000015 	stw	r4,0(r18)
 8005a18:	1c800015 	stw	r18,0(r3)
 8005a1c:	dfc00617 	ldw	ra,24(sp)
 8005a20:	dd400517 	ldw	r21,20(sp)
 8005a24:	dd000417 	ldw	r20,16(sp)
 8005a28:	dcc00317 	ldw	r19,12(sp)
 8005a2c:	dc800217 	ldw	r18,8(sp)
 8005a30:	dc400117 	ldw	r17,4(sp)
 8005a34:	dc000017 	ldw	r16,0(sp)
 8005a38:	dec00704 	addi	sp,sp,28
 8005a3c:	f800283a 	ret
 8005a40:	18c00104 	addi	r3,r3,4
 8005a44:	197fff17 	ldw	r5,-4(r3)
 8005a48:	21000104 	addi	r4,r4,4
 8005a4c:	217fff15 	stw	r5,-4(r4)
 8005a50:	1a3ffb36 	bltu	r3,r8,8005a40 <__lshift+0x124>
 8005a54:	003fe806 	br	80059f8 <__lshift+0xdc>

08005a58 <__mcmp>:
 8005a58:	20800417 	ldw	r2,16(r4)
 8005a5c:	28c00417 	ldw	r3,16(r5)
 8005a60:	10c5c83a 	sub	r2,r2,r3
 8005a64:	10000e1e 	bne	r2,zero,8005aa0 <__mcmp+0x48>
 8005a68:	180c90ba 	slli	r6,r3,2
 8005a6c:	21000504 	addi	r4,r4,20
 8005a70:	29400504 	addi	r5,r5,20
 8005a74:	2187883a 	add	r3,r4,r6
 8005a78:	298b883a 	add	r5,r5,r6
 8005a7c:	00000106 	br	8005a84 <__mcmp+0x2c>
 8005a80:	20c0082e 	bgeu	r4,r3,8005aa4 <__mcmp+0x4c>
 8005a84:	18ffff04 	addi	r3,r3,-4
 8005a88:	297fff04 	addi	r5,r5,-4
 8005a8c:	19c00017 	ldw	r7,0(r3)
 8005a90:	29800017 	ldw	r6,0(r5)
 8005a94:	39bffa26 	beq	r7,r6,8005a80 <__mcmp+0x28>
 8005a98:	3980032e 	bgeu	r7,r6,8005aa8 <__mcmp+0x50>
 8005a9c:	00bfffc4 	movi	r2,-1
 8005aa0:	f800283a 	ret
 8005aa4:	f800283a 	ret
 8005aa8:	00800044 	movi	r2,1
 8005aac:	f800283a 	ret

08005ab0 <__mdiff>:
 8005ab0:	defffa04 	addi	sp,sp,-24
 8005ab4:	dc800215 	stw	r18,8(sp)
 8005ab8:	30c00417 	ldw	r3,16(r6)
 8005abc:	2c800417 	ldw	r18,16(r5)
 8005ac0:	dd000415 	stw	r20,16(sp)
 8005ac4:	dcc00315 	stw	r19,12(sp)
 8005ac8:	dc400115 	stw	r17,4(sp)
 8005acc:	dc000015 	stw	r16,0(sp)
 8005ad0:	dfc00515 	stw	ra,20(sp)
 8005ad4:	90e5c83a 	sub	r18,r18,r3
 8005ad8:	2827883a 	mov	r19,r5
 8005adc:	3029883a 	mov	r20,r6
 8005ae0:	2c000504 	addi	r16,r5,20
 8005ae4:	34400504 	addi	r17,r6,20
 8005ae8:	9000131e 	bne	r18,zero,8005b38 <__mdiff+0x88>
 8005aec:	180690ba 	slli	r3,r3,2
 8005af0:	80c5883a 	add	r2,r16,r3
 8005af4:	88c7883a 	add	r3,r17,r3
 8005af8:	00000106 	br	8005b00 <__mdiff+0x50>
 8005afc:	8080552e 	bgeu	r16,r2,8005c54 <__mdiff+0x1a4>
 8005b00:	10bfff04 	addi	r2,r2,-4
 8005b04:	18ffff04 	addi	r3,r3,-4
 8005b08:	11c00017 	ldw	r7,0(r2)
 8005b0c:	19400017 	ldw	r5,0(r3)
 8005b10:	397ffa26 	beq	r7,r5,8005afc <__mdiff+0x4c>
 8005b14:	39400a2e 	bgeu	r7,r5,8005b40 <__mdiff+0x90>
 8005b18:	8007883a 	mov	r3,r16
 8005b1c:	9805883a 	mov	r2,r19
 8005b20:	8821883a 	mov	r16,r17
 8005b24:	a027883a 	mov	r19,r20
 8005b28:	1823883a 	mov	r17,r3
 8005b2c:	1029883a 	mov	r20,r2
 8005b30:	04800044 	movi	r18,1
 8005b34:	00000206 	br	8005b40 <__mdiff+0x90>
 8005b38:	903ff716 	blt	r18,zero,8005b18 <__mdiff+0x68>
 8005b3c:	0025883a 	mov	r18,zero
 8005b40:	99400117 	ldw	r5,4(r19)
 8005b44:	80051580 	call	8005158 <_Balloc>
 8005b48:	9a400417 	ldw	r9,16(r19)
 8005b4c:	a2c00417 	ldw	r11,16(r20)
 8005b50:	12800504 	addi	r10,r2,20
 8005b54:	481090ba 	slli	r8,r9,2
 8005b58:	581690ba 	slli	r11,r11,2
 8005b5c:	14800315 	stw	r18,12(r2)
 8005b60:	8211883a 	add	r8,r16,r8
 8005b64:	8ad7883a 	add	r11,r17,r11
 8005b68:	0007883a 	mov	r3,zero
 8005b6c:	00000106 	br	8005b74 <__mdiff+0xc4>
 8005b70:	3815883a 	mov	r10,r7
 8005b74:	81000017 	ldw	r4,0(r16)
 8005b78:	89800017 	ldw	r6,0(r17)
 8005b7c:	51c00104 	addi	r7,r10,4
 8005b80:	217fffcc 	andi	r5,r4,65535
 8005b84:	28cb883a 	add	r5,r5,r3
 8005b88:	30ffffcc 	andi	r3,r6,65535
 8005b8c:	28cbc83a 	sub	r5,r5,r3
 8005b90:	300cd43a 	srli	r6,r6,16
 8005b94:	2006d43a 	srli	r3,r4,16
 8005b98:	2809d43a 	srai	r4,r5,16
 8005b9c:	297fffcc 	andi	r5,r5,65535
 8005ba0:	1987c83a 	sub	r3,r3,r6
 8005ba4:	1907883a 	add	r3,r3,r4
 8005ba8:	1808943a 	slli	r4,r3,16
 8005bac:	8c400104 	addi	r17,r17,4
 8005bb0:	84000104 	addi	r16,r16,4
 8005bb4:	214ab03a 	or	r5,r4,r5
 8005bb8:	397fff15 	stw	r5,-4(r7)
 8005bbc:	1807d43a 	srai	r3,r3,16
 8005bc0:	8affeb36 	bltu	r17,r11,8005b70 <__mdiff+0xc0>
 8005bc4:	8200152e 	bgeu	r16,r8,8005c1c <__mdiff+0x16c>
 8005bc8:	3815883a 	mov	r10,r7
 8005bcc:	800d883a 	mov	r6,r16
 8005bd0:	31000017 	ldw	r4,0(r6)
 8005bd4:	52800104 	addi	r10,r10,4
 8005bd8:	31800104 	addi	r6,r6,4
 8005bdc:	217fffcc 	andi	r5,r4,65535
 8005be0:	28cb883a 	add	r5,r5,r3
 8005be4:	2817d43a 	srai	r11,r5,16
 8005be8:	2006d43a 	srli	r3,r4,16
 8005bec:	293fffcc 	andi	r4,r5,65535
 8005bf0:	1ac7883a 	add	r3,r3,r11
 8005bf4:	180a943a 	slli	r5,r3,16
 8005bf8:	1807d43a 	srai	r3,r3,16
 8005bfc:	290ab03a 	or	r5,r5,r4
 8005c00:	517fff15 	stw	r5,-4(r10)
 8005c04:	323ff236 	bltu	r6,r8,8005bd0 <__mdiff+0x120>
 8005c08:	42bfffc4 	addi	r10,r8,-1
 8005c0c:	5415c83a 	sub	r10,r10,r16
 8005c10:	5014d0ba 	srli	r10,r10,2
 8005c14:	501490ba 	slli	r10,r10,2
 8005c18:	3a95883a 	add	r10,r7,r10
 8005c1c:	2800041e 	bne	r5,zero,8005c30 <__mdiff+0x180>
 8005c20:	52bfff04 	addi	r10,r10,-4
 8005c24:	50c00017 	ldw	r3,0(r10)
 8005c28:	4a7fffc4 	addi	r9,r9,-1
 8005c2c:	183ffc26 	beq	r3,zero,8005c20 <__mdiff+0x170>
 8005c30:	12400415 	stw	r9,16(r2)
 8005c34:	dfc00517 	ldw	ra,20(sp)
 8005c38:	dd000417 	ldw	r20,16(sp)
 8005c3c:	dcc00317 	ldw	r19,12(sp)
 8005c40:	dc800217 	ldw	r18,8(sp)
 8005c44:	dc400117 	ldw	r17,4(sp)
 8005c48:	dc000017 	ldw	r16,0(sp)
 8005c4c:	dec00604 	addi	sp,sp,24
 8005c50:	f800283a 	ret
 8005c54:	000b883a 	mov	r5,zero
 8005c58:	80051580 	call	8005158 <_Balloc>
 8005c5c:	00c00044 	movi	r3,1
 8005c60:	10c00415 	stw	r3,16(r2)
 8005c64:	10000515 	stw	zero,20(r2)
 8005c68:	003ff206 	br	8005c34 <__mdiff+0x184>

08005c6c <__ulp>:
 8005c6c:	295ffc2c 	andhi	r5,r5,32752
 8005c70:	00ff3034 	movhi	r3,64704
 8005c74:	28c7883a 	add	r3,r5,r3
 8005c78:	00c0020e 	bge	zero,r3,8005c84 <__ulp+0x18>
 8005c7c:	0005883a 	mov	r2,zero
 8005c80:	f800283a 	ret
 8005c84:	00c7c83a 	sub	r3,zero,r3
 8005c88:	1807d53a 	srai	r3,r3,20
 8005c8c:	18800508 	cmpgei	r2,r3,20
 8005c90:	1000041e 	bne	r2,zero,8005ca4 <__ulp+0x38>
 8005c94:	01400234 	movhi	r5,8
 8005c98:	28c7d83a 	sra	r3,r5,r3
 8005c9c:	0005883a 	mov	r2,zero
 8005ca0:	f800283a 	ret
 8005ca4:	193ffb04 	addi	r4,r3,-20
 8005ca8:	208007c8 	cmpgei	r2,r4,31
 8005cac:	0007883a 	mov	r3,zero
 8005cb0:	1000031e 	bne	r2,zero,8005cc0 <__ulp+0x54>
 8005cb4:	00a00034 	movhi	r2,32768
 8005cb8:	1104d83a 	srl	r2,r2,r4
 8005cbc:	f800283a 	ret
 8005cc0:	00800044 	movi	r2,1
 8005cc4:	f800283a 	ret

08005cc8 <__b2d>:
 8005cc8:	defffa04 	addi	sp,sp,-24
 8005ccc:	dc000015 	stw	r16,0(sp)
 8005cd0:	24000417 	ldw	r16,16(r4)
 8005cd4:	dc800215 	stw	r18,8(sp)
 8005cd8:	24800504 	addi	r18,r4,20
 8005cdc:	802090ba 	slli	r16,r16,2
 8005ce0:	dc400115 	stw	r17,4(sp)
 8005ce4:	dd000415 	stw	r20,16(sp)
 8005ce8:	9421883a 	add	r16,r18,r16
 8005cec:	847fff17 	ldw	r17,-4(r16)
 8005cf0:	dcc00315 	stw	r19,12(sp)
 8005cf4:	2829883a 	mov	r20,r5
 8005cf8:	8809883a 	mov	r4,r17
 8005cfc:	dfc00515 	stw	ra,20(sp)
 8005d00:	800546c0 	call	800546c <__hi0bits>
 8005d04:	01000804 	movi	r4,32
 8005d08:	2087c83a 	sub	r3,r4,r2
 8005d0c:	a0c00015 	stw	r3,0(r20)
 8005d10:	10c002c8 	cmpgei	r3,r2,11
 8005d14:	84ffff04 	addi	r19,r16,-4
 8005d18:	18001f26 	beq	r3,zero,8005d98 <__b2d+0xd0>
 8005d1c:	10fffd44 	addi	r3,r2,-11
 8005d20:	94c00e2e 	bgeu	r18,r19,8005d5c <__b2d+0x94>
 8005d24:	80bffe17 	ldw	r2,-8(r16)
 8005d28:	18001226 	beq	r3,zero,8005d74 <__b2d+0xac>
 8005d2c:	20c9c83a 	sub	r4,r4,r3
 8005d30:	110cd83a 	srl	r6,r2,r4
 8005d34:	88e2983a 	sll	r17,r17,r3
 8005d38:	10c4983a 	sll	r2,r2,r3
 8005d3c:	817ffe04 	addi	r5,r16,-8
 8005d40:	8986b03a 	or	r3,r17,r6
 8005d44:	18cffc34 	orhi	r3,r3,16368
 8005d48:	91400b2e 	bgeu	r18,r5,8005d78 <__b2d+0xb0>
 8005d4c:	817ffd17 	ldw	r5,-12(r16)
 8005d50:	2908d83a 	srl	r4,r5,r4
 8005d54:	1104b03a 	or	r2,r2,r4
 8005d58:	00000706 	br	8005d78 <__b2d+0xb0>
 8005d5c:	18000426 	beq	r3,zero,8005d70 <__b2d+0xa8>
 8005d60:	88c6983a 	sll	r3,r17,r3
 8005d64:	0005883a 	mov	r2,zero
 8005d68:	18cffc34 	orhi	r3,r3,16368
 8005d6c:	00000206 	br	8005d78 <__b2d+0xb0>
 8005d70:	0005883a 	mov	r2,zero
 8005d74:	88cffc34 	orhi	r3,r17,16368
 8005d78:	dfc00517 	ldw	ra,20(sp)
 8005d7c:	dd000417 	ldw	r20,16(sp)
 8005d80:	dcc00317 	ldw	r19,12(sp)
 8005d84:	dc800217 	ldw	r18,8(sp)
 8005d88:	dc400117 	ldw	r17,4(sp)
 8005d8c:	dc000017 	ldw	r16,0(sp)
 8005d90:	dec00604 	addi	sp,sp,24
 8005d94:	f800283a 	ret
 8005d98:	014002c4 	movi	r5,11
 8005d9c:	2889c83a 	sub	r4,r5,r2
 8005da0:	8906d83a 	srl	r3,r17,r4
 8005da4:	18cffc34 	orhi	r3,r3,16368
 8005da8:	94c00536 	bltu	r18,r19,8005dc0 <__b2d+0xf8>
 8005dac:	000b883a 	mov	r5,zero
 8005db0:	10800544 	addi	r2,r2,21
 8005db4:	8884983a 	sll	r2,r17,r2
 8005db8:	1144b03a 	or	r2,r2,r5
 8005dbc:	003fee06 	br	8005d78 <__b2d+0xb0>
 8005dc0:	817ffe17 	ldw	r5,-8(r16)
 8005dc4:	290ad83a 	srl	r5,r5,r4
 8005dc8:	003ff906 	br	8005db0 <__b2d+0xe8>

08005dcc <__d2b>:
 8005dcc:	defff804 	addi	sp,sp,-32
 8005dd0:	dc400315 	stw	r17,12(sp)
 8005dd4:	3023883a 	mov	r17,r6
 8005dd8:	dd000615 	stw	r20,24(sp)
 8005ddc:	dc000215 	stw	r16,8(sp)
 8005de0:	2829883a 	mov	r20,r5
 8005de4:	8820d53a 	srli	r16,r17,20
 8005de8:	01400044 	movi	r5,1
 8005dec:	dcc00515 	stw	r19,20(sp)
 8005df0:	dc800415 	stw	r18,16(sp)
 8005df4:	dfc00715 	stw	ra,28(sp)
 8005df8:	3825883a 	mov	r18,r7
 8005dfc:	80051580 	call	8005158 <_Balloc>
 8005e00:	01800434 	movhi	r6,16
 8005e04:	31bfffc4 	addi	r6,r6,-1
 8005e08:	8401ffcc 	andi	r16,r16,2047
 8005e0c:	1027883a 	mov	r19,r2
 8005e10:	89a2703a 	and	r17,r17,r6
 8005e14:	80000126 	beq	r16,zero,8005e1c <__d2b+0x50>
 8005e18:	8c400434 	orhi	r17,r17,16
 8005e1c:	dc400115 	stw	r17,4(sp)
 8005e20:	a0002826 	beq	r20,zero,8005ec4 <__d2b+0xf8>
 8005e24:	d809883a 	mov	r4,sp
 8005e28:	dd000015 	stw	r20,0(sp)
 8005e2c:	80054d00 	call	80054d0 <__lo0bits>
 8005e30:	d8c00117 	ldw	r3,4(sp)
 8005e34:	1000171e 	bne	r2,zero,8005e94 <__d2b+0xc8>
 8005e38:	d9000017 	ldw	r4,0(sp)
 8005e3c:	98c00615 	stw	r3,24(r19)
 8005e40:	99000515 	stw	r4,20(r19)
 8005e44:	18001d1e 	bne	r3,zero,8005ebc <__d2b+0xf0>
 8005e48:	04400044 	movi	r17,1
 8005e4c:	9c400415 	stw	r17,16(r19)
 8005e50:	80002526 	beq	r16,zero,8005ee8 <__d2b+0x11c>
 8005e54:	00c00d44 	movi	r3,53
 8005e58:	843ef344 	addi	r16,r16,-1075
 8005e5c:	80a1883a 	add	r16,r16,r2
 8005e60:	1885c83a 	sub	r2,r3,r2
 8005e64:	d8c00817 	ldw	r3,32(sp)
 8005e68:	94000015 	stw	r16,0(r18)
 8005e6c:	18800015 	stw	r2,0(r3)
 8005e70:	9805883a 	mov	r2,r19
 8005e74:	dfc00717 	ldw	ra,28(sp)
 8005e78:	dd000617 	ldw	r20,24(sp)
 8005e7c:	dcc00517 	ldw	r19,20(sp)
 8005e80:	dc800417 	ldw	r18,16(sp)
 8005e84:	dc400317 	ldw	r17,12(sp)
 8005e88:	dc000217 	ldw	r16,8(sp)
 8005e8c:	dec00804 	addi	sp,sp,32
 8005e90:	f800283a 	ret
 8005e94:	01000804 	movi	r4,32
 8005e98:	2089c83a 	sub	r4,r4,r2
 8005e9c:	1908983a 	sll	r4,r3,r4
 8005ea0:	d9400017 	ldw	r5,0(sp)
 8005ea4:	1886d83a 	srl	r3,r3,r2
 8005ea8:	2148b03a 	or	r4,r4,r5
 8005eac:	99000515 	stw	r4,20(r19)
 8005eb0:	d8c00115 	stw	r3,4(sp)
 8005eb4:	98c00615 	stw	r3,24(r19)
 8005eb8:	183fe326 	beq	r3,zero,8005e48 <__d2b+0x7c>
 8005ebc:	04400084 	movi	r17,2
 8005ec0:	003fe206 	br	8005e4c <__d2b+0x80>
 8005ec4:	d9000104 	addi	r4,sp,4
 8005ec8:	80054d00 	call	80054d0 <__lo0bits>
 8005ecc:	00c00044 	movi	r3,1
 8005ed0:	98c00415 	stw	r3,16(r19)
 8005ed4:	d8c00117 	ldw	r3,4(sp)
 8005ed8:	10800804 	addi	r2,r2,32
 8005edc:	04400044 	movi	r17,1
 8005ee0:	98c00515 	stw	r3,20(r19)
 8005ee4:	803fdb1e 	bne	r16,zero,8005e54 <__d2b+0x88>
 8005ee8:	880690ba 	slli	r3,r17,2
 8005eec:	10bef384 	addi	r2,r2,-1074
 8005ef0:	8822917a 	slli	r17,r17,5
 8005ef4:	98c7883a 	add	r3,r19,r3
 8005ef8:	19000417 	ldw	r4,16(r3)
 8005efc:	90800015 	stw	r2,0(r18)
 8005f00:	800546c0 	call	800546c <__hi0bits>
 8005f04:	88a3c83a 	sub	r17,r17,r2
 8005f08:	d8800817 	ldw	r2,32(sp)
 8005f0c:	14400015 	stw	r17,0(r2)
 8005f10:	003fd706 	br	8005e70 <__d2b+0xa4>

08005f14 <__ratio>:
 8005f14:	defff904 	addi	sp,sp,-28
 8005f18:	dc400315 	stw	r17,12(sp)
 8005f1c:	2823883a 	mov	r17,r5
 8005f20:	d80b883a 	mov	r5,sp
 8005f24:	dfc00615 	stw	ra,24(sp)
 8005f28:	dcc00515 	stw	r19,20(sp)
 8005f2c:	dc800415 	stw	r18,16(sp)
 8005f30:	2027883a 	mov	r19,r4
 8005f34:	dc000215 	stw	r16,8(sp)
 8005f38:	8005cc80 	call	8005cc8 <__b2d>
 8005f3c:	d9400104 	addi	r5,sp,4
 8005f40:	8809883a 	mov	r4,r17
 8005f44:	1025883a 	mov	r18,r2
 8005f48:	1821883a 	mov	r16,r3
 8005f4c:	8005cc80 	call	8005cc8 <__b2d>
 8005f50:	89400417 	ldw	r5,16(r17)
 8005f54:	99000417 	ldw	r4,16(r19)
 8005f58:	d9800117 	ldw	r6,4(sp)
 8005f5c:	2149c83a 	sub	r4,r4,r5
 8005f60:	d9400017 	ldw	r5,0(sp)
 8005f64:	2008917a 	slli	r4,r4,5
 8005f68:	298bc83a 	sub	r5,r5,r6
 8005f6c:	2149883a 	add	r4,r4,r5
 8005f70:	01000e0e 	bge	zero,r4,8005fac <__ratio+0x98>
 8005f74:	2008953a 	slli	r4,r4,20
 8005f78:	2421883a 	add	r16,r4,r16
 8005f7c:	100d883a 	mov	r6,r2
 8005f80:	180f883a 	mov	r7,r3
 8005f84:	9009883a 	mov	r4,r18
 8005f88:	800b883a 	mov	r5,r16
 8005f8c:	8009a0c0 	call	8009a0c <__divdf3>
 8005f90:	dfc00617 	ldw	ra,24(sp)
 8005f94:	dcc00517 	ldw	r19,20(sp)
 8005f98:	dc800417 	ldw	r18,16(sp)
 8005f9c:	dc400317 	ldw	r17,12(sp)
 8005fa0:	dc000217 	ldw	r16,8(sp)
 8005fa4:	dec00704 	addi	sp,sp,28
 8005fa8:	f800283a 	ret
 8005fac:	2008953a 	slli	r4,r4,20
 8005fb0:	1907c83a 	sub	r3,r3,r4
 8005fb4:	003ff106 	br	8005f7c <__ratio+0x68>

08005fb8 <_mprec_log10>:
 8005fb8:	defffe04 	addi	sp,sp,-8
 8005fbc:	dc000015 	stw	r16,0(sp)
 8005fc0:	dfc00115 	stw	ra,4(sp)
 8005fc4:	20800608 	cmpgei	r2,r4,24
 8005fc8:	2021883a 	mov	r16,r4
 8005fcc:	10000d26 	beq	r2,zero,8006004 <_mprec_log10+0x4c>
 8005fd0:	0005883a 	mov	r2,zero
 8005fd4:	00cffc34 	movhi	r3,16368
 8005fd8:	843fffc4 	addi	r16,r16,-1
 8005fdc:	000d883a 	mov	r6,zero
 8005fe0:	01d00934 	movhi	r7,16420
 8005fe4:	1009883a 	mov	r4,r2
 8005fe8:	180b883a 	mov	r5,r3
 8005fec:	800a5d00 	call	800a5d0 <__muldf3>
 8005ff0:	803ff91e 	bne	r16,zero,8005fd8 <_mprec_log10+0x20>
 8005ff4:	dfc00117 	ldw	ra,4(sp)
 8005ff8:	dc000017 	ldw	r16,0(sp)
 8005ffc:	dec00204 	addi	sp,sp,8
 8006000:	f800283a 	ret
 8006004:	202090fa 	slli	r16,r4,3
 8006008:	00820074 	movhi	r2,2049
 800600c:	10b75604 	addi	r2,r2,-8872
 8006010:	1421883a 	add	r16,r2,r16
 8006014:	80800017 	ldw	r2,0(r16)
 8006018:	80c00117 	ldw	r3,4(r16)
 800601c:	dfc00117 	ldw	ra,4(sp)
 8006020:	dc000017 	ldw	r16,0(sp)
 8006024:	dec00204 	addi	sp,sp,8
 8006028:	f800283a 	ret

0800602c <__copybits>:
 800602c:	29ffffc4 	addi	r7,r5,-1
 8006030:	380fd17a 	srai	r7,r7,5
 8006034:	31400417 	ldw	r5,16(r6)
 8006038:	30800504 	addi	r2,r6,20
 800603c:	39c00044 	addi	r7,r7,1
 8006040:	280a90ba 	slli	r5,r5,2
 8006044:	380e90ba 	slli	r7,r7,2
 8006048:	114b883a 	add	r5,r2,r5
 800604c:	21cf883a 	add	r7,r4,r7
 8006050:	11400c2e 	bgeu	r2,r5,8006084 <__copybits+0x58>
 8006054:	2007883a 	mov	r3,r4
 8006058:	10800104 	addi	r2,r2,4
 800605c:	123fff17 	ldw	r8,-4(r2)
 8006060:	18c00104 	addi	r3,r3,4
 8006064:	1a3fff15 	stw	r8,-4(r3)
 8006068:	117ffb36 	bltu	r2,r5,8006058 <__copybits+0x2c>
 800606c:	2985c83a 	sub	r2,r5,r6
 8006070:	10bffac4 	addi	r2,r2,-21
 8006074:	1004d0ba 	srli	r2,r2,2
 8006078:	10800044 	addi	r2,r2,1
 800607c:	100490ba 	slli	r2,r2,2
 8006080:	2089883a 	add	r4,r4,r2
 8006084:	21c0032e 	bgeu	r4,r7,8006094 <__copybits+0x68>
 8006088:	21000104 	addi	r4,r4,4
 800608c:	203fff15 	stw	zero,-4(r4)
 8006090:	21fffd36 	bltu	r4,r7,8006088 <__copybits+0x5c>
 8006094:	f800283a 	ret

08006098 <__any_on>:
 8006098:	20800417 	ldw	r2,16(r4)
 800609c:	280dd17a 	srai	r6,r5,5
 80060a0:	21000504 	addi	r4,r4,20
 80060a4:	11800c0e 	bge	r2,r6,80060d8 <__any_on+0x40>
 80060a8:	100690ba 	slli	r3,r2,2
 80060ac:	20c7883a 	add	r3,r4,r3
 80060b0:	20c0142e 	bgeu	r4,r3,8006104 <__any_on+0x6c>
 80060b4:	18bfff17 	ldw	r2,-4(r3)
 80060b8:	18ffff04 	addi	r3,r3,-4
 80060bc:	1000041e 	bne	r2,zero,80060d0 <__any_on+0x38>
 80060c0:	20c00f2e 	bgeu	r4,r3,8006100 <__any_on+0x68>
 80060c4:	18ffff04 	addi	r3,r3,-4
 80060c8:	19400017 	ldw	r5,0(r3)
 80060cc:	283ffc26 	beq	r5,zero,80060c0 <__any_on+0x28>
 80060d0:	00800044 	movi	r2,1
 80060d4:	f800283a 	ret
 80060d8:	300690ba 	slli	r3,r6,2
 80060dc:	20c7883a 	add	r3,r4,r3
 80060e0:	30bff30e 	bge	r6,r2,80060b0 <__any_on+0x18>
 80060e4:	294007cc 	andi	r5,r5,31
 80060e8:	283ff126 	beq	r5,zero,80060b0 <__any_on+0x18>
 80060ec:	19800017 	ldw	r6,0(r3)
 80060f0:	3144d83a 	srl	r2,r6,r5
 80060f4:	114a983a 	sll	r5,r2,r5
 80060f8:	317ff51e 	bne	r6,r5,80060d0 <__any_on+0x38>
 80060fc:	003fec06 	br	80060b0 <__any_on+0x18>
 8006100:	f800283a 	ret
 8006104:	0005883a 	mov	r2,zero
 8006108:	f800283a 	ret

0800610c <_sbrk_r>:
 800610c:	defffe04 	addi	sp,sp,-8
 8006110:	dc000015 	stw	r16,0(sp)
 8006114:	00820074 	movhi	r2,2049
 8006118:	2021883a 	mov	r16,r4
 800611c:	2809883a 	mov	r4,r5
 8006120:	dfc00115 	stw	ra,4(sp)
 8006124:	10089f15 	stw	zero,8828(r2)
 8006128:	800bb580 	call	800bb58 <sbrk>
 800612c:	10ffffd8 	cmpnei	r3,r2,-1
 8006130:	18000426 	beq	r3,zero,8006144 <_sbrk_r+0x38>
 8006134:	dfc00117 	ldw	ra,4(sp)
 8006138:	dc000017 	ldw	r16,0(sp)
 800613c:	dec00204 	addi	sp,sp,8
 8006140:	f800283a 	ret
 8006144:	00c20074 	movhi	r3,2049
 8006148:	18c89f17 	ldw	r3,8828(r3)
 800614c:	183ff926 	beq	r3,zero,8006134 <_sbrk_r+0x28>
 8006150:	80c00015 	stw	r3,0(r16)
 8006154:	dfc00117 	ldw	ra,4(sp)
 8006158:	dc000017 	ldw	r16,0(sp)
 800615c:	dec00204 	addi	sp,sp,8
 8006160:	f800283a 	ret

08006164 <__ssprint_r>:
 8006164:	30800217 	ldw	r2,8(r6)
 8006168:	defff604 	addi	sp,sp,-40
 800616c:	dcc00315 	stw	r19,12(sp)
 8006170:	dfc00915 	stw	ra,36(sp)
 8006174:	df000815 	stw	fp,32(sp)
 8006178:	ddc00715 	stw	r23,28(sp)
 800617c:	dd800615 	stw	r22,24(sp)
 8006180:	dd400515 	stw	r21,20(sp)
 8006184:	dd000415 	stw	r20,16(sp)
 8006188:	dc800215 	stw	r18,8(sp)
 800618c:	dc400115 	stw	r17,4(sp)
 8006190:	dc000015 	stw	r16,0(sp)
 8006194:	3027883a 	mov	r19,r6
 8006198:	10005526 	beq	r2,zero,80062f0 <__ssprint_r+0x18c>
 800619c:	2029883a 	mov	r20,r4
 80061a0:	2821883a 	mov	r16,r5
 80061a4:	35800017 	ldw	r22,0(r6)
 80061a8:	29000017 	ldw	r4,0(r5)
 80061ac:	2c400217 	ldw	r17,8(r5)
 80061b0:	057edfc4 	movi	r21,-1153
 80061b4:	00003506 	br	800628c <__ssprint_r+0x128>
 80061b8:	8080030b 	ldhu	r2,12(r16)
 80061bc:	10c1200c 	andi	r3,r2,1152
 80061c0:	18002526 	beq	r3,zero,8006258 <__ssprint_r+0xf4>
 80061c4:	84400517 	ldw	r17,20(r16)
 80061c8:	81400417 	ldw	r5,16(r16)
 80061cc:	90c00044 	addi	r3,r18,1
 80061d0:	8c4d883a 	add	r6,r17,r17
 80061d4:	344d883a 	add	r6,r6,r17
 80061d8:	3022d7fa 	srli	r17,r6,31
 80061dc:	216fc83a 	sub	r23,r4,r5
 80061e0:	1dc7883a 	add	r3,r3,r23
 80061e4:	89a3883a 	add	r17,r17,r6
 80061e8:	8823d07a 	srai	r17,r17,1
 80061ec:	880d883a 	mov	r6,r17
 80061f0:	88c0022e 	bgeu	r17,r3,80061fc <__ssprint_r+0x98>
 80061f4:	1823883a 	mov	r17,r3
 80061f8:	180d883a 	mov	r6,r3
 80061fc:	1081000c 	andi	r2,r2,1024
 8006200:	10002b26 	beq	r2,zero,80062b0 <__ssprint_r+0x14c>
 8006204:	300b883a 	mov	r5,r6
 8006208:	a009883a 	mov	r4,r20
 800620c:	800477c0 	call	800477c <_malloc_r>
 8006210:	10002e26 	beq	r2,zero,80062cc <__ssprint_r+0x168>
 8006214:	81400417 	ldw	r5,16(r16)
 8006218:	b80d883a 	mov	r6,r23
 800621c:	1009883a 	mov	r4,r2
 8006220:	80050580 	call	8005058 <memcpy>
 8006224:	1007883a 	mov	r3,r2
 8006228:	8080030b 	ldhu	r2,12(r16)
 800622c:	1544703a 	and	r2,r2,r21
 8006230:	10802014 	ori	r2,r2,128
 8006234:	8080030d 	sth	r2,12(r16)
 8006238:	8dc5c83a 	sub	r2,r17,r23
 800623c:	1dc9883a 	add	r4,r3,r23
 8006240:	84400515 	stw	r17,20(r16)
 8006244:	80c00415 	stw	r3,16(r16)
 8006248:	81000015 	stw	r4,0(r16)
 800624c:	9023883a 	mov	r17,r18
 8006250:	80800215 	stw	r2,8(r16)
 8006254:	902f883a 	mov	r23,r18
 8006258:	b80d883a 	mov	r6,r23
 800625c:	e00b883a 	mov	r5,fp
 8006260:	8007a240 	call	8007a24 <memmove>
 8006264:	80c00217 	ldw	r3,8(r16)
 8006268:	81000017 	ldw	r4,0(r16)
 800626c:	98800217 	ldw	r2,8(r19)
 8006270:	1c63c83a 	sub	r17,r3,r17
 8006274:	25c9883a 	add	r4,r4,r23
 8006278:	84400215 	stw	r17,8(r16)
 800627c:	81000015 	stw	r4,0(r16)
 8006280:	14a5c83a 	sub	r18,r2,r18
 8006284:	9c800215 	stw	r18,8(r19)
 8006288:	90001926 	beq	r18,zero,80062f0 <__ssprint_r+0x18c>
 800628c:	b4800117 	ldw	r18,4(r22)
 8006290:	b7000017 	ldw	fp,0(r22)
 8006294:	882f883a 	mov	r23,r17
 8006298:	b5800204 	addi	r22,r22,8
 800629c:	903ffb26 	beq	r18,zero,800628c <__ssprint_r+0x128>
 80062a0:	947fc52e 	bgeu	r18,r17,80061b8 <__ssprint_r+0x54>
 80062a4:	9023883a 	mov	r17,r18
 80062a8:	902f883a 	mov	r23,r18
 80062ac:	003fea06 	br	8006258 <__ssprint_r+0xf4>
 80062b0:	a009883a 	mov	r4,r20
 80062b4:	8007c400 	call	8007c40 <_realloc_r>
 80062b8:	1007883a 	mov	r3,r2
 80062bc:	103fde1e 	bne	r2,zero,8006238 <__ssprint_r+0xd4>
 80062c0:	81400417 	ldw	r5,16(r16)
 80062c4:	a009883a 	mov	r4,r20
 80062c8:	80076480 	call	8007648 <_free_r>
 80062cc:	80c0030b 	ldhu	r3,12(r16)
 80062d0:	00800304 	movi	r2,12
 80062d4:	a0800015 	stw	r2,0(r20)
 80062d8:	18c01014 	ori	r3,r3,64
 80062dc:	80c0030d 	sth	r3,12(r16)
 80062e0:	00bfffc4 	movi	r2,-1
 80062e4:	98000215 	stw	zero,8(r19)
 80062e8:	98000115 	stw	zero,4(r19)
 80062ec:	00000206 	br	80062f8 <__ssprint_r+0x194>
 80062f0:	98000115 	stw	zero,4(r19)
 80062f4:	0005883a 	mov	r2,zero
 80062f8:	dfc00917 	ldw	ra,36(sp)
 80062fc:	df000817 	ldw	fp,32(sp)
 8006300:	ddc00717 	ldw	r23,28(sp)
 8006304:	dd800617 	ldw	r22,24(sp)
 8006308:	dd400517 	ldw	r21,20(sp)
 800630c:	dd000417 	ldw	r20,16(sp)
 8006310:	dcc00317 	ldw	r19,12(sp)
 8006314:	dc800217 	ldw	r18,8(sp)
 8006318:	dc400117 	ldw	r17,4(sp)
 800631c:	dc000017 	ldw	r16,0(sp)
 8006320:	dec00a04 	addi	sp,sp,40
 8006324:	f800283a 	ret

08006328 <___svfiprintf_internal_r>:
 8006328:	2880030b 	ldhu	r2,12(r5)
 800632c:	deffd004 	addi	sp,sp,-192
 8006330:	df002e15 	stw	fp,184(sp)
 8006334:	dd802c15 	stw	r22,176(sp)
 8006338:	dd002a15 	stw	r20,168(sp)
 800633c:	dfc02f15 	stw	ra,188(sp)
 8006340:	ddc02d15 	stw	r23,180(sp)
 8006344:	dd402b15 	stw	r21,172(sp)
 8006348:	dcc02915 	stw	r19,164(sp)
 800634c:	dc802815 	stw	r18,160(sp)
 8006350:	dc402715 	stw	r17,156(sp)
 8006354:	dc002615 	stw	r16,152(sp)
 8006358:	1080200c 	andi	r2,r2,128
 800635c:	d9c00315 	stw	r7,12(sp)
 8006360:	2829883a 	mov	r20,r5
 8006364:	202d883a 	mov	r22,r4
 8006368:	3039883a 	mov	fp,r6
 800636c:	10000226 	beq	r2,zero,8006378 <___svfiprintf_internal_r+0x50>
 8006370:	28800417 	ldw	r2,16(r5)
 8006374:	10039f26 	beq	r2,zero,80071f4 <___svfiprintf_internal_r+0xecc>
 8006378:	dc801604 	addi	r18,sp,88
 800637c:	dc800915 	stw	r18,36(sp)
 8006380:	d8000b15 	stw	zero,44(sp)
 8006384:	d8000a15 	stw	zero,40(sp)
 8006388:	9011883a 	mov	r8,r18
 800638c:	d8000415 	stw	zero,16(sp)
 8006390:	d8000015 	stw	zero,0(sp)
 8006394:	e0800007 	ldb	r2,0(fp)
 8006398:	10009026 	beq	r2,zero,80065dc <___svfiprintf_internal_r+0x2b4>
 800639c:	10800960 	cmpeqi	r2,r2,37
 80063a0:	1003791e 	bne	r2,zero,8007188 <___svfiprintf_internal_r+0xe60>
 80063a4:	e021883a 	mov	r16,fp
 80063a8:	00000206 	br	80063b4 <___svfiprintf_internal_r+0x8c>
 80063ac:	18008126 	beq	r3,zero,80065b4 <___svfiprintf_internal_r+0x28c>
 80063b0:	8821883a 	mov	r16,r17
 80063b4:	80800047 	ldb	r2,1(r16)
 80063b8:	84400044 	addi	r17,r16,1
 80063bc:	10c00958 	cmpnei	r3,r2,37
 80063c0:	103ffa1e 	bne	r2,zero,80063ac <___svfiprintf_internal_r+0x84>
 80063c4:	8f27c83a 	sub	r19,r17,fp
 80063c8:	98008426 	beq	r19,zero,80065dc <___svfiprintf_internal_r+0x2b4>
 80063cc:	d8c00b17 	ldw	r3,44(sp)
 80063d0:	d8800a17 	ldw	r2,40(sp)
 80063d4:	47000015 	stw	fp,0(r8)
 80063d8:	1cc7883a 	add	r3,r3,r19
 80063dc:	10800044 	addi	r2,r2,1
 80063e0:	d8800a15 	stw	r2,40(sp)
 80063e4:	44c00115 	stw	r19,4(r8)
 80063e8:	d8c00b15 	stw	r3,44(sp)
 80063ec:	10800208 	cmpgei	r2,r2,8
 80063f0:	1000731e 	bne	r2,zero,80065c0 <___svfiprintf_internal_r+0x298>
 80063f4:	42000204 	addi	r8,r8,8
 80063f8:	d8c00017 	ldw	r3,0(sp)
 80063fc:	80800047 	ldb	r2,1(r16)
 8006400:	1cc7883a 	add	r3,r3,r19
 8006404:	d8c00015 	stw	r3,0(sp)
 8006408:	10007426 	beq	r2,zero,80065dc <___svfiprintf_internal_r+0x2b4>
 800640c:	88800047 	ldb	r2,1(r17)
 8006410:	8f000044 	addi	fp,r17,1
 8006414:	d8000845 	stb	zero,33(sp)
 8006418:	000b883a 	mov	r5,zero
 800641c:	000d883a 	mov	r6,zero
 8006420:	02bfffc4 	movi	r10,-1
 8006424:	0021883a 	mov	r16,zero
 8006428:	0019883a 	mov	r12,zero
 800642c:	e7000044 	addi	fp,fp,1
 8006430:	10fff804 	addi	r3,r2,-32
 8006434:	19001668 	cmpgeui	r4,r3,89
 8006438:	20008c1e 	bne	r4,zero,800666c <___svfiprintf_internal_r+0x344>
 800643c:	180690ba 	slli	r3,r3,2
 8006440:	01020034 	movhi	r4,2048
 8006444:	1909883a 	add	r4,r3,r4
 8006448:	20d91417 	ldw	r3,25680(r4)
 800644c:	1800683a 	jmp	r3
 8006450:	08006744 	addi	zero,at,413
 8006454:	0800666c 	andhi	zero,at,409
 8006458:	0800666c 	andhi	zero,at,409
 800645c:	08006738 	rdprs	zero,at,412
 8006460:	0800666c 	andhi	zero,at,409
 8006464:	0800666c 	andhi	zero,at,409
 8006468:	0800666c 	andhi	zero,at,409
 800646c:	0800666c 	andhi	zero,at,409
 8006470:	0800666c 	andhi	zero,at,409
 8006474:	0800666c 	andhi	zero,at,409
 8006478:	08006710 	cmplti	zero,at,412
 800647c:	08006700 	call	800670 <__alt_mem_onchip_memory2_0+0x800670>
 8006480:	0800666c 	andhi	zero,at,409
 8006484:	080066e8 	cmpgeui	zero,at,411
 8006488:	0800669c 	xori	zero,at,410
 800648c:	0800666c 	andhi	zero,at,409
 8006490:	08006690 	cmplti	zero,at,410
 8006494:	08006634 	orhi	zero,at,408
 8006498:	08006634 	orhi	zero,at,408
 800649c:	08006634 	orhi	zero,at,408
 80064a0:	08006634 	orhi	zero,at,408
 80064a4:	08006634 	orhi	zero,at,408
 80064a8:	08006634 	orhi	zero,at,408
 80064ac:	08006634 	orhi	zero,at,408
 80064b0:	08006634 	orhi	zero,at,408
 80064b4:	08006634 	orhi	zero,at,408
 80064b8:	0800666c 	andhi	zero,at,409
 80064bc:	0800666c 	andhi	zero,at,409
 80064c0:	0800666c 	andhi	zero,at,409
 80064c4:	0800666c 	andhi	zero,at,409
 80064c8:	0800666c 	andhi	zero,at,409
 80064cc:	0800666c 	andhi	zero,at,409
 80064d0:	0800666c 	andhi	zero,at,409
 80064d4:	0800666c 	andhi	zero,at,409
 80064d8:	0800666c 	andhi	zero,at,409
 80064dc:	0800666c 	andhi	zero,at,409
 80064e0:	08006cb0 	cmpltui	zero,at,434
 80064e4:	0800666c 	andhi	zero,at,409
 80064e8:	0800666c 	andhi	zero,at,409
 80064ec:	0800666c 	andhi	zero,at,409
 80064f0:	0800666c 	andhi	zero,at,409
 80064f4:	0800666c 	andhi	zero,at,409
 80064f8:	0800666c 	andhi	zero,at,409
 80064fc:	0800666c 	andhi	zero,at,409
 8006500:	0800666c 	andhi	zero,at,409
 8006504:	0800666c 	andhi	zero,at,409
 8006508:	0800666c 	andhi	zero,at,409
 800650c:	08006c7c 	xorhi	zero,at,433
 8006510:	0800666c 	andhi	zero,at,409
 8006514:	0800666c 	andhi	zero,at,409
 8006518:	0800666c 	andhi	zero,at,409
 800651c:	0800666c 	andhi	zero,at,409
 8006520:	0800666c 	andhi	zero,at,409
 8006524:	08006c48 	cmpgei	zero,at,433
 8006528:	0800666c 	andhi	zero,at,409
 800652c:	0800666c 	andhi	zero,at,409
 8006530:	08006c00 	call	8006c0 <__alt_mem_onchip_memory2_0+0x8006c0>
 8006534:	0800666c 	andhi	zero,at,409
 8006538:	0800666c 	andhi	zero,at,409
 800653c:	0800666c 	andhi	zero,at,409
 8006540:	0800666c 	andhi	zero,at,409
 8006544:	0800666c 	andhi	zero,at,409
 8006548:	0800666c 	andhi	zero,at,409
 800654c:	0800666c 	andhi	zero,at,409
 8006550:	0800666c 	andhi	zero,at,409
 8006554:	0800666c 	andhi	zero,at,409
 8006558:	0800666c 	andhi	zero,at,409
 800655c:	08006bd0 	cmplti	zero,at,431
 8006560:	08006b5c 	xori	zero,at,429
 8006564:	0800666c 	andhi	zero,at,409
 8006568:	0800666c 	andhi	zero,at,409
 800656c:	0800666c 	andhi	zero,at,409
 8006570:	08006b50 	cmplti	zero,at,429
 8006574:	08006b5c 	xori	zero,at,429
 8006578:	0800666c 	andhi	zero,at,409
 800657c:	0800666c 	andhi	zero,at,409
 8006580:	08006b3c 	xorhi	zero,at,428
 8006584:	0800666c 	andhi	zero,at,409
 8006588:	08006afc 	xorhi	zero,at,427
 800658c:	08006abc 	xorhi	zero,at,426
 8006590:	08006864 	muli	zero,at,417
 8006594:	08006858 	cmpnei	zero,at,417
 8006598:	0800666c 	andhi	zero,at,409
 800659c:	080067f8 	rdprs	zero,at,415
 80065a0:	0800666c 	andhi	zero,at,409
 80065a4:	080067b8 	rdprs	zero,at,414
 80065a8:	0800666c 	andhi	zero,at,409
 80065ac:	0800666c 	andhi	zero,at,409
 80065b0:	08006770 	cmpltui	zero,at,413
 80065b4:	8f27c83a 	sub	r19,r17,fp
 80065b8:	983f9426 	beq	r19,zero,800640c <___svfiprintf_internal_r+0xe4>
 80065bc:	003f8306 	br	80063cc <___svfiprintf_internal_r+0xa4>
 80065c0:	d9800904 	addi	r6,sp,36
 80065c4:	a00b883a 	mov	r5,r20
 80065c8:	b009883a 	mov	r4,r22
 80065cc:	80061640 	call	8006164 <__ssprint_r>
 80065d0:	1000081e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 80065d4:	9011883a 	mov	r8,r18
 80065d8:	003f8706 	br	80063f8 <___svfiprintf_internal_r+0xd0>
 80065dc:	d8800b17 	ldw	r2,44(sp)
 80065e0:	10000426 	beq	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 80065e4:	d9800904 	addi	r6,sp,36
 80065e8:	a00b883a 	mov	r5,r20
 80065ec:	b009883a 	mov	r4,r22
 80065f0:	80061640 	call	8006164 <__ssprint_r>
 80065f4:	a080030b 	ldhu	r2,12(r20)
 80065f8:	1080100c 	andi	r2,r2,64
 80065fc:	1003841e 	bne	r2,zero,8007410 <___svfiprintf_internal_r+0x10e8>
 8006600:	d8800017 	ldw	r2,0(sp)
 8006604:	dfc02f17 	ldw	ra,188(sp)
 8006608:	df002e17 	ldw	fp,184(sp)
 800660c:	ddc02d17 	ldw	r23,180(sp)
 8006610:	dd802c17 	ldw	r22,176(sp)
 8006614:	dd402b17 	ldw	r21,172(sp)
 8006618:	dd002a17 	ldw	r20,168(sp)
 800661c:	dcc02917 	ldw	r19,164(sp)
 8006620:	dc802817 	ldw	r18,160(sp)
 8006624:	dc402717 	ldw	r17,156(sp)
 8006628:	dc002617 	ldw	r16,152(sp)
 800662c:	dec03004 	addi	sp,sp,192
 8006630:	f800283a 	ret
 8006634:	0021883a 	mov	r16,zero
 8006638:	113ff404 	addi	r4,r2,-48
 800663c:	800690ba 	slli	r3,r16,2
 8006640:	e7000044 	addi	fp,fp,1
 8006644:	e0bfffc7 	ldb	r2,-1(fp)
 8006648:	1c21883a 	add	r16,r3,r16
 800664c:	8421883a 	add	r16,r16,r16
 8006650:	2421883a 	add	r16,r4,r16
 8006654:	113ff404 	addi	r4,r2,-48
 8006658:	20c002b0 	cmpltui	r3,r4,10
 800665c:	183ff71e 	bne	r3,zero,800663c <___svfiprintf_internal_r+0x314>
 8006660:	10fff804 	addi	r3,r2,-32
 8006664:	19001668 	cmpgeui	r4,r3,89
 8006668:	203f7426 	beq	r4,zero,800643c <___svfiprintf_internal_r+0x114>
 800666c:	29403fcc 	andi	r5,r5,255
 8006670:	28034a1e 	bne	r5,zero,800739c <___svfiprintf_internal_r+0x1074>
 8006674:	103fd926 	beq	r2,zero,80065dc <___svfiprintf_internal_r+0x2b4>
 8006678:	d8800c05 	stb	r2,48(sp)
 800667c:	d8000845 	stb	zero,33(sp)
 8006680:	04c00044 	movi	r19,1
 8006684:	05400044 	movi	r21,1
 8006688:	ddc00c04 	addi	r23,sp,48
 800668c:	00015906 	br	8006bf4 <___svfiprintf_internal_r+0x8cc>
 8006690:	63002014 	ori	r12,r12,128
 8006694:	e0800007 	ldb	r2,0(fp)
 8006698:	003f6406 	br	800642c <___svfiprintf_internal_r+0x104>
 800669c:	e0800007 	ldb	r2,0(fp)
 80066a0:	e0c00044 	addi	r3,fp,1
 80066a4:	11000aa0 	cmpeqi	r4,r2,42
 80066a8:	20035c1e 	bne	r4,zero,800741c <___svfiprintf_internal_r+0x10f4>
 80066ac:	113ff404 	addi	r4,r2,-48
 80066b0:	21c002b0 	cmpltui	r7,r4,10
 80066b4:	1839883a 	mov	fp,r3
 80066b8:	0015883a 	mov	r10,zero
 80066bc:	383f5c26 	beq	r7,zero,8006430 <___svfiprintf_internal_r+0x108>
 80066c0:	500690ba 	slli	r3,r10,2
 80066c4:	e7000044 	addi	fp,fp,1
 80066c8:	e0bfffc7 	ldb	r2,-1(fp)
 80066cc:	1a87883a 	add	r3,r3,r10
 80066d0:	18c7883a 	add	r3,r3,r3
 80066d4:	1915883a 	add	r10,r3,r4
 80066d8:	113ff404 	addi	r4,r2,-48
 80066dc:	20c002b0 	cmpltui	r3,r4,10
 80066e0:	183ff71e 	bne	r3,zero,80066c0 <___svfiprintf_internal_r+0x398>
 80066e4:	003f5206 	br	8006430 <___svfiprintf_internal_r+0x108>
 80066e8:	e0800003 	ldbu	r2,0(fp)
 80066ec:	10803fcc 	andi	r2,r2,255
 80066f0:	1080201c 	xori	r2,r2,128
 80066f4:	63000114 	ori	r12,r12,4
 80066f8:	10bfe004 	addi	r2,r2,-128
 80066fc:	003f4b06 	br	800642c <___svfiprintf_internal_r+0x104>
 8006700:	01400044 	movi	r5,1
 8006704:	01800ac4 	movi	r6,43
 8006708:	e0800007 	ldb	r2,0(fp)
 800670c:	003f4706 	br	800642c <___svfiprintf_internal_r+0x104>
 8006710:	d8800317 	ldw	r2,12(sp)
 8006714:	14000017 	ldw	r16,0(r2)
 8006718:	15c00104 	addi	r23,r2,4
 800671c:	e0800003 	ldbu	r2,0(fp)
 8006720:	8002ee16 	blt	r16,zero,80072dc <___svfiprintf_internal_r+0xfb4>
 8006724:	ddc00315 	stw	r23,12(sp)
 8006728:	10803fcc 	andi	r2,r2,255
 800672c:	1080201c 	xori	r2,r2,128
 8006730:	10bfe004 	addi	r2,r2,-128
 8006734:	003f3d06 	br	800642c <___svfiprintf_internal_r+0x104>
 8006738:	63000054 	ori	r12,r12,1
 800673c:	e0800007 	ldb	r2,0(fp)
 8006740:	003f3a06 	br	800642c <___svfiprintf_internal_r+0x104>
 8006744:	30c03fcc 	andi	r3,r6,255
 8006748:	18c0201c 	xori	r3,r3,128
 800674c:	18ffe004 	addi	r3,r3,-128
 8006750:	e0800003 	ldbu	r2,0(fp)
 8006754:	183ff41e 	bne	r3,zero,8006728 <___svfiprintf_internal_r+0x400>
 8006758:	10803fcc 	andi	r2,r2,255
 800675c:	1080201c 	xori	r2,r2,128
 8006760:	01400044 	movi	r5,1
 8006764:	01800804 	movi	r6,32
 8006768:	10bfe004 	addi	r2,r2,-128
 800676c:	003f2f06 	br	800642c <___svfiprintf_internal_r+0x104>
 8006770:	29403fcc 	andi	r5,r5,255
 8006774:	28030f1e 	bne	r5,zero,80073b4 <___svfiprintf_internal_r+0x108c>
 8006778:	00c20074 	movhi	r3,2049
 800677c:	18f72b04 	addi	r3,r3,-9044
 8006780:	d8c00415 	stw	r3,16(sp)
 8006784:	60c0080c 	andi	r3,r12,32
 8006788:	18012426 	beq	r3,zero,8006c1c <___svfiprintf_internal_r+0x8f4>
 800678c:	d8c00317 	ldw	r3,12(sp)
 8006790:	1cc00017 	ldw	r19,0(r3)
 8006794:	1d400117 	ldw	r21,4(r3)
 8006798:	18c00204 	addi	r3,r3,8
 800679c:	d8c00315 	stw	r3,12(sp)
 80067a0:	60c0004c 	andi	r3,r12,1
 80067a4:	18000226 	beq	r3,zero,80067b0 <___svfiprintf_internal_r+0x488>
 80067a8:	9d46b03a 	or	r3,r19,r21
 80067ac:	1802811e 	bne	r3,zero,80071b4 <___svfiprintf_internal_r+0xe8c>
 80067b0:	00800084 	movi	r2,2
 80067b4:	00003906 	br	800689c <___svfiprintf_internal_r+0x574>
 80067b8:	29403fcc 	andi	r5,r5,255
 80067bc:	2803091e 	bne	r5,zero,80073e4 <___svfiprintf_internal_r+0x10bc>
 80067c0:	6080080c 	andi	r2,r12,32
 80067c4:	10017e1e 	bne	r2,zero,8006dc0 <___svfiprintf_internal_r+0xa98>
 80067c8:	d8800317 	ldw	r2,12(sp)
 80067cc:	60c0040c 	andi	r3,r12,16
 80067d0:	14c00017 	ldw	r19,0(r2)
 80067d4:	10800104 	addi	r2,r2,4
 80067d8:	1801221e 	bne	r3,zero,8006c64 <___svfiprintf_internal_r+0x93c>
 80067dc:	60c0100c 	andi	r3,r12,64
 80067e0:	1802e626 	beq	r3,zero,800737c <___svfiprintf_internal_r+0x1054>
 80067e4:	d8800315 	stw	r2,12(sp)
 80067e8:	9cffffcc 	andi	r19,r19,65535
 80067ec:	002b883a 	mov	r21,zero
 80067f0:	00800044 	movi	r2,1
 80067f4:	00002906 	br	800689c <___svfiprintf_internal_r+0x574>
 80067f8:	d8800317 	ldw	r2,12(sp)
 80067fc:	d8000845 	stb	zero,33(sp)
 8006800:	15c00017 	ldw	r23,0(r2)
 8006804:	14400104 	addi	r17,r2,4
 8006808:	b802cf26 	beq	r23,zero,8007348 <___svfiprintf_internal_r+0x1020>
 800680c:	50bfffe0 	cmpeqi	r2,r10,-1
 8006810:	10026e1e 	bne	r2,zero,80071cc <___svfiprintf_internal_r+0xea4>
 8006814:	500d883a 	mov	r6,r10
 8006818:	000b883a 	mov	r5,zero
 800681c:	b809883a 	mov	r4,r23
 8006820:	da000315 	stw	r8,12(sp)
 8006824:	db000215 	stw	r12,8(sp)
 8006828:	da800115 	stw	r10,4(sp)
 800682c:	8004f700 	call	8004f70 <memchr>
 8006830:	da800117 	ldw	r10,4(sp)
 8006834:	db000217 	ldw	r12,8(sp)
 8006838:	da000317 	ldw	r8,12(sp)
 800683c:	1002d926 	beq	r2,zero,80073a4 <___svfiprintf_internal_r+0x107c>
 8006840:	15ebc83a 	sub	r21,r2,r23
 8006844:	a827883a 	mov	r19,r21
 8006848:	a800010e 	bge	r21,zero,8006850 <___svfiprintf_internal_r+0x528>
 800684c:	0027883a 	mov	r19,zero
 8006850:	dc400315 	stw	r17,12(sp)
 8006854:	0000e706 	br	8006bf4 <___svfiprintf_internal_r+0x8cc>
 8006858:	63000814 	ori	r12,r12,32
 800685c:	e0800007 	ldb	r2,0(fp)
 8006860:	003ef206 	br	800642c <___svfiprintf_internal_r+0x104>
 8006864:	d8c00317 	ldw	r3,12(sp)
 8006868:	00800c04 	movi	r2,48
 800686c:	d8800885 	stb	r2,34(sp)
 8006870:	00801e04 	movi	r2,120
 8006874:	01020074 	movhi	r4,2049
 8006878:	d88008c5 	stb	r2,35(sp)
 800687c:	1cc00017 	ldw	r19,0(r3)
 8006880:	18800104 	addi	r2,r3,4
 8006884:	d8800315 	stw	r2,12(sp)
 8006888:	20b72b04 	addi	r2,r4,-9044
 800688c:	d8800415 	stw	r2,16(sp)
 8006890:	002b883a 	mov	r21,zero
 8006894:	63000094 	ori	r12,r12,2
 8006898:	00800084 	movi	r2,2
 800689c:	d8000845 	stb	zero,33(sp)
 80068a0:	50ffffe0 	cmpeqi	r3,r10,-1
 80068a4:	001b883a 	mov	r13,zero
 80068a8:	1801181e 	bne	r3,zero,8006d0c <___svfiprintf_internal_r+0x9e4>
 80068ac:	047fdfc4 	movi	r17,-129
 80068b0:	9d46b03a 	or	r3,r19,r21
 80068b4:	6462703a 	and	r17,r12,r17
 80068b8:	1801d21e 	bne	r3,zero,8007004 <___svfiprintf_internal_r+0xcdc>
 80068bc:	50028a1e 	bne	r10,zero,80072e8 <___svfiprintf_internal_r+0xfc0>
 80068c0:	1000bf1e 	bne	r2,zero,8006bc0 <___svfiprintf_internal_r+0x898>
 80068c4:	6540004c 	andi	r21,r12,1
 80068c8:	a8023126 	beq	r21,zero,8007190 <___svfiprintf_internal_r+0xe68>
 80068cc:	00800c04 	movi	r2,48
 80068d0:	d88015c5 	stb	r2,87(sp)
 80068d4:	ddc015c4 	addi	r23,sp,87
 80068d8:	5027883a 	mov	r19,r10
 80068dc:	5540010e 	bge	r10,r21,80068e4 <___svfiprintf_internal_r+0x5bc>
 80068e0:	a827883a 	mov	r19,r21
 80068e4:	6b403fcc 	andi	r13,r13,255
 80068e8:	6b40201c 	xori	r13,r13,128
 80068ec:	6b7fe004 	addi	r13,r13,-128
 80068f0:	68000126 	beq	r13,zero,80068f8 <___svfiprintf_internal_r+0x5d0>
 80068f4:	9cc00044 	addi	r19,r19,1
 80068f8:	8b40008c 	andi	r13,r17,2
 80068fc:	68000126 	beq	r13,zero,8006904 <___svfiprintf_internal_r+0x5dc>
 8006900:	9cc00084 	addi	r19,r19,2
 8006904:	8b00210c 	andi	r12,r17,132
 8006908:	d8800b17 	ldw	r2,44(sp)
 800690c:	d9000a17 	ldw	r4,40(sp)
 8006910:	6000021e 	bne	r12,zero,800691c <___svfiprintf_internal_r+0x5f4>
 8006914:	84c7c83a 	sub	r3,r16,r19
 8006918:	00c1bc16 	blt	zero,r3,800700c <___svfiprintf_internal_r+0xce4>
 800691c:	d8c00847 	ldb	r3,33(sp)
 8006920:	21800044 	addi	r6,r4,1
 8006924:	41400204 	addi	r5,r8,8
 8006928:	18000f26 	beq	r3,zero,8006968 <___svfiprintf_internal_r+0x640>
 800692c:	d8c00844 	addi	r3,sp,33
 8006930:	10800044 	addi	r2,r2,1
 8006934:	40c00015 	stw	r3,0(r8)
 8006938:	00c00044 	movi	r3,1
 800693c:	40c00115 	stw	r3,4(r8)
 8006940:	d8800b15 	stw	r2,44(sp)
 8006944:	d9800a15 	stw	r6,40(sp)
 8006948:	30c00208 	cmpgei	r3,r6,8
 800694c:	1801e11e 	bne	r3,zero,80070d4 <___svfiprintf_internal_r+0xdac>
 8006950:	21c00084 	addi	r7,r4,2
 8006954:	40c00404 	addi	r3,r8,16
 8006958:	3009883a 	mov	r4,r6
 800695c:	2811883a 	mov	r8,r5
 8006960:	380d883a 	mov	r6,r7
 8006964:	180b883a 	mov	r5,r3
 8006968:	68000d26 	beq	r13,zero,80069a0 <___svfiprintf_internal_r+0x678>
 800696c:	d8c00884 	addi	r3,sp,34
 8006970:	10800084 	addi	r2,r2,2
 8006974:	40c00015 	stw	r3,0(r8)
 8006978:	00c00084 	movi	r3,2
 800697c:	40c00115 	stw	r3,4(r8)
 8006980:	d8800b15 	stw	r2,44(sp)
 8006984:	d9800a15 	stw	r6,40(sp)
 8006988:	30c00208 	cmpgei	r3,r6,8
 800698c:	1801e21e 	bne	r3,zero,8007118 <___svfiprintf_internal_r+0xdf0>
 8006990:	3009883a 	mov	r4,r6
 8006994:	2811883a 	mov	r8,r5
 8006998:	31800044 	addi	r6,r6,1
 800699c:	29400204 	addi	r5,r5,8
 80069a0:	63002018 	cmpnei	r12,r12,128
 80069a4:	60011626 	beq	r12,zero,8006e00 <___svfiprintf_internal_r+0xad8>
 80069a8:	5547c83a 	sub	r3,r10,r21
 80069ac:	00c14816 	blt	zero,r3,8006ed0 <___svfiprintf_internal_r+0xba8>
 80069b0:	a885883a 	add	r2,r21,r2
 80069b4:	d9800a15 	stw	r6,40(sp)
 80069b8:	45c00015 	stw	r23,0(r8)
 80069bc:	45400115 	stw	r21,4(r8)
 80069c0:	d8800b15 	stw	r2,44(sp)
 80069c4:	31800210 	cmplti	r6,r6,8
 80069c8:	30017026 	beq	r6,zero,8006f8c <___svfiprintf_internal_r+0xc64>
 80069cc:	8c40010c 	andi	r17,r17,4
 80069d0:	88000226 	beq	r17,zero,80069dc <___svfiprintf_internal_r+0x6b4>
 80069d4:	84e3c83a 	sub	r17,r16,r19
 80069d8:	04400916 	blt	zero,r17,8006a00 <___svfiprintf_internal_r+0x6d8>
 80069dc:	84c0010e 	bge	r16,r19,80069e4 <___svfiprintf_internal_r+0x6bc>
 80069e0:	9821883a 	mov	r16,r19
 80069e4:	d8c00017 	ldw	r3,0(sp)
 80069e8:	1c07883a 	add	r3,r3,r16
 80069ec:	d8c00015 	stw	r3,0(sp)
 80069f0:	10017e1e 	bne	r2,zero,8006fec <___svfiprintf_internal_r+0xcc4>
 80069f4:	d8000a15 	stw	zero,40(sp)
 80069f8:	9011883a 	mov	r8,r18
 80069fc:	003e6506 	br	8006394 <___svfiprintf_internal_r+0x6c>
 8006a00:	01c20074 	movhi	r7,2049
 8006a04:	89000450 	cmplti	r4,r17,17
 8006a08:	39f78c04 	addi	r7,r7,-8656
 8006a0c:	d8c00a17 	ldw	r3,40(sp)
 8006a10:	05400404 	movi	r21,16
 8006a14:	20000526 	beq	r4,zero,8006a2c <___svfiprintf_internal_r+0x704>
 8006a18:	00001906 	br	8006a80 <___svfiprintf_internal_r+0x758>
 8006a1c:	8c7ffc04 	addi	r17,r17,-16
 8006a20:	89000448 	cmpgei	r4,r17,17
 8006a24:	29400204 	addi	r5,r5,8
 8006a28:	20001526 	beq	r4,zero,8006a80 <___svfiprintf_internal_r+0x758>
 8006a2c:	18c00044 	addi	r3,r3,1
 8006a30:	10800404 	addi	r2,r2,16
 8006a34:	29c00015 	stw	r7,0(r5)
 8006a38:	2d400115 	stw	r21,4(r5)
 8006a3c:	d8800b15 	stw	r2,44(sp)
 8006a40:	d8c00a15 	stw	r3,40(sp)
 8006a44:	19000208 	cmpgei	r4,r3,8
 8006a48:	203ff426 	beq	r4,zero,8006a1c <___svfiprintf_internal_r+0x6f4>
 8006a4c:	d9800904 	addi	r6,sp,36
 8006a50:	a00b883a 	mov	r5,r20
 8006a54:	b009883a 	mov	r4,r22
 8006a58:	d9c00115 	stw	r7,4(sp)
 8006a5c:	80061640 	call	8006164 <__ssprint_r>
 8006a60:	103ee41e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 8006a64:	8c7ffc04 	addi	r17,r17,-16
 8006a68:	89000448 	cmpgei	r4,r17,17
 8006a6c:	d8800b17 	ldw	r2,44(sp)
 8006a70:	d8c00a17 	ldw	r3,40(sp)
 8006a74:	900b883a 	mov	r5,r18
 8006a78:	d9c00117 	ldw	r7,4(sp)
 8006a7c:	203feb1e 	bne	r4,zero,8006a2c <___svfiprintf_internal_r+0x704>
 8006a80:	18c00044 	addi	r3,r3,1
 8006a84:	1445883a 	add	r2,r2,r17
 8006a88:	d8c00a15 	stw	r3,40(sp)
 8006a8c:	29c00015 	stw	r7,0(r5)
 8006a90:	2c400115 	stw	r17,4(r5)
 8006a94:	d8800b15 	stw	r2,44(sp)
 8006a98:	18c00210 	cmplti	r3,r3,8
 8006a9c:	183fcf1e 	bne	r3,zero,80069dc <___svfiprintf_internal_r+0x6b4>
 8006aa0:	d9800904 	addi	r6,sp,36
 8006aa4:	a00b883a 	mov	r5,r20
 8006aa8:	b009883a 	mov	r4,r22
 8006aac:	80061640 	call	8006164 <__ssprint_r>
 8006ab0:	103ed01e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 8006ab4:	d8800b17 	ldw	r2,44(sp)
 8006ab8:	003fc806 	br	80069dc <___svfiprintf_internal_r+0x6b4>
 8006abc:	29403fcc 	andi	r5,r5,255
 8006ac0:	28024c1e 	bne	r5,zero,80073f4 <___svfiprintf_internal_r+0x10cc>
 8006ac4:	6080080c 	andi	r2,r12,32
 8006ac8:	1000af1e 	bne	r2,zero,8006d88 <___svfiprintf_internal_r+0xa60>
 8006acc:	d8800317 	ldw	r2,12(sp)
 8006ad0:	60c0040c 	andi	r3,r12,16
 8006ad4:	14c00017 	ldw	r19,0(r2)
 8006ad8:	10800104 	addi	r2,r2,4
 8006adc:	18006e1e 	bne	r3,zero,8006c98 <___svfiprintf_internal_r+0x970>
 8006ae0:	60c0100c 	andi	r3,r12,64
 8006ae4:	18022126 	beq	r3,zero,800736c <___svfiprintf_internal_r+0x1044>
 8006ae8:	d8800315 	stw	r2,12(sp)
 8006aec:	9cffffcc 	andi	r19,r19,65535
 8006af0:	002b883a 	mov	r21,zero
 8006af4:	0005883a 	mov	r2,zero
 8006af8:	003f6806 	br	800689c <___svfiprintf_internal_r+0x574>
 8006afc:	29403fcc 	andi	r5,r5,255
 8006b00:	28023a1e 	bne	r5,zero,80073ec <___svfiprintf_internal_r+0x10c4>
 8006b04:	d9000317 	ldw	r4,12(sp)
 8006b08:	6080080c 	andi	r2,r12,32
 8006b0c:	20c00104 	addi	r3,r4,4
 8006b10:	1001a11e 	bne	r2,zero,8007198 <___svfiprintf_internal_r+0xe70>
 8006b14:	6080040c 	andi	r2,r12,16
 8006b18:	1001be1e 	bne	r2,zero,8007214 <___svfiprintf_internal_r+0xeec>
 8006b1c:	6300100c 	andi	r12,r12,64
 8006b20:	6001bc26 	beq	r12,zero,8007214 <___svfiprintf_internal_r+0xeec>
 8006b24:	d8800317 	ldw	r2,12(sp)
 8006b28:	d8c00315 	stw	r3,12(sp)
 8006b2c:	d8c00017 	ldw	r3,0(sp)
 8006b30:	10800017 	ldw	r2,0(r2)
 8006b34:	10c0000d 	sth	r3,0(r2)
 8006b38:	003e1606 	br	8006394 <___svfiprintf_internal_r+0x6c>
 8006b3c:	e0800007 	ldb	r2,0(fp)
 8006b40:	10c01b18 	cmpnei	r3,r2,108
 8006b44:	1801ec26 	beq	r3,zero,80072f8 <___svfiprintf_internal_r+0xfd0>
 8006b48:	63000414 	ori	r12,r12,16
 8006b4c:	003e3706 	br	800642c <___svfiprintf_internal_r+0x104>
 8006b50:	63001014 	ori	r12,r12,64
 8006b54:	e0800007 	ldb	r2,0(fp)
 8006b58:	003e3406 	br	800642c <___svfiprintf_internal_r+0x104>
 8006b5c:	29403fcc 	andi	r5,r5,255
 8006b60:	28021e1e 	bne	r5,zero,80073dc <___svfiprintf_internal_r+0x10b4>
 8006b64:	6080080c 	andi	r2,r12,32
 8006b68:	10008e1e 	bne	r2,zero,8006da4 <___svfiprintf_internal_r+0xa7c>
 8006b6c:	d8800317 	ldw	r2,12(sp)
 8006b70:	60c0040c 	andi	r3,r12,16
 8006b74:	10800104 	addi	r2,r2,4
 8006b78:	1800541e 	bne	r3,zero,8006ccc <___svfiprintf_internal_r+0x9a4>
 8006b7c:	60c0100c 	andi	r3,r12,64
 8006b80:	18005226 	beq	r3,zero,8006ccc <___svfiprintf_internal_r+0x9a4>
 8006b84:	d8c00317 	ldw	r3,12(sp)
 8006b88:	d8800315 	stw	r2,12(sp)
 8006b8c:	1cc0000f 	ldh	r19,0(r3)
 8006b90:	982bd7fa 	srai	r21,r19,31
 8006b94:	a805883a 	mov	r2,r21
 8006b98:	10005216 	blt	r2,zero,8006ce4 <___svfiprintf_internal_r+0x9bc>
 8006b9c:	50bfffd8 	cmpnei	r2,r10,-1
 8006ba0:	db400843 	ldbu	r13,33(sp)
 8006ba4:	10008d26 	beq	r2,zero,8006ddc <___svfiprintf_internal_r+0xab4>
 8006ba8:	00ffdfc4 	movi	r3,-129
 8006bac:	9d44b03a 	or	r2,r19,r21
 8006bb0:	60d8703a 	and	r12,r12,r3
 8006bb4:	1000891e 	bne	r2,zero,8006ddc <___svfiprintf_internal_r+0xab4>
 8006bb8:	50008b1e 	bne	r10,zero,8006de8 <___svfiprintf_internal_r+0xac0>
 8006bbc:	6023883a 	mov	r17,r12
 8006bc0:	0015883a 	mov	r10,zero
 8006bc4:	002b883a 	mov	r21,zero
 8006bc8:	902f883a 	mov	r23,r18
 8006bcc:	003f4206 	br	80068d8 <___svfiprintf_internal_r+0x5b0>
 8006bd0:	d8c00317 	ldw	r3,12(sp)
 8006bd4:	d8000845 	stb	zero,33(sp)
 8006bd8:	04c00044 	movi	r19,1
 8006bdc:	18800017 	ldw	r2,0(r3)
 8006be0:	18c00104 	addi	r3,r3,4
 8006be4:	d8c00315 	stw	r3,12(sp)
 8006be8:	d8800c05 	stb	r2,48(sp)
 8006bec:	05400044 	movi	r21,1
 8006bf0:	ddc00c04 	addi	r23,sp,48
 8006bf4:	6023883a 	mov	r17,r12
 8006bf8:	0015883a 	mov	r10,zero
 8006bfc:	003f3e06 	br	80068f8 <___svfiprintf_internal_r+0x5d0>
 8006c00:	29403fcc 	andi	r5,r5,255
 8006c04:	2801ed1e 	bne	r5,zero,80073bc <___svfiprintf_internal_r+0x1094>
 8006c08:	00c20074 	movhi	r3,2049
 8006c0c:	18f72604 	addi	r3,r3,-9064
 8006c10:	d8c00415 	stw	r3,16(sp)
 8006c14:	60c0080c 	andi	r3,r12,32
 8006c18:	183edc1e 	bne	r3,zero,800678c <___svfiprintf_internal_r+0x464>
 8006c1c:	d9000317 	ldw	r4,12(sp)
 8006c20:	60c0040c 	andi	r3,r12,16
 8006c24:	24c00017 	ldw	r19,0(r4)
 8006c28:	21000104 	addi	r4,r4,4
 8006c2c:	d9000315 	stw	r4,12(sp)
 8006c30:	1801481e 	bne	r3,zero,8007154 <___svfiprintf_internal_r+0xe2c>
 8006c34:	60c0100c 	andi	r3,r12,64
 8006c38:	18014626 	beq	r3,zero,8007154 <___svfiprintf_internal_r+0xe2c>
 8006c3c:	9cffffcc 	andi	r19,r19,65535
 8006c40:	002b883a 	mov	r21,zero
 8006c44:	003ed606 	br	80067a0 <___svfiprintf_internal_r+0x478>
 8006c48:	29403fcc 	andi	r5,r5,255
 8006c4c:	2801dd1e 	bne	r5,zero,80073c4 <___svfiprintf_internal_r+0x109c>
 8006c50:	6080080c 	andi	r2,r12,32
 8006c54:	63000414 	ori	r12,r12,16
 8006c58:	1000591e 	bne	r2,zero,8006dc0 <___svfiprintf_internal_r+0xa98>
 8006c5c:	d8800317 	ldw	r2,12(sp)
 8006c60:	10800104 	addi	r2,r2,4
 8006c64:	d8c00317 	ldw	r3,12(sp)
 8006c68:	002b883a 	mov	r21,zero
 8006c6c:	d8800315 	stw	r2,12(sp)
 8006c70:	1cc00017 	ldw	r19,0(r3)
 8006c74:	00800044 	movi	r2,1
 8006c78:	003f0806 	br	800689c <___svfiprintf_internal_r+0x574>
 8006c7c:	29403fcc 	andi	r5,r5,255
 8006c80:	2801d21e 	bne	r5,zero,80073cc <___svfiprintf_internal_r+0x10a4>
 8006c84:	6080080c 	andi	r2,r12,32
 8006c88:	63000414 	ori	r12,r12,16
 8006c8c:	10003e1e 	bne	r2,zero,8006d88 <___svfiprintf_internal_r+0xa60>
 8006c90:	d8800317 	ldw	r2,12(sp)
 8006c94:	10800104 	addi	r2,r2,4
 8006c98:	d8c00317 	ldw	r3,12(sp)
 8006c9c:	002b883a 	mov	r21,zero
 8006ca0:	d8800315 	stw	r2,12(sp)
 8006ca4:	1cc00017 	ldw	r19,0(r3)
 8006ca8:	0005883a 	mov	r2,zero
 8006cac:	003efb06 	br	800689c <___svfiprintf_internal_r+0x574>
 8006cb0:	29403fcc 	andi	r5,r5,255
 8006cb4:	2801c71e 	bne	r5,zero,80073d4 <___svfiprintf_internal_r+0x10ac>
 8006cb8:	6080080c 	andi	r2,r12,32
 8006cbc:	63000414 	ori	r12,r12,16
 8006cc0:	1000381e 	bne	r2,zero,8006da4 <___svfiprintf_internal_r+0xa7c>
 8006cc4:	d8800317 	ldw	r2,12(sp)
 8006cc8:	10800104 	addi	r2,r2,4
 8006ccc:	d8c00317 	ldw	r3,12(sp)
 8006cd0:	1cc00017 	ldw	r19,0(r3)
 8006cd4:	d8800315 	stw	r2,12(sp)
 8006cd8:	982bd7fa 	srai	r21,r19,31
 8006cdc:	a805883a 	mov	r2,r21
 8006ce0:	103fae0e 	bge	r2,zero,8006b9c <___svfiprintf_internal_r+0x874>
 8006ce4:	04e7c83a 	sub	r19,zero,r19
 8006ce8:	9804c03a 	cmpne	r2,r19,zero
 8006cec:	056bc83a 	sub	r21,zero,r21
 8006cf0:	a8abc83a 	sub	r21,r21,r2
 8006cf4:	00800b44 	movi	r2,45
 8006cf8:	d8800845 	stb	r2,33(sp)
 8006cfc:	50ffffe0 	cmpeqi	r3,r10,-1
 8006d00:	03400b44 	movi	r13,45
 8006d04:	00800044 	movi	r2,1
 8006d08:	183ee826 	beq	r3,zero,80068ac <___svfiprintf_internal_r+0x584>
 8006d0c:	10c00060 	cmpeqi	r3,r2,1
 8006d10:	1800321e 	bne	r3,zero,8006ddc <___svfiprintf_internal_r+0xab4>
 8006d14:	108000a0 	cmpeqi	r2,r2,2
 8006d18:	1000a41e 	bne	r2,zero,8006fac <___svfiprintf_internal_r+0xc84>
 8006d1c:	9007883a 	mov	r3,r18
 8006d20:	00000106 	br	8006d28 <___svfiprintf_internal_r+0xa00>
 8006d24:	b807883a 	mov	r3,r23
 8006d28:	9808d0fa 	srli	r4,r19,3
 8006d2c:	a80a977a 	slli	r5,r21,29
 8006d30:	a82ad0fa 	srli	r21,r21,3
 8006d34:	9cc001cc 	andi	r19,r19,7
 8006d38:	98800c04 	addi	r2,r19,48
 8006d3c:	2926b03a 	or	r19,r5,r4
 8006d40:	18bfffc5 	stb	r2,-1(r3)
 8006d44:	9d48b03a 	or	r4,r19,r21
 8006d48:	1dffffc4 	addi	r23,r3,-1
 8006d4c:	203ff51e 	bne	r4,zero,8006d24 <___svfiprintf_internal_r+0x9fc>
 8006d50:	6100004c 	andi	r4,r12,1
 8006d54:	2000a226 	beq	r4,zero,8006fe0 <___svfiprintf_internal_r+0xcb8>
 8006d58:	10803fcc 	andi	r2,r2,255
 8006d5c:	1080201c 	xori	r2,r2,128
 8006d60:	10bfe004 	addi	r2,r2,-128
 8006d64:	10800c18 	cmpnei	r2,r2,48
 8006d68:	10009d26 	beq	r2,zero,8006fe0 <___svfiprintf_internal_r+0xcb8>
 8006d6c:	18ffff84 	addi	r3,r3,-2
 8006d70:	00800c04 	movi	r2,48
 8006d74:	b8bfffc5 	stb	r2,-1(r23)
 8006d78:	90ebc83a 	sub	r21,r18,r3
 8006d7c:	6023883a 	mov	r17,r12
 8006d80:	182f883a 	mov	r23,r3
 8006d84:	003ed406 	br	80068d8 <___svfiprintf_internal_r+0x5b0>
 8006d88:	d8c00317 	ldw	r3,12(sp)
 8006d8c:	0005883a 	mov	r2,zero
 8006d90:	1cc00017 	ldw	r19,0(r3)
 8006d94:	1d400117 	ldw	r21,4(r3)
 8006d98:	18c00204 	addi	r3,r3,8
 8006d9c:	d8c00315 	stw	r3,12(sp)
 8006da0:	003ebe06 	br	800689c <___svfiprintf_internal_r+0x574>
 8006da4:	d8c00317 	ldw	r3,12(sp)
 8006da8:	18800117 	ldw	r2,4(r3)
 8006dac:	1cc00017 	ldw	r19,0(r3)
 8006db0:	18c00204 	addi	r3,r3,8
 8006db4:	d8c00315 	stw	r3,12(sp)
 8006db8:	102b883a 	mov	r21,r2
 8006dbc:	003f7606 	br	8006b98 <___svfiprintf_internal_r+0x870>
 8006dc0:	d8c00317 	ldw	r3,12(sp)
 8006dc4:	00800044 	movi	r2,1
 8006dc8:	1cc00017 	ldw	r19,0(r3)
 8006dcc:	1d400117 	ldw	r21,4(r3)
 8006dd0:	18c00204 	addi	r3,r3,8
 8006dd4:	d8c00315 	stw	r3,12(sp)
 8006dd8:	003eb006 	br	800689c <___svfiprintf_internal_r+0x574>
 8006ddc:	a801131e 	bne	r21,zero,800722c <___svfiprintf_internal_r+0xf04>
 8006de0:	988002a8 	cmpgeui	r2,r19,10
 8006de4:	1001111e 	bne	r2,zero,800722c <___svfiprintf_internal_r+0xf04>
 8006de8:	9cc00c04 	addi	r19,r19,48
 8006dec:	dcc015c5 	stb	r19,87(sp)
 8006df0:	6023883a 	mov	r17,r12
 8006df4:	05400044 	movi	r21,1
 8006df8:	ddc015c4 	addi	r23,sp,87
 8006dfc:	003eb606 	br	80068d8 <___svfiprintf_internal_r+0x5b0>
 8006e00:	84c7c83a 	sub	r3,r16,r19
 8006e04:	00fee80e 	bge	zero,r3,80069a8 <___svfiprintf_internal_r+0x680>
 8006e08:	19c00450 	cmplti	r7,r3,17
 8006e0c:	38017b1e 	bne	r7,zero,80073fc <___svfiprintf_internal_r+0x10d4>
 8006e10:	01c20074 	movhi	r7,2049
 8006e14:	39f78804 	addi	r7,r7,-8672
 8006e18:	03000404 	movi	r12,16
 8006e1c:	00000406 	br	8006e30 <___svfiprintf_internal_r+0xb08>
 8006e20:	18fffc04 	addi	r3,r3,-16
 8006e24:	19400448 	cmpgei	r5,r3,17
 8006e28:	42000204 	addi	r8,r8,8
 8006e2c:	28001a26 	beq	r5,zero,8006e98 <___svfiprintf_internal_r+0xb70>
 8006e30:	21000044 	addi	r4,r4,1
 8006e34:	10800404 	addi	r2,r2,16
 8006e38:	41c00015 	stw	r7,0(r8)
 8006e3c:	43000115 	stw	r12,4(r8)
 8006e40:	d8800b15 	stw	r2,44(sp)
 8006e44:	d9000a15 	stw	r4,40(sp)
 8006e48:	21400208 	cmpgei	r5,r4,8
 8006e4c:	283ff426 	beq	r5,zero,8006e20 <___svfiprintf_internal_r+0xaf8>
 8006e50:	d9800904 	addi	r6,sp,36
 8006e54:	a00b883a 	mov	r5,r20
 8006e58:	b009883a 	mov	r4,r22
 8006e5c:	d9c00515 	stw	r7,20(sp)
 8006e60:	d8c00215 	stw	r3,8(sp)
 8006e64:	da800115 	stw	r10,4(sp)
 8006e68:	80061640 	call	8006164 <__ssprint_r>
 8006e6c:	103de11e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 8006e70:	d8c00217 	ldw	r3,8(sp)
 8006e74:	d8800b17 	ldw	r2,44(sp)
 8006e78:	d9000a17 	ldw	r4,40(sp)
 8006e7c:	18fffc04 	addi	r3,r3,-16
 8006e80:	19400448 	cmpgei	r5,r3,17
 8006e84:	9011883a 	mov	r8,r18
 8006e88:	d9c00517 	ldw	r7,20(sp)
 8006e8c:	03000404 	movi	r12,16
 8006e90:	da800117 	ldw	r10,4(sp)
 8006e94:	283fe61e 	bne	r5,zero,8006e30 <___svfiprintf_internal_r+0xb08>
 8006e98:	21000044 	addi	r4,r4,1
 8006e9c:	43000204 	addi	r12,r8,8
 8006ea0:	10c5883a 	add	r2,r2,r3
 8006ea4:	40c00115 	stw	r3,4(r8)
 8006ea8:	41c00015 	stw	r7,0(r8)
 8006eac:	d8800b15 	stw	r2,44(sp)
 8006eb0:	d9000a15 	stw	r4,40(sp)
 8006eb4:	20c00208 	cmpgei	r3,r4,8
 8006eb8:	1801161e 	bne	r3,zero,8007314 <___svfiprintf_internal_r+0xfec>
 8006ebc:	5547c83a 	sub	r3,r10,r21
 8006ec0:	21800044 	addi	r6,r4,1
 8006ec4:	61400204 	addi	r5,r12,8
 8006ec8:	6011883a 	mov	r8,r12
 8006ecc:	00feb80e 	bge	zero,r3,80069b0 <___svfiprintf_internal_r+0x688>
 8006ed0:	19c00450 	cmplti	r7,r3,17
 8006ed4:	38012d1e 	bne	r7,zero,800738c <___svfiprintf_internal_r+0x1064>
 8006ed8:	01c20074 	movhi	r7,2049
 8006edc:	39f78804 	addi	r7,r7,-8672
 8006ee0:	02800404 	movi	r10,16
 8006ee4:	00000406 	br	8006ef8 <___svfiprintf_internal_r+0xbd0>
 8006ee8:	18fffc04 	addi	r3,r3,-16
 8006eec:	19400448 	cmpgei	r5,r3,17
 8006ef0:	42000204 	addi	r8,r8,8
 8006ef4:	28001826 	beq	r5,zero,8006f58 <___svfiprintf_internal_r+0xc30>
 8006ef8:	21000044 	addi	r4,r4,1
 8006efc:	10800404 	addi	r2,r2,16
 8006f00:	41c00015 	stw	r7,0(r8)
 8006f04:	42800115 	stw	r10,4(r8)
 8006f08:	d8800b15 	stw	r2,44(sp)
 8006f0c:	d9000a15 	stw	r4,40(sp)
 8006f10:	21400208 	cmpgei	r5,r4,8
 8006f14:	283ff426 	beq	r5,zero,8006ee8 <___svfiprintf_internal_r+0xbc0>
 8006f18:	d9800904 	addi	r6,sp,36
 8006f1c:	a00b883a 	mov	r5,r20
 8006f20:	b009883a 	mov	r4,r22
 8006f24:	d9c00215 	stw	r7,8(sp)
 8006f28:	d8c00115 	stw	r3,4(sp)
 8006f2c:	80061640 	call	8006164 <__ssprint_r>
 8006f30:	103db01e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 8006f34:	d8c00117 	ldw	r3,4(sp)
 8006f38:	d8800b17 	ldw	r2,44(sp)
 8006f3c:	d9000a17 	ldw	r4,40(sp)
 8006f40:	18fffc04 	addi	r3,r3,-16
 8006f44:	19400448 	cmpgei	r5,r3,17
 8006f48:	9011883a 	mov	r8,r18
 8006f4c:	d9c00217 	ldw	r7,8(sp)
 8006f50:	02800404 	movi	r10,16
 8006f54:	283fe81e 	bne	r5,zero,8006ef8 <___svfiprintf_internal_r+0xbd0>
 8006f58:	21800044 	addi	r6,r4,1
 8006f5c:	41000204 	addi	r4,r8,8
 8006f60:	10c5883a 	add	r2,r2,r3
 8006f64:	40c00115 	stw	r3,4(r8)
 8006f68:	41c00015 	stw	r7,0(r8)
 8006f6c:	d8800b15 	stw	r2,44(sp)
 8006f70:	d9800a15 	stw	r6,40(sp)
 8006f74:	30c00208 	cmpgei	r3,r6,8
 8006f78:	1800781e 	bne	r3,zero,800715c <___svfiprintf_internal_r+0xe34>
 8006f7c:	31800044 	addi	r6,r6,1
 8006f80:	21400204 	addi	r5,r4,8
 8006f84:	2011883a 	mov	r8,r4
 8006f88:	003e8906 	br	80069b0 <___svfiprintf_internal_r+0x688>
 8006f8c:	d9800904 	addi	r6,sp,36
 8006f90:	a00b883a 	mov	r5,r20
 8006f94:	b009883a 	mov	r4,r22
 8006f98:	80061640 	call	8006164 <__ssprint_r>
 8006f9c:	103d951e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 8006fa0:	d8800b17 	ldw	r2,44(sp)
 8006fa4:	900b883a 	mov	r5,r18
 8006fa8:	003e8806 	br	80069cc <___svfiprintf_internal_r+0x6a4>
 8006fac:	902f883a 	mov	r23,r18
 8006fb0:	d9000417 	ldw	r4,16(sp)
 8006fb4:	988003cc 	andi	r2,r19,15
 8006fb8:	a806973a 	slli	r3,r21,28
 8006fbc:	2085883a 	add	r2,r4,r2
 8006fc0:	9826d13a 	srli	r19,r19,4
 8006fc4:	10800003 	ldbu	r2,0(r2)
 8006fc8:	a82ad13a 	srli	r21,r21,4
 8006fcc:	bdffffc4 	addi	r23,r23,-1
 8006fd0:	1ce6b03a 	or	r19,r3,r19
 8006fd4:	b8800005 	stb	r2,0(r23)
 8006fd8:	9d44b03a 	or	r2,r19,r21
 8006fdc:	103ff41e 	bne	r2,zero,8006fb0 <___svfiprintf_internal_r+0xc88>
 8006fe0:	95ebc83a 	sub	r21,r18,r23
 8006fe4:	6023883a 	mov	r17,r12
 8006fe8:	003e3b06 	br	80068d8 <___svfiprintf_internal_r+0x5b0>
 8006fec:	d9800904 	addi	r6,sp,36
 8006ff0:	a00b883a 	mov	r5,r20
 8006ff4:	b009883a 	mov	r4,r22
 8006ff8:	80061640 	call	8006164 <__ssprint_r>
 8006ffc:	103e7d26 	beq	r2,zero,80069f4 <___svfiprintf_internal_r+0x6cc>
 8007000:	003d7c06 	br	80065f4 <___svfiprintf_internal_r+0x2cc>
 8007004:	8819883a 	mov	r12,r17
 8007008:	003f4006 	br	8006d0c <___svfiprintf_internal_r+0x9e4>
 800700c:	01c20074 	movhi	r7,2049
 8007010:	19400450 	cmplti	r5,r3,17
 8007014:	39f78c04 	addi	r7,r7,-8656
 8007018:	03800404 	movi	r14,16
 800701c:	28000526 	beq	r5,zero,8007034 <___svfiprintf_internal_r+0xd0c>
 8007020:	00002206 	br	80070ac <___svfiprintf_internal_r+0xd84>
 8007024:	18fffc04 	addi	r3,r3,-16
 8007028:	19400448 	cmpgei	r5,r3,17
 800702c:	42000204 	addi	r8,r8,8
 8007030:	28001e26 	beq	r5,zero,80070ac <___svfiprintf_internal_r+0xd84>
 8007034:	21000044 	addi	r4,r4,1
 8007038:	10800404 	addi	r2,r2,16
 800703c:	41c00015 	stw	r7,0(r8)
 8007040:	43800115 	stw	r14,4(r8)
 8007044:	d8800b15 	stw	r2,44(sp)
 8007048:	d9000a15 	stw	r4,40(sp)
 800704c:	21400208 	cmpgei	r5,r4,8
 8007050:	283ff426 	beq	r5,zero,8007024 <___svfiprintf_internal_r+0xcfc>
 8007054:	d9800904 	addi	r6,sp,36
 8007058:	a00b883a 	mov	r5,r20
 800705c:	b009883a 	mov	r4,r22
 8007060:	d9c00715 	stw	r7,28(sp)
 8007064:	d8c00615 	stw	r3,24(sp)
 8007068:	da800515 	stw	r10,20(sp)
 800706c:	db000215 	stw	r12,8(sp)
 8007070:	db400115 	stw	r13,4(sp)
 8007074:	80061640 	call	8006164 <__ssprint_r>
 8007078:	103d5e1e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 800707c:	d8c00617 	ldw	r3,24(sp)
 8007080:	d8800b17 	ldw	r2,44(sp)
 8007084:	d9000a17 	ldw	r4,40(sp)
 8007088:	18fffc04 	addi	r3,r3,-16
 800708c:	19400448 	cmpgei	r5,r3,17
 8007090:	9011883a 	mov	r8,r18
 8007094:	d9c00717 	ldw	r7,28(sp)
 8007098:	03800404 	movi	r14,16
 800709c:	da800517 	ldw	r10,20(sp)
 80070a0:	db000217 	ldw	r12,8(sp)
 80070a4:	db400117 	ldw	r13,4(sp)
 80070a8:	283fe21e 	bne	r5,zero,8007034 <___svfiprintf_internal_r+0xd0c>
 80070ac:	21000044 	addi	r4,r4,1
 80070b0:	10c5883a 	add	r2,r2,r3
 80070b4:	40c00115 	stw	r3,4(r8)
 80070b8:	41c00015 	stw	r7,0(r8)
 80070bc:	d8800b15 	stw	r2,44(sp)
 80070c0:	d9000a15 	stw	r4,40(sp)
 80070c4:	20c00208 	cmpgei	r3,r4,8
 80070c8:	1800751e 	bne	r3,zero,80072a0 <___svfiprintf_internal_r+0xf78>
 80070cc:	42000204 	addi	r8,r8,8
 80070d0:	003e1206 	br	800691c <___svfiprintf_internal_r+0x5f4>
 80070d4:	d9800904 	addi	r6,sp,36
 80070d8:	a00b883a 	mov	r5,r20
 80070dc:	b009883a 	mov	r4,r22
 80070e0:	da800515 	stw	r10,20(sp)
 80070e4:	db000215 	stw	r12,8(sp)
 80070e8:	db400115 	stw	r13,4(sp)
 80070ec:	80061640 	call	8006164 <__ssprint_r>
 80070f0:	103d401e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 80070f4:	d9000a17 	ldw	r4,40(sp)
 80070f8:	d8800b17 	ldw	r2,44(sp)
 80070fc:	d9401804 	addi	r5,sp,96
 8007100:	21800044 	addi	r6,r4,1
 8007104:	9011883a 	mov	r8,r18
 8007108:	da800517 	ldw	r10,20(sp)
 800710c:	db000217 	ldw	r12,8(sp)
 8007110:	db400117 	ldw	r13,4(sp)
 8007114:	003e1406 	br	8006968 <___svfiprintf_internal_r+0x640>
 8007118:	d9800904 	addi	r6,sp,36
 800711c:	a00b883a 	mov	r5,r20
 8007120:	b009883a 	mov	r4,r22
 8007124:	da800215 	stw	r10,8(sp)
 8007128:	db000115 	stw	r12,4(sp)
 800712c:	80061640 	call	8006164 <__ssprint_r>
 8007130:	103d301e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 8007134:	d9000a17 	ldw	r4,40(sp)
 8007138:	d8800b17 	ldw	r2,44(sp)
 800713c:	d9401804 	addi	r5,sp,96
 8007140:	21800044 	addi	r6,r4,1
 8007144:	9011883a 	mov	r8,r18
 8007148:	da800217 	ldw	r10,8(sp)
 800714c:	db000117 	ldw	r12,4(sp)
 8007150:	003e1306 	br	80069a0 <___svfiprintf_internal_r+0x678>
 8007154:	002b883a 	mov	r21,zero
 8007158:	003d9106 	br	80067a0 <___svfiprintf_internal_r+0x478>
 800715c:	d9800904 	addi	r6,sp,36
 8007160:	a00b883a 	mov	r5,r20
 8007164:	b009883a 	mov	r4,r22
 8007168:	80061640 	call	8006164 <__ssprint_r>
 800716c:	103d211e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 8007170:	d9800a17 	ldw	r6,40(sp)
 8007174:	d8800b17 	ldw	r2,44(sp)
 8007178:	d9401804 	addi	r5,sp,96
 800717c:	31800044 	addi	r6,r6,1
 8007180:	9011883a 	mov	r8,r18
 8007184:	003e0a06 	br	80069b0 <___svfiprintf_internal_r+0x688>
 8007188:	e023883a 	mov	r17,fp
 800718c:	003c9f06 	br	800640c <___svfiprintf_internal_r+0xe4>
 8007190:	902f883a 	mov	r23,r18
 8007194:	003dd006 	br	80068d8 <___svfiprintf_internal_r+0x5b0>
 8007198:	d9400017 	ldw	r5,0(sp)
 800719c:	20800017 	ldw	r2,0(r4)
 80071a0:	d8c00315 	stw	r3,12(sp)
 80071a4:	2809d7fa 	srai	r4,r5,31
 80071a8:	11400015 	stw	r5,0(r2)
 80071ac:	11000115 	stw	r4,4(r2)
 80071b0:	003c7806 	br	8006394 <___svfiprintf_internal_r+0x6c>
 80071b4:	00c00c04 	movi	r3,48
 80071b8:	d88008c5 	stb	r2,35(sp)
 80071bc:	d8c00885 	stb	r3,34(sp)
 80071c0:	63000094 	ori	r12,r12,2
 80071c4:	00800084 	movi	r2,2
 80071c8:	003db406 	br	800689c <___svfiprintf_internal_r+0x574>
 80071cc:	b809883a 	mov	r4,r23
 80071d0:	da000215 	stw	r8,8(sp)
 80071d4:	db000115 	stw	r12,4(sp)
 80071d8:	8000c880 	call	8000c88 <strlen>
 80071dc:	102b883a 	mov	r21,r2
 80071e0:	1027883a 	mov	r19,r2
 80071e4:	dc400315 	stw	r17,12(sp)
 80071e8:	db000117 	ldw	r12,4(sp)
 80071ec:	da000217 	ldw	r8,8(sp)
 80071f0:	003e8006 	br	8006bf4 <___svfiprintf_internal_r+0x8cc>
 80071f4:	01401004 	movi	r5,64
 80071f8:	800477c0 	call	800477c <_malloc_r>
 80071fc:	a0800015 	stw	r2,0(r20)
 8007200:	a0800415 	stw	r2,16(r20)
 8007204:	10009126 	beq	r2,zero,800744c <___svfiprintf_internal_r+0x1124>
 8007208:	00801004 	movi	r2,64
 800720c:	a0800515 	stw	r2,20(r20)
 8007210:	003c5906 	br	8006378 <___svfiprintf_internal_r+0x50>
 8007214:	d8800317 	ldw	r2,12(sp)
 8007218:	10800017 	ldw	r2,0(r2)
 800721c:	d8c00315 	stw	r3,12(sp)
 8007220:	d8c00017 	ldw	r3,0(sp)
 8007224:	10c00015 	stw	r3,0(r2)
 8007228:	003c5a06 	br	8006394 <___svfiprintf_internal_r+0x6c>
 800722c:	902f883a 	mov	r23,r18
 8007230:	00000206 	br	800723c <___svfiprintf_internal_r+0xf14>
 8007234:	1027883a 	mov	r19,r2
 8007238:	182b883a 	mov	r21,r3
 800723c:	9809883a 	mov	r4,r19
 8007240:	a80b883a 	mov	r5,r21
 8007244:	01800284 	movi	r6,10
 8007248:	000f883a 	mov	r7,zero
 800724c:	db400615 	stw	r13,24(sp)
 8007250:	da000515 	stw	r8,20(sp)
 8007254:	da800215 	stw	r10,8(sp)
 8007258:	db000115 	stw	r12,4(sp)
 800725c:	8008aa40 	call	8008aa4 <__umoddi3>
 8007260:	10800c04 	addi	r2,r2,48
 8007264:	bdffffc4 	addi	r23,r23,-1
 8007268:	9809883a 	mov	r4,r19
 800726c:	a80b883a 	mov	r5,r21
 8007270:	b8800005 	stb	r2,0(r23)
 8007274:	01800284 	movi	r6,10
 8007278:	000f883a 	mov	r7,zero
 800727c:	80084880 	call	8008488 <__udivdi3>
 8007280:	db000117 	ldw	r12,4(sp)
 8007284:	da800217 	ldw	r10,8(sp)
 8007288:	da000517 	ldw	r8,20(sp)
 800728c:	db400617 	ldw	r13,24(sp)
 8007290:	a83fe81e 	bne	r21,zero,8007234 <___svfiprintf_internal_r+0xf0c>
 8007294:	9cc002a8 	cmpgeui	r19,r19,10
 8007298:	983fe61e 	bne	r19,zero,8007234 <___svfiprintf_internal_r+0xf0c>
 800729c:	003f5006 	br	8006fe0 <___svfiprintf_internal_r+0xcb8>
 80072a0:	d9800904 	addi	r6,sp,36
 80072a4:	a00b883a 	mov	r5,r20
 80072a8:	b009883a 	mov	r4,r22
 80072ac:	da800515 	stw	r10,20(sp)
 80072b0:	db000215 	stw	r12,8(sp)
 80072b4:	db400115 	stw	r13,4(sp)
 80072b8:	80061640 	call	8006164 <__ssprint_r>
 80072bc:	103ccd1e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 80072c0:	d8800b17 	ldw	r2,44(sp)
 80072c4:	d9000a17 	ldw	r4,40(sp)
 80072c8:	9011883a 	mov	r8,r18
 80072cc:	da800517 	ldw	r10,20(sp)
 80072d0:	db000217 	ldw	r12,8(sp)
 80072d4:	db400117 	ldw	r13,4(sp)
 80072d8:	003d9006 	br	800691c <___svfiprintf_internal_r+0x5f4>
 80072dc:	0421c83a 	sub	r16,zero,r16
 80072e0:	ddc00315 	stw	r23,12(sp)
 80072e4:	003d0106 	br	80066ec <___svfiprintf_internal_r+0x3c4>
 80072e8:	10c00060 	cmpeqi	r3,r2,1
 80072ec:	8819883a 	mov	r12,r17
 80072f0:	183e8826 	beq	r3,zero,8006d14 <___svfiprintf_internal_r+0x9ec>
 80072f4:	003ebc06 	br	8006de8 <___svfiprintf_internal_r+0xac0>
 80072f8:	e0800043 	ldbu	r2,1(fp)
 80072fc:	63000814 	ori	r12,r12,32
 8007300:	e7000044 	addi	fp,fp,1
 8007304:	10803fcc 	andi	r2,r2,255
 8007308:	1080201c 	xori	r2,r2,128
 800730c:	10bfe004 	addi	r2,r2,-128
 8007310:	003c4606 	br	800642c <___svfiprintf_internal_r+0x104>
 8007314:	d9800904 	addi	r6,sp,36
 8007318:	a00b883a 	mov	r5,r20
 800731c:	b009883a 	mov	r4,r22
 8007320:	da800115 	stw	r10,4(sp)
 8007324:	80061640 	call	8006164 <__ssprint_r>
 8007328:	103cb21e 	bne	r2,zero,80065f4 <___svfiprintf_internal_r+0x2cc>
 800732c:	d9000a17 	ldw	r4,40(sp)
 8007330:	d8800b17 	ldw	r2,44(sp)
 8007334:	d9401804 	addi	r5,sp,96
 8007338:	21800044 	addi	r6,r4,1
 800733c:	9011883a 	mov	r8,r18
 8007340:	da800117 	ldw	r10,4(sp)
 8007344:	003d9806 	br	80069a8 <___svfiprintf_internal_r+0x680>
 8007348:	508001f0 	cmpltui	r2,r10,7
 800734c:	502b883a 	mov	r21,r10
 8007350:	1000011e 	bne	r2,zero,8007358 <___svfiprintf_internal_r+0x1030>
 8007354:	05400184 	movi	r21,6
 8007358:	05c20074 	movhi	r23,2049
 800735c:	a827883a 	mov	r19,r21
 8007360:	dc400315 	stw	r17,12(sp)
 8007364:	bdf73004 	addi	r23,r23,-9024
 8007368:	003e2206 	br	8006bf4 <___svfiprintf_internal_r+0x8cc>
 800736c:	d8800315 	stw	r2,12(sp)
 8007370:	002b883a 	mov	r21,zero
 8007374:	0005883a 	mov	r2,zero
 8007378:	003d4806 	br	800689c <___svfiprintf_internal_r+0x574>
 800737c:	d8800315 	stw	r2,12(sp)
 8007380:	002b883a 	mov	r21,zero
 8007384:	00800044 	movi	r2,1
 8007388:	003d4406 	br	800689c <___svfiprintf_internal_r+0x574>
 800738c:	01c20074 	movhi	r7,2049
 8007390:	2809883a 	mov	r4,r5
 8007394:	39f78804 	addi	r7,r7,-8672
 8007398:	003ef106 	br	8006f60 <___svfiprintf_internal_r+0xc38>
 800739c:	d9800845 	stb	r6,33(sp)
 80073a0:	003cb406 	br	8006674 <___svfiprintf_internal_r+0x34c>
 80073a4:	5027883a 	mov	r19,r10
 80073a8:	dc400315 	stw	r17,12(sp)
 80073ac:	502b883a 	mov	r21,r10
 80073b0:	003e1006 	br	8006bf4 <___svfiprintf_internal_r+0x8cc>
 80073b4:	d9800845 	stb	r6,33(sp)
 80073b8:	003cef06 	br	8006778 <___svfiprintf_internal_r+0x450>
 80073bc:	d9800845 	stb	r6,33(sp)
 80073c0:	003e1106 	br	8006c08 <___svfiprintf_internal_r+0x8e0>
 80073c4:	d9800845 	stb	r6,33(sp)
 80073c8:	003e2106 	br	8006c50 <___svfiprintf_internal_r+0x928>
 80073cc:	d9800845 	stb	r6,33(sp)
 80073d0:	003e2c06 	br	8006c84 <___svfiprintf_internal_r+0x95c>
 80073d4:	d9800845 	stb	r6,33(sp)
 80073d8:	003e3706 	br	8006cb8 <___svfiprintf_internal_r+0x990>
 80073dc:	d9800845 	stb	r6,33(sp)
 80073e0:	003de006 	br	8006b64 <___svfiprintf_internal_r+0x83c>
 80073e4:	d9800845 	stb	r6,33(sp)
 80073e8:	003cf506 	br	80067c0 <___svfiprintf_internal_r+0x498>
 80073ec:	d9800845 	stb	r6,33(sp)
 80073f0:	003dc406 	br	8006b04 <___svfiprintf_internal_r+0x7dc>
 80073f4:	d9800845 	stb	r6,33(sp)
 80073f8:	003db206 	br	8006ac4 <___svfiprintf_internal_r+0x79c>
 80073fc:	01c20074 	movhi	r7,2049
 8007400:	2819883a 	mov	r12,r5
 8007404:	3009883a 	mov	r4,r6
 8007408:	39f78804 	addi	r7,r7,-8672
 800740c:	003ea406 	br	8006ea0 <___svfiprintf_internal_r+0xb78>
 8007410:	00bfffc4 	movi	r2,-1
 8007414:	d8800015 	stw	r2,0(sp)
 8007418:	003c7906 	br	8006600 <___svfiprintf_internal_r+0x2d8>
 800741c:	d8800317 	ldw	r2,12(sp)
 8007420:	12800017 	ldw	r10,0(r2)
 8007424:	15c00104 	addi	r23,r2,4
 8007428:	5000010e 	bge	r10,zero,8007430 <___svfiprintf_internal_r+0x1108>
 800742c:	02bfffc4 	movi	r10,-1
 8007430:	e0800043 	ldbu	r2,1(fp)
 8007434:	ddc00315 	stw	r23,12(sp)
 8007438:	1839883a 	mov	fp,r3
 800743c:	10803fcc 	andi	r2,r2,255
 8007440:	1080201c 	xori	r2,r2,128
 8007444:	10bfe004 	addi	r2,r2,-128
 8007448:	003bf806 	br	800642c <___svfiprintf_internal_r+0x104>
 800744c:	00800304 	movi	r2,12
 8007450:	b0800015 	stw	r2,0(r22)
 8007454:	00bfffc4 	movi	r2,-1
 8007458:	d8800015 	stw	r2,0(sp)
 800745c:	003c6806 	br	8006600 <___svfiprintf_internal_r+0x2d8>

08007460 <_calloc_r>:
 8007460:	defffe04 	addi	sp,sp,-8
 8007464:	2805883a 	mov	r2,r5
 8007468:	dc000015 	stw	r16,0(sp)
 800746c:	300b883a 	mov	r5,r6
 8007470:	2021883a 	mov	r16,r4
 8007474:	1009883a 	mov	r4,r2
 8007478:	dfc00115 	stw	ra,4(sp)
 800747c:	8000b340 	call	8000b34 <__mulsi3>
 8007480:	100b883a 	mov	r5,r2
 8007484:	8009883a 	mov	r4,r16
 8007488:	800477c0 	call	800477c <_malloc_r>
 800748c:	1007883a 	mov	r3,r2
 8007490:	10000c26 	beq	r2,zero,80074c4 <_calloc_r+0x64>
 8007494:	11bfff17 	ldw	r6,-4(r2)
 8007498:	00bfff04 	movi	r2,-4
 800749c:	308c703a 	and	r6,r6,r2
 80074a0:	31bfff04 	addi	r6,r6,-4
 80074a4:	30800968 	cmpgeui	r2,r6,37
 80074a8:	1000151e 	bne	r2,zero,8007500 <_calloc_r+0xa0>
 80074ac:	30800530 	cmpltui	r2,r6,20
 80074b0:	10000926 	beq	r2,zero,80074d8 <_calloc_r+0x78>
 80074b4:	1805883a 	mov	r2,r3
 80074b8:	10000015 	stw	zero,0(r2)
 80074bc:	10000115 	stw	zero,4(r2)
 80074c0:	10000215 	stw	zero,8(r2)
 80074c4:	1805883a 	mov	r2,r3
 80074c8:	dfc00117 	ldw	ra,4(sp)
 80074cc:	dc000017 	ldw	r16,0(sp)
 80074d0:	dec00204 	addi	sp,sp,8
 80074d4:	f800283a 	ret
 80074d8:	18000015 	stw	zero,0(r3)
 80074dc:	18000115 	stw	zero,4(r3)
 80074e0:	30800728 	cmpgeui	r2,r6,28
 80074e4:	10000b26 	beq	r2,zero,8007514 <_calloc_r+0xb4>
 80074e8:	18000215 	stw	zero,8(r3)
 80074ec:	18000315 	stw	zero,12(r3)
 80074f0:	31800920 	cmpeqi	r6,r6,36
 80074f4:	3000091e 	bne	r6,zero,800751c <_calloc_r+0xbc>
 80074f8:	18800404 	addi	r2,r3,16
 80074fc:	003fee06 	br	80074b8 <_calloc_r+0x58>
 8007500:	1809883a 	mov	r4,r3
 8007504:	000b883a 	mov	r5,zero
 8007508:	8007b500 	call	8007b50 <memset>
 800750c:	1007883a 	mov	r3,r2
 8007510:	003fec06 	br	80074c4 <_calloc_r+0x64>
 8007514:	18800204 	addi	r2,r3,8
 8007518:	003fe706 	br	80074b8 <_calloc_r+0x58>
 800751c:	18000415 	stw	zero,16(r3)
 8007520:	18800604 	addi	r2,r3,24
 8007524:	18000515 	stw	zero,20(r3)
 8007528:	003fe306 	br	80074b8 <_calloc_r+0x58>

0800752c <_malloc_trim_r>:
 800752c:	defffb04 	addi	sp,sp,-20
 8007530:	dcc00315 	stw	r19,12(sp)
 8007534:	04c20074 	movhi	r19,2049
 8007538:	dc800215 	stw	r18,8(sp)
 800753c:	dc400115 	stw	r17,4(sp)
 8007540:	dc000015 	stw	r16,0(sp)
 8007544:	dfc00415 	stw	ra,16(sp)
 8007548:	2821883a 	mov	r16,r5
 800754c:	9cfa9f04 	addi	r19,r19,-5508
 8007550:	2025883a 	mov	r18,r4
 8007554:	800bb100 	call	800bb10 <__malloc_lock>
 8007558:	98800217 	ldw	r2,8(r19)
 800755c:	14400117 	ldw	r17,4(r2)
 8007560:	00bfff04 	movi	r2,-4
 8007564:	88a2703a 	and	r17,r17,r2
 8007568:	8c21c83a 	sub	r16,r17,r16
 800756c:	8403fbc4 	addi	r16,r16,4079
 8007570:	8020d33a 	srli	r16,r16,12
 8007574:	843fffc4 	addi	r16,r16,-1
 8007578:	8020933a 	slli	r16,r16,12
 800757c:	80840008 	cmpgei	r2,r16,4096
 8007580:	10000626 	beq	r2,zero,800759c <_malloc_trim_r+0x70>
 8007584:	000b883a 	mov	r5,zero
 8007588:	9009883a 	mov	r4,r18
 800758c:	800610c0 	call	800610c <_sbrk_r>
 8007590:	98c00217 	ldw	r3,8(r19)
 8007594:	1c47883a 	add	r3,r3,r17
 8007598:	10c00a26 	beq	r2,r3,80075c4 <_malloc_trim_r+0x98>
 800759c:	9009883a 	mov	r4,r18
 80075a0:	800bb340 	call	800bb34 <__malloc_unlock>
 80075a4:	0005883a 	mov	r2,zero
 80075a8:	dfc00417 	ldw	ra,16(sp)
 80075ac:	dcc00317 	ldw	r19,12(sp)
 80075b0:	dc800217 	ldw	r18,8(sp)
 80075b4:	dc400117 	ldw	r17,4(sp)
 80075b8:	dc000017 	ldw	r16,0(sp)
 80075bc:	dec00504 	addi	sp,sp,20
 80075c0:	f800283a 	ret
 80075c4:	040bc83a 	sub	r5,zero,r16
 80075c8:	9009883a 	mov	r4,r18
 80075cc:	800610c0 	call	800610c <_sbrk_r>
 80075d0:	10bfffd8 	cmpnei	r2,r2,-1
 80075d4:	10000d26 	beq	r2,zero,800760c <_malloc_trim_r+0xe0>
 80075d8:	00820074 	movhi	r2,2049
 80075dc:	1088a817 	ldw	r2,8864(r2)
 80075e0:	98c00217 	ldw	r3,8(r19)
 80075e4:	8c23c83a 	sub	r17,r17,r16
 80075e8:	8c400054 	ori	r17,r17,1
 80075ec:	1421c83a 	sub	r16,r2,r16
 80075f0:	1c400115 	stw	r17,4(r3)
 80075f4:	00820074 	movhi	r2,2049
 80075f8:	9009883a 	mov	r4,r18
 80075fc:	1408a815 	stw	r16,8864(r2)
 8007600:	800bb340 	call	800bb34 <__malloc_unlock>
 8007604:	00800044 	movi	r2,1
 8007608:	003fe706 	br	80075a8 <_malloc_trim_r+0x7c>
 800760c:	000b883a 	mov	r5,zero
 8007610:	9009883a 	mov	r4,r18
 8007614:	800610c0 	call	800610c <_sbrk_r>
 8007618:	99000217 	ldw	r4,8(r19)
 800761c:	1107c83a 	sub	r3,r2,r4
 8007620:	19400410 	cmplti	r5,r3,16
 8007624:	283fdd1e 	bne	r5,zero,800759c <_malloc_trim_r+0x70>
 8007628:	01420074 	movhi	r5,2049
 800762c:	29408317 	ldw	r5,524(r5)
 8007630:	18c00054 	ori	r3,r3,1
 8007634:	20c00115 	stw	r3,4(r4)
 8007638:	1145c83a 	sub	r2,r2,r5
 800763c:	01420074 	movhi	r5,2049
 8007640:	2888a815 	stw	r2,8864(r5)
 8007644:	003fd506 	br	800759c <_malloc_trim_r+0x70>

08007648 <_free_r>:
 8007648:	28004f26 	beq	r5,zero,8007788 <_free_r+0x140>
 800764c:	defffd04 	addi	sp,sp,-12
 8007650:	dc400115 	stw	r17,4(sp)
 8007654:	dc000015 	stw	r16,0(sp)
 8007658:	2023883a 	mov	r17,r4
 800765c:	2821883a 	mov	r16,r5
 8007660:	dfc00215 	stw	ra,8(sp)
 8007664:	800bb100 	call	800bb10 <__malloc_lock>
 8007668:	81ffff17 	ldw	r7,-4(r16)
 800766c:	00bfff84 	movi	r2,-2
 8007670:	80fffe04 	addi	r3,r16,-8
 8007674:	3884703a 	and	r2,r7,r2
 8007678:	01820074 	movhi	r6,2049
 800767c:	1889883a 	add	r4,r3,r2
 8007680:	31ba9f04 	addi	r6,r6,-5508
 8007684:	21400117 	ldw	r5,4(r4)
 8007688:	32000217 	ldw	r8,8(r6)
 800768c:	027fff04 	movi	r9,-4
 8007690:	2a4a703a 	and	r5,r5,r9
 8007694:	41006426 	beq	r8,r4,8007828 <_free_r+0x1e0>
 8007698:	21400115 	stw	r5,4(r4)
 800769c:	39c0004c 	andi	r7,r7,1
 80076a0:	2151883a 	add	r8,r4,r5
 80076a4:	3800281e 	bne	r7,zero,8007748 <_free_r+0x100>
 80076a8:	82bffe17 	ldw	r10,-8(r16)
 80076ac:	42000117 	ldw	r8,4(r8)
 80076b0:	01c20074 	movhi	r7,2049
 80076b4:	1a87c83a 	sub	r3,r3,r10
 80076b8:	1a400217 	ldw	r9,8(r3)
 80076bc:	39faa104 	addi	r7,r7,-5500
 80076c0:	1285883a 	add	r2,r2,r10
 80076c4:	4200004c 	andi	r8,r8,1
 80076c8:	49c04c26 	beq	r9,r7,80077fc <_free_r+0x1b4>
 80076cc:	1a800317 	ldw	r10,12(r3)
 80076d0:	4a800315 	stw	r10,12(r9)
 80076d4:	52400215 	stw	r9,8(r10)
 80076d8:	40007126 	beq	r8,zero,80078a0 <_free_r+0x258>
 80076dc:	11400054 	ori	r5,r2,1
 80076e0:	19400115 	stw	r5,4(r3)
 80076e4:	20800015 	stw	r2,0(r4)
 80076e8:	11008028 	cmpgeui	r4,r2,512
 80076ec:	20002c1e 	bne	r4,zero,80077a0 <_free_r+0x158>
 80076f0:	1008d0fa 	srli	r4,r2,3
 80076f4:	31c00117 	ldw	r7,4(r6)
 80076f8:	20800044 	addi	r2,r4,1
 80076fc:	200bd0ba 	srai	r5,r4,2
 8007700:	100490fa 	slli	r2,r2,3
 8007704:	01000044 	movi	r4,1
 8007708:	2148983a 	sll	r4,r4,r5
 800770c:	3085883a 	add	r2,r6,r2
 8007710:	11400017 	ldw	r5,0(r2)
 8007714:	21c8b03a 	or	r4,r4,r7
 8007718:	11fffe04 	addi	r7,r2,-8
 800771c:	19c00315 	stw	r7,12(r3)
 8007720:	19400215 	stw	r5,8(r3)
 8007724:	31000115 	stw	r4,4(r6)
 8007728:	10c00015 	stw	r3,0(r2)
 800772c:	28c00315 	stw	r3,12(r5)
 8007730:	8809883a 	mov	r4,r17
 8007734:	dfc00217 	ldw	ra,8(sp)
 8007738:	dc400117 	ldw	r17,4(sp)
 800773c:	dc000017 	ldw	r16,0(sp)
 8007740:	dec00304 	addi	sp,sp,12
 8007744:	800bb341 	jmpi	800bb34 <__malloc_unlock>
 8007748:	41c00117 	ldw	r7,4(r8)
 800774c:	39c0004c 	andi	r7,r7,1
 8007750:	38000e1e 	bne	r7,zero,800778c <_free_r+0x144>
 8007754:	01c20074 	movhi	r7,2049
 8007758:	1145883a 	add	r2,r2,r5
 800775c:	39faa104 	addi	r7,r7,-5500
 8007760:	21400217 	ldw	r5,8(r4)
 8007764:	12400054 	ori	r9,r2,1
 8007768:	1891883a 	add	r8,r3,r2
 800776c:	29c05226 	beq	r5,r7,80078b8 <_free_r+0x270>
 8007770:	21000317 	ldw	r4,12(r4)
 8007774:	29000315 	stw	r4,12(r5)
 8007778:	21400215 	stw	r5,8(r4)
 800777c:	1a400115 	stw	r9,4(r3)
 8007780:	40800015 	stw	r2,0(r8)
 8007784:	003fd806 	br	80076e8 <_free_r+0xa0>
 8007788:	f800283a 	ret
 800778c:	11400054 	ori	r5,r2,1
 8007790:	817fff15 	stw	r5,-4(r16)
 8007794:	20800015 	stw	r2,0(r4)
 8007798:	11008028 	cmpgeui	r4,r2,512
 800779c:	203fd426 	beq	r4,zero,80076f0 <_free_r+0xa8>
 80077a0:	1008d27a 	srli	r4,r2,9
 80077a4:	21400168 	cmpgeui	r5,r4,5
 80077a8:	2800341e 	bne	r5,zero,800787c <_free_r+0x234>
 80077ac:	1008d1ba 	srli	r4,r2,6
 80077b0:	21c00e44 	addi	r7,r4,57
 80077b4:	380e90fa 	slli	r7,r7,3
 80077b8:	21400e04 	addi	r5,r4,56
 80077bc:	31cf883a 	add	r7,r6,r7
 80077c0:	39000017 	ldw	r4,0(r7)
 80077c4:	39fffe04 	addi	r7,r7,-8
 80077c8:	39004226 	beq	r7,r4,80078d4 <_free_r+0x28c>
 80077cc:	01bfff04 	movi	r6,-4
 80077d0:	21400117 	ldw	r5,4(r4)
 80077d4:	298a703a 	and	r5,r5,r6
 80077d8:	1140022e 	bgeu	r2,r5,80077e4 <_free_r+0x19c>
 80077dc:	21000217 	ldw	r4,8(r4)
 80077e0:	393ffb1e 	bne	r7,r4,80077d0 <_free_r+0x188>
 80077e4:	21c00317 	ldw	r7,12(r4)
 80077e8:	19c00315 	stw	r7,12(r3)
 80077ec:	19000215 	stw	r4,8(r3)
 80077f0:	38c00215 	stw	r3,8(r7)
 80077f4:	20c00315 	stw	r3,12(r4)
 80077f8:	003fcd06 	br	8007730 <_free_r+0xe8>
 80077fc:	40004d1e 	bne	r8,zero,8007934 <_free_r+0x2ec>
 8007800:	21800317 	ldw	r6,12(r4)
 8007804:	21000217 	ldw	r4,8(r4)
 8007808:	2885883a 	add	r2,r5,r2
 800780c:	11400054 	ori	r5,r2,1
 8007810:	21800315 	stw	r6,12(r4)
 8007814:	31000215 	stw	r4,8(r6)
 8007818:	19400115 	stw	r5,4(r3)
 800781c:	1887883a 	add	r3,r3,r2
 8007820:	18800015 	stw	r2,0(r3)
 8007824:	003fc206 	br	8007730 <_free_r+0xe8>
 8007828:	39c0004c 	andi	r7,r7,1
 800782c:	1145883a 	add	r2,r2,r5
 8007830:	3800071e 	bne	r7,zero,8007850 <_free_r+0x208>
 8007834:	81fffe17 	ldw	r7,-8(r16)
 8007838:	19c7c83a 	sub	r3,r3,r7
 800783c:	19000317 	ldw	r4,12(r3)
 8007840:	19400217 	ldw	r5,8(r3)
 8007844:	11c5883a 	add	r2,r2,r7
 8007848:	29000315 	stw	r4,12(r5)
 800784c:	21400215 	stw	r5,8(r4)
 8007850:	01020074 	movhi	r4,2049
 8007854:	11400054 	ori	r5,r2,1
 8007858:	21008417 	ldw	r4,528(r4)
 800785c:	19400115 	stw	r5,4(r3)
 8007860:	30c00215 	stw	r3,8(r6)
 8007864:	113fb236 	bltu	r2,r4,8007730 <_free_r+0xe8>
 8007868:	00820074 	movhi	r2,2049
 800786c:	11489e17 	ldw	r5,8824(r2)
 8007870:	8809883a 	mov	r4,r17
 8007874:	800752c0 	call	800752c <_malloc_trim_r>
 8007878:	003fad06 	br	8007730 <_free_r+0xe8>
 800787c:	21400568 	cmpgeui	r5,r4,21
 8007880:	28000926 	beq	r5,zero,80078a8 <_free_r+0x260>
 8007884:	21401568 	cmpgeui	r5,r4,85
 8007888:	2800191e 	bne	r5,zero,80078f0 <_free_r+0x2a8>
 800788c:	1008d33a 	srli	r4,r2,12
 8007890:	21c01bc4 	addi	r7,r4,111
 8007894:	21401b84 	addi	r5,r4,110
 8007898:	380e90fa 	slli	r7,r7,3
 800789c:	003fc706 	br	80077bc <_free_r+0x174>
 80078a0:	1145883a 	add	r2,r2,r5
 80078a4:	003fae06 	br	8007760 <_free_r+0x118>
 80078a8:	21c01704 	addi	r7,r4,92
 80078ac:	214016c4 	addi	r5,r4,91
 80078b0:	380e90fa 	slli	r7,r7,3
 80078b4:	003fc106 	br	80077bc <_free_r+0x174>
 80078b8:	30c00515 	stw	r3,20(r6)
 80078bc:	30c00415 	stw	r3,16(r6)
 80078c0:	19c00315 	stw	r7,12(r3)
 80078c4:	19c00215 	stw	r7,8(r3)
 80078c8:	1a400115 	stw	r9,4(r3)
 80078cc:	40800015 	stw	r2,0(r8)
 80078d0:	003f9706 	br	8007730 <_free_r+0xe8>
 80078d4:	280bd0ba 	srai	r5,r5,2
 80078d8:	00800044 	movi	r2,1
 80078dc:	32000117 	ldw	r8,4(r6)
 80078e0:	114a983a 	sll	r5,r2,r5
 80078e4:	2a0ab03a 	or	r5,r5,r8
 80078e8:	31400115 	stw	r5,4(r6)
 80078ec:	003fbe06 	br	80077e8 <_free_r+0x1a0>
 80078f0:	21405568 	cmpgeui	r5,r4,341
 80078f4:	2800051e 	bne	r5,zero,800790c <_free_r+0x2c4>
 80078f8:	1008d3fa 	srli	r4,r2,15
 80078fc:	21c01e04 	addi	r7,r4,120
 8007900:	21401dc4 	addi	r5,r4,119
 8007904:	380e90fa 	slli	r7,r7,3
 8007908:	003fac06 	br	80077bc <_free_r+0x174>
 800790c:	21015568 	cmpgeui	r4,r4,1365
 8007910:	2000051e 	bne	r4,zero,8007928 <_free_r+0x2e0>
 8007914:	1008d4ba 	srli	r4,r2,18
 8007918:	21c01f44 	addi	r7,r4,125
 800791c:	21401f04 	addi	r5,r4,124
 8007920:	380e90fa 	slli	r7,r7,3
 8007924:	003fa506 	br	80077bc <_free_r+0x174>
 8007928:	01c0fe04 	movi	r7,1016
 800792c:	01401f84 	movi	r5,126
 8007930:	003fa206 	br	80077bc <_free_r+0x174>
 8007934:	11400054 	ori	r5,r2,1
 8007938:	19400115 	stw	r5,4(r3)
 800793c:	20800015 	stw	r2,0(r4)
 8007940:	003f7b06 	br	8007730 <_free_r+0xe8>

08007944 <_setlocale_r>:
 8007944:	30001826 	beq	r6,zero,80079a8 <_setlocale_r+0x64>
 8007948:	01420074 	movhi	r5,2049
 800794c:	defffe04 	addi	sp,sp,-8
 8007950:	29779104 	addi	r5,r5,-8636
 8007954:	3009883a 	mov	r4,r6
 8007958:	dc000015 	stw	r16,0(sp)
 800795c:	dfc00115 	stw	ra,4(sp)
 8007960:	3021883a 	mov	r16,r6
 8007964:	800826c0 	call	800826c <strcmp>
 8007968:	1000061e 	bne	r2,zero,8007984 <_setlocale_r+0x40>
 800796c:	00820074 	movhi	r2,2049
 8007970:	10b79004 	addi	r2,r2,-8640
 8007974:	dfc00117 	ldw	ra,4(sp)
 8007978:	dc000017 	ldw	r16,0(sp)
 800797c:	dec00204 	addi	sp,sp,8
 8007980:	f800283a 	ret
 8007984:	01420074 	movhi	r5,2049
 8007988:	29779004 	addi	r5,r5,-8640
 800798c:	8009883a 	mov	r4,r16
 8007990:	800826c0 	call	800826c <strcmp>
 8007994:	103ff526 	beq	r2,zero,800796c <_setlocale_r+0x28>
 8007998:	80800003 	ldbu	r2,0(r16)
 800799c:	103ff326 	beq	r2,zero,800796c <_setlocale_r+0x28>
 80079a0:	0005883a 	mov	r2,zero
 80079a4:	003ff306 	br	8007974 <_setlocale_r+0x30>
 80079a8:	00820074 	movhi	r2,2049
 80079ac:	10b79004 	addi	r2,r2,-8640
 80079b0:	f800283a 	ret

080079b4 <__locale_mb_cur_max>:
 80079b4:	00820074 	movhi	r2,2049
 80079b8:	10bbeb07 	ldb	r2,-4180(r2)
 80079bc:	f800283a 	ret

080079c0 <setlocale>:
 80079c0:	00820074 	movhi	r2,2049
 80079c4:	280d883a 	mov	r6,r5
 80079c8:	200b883a 	mov	r5,r4
 80079cc:	11008217 	ldw	r4,520(r2)
 80079d0:	80079441 	jmpi	8007944 <_setlocale_r>

080079d4 <_mbtowc_r>:
 80079d4:	00820074 	movhi	r2,2049
 80079d8:	10bbda17 	ldw	r2,-4248(r2)
 80079dc:	1000683a 	jmp	r2

080079e0 <__ascii_mbtowc>:
 80079e0:	deffff04 	addi	sp,sp,-4
 80079e4:	28000826 	beq	r5,zero,8007a08 <__ascii_mbtowc+0x28>
 80079e8:	30000926 	beq	r6,zero,8007a10 <__ascii_mbtowc+0x30>
 80079ec:	38000b26 	beq	r7,zero,8007a1c <__ascii_mbtowc+0x3c>
 80079f0:	30800003 	ldbu	r2,0(r6)
 80079f4:	28800015 	stw	r2,0(r5)
 80079f8:	30800003 	ldbu	r2,0(r6)
 80079fc:	1004c03a 	cmpne	r2,r2,zero
 8007a00:	dec00104 	addi	sp,sp,4
 8007a04:	f800283a 	ret
 8007a08:	d80b883a 	mov	r5,sp
 8007a0c:	303ff71e 	bne	r6,zero,80079ec <__ascii_mbtowc+0xc>
 8007a10:	0005883a 	mov	r2,zero
 8007a14:	dec00104 	addi	sp,sp,4
 8007a18:	f800283a 	ret
 8007a1c:	00bfff84 	movi	r2,-2
 8007a20:	003ff706 	br	8007a00 <__ascii_mbtowc+0x20>

08007a24 <memmove>:
 8007a24:	2005883a 	mov	r2,r4
 8007a28:	29000a2e 	bgeu	r5,r4,8007a54 <memmove+0x30>
 8007a2c:	2989883a 	add	r4,r5,r6
 8007a30:	1100082e 	bgeu	r2,r4,8007a54 <memmove+0x30>
 8007a34:	1187883a 	add	r3,r2,r6
 8007a38:	30003e26 	beq	r6,zero,8007b34 <memmove+0x110>
 8007a3c:	213fffc4 	addi	r4,r4,-1
 8007a40:	21400003 	ldbu	r5,0(r4)
 8007a44:	18ffffc4 	addi	r3,r3,-1
 8007a48:	19400005 	stb	r5,0(r3)
 8007a4c:	10fffb1e 	bne	r2,r3,8007a3c <memmove+0x18>
 8007a50:	f800283a 	ret
 8007a54:	30c00430 	cmpltui	r3,r6,16
 8007a58:	18000b26 	beq	r3,zero,8007a88 <memmove+0x64>
 8007a5c:	1007883a 	mov	r3,r2
 8007a60:	31ffffc4 	addi	r7,r6,-1
 8007a64:	30003726 	beq	r6,zero,8007b44 <memmove+0x120>
 8007a68:	39c00044 	addi	r7,r7,1
 8007a6c:	29cf883a 	add	r7,r5,r7
 8007a70:	29400044 	addi	r5,r5,1
 8007a74:	29bfffc3 	ldbu	r6,-1(r5)
 8007a78:	18c00044 	addi	r3,r3,1
 8007a7c:	19bfffc5 	stb	r6,-1(r3)
 8007a80:	29fffb1e 	bne	r5,r7,8007a70 <memmove+0x4c>
 8007a84:	f800283a 	ret
 8007a88:	2886b03a 	or	r3,r5,r2
 8007a8c:	18c000cc 	andi	r3,r3,3
 8007a90:	1800291e 	bne	r3,zero,8007b38 <memmove+0x114>
 8007a94:	327ffc04 	addi	r9,r6,-16
 8007a98:	4812d13a 	srli	r9,r9,4
 8007a9c:	280f883a 	mov	r7,r5
 8007aa0:	1007883a 	mov	r3,r2
 8007aa4:	4a400044 	addi	r9,r9,1
 8007aa8:	4812913a 	slli	r9,r9,4
 8007aac:	1251883a 	add	r8,r2,r9
 8007ab0:	39000017 	ldw	r4,0(r7)
 8007ab4:	18c00404 	addi	r3,r3,16
 8007ab8:	39c00404 	addi	r7,r7,16
 8007abc:	193ffc15 	stw	r4,-16(r3)
 8007ac0:	393ffd17 	ldw	r4,-12(r7)
 8007ac4:	193ffd15 	stw	r4,-12(r3)
 8007ac8:	393ffe17 	ldw	r4,-8(r7)
 8007acc:	193ffe15 	stw	r4,-8(r3)
 8007ad0:	393fff17 	ldw	r4,-4(r7)
 8007ad4:	193fff15 	stw	r4,-4(r3)
 8007ad8:	40fff51e 	bne	r8,r3,8007ab0 <memmove+0x8c>
 8007adc:	3100030c 	andi	r4,r6,12
 8007ae0:	2a4b883a 	add	r5,r5,r9
 8007ae4:	320003cc 	andi	r8,r6,15
 8007ae8:	20001726 	beq	r4,zero,8007b48 <memmove+0x124>
 8007aec:	2813883a 	mov	r9,r5
 8007af0:	180f883a 	mov	r7,r3
 8007af4:	4a400104 	addi	r9,r9,4
 8007af8:	39c00104 	addi	r7,r7,4
 8007afc:	4abfff17 	ldw	r10,-4(r9)
 8007b00:	41c9c83a 	sub	r4,r8,r7
 8007b04:	1909883a 	add	r4,r3,r4
 8007b08:	3abfff15 	stw	r10,-4(r7)
 8007b0c:	21000128 	cmpgeui	r4,r4,4
 8007b10:	203ff81e 	bne	r4,zero,8007af4 <memmove+0xd0>
 8007b14:	413fff04 	addi	r4,r8,-4
 8007b18:	2008d0ba 	srli	r4,r4,2
 8007b1c:	318000cc 	andi	r6,r6,3
 8007b20:	21000044 	addi	r4,r4,1
 8007b24:	200890ba 	slli	r4,r4,2
 8007b28:	1907883a 	add	r3,r3,r4
 8007b2c:	290b883a 	add	r5,r5,r4
 8007b30:	003fcb06 	br	8007a60 <memmove+0x3c>
 8007b34:	f800283a 	ret
 8007b38:	31ffffc4 	addi	r7,r6,-1
 8007b3c:	1007883a 	mov	r3,r2
 8007b40:	003fc906 	br	8007a68 <memmove+0x44>
 8007b44:	f800283a 	ret
 8007b48:	400d883a 	mov	r6,r8
 8007b4c:	003fc406 	br	8007a60 <memmove+0x3c>

08007b50 <memset>:
 8007b50:	20c000cc 	andi	r3,r4,3
 8007b54:	2005883a 	mov	r2,r4
 8007b58:	18003626 	beq	r3,zero,8007c34 <memset+0xe4>
 8007b5c:	31ffffc4 	addi	r7,r6,-1
 8007b60:	30003326 	beq	r6,zero,8007c30 <memset+0xe0>
 8007b64:	2811883a 	mov	r8,r5
 8007b68:	2007883a 	mov	r3,r4
 8007b6c:	00000306 	br	8007b7c <memset+0x2c>
 8007b70:	39ffffc4 	addi	r7,r7,-1
 8007b74:	39bfffe0 	cmpeqi	r6,r7,-1
 8007b78:	30002d1e 	bne	r6,zero,8007c30 <memset+0xe0>
 8007b7c:	18c00044 	addi	r3,r3,1
 8007b80:	1a3fffc5 	stb	r8,-1(r3)
 8007b84:	198000cc 	andi	r6,r3,3
 8007b88:	303ff91e 	bne	r6,zero,8007b70 <memset+0x20>
 8007b8c:	39000130 	cmpltui	r4,r7,4
 8007b90:	2000221e 	bne	r4,zero,8007c1c <memset+0xcc>
 8007b94:	29003fcc 	andi	r4,r5,255
 8007b98:	200c923a 	slli	r6,r4,8
 8007b9c:	3a000430 	cmpltui	r8,r7,16
 8007ba0:	3108b03a 	or	r4,r6,r4
 8007ba4:	200c943a 	slli	r6,r4,16
 8007ba8:	310cb03a 	or	r6,r6,r4
 8007bac:	40000e1e 	bne	r8,zero,8007be8 <memset+0x98>
 8007bb0:	3a3ffc04 	addi	r8,r7,-16
 8007bb4:	4010d13a 	srli	r8,r8,4
 8007bb8:	42000044 	addi	r8,r8,1
 8007bbc:	4010913a 	slli	r8,r8,4
 8007bc0:	1a11883a 	add	r8,r3,r8
 8007bc4:	19800015 	stw	r6,0(r3)
 8007bc8:	19800115 	stw	r6,4(r3)
 8007bcc:	19800215 	stw	r6,8(r3)
 8007bd0:	18c00404 	addi	r3,r3,16
 8007bd4:	19bfff15 	stw	r6,-4(r3)
 8007bd8:	40fffa1e 	bne	r8,r3,8007bc4 <memset+0x74>
 8007bdc:	3900030c 	andi	r4,r7,12
 8007be0:	39c003cc 	andi	r7,r7,15
 8007be4:	20000d26 	beq	r4,zero,8007c1c <memset+0xcc>
 8007be8:	1809883a 	mov	r4,r3
 8007bec:	21000104 	addi	r4,r4,4
 8007bf0:	3911c83a 	sub	r8,r7,r4
 8007bf4:	1a11883a 	add	r8,r3,r8
 8007bf8:	21bfff15 	stw	r6,-4(r4)
 8007bfc:	42000128 	cmpgeui	r8,r8,4
 8007c00:	403ffa1e 	bne	r8,zero,8007bec <memset+0x9c>
 8007c04:	393fff04 	addi	r4,r7,-4
 8007c08:	2008d0ba 	srli	r4,r4,2
 8007c0c:	39c000cc 	andi	r7,r7,3
 8007c10:	21000044 	addi	r4,r4,1
 8007c14:	200890ba 	slli	r4,r4,2
 8007c18:	1907883a 	add	r3,r3,r4
 8007c1c:	38000426 	beq	r7,zero,8007c30 <memset+0xe0>
 8007c20:	19cf883a 	add	r7,r3,r7
 8007c24:	18c00044 	addi	r3,r3,1
 8007c28:	197fffc5 	stb	r5,-1(r3)
 8007c2c:	38fffd1e 	bne	r7,r3,8007c24 <memset+0xd4>
 8007c30:	f800283a 	ret
 8007c34:	2007883a 	mov	r3,r4
 8007c38:	300f883a 	mov	r7,r6
 8007c3c:	003fd306 	br	8007b8c <memset+0x3c>

08007c40 <_realloc_r>:
 8007c40:	defff504 	addi	sp,sp,-44
 8007c44:	dcc00415 	stw	r19,16(sp)
 8007c48:	dfc00a15 	stw	ra,40(sp)
 8007c4c:	df000915 	stw	fp,36(sp)
 8007c50:	ddc00815 	stw	r23,32(sp)
 8007c54:	dd800715 	stw	r22,28(sp)
 8007c58:	dd400615 	stw	r21,24(sp)
 8007c5c:	dd000515 	stw	r20,20(sp)
 8007c60:	dc800315 	stw	r18,12(sp)
 8007c64:	dc400215 	stw	r17,8(sp)
 8007c68:	dc000115 	stw	r16,4(sp)
 8007c6c:	3027883a 	mov	r19,r6
 8007c70:	28008b26 	beq	r5,zero,8007ea0 <_realloc_r+0x260>
 8007c74:	282d883a 	mov	r22,r5
 8007c78:	202b883a 	mov	r21,r4
 8007c7c:	9c0002c4 	addi	r16,r19,11
 8007c80:	800bb100 	call	800bb10 <__malloc_lock>
 8007c84:	808005f0 	cmpltui	r2,r16,23
 8007c88:	1000521e 	bne	r2,zero,8007dd4 <_realloc_r+0x194>
 8007c8c:	017ffe04 	movi	r5,-8
 8007c90:	8160703a 	and	r16,r16,r5
 8007c94:	8007883a 	mov	r3,r16
 8007c98:	80005116 	blt	r16,zero,8007de0 <_realloc_r+0x1a0>
 8007c9c:	84c05036 	bltu	r16,r19,8007de0 <_realloc_r+0x1a0>
 8007ca0:	b0bfff17 	ldw	r2,-4(r22)
 8007ca4:	017fff04 	movi	r5,-4
 8007ca8:	b4bffe04 	addi	r18,r22,-8
 8007cac:	1162703a 	and	r17,r2,r5
 8007cb0:	9469883a 	add	r20,r18,r17
 8007cb4:	88c0390e 	bge	r17,r3,8007d9c <_realloc_r+0x15c>
 8007cb8:	07020074 	movhi	fp,2049
 8007cbc:	e73a9f04 	addi	fp,fp,-5508
 8007cc0:	e2000217 	ldw	r8,8(fp)
 8007cc4:	a1000117 	ldw	r4,4(r20)
 8007cc8:	45008e26 	beq	r8,r20,8007f04 <_realloc_r+0x2c4>
 8007ccc:	01bfff84 	movi	r6,-2
 8007cd0:	218c703a 	and	r6,r4,r6
 8007cd4:	a18d883a 	add	r6,r20,r6
 8007cd8:	31800117 	ldw	r6,4(r6)
 8007cdc:	3180004c 	andi	r6,r6,1
 8007ce0:	30004f1e 	bne	r6,zero,8007e20 <_realloc_r+0x1e0>
 8007ce4:	2148703a 	and	r4,r4,r5
 8007ce8:	890b883a 	add	r5,r17,r4
 8007cec:	28c0cb0e 	bge	r5,r3,800801c <_realloc_r+0x3dc>
 8007cf0:	1080004c 	andi	r2,r2,1
 8007cf4:	10004c1e 	bne	r2,zero,8007e28 <_realloc_r+0x1e8>
 8007cf8:	b1fffe17 	ldw	r7,-8(r22)
 8007cfc:	00bfff04 	movi	r2,-4
 8007d00:	91cfc83a 	sub	r7,r18,r7
 8007d04:	39400117 	ldw	r5,4(r7)
 8007d08:	288a703a 	and	r5,r5,r2
 8007d0c:	a0000426 	beq	r20,zero,8007d20 <_realloc_r+0xe0>
 8007d10:	896f883a 	add	r23,r17,r5
 8007d14:	b92f883a 	add	r23,r23,r4
 8007d18:	4500cb26 	beq	r8,r20,8008048 <_realloc_r+0x408>
 8007d1c:	b8c0930e 	bge	r23,r3,8007f6c <_realloc_r+0x32c>
 8007d20:	38004126 	beq	r7,zero,8007e28 <_realloc_r+0x1e8>
 8007d24:	896f883a 	add	r23,r17,r5
 8007d28:	b8c03f16 	blt	r23,r3,8007e28 <_realloc_r+0x1e8>
 8007d2c:	38c00217 	ldw	r3,8(r7)
 8007d30:	38800317 	ldw	r2,12(r7)
 8007d34:	89bfff04 	addi	r6,r17,-4
 8007d38:	31000968 	cmpgeui	r4,r6,37
 8007d3c:	18800315 	stw	r2,12(r3)
 8007d40:	10c00215 	stw	r3,8(r2)
 8007d44:	3de9883a 	add	r20,r7,r23
 8007d48:	38c00204 	addi	r3,r7,8
 8007d4c:	2000f81e 	bne	r4,zero,8008130 <_realloc_r+0x4f0>
 8007d50:	30800530 	cmpltui	r2,r6,20
 8007d54:	b1000017 	ldw	r4,0(r22)
 8007d58:	1000eb1e 	bne	r2,zero,8008108 <_realloc_r+0x4c8>
 8007d5c:	39000215 	stw	r4,8(r7)
 8007d60:	b1000117 	ldw	r4,4(r22)
 8007d64:	30800728 	cmpgeui	r2,r6,28
 8007d68:	39000315 	stw	r4,12(r7)
 8007d6c:	1001041e 	bne	r2,zero,8008180 <_realloc_r+0x540>
 8007d70:	b1000217 	ldw	r4,8(r22)
 8007d74:	38800404 	addi	r2,r7,16
 8007d78:	b5800204 	addi	r22,r22,8
 8007d7c:	11000015 	stw	r4,0(r2)
 8007d80:	b1000117 	ldw	r4,4(r22)
 8007d84:	b823883a 	mov	r17,r23
 8007d88:	3825883a 	mov	r18,r7
 8007d8c:	11000115 	stw	r4,4(r2)
 8007d90:	b1000217 	ldw	r4,8(r22)
 8007d94:	182d883a 	mov	r22,r3
 8007d98:	11000215 	stw	r4,8(r2)
 8007d9c:	91800117 	ldw	r6,4(r18)
 8007da0:	8c05c83a 	sub	r2,r17,r16
 8007da4:	10c00430 	cmpltui	r3,r2,16
 8007da8:	3180004c 	andi	r6,r6,1
 8007dac:	18004926 	beq	r3,zero,8007ed4 <_realloc_r+0x294>
 8007db0:	898cb03a 	or	r6,r17,r6
 8007db4:	91800115 	stw	r6,4(r18)
 8007db8:	a0800117 	ldw	r2,4(r20)
 8007dbc:	10800054 	ori	r2,r2,1
 8007dc0:	a0800115 	stw	r2,4(r20)
 8007dc4:	a809883a 	mov	r4,r21
 8007dc8:	800bb340 	call	800bb34 <__malloc_unlock>
 8007dcc:	b027883a 	mov	r19,r22
 8007dd0:	00000606 	br	8007dec <_realloc_r+0x1ac>
 8007dd4:	04000404 	movi	r16,16
 8007dd8:	00c00404 	movi	r3,16
 8007ddc:	84ffb02e 	bgeu	r16,r19,8007ca0 <_realloc_r+0x60>
 8007de0:	00800304 	movi	r2,12
 8007de4:	a8800015 	stw	r2,0(r21)
 8007de8:	0027883a 	mov	r19,zero
 8007dec:	9805883a 	mov	r2,r19
 8007df0:	dfc00a17 	ldw	ra,40(sp)
 8007df4:	df000917 	ldw	fp,36(sp)
 8007df8:	ddc00817 	ldw	r23,32(sp)
 8007dfc:	dd800717 	ldw	r22,28(sp)
 8007e00:	dd400617 	ldw	r21,24(sp)
 8007e04:	dd000517 	ldw	r20,20(sp)
 8007e08:	dcc00417 	ldw	r19,16(sp)
 8007e0c:	dc800317 	ldw	r18,12(sp)
 8007e10:	dc400217 	ldw	r17,8(sp)
 8007e14:	dc000117 	ldw	r16,4(sp)
 8007e18:	dec00b04 	addi	sp,sp,44
 8007e1c:	f800283a 	ret
 8007e20:	1080004c 	andi	r2,r2,1
 8007e24:	10007826 	beq	r2,zero,8008008 <_realloc_r+0x3c8>
 8007e28:	980b883a 	mov	r5,r19
 8007e2c:	a809883a 	mov	r4,r21
 8007e30:	800477c0 	call	800477c <_malloc_r>
 8007e34:	1027883a 	mov	r19,r2
 8007e38:	10001626 	beq	r2,zero,8007e94 <_realloc_r+0x254>
 8007e3c:	b0bfff17 	ldw	r2,-4(r22)
 8007e40:	013fff84 	movi	r4,-2
 8007e44:	98fffe04 	addi	r3,r19,-8
 8007e48:	1104703a 	and	r2,r2,r4
 8007e4c:	9085883a 	add	r2,r18,r2
 8007e50:	10c06726 	beq	r2,r3,8007ff0 <_realloc_r+0x3b0>
 8007e54:	89bfff04 	addi	r6,r17,-4
 8007e58:	30800968 	cmpgeui	r2,r6,37
 8007e5c:	1000761e 	bne	r2,zero,8008038 <_realloc_r+0x3f8>
 8007e60:	30800530 	cmpltui	r2,r6,20
 8007e64:	b1000017 	ldw	r4,0(r22)
 8007e68:	10003726 	beq	r2,zero,8007f48 <_realloc_r+0x308>
 8007e6c:	9805883a 	mov	r2,r19
 8007e70:	b007883a 	mov	r3,r22
 8007e74:	11000015 	stw	r4,0(r2)
 8007e78:	19000117 	ldw	r4,4(r3)
 8007e7c:	11000115 	stw	r4,4(r2)
 8007e80:	18c00217 	ldw	r3,8(r3)
 8007e84:	10c00215 	stw	r3,8(r2)
 8007e88:	b00b883a 	mov	r5,r22
 8007e8c:	a809883a 	mov	r4,r21
 8007e90:	80076480 	call	8007648 <_free_r>
 8007e94:	a809883a 	mov	r4,r21
 8007e98:	800bb340 	call	800bb34 <__malloc_unlock>
 8007e9c:	003fd306 	br	8007dec <_realloc_r+0x1ac>
 8007ea0:	300b883a 	mov	r5,r6
 8007ea4:	dfc00a17 	ldw	ra,40(sp)
 8007ea8:	df000917 	ldw	fp,36(sp)
 8007eac:	ddc00817 	ldw	r23,32(sp)
 8007eb0:	dd800717 	ldw	r22,28(sp)
 8007eb4:	dd400617 	ldw	r21,24(sp)
 8007eb8:	dd000517 	ldw	r20,20(sp)
 8007ebc:	dcc00417 	ldw	r19,16(sp)
 8007ec0:	dc800317 	ldw	r18,12(sp)
 8007ec4:	dc400217 	ldw	r17,8(sp)
 8007ec8:	dc000117 	ldw	r16,4(sp)
 8007ecc:	dec00b04 	addi	sp,sp,44
 8007ed0:	800477c1 	jmpi	800477c <_malloc_r>
 8007ed4:	340cb03a 	or	r6,r6,r16
 8007ed8:	91800115 	stw	r6,4(r18)
 8007edc:	940b883a 	add	r5,r18,r16
 8007ee0:	10800054 	ori	r2,r2,1
 8007ee4:	28800115 	stw	r2,4(r5)
 8007ee8:	a0800117 	ldw	r2,4(r20)
 8007eec:	29400204 	addi	r5,r5,8
 8007ef0:	a809883a 	mov	r4,r21
 8007ef4:	10800054 	ori	r2,r2,1
 8007ef8:	a0800115 	stw	r2,4(r20)
 8007efc:	80076480 	call	8007648 <_free_r>
 8007f00:	003fb006 	br	8007dc4 <_realloc_r+0x184>
 8007f04:	2148703a 	and	r4,r4,r5
 8007f08:	890b883a 	add	r5,r17,r4
 8007f0c:	81800404 	addi	r6,r16,16
 8007f10:	29bf7716 	blt	r5,r6,8007cf0 <_realloc_r+0xb0>
 8007f14:	9425883a 	add	r18,r18,r16
 8007f18:	2c05c83a 	sub	r2,r5,r16
 8007f1c:	e4800215 	stw	r18,8(fp)
 8007f20:	10800054 	ori	r2,r2,1
 8007f24:	90800115 	stw	r2,4(r18)
 8007f28:	b0bfff17 	ldw	r2,-4(r22)
 8007f2c:	a809883a 	mov	r4,r21
 8007f30:	b027883a 	mov	r19,r22
 8007f34:	1080004c 	andi	r2,r2,1
 8007f38:	1420b03a 	or	r16,r2,r16
 8007f3c:	b43fff15 	stw	r16,-4(r22)
 8007f40:	800bb340 	call	800bb34 <__malloc_unlock>
 8007f44:	003fa906 	br	8007dec <_realloc_r+0x1ac>
 8007f48:	99000015 	stw	r4,0(r19)
 8007f4c:	b0c00117 	ldw	r3,4(r22)
 8007f50:	30800728 	cmpgeui	r2,r6,28
 8007f54:	98c00115 	stw	r3,4(r19)
 8007f58:	1000611e 	bne	r2,zero,80080e0 <_realloc_r+0x4a0>
 8007f5c:	b0c00204 	addi	r3,r22,8
 8007f60:	98800204 	addi	r2,r19,8
 8007f64:	b1000217 	ldw	r4,8(r22)
 8007f68:	003fc206 	br	8007e74 <_realloc_r+0x234>
 8007f6c:	a0800317 	ldw	r2,12(r20)
 8007f70:	a0c00217 	ldw	r3,8(r20)
 8007f74:	89bfff04 	addi	r6,r17,-4
 8007f78:	31000968 	cmpgeui	r4,r6,37
 8007f7c:	18800315 	stw	r2,12(r3)
 8007f80:	10c00215 	stw	r3,8(r2)
 8007f84:	38c00217 	ldw	r3,8(r7)
 8007f88:	38800317 	ldw	r2,12(r7)
 8007f8c:	3a000204 	addi	r8,r7,8
 8007f90:	3de9883a 	add	r20,r7,r23
 8007f94:	18800315 	stw	r2,12(r3)
 8007f98:	10c00215 	stw	r3,8(r2)
 8007f9c:	20006f1e 	bne	r4,zero,800815c <_realloc_r+0x51c>
 8007fa0:	30800530 	cmpltui	r2,r6,20
 8007fa4:	b0c00017 	ldw	r3,0(r22)
 8007fa8:	10006a1e 	bne	r2,zero,8008154 <_realloc_r+0x514>
 8007fac:	38c00215 	stw	r3,8(r7)
 8007fb0:	b0c00117 	ldw	r3,4(r22)
 8007fb4:	30800728 	cmpgeui	r2,r6,28
 8007fb8:	38c00315 	stw	r3,12(r7)
 8007fbc:	10007a1e 	bne	r2,zero,80081a8 <_realloc_r+0x568>
 8007fc0:	b0c00217 	ldw	r3,8(r22)
 8007fc4:	38800404 	addi	r2,r7,16
 8007fc8:	b5800204 	addi	r22,r22,8
 8007fcc:	10c00015 	stw	r3,0(r2)
 8007fd0:	b0c00117 	ldw	r3,4(r22)
 8007fd4:	b823883a 	mov	r17,r23
 8007fd8:	3825883a 	mov	r18,r7
 8007fdc:	10c00115 	stw	r3,4(r2)
 8007fe0:	b0c00217 	ldw	r3,8(r22)
 8007fe4:	402d883a 	mov	r22,r8
 8007fe8:	10c00215 	stw	r3,8(r2)
 8007fec:	003f6b06 	br	8007d9c <_realloc_r+0x15c>
 8007ff0:	98bfff17 	ldw	r2,-4(r19)
 8007ff4:	00ffff04 	movi	r3,-4
 8007ff8:	10c4703a 	and	r2,r2,r3
 8007ffc:	88a3883a 	add	r17,r17,r2
 8008000:	9469883a 	add	r20,r18,r17
 8008004:	003f6506 	br	8007d9c <_realloc_r+0x15c>
 8008008:	b1fffe17 	ldw	r7,-8(r22)
 800800c:	91cfc83a 	sub	r7,r18,r7
 8008010:	39000117 	ldw	r4,4(r7)
 8008014:	214a703a 	and	r5,r4,r5
 8008018:	003f4106 	br	8007d20 <_realloc_r+0xe0>
 800801c:	a0800317 	ldw	r2,12(r20)
 8008020:	a0c00217 	ldw	r3,8(r20)
 8008024:	2823883a 	mov	r17,r5
 8008028:	9169883a 	add	r20,r18,r5
 800802c:	18800315 	stw	r2,12(r3)
 8008030:	10c00215 	stw	r3,8(r2)
 8008034:	003f5906 	br	8007d9c <_realloc_r+0x15c>
 8008038:	b00b883a 	mov	r5,r22
 800803c:	9809883a 	mov	r4,r19
 8008040:	8007a240 	call	8007a24 <memmove>
 8008044:	003f9006 	br	8007e88 <_realloc_r+0x248>
 8008048:	80800404 	addi	r2,r16,16
 800804c:	b8bf3416 	blt	r23,r2,8007d20 <_realloc_r+0xe0>
 8008050:	38800317 	ldw	r2,12(r7)
 8008054:	38c00217 	ldw	r3,8(r7)
 8008058:	89bfff04 	addi	r6,r17,-4
 800805c:	31000968 	cmpgeui	r4,r6,37
 8008060:	18800315 	stw	r2,12(r3)
 8008064:	10c00215 	stw	r3,8(r2)
 8008068:	3cc00204 	addi	r19,r7,8
 800806c:	20005a1e 	bne	r4,zero,80081d8 <_realloc_r+0x598>
 8008070:	30800530 	cmpltui	r2,r6,20
 8008074:	b0c00017 	ldw	r3,0(r22)
 8008078:	1000551e 	bne	r2,zero,80081d0 <_realloc_r+0x590>
 800807c:	38c00215 	stw	r3,8(r7)
 8008080:	b0c00117 	ldw	r3,4(r22)
 8008084:	30800728 	cmpgeui	r2,r6,28
 8008088:	38c00315 	stw	r3,12(r7)
 800808c:	1000661e 	bne	r2,zero,8008228 <_realloc_r+0x5e8>
 8008090:	b0c00217 	ldw	r3,8(r22)
 8008094:	38800404 	addi	r2,r7,16
 8008098:	b5800204 	addi	r22,r22,8
 800809c:	10c00015 	stw	r3,0(r2)
 80080a0:	b0c00117 	ldw	r3,4(r22)
 80080a4:	10c00115 	stw	r3,4(r2)
 80080a8:	b0c00217 	ldw	r3,8(r22)
 80080ac:	10c00215 	stw	r3,8(r2)
 80080b0:	3c07883a 	add	r3,r7,r16
 80080b4:	bc05c83a 	sub	r2,r23,r16
 80080b8:	e0c00215 	stw	r3,8(fp)
 80080bc:	10800054 	ori	r2,r2,1
 80080c0:	18800115 	stw	r2,4(r3)
 80080c4:	38800117 	ldw	r2,4(r7)
 80080c8:	a809883a 	mov	r4,r21
 80080cc:	1080004c 	andi	r2,r2,1
 80080d0:	1420b03a 	or	r16,r2,r16
 80080d4:	3c000115 	stw	r16,4(r7)
 80080d8:	800bb340 	call	800bb34 <__malloc_unlock>
 80080dc:	003f4306 	br	8007dec <_realloc_r+0x1ac>
 80080e0:	b0800217 	ldw	r2,8(r22)
 80080e4:	31800920 	cmpeqi	r6,r6,36
 80080e8:	98800215 	stw	r2,8(r19)
 80080ec:	b0800317 	ldw	r2,12(r22)
 80080f0:	98800315 	stw	r2,12(r19)
 80080f4:	3000061e 	bne	r6,zero,8008110 <_realloc_r+0x4d0>
 80080f8:	b0c00404 	addi	r3,r22,16
 80080fc:	98800404 	addi	r2,r19,16
 8008100:	b1000417 	ldw	r4,16(r22)
 8008104:	003f5b06 	br	8007e74 <_realloc_r+0x234>
 8008108:	1805883a 	mov	r2,r3
 800810c:	003f1b06 	br	8007d7c <_realloc_r+0x13c>
 8008110:	b1000417 	ldw	r4,16(r22)
 8008114:	b0c00604 	addi	r3,r22,24
 8008118:	98800604 	addi	r2,r19,24
 800811c:	99000415 	stw	r4,16(r19)
 8008120:	b1000517 	ldw	r4,20(r22)
 8008124:	99000515 	stw	r4,20(r19)
 8008128:	b1000617 	ldw	r4,24(r22)
 800812c:	003f5106 	br	8007e74 <_realloc_r+0x234>
 8008130:	b00b883a 	mov	r5,r22
 8008134:	1809883a 	mov	r4,r3
 8008138:	d9c00015 	stw	r7,0(sp)
 800813c:	8007a240 	call	8007a24 <memmove>
 8008140:	d9c00017 	ldw	r7,0(sp)
 8008144:	102d883a 	mov	r22,r2
 8008148:	b823883a 	mov	r17,r23
 800814c:	3825883a 	mov	r18,r7
 8008150:	003f1206 	br	8007d9c <_realloc_r+0x15c>
 8008154:	4005883a 	mov	r2,r8
 8008158:	003f9c06 	br	8007fcc <_realloc_r+0x38c>
 800815c:	b00b883a 	mov	r5,r22
 8008160:	4009883a 	mov	r4,r8
 8008164:	d9c00015 	stw	r7,0(sp)
 8008168:	8007a240 	call	8007a24 <memmove>
 800816c:	d9c00017 	ldw	r7,0(sp)
 8008170:	102d883a 	mov	r22,r2
 8008174:	b823883a 	mov	r17,r23
 8008178:	3825883a 	mov	r18,r7
 800817c:	003f0706 	br	8007d9c <_realloc_r+0x15c>
 8008180:	b0800217 	ldw	r2,8(r22)
 8008184:	31800920 	cmpeqi	r6,r6,36
 8008188:	38800415 	stw	r2,16(r7)
 800818c:	b0800317 	ldw	r2,12(r22)
 8008190:	38800515 	stw	r2,20(r7)
 8008194:	b1000417 	ldw	r4,16(r22)
 8008198:	3000151e 	bne	r6,zero,80081f0 <_realloc_r+0x5b0>
 800819c:	38800604 	addi	r2,r7,24
 80081a0:	b5800404 	addi	r22,r22,16
 80081a4:	003ef506 	br	8007d7c <_realloc_r+0x13c>
 80081a8:	b0800217 	ldw	r2,8(r22)
 80081ac:	31800920 	cmpeqi	r6,r6,36
 80081b0:	38800415 	stw	r2,16(r7)
 80081b4:	b0800317 	ldw	r2,12(r22)
 80081b8:	38800515 	stw	r2,20(r7)
 80081bc:	b0c00417 	ldw	r3,16(r22)
 80081c0:	3000121e 	bne	r6,zero,800820c <_realloc_r+0x5cc>
 80081c4:	38800604 	addi	r2,r7,24
 80081c8:	b5800404 	addi	r22,r22,16
 80081cc:	003f7f06 	br	8007fcc <_realloc_r+0x38c>
 80081d0:	9805883a 	mov	r2,r19
 80081d4:	003fb106 	br	800809c <_realloc_r+0x45c>
 80081d8:	b00b883a 	mov	r5,r22
 80081dc:	9809883a 	mov	r4,r19
 80081e0:	d9c00015 	stw	r7,0(sp)
 80081e4:	8007a240 	call	8007a24 <memmove>
 80081e8:	d9c00017 	ldw	r7,0(sp)
 80081ec:	003fb006 	br	80080b0 <_realloc_r+0x470>
 80081f0:	b5800604 	addi	r22,r22,24
 80081f4:	39000615 	stw	r4,24(r7)
 80081f8:	b13fff17 	ldw	r4,-4(r22)
 80081fc:	38800804 	addi	r2,r7,32
 8008200:	39000715 	stw	r4,28(r7)
 8008204:	b1000017 	ldw	r4,0(r22)
 8008208:	003edc06 	br	8007d7c <_realloc_r+0x13c>
 800820c:	b5800604 	addi	r22,r22,24
 8008210:	38c00615 	stw	r3,24(r7)
 8008214:	b0ffff17 	ldw	r3,-4(r22)
 8008218:	38800804 	addi	r2,r7,32
 800821c:	38c00715 	stw	r3,28(r7)
 8008220:	b0c00017 	ldw	r3,0(r22)
 8008224:	003f6906 	br	8007fcc <_realloc_r+0x38c>
 8008228:	b0800217 	ldw	r2,8(r22)
 800822c:	31800920 	cmpeqi	r6,r6,36
 8008230:	38800415 	stw	r2,16(r7)
 8008234:	b0800317 	ldw	r2,12(r22)
 8008238:	38800515 	stw	r2,20(r7)
 800823c:	b0c00417 	ldw	r3,16(r22)
 8008240:	3000031e 	bne	r6,zero,8008250 <_realloc_r+0x610>
 8008244:	38800604 	addi	r2,r7,24
 8008248:	b5800404 	addi	r22,r22,16
 800824c:	003f9306 	br	800809c <_realloc_r+0x45c>
 8008250:	b5800604 	addi	r22,r22,24
 8008254:	38c00615 	stw	r3,24(r7)
 8008258:	b0ffff17 	ldw	r3,-4(r22)
 800825c:	38800804 	addi	r2,r7,32
 8008260:	38c00715 	stw	r3,28(r7)
 8008264:	b0c00017 	ldw	r3,0(r22)
 8008268:	003f8c06 	br	800809c <_realloc_r+0x45c>

0800826c <strcmp>:
 800826c:	2144b03a 	or	r2,r4,r5
 8008270:	108000cc 	andi	r2,r2,3
 8008274:	1000171e 	bne	r2,zero,80082d4 <strcmp+0x68>
 8008278:	20800017 	ldw	r2,0(r4)
 800827c:	28c00017 	ldw	r3,0(r5)
 8008280:	10c0141e 	bne	r2,r3,80082d4 <strcmp+0x68>
 8008284:	027fbff4 	movhi	r9,65279
 8008288:	4a7fbfc4 	addi	r9,r9,-257
 800828c:	1247883a 	add	r3,r2,r9
 8008290:	02202074 	movhi	r8,32897
 8008294:	0084303a 	nor	r2,zero,r2
 8008298:	1884703a 	and	r2,r3,r2
 800829c:	42202004 	addi	r8,r8,-32640
 80082a0:	1204703a 	and	r2,r2,r8
 80082a4:	10000226 	beq	r2,zero,80082b0 <strcmp+0x44>
 80082a8:	00002406 	br	800833c <strcmp+0xd0>
 80082ac:	1000231e 	bne	r2,zero,800833c <strcmp+0xd0>
 80082b0:	21000104 	addi	r4,r4,4
 80082b4:	20c00017 	ldw	r3,0(r4)
 80082b8:	29400104 	addi	r5,r5,4
 80082bc:	29800017 	ldw	r6,0(r5)
 80082c0:	1a45883a 	add	r2,r3,r9
 80082c4:	00ce303a 	nor	r7,zero,r3
 80082c8:	11c4703a 	and	r2,r2,r7
 80082cc:	1204703a 	and	r2,r2,r8
 80082d0:	19bff626 	beq	r3,r6,80082ac <strcmp+0x40>
 80082d4:	20800003 	ldbu	r2,0(r4)
 80082d8:	10c03fcc 	andi	r3,r2,255
 80082dc:	18c0201c 	xori	r3,r3,128
 80082e0:	18ffe004 	addi	r3,r3,-128
 80082e4:	18000d26 	beq	r3,zero,800831c <strcmp+0xb0>
 80082e8:	29800007 	ldb	r6,0(r5)
 80082ec:	10803fcc 	andi	r2,r2,255
 80082f0:	19800326 	beq	r3,r6,8008300 <strcmp+0x94>
 80082f4:	00000a06 	br	8008320 <strcmp+0xb4>
 80082f8:	29800007 	ldb	r6,0(r5)
 80082fc:	11800b1e 	bne	r2,r6,800832c <strcmp+0xc0>
 8008300:	21000044 	addi	r4,r4,1
 8008304:	20c00003 	ldbu	r3,0(r4)
 8008308:	29400044 	addi	r5,r5,1
 800830c:	18803fcc 	andi	r2,r3,255
 8008310:	1080201c 	xori	r2,r2,128
 8008314:	10bfe004 	addi	r2,r2,-128
 8008318:	103ff71e 	bne	r2,zero,80082f8 <strcmp+0x8c>
 800831c:	0005883a 	mov	r2,zero
 8008320:	28c00003 	ldbu	r3,0(r5)
 8008324:	10c5c83a 	sub	r2,r2,r3
 8008328:	f800283a 	ret
 800832c:	18803fcc 	andi	r2,r3,255
 8008330:	28c00003 	ldbu	r3,0(r5)
 8008334:	10c5c83a 	sub	r2,r2,r3
 8008338:	f800283a 	ret
 800833c:	0005883a 	mov	r2,zero
 8008340:	f800283a 	ret

08008344 <_wctomb_r>:
 8008344:	00820074 	movhi	r2,2049
 8008348:	10bbd917 	ldw	r2,-4252(r2)
 800834c:	1000683a 	jmp	r2

08008350 <__ascii_wctomb>:
 8008350:	28000926 	beq	r5,zero,8008378 <__ascii_wctomb+0x28>
 8008354:	30804030 	cmpltui	r2,r6,256
 8008358:	10000326 	beq	r2,zero,8008368 <__ascii_wctomb+0x18>
 800835c:	29800005 	stb	r6,0(r5)
 8008360:	00800044 	movi	r2,1
 8008364:	f800283a 	ret
 8008368:	00802284 	movi	r2,138
 800836c:	20800015 	stw	r2,0(r4)
 8008370:	00bfffc4 	movi	r2,-1
 8008374:	f800283a 	ret
 8008378:	0005883a 	mov	r2,zero
 800837c:	f800283a 	ret

08008380 <__muldi3>:
 8008380:	defff604 	addi	sp,sp,-40
 8008384:	dd800615 	stw	r22,24(sp)
 8008388:	dd400515 	stw	r21,20(sp)
 800838c:	dc400115 	stw	r17,4(sp)
 8008390:	202ad43a 	srli	r21,r4,16
 8008394:	347fffcc 	andi	r17,r6,65535
 8008398:	25bfffcc 	andi	r22,r4,65535
 800839c:	dd000415 	stw	r20,16(sp)
 80083a0:	dc800215 	stw	r18,8(sp)
 80083a4:	2029883a 	mov	r20,r4
 80083a8:	2825883a 	mov	r18,r5
 80083ac:	b009883a 	mov	r4,r22
 80083b0:	880b883a 	mov	r5,r17
 80083b4:	dfc00915 	stw	ra,36(sp)
 80083b8:	df000815 	stw	fp,32(sp)
 80083bc:	ddc00715 	stw	r23,28(sp)
 80083c0:	3839883a 	mov	fp,r7
 80083c4:	302ed43a 	srli	r23,r6,16
 80083c8:	dcc00315 	stw	r19,12(sp)
 80083cc:	dc000015 	stw	r16,0(sp)
 80083d0:	3027883a 	mov	r19,r6
 80083d4:	8000b340 	call	8000b34 <__mulsi3>
 80083d8:	880b883a 	mov	r5,r17
 80083dc:	a809883a 	mov	r4,r21
 80083e0:	1021883a 	mov	r16,r2
 80083e4:	8000b340 	call	8000b34 <__mulsi3>
 80083e8:	a809883a 	mov	r4,r21
 80083ec:	b80b883a 	mov	r5,r23
 80083f0:	1023883a 	mov	r17,r2
 80083f4:	8000b340 	call	8000b34 <__mulsi3>
 80083f8:	b80b883a 	mov	r5,r23
 80083fc:	b009883a 	mov	r4,r22
 8008400:	102b883a 	mov	r21,r2
 8008404:	8000b340 	call	8000b34 <__mulsi3>
 8008408:	8006d43a 	srli	r3,r16,16
 800840c:	1445883a 	add	r2,r2,r17
 8008410:	1885883a 	add	r2,r3,r2
 8008414:	1440022e 	bgeu	r2,r17,8008420 <__muldi3+0xa0>
 8008418:	00c00074 	movhi	r3,1
 800841c:	a8eb883a 	add	r21,r21,r3
 8008420:	1022d43a 	srli	r17,r2,16
 8008424:	1004943a 	slli	r2,r2,16
 8008428:	e00b883a 	mov	r5,fp
 800842c:	a009883a 	mov	r4,r20
 8008430:	843fffcc 	andi	r16,r16,65535
 8008434:	1421883a 	add	r16,r2,r16
 8008438:	8000b340 	call	8000b34 <__mulsi3>
 800843c:	8d63883a 	add	r17,r17,r21
 8008440:	900b883a 	mov	r5,r18
 8008444:	9809883a 	mov	r4,r19
 8008448:	1463883a 	add	r17,r2,r17
 800844c:	8000b340 	call	8000b34 <__mulsi3>
 8008450:	8887883a 	add	r3,r17,r2
 8008454:	8005883a 	mov	r2,r16
 8008458:	dfc00917 	ldw	ra,36(sp)
 800845c:	df000817 	ldw	fp,32(sp)
 8008460:	ddc00717 	ldw	r23,28(sp)
 8008464:	dd800617 	ldw	r22,24(sp)
 8008468:	dd400517 	ldw	r21,20(sp)
 800846c:	dd000417 	ldw	r20,16(sp)
 8008470:	dcc00317 	ldw	r19,12(sp)
 8008474:	dc800217 	ldw	r18,8(sp)
 8008478:	dc400117 	ldw	r17,4(sp)
 800847c:	dc000017 	ldw	r16,0(sp)
 8008480:	dec00a04 	addi	sp,sp,40
 8008484:	f800283a 	ret

08008488 <__udivdi3>:
 8008488:	defff504 	addi	sp,sp,-44
 800848c:	dd000515 	stw	r20,20(sp)
 8008490:	dc000115 	stw	r16,4(sp)
 8008494:	dfc00a15 	stw	ra,40(sp)
 8008498:	df000915 	stw	fp,36(sp)
 800849c:	ddc00815 	stw	r23,32(sp)
 80084a0:	dd800715 	stw	r22,28(sp)
 80084a4:	dd400615 	stw	r21,24(sp)
 80084a8:	dcc00415 	stw	r19,16(sp)
 80084ac:	dc800315 	stw	r18,12(sp)
 80084b0:	dc400215 	stw	r17,8(sp)
 80084b4:	2029883a 	mov	r20,r4
 80084b8:	2821883a 	mov	r16,r5
 80084bc:	38008c1e 	bne	r7,zero,80086f0 <__udivdi3+0x268>
 80084c0:	3827883a 	mov	r19,r7
 80084c4:	3023883a 	mov	r17,r6
 80084c8:	2025883a 	mov	r18,r4
 80084cc:	2980422e 	bgeu	r5,r6,80085d8 <__udivdi3+0x150>
 80084d0:	00bfffd4 	movui	r2,65535
 80084d4:	282f883a 	mov	r23,r5
 80084d8:	1180af2e 	bgeu	r2,r6,8008798 <__udivdi3+0x310>
 80084dc:	00804034 	movhi	r2,256
 80084e0:	30815936 	bltu	r6,r2,8008a48 <__udivdi3+0x5c0>
 80084e4:	3006d63a 	srli	r3,r6,24
 80084e8:	04c00604 	movi	r19,24
 80084ec:	00820074 	movhi	r2,2049
 80084f0:	1885883a 	add	r2,r3,r2
 80084f4:	10b83443 	ldbu	r2,-7983(r2)
 80084f8:	14e7883a 	add	r19,r2,r19
 80084fc:	00800804 	movi	r2,32
 8008500:	14c5c83a 	sub	r2,r2,r19
 8008504:	10000526 	beq	r2,zero,800851c <__udivdi3+0x94>
 8008508:	80a0983a 	sll	r16,r16,r2
 800850c:	a4e6d83a 	srl	r19,r20,r19
 8008510:	30a2983a 	sll	r17,r6,r2
 8008514:	a0a4983a 	sll	r18,r20,r2
 8008518:	9c2eb03a 	or	r23,r19,r16
 800851c:	882ad43a 	srli	r21,r17,16
 8008520:	b809883a 	mov	r4,r23
 8008524:	8dbfffcc 	andi	r22,r17,65535
 8008528:	a80b883a 	mov	r5,r21
 800852c:	8000ad80 	call	8000ad8 <__umodsi3>
 8008530:	a80b883a 	mov	r5,r21
 8008534:	b809883a 	mov	r4,r23
 8008538:	1029883a 	mov	r20,r2
 800853c:	8000a740 	call	8000a74 <__udivsi3>
 8008540:	100b883a 	mov	r5,r2
 8008544:	b009883a 	mov	r4,r22
 8008548:	1021883a 	mov	r16,r2
 800854c:	8000b340 	call	8000b34 <__mulsi3>
 8008550:	a028943a 	slli	r20,r20,16
 8008554:	9006d43a 	srli	r3,r18,16
 8008558:	a0c6b03a 	or	r3,r20,r3
 800855c:	1880052e 	bgeu	r3,r2,8008574 <__udivdi3+0xec>
 8008560:	1c47883a 	add	r3,r3,r17
 8008564:	813fffc4 	addi	r4,r16,-1
 8008568:	1c400136 	bltu	r3,r17,8008570 <__udivdi3+0xe8>
 800856c:	18814736 	bltu	r3,r2,8008a8c <__udivdi3+0x604>
 8008570:	2021883a 	mov	r16,r4
 8008574:	18a7c83a 	sub	r19,r3,r2
 8008578:	9809883a 	mov	r4,r19
 800857c:	a80b883a 	mov	r5,r21
 8008580:	8000ad80 	call	8000ad8 <__umodsi3>
 8008584:	1029883a 	mov	r20,r2
 8008588:	9809883a 	mov	r4,r19
 800858c:	a80b883a 	mov	r5,r21
 8008590:	a028943a 	slli	r20,r20,16
 8008594:	8000a740 	call	8000a74 <__udivsi3>
 8008598:	100b883a 	mov	r5,r2
 800859c:	b009883a 	mov	r4,r22
 80085a0:	94bfffcc 	andi	r18,r18,65535
 80085a4:	1027883a 	mov	r19,r2
 80085a8:	a4a4b03a 	or	r18,r20,r18
 80085ac:	8000b340 	call	8000b34 <__mulsi3>
 80085b0:	9080052e 	bgeu	r18,r2,80085c8 <__udivdi3+0x140>
 80085b4:	8ca5883a 	add	r18,r17,r18
 80085b8:	98ffffc4 	addi	r3,r19,-1
 80085bc:	94400136 	bltu	r18,r17,80085c4 <__udivdi3+0x13c>
 80085c0:	90813036 	bltu	r18,r2,8008a84 <__udivdi3+0x5fc>
 80085c4:	1827883a 	mov	r19,r3
 80085c8:	8004943a 	slli	r2,r16,16
 80085cc:	0007883a 	mov	r3,zero
 80085d0:	14c4b03a 	or	r2,r2,r19
 80085d4:	00005a06 	br	8008740 <__udivdi3+0x2b8>
 80085d8:	3000041e 	bne	r6,zero,80085ec <__udivdi3+0x164>
 80085dc:	000b883a 	mov	r5,zero
 80085e0:	01000044 	movi	r4,1
 80085e4:	8000a740 	call	8000a74 <__udivsi3>
 80085e8:	1023883a 	mov	r17,r2
 80085ec:	00bfffd4 	movui	r2,65535
 80085f0:	1440642e 	bgeu	r2,r17,8008784 <__udivdi3+0x2fc>
 80085f4:	00804034 	movhi	r2,256
 80085f8:	88811036 	bltu	r17,r2,8008a3c <__udivdi3+0x5b4>
 80085fc:	8806d63a 	srli	r3,r17,24
 8008600:	04c00604 	movi	r19,24
 8008604:	00820074 	movhi	r2,2049
 8008608:	1885883a 	add	r2,r3,r2
 800860c:	10b83443 	ldbu	r2,-7983(r2)
 8008610:	00c00804 	movi	r3,32
 8008614:	14e7883a 	add	r19,r2,r19
 8008618:	1cc7c83a 	sub	r3,r3,r19
 800861c:	1800631e 	bne	r3,zero,80087ac <__udivdi3+0x324>
 8008620:	882ad43a 	srli	r21,r17,16
 8008624:	8461c83a 	sub	r16,r16,r17
 8008628:	8dbfffcc 	andi	r22,r17,65535
 800862c:	00c00044 	movi	r3,1
 8008630:	8009883a 	mov	r4,r16
 8008634:	a80b883a 	mov	r5,r21
 8008638:	d8c00015 	stw	r3,0(sp)
 800863c:	8000ad80 	call	8000ad8 <__umodsi3>
 8008640:	8009883a 	mov	r4,r16
 8008644:	a80b883a 	mov	r5,r21
 8008648:	1029883a 	mov	r20,r2
 800864c:	8000a740 	call	8000a74 <__udivsi3>
 8008650:	1009883a 	mov	r4,r2
 8008654:	b00b883a 	mov	r5,r22
 8008658:	1021883a 	mov	r16,r2
 800865c:	8000b340 	call	8000b34 <__mulsi3>
 8008660:	a028943a 	slli	r20,r20,16
 8008664:	9008d43a 	srli	r4,r18,16
 8008668:	d8c00017 	ldw	r3,0(sp)
 800866c:	a108b03a 	or	r4,r20,r4
 8008670:	2080052e 	bgeu	r4,r2,8008688 <__udivdi3+0x200>
 8008674:	2449883a 	add	r4,r4,r17
 8008678:	817fffc4 	addi	r5,r16,-1
 800867c:	24400136 	bltu	r4,r17,8008684 <__udivdi3+0x1fc>
 8008680:	20810536 	bltu	r4,r2,8008a98 <__udivdi3+0x610>
 8008684:	2821883a 	mov	r16,r5
 8008688:	20a7c83a 	sub	r19,r4,r2
 800868c:	9809883a 	mov	r4,r19
 8008690:	a80b883a 	mov	r5,r21
 8008694:	d8c00015 	stw	r3,0(sp)
 8008698:	8000ad80 	call	8000ad8 <__umodsi3>
 800869c:	1029883a 	mov	r20,r2
 80086a0:	9809883a 	mov	r4,r19
 80086a4:	a80b883a 	mov	r5,r21
 80086a8:	a028943a 	slli	r20,r20,16
 80086ac:	8000a740 	call	8000a74 <__udivsi3>
 80086b0:	b00b883a 	mov	r5,r22
 80086b4:	1009883a 	mov	r4,r2
 80086b8:	94bfffcc 	andi	r18,r18,65535
 80086bc:	1027883a 	mov	r19,r2
 80086c0:	a4a4b03a 	or	r18,r20,r18
 80086c4:	8000b340 	call	8000b34 <__mulsi3>
 80086c8:	d8c00017 	ldw	r3,0(sp)
 80086cc:	9080052e 	bgeu	r18,r2,80086e4 <__udivdi3+0x25c>
 80086d0:	8ca5883a 	add	r18,r17,r18
 80086d4:	993fffc4 	addi	r4,r19,-1
 80086d8:	94400136 	bltu	r18,r17,80086e0 <__udivdi3+0x258>
 80086dc:	9080e736 	bltu	r18,r2,8008a7c <__udivdi3+0x5f4>
 80086e0:	2027883a 	mov	r19,r4
 80086e4:	8004943a 	slli	r2,r16,16
 80086e8:	14c4b03a 	or	r2,r2,r19
 80086ec:	00001406 	br	8008740 <__udivdi3+0x2b8>
 80086f0:	29c01136 	bltu	r5,r7,8008738 <__udivdi3+0x2b0>
 80086f4:	00bfffd4 	movui	r2,65535
 80086f8:	11c01d2e 	bgeu	r2,r7,8008770 <__udivdi3+0x2e8>
 80086fc:	00804034 	movhi	r2,256
 8008700:	3880c336 	bltu	r7,r2,8008a10 <__udivdi3+0x588>
 8008704:	3808d63a 	srli	r4,r7,24
 8008708:	00c00604 	movi	r3,24
 800870c:	00820074 	movhi	r2,2049
 8008710:	2085883a 	add	r2,r4,r2
 8008714:	11383443 	ldbu	r4,-7983(r2)
 8008718:	20c9883a 	add	r4,r4,r3
 800871c:	00c00804 	movi	r3,32
 8008720:	192fc83a 	sub	r23,r3,r4
 8008724:	b800581e 	bne	r23,zero,8008888 <__udivdi3+0x400>
 8008728:	3c00bc36 	bltu	r7,r16,8008a1c <__udivdi3+0x594>
 800872c:	a185403a 	cmpgeu	r2,r20,r6
 8008730:	0007883a 	mov	r3,zero
 8008734:	00000206 	br	8008740 <__udivdi3+0x2b8>
 8008738:	0007883a 	mov	r3,zero
 800873c:	0005883a 	mov	r2,zero
 8008740:	dfc00a17 	ldw	ra,40(sp)
 8008744:	df000917 	ldw	fp,36(sp)
 8008748:	ddc00817 	ldw	r23,32(sp)
 800874c:	dd800717 	ldw	r22,28(sp)
 8008750:	dd400617 	ldw	r21,24(sp)
 8008754:	dd000517 	ldw	r20,20(sp)
 8008758:	dcc00417 	ldw	r19,16(sp)
 800875c:	dc800317 	ldw	r18,12(sp)
 8008760:	dc400217 	ldw	r17,8(sp)
 8008764:	dc000117 	ldw	r16,4(sp)
 8008768:	dec00b04 	addi	sp,sp,44
 800876c:	f800283a 	ret
 8008770:	38804030 	cmpltui	r2,r7,256
 8008774:	1000ac1e 	bne	r2,zero,8008a28 <__udivdi3+0x5a0>
 8008778:	3808d23a 	srli	r4,r7,8
 800877c:	00c00204 	movi	r3,8
 8008780:	003fe206 	br	800870c <__udivdi3+0x284>
 8008784:	88804030 	cmpltui	r2,r17,256
 8008788:	1000b21e 	bne	r2,zero,8008a54 <__udivdi3+0x5cc>
 800878c:	8806d23a 	srli	r3,r17,8
 8008790:	04c00204 	movi	r19,8
 8008794:	003f9b06 	br	8008604 <__udivdi3+0x17c>
 8008798:	30804030 	cmpltui	r2,r6,256
 800879c:	1000a51e 	bne	r2,zero,8008a34 <__udivdi3+0x5ac>
 80087a0:	3006d23a 	srli	r3,r6,8
 80087a4:	04c00204 	movi	r19,8
 80087a8:	003f5006 	br	80084ec <__udivdi3+0x64>
 80087ac:	88e2983a 	sll	r17,r17,r3
 80087b0:	84eed83a 	srl	r23,r16,r19
 80087b4:	a0e4983a 	sll	r18,r20,r3
 80087b8:	882ad43a 	srli	r21,r17,16
 80087bc:	b809883a 	mov	r4,r23
 80087c0:	80e0983a 	sll	r16,r16,r3
 80087c4:	a80b883a 	mov	r5,r21
 80087c8:	8000ad80 	call	8000ad8 <__umodsi3>
 80087cc:	b809883a 	mov	r4,r23
 80087d0:	a4e6d83a 	srl	r19,r20,r19
 80087d4:	a80b883a 	mov	r5,r21
 80087d8:	1029883a 	mov	r20,r2
 80087dc:	8dbfffcc 	andi	r22,r17,65535
 80087e0:	8000a740 	call	8000a74 <__udivsi3>
 80087e4:	b009883a 	mov	r4,r22
 80087e8:	100b883a 	mov	r5,r2
 80087ec:	9c26b03a 	or	r19,r19,r16
 80087f0:	102f883a 	mov	r23,r2
 80087f4:	8000b340 	call	8000b34 <__mulsi3>
 80087f8:	a028943a 	slli	r20,r20,16
 80087fc:	9808d43a 	srli	r4,r19,16
 8008800:	a108b03a 	or	r4,r20,r4
 8008804:	2080062e 	bgeu	r4,r2,8008820 <__udivdi3+0x398>
 8008808:	2449883a 	add	r4,r4,r17
 800880c:	b8ffffc4 	addi	r3,r23,-1
 8008810:	24409836 	bltu	r4,r17,8008a74 <__udivdi3+0x5ec>
 8008814:	2080972e 	bgeu	r4,r2,8008a74 <__udivdi3+0x5ec>
 8008818:	bdffff84 	addi	r23,r23,-2
 800881c:	2449883a 	add	r4,r4,r17
 8008820:	20a1c83a 	sub	r16,r4,r2
 8008824:	8009883a 	mov	r4,r16
 8008828:	a80b883a 	mov	r5,r21
 800882c:	8000ad80 	call	8000ad8 <__umodsi3>
 8008830:	1029883a 	mov	r20,r2
 8008834:	8009883a 	mov	r4,r16
 8008838:	a80b883a 	mov	r5,r21
 800883c:	a020943a 	slli	r16,r20,16
 8008840:	8000a740 	call	8000a74 <__udivsi3>
 8008844:	100b883a 	mov	r5,r2
 8008848:	b009883a 	mov	r4,r22
 800884c:	9cffffcc 	andi	r19,r19,65535
 8008850:	1039883a 	mov	fp,r2
 8008854:	84e0b03a 	or	r16,r16,r19
 8008858:	8000b340 	call	8000b34 <__mulsi3>
 800885c:	8080062e 	bgeu	r16,r2,8008878 <__udivdi3+0x3f0>
 8008860:	8461883a 	add	r16,r16,r17
 8008864:	e0ffffc4 	addi	r3,fp,-1
 8008868:	84407e36 	bltu	r16,r17,8008a64 <__udivdi3+0x5dc>
 800886c:	80807d2e 	bgeu	r16,r2,8008a64 <__udivdi3+0x5dc>
 8008870:	e73fff84 	addi	fp,fp,-2
 8008874:	8461883a 	add	r16,r16,r17
 8008878:	b806943a 	slli	r3,r23,16
 800887c:	80a1c83a 	sub	r16,r16,r2
 8008880:	1f06b03a 	or	r3,r3,fp
 8008884:	003f6a06 	br	8008630 <__udivdi3+0x1a8>
 8008888:	3106d83a 	srl	r3,r6,r4
 800888c:	3dce983a 	sll	r7,r7,r23
 8008890:	8122d83a 	srl	r17,r16,r4
 8008894:	a104d83a 	srl	r2,r20,r4
 8008898:	19ecb03a 	or	r22,r3,r7
 800889c:	b024d43a 	srli	r18,r22,16
 80088a0:	85e0983a 	sll	r16,r16,r23
 80088a4:	8809883a 	mov	r4,r17
 80088a8:	900b883a 	mov	r5,r18
 80088ac:	1420b03a 	or	r16,r2,r16
 80088b0:	b0bfffcc 	andi	r2,r22,65535
 80088b4:	35ea983a 	sll	r21,r6,r23
 80088b8:	d8800015 	stw	r2,0(sp)
 80088bc:	8000ad80 	call	8000ad8 <__umodsi3>
 80088c0:	900b883a 	mov	r5,r18
 80088c4:	8809883a 	mov	r4,r17
 80088c8:	1027883a 	mov	r19,r2
 80088cc:	8000a740 	call	8000a74 <__udivsi3>
 80088d0:	b13fffcc 	andi	r4,r22,65535
 80088d4:	100b883a 	mov	r5,r2
 80088d8:	1039883a 	mov	fp,r2
 80088dc:	8000b340 	call	8000b34 <__mulsi3>
 80088e0:	9826943a 	slli	r19,r19,16
 80088e4:	8008d43a 	srli	r4,r16,16
 80088e8:	9908b03a 	or	r4,r19,r4
 80088ec:	2080062e 	bgeu	r4,r2,8008908 <__udivdi3+0x480>
 80088f0:	2589883a 	add	r4,r4,r22
 80088f4:	e0ffffc4 	addi	r3,fp,-1
 80088f8:	25805c36 	bltu	r4,r22,8008a6c <__udivdi3+0x5e4>
 80088fc:	20805b2e 	bgeu	r4,r2,8008a6c <__udivdi3+0x5e4>
 8008900:	e73fff84 	addi	fp,fp,-2
 8008904:	2589883a 	add	r4,r4,r22
 8008908:	20a3c83a 	sub	r17,r4,r2
 800890c:	8809883a 	mov	r4,r17
 8008910:	900b883a 	mov	r5,r18
 8008914:	8000ad80 	call	8000ad8 <__umodsi3>
 8008918:	1027883a 	mov	r19,r2
 800891c:	8809883a 	mov	r4,r17
 8008920:	900b883a 	mov	r5,r18
 8008924:	9826943a 	slli	r19,r19,16
 8008928:	8000a740 	call	8000a74 <__udivsi3>
 800892c:	100b883a 	mov	r5,r2
 8008930:	b13fffcc 	andi	r4,r22,65535
 8008934:	843fffcc 	andi	r16,r16,65535
 8008938:	1023883a 	mov	r17,r2
 800893c:	9c20b03a 	or	r16,r19,r16
 8008940:	8000b340 	call	8000b34 <__mulsi3>
 8008944:	8080062e 	bgeu	r16,r2,8008960 <__udivdi3+0x4d8>
 8008948:	85a1883a 	add	r16,r16,r22
 800894c:	88ffffc4 	addi	r3,r17,-1
 8008950:	85804236 	bltu	r16,r22,8008a5c <__udivdi3+0x5d4>
 8008954:	8080412e 	bgeu	r16,r2,8008a5c <__udivdi3+0x5d4>
 8008958:	8c7fff84 	addi	r17,r17,-2
 800895c:	85a1883a 	add	r16,r16,r22
 8008960:	e038943a 	slli	fp,fp,16
 8008964:	adbfffcc 	andi	r22,r21,65535
 8008968:	b00b883a 	mov	r5,r22
 800896c:	e478b03a 	or	fp,fp,r17
 8008970:	e024d43a 	srli	r18,fp,16
 8008974:	e4ffffcc 	andi	r19,fp,65535
 8008978:	9809883a 	mov	r4,r19
 800897c:	a82ad43a 	srli	r21,r21,16
 8008980:	80a1c83a 	sub	r16,r16,r2
 8008984:	8000b340 	call	8000b34 <__mulsi3>
 8008988:	9009883a 	mov	r4,r18
 800898c:	b00b883a 	mov	r5,r22
 8008990:	d8800015 	stw	r2,0(sp)
 8008994:	8000b340 	call	8000b34 <__mulsi3>
 8008998:	9009883a 	mov	r4,r18
 800899c:	a80b883a 	mov	r5,r21
 80089a0:	1023883a 	mov	r17,r2
 80089a4:	8000b340 	call	8000b34 <__mulsi3>
 80089a8:	a80b883a 	mov	r5,r21
 80089ac:	9809883a 	mov	r4,r19
 80089b0:	1025883a 	mov	r18,r2
 80089b4:	8000b340 	call	8000b34 <__mulsi3>
 80089b8:	d9800017 	ldw	r6,0(sp)
 80089bc:	1445883a 	add	r2,r2,r17
 80089c0:	3006d43a 	srli	r3,r6,16
 80089c4:	1885883a 	add	r2,r3,r2
 80089c8:	1440022e 	bgeu	r2,r17,80089d4 <__udivdi3+0x54c>
 80089cc:	00c00074 	movhi	r3,1
 80089d0:	90e5883a 	add	r18,r18,r3
 80089d4:	1006d43a 	srli	r3,r2,16
 80089d8:	1c87883a 	add	r3,r3,r18
 80089dc:	80c00936 	bltu	r16,r3,8008a04 <__udivdi3+0x57c>
 80089e0:	80c00326 	beq	r16,r3,80089f0 <__udivdi3+0x568>
 80089e4:	e005883a 	mov	r2,fp
 80089e8:	0007883a 	mov	r3,zero
 80089ec:	003f5406 	br	8008740 <__udivdi3+0x2b8>
 80089f0:	1004943a 	slli	r2,r2,16
 80089f4:	a5c6983a 	sll	r3,r20,r23
 80089f8:	31bfffcc 	andi	r6,r6,65535
 80089fc:	1185883a 	add	r2,r2,r6
 8008a00:	18bff82e 	bgeu	r3,r2,80089e4 <__udivdi3+0x55c>
 8008a04:	e0bfffc4 	addi	r2,fp,-1
 8008a08:	0007883a 	mov	r3,zero
 8008a0c:	003f4c06 	br	8008740 <__udivdi3+0x2b8>
 8008a10:	3808d43a 	srli	r4,r7,16
 8008a14:	00c00404 	movi	r3,16
 8008a18:	003f3c06 	br	800870c <__udivdi3+0x284>
 8008a1c:	0007883a 	mov	r3,zero
 8008a20:	00800044 	movi	r2,1
 8008a24:	003f4606 	br	8008740 <__udivdi3+0x2b8>
 8008a28:	3809883a 	mov	r4,r7
 8008a2c:	0007883a 	mov	r3,zero
 8008a30:	003f3606 	br	800870c <__udivdi3+0x284>
 8008a34:	3007883a 	mov	r3,r6
 8008a38:	003eac06 	br	80084ec <__udivdi3+0x64>
 8008a3c:	8806d43a 	srli	r3,r17,16
 8008a40:	04c00404 	movi	r19,16
 8008a44:	003eef06 	br	8008604 <__udivdi3+0x17c>
 8008a48:	3006d43a 	srli	r3,r6,16
 8008a4c:	04c00404 	movi	r19,16
 8008a50:	003ea606 	br	80084ec <__udivdi3+0x64>
 8008a54:	8807883a 	mov	r3,r17
 8008a58:	003eea06 	br	8008604 <__udivdi3+0x17c>
 8008a5c:	1823883a 	mov	r17,r3
 8008a60:	003fbf06 	br	8008960 <__udivdi3+0x4d8>
 8008a64:	1839883a 	mov	fp,r3
 8008a68:	003f8306 	br	8008878 <__udivdi3+0x3f0>
 8008a6c:	1839883a 	mov	fp,r3
 8008a70:	003fa506 	br	8008908 <__udivdi3+0x480>
 8008a74:	182f883a 	mov	r23,r3
 8008a78:	003f6906 	br	8008820 <__udivdi3+0x398>
 8008a7c:	9cffff84 	addi	r19,r19,-2
 8008a80:	003f1806 	br	80086e4 <__udivdi3+0x25c>
 8008a84:	9cffff84 	addi	r19,r19,-2
 8008a88:	003ecf06 	br	80085c8 <__udivdi3+0x140>
 8008a8c:	843fff84 	addi	r16,r16,-2
 8008a90:	1c47883a 	add	r3,r3,r17
 8008a94:	003eb706 	br	8008574 <__udivdi3+0xec>
 8008a98:	843fff84 	addi	r16,r16,-2
 8008a9c:	2449883a 	add	r4,r4,r17
 8008aa0:	003ef906 	br	8008688 <__udivdi3+0x200>

08008aa4 <__umoddi3>:
 8008aa4:	defff304 	addi	sp,sp,-52
 8008aa8:	dc400415 	stw	r17,16(sp)
 8008aac:	dc000315 	stw	r16,12(sp)
 8008ab0:	dfc00c15 	stw	ra,48(sp)
 8008ab4:	df000b15 	stw	fp,44(sp)
 8008ab8:	ddc00a15 	stw	r23,40(sp)
 8008abc:	dd800915 	stw	r22,36(sp)
 8008ac0:	dd400815 	stw	r21,32(sp)
 8008ac4:	dd000715 	stw	r20,28(sp)
 8008ac8:	dcc00615 	stw	r19,24(sp)
 8008acc:	dc800515 	stw	r18,20(sp)
 8008ad0:	2823883a 	mov	r17,r5
 8008ad4:	2021883a 	mov	r16,r4
 8008ad8:	3800781e 	bne	r7,zero,8008cbc <__umoddi3+0x218>
 8008adc:	3825883a 	mov	r18,r7
 8008ae0:	3027883a 	mov	r19,r6
 8008ae4:	2029883a 	mov	r20,r4
 8008ae8:	29803d2e 	bgeu	r5,r6,8008be0 <__umoddi3+0x13c>
 8008aec:	00bfffd4 	movui	r2,65535
 8008af0:	2839883a 	mov	fp,r5
 8008af4:	11809f36 	bltu	r2,r6,8008d74 <__umoddi3+0x2d0>
 8008af8:	30804030 	cmpltui	r2,r6,256
 8008afc:	1001451e 	bne	r2,zero,8009014 <__umoddi3+0x570>
 8008b00:	3006d23a 	srli	r3,r6,8
 8008b04:	04800204 	movi	r18,8
 8008b08:	00820074 	movhi	r2,2049
 8008b0c:	1885883a 	add	r2,r3,r2
 8008b10:	11383443 	ldbu	r4,-7983(r2)
 8008b14:	00800804 	movi	r2,32
 8008b18:	2489883a 	add	r4,r4,r18
 8008b1c:	1125c83a 	sub	r18,r2,r4
 8008b20:	90000526 	beq	r18,zero,8008b38 <__umoddi3+0x94>
 8008b24:	8ca2983a 	sll	r17,r17,r18
 8008b28:	8108d83a 	srl	r4,r16,r4
 8008b2c:	34a6983a 	sll	r19,r6,r18
 8008b30:	84a8983a 	sll	r20,r16,r18
 8008b34:	2478b03a 	or	fp,r4,r17
 8008b38:	982cd43a 	srli	r22,r19,16
 8008b3c:	e009883a 	mov	r4,fp
 8008b40:	9dffffcc 	andi	r23,r19,65535
 8008b44:	b00b883a 	mov	r5,r22
 8008b48:	8000ad80 	call	8000ad8 <__umodsi3>
 8008b4c:	b00b883a 	mov	r5,r22
 8008b50:	e009883a 	mov	r4,fp
 8008b54:	102b883a 	mov	r21,r2
 8008b58:	8000a740 	call	8000a74 <__udivsi3>
 8008b5c:	100b883a 	mov	r5,r2
 8008b60:	b809883a 	mov	r4,r23
 8008b64:	8000b340 	call	8000b34 <__mulsi3>
 8008b68:	a82a943a 	slli	r21,r21,16
 8008b6c:	a006d43a 	srli	r3,r20,16
 8008b70:	a8c6b03a 	or	r3,r21,r3
 8008b74:	1880032e 	bgeu	r3,r2,8008b84 <__umoddi3+0xe0>
 8008b78:	1cc7883a 	add	r3,r3,r19
 8008b7c:	1cc00136 	bltu	r3,r19,8008b84 <__umoddi3+0xe0>
 8008b80:	18813836 	bltu	r3,r2,8009064 <__umoddi3+0x5c0>
 8008b84:	18a1c83a 	sub	r16,r3,r2
 8008b88:	b00b883a 	mov	r5,r22
 8008b8c:	8009883a 	mov	r4,r16
 8008b90:	8000ad80 	call	8000ad8 <__umodsi3>
 8008b94:	b00b883a 	mov	r5,r22
 8008b98:	8009883a 	mov	r4,r16
 8008b9c:	1023883a 	mov	r17,r2
 8008ba0:	8000a740 	call	8000a74 <__udivsi3>
 8008ba4:	100b883a 	mov	r5,r2
 8008ba8:	b809883a 	mov	r4,r23
 8008bac:	8822943a 	slli	r17,r17,16
 8008bb0:	8000b340 	call	8000b34 <__mulsi3>
 8008bb4:	a0ffffcc 	andi	r3,r20,65535
 8008bb8:	88c6b03a 	or	r3,r17,r3
 8008bbc:	1880042e 	bgeu	r3,r2,8008bd0 <__umoddi3+0x12c>
 8008bc0:	1cc7883a 	add	r3,r3,r19
 8008bc4:	1cc00236 	bltu	r3,r19,8008bd0 <__umoddi3+0x12c>
 8008bc8:	1880012e 	bgeu	r3,r2,8008bd0 <__umoddi3+0x12c>
 8008bcc:	1cc7883a 	add	r3,r3,r19
 8008bd0:	1885c83a 	sub	r2,r3,r2
 8008bd4:	1484d83a 	srl	r2,r2,r18
 8008bd8:	0007883a 	mov	r3,zero
 8008bdc:	00003a06 	br	8008cc8 <__umoddi3+0x224>
 8008be0:	3000041e 	bne	r6,zero,8008bf4 <__umoddi3+0x150>
 8008be4:	000b883a 	mov	r5,zero
 8008be8:	01000044 	movi	r4,1
 8008bec:	8000a740 	call	8000a74 <__udivsi3>
 8008bf0:	1027883a 	mov	r19,r2
 8008bf4:	00bfffd4 	movui	r2,65535
 8008bf8:	14c0592e 	bgeu	r2,r19,8008d60 <__umoddi3+0x2bc>
 8008bfc:	00804034 	movhi	r2,256
 8008c00:	98810c36 	bltu	r19,r2,8009034 <__umoddi3+0x590>
 8008c04:	9806d63a 	srli	r3,r19,24
 8008c08:	04800604 	movi	r18,24
 8008c0c:	00820074 	movhi	r2,2049
 8008c10:	1885883a 	add	r2,r3,r2
 8008c14:	10f83443 	ldbu	r3,-7983(r2)
 8008c18:	00800804 	movi	r2,32
 8008c1c:	1c87883a 	add	r3,r3,r18
 8008c20:	10e5c83a 	sub	r18,r2,r3
 8008c24:	9000c51e 	bne	r18,zero,8008f3c <__umoddi3+0x498>
 8008c28:	982ad43a 	srli	r21,r19,16
 8008c2c:	8ce3c83a 	sub	r17,r17,r19
 8008c30:	9dbfffcc 	andi	r22,r19,65535
 8008c34:	a80b883a 	mov	r5,r21
 8008c38:	8809883a 	mov	r4,r17
 8008c3c:	8000ad80 	call	8000ad8 <__umodsi3>
 8008c40:	a80b883a 	mov	r5,r21
 8008c44:	8809883a 	mov	r4,r17
 8008c48:	102f883a 	mov	r23,r2
 8008c4c:	8000a740 	call	8000a74 <__udivsi3>
 8008c50:	b00b883a 	mov	r5,r22
 8008c54:	1009883a 	mov	r4,r2
 8008c58:	8000b340 	call	8000b34 <__mulsi3>
 8008c5c:	b82e943a 	slli	r23,r23,16
 8008c60:	a006d43a 	srli	r3,r20,16
 8008c64:	b8c6b03a 	or	r3,r23,r3
 8008c68:	1880042e 	bgeu	r3,r2,8008c7c <__umoddi3+0x1d8>
 8008c6c:	1cc7883a 	add	r3,r3,r19
 8008c70:	1cc00236 	bltu	r3,r19,8008c7c <__umoddi3+0x1d8>
 8008c74:	1880012e 	bgeu	r3,r2,8008c7c <__umoddi3+0x1d8>
 8008c78:	1cc7883a 	add	r3,r3,r19
 8008c7c:	18a1c83a 	sub	r16,r3,r2
 8008c80:	a80b883a 	mov	r5,r21
 8008c84:	8009883a 	mov	r4,r16
 8008c88:	8000ad80 	call	8000ad8 <__umodsi3>
 8008c8c:	1023883a 	mov	r17,r2
 8008c90:	a80b883a 	mov	r5,r21
 8008c94:	8009883a 	mov	r4,r16
 8008c98:	8000a740 	call	8000a74 <__udivsi3>
 8008c9c:	8822943a 	slli	r17,r17,16
 8008ca0:	b00b883a 	mov	r5,r22
 8008ca4:	1009883a 	mov	r4,r2
 8008ca8:	8000b340 	call	8000b34 <__mulsi3>
 8008cac:	a53fffcc 	andi	r20,r20,65535
 8008cb0:	8d06b03a 	or	r3,r17,r20
 8008cb4:	18bfc62e 	bgeu	r3,r2,8008bd0 <__umoddi3+0x12c>
 8008cb8:	003fc106 	br	8008bc0 <__umoddi3+0x11c>
 8008cbc:	2005883a 	mov	r2,r4
 8008cc0:	29c00d2e 	bgeu	r5,r7,8008cf8 <__umoddi3+0x254>
 8008cc4:	2807883a 	mov	r3,r5
 8008cc8:	dfc00c17 	ldw	ra,48(sp)
 8008ccc:	df000b17 	ldw	fp,44(sp)
 8008cd0:	ddc00a17 	ldw	r23,40(sp)
 8008cd4:	dd800917 	ldw	r22,36(sp)
 8008cd8:	dd400817 	ldw	r21,32(sp)
 8008cdc:	dd000717 	ldw	r20,28(sp)
 8008ce0:	dcc00617 	ldw	r19,24(sp)
 8008ce4:	dc800517 	ldw	r18,20(sp)
 8008ce8:	dc400417 	ldw	r17,16(sp)
 8008cec:	dc000317 	ldw	r16,12(sp)
 8008cf0:	dec00d04 	addi	sp,sp,52
 8008cf4:	f800283a 	ret
 8008cf8:	013fffd4 	movui	r4,65535
 8008cfc:	2807883a 	mov	r3,r5
 8008d00:	21c0122e 	bgeu	r4,r7,8008d4c <__umoddi3+0x2a8>
 8008d04:	01004034 	movhi	r4,256
 8008d08:	3900c736 	bltu	r7,r4,8009028 <__umoddi3+0x584>
 8008d0c:	3810d63a 	srli	r8,r7,24
 8008d10:	01400604 	movi	r5,24
 8008d14:	01020074 	movhi	r4,2049
 8008d18:	4109883a 	add	r4,r8,r4
 8008d1c:	25383443 	ldbu	r20,-7983(r4)
 8008d20:	05400804 	movi	r21,32
 8008d24:	a169883a 	add	r20,r20,r5
 8008d28:	ad2bc83a 	sub	r21,r21,r20
 8008d2c:	a800161e 	bne	r21,zero,8008d88 <__umoddi3+0x2e4>
 8008d30:	3c400136 	bltu	r7,r17,8008d38 <__umoddi3+0x294>
 8008d34:	81bfe436 	bltu	r16,r6,8008cc8 <__umoddi3+0x224>
 8008d38:	8185c83a 	sub	r2,r16,r6
 8008d3c:	89cfc83a 	sub	r7,r17,r7
 8008d40:	8087803a 	cmpltu	r3,r16,r2
 8008d44:	38c7c83a 	sub	r3,r7,r3
 8008d48:	003fdf06 	br	8008cc8 <__umoddi3+0x224>
 8008d4c:	39004030 	cmpltui	r4,r7,256
 8008d50:	2000b21e 	bne	r4,zero,800901c <__umoddi3+0x578>
 8008d54:	3810d23a 	srli	r8,r7,8
 8008d58:	01400204 	movi	r5,8
 8008d5c:	003fed06 	br	8008d14 <__umoddi3+0x270>
 8008d60:	98804030 	cmpltui	r2,r19,256
 8008d64:	1000b61e 	bne	r2,zero,8009040 <__umoddi3+0x59c>
 8008d68:	9806d23a 	srli	r3,r19,8
 8008d6c:	04800204 	movi	r18,8
 8008d70:	003fa606 	br	8008c0c <__umoddi3+0x168>
 8008d74:	00804034 	movhi	r2,256
 8008d78:	3080b336 	bltu	r6,r2,8009048 <__umoddi3+0x5a4>
 8008d7c:	3006d63a 	srli	r3,r6,24
 8008d80:	04800604 	movi	r18,24
 8008d84:	003f6006 	br	8008b08 <__umoddi3+0x64>
 8008d88:	3508d83a 	srl	r4,r6,r20
 8008d8c:	3d4e983a 	sll	r7,r7,r21
 8008d90:	8d38d83a 	srl	fp,r17,r20
 8008d94:	8504d83a 	srl	r2,r16,r20
 8008d98:	21e4b03a 	or	r18,r4,r7
 8008d9c:	902cd43a 	srli	r22,r18,16
 8008da0:	8d62983a 	sll	r17,r17,r21
 8008da4:	e009883a 	mov	r4,fp
 8008da8:	b00b883a 	mov	r5,r22
 8008dac:	3566983a 	sll	r19,r6,r21
 8008db0:	1462b03a 	or	r17,r2,r17
 8008db4:	8000ad80 	call	8000ad8 <__umodsi3>
 8008db8:	e009883a 	mov	r4,fp
 8008dbc:	b00b883a 	mov	r5,r22
 8008dc0:	95ffffcc 	andi	r23,r18,65535
 8008dc4:	d8800015 	stw	r2,0(sp)
 8008dc8:	8000a740 	call	8000a74 <__udivsi3>
 8008dcc:	100b883a 	mov	r5,r2
 8008dd0:	b809883a 	mov	r4,r23
 8008dd4:	1039883a 	mov	fp,r2
 8008dd8:	8000b340 	call	8000b34 <__mulsi3>
 8008ddc:	d9800017 	ldw	r6,0(sp)
 8008de0:	8806d43a 	srli	r3,r17,16
 8008de4:	8560983a 	sll	r16,r16,r21
 8008de8:	300c943a 	slli	r6,r6,16
 8008dec:	30c6b03a 	or	r3,r6,r3
 8008df0:	1880062e 	bgeu	r3,r2,8008e0c <__umoddi3+0x368>
 8008df4:	1c87883a 	add	r3,r3,r18
 8008df8:	e13fffc4 	addi	r4,fp,-1
 8008dfc:	1c809736 	bltu	r3,r18,800905c <__umoddi3+0x5b8>
 8008e00:	1880962e 	bgeu	r3,r2,800905c <__umoddi3+0x5b8>
 8008e04:	e73fff84 	addi	fp,fp,-2
 8008e08:	1c87883a 	add	r3,r3,r18
 8008e0c:	1887c83a 	sub	r3,r3,r2
 8008e10:	b00b883a 	mov	r5,r22
 8008e14:	1809883a 	mov	r4,r3
 8008e18:	d8c00115 	stw	r3,4(sp)
 8008e1c:	8000ad80 	call	8000ad8 <__umodsi3>
 8008e20:	d8c00117 	ldw	r3,4(sp)
 8008e24:	b00b883a 	mov	r5,r22
 8008e28:	d8800015 	stw	r2,0(sp)
 8008e2c:	1809883a 	mov	r4,r3
 8008e30:	8000a740 	call	8000a74 <__udivsi3>
 8008e34:	100b883a 	mov	r5,r2
 8008e38:	b809883a 	mov	r4,r23
 8008e3c:	102d883a 	mov	r22,r2
 8008e40:	8000b340 	call	8000b34 <__mulsi3>
 8008e44:	d9800017 	ldw	r6,0(sp)
 8008e48:	8c7fffcc 	andi	r17,r17,65535
 8008e4c:	300c943a 	slli	r6,r6,16
 8008e50:	3462b03a 	or	r17,r6,r17
 8008e54:	8880062e 	bgeu	r17,r2,8008e70 <__umoddi3+0x3cc>
 8008e58:	8ca3883a 	add	r17,r17,r18
 8008e5c:	b0ffffc4 	addi	r3,r22,-1
 8008e60:	8c807c36 	bltu	r17,r18,8009054 <__umoddi3+0x5b0>
 8008e64:	88807b2e 	bgeu	r17,r2,8009054 <__umoddi3+0x5b0>
 8008e68:	b5bfff84 	addi	r22,r22,-2
 8008e6c:	8ca3883a 	add	r17,r17,r18
 8008e70:	e038943a 	slli	fp,fp,16
 8008e74:	980cd43a 	srli	r6,r19,16
 8008e78:	98ffffcc 	andi	r3,r19,65535
 8008e7c:	e5b8b03a 	or	fp,fp,r22
 8008e80:	e02cd43a 	srli	r22,fp,16
 8008e84:	e73fffcc 	andi	fp,fp,65535
 8008e88:	180b883a 	mov	r5,r3
 8008e8c:	e009883a 	mov	r4,fp
 8008e90:	d9800215 	stw	r6,8(sp)
 8008e94:	d8c00015 	stw	r3,0(sp)
 8008e98:	88a3c83a 	sub	r17,r17,r2
 8008e9c:	8000b340 	call	8000b34 <__mulsi3>
 8008ea0:	d8c00017 	ldw	r3,0(sp)
 8008ea4:	b009883a 	mov	r4,r22
 8008ea8:	102f883a 	mov	r23,r2
 8008eac:	180b883a 	mov	r5,r3
 8008eb0:	8000b340 	call	8000b34 <__mulsi3>
 8008eb4:	d9800217 	ldw	r6,8(sp)
 8008eb8:	b009883a 	mov	r4,r22
 8008ebc:	d8800115 	stw	r2,4(sp)
 8008ec0:	300b883a 	mov	r5,r6
 8008ec4:	d9800015 	stw	r6,0(sp)
 8008ec8:	8000b340 	call	8000b34 <__mulsi3>
 8008ecc:	d9800017 	ldw	r6,0(sp)
 8008ed0:	e009883a 	mov	r4,fp
 8008ed4:	102d883a 	mov	r22,r2
 8008ed8:	300b883a 	mov	r5,r6
 8008edc:	8000b340 	call	8000b34 <__mulsi3>
 8008ee0:	d9c00117 	ldw	r7,4(sp)
 8008ee4:	b808d43a 	srli	r4,r23,16
 8008ee8:	11c5883a 	add	r2,r2,r7
 8008eec:	2085883a 	add	r2,r4,r2
 8008ef0:	11c0022e 	bgeu	r2,r7,8008efc <__umoddi3+0x458>
 8008ef4:	00c00074 	movhi	r3,1
 8008ef8:	b0ed883a 	add	r22,r22,r3
 8008efc:	1006d43a 	srli	r3,r2,16
 8008f00:	1004943a 	slli	r2,r2,16
 8008f04:	bdffffcc 	andi	r23,r23,65535
 8008f08:	1d87883a 	add	r3,r3,r22
 8008f0c:	15c5883a 	add	r2,r2,r23
 8008f10:	88c03a36 	bltu	r17,r3,8008ffc <__umoddi3+0x558>
 8008f14:	88c03826 	beq	r17,r3,8008ff8 <__umoddi3+0x554>
 8008f18:	8085c83a 	sub	r2,r16,r2
 8008f1c:	80a1803a 	cmpltu	r16,r16,r2
 8008f20:	88c7c83a 	sub	r3,r17,r3
 8008f24:	1c07c83a 	sub	r3,r3,r16
 8008f28:	1d20983a 	sll	r16,r3,r20
 8008f2c:	1544d83a 	srl	r2,r2,r21
 8008f30:	1d46d83a 	srl	r3,r3,r21
 8008f34:	8084b03a 	or	r2,r16,r2
 8008f38:	003f6306 	br	8008cc8 <__umoddi3+0x224>
 8008f3c:	9ca6983a 	sll	r19,r19,r18
 8008f40:	88f8d83a 	srl	fp,r17,r3
 8008f44:	80c6d83a 	srl	r3,r16,r3
 8008f48:	982ad43a 	srli	r21,r19,16
 8008f4c:	8ca2983a 	sll	r17,r17,r18
 8008f50:	e009883a 	mov	r4,fp
 8008f54:	a80b883a 	mov	r5,r21
 8008f58:	1c6eb03a 	or	r23,r3,r17
 8008f5c:	8000ad80 	call	8000ad8 <__umodsi3>
 8008f60:	a80b883a 	mov	r5,r21
 8008f64:	e009883a 	mov	r4,fp
 8008f68:	1029883a 	mov	r20,r2
 8008f6c:	9dbfffcc 	andi	r22,r19,65535
 8008f70:	8000a740 	call	8000a74 <__udivsi3>
 8008f74:	b009883a 	mov	r4,r22
 8008f78:	100b883a 	mov	r5,r2
 8008f7c:	8000b340 	call	8000b34 <__mulsi3>
 8008f80:	a006943a 	slli	r3,r20,16
 8008f84:	b808d43a 	srli	r4,r23,16
 8008f88:	84a8983a 	sll	r20,r16,r18
 8008f8c:	1906b03a 	or	r3,r3,r4
 8008f90:	1880042e 	bgeu	r3,r2,8008fa4 <__umoddi3+0x500>
 8008f94:	1cc7883a 	add	r3,r3,r19
 8008f98:	1cc00236 	bltu	r3,r19,8008fa4 <__umoddi3+0x500>
 8008f9c:	1880012e 	bgeu	r3,r2,8008fa4 <__umoddi3+0x500>
 8008fa0:	1cc7883a 	add	r3,r3,r19
 8008fa4:	18a3c83a 	sub	r17,r3,r2
 8008fa8:	8809883a 	mov	r4,r17
 8008fac:	a80b883a 	mov	r5,r21
 8008fb0:	8000ad80 	call	8000ad8 <__umodsi3>
 8008fb4:	1021883a 	mov	r16,r2
 8008fb8:	8809883a 	mov	r4,r17
 8008fbc:	a80b883a 	mov	r5,r21
 8008fc0:	8022943a 	slli	r17,r16,16
 8008fc4:	8000a740 	call	8000a74 <__udivsi3>
 8008fc8:	100b883a 	mov	r5,r2
 8008fcc:	b009883a 	mov	r4,r22
 8008fd0:	bdffffcc 	andi	r23,r23,65535
 8008fd4:	8000b340 	call	8000b34 <__mulsi3>
 8008fd8:	8de2b03a 	or	r17,r17,r23
 8008fdc:	8880042e 	bgeu	r17,r2,8008ff0 <__umoddi3+0x54c>
 8008fe0:	8ce3883a 	add	r17,r17,r19
 8008fe4:	8cc00236 	bltu	r17,r19,8008ff0 <__umoddi3+0x54c>
 8008fe8:	8880012e 	bgeu	r17,r2,8008ff0 <__umoddi3+0x54c>
 8008fec:	8ce3883a 	add	r17,r17,r19
 8008ff0:	88a3c83a 	sub	r17,r17,r2
 8008ff4:	003f0f06 	br	8008c34 <__umoddi3+0x190>
 8008ff8:	80bfc72e 	bgeu	r16,r2,8008f18 <__umoddi3+0x474>
 8008ffc:	14e7c83a 	sub	r19,r2,r19
 8009000:	14c5803a 	cmpltu	r2,r2,r19
 8009004:	1489883a 	add	r4,r2,r18
 8009008:	1907c83a 	sub	r3,r3,r4
 800900c:	9805883a 	mov	r2,r19
 8009010:	003fc106 	br	8008f18 <__umoddi3+0x474>
 8009014:	3007883a 	mov	r3,r6
 8009018:	003ebb06 	br	8008b08 <__umoddi3+0x64>
 800901c:	3811883a 	mov	r8,r7
 8009020:	000b883a 	mov	r5,zero
 8009024:	003f3b06 	br	8008d14 <__umoddi3+0x270>
 8009028:	3810d43a 	srli	r8,r7,16
 800902c:	01400404 	movi	r5,16
 8009030:	003f3806 	br	8008d14 <__umoddi3+0x270>
 8009034:	9806d43a 	srli	r3,r19,16
 8009038:	04800404 	movi	r18,16
 800903c:	003ef306 	br	8008c0c <__umoddi3+0x168>
 8009040:	9807883a 	mov	r3,r19
 8009044:	003ef106 	br	8008c0c <__umoddi3+0x168>
 8009048:	3006d43a 	srli	r3,r6,16
 800904c:	04800404 	movi	r18,16
 8009050:	003ead06 	br	8008b08 <__umoddi3+0x64>
 8009054:	182d883a 	mov	r22,r3
 8009058:	003f8506 	br	8008e70 <__umoddi3+0x3cc>
 800905c:	2039883a 	mov	fp,r4
 8009060:	003f6a06 	br	8008e0c <__umoddi3+0x368>
 8009064:	1cc7883a 	add	r3,r3,r19
 8009068:	003ec606 	br	8008b84 <__umoddi3+0xe0>

0800906c <__adddf3>:
 800906c:	02000434 	movhi	r8,16
 8009070:	defffb04 	addi	sp,sp,-20
 8009074:	423fffc4 	addi	r8,r8,-1
 8009078:	2a12703a 	and	r9,r5,r8
 800907c:	3a06703a 	and	r3,r7,r8
 8009080:	3804d53a 	srli	r2,r7,20
 8009084:	dc000015 	stw	r16,0(sp)
 8009088:	2820d53a 	srli	r16,r5,20
 800908c:	2016d77a 	srli	r11,r4,29
 8009090:	3014d77a 	srli	r10,r6,29
 8009094:	280ad7fa 	srli	r5,r5,31
 8009098:	481290fa 	slli	r9,r9,3
 800909c:	180690fa 	slli	r3,r3,3
 80090a0:	380ed7fa 	srli	r7,r7,31
 80090a4:	dc400115 	stw	r17,4(sp)
 80090a8:	8401ffcc 	andi	r16,r16,2047
 80090ac:	1081ffcc 	andi	r2,r2,2047
 80090b0:	dfc00415 	stw	ra,16(sp)
 80090b4:	dcc00315 	stw	r19,12(sp)
 80090b8:	dc800215 	stw	r18,8(sp)
 80090bc:	5a52b03a 	or	r9,r11,r9
 80090c0:	50c6b03a 	or	r3,r10,r3
 80090c4:	2823883a 	mov	r17,r5
 80090c8:	201890fa 	slli	r12,r4,3
 80090cc:	301690fa 	slli	r11,r6,3
 80090d0:	8095c83a 	sub	r10,r16,r2
 80090d4:	29c06a26 	beq	r5,r7,8009280 <__adddf3+0x214>
 80090d8:	0280590e 	bge	zero,r10,8009240 <__adddf3+0x1d4>
 80090dc:	10007c26 	beq	r2,zero,80092d0 <__adddf3+0x264>
 80090e0:	8081ffd8 	cmpnei	r2,r16,2047
 80090e4:	10010726 	beq	r2,zero,8009504 <__adddf3+0x498>
 80090e8:	18c02034 	orhi	r3,r3,128
 80090ec:	50800e48 	cmpgei	r2,r10,57
 80090f0:	1000ed1e 	bne	r2,zero,80094a8 <__adddf3+0x43c>
 80090f4:	50800808 	cmpgei	r2,r10,32
 80090f8:	1001541e 	bne	r2,zero,800964c <__adddf3+0x5e0>
 80090fc:	01000804 	movi	r4,32
 8009100:	2289c83a 	sub	r4,r4,r10
 8009104:	1926983a 	sll	r19,r3,r4
 8009108:	5a84d83a 	srl	r2,r11,r10
 800910c:	5908983a 	sll	r4,r11,r4
 8009110:	1a86d83a 	srl	r3,r3,r10
 8009114:	98a6b03a 	or	r19,r19,r2
 8009118:	2016c03a 	cmpne	r11,r4,zero
 800911c:	9ae6b03a 	or	r19,r19,r11
 8009120:	48d3c83a 	sub	r9,r9,r3
 8009124:	64e7c83a 	sub	r19,r12,r19
 8009128:	64c9803a 	cmpltu	r4,r12,r19
 800912c:	4909c83a 	sub	r4,r9,r4
 8009130:	2080202c 	andhi	r2,r4,128
 8009134:	10008726 	beq	r2,zero,8009354 <__adddf3+0x2e8>
 8009138:	02402034 	movhi	r9,128
 800913c:	4a7fffc4 	addi	r9,r9,-1
 8009140:	2264703a 	and	r18,r4,r9
 8009144:	9000cf26 	beq	r18,zero,8009484 <__adddf3+0x418>
 8009148:	9009883a 	mov	r4,r18
 800914c:	800b9540 	call	800b954 <__clzsi2>
 8009150:	10fffe04 	addi	r3,r2,-8
 8009154:	01000804 	movi	r4,32
 8009158:	20c9c83a 	sub	r4,r4,r3
 800915c:	990ad83a 	srl	r5,r19,r4
 8009160:	90c8983a 	sll	r4,r18,r3
 8009164:	98e6983a 	sll	r19,r19,r3
 8009168:	2908b03a 	or	r4,r5,r4
 800916c:	1c00be16 	blt	r3,r16,8009468 <__adddf3+0x3fc>
 8009170:	1c21c83a 	sub	r16,r3,r16
 8009174:	81400044 	addi	r5,r16,1
 8009178:	28800808 	cmpgei	r2,r5,32
 800917c:	10011b1e 	bne	r2,zero,80095ec <__adddf3+0x580>
 8009180:	00800804 	movi	r2,32
 8009184:	1145c83a 	sub	r2,r2,r5
 8009188:	9946d83a 	srl	r3,r19,r5
 800918c:	98a6983a 	sll	r19,r19,r2
 8009190:	2084983a 	sll	r2,r4,r2
 8009194:	2148d83a 	srl	r4,r4,r5
 8009198:	9826c03a 	cmpne	r19,r19,zero
 800919c:	10c4b03a 	or	r2,r2,r3
 80091a0:	14e6b03a 	or	r19,r2,r19
 80091a4:	0021883a 	mov	r16,zero
 80091a8:	988001cc 	andi	r2,r19,7
 80091ac:	10000726 	beq	r2,zero,80091cc <__adddf3+0x160>
 80091b0:	988003cc 	andi	r2,r19,15
 80091b4:	10800120 	cmpeqi	r2,r2,4
 80091b8:	1000041e 	bne	r2,zero,80091cc <__adddf3+0x160>
 80091bc:	99400104 	addi	r5,r19,4
 80091c0:	2ce7803a 	cmpltu	r19,r5,r19
 80091c4:	24c9883a 	add	r4,r4,r19
 80091c8:	2827883a 	mov	r19,r5
 80091cc:	2080202c 	andhi	r2,r4,128
 80091d0:	10006226 	beq	r2,zero,800935c <__adddf3+0x2f0>
 80091d4:	84000044 	addi	r16,r16,1
 80091d8:	8081ffe0 	cmpeqi	r2,r16,2047
 80091dc:	8401ffcc 	andi	r16,r16,2047
 80091e0:	1000731e 	bne	r2,zero,80093b0 <__adddf3+0x344>
 80091e4:	017fe034 	movhi	r5,65408
 80091e8:	297fffc4 	addi	r5,r5,-1
 80091ec:	214a703a 	and	r5,r4,r5
 80091f0:	2804977a 	slli	r2,r5,29
 80091f4:	280a927a 	slli	r5,r5,9
 80091f8:	9826d0fa 	srli	r19,r19,3
 80091fc:	2808d33a 	srli	r4,r5,12
 8009200:	14c4b03a 	or	r2,r2,r19
 8009204:	8020953a 	slli	r16,r16,20
 8009208:	00c00434 	movhi	r3,16
 800920c:	8c403fcc 	andi	r17,r17,255
 8009210:	882297fa 	slli	r17,r17,31
 8009214:	18ffffc4 	addi	r3,r3,-1
 8009218:	20c6703a 	and	r3,r4,r3
 800921c:	1c06b03a 	or	r3,r3,r16
 8009220:	1c46b03a 	or	r3,r3,r17
 8009224:	dfc00417 	ldw	ra,16(sp)
 8009228:	dcc00317 	ldw	r19,12(sp)
 800922c:	dc800217 	ldw	r18,8(sp)
 8009230:	dc400117 	ldw	r17,4(sp)
 8009234:	dc000017 	ldw	r16,0(sp)
 8009238:	dec00504 	addi	sp,sp,20
 800923c:	f800283a 	ret
 8009240:	50002b1e 	bne	r10,zero,80092f0 <__adddf3+0x284>
 8009244:	80800044 	addi	r2,r16,1
 8009248:	1081ff8c 	andi	r2,r2,2046
 800924c:	1000a11e 	bne	r2,zero,80094d4 <__adddf3+0x468>
 8009250:	4b0ab03a 	or	r5,r9,r12
 8009254:	1ac4b03a 	or	r2,r3,r11
 8009258:	80015c1e 	bne	r16,zero,80097cc <__adddf3+0x760>
 800925c:	28012826 	beq	r5,zero,8009700 <__adddf3+0x694>
 8009260:	1001671e 	bne	r2,zero,8009800 <__adddf3+0x794>
 8009264:	4826977a 	slli	r19,r9,29
 8009268:	00c80034 	movhi	r3,8192
 800926c:	18ffffc4 	addi	r3,r3,-1
 8009270:	20c4703a 	and	r2,r4,r3
 8009274:	9884b03a 	or	r2,r19,r2
 8009278:	4812d0fa 	srli	r9,r9,3
 800927c:	00003d06 	br	8009374 <__adddf3+0x308>
 8009280:	02804f0e 	bge	zero,r10,80093c0 <__adddf3+0x354>
 8009284:	10002426 	beq	r2,zero,8009318 <__adddf3+0x2ac>
 8009288:	8081ffd8 	cmpnei	r2,r16,2047
 800928c:	10009d26 	beq	r2,zero,8009504 <__adddf3+0x498>
 8009290:	18c02034 	orhi	r3,r3,128
 8009294:	50800e48 	cmpgei	r2,r10,57
 8009298:	10003b1e 	bne	r2,zero,8009388 <__adddf3+0x31c>
 800929c:	50800808 	cmpgei	r2,r10,32
 80092a0:	10010326 	beq	r2,zero,80096b0 <__adddf3+0x644>
 80092a4:	54fff804 	addi	r19,r10,-32
 80092a8:	51000820 	cmpeqi	r4,r10,32
 80092ac:	1cc4d83a 	srl	r2,r3,r19
 80092b0:	2000041e 	bne	r4,zero,80092c4 <__adddf3+0x258>
 80092b4:	01001004 	movi	r4,64
 80092b8:	2295c83a 	sub	r10,r4,r10
 80092bc:	1a86983a 	sll	r3,r3,r10
 80092c0:	58d6b03a 	or	r11,r11,r3
 80092c4:	5826c03a 	cmpne	r19,r11,zero
 80092c8:	98a6b03a 	or	r19,r19,r2
 80092cc:	00003006 	br	8009390 <__adddf3+0x324>
 80092d0:	1ac4b03a 	or	r2,r3,r11
 80092d4:	10007726 	beq	r2,zero,80094b4 <__adddf3+0x448>
 80092d8:	50bfffc4 	addi	r2,r10,-1
 80092dc:	10011926 	beq	r2,zero,8009744 <__adddf3+0x6d8>
 80092e0:	5281ffd8 	cmpnei	r10,r10,2047
 80092e4:	50012026 	beq	r10,zero,8009768 <__adddf3+0x6fc>
 80092e8:	1015883a 	mov	r10,r2
 80092ec:	003f7f06 	br	80090ec <__adddf3+0x80>
 80092f0:	1409c83a 	sub	r4,r2,r16
 80092f4:	8000a61e 	bne	r16,zero,8009590 <__adddf3+0x524>
 80092f8:	4b0ab03a 	or	r5,r9,r12
 80092fc:	2800f726 	beq	r5,zero,80096dc <__adddf3+0x670>
 8009300:	217fffc4 	addi	r5,r4,-1
 8009304:	28017f26 	beq	r5,zero,8009904 <__adddf3+0x898>
 8009308:	2101ffd8 	cmpnei	r4,r4,2047
 800930c:	2001a326 	beq	r4,zero,800999c <__adddf3+0x930>
 8009310:	2809883a 	mov	r4,r5
 8009314:	0000a106 	br	800959c <__adddf3+0x530>
 8009318:	1ac4b03a 	or	r2,r3,r11
 800931c:	10006526 	beq	r2,zero,80094b4 <__adddf3+0x448>
 8009320:	50bfffc4 	addi	r2,r10,-1
 8009324:	10000426 	beq	r2,zero,8009338 <__adddf3+0x2cc>
 8009328:	5281ffd8 	cmpnei	r10,r10,2047
 800932c:	50014326 	beq	r10,zero,800983c <__adddf3+0x7d0>
 8009330:	1015883a 	mov	r10,r2
 8009334:	003fd706 	br	8009294 <__adddf3+0x228>
 8009338:	62e7883a 	add	r19,r12,r11
 800933c:	48d3883a 	add	r9,r9,r3
 8009340:	9b09803a 	cmpltu	r4,r19,r12
 8009344:	4909883a 	add	r4,r9,r4
 8009348:	2080202c 	andhi	r2,r4,128
 800934c:	1000b41e 	bne	r2,zero,8009620 <__adddf3+0x5b4>
 8009350:	04000044 	movi	r16,1
 8009354:	988001cc 	andi	r2,r19,7
 8009358:	103f951e 	bne	r2,zero,80091b0 <__adddf3+0x144>
 800935c:	9826d0fa 	srli	r19,r19,3
 8009360:	2004977a 	slli	r2,r4,29
 8009364:	2012d0fa 	srli	r9,r4,3
 8009368:	9884b03a 	or	r2,r19,r2
 800936c:	80c1ffe0 	cmpeqi	r3,r16,2047
 8009370:	1800351e 	bne	r3,zero,8009448 <__adddf3+0x3dc>
 8009374:	01000434 	movhi	r4,16
 8009378:	213fffc4 	addi	r4,r4,-1
 800937c:	4908703a 	and	r4,r9,r4
 8009380:	8401ffcc 	andi	r16,r16,2047
 8009384:	003f9f06 	br	8009204 <__adddf3+0x198>
 8009388:	1ac8b03a 	or	r4,r3,r11
 800938c:	2026c03a 	cmpne	r19,r4,zero
 8009390:	9b27883a 	add	r19,r19,r12
 8009394:	9b09803a 	cmpltu	r4,r19,r12
 8009398:	2249883a 	add	r4,r4,r9
 800939c:	2080202c 	andhi	r2,r4,128
 80093a0:	103fec26 	beq	r2,zero,8009354 <__adddf3+0x2e8>
 80093a4:	84000044 	addi	r16,r16,1
 80093a8:	8081ffe0 	cmpeqi	r2,r16,2047
 80093ac:	10009d26 	beq	r2,zero,8009624 <__adddf3+0x5b8>
 80093b0:	0401ffc4 	movi	r16,2047
 80093b4:	0009883a 	mov	r4,zero
 80093b8:	0005883a 	mov	r2,zero
 80093bc:	003f9106 	br	8009204 <__adddf3+0x198>
 80093c0:	5000571e 	bne	r10,zero,8009520 <__adddf3+0x4b4>
 80093c4:	80800044 	addi	r2,r16,1
 80093c8:	1141ff8c 	andi	r5,r2,2046
 80093cc:	2800ed1e 	bne	r5,zero,8009784 <__adddf3+0x718>
 80093d0:	4b04b03a 	or	r2,r9,r12
 80093d4:	8000a826 	beq	r16,zero,8009678 <__adddf3+0x60c>
 80093d8:	10010226 	beq	r2,zero,80097e4 <__adddf3+0x778>
 80093dc:	1ad6b03a 	or	r11,r3,r11
 80093e0:	480a977a 	slli	r5,r9,29
 80093e4:	4812d0fa 	srli	r9,r9,3
 80093e8:	58015f26 	beq	r11,zero,8009968 <__adddf3+0x8fc>
 80093ec:	02080034 	movhi	r8,8192
 80093f0:	423fffc4 	addi	r8,r8,-1
 80093f4:	2204703a 	and	r2,r4,r8
 80093f8:	4900022c 	andhi	r4,r9,8
 80093fc:	114ab03a 	or	r5,r2,r5
 8009400:	20000826 	beq	r4,zero,8009424 <__adddf3+0x3b8>
 8009404:	1808d0fa 	srli	r4,r3,3
 8009408:	2080022c 	andhi	r2,r4,8
 800940c:	1000051e 	bne	r2,zero,8009424 <__adddf3+0x3b8>
 8009410:	1806977a 	slli	r3,r3,29
 8009414:	3204703a 	and	r2,r6,r8
 8009418:	3823883a 	mov	r17,r7
 800941c:	10cab03a 	or	r5,r2,r3
 8009420:	2013883a 	mov	r9,r4
 8009424:	2804d77a 	srli	r2,r5,29
 8009428:	480890fa 	slli	r4,r9,3
 800942c:	00c80034 	movhi	r3,8192
 8009430:	18ffffc4 	addi	r3,r3,-1
 8009434:	1108b03a 	or	r4,r2,r4
 8009438:	2004977a 	slli	r2,r4,29
 800943c:	2012d0fa 	srli	r9,r4,3
 8009440:	28ca703a 	and	r5,r5,r3
 8009444:	1144b03a 	or	r2,r2,r5
 8009448:	4886b03a 	or	r3,r9,r2
 800944c:	18016b26 	beq	r3,zero,80099fc <__adddf3+0x990>
 8009450:	00c00434 	movhi	r3,16
 8009454:	49000234 	orhi	r4,r9,8
 8009458:	18ffffc4 	addi	r3,r3,-1
 800945c:	20c8703a 	and	r4,r4,r3
 8009460:	0401ffc4 	movi	r16,2047
 8009464:	003f6706 	br	8009204 <__adddf3+0x198>
 8009468:	017fe034 	movhi	r5,65408
 800946c:	297fffc4 	addi	r5,r5,-1
 8009470:	988001cc 	andi	r2,r19,7
 8009474:	80e1c83a 	sub	r16,r16,r3
 8009478:	2148703a 	and	r4,r4,r5
 800947c:	103f4c1e 	bne	r2,zero,80091b0 <__adddf3+0x144>
 8009480:	003fb606 	br	800935c <__adddf3+0x2f0>
 8009484:	9809883a 	mov	r4,r19
 8009488:	800b9540 	call	800b954 <__clzsi2>
 800948c:	10c00604 	addi	r3,r2,24
 8009490:	19000808 	cmpgei	r4,r3,32
 8009494:	203f2f26 	beq	r4,zero,8009154 <__adddf3+0xe8>
 8009498:	113ffe04 	addi	r4,r2,-8
 800949c:	9908983a 	sll	r4,r19,r4
 80094a0:	0027883a 	mov	r19,zero
 80094a4:	003f3106 	br	800916c <__adddf3+0x100>
 80094a8:	1ac8b03a 	or	r4,r3,r11
 80094ac:	2026c03a 	cmpne	r19,r4,zero
 80094b0:	003f1c06 	br	8009124 <__adddf3+0xb8>
 80094b4:	4826977a 	slli	r19,r9,29
 80094b8:	00c80034 	movhi	r3,8192
 80094bc:	18ffffc4 	addi	r3,r3,-1
 80094c0:	20c4703a 	and	r2,r4,r3
 80094c4:	14c4b03a 	or	r2,r2,r19
 80094c8:	4812d0fa 	srli	r9,r9,3
 80094cc:	5021883a 	mov	r16,r10
 80094d0:	003fa606 	br	800936c <__adddf3+0x300>
 80094d4:	62e7c83a 	sub	r19,r12,r11
 80094d8:	48e5c83a 	sub	r18,r9,r3
 80094dc:	64c9803a 	cmpltu	r4,r12,r19
 80094e0:	9125c83a 	sub	r18,r18,r4
 80094e4:	9080202c 	andhi	r2,r18,128
 80094e8:	1000b21e 	bne	r2,zero,80097b4 <__adddf3+0x748>
 80094ec:	9c84b03a 	or	r2,r19,r18
 80094f0:	103f141e 	bne	r2,zero,8009144 <__adddf3+0xd8>
 80094f4:	0013883a 	mov	r9,zero
 80094f8:	0021883a 	mov	r16,zero
 80094fc:	0023883a 	mov	r17,zero
 8009500:	003f9c06 	br	8009374 <__adddf3+0x308>
 8009504:	4826977a 	slli	r19,r9,29
 8009508:	00c80034 	movhi	r3,8192
 800950c:	18ffffc4 	addi	r3,r3,-1
 8009510:	20c4703a 	and	r2,r4,r3
 8009514:	14c4b03a 	or	r2,r2,r19
 8009518:	4812d0fa 	srli	r9,r9,3
 800951c:	003fca06 	br	8009448 <__adddf3+0x3dc>
 8009520:	1409c83a 	sub	r4,r2,r16
 8009524:	80005e1e 	bne	r16,zero,80096a0 <__adddf3+0x634>
 8009528:	4b0ab03a 	or	r5,r9,r12
 800952c:	28011326 	beq	r5,zero,800997c <__adddf3+0x910>
 8009530:	217fffc4 	addi	r5,r4,-1
 8009534:	28012c26 	beq	r5,zero,80099e8 <__adddf3+0x97c>
 8009538:	2101ffd8 	cmpnei	r4,r4,2047
 800953c:	2000a926 	beq	r4,zero,80097e4 <__adddf3+0x778>
 8009540:	2809883a 	mov	r4,r5
 8009544:	21400e48 	cmpgei	r5,r4,57
 8009548:	2800b91e 	bne	r5,zero,8009830 <__adddf3+0x7c4>
 800954c:	21400808 	cmpgei	r5,r4,32
 8009550:	28011a1e 	bne	r5,zero,80099bc <__adddf3+0x950>
 8009554:	01400804 	movi	r5,32
 8009558:	290bc83a 	sub	r5,r5,r4
 800955c:	4966983a 	sll	r19,r9,r5
 8009560:	610cd83a 	srl	r6,r12,r4
 8009564:	614a983a 	sll	r5,r12,r5
 8009568:	4912d83a 	srl	r9,r9,r4
 800956c:	99a6b03a 	or	r19,r19,r6
 8009570:	280ac03a 	cmpne	r5,r5,zero
 8009574:	9966b03a 	or	r19,r19,r5
 8009578:	1a47883a 	add	r3,r3,r9
 800957c:	9ae7883a 	add	r19,r19,r11
 8009580:	9ac9803a 	cmpltu	r4,r19,r11
 8009584:	20c9883a 	add	r4,r4,r3
 8009588:	1021883a 	mov	r16,r2
 800958c:	003f8306 	br	800939c <__adddf3+0x330>
 8009590:	1141ffd8 	cmpnei	r5,r2,2047
 8009594:	28006326 	beq	r5,zero,8009724 <__adddf3+0x6b8>
 8009598:	4a402034 	orhi	r9,r9,128
 800959c:	21400e48 	cmpgei	r5,r4,57
 80095a0:	28006e1e 	bne	r5,zero,800975c <__adddf3+0x6f0>
 80095a4:	21400808 	cmpgei	r5,r4,32
 80095a8:	2800ab1e 	bne	r5,zero,8009858 <__adddf3+0x7ec>
 80095ac:	01400804 	movi	r5,32
 80095b0:	290bc83a 	sub	r5,r5,r4
 80095b4:	4966983a 	sll	r19,r9,r5
 80095b8:	610cd83a 	srl	r6,r12,r4
 80095bc:	614a983a 	sll	r5,r12,r5
 80095c0:	4912d83a 	srl	r9,r9,r4
 80095c4:	99a6b03a 	or	r19,r19,r6
 80095c8:	280ac03a 	cmpne	r5,r5,zero
 80095cc:	9966b03a 	or	r19,r19,r5
 80095d0:	1a47c83a 	sub	r3,r3,r9
 80095d4:	5ce7c83a 	sub	r19,r11,r19
 80095d8:	5cc9803a 	cmpltu	r4,r11,r19
 80095dc:	1909c83a 	sub	r4,r3,r4
 80095e0:	3823883a 	mov	r17,r7
 80095e4:	1021883a 	mov	r16,r2
 80095e8:	003ed106 	br	8009130 <__adddf3+0xc4>
 80095ec:	843ff844 	addi	r16,r16,-31
 80095f0:	28800820 	cmpeqi	r2,r5,32
 80095f4:	2420d83a 	srl	r16,r4,r16
 80095f8:	1000041e 	bne	r2,zero,800960c <__adddf3+0x5a0>
 80095fc:	00801004 	movi	r2,64
 8009600:	114bc83a 	sub	r5,r2,r5
 8009604:	2148983a 	sll	r4,r4,r5
 8009608:	9926b03a 	or	r19,r19,r4
 800960c:	9826c03a 	cmpne	r19,r19,zero
 8009610:	9c26b03a 	or	r19,r19,r16
 8009614:	0009883a 	mov	r4,zero
 8009618:	0021883a 	mov	r16,zero
 800961c:	003f4d06 	br	8009354 <__adddf3+0x2e8>
 8009620:	04000084 	movi	r16,2
 8009624:	00bfe034 	movhi	r2,65408
 8009628:	10bfffc4 	addi	r2,r2,-1
 800962c:	208a703a 	and	r5,r4,r2
 8009630:	9804d07a 	srli	r2,r19,1
 8009634:	280697fa 	slli	r3,r5,31
 8009638:	9cc0004c 	andi	r19,r19,1
 800963c:	14e6b03a 	or	r19,r2,r19
 8009640:	2808d07a 	srli	r4,r5,1
 8009644:	1ce6b03a 	or	r19,r3,r19
 8009648:	003ed706 	br	80091a8 <__adddf3+0x13c>
 800964c:	54fff804 	addi	r19,r10,-32
 8009650:	50800820 	cmpeqi	r2,r10,32
 8009654:	1ce6d83a 	srl	r19,r3,r19
 8009658:	1000041e 	bne	r2,zero,800966c <__adddf3+0x600>
 800965c:	00801004 	movi	r2,64
 8009660:	1295c83a 	sub	r10,r2,r10
 8009664:	1a86983a 	sll	r3,r3,r10
 8009668:	58d6b03a 	or	r11,r11,r3
 800966c:	5808c03a 	cmpne	r4,r11,zero
 8009670:	24e6b03a 	or	r19,r4,r19
 8009674:	003eab06 	br	8009124 <__adddf3+0xb8>
 8009678:	1000a926 	beq	r2,zero,8009920 <__adddf3+0x8b4>
 800967c:	1ac4b03a 	or	r2,r3,r11
 8009680:	1000ae1e 	bne	r2,zero,800993c <__adddf3+0x8d0>
 8009684:	4806977a 	slli	r3,r9,29
 8009688:	00880034 	movhi	r2,8192
 800968c:	10bfffc4 	addi	r2,r2,-1
 8009690:	2084703a 	and	r2,r4,r2
 8009694:	10c4b03a 	or	r2,r2,r3
 8009698:	4812d0fa 	srli	r9,r9,3
 800969c:	003f3506 	br	8009374 <__adddf3+0x308>
 80096a0:	1141ffd8 	cmpnei	r5,r2,2047
 80096a4:	28004f26 	beq	r5,zero,80097e4 <__adddf3+0x778>
 80096a8:	4a402034 	orhi	r9,r9,128
 80096ac:	003fa506 	br	8009544 <__adddf3+0x4d8>
 80096b0:	01000804 	movi	r4,32
 80096b4:	2289c83a 	sub	r4,r4,r10
 80096b8:	1926983a 	sll	r19,r3,r4
 80096bc:	5a84d83a 	srl	r2,r11,r10
 80096c0:	5908983a 	sll	r4,r11,r4
 80096c4:	1a86d83a 	srl	r3,r3,r10
 80096c8:	98a6b03a 	or	r19,r19,r2
 80096cc:	2016c03a 	cmpne	r11,r4,zero
 80096d0:	9ae6b03a 	or	r19,r19,r11
 80096d4:	48d3883a 	add	r9,r9,r3
 80096d8:	003f2d06 	br	8009390 <__adddf3+0x324>
 80096dc:	01480034 	movhi	r5,8192
 80096e0:	1826977a 	slli	r19,r3,29
 80096e4:	297fffc4 	addi	r5,r5,-1
 80096e8:	3144703a 	and	r2,r6,r5
 80096ec:	14c4b03a 	or	r2,r2,r19
 80096f0:	1812d0fa 	srli	r9,r3,3
 80096f4:	3823883a 	mov	r17,r7
 80096f8:	2021883a 	mov	r16,r4
 80096fc:	003f1b06 	br	800936c <__adddf3+0x300>
 8009700:	10007d26 	beq	r2,zero,80098f8 <__adddf3+0x88c>
 8009704:	00880034 	movhi	r2,8192
 8009708:	1808977a 	slli	r4,r3,29
 800970c:	10bfffc4 	addi	r2,r2,-1
 8009710:	3084703a 	and	r2,r6,r2
 8009714:	1104b03a 	or	r2,r2,r4
 8009718:	1812d0fa 	srli	r9,r3,3
 800971c:	3823883a 	mov	r17,r7
 8009720:	003f1406 	br	8009374 <__adddf3+0x308>
 8009724:	180a977a 	slli	r5,r3,29
 8009728:	01080034 	movhi	r4,8192
 800972c:	213fffc4 	addi	r4,r4,-1
 8009730:	3104703a 	and	r2,r6,r4
 8009734:	2884b03a 	or	r2,r5,r2
 8009738:	1812d0fa 	srli	r9,r3,3
 800973c:	3823883a 	mov	r17,r7
 8009740:	003f4106 	br	8009448 <__adddf3+0x3dc>
 8009744:	62e7c83a 	sub	r19,r12,r11
 8009748:	48d3c83a 	sub	r9,r9,r3
 800974c:	64c9803a 	cmpltu	r4,r12,r19
 8009750:	4909c83a 	sub	r4,r9,r4
 8009754:	04000044 	movi	r16,1
 8009758:	003e7506 	br	8009130 <__adddf3+0xc4>
 800975c:	4b12b03a 	or	r9,r9,r12
 8009760:	4826c03a 	cmpne	r19,r9,zero
 8009764:	003f9b06 	br	80095d4 <__adddf3+0x568>
 8009768:	4826977a 	slli	r19,r9,29
 800976c:	00c80034 	movhi	r3,8192
 8009770:	18ffffc4 	addi	r3,r3,-1
 8009774:	20c4703a 	and	r2,r4,r3
 8009778:	9884b03a 	or	r2,r19,r2
 800977c:	4812d0fa 	srli	r9,r9,3
 8009780:	003f3106 	br	8009448 <__adddf3+0x3dc>
 8009784:	1101ffe0 	cmpeqi	r4,r2,2047
 8009788:	203f091e 	bne	r4,zero,80093b0 <__adddf3+0x344>
 800978c:	62d7883a 	add	r11,r12,r11
 8009790:	5b09803a 	cmpltu	r4,r11,r12
 8009794:	48d3883a 	add	r9,r9,r3
 8009798:	490b883a 	add	r5,r9,r4
 800979c:	282697fa 	slli	r19,r5,31
 80097a0:	5816d07a 	srli	r11,r11,1
 80097a4:	2808d07a 	srli	r4,r5,1
 80097a8:	1021883a 	mov	r16,r2
 80097ac:	9ae6b03a 	or	r19,r19,r11
 80097b0:	003ee806 	br	8009354 <__adddf3+0x2e8>
 80097b4:	5b27c83a 	sub	r19,r11,r12
 80097b8:	1a53c83a 	sub	r9,r3,r9
 80097bc:	5cc9803a 	cmpltu	r4,r11,r19
 80097c0:	4925c83a 	sub	r18,r9,r4
 80097c4:	3823883a 	mov	r17,r7
 80097c8:	003e5e06 	br	8009144 <__adddf3+0xd8>
 80097cc:	28002d1e 	bne	r5,zero,8009884 <__adddf3+0x818>
 80097d0:	103fd41e 	bne	r2,zero,8009724 <__adddf3+0x6b8>
 80097d4:	00bfffc4 	movi	r2,-1
 80097d8:	0023883a 	mov	r17,zero
 80097dc:	4013883a 	mov	r9,r8
 80097e0:	003f1b06 	br	8009450 <__adddf3+0x3e4>
 80097e4:	00880034 	movhi	r2,8192
 80097e8:	1808977a 	slli	r4,r3,29
 80097ec:	10bfffc4 	addi	r2,r2,-1
 80097f0:	3084703a 	and	r2,r6,r2
 80097f4:	1104b03a 	or	r2,r2,r4
 80097f8:	1812d0fa 	srli	r9,r3,3
 80097fc:	003f1206 	br	8009448 <__adddf3+0x3dc>
 8009800:	62e7c83a 	sub	r19,r12,r11
 8009804:	48cbc83a 	sub	r5,r9,r3
 8009808:	64c9803a 	cmpltu	r4,r12,r19
 800980c:	2909c83a 	sub	r4,r5,r4
 8009810:	2080202c 	andhi	r2,r4,128
 8009814:	10003626 	beq	r2,zero,80098f0 <__adddf3+0x884>
 8009818:	5b27c83a 	sub	r19,r11,r12
 800981c:	1a53c83a 	sub	r9,r3,r9
 8009820:	5cc9803a 	cmpltu	r4,r11,r19
 8009824:	4909c83a 	sub	r4,r9,r4
 8009828:	3823883a 	mov	r17,r7
 800982c:	003e5e06 	br	80091a8 <__adddf3+0x13c>
 8009830:	4b12b03a 	or	r9,r9,r12
 8009834:	4826c03a 	cmpne	r19,r9,zero
 8009838:	003f5006 	br	800957c <__adddf3+0x510>
 800983c:	4806977a 	slli	r3,r9,29
 8009840:	00880034 	movhi	r2,8192
 8009844:	10bfffc4 	addi	r2,r2,-1
 8009848:	2084703a 	and	r2,r4,r2
 800984c:	10c4b03a 	or	r2,r2,r3
 8009850:	4812d0fa 	srli	r9,r9,3
 8009854:	003efc06 	br	8009448 <__adddf3+0x3dc>
 8009858:	217ff804 	addi	r5,r4,-32
 800985c:	21800820 	cmpeqi	r6,r4,32
 8009860:	494ad83a 	srl	r5,r9,r5
 8009864:	3000041e 	bne	r6,zero,8009878 <__adddf3+0x80c>
 8009868:	01801004 	movi	r6,64
 800986c:	3109c83a 	sub	r4,r6,r4
 8009870:	4912983a 	sll	r9,r9,r4
 8009874:	6258b03a 	or	r12,r12,r9
 8009878:	6026c03a 	cmpne	r19,r12,zero
 800987c:	9966b03a 	or	r19,r19,r5
 8009880:	003f5406 	br	80095d4 <__adddf3+0x568>
 8009884:	480a977a 	slli	r5,r9,29
 8009888:	4812d0fa 	srli	r9,r9,3
 800988c:	10003626 	beq	r2,zero,8009968 <__adddf3+0x8fc>
 8009890:	02080034 	movhi	r8,8192
 8009894:	423fffc4 	addi	r8,r8,-1
 8009898:	2204703a 	and	r2,r4,r8
 800989c:	4900022c 	andhi	r4,r9,8
 80098a0:	114ab03a 	or	r5,r2,r5
 80098a4:	20000826 	beq	r4,zero,80098c8 <__adddf3+0x85c>
 80098a8:	1808d0fa 	srli	r4,r3,3
 80098ac:	2080022c 	andhi	r2,r4,8
 80098b0:	1000051e 	bne	r2,zero,80098c8 <__adddf3+0x85c>
 80098b4:	1806977a 	slli	r3,r3,29
 80098b8:	3204703a 	and	r2,r6,r8
 80098bc:	3823883a 	mov	r17,r7
 80098c0:	10cab03a 	or	r5,r2,r3
 80098c4:	2013883a 	mov	r9,r4
 80098c8:	480890fa 	slli	r4,r9,3
 80098cc:	2804d77a 	srli	r2,r5,29
 80098d0:	00c80034 	movhi	r3,8192
 80098d4:	18ffffc4 	addi	r3,r3,-1
 80098d8:	1108b03a 	or	r4,r2,r4
 80098dc:	200c977a 	slli	r6,r4,29
 80098e0:	28c4703a 	and	r2,r5,r3
 80098e4:	2012d0fa 	srli	r9,r4,3
 80098e8:	3084b03a 	or	r2,r6,r2
 80098ec:	003ed606 	br	8009448 <__adddf3+0x3dc>
 80098f0:	9904b03a 	or	r2,r19,r4
 80098f4:	103e971e 	bne	r2,zero,8009354 <__adddf3+0x2e8>
 80098f8:	0013883a 	mov	r9,zero
 80098fc:	0023883a 	mov	r17,zero
 8009900:	003e9c06 	br	8009374 <__adddf3+0x308>
 8009904:	5b27c83a 	sub	r19,r11,r12
 8009908:	1a53c83a 	sub	r9,r3,r9
 800990c:	5cc9803a 	cmpltu	r4,r11,r19
 8009910:	4909c83a 	sub	r4,r9,r4
 8009914:	3823883a 	mov	r17,r7
 8009918:	04000044 	movi	r16,1
 800991c:	003e0406 	br	8009130 <__adddf3+0xc4>
 8009920:	180a977a 	slli	r5,r3,29
 8009924:	01080034 	movhi	r4,8192
 8009928:	213fffc4 	addi	r4,r4,-1
 800992c:	3104703a 	and	r2,r6,r4
 8009930:	2884b03a 	or	r2,r5,r2
 8009934:	1812d0fa 	srli	r9,r3,3
 8009938:	003e8e06 	br	8009374 <__adddf3+0x308>
 800993c:	62e7883a 	add	r19,r12,r11
 8009940:	48d3883a 	add	r9,r9,r3
 8009944:	9b09803a 	cmpltu	r4,r19,r12
 8009948:	4909883a 	add	r4,r9,r4
 800994c:	2080202c 	andhi	r2,r4,128
 8009950:	103e8026 	beq	r2,zero,8009354 <__adddf3+0x2e8>
 8009954:	00bfe034 	movhi	r2,65408
 8009958:	10bfffc4 	addi	r2,r2,-1
 800995c:	2088703a 	and	r4,r4,r2
 8009960:	04000044 	movi	r16,1
 8009964:	003e7b06 	br	8009354 <__adddf3+0x2e8>
 8009968:	00880034 	movhi	r2,8192
 800996c:	10bfffc4 	addi	r2,r2,-1
 8009970:	2084703a 	and	r2,r4,r2
 8009974:	1144b03a 	or	r2,r2,r5
 8009978:	003eb306 	br	8009448 <__adddf3+0x3dc>
 800997c:	180e977a 	slli	r7,r3,29
 8009980:	01480034 	movhi	r5,8192
 8009984:	297fffc4 	addi	r5,r5,-1
 8009988:	3144703a 	and	r2,r6,r5
 800998c:	3884b03a 	or	r2,r7,r2
 8009990:	1812d0fa 	srli	r9,r3,3
 8009994:	2021883a 	mov	r16,r4
 8009998:	003e7406 	br	800936c <__adddf3+0x300>
 800999c:	00880034 	movhi	r2,8192
 80099a0:	1808977a 	slli	r4,r3,29
 80099a4:	10bfffc4 	addi	r2,r2,-1
 80099a8:	3084703a 	and	r2,r6,r2
 80099ac:	1104b03a 	or	r2,r2,r4
 80099b0:	1812d0fa 	srli	r9,r3,3
 80099b4:	3823883a 	mov	r17,r7
 80099b8:	003ea306 	br	8009448 <__adddf3+0x3dc>
 80099bc:	217ff804 	addi	r5,r4,-32
 80099c0:	21800820 	cmpeqi	r6,r4,32
 80099c4:	494ad83a 	srl	r5,r9,r5
 80099c8:	3000041e 	bne	r6,zero,80099dc <__adddf3+0x970>
 80099cc:	01801004 	movi	r6,64
 80099d0:	3109c83a 	sub	r4,r6,r4
 80099d4:	4912983a 	sll	r9,r9,r4
 80099d8:	6258b03a 	or	r12,r12,r9
 80099dc:	6026c03a 	cmpne	r19,r12,zero
 80099e0:	9966b03a 	or	r19,r19,r5
 80099e4:	003ee506 	br	800957c <__adddf3+0x510>
 80099e8:	62e7883a 	add	r19,r12,r11
 80099ec:	48d3883a 	add	r9,r9,r3
 80099f0:	9ac9803a 	cmpltu	r4,r19,r11
 80099f4:	4909883a 	add	r4,r9,r4
 80099f8:	003e5306 	br	8009348 <__adddf3+0x2dc>
 80099fc:	0005883a 	mov	r2,zero
 8009a00:	0401ffc4 	movi	r16,2047
 8009a04:	0009883a 	mov	r4,zero
 8009a08:	003dfe06 	br	8009204 <__adddf3+0x198>

08009a0c <__divdf3>:
 8009a0c:	deffef04 	addi	sp,sp,-68
 8009a10:	2804d53a 	srli	r2,r5,20
 8009a14:	dd000b15 	stw	r20,44(sp)
 8009a18:	2828d7fa 	srli	r20,r5,31
 8009a1c:	dc400815 	stw	r17,32(sp)
 8009a20:	04400434 	movhi	r17,16
 8009a24:	dd800d15 	stw	r22,52(sp)
 8009a28:	dcc00a15 	stw	r19,40(sp)
 8009a2c:	8c7fffc4 	addi	r17,r17,-1
 8009a30:	dfc01015 	stw	ra,64(sp)
 8009a34:	df000f15 	stw	fp,60(sp)
 8009a38:	ddc00e15 	stw	r23,56(sp)
 8009a3c:	dd400c15 	stw	r21,48(sp)
 8009a40:	dc800915 	stw	r18,36(sp)
 8009a44:	dc000715 	stw	r16,28(sp)
 8009a48:	1081ffcc 	andi	r2,r2,2047
 8009a4c:	2027883a 	mov	r19,r4
 8009a50:	2c62703a 	and	r17,r5,r17
 8009a54:	a02d883a 	mov	r22,r20
 8009a58:	10008726 	beq	r2,zero,8009c78 <__divdf3+0x26c>
 8009a5c:	10c1ffe0 	cmpeqi	r3,r2,2047
 8009a60:	18009d1e 	bne	r3,zero,8009cd8 <__divdf3+0x2cc>
 8009a64:	880a90fa 	slli	r5,r17,3
 8009a68:	2008d77a 	srli	r4,r4,29
 8009a6c:	982690fa 	slli	r19,r19,3
 8009a70:	14bf0044 	addi	r18,r2,-1023
 8009a74:	2148b03a 	or	r4,r4,r5
 8009a78:	24002034 	orhi	r16,r4,128
 8009a7c:	0023883a 	mov	r17,zero
 8009a80:	002f883a 	mov	r23,zero
 8009a84:	3806d53a 	srli	r3,r7,20
 8009a88:	01000434 	movhi	r4,16
 8009a8c:	213fffc4 	addi	r4,r4,-1
 8009a90:	18c1ffcc 	andi	r3,r3,2047
 8009a94:	392a703a 	and	r21,r7,r4
 8009a98:	3838d7fa 	srli	fp,r7,31
 8009a9c:	18006326 	beq	r3,zero,8009c2c <__divdf3+0x220>
 8009aa0:	1881ffe0 	cmpeqi	r2,r3,2047
 8009aa4:	1000201e 	bne	r2,zero,8009b28 <__divdf3+0x11c>
 8009aa8:	a80890fa 	slli	r4,r21,3
 8009aac:	300ed77a 	srli	r7,r6,29
 8009ab0:	300a90fa 	slli	r5,r6,3
 8009ab4:	18ff0044 	addi	r3,r3,-1023
 8009ab8:	3908b03a 	or	r4,r7,r4
 8009abc:	90e5c83a 	sub	r18,r18,r3
 8009ac0:	25402034 	orhi	r21,r4,128
 8009ac4:	0007883a 	mov	r3,zero
 8009ac8:	88800428 	cmpgeui	r2,r17,16
 8009acc:	a70cf03a 	xor	r6,r20,fp
 8009ad0:	1000ab1e 	bne	r2,zero,8009d80 <__divdf3+0x374>
 8009ad4:	882290ba 	slli	r17,r17,2
 8009ad8:	00820074 	movhi	r2,2049
 8009adc:	8885883a 	add	r2,r17,r2
 8009ae0:	10a6ba17 	ldw	r2,-25880(r2)
 8009ae4:	1000683a 	jmp	r2
 8009ae8:	08009d80 	call	8009d8 <__alt_mem_onchip_memory2_0+0x8009d8>
 8009aec:	08009c1c 	xori	zero,at,624
 8009af0:	08009bc0 	call	8009bc <__alt_mem_onchip_memory2_0+0x8009bc>
 8009af4:	08009b44 	addi	zero,at,621
 8009af8:	08009bc0 	call	8009bc <__alt_mem_onchip_memory2_0+0x8009bc>
 8009afc:	08009d3c 	xorhi	zero,at,628
 8009b00:	08009bc0 	call	8009bc <__alt_mem_onchip_memory2_0+0x8009bc>
 8009b04:	08009b44 	addi	zero,at,621
 8009b08:	08009c1c 	xori	zero,at,624
 8009b0c:	08009c1c 	xori	zero,at,624
 8009b10:	08009d3c 	xorhi	zero,at,628
 8009b14:	08009b44 	addi	zero,at,621
 8009b18:	08009b54 	ori	zero,at,621
 8009b1c:	08009b54 	ori	zero,at,621
 8009b20:	08009b54 	ori	zero,at,621
 8009b24:	08009d54 	ori	zero,at,629
 8009b28:	a98ab03a 	or	r5,r21,r6
 8009b2c:	94be0044 	addi	r18,r18,-2047
 8009b30:	28007e1e 	bne	r5,zero,8009d2c <__divdf3+0x320>
 8009b34:	8c400094 	ori	r17,r17,2
 8009b38:	002b883a 	mov	r21,zero
 8009b3c:	00c00084 	movi	r3,2
 8009b40:	003fe106 	br	8009ac8 <__divdf3+0xbc>
 8009b44:	e02d883a 	mov	r22,fp
 8009b48:	a821883a 	mov	r16,r21
 8009b4c:	2827883a 	mov	r19,r5
 8009b50:	182f883a 	mov	r23,r3
 8009b54:	b88000a0 	cmpeqi	r2,r23,2
 8009b58:	1001ab1e 	bne	r2,zero,800a208 <__divdf3+0x7fc>
 8009b5c:	b88000e0 	cmpeqi	r2,r23,3
 8009b60:	1001f91e 	bne	r2,zero,800a348 <__divdf3+0x93c>
 8009b64:	b8800060 	cmpeqi	r2,r23,1
 8009b68:	1000141e 	bne	r2,zero,8009bbc <__divdf3+0x1b0>
 8009b6c:	9500ffc4 	addi	r20,r18,1023
 8009b70:	b00d883a 	mov	r6,r22
 8009b74:	0501870e 	bge	zero,r20,800a194 <__divdf3+0x788>
 8009b78:	988001cc 	andi	r2,r19,7
 8009b7c:	1001c11e 	bne	r2,zero,800a284 <__divdf3+0x878>
 8009b80:	9826d0fa 	srli	r19,r19,3
 8009b84:	8080402c 	andhi	r2,r16,256
 8009b88:	10000426 	beq	r2,zero,8009b9c <__divdf3+0x190>
 8009b8c:	00bfc034 	movhi	r2,65280
 8009b90:	10bfffc4 	addi	r2,r2,-1
 8009b94:	80a0703a 	and	r16,r16,r2
 8009b98:	95010004 	addi	r20,r18,1024
 8009b9c:	a081ffc8 	cmpgei	r2,r20,2047
 8009ba0:	10001e1e 	bne	r2,zero,8009c1c <__divdf3+0x210>
 8009ba4:	8006977a 	slli	r3,r16,29
 8009ba8:	8008927a 	slli	r4,r16,9
 8009bac:	a081ffcc 	andi	r2,r20,2047
 8009bb0:	1ce6b03a 	or	r19,r3,r19
 8009bb4:	2008d33a 	srli	r4,r4,12
 8009bb8:	00000406 	br	8009bcc <__divdf3+0x1c0>
 8009bbc:	b00d883a 	mov	r6,r22
 8009bc0:	0005883a 	mov	r2,zero
 8009bc4:	0009883a 	mov	r4,zero
 8009bc8:	0027883a 	mov	r19,zero
 8009bcc:	1004953a 	slli	r2,r2,20
 8009bd0:	00c00434 	movhi	r3,16
 8009bd4:	300c97fa 	slli	r6,r6,31
 8009bd8:	18ffffc4 	addi	r3,r3,-1
 8009bdc:	20c6703a 	and	r3,r4,r3
 8009be0:	1886b03a 	or	r3,r3,r2
 8009be4:	1986b03a 	or	r3,r3,r6
 8009be8:	9805883a 	mov	r2,r19
 8009bec:	dfc01017 	ldw	ra,64(sp)
 8009bf0:	df000f17 	ldw	fp,60(sp)
 8009bf4:	ddc00e17 	ldw	r23,56(sp)
 8009bf8:	dd800d17 	ldw	r22,52(sp)
 8009bfc:	dd400c17 	ldw	r21,48(sp)
 8009c00:	dd000b17 	ldw	r20,44(sp)
 8009c04:	dcc00a17 	ldw	r19,40(sp)
 8009c08:	dc800917 	ldw	r18,36(sp)
 8009c0c:	dc400817 	ldw	r17,32(sp)
 8009c10:	dc000717 	ldw	r16,28(sp)
 8009c14:	dec01104 	addi	sp,sp,68
 8009c18:	f800283a 	ret
 8009c1c:	0081ffc4 	movi	r2,2047
 8009c20:	0009883a 	mov	r4,zero
 8009c24:	0027883a 	mov	r19,zero
 8009c28:	003fe806 	br	8009bcc <__divdf3+0x1c0>
 8009c2c:	a98ab03a 	or	r5,r21,r6
 8009c30:	28003a26 	beq	r5,zero,8009d1c <__divdf3+0x310>
 8009c34:	a8014926 	beq	r21,zero,800a15c <__divdf3+0x750>
 8009c38:	a809883a 	mov	r4,r21
 8009c3c:	d9800015 	stw	r6,0(sp)
 8009c40:	800b9540 	call	800b954 <__clzsi2>
 8009c44:	d9800017 	ldw	r6,0(sp)
 8009c48:	11fffd44 	addi	r7,r2,-11
 8009c4c:	00c00744 	movi	r3,29
 8009c50:	117ffe04 	addi	r5,r2,-8
 8009c54:	19c7c83a 	sub	r3,r3,r7
 8009c58:	a948983a 	sll	r4,r21,r5
 8009c5c:	30c6d83a 	srl	r3,r6,r3
 8009c60:	314a983a 	sll	r5,r6,r5
 8009c64:	192ab03a 	or	r21,r3,r4
 8009c68:	1485883a 	add	r2,r2,r18
 8009c6c:	1480fcc4 	addi	r18,r2,1011
 8009c70:	0007883a 	mov	r3,zero
 8009c74:	003f9406 	br	8009ac8 <__divdf3+0xbc>
 8009c78:	2460b03a 	or	r16,r4,r17
 8009c7c:	202b883a 	mov	r21,r4
 8009c80:	80002126 	beq	r16,zero,8009d08 <__divdf3+0x2fc>
 8009c84:	d9c00115 	stw	r7,4(sp)
 8009c88:	d9800015 	stw	r6,0(sp)
 8009c8c:	88012826 	beq	r17,zero,800a130 <__divdf3+0x724>
 8009c90:	8809883a 	mov	r4,r17
 8009c94:	800b9540 	call	800b954 <__clzsi2>
 8009c98:	d9800017 	ldw	r6,0(sp)
 8009c9c:	d9c00117 	ldw	r7,4(sp)
 8009ca0:	1025883a 	mov	r18,r2
 8009ca4:	143ffd44 	addi	r16,r2,-11
 8009ca8:	01000744 	movi	r4,29
 8009cac:	94fffe04 	addi	r19,r18,-8
 8009cb0:	2409c83a 	sub	r4,r4,r16
 8009cb4:	8cca983a 	sll	r5,r17,r19
 8009cb8:	a908d83a 	srl	r4,r21,r4
 8009cbc:	ace6983a 	sll	r19,r21,r19
 8009cc0:	2160b03a 	or	r16,r4,r5
 8009cc4:	00bf0344 	movi	r2,-1011
 8009cc8:	14a5c83a 	sub	r18,r2,r18
 8009ccc:	0023883a 	mov	r17,zero
 8009cd0:	002f883a 	mov	r23,zero
 8009cd4:	003f6b06 	br	8009a84 <__divdf3+0x78>
 8009cd8:	2460b03a 	or	r16,r4,r17
 8009cdc:	8000051e 	bne	r16,zero,8009cf4 <__divdf3+0x2e8>
 8009ce0:	0027883a 	mov	r19,zero
 8009ce4:	04400204 	movi	r17,8
 8009ce8:	0481ffc4 	movi	r18,2047
 8009cec:	05c00084 	movi	r23,2
 8009cf0:	003f6406 	br	8009a84 <__divdf3+0x78>
 8009cf4:	8821883a 	mov	r16,r17
 8009cf8:	0481ffc4 	movi	r18,2047
 8009cfc:	04400304 	movi	r17,12
 8009d00:	05c000c4 	movi	r23,3
 8009d04:	003f5f06 	br	8009a84 <__divdf3+0x78>
 8009d08:	0027883a 	mov	r19,zero
 8009d0c:	04400104 	movi	r17,4
 8009d10:	0025883a 	mov	r18,zero
 8009d14:	05c00044 	movi	r23,1
 8009d18:	003f5a06 	br	8009a84 <__divdf3+0x78>
 8009d1c:	8c400054 	ori	r17,r17,1
 8009d20:	002b883a 	mov	r21,zero
 8009d24:	00c00044 	movi	r3,1
 8009d28:	003f6706 	br	8009ac8 <__divdf3+0xbc>
 8009d2c:	8c4000d4 	ori	r17,r17,3
 8009d30:	300b883a 	mov	r5,r6
 8009d34:	00c000c4 	movi	r3,3
 8009d38:	003f6306 	br	8009ac8 <__divdf3+0xbc>
 8009d3c:	01000434 	movhi	r4,16
 8009d40:	000d883a 	mov	r6,zero
 8009d44:	213fffc4 	addi	r4,r4,-1
 8009d48:	04ffffc4 	movi	r19,-1
 8009d4c:	0081ffc4 	movi	r2,2047
 8009d50:	003f9e06 	br	8009bcc <__divdf3+0x1c0>
 8009d54:	8080022c 	andhi	r2,r16,8
 8009d58:	1000d426 	beq	r2,zero,800a0ac <__divdf3+0x6a0>
 8009d5c:	a880022c 	andhi	r2,r21,8
 8009d60:	1000d21e 	bne	r2,zero,800a0ac <__divdf3+0x6a0>
 8009d64:	00800434 	movhi	r2,16
 8009d68:	a9000234 	orhi	r4,r21,8
 8009d6c:	10bfffc4 	addi	r2,r2,-1
 8009d70:	2088703a 	and	r4,r4,r2
 8009d74:	e00d883a 	mov	r6,fp
 8009d78:	2827883a 	mov	r19,r5
 8009d7c:	003ff306 	br	8009d4c <__divdf3+0x340>
 8009d80:	ac00e536 	bltu	r21,r16,800a118 <__divdf3+0x70c>
 8009d84:	ac00e326 	beq	r21,r16,800a114 <__divdf3+0x708>
 8009d88:	94bfffc4 	addi	r18,r18,-1
 8009d8c:	0029883a 	mov	r20,zero
 8009d90:	280ed63a 	srli	r7,r5,24
 8009d94:	a82a923a 	slli	r21,r21,8
 8009d98:	2804923a 	slli	r2,r5,8
 8009d9c:	8009883a 	mov	r4,r16
 8009da0:	3d62b03a 	or	r17,r7,r21
 8009da4:	882ad43a 	srli	r21,r17,16
 8009da8:	d9800115 	stw	r6,4(sp)
 8009dac:	d8800015 	stw	r2,0(sp)
 8009db0:	a80b883a 	mov	r5,r21
 8009db4:	8000a740 	call	8000a74 <__udivsi3>
 8009db8:	8f3fffcc 	andi	fp,r17,65535
 8009dbc:	100b883a 	mov	r5,r2
 8009dc0:	e009883a 	mov	r4,fp
 8009dc4:	102f883a 	mov	r23,r2
 8009dc8:	8000b340 	call	8000b34 <__mulsi3>
 8009dcc:	a80b883a 	mov	r5,r21
 8009dd0:	8009883a 	mov	r4,r16
 8009dd4:	102d883a 	mov	r22,r2
 8009dd8:	8000ad80 	call	8000ad8 <__umodsi3>
 8009ddc:	1006943a 	slli	r3,r2,16
 8009de0:	9804d43a 	srli	r2,r19,16
 8009de4:	d9800117 	ldw	r6,4(sp)
 8009de8:	10c4b03a 	or	r2,r2,r3
 8009dec:	1580042e 	bgeu	r2,r22,8009e00 <__divdf3+0x3f4>
 8009df0:	1445883a 	add	r2,r2,r17
 8009df4:	b8ffffc4 	addi	r3,r23,-1
 8009df8:	1441102e 	bgeu	r2,r17,800a23c <__divdf3+0x830>
 8009dfc:	182f883a 	mov	r23,r3
 8009e00:	15adc83a 	sub	r22,r2,r22
 8009e04:	a80b883a 	mov	r5,r21
 8009e08:	b009883a 	mov	r4,r22
 8009e0c:	d9800215 	stw	r6,8(sp)
 8009e10:	8000a740 	call	8000a74 <__udivsi3>
 8009e14:	100b883a 	mov	r5,r2
 8009e18:	e009883a 	mov	r4,fp
 8009e1c:	1021883a 	mov	r16,r2
 8009e20:	8000b340 	call	8000b34 <__mulsi3>
 8009e24:	a80b883a 	mov	r5,r21
 8009e28:	b009883a 	mov	r4,r22
 8009e2c:	d8800115 	stw	r2,4(sp)
 8009e30:	8000ad80 	call	8000ad8 <__umodsi3>
 8009e34:	1004943a 	slli	r2,r2,16
 8009e38:	da000117 	ldw	r8,4(sp)
 8009e3c:	9cffffcc 	andi	r19,r19,65535
 8009e40:	9884b03a 	or	r2,r19,r2
 8009e44:	d9800217 	ldw	r6,8(sp)
 8009e48:	1200042e 	bgeu	r2,r8,8009e5c <__divdf3+0x450>
 8009e4c:	1445883a 	add	r2,r2,r17
 8009e50:	80ffffc4 	addi	r3,r16,-1
 8009e54:	1440f52e 	bgeu	r2,r17,800a22c <__divdf3+0x820>
 8009e58:	1821883a 	mov	r16,r3
 8009e5c:	b808943a 	slli	r4,r23,16
 8009e60:	d8c00017 	ldw	r3,0(sp)
 8009e64:	1211c83a 	sub	r8,r2,r8
 8009e68:	2420b03a 	or	r16,r4,r16
 8009e6c:	182cd43a 	srli	r22,r3,16
 8009e70:	1dffffcc 	andi	r23,r3,65535
 8009e74:	8026d43a 	srli	r19,r16,16
 8009e78:	80ffffcc 	andi	r3,r16,65535
 8009e7c:	180b883a 	mov	r5,r3
 8009e80:	b809883a 	mov	r4,r23
 8009e84:	d9800615 	stw	r6,24(sp)
 8009e88:	da000415 	stw	r8,16(sp)
 8009e8c:	d8c00515 	stw	r3,20(sp)
 8009e90:	8000b340 	call	8000b34 <__mulsi3>
 8009e94:	b80b883a 	mov	r5,r23
 8009e98:	9809883a 	mov	r4,r19
 8009e9c:	d8800315 	stw	r2,12(sp)
 8009ea0:	8000b340 	call	8000b34 <__mulsi3>
 8009ea4:	b00b883a 	mov	r5,r22
 8009ea8:	9809883a 	mov	r4,r19
 8009eac:	d8800215 	stw	r2,8(sp)
 8009eb0:	8000b340 	call	8000b34 <__mulsi3>
 8009eb4:	d8c00517 	ldw	r3,20(sp)
 8009eb8:	b009883a 	mov	r4,r22
 8009ebc:	d8800115 	stw	r2,4(sp)
 8009ec0:	180b883a 	mov	r5,r3
 8009ec4:	8000b340 	call	8000b34 <__mulsi3>
 8009ec8:	da400317 	ldw	r9,12(sp)
 8009ecc:	dac00217 	ldw	r11,8(sp)
 8009ed0:	da800117 	ldw	r10,4(sp)
 8009ed4:	4806d43a 	srli	r3,r9,16
 8009ed8:	12c5883a 	add	r2,r2,r11
 8009edc:	da000417 	ldw	r8,16(sp)
 8009ee0:	1887883a 	add	r3,r3,r2
 8009ee4:	d9800617 	ldw	r6,24(sp)
 8009ee8:	1ac0022e 	bgeu	r3,r11,8009ef4 <__divdf3+0x4e8>
 8009eec:	00800074 	movhi	r2,1
 8009ef0:	5095883a 	add	r10,r10,r2
 8009ef4:	1826d43a 	srli	r19,r3,16
 8009ef8:	1806943a 	slli	r3,r3,16
 8009efc:	4a7fffcc 	andi	r9,r9,65535
 8009f00:	9aa7883a 	add	r19,r19,r10
 8009f04:	1a47883a 	add	r3,r3,r9
 8009f08:	44c07736 	bltu	r8,r19,800a0e8 <__divdf3+0x6dc>
 8009f0c:	44c07526 	beq	r8,r19,800a0e4 <__divdf3+0x6d8>
 8009f10:	a0c7c83a 	sub	r3,r20,r3
 8009f14:	44c5c83a 	sub	r2,r8,r19
 8009f18:	a0e7803a 	cmpltu	r19,r20,r3
 8009f1c:	d8c00115 	stw	r3,4(sp)
 8009f20:	14e7c83a 	sub	r19,r2,r19
 8009f24:	9500ffc4 	addi	r20,r18,1023
 8009f28:	8cc0cd26 	beq	r17,r19,800a260 <__divdf3+0x854>
 8009f2c:	a80b883a 	mov	r5,r21
 8009f30:	9809883a 	mov	r4,r19
 8009f34:	d9800415 	stw	r6,16(sp)
 8009f38:	8000a740 	call	8000a74 <__udivsi3>
 8009f3c:	100b883a 	mov	r5,r2
 8009f40:	e009883a 	mov	r4,fp
 8009f44:	d8800315 	stw	r2,12(sp)
 8009f48:	8000b340 	call	8000b34 <__mulsi3>
 8009f4c:	9809883a 	mov	r4,r19
 8009f50:	a80b883a 	mov	r5,r21
 8009f54:	d8800215 	stw	r2,8(sp)
 8009f58:	8000ad80 	call	8000ad8 <__umodsi3>
 8009f5c:	d8c00117 	ldw	r3,4(sp)
 8009f60:	1008943a 	slli	r4,r2,16
 8009f64:	da400217 	ldw	r9,8(sp)
 8009f68:	1804d43a 	srli	r2,r3,16
 8009f6c:	da000317 	ldw	r8,12(sp)
 8009f70:	d9800417 	ldw	r6,16(sp)
 8009f74:	1104b03a 	or	r2,r2,r4
 8009f78:	1240062e 	bgeu	r2,r9,8009f94 <__divdf3+0x588>
 8009f7c:	1445883a 	add	r2,r2,r17
 8009f80:	413fffc4 	addi	r4,r8,-1
 8009f84:	1440bd36 	bltu	r2,r17,800a27c <__divdf3+0x870>
 8009f88:	1240bc2e 	bgeu	r2,r9,800a27c <__divdf3+0x870>
 8009f8c:	423fff84 	addi	r8,r8,-2
 8009f90:	1445883a 	add	r2,r2,r17
 8009f94:	1267c83a 	sub	r19,r2,r9
 8009f98:	a80b883a 	mov	r5,r21
 8009f9c:	9809883a 	mov	r4,r19
 8009fa0:	d8c00415 	stw	r3,16(sp)
 8009fa4:	d9800315 	stw	r6,12(sp)
 8009fa8:	da000215 	stw	r8,8(sp)
 8009fac:	8000a740 	call	8000a74 <__udivsi3>
 8009fb0:	e009883a 	mov	r4,fp
 8009fb4:	100b883a 	mov	r5,r2
 8009fb8:	d8800115 	stw	r2,4(sp)
 8009fbc:	8000b340 	call	8000b34 <__mulsi3>
 8009fc0:	a80b883a 	mov	r5,r21
 8009fc4:	9809883a 	mov	r4,r19
 8009fc8:	1039883a 	mov	fp,r2
 8009fcc:	8000ad80 	call	8000ad8 <__umodsi3>
 8009fd0:	d8c00417 	ldw	r3,16(sp)
 8009fd4:	1004943a 	slli	r2,r2,16
 8009fd8:	da400117 	ldw	r9,4(sp)
 8009fdc:	18ffffcc 	andi	r3,r3,65535
 8009fe0:	1886b03a 	or	r3,r3,r2
 8009fe4:	da000217 	ldw	r8,8(sp)
 8009fe8:	d9800317 	ldw	r6,12(sp)
 8009fec:	1f00062e 	bgeu	r3,fp,800a008 <__divdf3+0x5fc>
 8009ff0:	1c47883a 	add	r3,r3,r17
 8009ff4:	48bfffc4 	addi	r2,r9,-1
 8009ff8:	1c409e36 	bltu	r3,r17,800a274 <__divdf3+0x868>
 8009ffc:	1f009d2e 	bgeu	r3,fp,800a274 <__divdf3+0x868>
 800a000:	4a7fff84 	addi	r9,r9,-2
 800a004:	1c47883a 	add	r3,r3,r17
 800a008:	4010943a 	slli	r8,r8,16
 800a00c:	1f2bc83a 	sub	r21,r3,fp
 800a010:	b80b883a 	mov	r5,r23
 800a014:	4266b03a 	or	r19,r8,r9
 800a018:	98ffffcc 	andi	r3,r19,65535
 800a01c:	9838d43a 	srli	fp,r19,16
 800a020:	1809883a 	mov	r4,r3
 800a024:	d9800415 	stw	r6,16(sp)
 800a028:	d8c00315 	stw	r3,12(sp)
 800a02c:	8000b340 	call	8000b34 <__mulsi3>
 800a030:	b80b883a 	mov	r5,r23
 800a034:	e009883a 	mov	r4,fp
 800a038:	d8800215 	stw	r2,8(sp)
 800a03c:	8000b340 	call	8000b34 <__mulsi3>
 800a040:	e00b883a 	mov	r5,fp
 800a044:	b009883a 	mov	r4,r22
 800a048:	d8800115 	stw	r2,4(sp)
 800a04c:	8000b340 	call	8000b34 <__mulsi3>
 800a050:	d8c00317 	ldw	r3,12(sp)
 800a054:	b009883a 	mov	r4,r22
 800a058:	102f883a 	mov	r23,r2
 800a05c:	180b883a 	mov	r5,r3
 800a060:	8000b340 	call	8000b34 <__mulsi3>
 800a064:	da000217 	ldw	r8,8(sp)
 800a068:	da400117 	ldw	r9,4(sp)
 800a06c:	d9800417 	ldw	r6,16(sp)
 800a070:	4006d43a 	srli	r3,r8,16
 800a074:	1245883a 	add	r2,r2,r9
 800a078:	1885883a 	add	r2,r3,r2
 800a07c:	1240022e 	bgeu	r2,r9,800a088 <__divdf3+0x67c>
 800a080:	00c00074 	movhi	r3,1
 800a084:	b8ef883a 	add	r23,r23,r3
 800a088:	1008d43a 	srli	r4,r2,16
 800a08c:	1004943a 	slli	r2,r2,16
 800a090:	423fffcc 	andi	r8,r8,65535
 800a094:	25c9883a 	add	r4,r4,r23
 800a098:	1205883a 	add	r2,r2,r8
 800a09c:	a9000a36 	bltu	r21,r4,800a0c8 <__divdf3+0x6bc>
 800a0a0:	a9000826 	beq	r21,r4,800a0c4 <__divdf3+0x6b8>
 800a0a4:	9cc00054 	ori	r19,r19,1
 800a0a8:	003eb206 	br	8009b74 <__divdf3+0x168>
 800a0ac:	00800434 	movhi	r2,16
 800a0b0:	81000234 	orhi	r4,r16,8
 800a0b4:	10bfffc4 	addi	r2,r2,-1
 800a0b8:	2088703a 	and	r4,r4,r2
 800a0bc:	a00d883a 	mov	r6,r20
 800a0c0:	003f2206 	br	8009d4c <__divdf3+0x340>
 800a0c4:	103eab26 	beq	r2,zero,8009b74 <__divdf3+0x168>
 800a0c8:	8d47883a 	add	r3,r17,r21
 800a0cc:	997fffc4 	addi	r5,r19,-1
 800a0d0:	1c405e36 	bltu	r3,r17,800a24c <__divdf3+0x840>
 800a0d4:	19007b36 	bltu	r3,r4,800a2c4 <__divdf3+0x8b8>
 800a0d8:	1900a126 	beq	r3,r4,800a360 <__divdf3+0x954>
 800a0dc:	2827883a 	mov	r19,r5
 800a0e0:	003ff006 	br	800a0a4 <__divdf3+0x698>
 800a0e4:	a0ff8a2e 	bgeu	r20,r3,8009f10 <__divdf3+0x504>
 800a0e8:	d8800017 	ldw	r2,0(sp)
 800a0ec:	a0a9883a 	add	r20,r20,r2
 800a0f0:	a085803a 	cmpltu	r2,r20,r2
 800a0f4:	1445883a 	add	r2,r2,r17
 800a0f8:	4091883a 	add	r8,r8,r2
 800a0fc:	80bfffc4 	addi	r2,r16,-1
 800a100:	8a00462e 	bgeu	r17,r8,800a21c <__divdf3+0x810>
 800a104:	44c06836 	bltu	r8,r19,800a2a8 <__divdf3+0x89c>
 800a108:	9a006626 	beq	r19,r8,800a2a4 <__divdf3+0x898>
 800a10c:	1021883a 	mov	r16,r2
 800a110:	003f7f06 	br	8009f10 <__divdf3+0x504>
 800a114:	997f1c36 	bltu	r19,r5,8009d88 <__divdf3+0x37c>
 800a118:	800697fa 	slli	r3,r16,31
 800a11c:	9804d07a 	srli	r2,r19,1
 800a120:	982897fa 	slli	r20,r19,31
 800a124:	8020d07a 	srli	r16,r16,1
 800a128:	18a6b03a 	or	r19,r3,r2
 800a12c:	003f1806 	br	8009d90 <__divdf3+0x384>
 800a130:	800b9540 	call	800b954 <__clzsi2>
 800a134:	14000544 	addi	r16,r2,21
 800a138:	81000748 	cmpgei	r4,r16,29
 800a13c:	14800804 	addi	r18,r2,32
 800a140:	d9800017 	ldw	r6,0(sp)
 800a144:	d9c00117 	ldw	r7,4(sp)
 800a148:	203ed726 	beq	r4,zero,8009ca8 <__divdf3+0x29c>
 800a14c:	113ffe04 	addi	r4,r2,-8
 800a150:	9920983a 	sll	r16,r19,r4
 800a154:	0027883a 	mov	r19,zero
 800a158:	003eda06 	br	8009cc4 <__divdf3+0x2b8>
 800a15c:	3009883a 	mov	r4,r6
 800a160:	d9800015 	stw	r6,0(sp)
 800a164:	800b9540 	call	800b954 <__clzsi2>
 800a168:	11c00544 	addi	r7,r2,21
 800a16c:	38c00748 	cmpgei	r3,r7,29
 800a170:	1009883a 	mov	r4,r2
 800a174:	d9800017 	ldw	r6,0(sp)
 800a178:	10800804 	addi	r2,r2,32
 800a17c:	183eb326 	beq	r3,zero,8009c4c <__divdf3+0x240>
 800a180:	213ffe04 	addi	r4,r4,-8
 800a184:	312a983a 	sll	r21,r6,r4
 800a188:	000b883a 	mov	r5,zero
 800a18c:	003eb606 	br	8009c68 <__divdf3+0x25c>
 800a190:	04ffffc4 	movi	r19,-1
 800a194:	01000044 	movi	r4,1
 800a198:	2509c83a 	sub	r4,r4,r20
 800a19c:	20800e48 	cmpgei	r2,r4,57
 800a1a0:	103e871e 	bne	r2,zero,8009bc0 <__divdf3+0x1b4>
 800a1a4:	20800808 	cmpgei	r2,r4,32
 800a1a8:	10004e1e 	bne	r2,zero,800a2e4 <__divdf3+0x8d8>
 800a1ac:	90810784 	addi	r2,r18,1054
 800a1b0:	8086983a 	sll	r3,r16,r2
 800a1b4:	990ad83a 	srl	r5,r19,r4
 800a1b8:	9884983a 	sll	r2,r19,r2
 800a1bc:	8108d83a 	srl	r4,r16,r4
 800a1c0:	1966b03a 	or	r19,r3,r5
 800a1c4:	1004c03a 	cmpne	r2,r2,zero
 800a1c8:	98a6b03a 	or	r19,r19,r2
 800a1cc:	988001cc 	andi	r2,r19,7
 800a1d0:	10000726 	beq	r2,zero,800a1f0 <__divdf3+0x7e4>
 800a1d4:	988003cc 	andi	r2,r19,15
 800a1d8:	10800120 	cmpeqi	r2,r2,4
 800a1dc:	1000041e 	bne	r2,zero,800a1f0 <__divdf3+0x7e4>
 800a1e0:	98800104 	addi	r2,r19,4
 800a1e4:	14e7803a 	cmpltu	r19,r2,r19
 800a1e8:	24c9883a 	add	r4,r4,r19
 800a1ec:	1027883a 	mov	r19,r2
 800a1f0:	2080202c 	andhi	r2,r4,128
 800a1f4:	10005026 	beq	r2,zero,800a338 <__divdf3+0x92c>
 800a1f8:	00800044 	movi	r2,1
 800a1fc:	0009883a 	mov	r4,zero
 800a200:	0027883a 	mov	r19,zero
 800a204:	003e7106 	br	8009bcc <__divdf3+0x1c0>
 800a208:	b00d883a 	mov	r6,r22
 800a20c:	0081ffc4 	movi	r2,2047
 800a210:	0009883a 	mov	r4,zero
 800a214:	0027883a 	mov	r19,zero
 800a218:	003e6c06 	br	8009bcc <__divdf3+0x1c0>
 800a21c:	8a3fbb1e 	bne	r17,r8,800a10c <__divdf3+0x700>
 800a220:	d9000017 	ldw	r4,0(sp)
 800a224:	a13fb936 	bltu	r20,r4,800a10c <__divdf3+0x700>
 800a228:	003fb606 	br	800a104 <__divdf3+0x6f8>
 800a22c:	123f0a2e 	bgeu	r2,r8,8009e58 <__divdf3+0x44c>
 800a230:	843fff84 	addi	r16,r16,-2
 800a234:	1445883a 	add	r2,r2,r17
 800a238:	003f0806 	br	8009e5c <__divdf3+0x450>
 800a23c:	15beef2e 	bgeu	r2,r22,8009dfc <__divdf3+0x3f0>
 800a240:	bdffff84 	addi	r23,r23,-2
 800a244:	1445883a 	add	r2,r2,r17
 800a248:	003eed06 	br	8009e00 <__divdf3+0x3f4>
 800a24c:	2827883a 	mov	r19,r5
 800a250:	193f941e 	bne	r3,r4,800a0a4 <__divdf3+0x698>
 800a254:	d8c00017 	ldw	r3,0(sp)
 800a258:	18bf921e 	bne	r3,r2,800a0a4 <__divdf3+0x698>
 800a25c:	003e4506 	br	8009b74 <__divdf3+0x168>
 800a260:	053fcb0e 	bge	zero,r20,800a190 <__divdf3+0x784>
 800a264:	0027883a 	mov	r19,zero
 800a268:	00c00044 	movi	r3,1
 800a26c:	80e1883a 	add	r16,r16,r3
 800a270:	003e4406 	br	8009b84 <__divdf3+0x178>
 800a274:	1013883a 	mov	r9,r2
 800a278:	003f6306 	br	800a008 <__divdf3+0x5fc>
 800a27c:	2011883a 	mov	r8,r4
 800a280:	003f4406 	br	8009f94 <__divdf3+0x588>
 800a284:	988003cc 	andi	r2,r19,15
 800a288:	10800118 	cmpnei	r2,r2,4
 800a28c:	103e3c26 	beq	r2,zero,8009b80 <__divdf3+0x174>
 800a290:	98800104 	addi	r2,r19,4
 800a294:	00fffec4 	movi	r3,-5
 800a298:	1cc7803a 	cmpltu	r3,r3,r19
 800a29c:	1026d0fa 	srli	r19,r2,3
 800a2a0:	003ff206 	br	800a26c <__divdf3+0x860>
 800a2a4:	a0ff992e 	bgeu	r20,r3,800a10c <__divdf3+0x700>
 800a2a8:	d8800017 	ldw	r2,0(sp)
 800a2ac:	843fff84 	addi	r16,r16,-2
 800a2b0:	a0a9883a 	add	r20,r20,r2
 800a2b4:	a085803a 	cmpltu	r2,r20,r2
 800a2b8:	1445883a 	add	r2,r2,r17
 800a2bc:	4091883a 	add	r8,r8,r2
 800a2c0:	003f1306 	br	8009f10 <__divdf3+0x504>
 800a2c4:	d9c00017 	ldw	r7,0(sp)
 800a2c8:	9cffff84 	addi	r19,r19,-2
 800a2cc:	39cb883a 	add	r5,r7,r7
 800a2d0:	29cf803a 	cmpltu	r7,r5,r7
 800a2d4:	3c4f883a 	add	r7,r7,r17
 800a2d8:	19c7883a 	add	r3,r3,r7
 800a2dc:	d9400015 	stw	r5,0(sp)
 800a2e0:	003fdb06 	br	800a250 <__divdf3+0x844>
 800a2e4:	00bff844 	movi	r2,-31
 800a2e8:	1529c83a 	sub	r20,r2,r20
 800a2ec:	21000820 	cmpeqi	r4,r4,32
 800a2f0:	8528d83a 	srl	r20,r16,r20
 800a2f4:	2000031e 	bne	r4,zero,800a304 <__divdf3+0x8f8>
 800a2f8:	90810f84 	addi	r2,r18,1086
 800a2fc:	8088983a 	sll	r4,r16,r2
 800a300:	9926b03a 	or	r19,r19,r4
 800a304:	9826c03a 	cmpne	r19,r19,zero
 800a308:	9d26b03a 	or	r19,r19,r20
 800a30c:	9c0001cc 	andi	r16,r19,7
 800a310:	8000051e 	bne	r16,zero,800a328 <__divdf3+0x91c>
 800a314:	0009883a 	mov	r4,zero
 800a318:	9826d0fa 	srli	r19,r19,3
 800a31c:	0005883a 	mov	r2,zero
 800a320:	9c26b03a 	or	r19,r19,r16
 800a324:	003e2906 	br	8009bcc <__divdf3+0x1c0>
 800a328:	988003cc 	andi	r2,r19,15
 800a32c:	10800118 	cmpnei	r2,r2,4
 800a330:	0009883a 	mov	r4,zero
 800a334:	103faa1e 	bne	r2,zero,800a1e0 <__divdf3+0x7d4>
 800a338:	2004927a 	slli	r2,r4,9
 800a33c:	2020977a 	slli	r16,r4,29
 800a340:	1008d33a 	srli	r4,r2,12
 800a344:	003ff406 	br	800a318 <__divdf3+0x90c>
 800a348:	00800434 	movhi	r2,16
 800a34c:	81000234 	orhi	r4,r16,8
 800a350:	10bfffc4 	addi	r2,r2,-1
 800a354:	2088703a 	and	r4,r4,r2
 800a358:	b00d883a 	mov	r6,r22
 800a35c:	003e7b06 	br	8009d4c <__divdf3+0x340>
 800a360:	d9c00017 	ldw	r7,0(sp)
 800a364:	38bfd736 	bltu	r7,r2,800a2c4 <__divdf3+0x8b8>
 800a368:	2827883a 	mov	r19,r5
 800a36c:	003fb906 	br	800a254 <__divdf3+0x848>

0800a370 <__eqdf2>:
 800a370:	2810d53a 	srli	r8,r5,20
 800a374:	3806d53a 	srli	r3,r7,20
 800a378:	00800434 	movhi	r2,16
 800a37c:	4201ffcc 	andi	r8,r8,2047
 800a380:	10bfffc4 	addi	r2,r2,-1
 800a384:	4281ffd8 	cmpnei	r10,r8,2047
 800a388:	2892703a 	and	r9,r5,r2
 800a38c:	18c1ffcc 	andi	r3,r3,2047
 800a390:	3884703a 	and	r2,r7,r2
 800a394:	280ad7fa 	srli	r5,r5,31
 800a398:	380ed7fa 	srli	r7,r7,31
 800a39c:	50000626 	beq	r10,zero,800a3b8 <__eqdf2+0x48>
 800a3a0:	1a81ffe0 	cmpeqi	r10,r3,2047
 800a3a4:	5000021e 	bne	r10,zero,800a3b0 <__eqdf2+0x40>
 800a3a8:	40c0011e 	bne	r8,r3,800a3b0 <__eqdf2+0x40>
 800a3ac:	48800826 	beq	r9,r2,800a3d0 <__eqdf2+0x60>
 800a3b0:	00800044 	movi	r2,1
 800a3b4:	f800283a 	ret
 800a3b8:	4914b03a 	or	r10,r9,r4
 800a3bc:	503ffc1e 	bne	r10,zero,800a3b0 <__eqdf2+0x40>
 800a3c0:	18c1ffd8 	cmpnei	r3,r3,2047
 800a3c4:	183ffa1e 	bne	r3,zero,800a3b0 <__eqdf2+0x40>
 800a3c8:	1184b03a 	or	r2,r2,r6
 800a3cc:	103ff81e 	bne	r2,zero,800a3b0 <__eqdf2+0x40>
 800a3d0:	21bff71e 	bne	r4,r6,800a3b0 <__eqdf2+0x40>
 800a3d4:	29c00426 	beq	r5,r7,800a3e8 <__eqdf2+0x78>
 800a3d8:	403ff51e 	bne	r8,zero,800a3b0 <__eqdf2+0x40>
 800a3dc:	4904b03a 	or	r2,r9,r4
 800a3e0:	1004c03a 	cmpne	r2,r2,zero
 800a3e4:	f800283a 	ret
 800a3e8:	0005883a 	mov	r2,zero
 800a3ec:	f800283a 	ret

0800a3f0 <__gedf2>:
 800a3f0:	2810d53a 	srli	r8,r5,20
 800a3f4:	3812d53a 	srli	r9,r7,20
 800a3f8:	00800434 	movhi	r2,16
 800a3fc:	4201ffcc 	andi	r8,r8,2047
 800a400:	10bfffc4 	addi	r2,r2,-1
 800a404:	4281ffd8 	cmpnei	r10,r8,2047
 800a408:	2896703a 	and	r11,r5,r2
 800a40c:	3886703a 	and	r3,r7,r2
 800a410:	280ad7fa 	srli	r5,r5,31
 800a414:	4a41ffcc 	andi	r9,r9,2047
 800a418:	3804d7fa 	srli	r2,r7,31
 800a41c:	50000b26 	beq	r10,zero,800a44c <__gedf2+0x5c>
 800a420:	49c1ffd8 	cmpnei	r7,r9,2047
 800a424:	38000d26 	beq	r7,zero,800a45c <__gedf2+0x6c>
 800a428:	4000191e 	bne	r8,zero,800a490 <__gedf2+0xa0>
 800a42c:	5914b03a 	or	r10,r11,r4
 800a430:	500f003a 	cmpeq	r7,r10,zero
 800a434:	4800131e 	bne	r9,zero,800a484 <__gedf2+0x94>
 800a438:	1998b03a 	or	r12,r3,r6
 800a43c:	6000111e 	bne	r12,zero,800a484 <__gedf2+0x94>
 800a440:	50000a1e 	bne	r10,zero,800a46c <__gedf2+0x7c>
 800a444:	0005883a 	mov	r2,zero
 800a448:	f800283a 	ret
 800a44c:	590eb03a 	or	r7,r11,r4
 800a450:	38001e1e 	bne	r7,zero,800a4cc <__gedf2+0xdc>
 800a454:	49c1ffe0 	cmpeqi	r7,r9,2047
 800a458:	38000d26 	beq	r7,zero,800a490 <__gedf2+0xa0>
 800a45c:	198eb03a 	or	r7,r3,r6
 800a460:	38001a1e 	bne	r7,zero,800a4cc <__gedf2+0xdc>
 800a464:	40000526 	beq	r8,zero,800a47c <__gedf2+0x8c>
 800a468:	28800d26 	beq	r5,r2,800a4a0 <__gedf2+0xb0>
 800a46c:	00800044 	movi	r2,1
 800a470:	28000626 	beq	r5,zero,800a48c <__gedf2+0x9c>
 800a474:	00bfffc4 	movi	r2,-1
 800a478:	f800283a 	ret
 800a47c:	590eb03a 	or	r7,r11,r4
 800a480:	380f003a 	cmpeq	r7,r7,zero
 800a484:	383ff826 	beq	r7,zero,800a468 <__gedf2+0x78>
 800a488:	103ffa26 	beq	r2,zero,800a474 <__gedf2+0x84>
 800a48c:	f800283a 	ret
 800a490:	483ff51e 	bne	r9,zero,800a468 <__gedf2+0x78>
 800a494:	198eb03a 	or	r7,r3,r6
 800a498:	383ff31e 	bne	r7,zero,800a468 <__gedf2+0x78>
 800a49c:	003ff306 	br	800a46c <__gedf2+0x7c>
 800a4a0:	4a000716 	blt	r9,r8,800a4c0 <__gedf2+0xd0>
 800a4a4:	427ff816 	blt	r8,r9,800a488 <__gedf2+0x98>
 800a4a8:	1afff036 	bltu	r3,r11,800a46c <__gedf2+0x7c>
 800a4ac:	58c00926 	beq	r11,r3,800a4d4 <__gedf2+0xe4>
 800a4b0:	58ffe42e 	bgeu	r11,r3,800a444 <__gedf2+0x54>
 800a4b4:	283fef26 	beq	r5,zero,800a474 <__gedf2+0x84>
 800a4b8:	2805883a 	mov	r2,r5
 800a4bc:	f800283a 	ret
 800a4c0:	103fec1e 	bne	r2,zero,800a474 <__gedf2+0x84>
 800a4c4:	00800044 	movi	r2,1
 800a4c8:	f800283a 	ret
 800a4cc:	00bfff84 	movi	r2,-2
 800a4d0:	f800283a 	ret
 800a4d4:	313fe536 	bltu	r6,r4,800a46c <__gedf2+0x7c>
 800a4d8:	21bfda2e 	bgeu	r4,r6,800a444 <__gedf2+0x54>
 800a4dc:	003ff506 	br	800a4b4 <__gedf2+0xc4>

0800a4e0 <__ledf2>:
 800a4e0:	2810d53a 	srli	r8,r5,20
 800a4e4:	3812d53a 	srli	r9,r7,20
 800a4e8:	00800434 	movhi	r2,16
 800a4ec:	4201ffcc 	andi	r8,r8,2047
 800a4f0:	10bfffc4 	addi	r2,r2,-1
 800a4f4:	4281ffd8 	cmpnei	r10,r8,2047
 800a4f8:	2896703a 	and	r11,r5,r2
 800a4fc:	3886703a 	and	r3,r7,r2
 800a500:	280ad7fa 	srli	r5,r5,31
 800a504:	4a41ffcc 	andi	r9,r9,2047
 800a508:	3804d7fa 	srli	r2,r7,31
 800a50c:	50000b26 	beq	r10,zero,800a53c <__ledf2+0x5c>
 800a510:	49c1ffd8 	cmpnei	r7,r9,2047
 800a514:	38000d26 	beq	r7,zero,800a54c <__ledf2+0x6c>
 800a518:	40001b1e 	bne	r8,zero,800a588 <__ledf2+0xa8>
 800a51c:	5914b03a 	or	r10,r11,r4
 800a520:	500f003a 	cmpeq	r7,r10,zero
 800a524:	48000e1e 	bne	r9,zero,800a560 <__ledf2+0x80>
 800a528:	1998b03a 	or	r12,r3,r6
 800a52c:	60000c1e 	bne	r12,zero,800a560 <__ledf2+0x80>
 800a530:	50000d1e 	bne	r10,zero,800a568 <__ledf2+0x88>
 800a534:	0005883a 	mov	r2,zero
 800a538:	f800283a 	ret
 800a53c:	590eb03a 	or	r7,r11,r4
 800a540:	38000d1e 	bne	r7,zero,800a578 <__ledf2+0x98>
 800a544:	49c1ffe0 	cmpeqi	r7,r9,2047
 800a548:	38000f26 	beq	r7,zero,800a588 <__ledf2+0xa8>
 800a54c:	198eb03a 	or	r7,r3,r6
 800a550:	3800091e 	bne	r7,zero,800a578 <__ledf2+0x98>
 800a554:	4000031e 	bne	r8,zero,800a564 <__ledf2+0x84>
 800a558:	590eb03a 	or	r7,r11,r4
 800a55c:	380f003a 	cmpeq	r7,r7,zero
 800a560:	3800071e 	bne	r7,zero,800a580 <__ledf2+0xa0>
 800a564:	28800c26 	beq	r5,r2,800a598 <__ledf2+0xb8>
 800a568:	00800044 	movi	r2,1
 800a56c:	28000526 	beq	r5,zero,800a584 <__ledf2+0xa4>
 800a570:	00bfffc4 	movi	r2,-1
 800a574:	f800283a 	ret
 800a578:	00800084 	movi	r2,2
 800a57c:	f800283a 	ret
 800a580:	103ffb26 	beq	r2,zero,800a570 <__ledf2+0x90>
 800a584:	f800283a 	ret
 800a588:	483ff61e 	bne	r9,zero,800a564 <__ledf2+0x84>
 800a58c:	198eb03a 	or	r7,r3,r6
 800a590:	383ff41e 	bne	r7,zero,800a564 <__ledf2+0x84>
 800a594:	003ff406 	br	800a568 <__ledf2+0x88>
 800a598:	4a00030e 	bge	r9,r8,800a5a8 <__ledf2+0xc8>
 800a59c:	103ff41e 	bne	r2,zero,800a570 <__ledf2+0x90>
 800a5a0:	00800044 	movi	r2,1
 800a5a4:	f800283a 	ret
 800a5a8:	427ff516 	blt	r8,r9,800a580 <__ledf2+0xa0>
 800a5ac:	1affee36 	bltu	r3,r11,800a568 <__ledf2+0x88>
 800a5b0:	58c00426 	beq	r11,r3,800a5c4 <__ledf2+0xe4>
 800a5b4:	58ffdf2e 	bgeu	r11,r3,800a534 <__ledf2+0x54>
 800a5b8:	283fed26 	beq	r5,zero,800a570 <__ledf2+0x90>
 800a5bc:	2805883a 	mov	r2,r5
 800a5c0:	f800283a 	ret
 800a5c4:	313fe836 	bltu	r6,r4,800a568 <__ledf2+0x88>
 800a5c8:	21bfda2e 	bgeu	r4,r6,800a534 <__ledf2+0x54>
 800a5cc:	003ffa06 	br	800a5b8 <__ledf2+0xd8>

0800a5d0 <__muldf3>:
 800a5d0:	2810d53a 	srli	r8,r5,20
 800a5d4:	deffef04 	addi	sp,sp,-68
 800a5d8:	dc000715 	stw	r16,28(sp)
 800a5dc:	04000434 	movhi	r16,16
 800a5e0:	dd000b15 	stw	r20,44(sp)
 800a5e4:	dc800915 	stw	r18,36(sp)
 800a5e8:	843fffc4 	addi	r16,r16,-1
 800a5ec:	dfc01015 	stw	ra,64(sp)
 800a5f0:	df000f15 	stw	fp,60(sp)
 800a5f4:	ddc00e15 	stw	r23,56(sp)
 800a5f8:	dd800d15 	stw	r22,52(sp)
 800a5fc:	dd400c15 	stw	r21,48(sp)
 800a600:	dcc00a15 	stw	r19,40(sp)
 800a604:	dc400815 	stw	r17,32(sp)
 800a608:	4201ffcc 	andi	r8,r8,2047
 800a60c:	2025883a 	mov	r18,r4
 800a610:	2c20703a 	and	r16,r5,r16
 800a614:	2828d7fa 	srli	r20,r5,31
 800a618:	40005d26 	beq	r8,zero,800a790 <__muldf3+0x1c0>
 800a61c:	4081ffe0 	cmpeqi	r2,r8,2047
 800a620:	1000721e 	bne	r2,zero,800a7ec <__muldf3+0x21c>
 800a624:	802090fa 	slli	r16,r16,3
 800a628:	2006d77a 	srli	r3,r4,29
 800a62c:	202c90fa 	slli	r22,r4,3
 800a630:	423f0044 	addi	r8,r8,-1023
 800a634:	1c20b03a 	or	r16,r3,r16
 800a638:	84002034 	orhi	r16,r16,128
 800a63c:	0027883a 	mov	r19,zero
 800a640:	002f883a 	mov	r23,zero
 800a644:	3806d53a 	srli	r3,r7,20
 800a648:	04400434 	movhi	r17,16
 800a64c:	8c7fffc4 	addi	r17,r17,-1
 800a650:	18c1ffcc 	andi	r3,r3,2047
 800a654:	3c62703a 	and	r17,r7,r17
 800a658:	382ad7fa 	srli	r21,r7,31
 800a65c:	18006a26 	beq	r3,zero,800a808 <__muldf3+0x238>
 800a660:	1881ffe0 	cmpeqi	r2,r3,2047
 800a664:	1000211e 	bne	r2,zero,800a6ec <__muldf3+0x11c>
 800a668:	882290fa 	slli	r17,r17,3
 800a66c:	3008d77a 	srli	r4,r6,29
 800a670:	302490fa 	slli	r18,r6,3
 800a674:	18ff0044 	addi	r3,r3,-1023
 800a678:	2462b03a 	or	r17,r4,r17
 800a67c:	40d1883a 	add	r8,r8,r3
 800a680:	8c402034 	orhi	r17,r17,128
 800a684:	0007883a 	mov	r3,zero
 800a688:	98800428 	cmpgeui	r2,r19,16
 800a68c:	a54cf03a 	xor	r6,r20,r21
 800a690:	42400044 	addi	r9,r8,1
 800a694:	10009b1e 	bne	r2,zero,800a904 <__muldf3+0x334>
 800a698:	982690ba 	slli	r19,r19,2
 800a69c:	00820074 	movhi	r2,2049
 800a6a0:	9885883a 	add	r2,r19,r2
 800a6a4:	10a9ab17 	ldw	r2,-22868(r2)
 800a6a8:	1000683a 	jmp	r2
 800a6ac:	0800a904 	addi	zero,at,676
 800a6b0:	0800a70c 	andi	zero,at,668
 800a6b4:	0800a70c 	andi	zero,at,668
 800a6b8:	0800a708 	cmpgei	zero,at,668
 800a6bc:	0800a718 	cmpnei	zero,at,668
 800a6c0:	0800a718 	cmpnei	zero,at,668
 800a6c4:	0800a8c0 	call	800a8c <__alt_mem_onchip_memory2_0+0x800a8c>
 800a6c8:	0800a708 	cmpgei	zero,at,668
 800a6cc:	0800a718 	cmpnei	zero,at,668
 800a6d0:	0800a8c0 	call	800a8c <__alt_mem_onchip_memory2_0+0x800a8c>
 800a6d4:	0800a718 	cmpnei	zero,at,668
 800a6d8:	0800a708 	cmpgei	zero,at,668
 800a6dc:	0800a8b8 	rdprs	zero,at,674
 800a6e0:	0800a8b8 	rdprs	zero,at,674
 800a6e4:	0800a8b8 	rdprs	zero,at,674
 800a6e8:	0800a8d8 	cmpnei	zero,at,675
 800a6ec:	3464b03a 	or	r18,r6,r17
 800a6f0:	4201ffc4 	addi	r8,r8,2047
 800a6f4:	90006c1e 	bne	r18,zero,800a8a8 <__muldf3+0x2d8>
 800a6f8:	9cc00094 	ori	r19,r19,2
 800a6fc:	0023883a 	mov	r17,zero
 800a700:	00c00084 	movi	r3,2
 800a704:	003fe006 	br	800a688 <__muldf3+0xb8>
 800a708:	a80d883a 	mov	r6,r21
 800a70c:	8821883a 	mov	r16,r17
 800a710:	902d883a 	mov	r22,r18
 800a714:	182f883a 	mov	r23,r3
 800a718:	b88000a0 	cmpeqi	r2,r23,2
 800a71c:	1000501e 	bne	r2,zero,800a860 <__muldf3+0x290>
 800a720:	b88000e0 	cmpeqi	r2,r23,3
 800a724:	10019d1e 	bne	r2,zero,800ad9c <__muldf3+0x7cc>
 800a728:	b8800060 	cmpeqi	r2,r23,1
 800a72c:	10012a26 	beq	r2,zero,800abd8 <__muldf3+0x608>
 800a730:	0007883a 	mov	r3,zero
 800a734:	0021883a 	mov	r16,zero
 800a738:	002d883a 	mov	r22,zero
 800a73c:	04400434 	movhi	r17,16
 800a740:	1806953a 	slli	r3,r3,20
 800a744:	31803fcc 	andi	r6,r6,255
 800a748:	8c7fffc4 	addi	r17,r17,-1
 800a74c:	300c97fa 	slli	r6,r6,31
 800a750:	8460703a 	and	r16,r16,r17
 800a754:	80c6b03a 	or	r3,r16,r3
 800a758:	1986b03a 	or	r3,r3,r6
 800a75c:	b005883a 	mov	r2,r22
 800a760:	dfc01017 	ldw	ra,64(sp)
 800a764:	df000f17 	ldw	fp,60(sp)
 800a768:	ddc00e17 	ldw	r23,56(sp)
 800a76c:	dd800d17 	ldw	r22,52(sp)
 800a770:	dd400c17 	ldw	r21,48(sp)
 800a774:	dd000b17 	ldw	r20,44(sp)
 800a778:	dcc00a17 	ldw	r19,40(sp)
 800a77c:	dc800917 	ldw	r18,36(sp)
 800a780:	dc400817 	ldw	r17,32(sp)
 800a784:	dc000717 	ldw	r16,28(sp)
 800a788:	dec01104 	addi	sp,sp,68
 800a78c:	f800283a 	ret
 800a790:	812cb03a 	or	r22,r16,r4
 800a794:	b0003f26 	beq	r22,zero,800a894 <__muldf3+0x2c4>
 800a798:	d9c00115 	stw	r7,4(sp)
 800a79c:	d9800015 	stw	r6,0(sp)
 800a7a0:	80013b26 	beq	r16,zero,800ac90 <__muldf3+0x6c0>
 800a7a4:	8009883a 	mov	r4,r16
 800a7a8:	800b9540 	call	800b954 <__clzsi2>
 800a7ac:	d9800017 	ldw	r6,0(sp)
 800a7b0:	d9c00117 	ldw	r7,4(sp)
 800a7b4:	1007883a 	mov	r3,r2
 800a7b8:	117ffd44 	addi	r5,r2,-11
 800a7bc:	01000744 	movi	r4,29
 800a7c0:	1dbffe04 	addi	r22,r3,-8
 800a7c4:	2149c83a 	sub	r4,r4,r5
 800a7c8:	85a0983a 	sll	r16,r16,r22
 800a7cc:	9108d83a 	srl	r4,r18,r4
 800a7d0:	95ac983a 	sll	r22,r18,r22
 800a7d4:	2420b03a 	or	r16,r4,r16
 800a7d8:	023f0344 	movi	r8,-1011
 800a7dc:	40d1c83a 	sub	r8,r8,r3
 800a7e0:	0027883a 	mov	r19,zero
 800a7e4:	002f883a 	mov	r23,zero
 800a7e8:	003f9606 	br	800a644 <__muldf3+0x74>
 800a7ec:	812cb03a 	or	r22,r16,r4
 800a7f0:	b000231e 	bne	r22,zero,800a880 <__muldf3+0x2b0>
 800a7f4:	0021883a 	mov	r16,zero
 800a7f8:	04c00204 	movi	r19,8
 800a7fc:	0201ffc4 	movi	r8,2047
 800a800:	05c00084 	movi	r23,2
 800a804:	003f8f06 	br	800a644 <__muldf3+0x74>
 800a808:	3464b03a 	or	r18,r6,r17
 800a80c:	90001826 	beq	r18,zero,800a870 <__muldf3+0x2a0>
 800a810:	88011126 	beq	r17,zero,800ac58 <__muldf3+0x688>
 800a814:	8809883a 	mov	r4,r17
 800a818:	d9800115 	stw	r6,4(sp)
 800a81c:	da000015 	stw	r8,0(sp)
 800a820:	800b9540 	call	800b954 <__clzsi2>
 800a824:	da000017 	ldw	r8,0(sp)
 800a828:	d9800117 	ldw	r6,4(sp)
 800a82c:	1007883a 	mov	r3,r2
 800a830:	117ffd44 	addi	r5,r2,-11
 800a834:	01000744 	movi	r4,29
 800a838:	1cbffe04 	addi	r18,r3,-8
 800a83c:	2149c83a 	sub	r4,r4,r5
 800a840:	8ca2983a 	sll	r17,r17,r18
 800a844:	3108d83a 	srl	r4,r6,r4
 800a848:	34a4983a 	sll	r18,r6,r18
 800a84c:	2462b03a 	or	r17,r4,r17
 800a850:	40d1c83a 	sub	r8,r8,r3
 800a854:	423f0344 	addi	r8,r8,-1011
 800a858:	0007883a 	mov	r3,zero
 800a85c:	003f8a06 	br	800a688 <__muldf3+0xb8>
 800a860:	00c1ffc4 	movi	r3,2047
 800a864:	0021883a 	mov	r16,zero
 800a868:	002d883a 	mov	r22,zero
 800a86c:	003fb306 	br	800a73c <__muldf3+0x16c>
 800a870:	9cc00054 	ori	r19,r19,1
 800a874:	0023883a 	mov	r17,zero
 800a878:	00c00044 	movi	r3,1
 800a87c:	003f8206 	br	800a688 <__muldf3+0xb8>
 800a880:	202d883a 	mov	r22,r4
 800a884:	04c00304 	movi	r19,12
 800a888:	0201ffc4 	movi	r8,2047
 800a88c:	05c000c4 	movi	r23,3
 800a890:	003f6c06 	br	800a644 <__muldf3+0x74>
 800a894:	0021883a 	mov	r16,zero
 800a898:	04c00104 	movi	r19,4
 800a89c:	0011883a 	mov	r8,zero
 800a8a0:	05c00044 	movi	r23,1
 800a8a4:	003f6706 	br	800a644 <__muldf3+0x74>
 800a8a8:	9cc000d4 	ori	r19,r19,3
 800a8ac:	3025883a 	mov	r18,r6
 800a8b0:	00c000c4 	movi	r3,3
 800a8b4:	003f7406 	br	800a688 <__muldf3+0xb8>
 800a8b8:	a00d883a 	mov	r6,r20
 800a8bc:	003f9606 	br	800a718 <__muldf3+0x148>
 800a8c0:	04000434 	movhi	r16,16
 800a8c4:	000d883a 	mov	r6,zero
 800a8c8:	843fffc4 	addi	r16,r16,-1
 800a8cc:	05bfffc4 	movi	r22,-1
 800a8d0:	00c1ffc4 	movi	r3,2047
 800a8d4:	003f9906 	br	800a73c <__muldf3+0x16c>
 800a8d8:	8080022c 	andhi	r2,r16,8
 800a8dc:	1000d826 	beq	r2,zero,800ac40 <__muldf3+0x670>
 800a8e0:	8880022c 	andhi	r2,r17,8
 800a8e4:	1000d61e 	bne	r2,zero,800ac40 <__muldf3+0x670>
 800a8e8:	00800434 	movhi	r2,16
 800a8ec:	8c000234 	orhi	r16,r17,8
 800a8f0:	10bfffc4 	addi	r2,r2,-1
 800a8f4:	80a0703a 	and	r16,r16,r2
 800a8f8:	a80d883a 	mov	r6,r21
 800a8fc:	902d883a 	mov	r22,r18
 800a900:	003ff306 	br	800a8d0 <__muldf3+0x300>
 800a904:	b028d43a 	srli	r20,r22,16
 800a908:	902ed43a 	srli	r23,r18,16
 800a90c:	b5bfffcc 	andi	r22,r22,65535
 800a910:	94bfffcc 	andi	r18,r18,65535
 800a914:	b00b883a 	mov	r5,r22
 800a918:	9009883a 	mov	r4,r18
 800a91c:	d9800215 	stw	r6,8(sp)
 800a920:	da000115 	stw	r8,4(sp)
 800a924:	da400015 	stw	r9,0(sp)
 800a928:	8000b340 	call	8000b34 <__mulsi3>
 800a92c:	900b883a 	mov	r5,r18
 800a930:	a009883a 	mov	r4,r20
 800a934:	1027883a 	mov	r19,r2
 800a938:	8000b340 	call	8000b34 <__mulsi3>
 800a93c:	b80b883a 	mov	r5,r23
 800a940:	a009883a 	mov	r4,r20
 800a944:	102b883a 	mov	r21,r2
 800a948:	8000b340 	call	8000b34 <__mulsi3>
 800a94c:	b00b883a 	mov	r5,r22
 800a950:	b809883a 	mov	r4,r23
 800a954:	1039883a 	mov	fp,r2
 800a958:	8000b340 	call	8000b34 <__mulsi3>
 800a95c:	9806d43a 	srli	r3,r19,16
 800a960:	1545883a 	add	r2,r2,r21
 800a964:	da400017 	ldw	r9,0(sp)
 800a968:	1885883a 	add	r2,r3,r2
 800a96c:	da000117 	ldw	r8,4(sp)
 800a970:	d9800217 	ldw	r6,8(sp)
 800a974:	1540022e 	bgeu	r2,r21,800a980 <__muldf3+0x3b0>
 800a978:	00c00074 	movhi	r3,1
 800a97c:	e0f9883a 	add	fp,fp,r3
 800a980:	1006943a 	slli	r3,r2,16
 800a984:	1004d43a 	srli	r2,r2,16
 800a988:	882ad43a 	srli	r21,r17,16
 800a98c:	9cffffcc 	andi	r19,r19,65535
 800a990:	8c7fffcc 	andi	r17,r17,65535
 800a994:	b00b883a 	mov	r5,r22
 800a998:	8809883a 	mov	r4,r17
 800a99c:	d8800015 	stw	r2,0(sp)
 800a9a0:	1cc5883a 	add	r2,r3,r19
 800a9a4:	d9800515 	stw	r6,20(sp)
 800a9a8:	da000415 	stw	r8,16(sp)
 800a9ac:	da400315 	stw	r9,12(sp)
 800a9b0:	d8800115 	stw	r2,4(sp)
 800a9b4:	8000b340 	call	8000b34 <__mulsi3>
 800a9b8:	a009883a 	mov	r4,r20
 800a9bc:	880b883a 	mov	r5,r17
 800a9c0:	d8800215 	stw	r2,8(sp)
 800a9c4:	8000b340 	call	8000b34 <__mulsi3>
 800a9c8:	a009883a 	mov	r4,r20
 800a9cc:	a80b883a 	mov	r5,r21
 800a9d0:	1027883a 	mov	r19,r2
 800a9d4:	8000b340 	call	8000b34 <__mulsi3>
 800a9d8:	b00b883a 	mov	r5,r22
 800a9dc:	a809883a 	mov	r4,r21
 800a9e0:	1029883a 	mov	r20,r2
 800a9e4:	8000b340 	call	8000b34 <__mulsi3>
 800a9e8:	d9c00217 	ldw	r7,8(sp)
 800a9ec:	14c5883a 	add	r2,r2,r19
 800a9f0:	da400317 	ldw	r9,12(sp)
 800a9f4:	3806d43a 	srli	r3,r7,16
 800a9f8:	da000417 	ldw	r8,16(sp)
 800a9fc:	d9800517 	ldw	r6,20(sp)
 800aa00:	1885883a 	add	r2,r3,r2
 800aa04:	14c0022e 	bgeu	r2,r19,800aa10 <__muldf3+0x440>
 800aa08:	00c00074 	movhi	r3,1
 800aa0c:	a0e9883a 	add	r20,r20,r3
 800aa10:	1006d43a 	srli	r3,r2,16
 800aa14:	1004943a 	slli	r2,r2,16
 800aa18:	802cd43a 	srli	r22,r16,16
 800aa1c:	843fffcc 	andi	r16,r16,65535
 800aa20:	3cffffcc 	andi	r19,r7,65535
 800aa24:	9009883a 	mov	r4,r18
 800aa28:	800b883a 	mov	r5,r16
 800aa2c:	d9800615 	stw	r6,24(sp)
 800aa30:	da000515 	stw	r8,20(sp)
 800aa34:	da400415 	stw	r9,16(sp)
 800aa38:	1d29883a 	add	r20,r3,r20
 800aa3c:	14e7883a 	add	r19,r2,r19
 800aa40:	8000b340 	call	8000b34 <__mulsi3>
 800aa44:	900b883a 	mov	r5,r18
 800aa48:	b009883a 	mov	r4,r22
 800aa4c:	d8800315 	stw	r2,12(sp)
 800aa50:	8000b340 	call	8000b34 <__mulsi3>
 800aa54:	b00b883a 	mov	r5,r22
 800aa58:	b809883a 	mov	r4,r23
 800aa5c:	1025883a 	mov	r18,r2
 800aa60:	8000b340 	call	8000b34 <__mulsi3>
 800aa64:	800b883a 	mov	r5,r16
 800aa68:	b809883a 	mov	r4,r23
 800aa6c:	d8800215 	stw	r2,8(sp)
 800aa70:	8000b340 	call	8000b34 <__mulsi3>
 800aa74:	d8c00317 	ldw	r3,12(sp)
 800aa78:	d9400017 	ldw	r5,0(sp)
 800aa7c:	1485883a 	add	r2,r2,r18
 800aa80:	1808d43a 	srli	r4,r3,16
 800aa84:	2ccf883a 	add	r7,r5,r19
 800aa88:	da800217 	ldw	r10,8(sp)
 800aa8c:	2085883a 	add	r2,r4,r2
 800aa90:	da400417 	ldw	r9,16(sp)
 800aa94:	da000517 	ldw	r8,20(sp)
 800aa98:	d9800617 	ldw	r6,24(sp)
 800aa9c:	1480022e 	bgeu	r2,r18,800aaa8 <__muldf3+0x4d8>
 800aaa0:	01000074 	movhi	r4,1
 800aaa4:	5115883a 	add	r10,r10,r4
 800aaa8:	1024d43a 	srli	r18,r2,16
 800aaac:	1004943a 	slli	r2,r2,16
 800aab0:	1dffffcc 	andi	r23,r3,65535
 800aab4:	8809883a 	mov	r4,r17
 800aab8:	800b883a 	mov	r5,r16
 800aabc:	d9800615 	stw	r6,24(sp)
 800aac0:	da000515 	stw	r8,20(sp)
 800aac4:	da400415 	stw	r9,16(sp)
 800aac8:	d9c00315 	stw	r7,12(sp)
 800aacc:	92a5883a 	add	r18,r18,r10
 800aad0:	15ef883a 	add	r23,r2,r23
 800aad4:	8000b340 	call	8000b34 <__mulsi3>
 800aad8:	880b883a 	mov	r5,r17
 800aadc:	b009883a 	mov	r4,r22
 800aae0:	d8800215 	stw	r2,8(sp)
 800aae4:	8000b340 	call	8000b34 <__mulsi3>
 800aae8:	b00b883a 	mov	r5,r22
 800aaec:	a809883a 	mov	r4,r21
 800aaf0:	d8800015 	stw	r2,0(sp)
 800aaf4:	8000b340 	call	8000b34 <__mulsi3>
 800aaf8:	800b883a 	mov	r5,r16
 800aafc:	a809883a 	mov	r4,r21
 800ab00:	1023883a 	mov	r17,r2
 800ab04:	8000b340 	call	8000b34 <__mulsi3>
 800ab08:	da800217 	ldw	r10,8(sp)
 800ab0c:	d8c00017 	ldw	r3,0(sp)
 800ab10:	d9c00317 	ldw	r7,12(sp)
 800ab14:	500ad43a 	srli	r5,r10,16
 800ab18:	10c5883a 	add	r2,r2,r3
 800ab1c:	da400417 	ldw	r9,16(sp)
 800ab20:	288b883a 	add	r5,r5,r2
 800ab24:	da000517 	ldw	r8,20(sp)
 800ab28:	d9800617 	ldw	r6,24(sp)
 800ab2c:	28c0022e 	bgeu	r5,r3,800ab38 <__muldf3+0x568>
 800ab30:	00800074 	movhi	r2,1
 800ab34:	88a3883a 	add	r17,r17,r2
 800ab38:	2806943a 	slli	r3,r5,16
 800ab3c:	52bfffcc 	andi	r10,r10,65535
 800ab40:	3f39883a 	add	fp,r7,fp
 800ab44:	1a87883a 	add	r3,r3,r10
 800ab48:	e4e7803a 	cmpltu	r19,fp,r19
 800ab4c:	1d07883a 	add	r3,r3,r20
 800ab50:	e5f9883a 	add	fp,fp,r23
 800ab54:	1ce1883a 	add	r16,r3,r19
 800ab58:	e5c9803a 	cmpltu	r4,fp,r23
 800ab5c:	848f883a 	add	r7,r16,r18
 800ab60:	280ad43a 	srli	r5,r5,16
 800ab64:	3915883a 	add	r10,r7,r4
 800ab68:	1d29803a 	cmpltu	r20,r3,r20
 800ab6c:	84e1803a 	cmpltu	r16,r16,r19
 800ab70:	5109803a 	cmpltu	r4,r10,r4
 800ab74:	a420b03a 	or	r16,r20,r16
 800ab78:	3ca5803a 	cmpltu	r18,r7,r18
 800ab7c:	8161883a 	add	r16,r16,r5
 800ab80:	9108b03a 	or	r4,r18,r4
 800ab84:	8121883a 	add	r16,r16,r4
 800ab88:	e02c927a 	slli	r22,fp,9
 800ab8c:	8461883a 	add	r16,r16,r17
 800ab90:	d8c00117 	ldw	r3,4(sp)
 800ab94:	5004d5fa 	srli	r2,r10,23
 800ab98:	8020927a 	slli	r16,r16,9
 800ab9c:	e038d5fa 	srli	fp,fp,23
 800aba0:	b0ecb03a 	or	r22,r22,r3
 800aba4:	5014927a 	slli	r10,r10,9
 800aba8:	80a0b03a 	or	r16,r16,r2
 800abac:	b02cc03a 	cmpne	r22,r22,zero
 800abb0:	b72cb03a 	or	r22,r22,fp
 800abb4:	8080402c 	andhi	r2,r16,256
 800abb8:	b2acb03a 	or	r22,r22,r10
 800abbc:	10005c26 	beq	r2,zero,800ad30 <__muldf3+0x760>
 800abc0:	b004d07a 	srli	r2,r22,1
 800abc4:	800697fa 	slli	r3,r16,31
 800abc8:	b580004c 	andi	r22,r22,1
 800abcc:	8020d07a 	srli	r16,r16,1
 800abd0:	15acb03a 	or	r22,r2,r22
 800abd4:	b0ecb03a 	or	r22,r22,r3
 800abd8:	48c0ffc4 	addi	r3,r9,1023
 800abdc:	00c0370e 	bge	zero,r3,800acbc <__muldf3+0x6ec>
 800abe0:	b08001cc 	andi	r2,r22,7
 800abe4:	10000726 	beq	r2,zero,800ac04 <__muldf3+0x634>
 800abe8:	b08003cc 	andi	r2,r22,15
 800abec:	10800120 	cmpeqi	r2,r2,4
 800abf0:	1000041e 	bne	r2,zero,800ac04 <__muldf3+0x634>
 800abf4:	b0800104 	addi	r2,r22,4
 800abf8:	15ad803a 	cmpltu	r22,r2,r22
 800abfc:	85a1883a 	add	r16,r16,r22
 800ac00:	102d883a 	mov	r22,r2
 800ac04:	8080402c 	andhi	r2,r16,256
 800ac08:	10000426 	beq	r2,zero,800ac1c <__muldf3+0x64c>
 800ac0c:	00bfc034 	movhi	r2,65280
 800ac10:	10bfffc4 	addi	r2,r2,-1
 800ac14:	80a0703a 	and	r16,r16,r2
 800ac18:	48c10004 	addi	r3,r9,1024
 800ac1c:	1881ffc8 	cmpgei	r2,r3,2047
 800ac20:	103f0f1e 	bne	r2,zero,800a860 <__muldf3+0x290>
 800ac24:	8004977a 	slli	r2,r16,29
 800ac28:	b02cd0fa 	srli	r22,r22,3
 800ac2c:	8020927a 	slli	r16,r16,9
 800ac30:	18c1ffcc 	andi	r3,r3,2047
 800ac34:	15acb03a 	or	r22,r2,r22
 800ac38:	8020d33a 	srli	r16,r16,12
 800ac3c:	003ebf06 	br	800a73c <__muldf3+0x16c>
 800ac40:	00800434 	movhi	r2,16
 800ac44:	84000234 	orhi	r16,r16,8
 800ac48:	10bfffc4 	addi	r2,r2,-1
 800ac4c:	80a0703a 	and	r16,r16,r2
 800ac50:	a00d883a 	mov	r6,r20
 800ac54:	003f1e06 	br	800a8d0 <__muldf3+0x300>
 800ac58:	3009883a 	mov	r4,r6
 800ac5c:	da000115 	stw	r8,4(sp)
 800ac60:	d9800015 	stw	r6,0(sp)
 800ac64:	800b9540 	call	800b954 <__clzsi2>
 800ac68:	11400544 	addi	r5,r2,21
 800ac6c:	29000748 	cmpgei	r4,r5,29
 800ac70:	10c00804 	addi	r3,r2,32
 800ac74:	d9800017 	ldw	r6,0(sp)
 800ac78:	da000117 	ldw	r8,4(sp)
 800ac7c:	203eed26 	beq	r4,zero,800a834 <__muldf3+0x264>
 800ac80:	147ffe04 	addi	r17,r2,-8
 800ac84:	3462983a 	sll	r17,r6,r17
 800ac88:	0025883a 	mov	r18,zero
 800ac8c:	003ef006 	br	800a850 <__muldf3+0x280>
 800ac90:	800b9540 	call	800b954 <__clzsi2>
 800ac94:	11400544 	addi	r5,r2,21
 800ac98:	29000748 	cmpgei	r4,r5,29
 800ac9c:	10c00804 	addi	r3,r2,32
 800aca0:	d9800017 	ldw	r6,0(sp)
 800aca4:	d9c00117 	ldw	r7,4(sp)
 800aca8:	203ec426 	beq	r4,zero,800a7bc <__muldf3+0x1ec>
 800acac:	143ffe04 	addi	r16,r2,-8
 800acb0:	9420983a 	sll	r16,r18,r16
 800acb4:	002d883a 	mov	r22,zero
 800acb8:	003ec706 	br	800a7d8 <__muldf3+0x208>
 800acbc:	00800044 	movi	r2,1
 800acc0:	10c5c83a 	sub	r2,r2,r3
 800acc4:	11000e48 	cmpgei	r4,r2,57
 800acc8:	203e991e 	bne	r4,zero,800a730 <__muldf3+0x160>
 800accc:	11000808 	cmpgei	r4,r2,32
 800acd0:	2000191e 	bne	r4,zero,800ad38 <__muldf3+0x768>
 800acd4:	4a410784 	addi	r9,r9,1054
 800acd8:	8246983a 	sll	r3,r16,r9
 800acdc:	b088d83a 	srl	r4,r22,r2
 800ace0:	b26c983a 	sll	r22,r22,r9
 800ace4:	80a0d83a 	srl	r16,r16,r2
 800ace8:	1904b03a 	or	r2,r3,r4
 800acec:	b02cc03a 	cmpne	r22,r22,zero
 800acf0:	1584b03a 	or	r2,r2,r22
 800acf4:	10c001cc 	andi	r3,r2,7
 800acf8:	18000726 	beq	r3,zero,800ad18 <__muldf3+0x748>
 800acfc:	10c003cc 	andi	r3,r2,15
 800ad00:	18c00120 	cmpeqi	r3,r3,4
 800ad04:	1800041e 	bne	r3,zero,800ad18 <__muldf3+0x748>
 800ad08:	10c00104 	addi	r3,r2,4
 800ad0c:	1885803a 	cmpltu	r2,r3,r2
 800ad10:	80a1883a 	add	r16,r16,r2
 800ad14:	1805883a 	mov	r2,r3
 800ad18:	80c0202c 	andhi	r3,r16,128
 800ad1c:	18001b26 	beq	r3,zero,800ad8c <__muldf3+0x7bc>
 800ad20:	00c00044 	movi	r3,1
 800ad24:	0021883a 	mov	r16,zero
 800ad28:	002d883a 	mov	r22,zero
 800ad2c:	003e8306 	br	800a73c <__muldf3+0x16c>
 800ad30:	4013883a 	mov	r9,r8
 800ad34:	003fa806 	br	800abd8 <__muldf3+0x608>
 800ad38:	013ff844 	movi	r4,-31
 800ad3c:	20c7c83a 	sub	r3,r4,r3
 800ad40:	10800820 	cmpeqi	r2,r2,32
 800ad44:	80c6d83a 	srl	r3,r16,r3
 800ad48:	1000031e 	bne	r2,zero,800ad58 <__muldf3+0x788>
 800ad4c:	4a410f84 	addi	r9,r9,1086
 800ad50:	8260983a 	sll	r16,r16,r9
 800ad54:	b42cb03a 	or	r22,r22,r16
 800ad58:	b02cc03a 	cmpne	r22,r22,zero
 800ad5c:	b0c4b03a 	or	r2,r22,r3
 800ad60:	158001cc 	andi	r22,r2,7
 800ad64:	b000051e 	bne	r22,zero,800ad7c <__muldf3+0x7ac>
 800ad68:	0021883a 	mov	r16,zero
 800ad6c:	1004d0fa 	srli	r2,r2,3
 800ad70:	0007883a 	mov	r3,zero
 800ad74:	15acb03a 	or	r22,r2,r22
 800ad78:	003e7006 	br	800a73c <__muldf3+0x16c>
 800ad7c:	10c003cc 	andi	r3,r2,15
 800ad80:	18c00118 	cmpnei	r3,r3,4
 800ad84:	0021883a 	mov	r16,zero
 800ad88:	183fdf1e 	bne	r3,zero,800ad08 <__muldf3+0x738>
 800ad8c:	8006927a 	slli	r3,r16,9
 800ad90:	802c977a 	slli	r22,r16,29
 800ad94:	1820d33a 	srli	r16,r3,12
 800ad98:	003ff406 	br	800ad6c <__muldf3+0x79c>
 800ad9c:	00800434 	movhi	r2,16
 800ada0:	84000234 	orhi	r16,r16,8
 800ada4:	10bfffc4 	addi	r2,r2,-1
 800ada8:	80a0703a 	and	r16,r16,r2
 800adac:	003ec806 	br	800a8d0 <__muldf3+0x300>

0800adb0 <__subdf3>:
 800adb0:	00800434 	movhi	r2,16
 800adb4:	3812d53a 	srli	r9,r7,20
 800adb8:	10bfffc4 	addi	r2,r2,-1
 800adbc:	defffb04 	addi	sp,sp,-20
 800adc0:	2890703a 	and	r8,r5,r2
 800adc4:	3884703a 	and	r2,r7,r2
 800adc8:	2806d7fa 	srli	r3,r5,31
 800adcc:	dcc00315 	stw	r19,12(sp)
 800add0:	dc400115 	stw	r17,4(sp)
 800add4:	280ad53a 	srli	r5,r5,20
 800add8:	401090fa 	slli	r8,r8,3
 800addc:	2026d77a 	srli	r19,r4,29
 800ade0:	100490fa 	slli	r2,r2,3
 800ade4:	3022d77a 	srli	r17,r6,29
 800ade8:	4a81ffcc 	andi	r10,r9,2047
 800adec:	dc800215 	stw	r18,8(sp)
 800adf0:	dc000015 	stw	r16,0(sp)
 800adf4:	dfc00415 	stw	ra,16(sp)
 800adf8:	5241ffe0 	cmpeqi	r9,r10,2047
 800adfc:	1825883a 	mov	r18,r3
 800ae00:	2c01ffcc 	andi	r16,r5,2047
 800ae04:	18c03fcc 	andi	r3,r3,255
 800ae08:	9a18b03a 	or	r12,r19,r8
 800ae0c:	201a90fa 	slli	r13,r4,3
 800ae10:	380ed7fa 	srli	r7,r7,31
 800ae14:	8896b03a 	or	r11,r17,r2
 800ae18:	301c90fa 	slli	r14,r6,3
 800ae1c:	4800711e 	bne	r9,zero,800afe4 <__subdf3+0x234>
 800ae20:	39c0005c 	xori	r7,r7,1
 800ae24:	8291c83a 	sub	r8,r16,r10
 800ae28:	19c05a26 	beq	r3,r7,800af94 <__subdf3+0x1e4>
 800ae2c:	0200720e 	bge	zero,r8,800aff8 <__subdf3+0x248>
 800ae30:	50008126 	beq	r10,zero,800b038 <__subdf3+0x288>
 800ae34:	8081ffd8 	cmpnei	r2,r16,2047
 800ae38:	10011626 	beq	r2,zero,800b294 <__subdf3+0x4e4>
 800ae3c:	5ac02034 	orhi	r11,r11,128
 800ae40:	40800e48 	cmpgei	r2,r8,57
 800ae44:	1000fe1e 	bne	r2,zero,800b240 <__subdf3+0x490>
 800ae48:	40800808 	cmpgei	r2,r8,32
 800ae4c:	10015e1e 	bne	r2,zero,800b3c8 <__subdf3+0x618>
 800ae50:	00800804 	movi	r2,32
 800ae54:	1205c83a 	sub	r2,r2,r8
 800ae58:	58a2983a 	sll	r17,r11,r2
 800ae5c:	7206d83a 	srl	r3,r14,r8
 800ae60:	709c983a 	sll	r14,r14,r2
 800ae64:	5a04d83a 	srl	r2,r11,r8
 800ae68:	88e2b03a 	or	r17,r17,r3
 800ae6c:	701cc03a 	cmpne	r14,r14,zero
 800ae70:	8ba2b03a 	or	r17,r17,r14
 800ae74:	6099c83a 	sub	r12,r12,r2
 800ae78:	6c63c83a 	sub	r17,r13,r17
 800ae7c:	6c49803a 	cmpltu	r4,r13,r17
 800ae80:	6109c83a 	sub	r4,r12,r4
 800ae84:	2080202c 	andhi	r2,r4,128
 800ae88:	10009f26 	beq	r2,zero,800b108 <__subdf3+0x358>
 800ae8c:	04c02034 	movhi	r19,128
 800ae90:	9cffffc4 	addi	r19,r19,-1
 800ae94:	24e6703a 	and	r19,r4,r19
 800ae98:	9800e026 	beq	r19,zero,800b21c <__subdf3+0x46c>
 800ae9c:	9809883a 	mov	r4,r19
 800aea0:	800b9540 	call	800b954 <__clzsi2>
 800aea4:	123ffe04 	addi	r8,r2,-8
 800aea8:	01000804 	movi	r4,32
 800aeac:	2209c83a 	sub	r4,r4,r8
 800aeb0:	8906d83a 	srl	r3,r17,r4
 800aeb4:	9a08983a 	sll	r4,r19,r8
 800aeb8:	8a22983a 	sll	r17,r17,r8
 800aebc:	1908b03a 	or	r4,r3,r4
 800aec0:	4400cf16 	blt	r8,r16,800b200 <__subdf3+0x450>
 800aec4:	4411c83a 	sub	r8,r8,r16
 800aec8:	40800044 	addi	r2,r8,1
 800aecc:	10c00808 	cmpgei	r3,r2,32
 800aed0:	1801251e 	bne	r3,zero,800b368 <__subdf3+0x5b8>
 800aed4:	00c00804 	movi	r3,32
 800aed8:	1887c83a 	sub	r3,r3,r2
 800aedc:	888ad83a 	srl	r5,r17,r2
 800aee0:	88e2983a 	sll	r17,r17,r3
 800aee4:	20c6983a 	sll	r3,r4,r3
 800aee8:	2088d83a 	srl	r4,r4,r2
 800aeec:	8822c03a 	cmpne	r17,r17,zero
 800aef0:	1946b03a 	or	r3,r3,r5
 800aef4:	1c62b03a 	or	r17,r3,r17
 800aef8:	0021883a 	mov	r16,zero
 800aefc:	888001cc 	andi	r2,r17,7
 800af00:	10000726 	beq	r2,zero,800af20 <__subdf3+0x170>
 800af04:	888003cc 	andi	r2,r17,15
 800af08:	10800120 	cmpeqi	r2,r2,4
 800af0c:	1000041e 	bne	r2,zero,800af20 <__subdf3+0x170>
 800af10:	88c00104 	addi	r3,r17,4
 800af14:	1c63803a 	cmpltu	r17,r3,r17
 800af18:	2449883a 	add	r4,r4,r17
 800af1c:	1823883a 	mov	r17,r3
 800af20:	2080202c 	andhi	r2,r4,128
 800af24:	10007a26 	beq	r2,zero,800b110 <__subdf3+0x360>
 800af28:	82000044 	addi	r8,r16,1
 800af2c:	4081ffe0 	cmpeqi	r2,r8,2047
 800af30:	4201ffcc 	andi	r8,r8,2047
 800af34:	10008c1e 	bne	r2,zero,800b168 <__subdf3+0x3b8>
 800af38:	00bfe034 	movhi	r2,65408
 800af3c:	10bfffc4 	addi	r2,r2,-1
 800af40:	2084703a 	and	r2,r4,r2
 800af44:	1008927a 	slli	r4,r2,9
 800af48:	8822d0fa 	srli	r17,r17,3
 800af4c:	100c977a 	slli	r6,r2,29
 800af50:	2008d33a 	srli	r4,r4,12
 800af54:	3444b03a 	or	r2,r6,r17
 800af58:	4010953a 	slli	r8,r8,20
 800af5c:	00c00434 	movhi	r3,16
 800af60:	94803fcc 	andi	r18,r18,255
 800af64:	902497fa 	slli	r18,r18,31
 800af68:	18ffffc4 	addi	r3,r3,-1
 800af6c:	20c6703a 	and	r3,r4,r3
 800af70:	1a06b03a 	or	r3,r3,r8
 800af74:	1c86b03a 	or	r3,r3,r18
 800af78:	dfc00417 	ldw	ra,16(sp)
 800af7c:	dcc00317 	ldw	r19,12(sp)
 800af80:	dc800217 	ldw	r18,8(sp)
 800af84:	dc400117 	ldw	r17,4(sp)
 800af88:	dc000017 	ldw	r16,0(sp)
 800af8c:	dec00504 	addi	sp,sp,20
 800af90:	f800283a 	ret
 800af94:	0200320e 	bge	zero,r8,800b060 <__subdf3+0x2b0>
 800af98:	50004c26 	beq	r10,zero,800b0cc <__subdf3+0x31c>
 800af9c:	8081ffd8 	cmpnei	r2,r16,2047
 800afa0:	1000bc26 	beq	r2,zero,800b294 <__subdf3+0x4e4>
 800afa4:	5ac02034 	orhi	r11,r11,128
 800afa8:	40800e48 	cmpgei	r2,r8,57
 800afac:	1000641e 	bne	r2,zero,800b140 <__subdf3+0x390>
 800afb0:	40800808 	cmpgei	r2,r8,32
 800afb4:	10011726 	beq	r2,zero,800b414 <__subdf3+0x664>
 800afb8:	447ff804 	addi	r17,r8,-32
 800afbc:	40800820 	cmpeqi	r2,r8,32
 800afc0:	5c46d83a 	srl	r3,r11,r17
 800afc4:	1000041e 	bne	r2,zero,800afd8 <__subdf3+0x228>
 800afc8:	00801004 	movi	r2,64
 800afcc:	1205c83a 	sub	r2,r2,r8
 800afd0:	5884983a 	sll	r2,r11,r2
 800afd4:	709cb03a 	or	r14,r14,r2
 800afd8:	7022c03a 	cmpne	r17,r14,zero
 800afdc:	88e2b03a 	or	r17,r17,r3
 800afe0:	00005906 	br	800b148 <__subdf3+0x398>
 800afe4:	5b8ab03a 	or	r5,r11,r14
 800afe8:	823e0044 	addi	r8,r16,-2047
 800afec:	28001a1e 	bne	r5,zero,800b058 <__subdf3+0x2a8>
 800aff0:	39c0005c 	xori	r7,r7,1
 800aff4:	19c01a26 	beq	r3,r7,800b060 <__subdf3+0x2b0>
 800aff8:	4000291e 	bne	r8,zero,800b0a0 <__subdf3+0x2f0>
 800affc:	80800044 	addi	r2,r16,1
 800b000:	1081ff8c 	andi	r2,r2,2046
 800b004:	1000911e 	bne	r2,zero,800b24c <__subdf3+0x49c>
 800b008:	6346b03a 	or	r3,r12,r13
 800b00c:	5b84b03a 	or	r2,r11,r14
 800b010:	8001551e 	bne	r16,zero,800b568 <__subdf3+0x7b8>
 800b014:	18011b26 	beq	r3,zero,800b484 <__subdf3+0x6d4>
 800b018:	1001641e 	bne	r2,zero,800b5ac <__subdf3+0x7fc>
 800b01c:	00880034 	movhi	r2,8192
 800b020:	6022977a 	slli	r17,r12,29
 800b024:	10bfffc4 	addi	r2,r2,-1
 800b028:	2088703a 	and	r4,r4,r2
 800b02c:	2444b03a 	or	r2,r4,r17
 800b030:	6026d0fa 	srli	r19,r12,3
 800b034:	00003d06 	br	800b12c <__subdf3+0x37c>
 800b038:	5b84b03a 	or	r2,r11,r14
 800b03c:	10008e26 	beq	r2,zero,800b278 <__subdf3+0x4c8>
 800b040:	40bfffc4 	addi	r2,r8,-1
 800b044:	10011f26 	beq	r2,zero,800b4c4 <__subdf3+0x714>
 800b048:	4201ffd8 	cmpnei	r8,r8,2047
 800b04c:	40012d26 	beq	r8,zero,800b504 <__subdf3+0x754>
 800b050:	1011883a 	mov	r8,r2
 800b054:	003f7a06 	br	800ae40 <__subdf3+0x90>
 800b058:	39c03fcc 	andi	r7,r7,255
 800b05c:	19ffe61e 	bne	r3,r7,800aff8 <__subdf3+0x248>
 800b060:	4000931e 	bne	r8,zero,800b2b0 <__subdf3+0x500>
 800b064:	80c00044 	addi	r3,r16,1
 800b068:	1881ff8c 	andi	r2,r3,2046
 800b06c:	10012c1e 	bne	r2,zero,800b520 <__subdf3+0x770>
 800b070:	6344b03a 	or	r2,r12,r13
 800b074:	8000f91e 	bne	r16,zero,800b45c <__subdf3+0x6ac>
 800b078:	10017326 	beq	r2,zero,800b648 <__subdf3+0x898>
 800b07c:	5b84b03a 	or	r2,r11,r14
 800b080:	1001781e 	bne	r2,zero,800b664 <__subdf3+0x8b4>
 800b084:	6004977a 	slli	r2,r12,29
 800b088:	00c80034 	movhi	r3,8192
 800b08c:	18ffffc4 	addi	r3,r3,-1
 800b090:	20c6703a 	and	r3,r4,r3
 800b094:	10c4b03a 	or	r2,r2,r3
 800b098:	6026d0fa 	srli	r19,r12,3
 800b09c:	00002306 	br	800b12c <__subdf3+0x37c>
 800b0a0:	5411c83a 	sub	r8,r10,r16
 800b0a4:	3825883a 	mov	r18,r7
 800b0a8:	8000991e 	bne	r16,zero,800b310 <__subdf3+0x560>
 800b0ac:	6344b03a 	or	r2,r12,r13
 800b0b0:	1000e326 	beq	r2,zero,800b440 <__subdf3+0x690>
 800b0b4:	40bfffc4 	addi	r2,r8,-1
 800b0b8:	10015d26 	beq	r2,zero,800b630 <__subdf3+0x880>
 800b0bc:	4201ffd8 	cmpnei	r8,r8,2047
 800b0c0:	4000f926 	beq	r8,zero,800b4a8 <__subdf3+0x6f8>
 800b0c4:	1011883a 	mov	r8,r2
 800b0c8:	00009406 	br	800b31c <__subdf3+0x56c>
 800b0cc:	5b84b03a 	or	r2,r11,r14
 800b0d0:	10010226 	beq	r2,zero,800b4dc <__subdf3+0x72c>
 800b0d4:	40bfffc4 	addi	r2,r8,-1
 800b0d8:	10000426 	beq	r2,zero,800b0ec <__subdf3+0x33c>
 800b0dc:	4201ffd8 	cmpnei	r8,r8,2047
 800b0e0:	40014126 	beq	r8,zero,800b5e8 <__subdf3+0x838>
 800b0e4:	1011883a 	mov	r8,r2
 800b0e8:	003faf06 	br	800afa8 <__subdf3+0x1f8>
 800b0ec:	6ba3883a 	add	r17,r13,r14
 800b0f0:	62c9883a 	add	r4,r12,r11
 800b0f4:	8b5b803a 	cmpltu	r13,r17,r13
 800b0f8:	2349883a 	add	r4,r4,r13
 800b0fc:	2080202c 	andhi	r2,r4,128
 800b100:	1000a61e 	bne	r2,zero,800b39c <__subdf3+0x5ec>
 800b104:	04000044 	movi	r16,1
 800b108:	888001cc 	andi	r2,r17,7
 800b10c:	103f7d1e 	bne	r2,zero,800af04 <__subdf3+0x154>
 800b110:	8822d0fa 	srli	r17,r17,3
 800b114:	2004977a 	slli	r2,r4,29
 800b118:	2026d0fa 	srli	r19,r4,3
 800b11c:	8011883a 	mov	r8,r16
 800b120:	8884b03a 	or	r2,r17,r2
 800b124:	40c1ffe0 	cmpeqi	r3,r8,2047
 800b128:	18002d1e 	bne	r3,zero,800b1e0 <__subdf3+0x430>
 800b12c:	01000434 	movhi	r4,16
 800b130:	213fffc4 	addi	r4,r4,-1
 800b134:	9908703a 	and	r4,r19,r4
 800b138:	4201ffcc 	andi	r8,r8,2047
 800b13c:	003f8606 	br	800af58 <__subdf3+0x1a8>
 800b140:	5ba2b03a 	or	r17,r11,r14
 800b144:	8822c03a 	cmpne	r17,r17,zero
 800b148:	8b63883a 	add	r17,r17,r13
 800b14c:	8b49803a 	cmpltu	r4,r17,r13
 800b150:	2309883a 	add	r4,r4,r12
 800b154:	2080202c 	andhi	r2,r4,128
 800b158:	103feb26 	beq	r2,zero,800b108 <__subdf3+0x358>
 800b15c:	84000044 	addi	r16,r16,1
 800b160:	8081ffe0 	cmpeqi	r2,r16,2047
 800b164:	10008e26 	beq	r2,zero,800b3a0 <__subdf3+0x5f0>
 800b168:	0201ffc4 	movi	r8,2047
 800b16c:	0009883a 	mov	r4,zero
 800b170:	0005883a 	mov	r2,zero
 800b174:	003f7806 	br	800af58 <__subdf3+0x1a8>
 800b178:	6010977a 	slli	r8,r12,29
 800b17c:	6026d0fa 	srli	r19,r12,3
 800b180:	1000bb26 	beq	r2,zero,800b470 <__subdf3+0x6c0>
 800b184:	01480034 	movhi	r5,8192
 800b188:	297fffc4 	addi	r5,r5,-1
 800b18c:	2146703a 	and	r3,r4,r5
 800b190:	9880022c 	andhi	r2,r19,8
 800b194:	1a06b03a 	or	r3,r3,r8
 800b198:	10000826 	beq	r2,zero,800b1bc <__subdf3+0x40c>
 800b19c:	5808d0fa 	srli	r4,r11,3
 800b1a0:	2080022c 	andhi	r2,r4,8
 800b1a4:	1000051e 	bne	r2,zero,800b1bc <__subdf3+0x40c>
 800b1a8:	5804977a 	slli	r2,r11,29
 800b1ac:	3146703a 	and	r3,r6,r5
 800b1b0:	3825883a 	mov	r18,r7
 800b1b4:	1886b03a 	or	r3,r3,r2
 800b1b8:	2027883a 	mov	r19,r4
 800b1bc:	1804d77a 	srli	r2,r3,29
 800b1c0:	980890fa 	slli	r4,r19,3
 800b1c4:	01480034 	movhi	r5,8192
 800b1c8:	297fffc4 	addi	r5,r5,-1
 800b1cc:	1108b03a 	or	r4,r2,r4
 800b1d0:	2004977a 	slli	r2,r4,29
 800b1d4:	2026d0fa 	srli	r19,r4,3
 800b1d8:	1946703a 	and	r3,r3,r5
 800b1dc:	10c4b03a 	or	r2,r2,r3
 800b1e0:	14c6b03a 	or	r3,r2,r19
 800b1e4:	18014926 	beq	r3,zero,800b70c <__subdf3+0x95c>
 800b1e8:	00c00434 	movhi	r3,16
 800b1ec:	99000234 	orhi	r4,r19,8
 800b1f0:	18ffffc4 	addi	r3,r3,-1
 800b1f4:	20c8703a 	and	r4,r4,r3
 800b1f8:	0201ffc4 	movi	r8,2047
 800b1fc:	003f5606 	br	800af58 <__subdf3+0x1a8>
 800b200:	00bfe034 	movhi	r2,65408
 800b204:	10bfffc4 	addi	r2,r2,-1
 800b208:	2088703a 	and	r4,r4,r2
 800b20c:	888001cc 	andi	r2,r17,7
 800b210:	8221c83a 	sub	r16,r16,r8
 800b214:	103f3b1e 	bne	r2,zero,800af04 <__subdf3+0x154>
 800b218:	003fbd06 	br	800b110 <__subdf3+0x360>
 800b21c:	8809883a 	mov	r4,r17
 800b220:	800b9540 	call	800b954 <__clzsi2>
 800b224:	12000604 	addi	r8,r2,24
 800b228:	40c00808 	cmpgei	r3,r8,32
 800b22c:	183f1e26 	beq	r3,zero,800aea8 <__subdf3+0xf8>
 800b230:	113ffe04 	addi	r4,r2,-8
 800b234:	8908983a 	sll	r4,r17,r4
 800b238:	0023883a 	mov	r17,zero
 800b23c:	003f2006 	br	800aec0 <__subdf3+0x110>
 800b240:	5ba2b03a 	or	r17,r11,r14
 800b244:	8822c03a 	cmpne	r17,r17,zero
 800b248:	003f0b06 	br	800ae78 <__subdf3+0xc8>
 800b24c:	6ba3c83a 	sub	r17,r13,r14
 800b250:	62e7c83a 	sub	r19,r12,r11
 800b254:	6c49803a 	cmpltu	r4,r13,r17
 800b258:	9927c83a 	sub	r19,r19,r4
 800b25c:	9880202c 	andhi	r2,r19,128
 800b260:	1000bb1e 	bne	r2,zero,800b550 <__subdf3+0x7a0>
 800b264:	8cc4b03a 	or	r2,r17,r19
 800b268:	103f0b1e 	bne	r2,zero,800ae98 <__subdf3+0xe8>
 800b26c:	0027883a 	mov	r19,zero
 800b270:	0025883a 	mov	r18,zero
 800b274:	003fad06 	br	800b12c <__subdf3+0x37c>
 800b278:	00880034 	movhi	r2,8192
 800b27c:	6022977a 	slli	r17,r12,29
 800b280:	10bfffc4 	addi	r2,r2,-1
 800b284:	2088703a 	and	r4,r4,r2
 800b288:	2444b03a 	or	r2,r4,r17
 800b28c:	6026d0fa 	srli	r19,r12,3
 800b290:	003fa406 	br	800b124 <__subdf3+0x374>
 800b294:	00880034 	movhi	r2,8192
 800b298:	6022977a 	slli	r17,r12,29
 800b29c:	10bfffc4 	addi	r2,r2,-1
 800b2a0:	2088703a 	and	r4,r4,r2
 800b2a4:	2444b03a 	or	r2,r4,r17
 800b2a8:	6026d0fa 	srli	r19,r12,3
 800b2ac:	003fcc06 	br	800b1e0 <__subdf3+0x430>
 800b2b0:	5411c83a 	sub	r8,r10,r16
 800b2b4:	80004f26 	beq	r16,zero,800b3f4 <__subdf3+0x644>
 800b2b8:	5081ffd8 	cmpnei	r2,r10,2047
 800b2bc:	1000b426 	beq	r2,zero,800b590 <__subdf3+0x7e0>
 800b2c0:	63002034 	orhi	r12,r12,128
 800b2c4:	40800e48 	cmpgei	r2,r8,57
 800b2c8:	1000c41e 	bne	r2,zero,800b5dc <__subdf3+0x82c>
 800b2cc:	40800808 	cmpgei	r2,r8,32
 800b2d0:	1000f91e 	bne	r2,zero,800b6b8 <__subdf3+0x908>
 800b2d4:	00800804 	movi	r2,32
 800b2d8:	1205c83a 	sub	r2,r2,r8
 800b2dc:	60a2983a 	sll	r17,r12,r2
 800b2e0:	6a06d83a 	srl	r3,r13,r8
 800b2e4:	6884983a 	sll	r2,r13,r2
 800b2e8:	6210d83a 	srl	r8,r12,r8
 800b2ec:	88e2b03a 	or	r17,r17,r3
 800b2f0:	1004c03a 	cmpne	r2,r2,zero
 800b2f4:	88a2b03a 	or	r17,r17,r2
 800b2f8:	5a17883a 	add	r11,r11,r8
 800b2fc:	8ba3883a 	add	r17,r17,r14
 800b300:	8b85803a 	cmpltu	r2,r17,r14
 800b304:	12c9883a 	add	r4,r2,r11
 800b308:	5021883a 	mov	r16,r10
 800b30c:	003f9106 	br	800b154 <__subdf3+0x3a4>
 800b310:	5081ffd8 	cmpnei	r2,r10,2047
 800b314:	10006426 	beq	r2,zero,800b4a8 <__subdf3+0x6f8>
 800b318:	63002034 	orhi	r12,r12,128
 800b31c:	40800e48 	cmpgei	r2,r8,57
 800b320:	1000751e 	bne	r2,zero,800b4f8 <__subdf3+0x748>
 800b324:	40800808 	cmpgei	r2,r8,32
 800b328:	1000b61e 	bne	r2,zero,800b604 <__subdf3+0x854>
 800b32c:	00800804 	movi	r2,32
 800b330:	1205c83a 	sub	r2,r2,r8
 800b334:	60a2983a 	sll	r17,r12,r2
 800b338:	6a06d83a 	srl	r3,r13,r8
 800b33c:	6884983a 	sll	r2,r13,r2
 800b340:	6210d83a 	srl	r8,r12,r8
 800b344:	88e2b03a 	or	r17,r17,r3
 800b348:	1004c03a 	cmpne	r2,r2,zero
 800b34c:	88a2b03a 	or	r17,r17,r2
 800b350:	5a17c83a 	sub	r11,r11,r8
 800b354:	7463c83a 	sub	r17,r14,r17
 800b358:	7445803a 	cmpltu	r2,r14,r17
 800b35c:	5889c83a 	sub	r4,r11,r2
 800b360:	5021883a 	mov	r16,r10
 800b364:	003ec706 	br	800ae84 <__subdf3+0xd4>
 800b368:	423ff844 	addi	r8,r8,-31
 800b36c:	10c00820 	cmpeqi	r3,r2,32
 800b370:	2210d83a 	srl	r8,r4,r8
 800b374:	1800041e 	bne	r3,zero,800b388 <__subdf3+0x5d8>
 800b378:	00c01004 	movi	r3,64
 800b37c:	1885c83a 	sub	r2,r3,r2
 800b380:	2088983a 	sll	r4,r4,r2
 800b384:	8922b03a 	or	r17,r17,r4
 800b388:	8822c03a 	cmpne	r17,r17,zero
 800b38c:	8a22b03a 	or	r17,r17,r8
 800b390:	0009883a 	mov	r4,zero
 800b394:	0021883a 	mov	r16,zero
 800b398:	003f5b06 	br	800b108 <__subdf3+0x358>
 800b39c:	04000084 	movi	r16,2
 800b3a0:	00bfe034 	movhi	r2,65408
 800b3a4:	10bfffc4 	addi	r2,r2,-1
 800b3a8:	2084703a 	and	r2,r4,r2
 800b3ac:	8806d07a 	srli	r3,r17,1
 800b3b0:	100a97fa 	slli	r5,r2,31
 800b3b4:	8c40004c 	andi	r17,r17,1
 800b3b8:	1c62b03a 	or	r17,r3,r17
 800b3bc:	1008d07a 	srli	r4,r2,1
 800b3c0:	2c62b03a 	or	r17,r5,r17
 800b3c4:	003ecd06 	br	800aefc <__subdf3+0x14c>
 800b3c8:	447ff804 	addi	r17,r8,-32
 800b3cc:	40800820 	cmpeqi	r2,r8,32
 800b3d0:	5c46d83a 	srl	r3,r11,r17
 800b3d4:	1000041e 	bne	r2,zero,800b3e8 <__subdf3+0x638>
 800b3d8:	00801004 	movi	r2,64
 800b3dc:	1205c83a 	sub	r2,r2,r8
 800b3e0:	5884983a 	sll	r2,r11,r2
 800b3e4:	709cb03a 	or	r14,r14,r2
 800b3e8:	7022c03a 	cmpne	r17,r14,zero
 800b3ec:	88e2b03a 	or	r17,r17,r3
 800b3f0:	003ea106 	br	800ae78 <__subdf3+0xc8>
 800b3f4:	6344b03a 	or	r2,r12,r13
 800b3f8:	1000a526 	beq	r2,zero,800b690 <__subdf3+0x8e0>
 800b3fc:	40bfffc4 	addi	r2,r8,-1
 800b400:	1000bd26 	beq	r2,zero,800b6f8 <__subdf3+0x948>
 800b404:	4201ffd8 	cmpnei	r8,r8,2047
 800b408:	40006126 	beq	r8,zero,800b590 <__subdf3+0x7e0>
 800b40c:	1011883a 	mov	r8,r2
 800b410:	003fac06 	br	800b2c4 <__subdf3+0x514>
 800b414:	00800804 	movi	r2,32
 800b418:	1205c83a 	sub	r2,r2,r8
 800b41c:	58a2983a 	sll	r17,r11,r2
 800b420:	7206d83a 	srl	r3,r14,r8
 800b424:	709c983a 	sll	r14,r14,r2
 800b428:	5a04d83a 	srl	r2,r11,r8
 800b42c:	88e2b03a 	or	r17,r17,r3
 800b430:	701cc03a 	cmpne	r14,r14,zero
 800b434:	8ba2b03a 	or	r17,r17,r14
 800b438:	6099883a 	add	r12,r12,r2
 800b43c:	003f4206 	br	800b148 <__subdf3+0x398>
 800b440:	5808977a 	slli	r4,r11,29
 800b444:	00c80034 	movhi	r3,8192
 800b448:	18ffffc4 	addi	r3,r3,-1
 800b44c:	30cc703a 	and	r6,r6,r3
 800b450:	2184b03a 	or	r2,r4,r6
 800b454:	5826d0fa 	srli	r19,r11,3
 800b458:	003f3206 	br	800b124 <__subdf3+0x374>
 800b45c:	10004c26 	beq	r2,zero,800b590 <__subdf3+0x7e0>
 800b460:	5b9cb03a 	or	r14,r11,r14
 800b464:	6010977a 	slli	r8,r12,29
 800b468:	6026d0fa 	srli	r19,r12,3
 800b46c:	703f451e 	bne	r14,zero,800b184 <__subdf3+0x3d4>
 800b470:	00880034 	movhi	r2,8192
 800b474:	10bfffc4 	addi	r2,r2,-1
 800b478:	2084703a 	and	r2,r4,r2
 800b47c:	1204b03a 	or	r2,r2,r8
 800b480:	003f5706 	br	800b1e0 <__subdf3+0x430>
 800b484:	103f7926 	beq	r2,zero,800b26c <__subdf3+0x4bc>
 800b488:	5804977a 	slli	r2,r11,29
 800b48c:	00c80034 	movhi	r3,8192
 800b490:	18ffffc4 	addi	r3,r3,-1
 800b494:	30c6703a 	and	r3,r6,r3
 800b498:	10c4b03a 	or	r2,r2,r3
 800b49c:	5826d0fa 	srli	r19,r11,3
 800b4a0:	3825883a 	mov	r18,r7
 800b4a4:	003f2106 	br	800b12c <__subdf3+0x37c>
 800b4a8:	5804977a 	slli	r2,r11,29
 800b4ac:	00c80034 	movhi	r3,8192
 800b4b0:	18ffffc4 	addi	r3,r3,-1
 800b4b4:	30c6703a 	and	r3,r6,r3
 800b4b8:	10c4b03a 	or	r2,r2,r3
 800b4bc:	5826d0fa 	srli	r19,r11,3
 800b4c0:	003f4706 	br	800b1e0 <__subdf3+0x430>
 800b4c4:	6ba3c83a 	sub	r17,r13,r14
 800b4c8:	62c9c83a 	sub	r4,r12,r11
 800b4cc:	6c5b803a 	cmpltu	r13,r13,r17
 800b4d0:	2349c83a 	sub	r4,r4,r13
 800b4d4:	04000044 	movi	r16,1
 800b4d8:	003e6a06 	br	800ae84 <__subdf3+0xd4>
 800b4dc:	6004977a 	slli	r2,r12,29
 800b4e0:	00c80034 	movhi	r3,8192
 800b4e4:	18ffffc4 	addi	r3,r3,-1
 800b4e8:	20c8703a 	and	r4,r4,r3
 800b4ec:	1104b03a 	or	r2,r2,r4
 800b4f0:	6026d0fa 	srli	r19,r12,3
 800b4f4:	003f0b06 	br	800b124 <__subdf3+0x374>
 800b4f8:	6366b03a 	or	r19,r12,r13
 800b4fc:	9822c03a 	cmpne	r17,r19,zero
 800b500:	003f9406 	br	800b354 <__subdf3+0x5a4>
 800b504:	6004977a 	slli	r2,r12,29
 800b508:	00c80034 	movhi	r3,8192
 800b50c:	18ffffc4 	addi	r3,r3,-1
 800b510:	20c8703a 	and	r4,r4,r3
 800b514:	1104b03a 	or	r2,r2,r4
 800b518:	6026d0fa 	srli	r19,r12,3
 800b51c:	003f3006 	br	800b1e0 <__subdf3+0x430>
 800b520:	1881ffe0 	cmpeqi	r2,r3,2047
 800b524:	103f101e 	bne	r2,zero,800b168 <__subdf3+0x3b8>
 800b528:	6b9d883a 	add	r14,r13,r14
 800b52c:	62c9883a 	add	r4,r12,r11
 800b530:	7345803a 	cmpltu	r2,r14,r13
 800b534:	2085883a 	add	r2,r4,r2
 800b538:	102297fa 	slli	r17,r2,31
 800b53c:	701cd07a 	srli	r14,r14,1
 800b540:	1008d07a 	srli	r4,r2,1
 800b544:	1821883a 	mov	r16,r3
 800b548:	8ba2b03a 	or	r17,r17,r14
 800b54c:	003eee06 	br	800b108 <__subdf3+0x358>
 800b550:	7363c83a 	sub	r17,r14,r13
 800b554:	5b09c83a 	sub	r4,r11,r12
 800b558:	7467803a 	cmpltu	r19,r14,r17
 800b55c:	24e7c83a 	sub	r19,r4,r19
 800b560:	3825883a 	mov	r18,r7
 800b564:	003e4c06 	br	800ae98 <__subdf3+0xe8>
 800b568:	183f031e 	bne	r3,zero,800b178 <__subdf3+0x3c8>
 800b56c:	10005d26 	beq	r2,zero,800b6e4 <__subdf3+0x934>
 800b570:	00880034 	movhi	r2,8192
 800b574:	5806977a 	slli	r3,r11,29
 800b578:	10bfffc4 	addi	r2,r2,-1
 800b57c:	3084703a 	and	r2,r6,r2
 800b580:	10c4b03a 	or	r2,r2,r3
 800b584:	5826d0fa 	srli	r19,r11,3
 800b588:	3825883a 	mov	r18,r7
 800b58c:	003f1406 	br	800b1e0 <__subdf3+0x430>
 800b590:	00880034 	movhi	r2,8192
 800b594:	5806977a 	slli	r3,r11,29
 800b598:	10bfffc4 	addi	r2,r2,-1
 800b59c:	3084703a 	and	r2,r6,r2
 800b5a0:	10c4b03a 	or	r2,r2,r3
 800b5a4:	5826d0fa 	srli	r19,r11,3
 800b5a8:	003f0d06 	br	800b1e0 <__subdf3+0x430>
 800b5ac:	6ba3c83a 	sub	r17,r13,r14
 800b5b0:	62c5c83a 	sub	r2,r12,r11
 800b5b4:	6c49803a 	cmpltu	r4,r13,r17
 800b5b8:	1109c83a 	sub	r4,r2,r4
 800b5bc:	2080202c 	andhi	r2,r4,128
 800b5c0:	10003a26 	beq	r2,zero,800b6ac <__subdf3+0x8fc>
 800b5c4:	7363c83a 	sub	r17,r14,r13
 800b5c8:	5b09c83a 	sub	r4,r11,r12
 800b5cc:	745d803a 	cmpltu	r14,r14,r17
 800b5d0:	2389c83a 	sub	r4,r4,r14
 800b5d4:	3825883a 	mov	r18,r7
 800b5d8:	003e4806 	br	800aefc <__subdf3+0x14c>
 800b5dc:	6362b03a 	or	r17,r12,r13
 800b5e0:	8822c03a 	cmpne	r17,r17,zero
 800b5e4:	003f4506 	br	800b2fc <__subdf3+0x54c>
 800b5e8:	6004977a 	slli	r2,r12,29
 800b5ec:	00c80034 	movhi	r3,8192
 800b5f0:	18ffffc4 	addi	r3,r3,-1
 800b5f4:	20c6703a 	and	r3,r4,r3
 800b5f8:	10c4b03a 	or	r2,r2,r3
 800b5fc:	6026d0fa 	srli	r19,r12,3
 800b600:	003ef706 	br	800b1e0 <__subdf3+0x430>
 800b604:	40bff804 	addi	r2,r8,-32
 800b608:	40c00820 	cmpeqi	r3,r8,32
 800b60c:	6084d83a 	srl	r2,r12,r2
 800b610:	1800041e 	bne	r3,zero,800b624 <__subdf3+0x874>
 800b614:	04c01004 	movi	r19,64
 800b618:	9a11c83a 	sub	r8,r19,r8
 800b61c:	6226983a 	sll	r19,r12,r8
 800b620:	6cdab03a 	or	r13,r13,r19
 800b624:	6822c03a 	cmpne	r17,r13,zero
 800b628:	88a2b03a 	or	r17,r17,r2
 800b62c:	003f4906 	br	800b354 <__subdf3+0x5a4>
 800b630:	7363c83a 	sub	r17,r14,r13
 800b634:	5b09c83a 	sub	r4,r11,r12
 800b638:	745d803a 	cmpltu	r14,r14,r17
 800b63c:	2389c83a 	sub	r4,r4,r14
 800b640:	04000044 	movi	r16,1
 800b644:	003e0f06 	br	800ae84 <__subdf3+0xd4>
 800b648:	00880034 	movhi	r2,8192
 800b64c:	5806977a 	slli	r3,r11,29
 800b650:	10bfffc4 	addi	r2,r2,-1
 800b654:	3084703a 	and	r2,r6,r2
 800b658:	10c4b03a 	or	r2,r2,r3
 800b65c:	5826d0fa 	srli	r19,r11,3
 800b660:	003eb206 	br	800b12c <__subdf3+0x37c>
 800b664:	6ba3883a 	add	r17,r13,r14
 800b668:	62c9883a 	add	r4,r12,r11
 800b66c:	8b5b803a 	cmpltu	r13,r17,r13
 800b670:	2349883a 	add	r4,r4,r13
 800b674:	2080202c 	andhi	r2,r4,128
 800b678:	103ea326 	beq	r2,zero,800b108 <__subdf3+0x358>
 800b67c:	00bfe034 	movhi	r2,65408
 800b680:	10bfffc4 	addi	r2,r2,-1
 800b684:	2088703a 	and	r4,r4,r2
 800b688:	04000044 	movi	r16,1
 800b68c:	003e9e06 	br	800b108 <__subdf3+0x358>
 800b690:	00880034 	movhi	r2,8192
 800b694:	5806977a 	slli	r3,r11,29
 800b698:	10bfffc4 	addi	r2,r2,-1
 800b69c:	3084703a 	and	r2,r6,r2
 800b6a0:	10c4b03a 	or	r2,r2,r3
 800b6a4:	5826d0fa 	srli	r19,r11,3
 800b6a8:	003e9e06 	br	800b124 <__subdf3+0x374>
 800b6ac:	8904b03a 	or	r2,r17,r4
 800b6b0:	103eee26 	beq	r2,zero,800b26c <__subdf3+0x4bc>
 800b6b4:	003e9406 	br	800b108 <__subdf3+0x358>
 800b6b8:	40bff804 	addi	r2,r8,-32
 800b6bc:	40c00820 	cmpeqi	r3,r8,32
 800b6c0:	6084d83a 	srl	r2,r12,r2
 800b6c4:	1800041e 	bne	r3,zero,800b6d8 <__subdf3+0x928>
 800b6c8:	04c01004 	movi	r19,64
 800b6cc:	9a11c83a 	sub	r8,r19,r8
 800b6d0:	6226983a 	sll	r19,r12,r8
 800b6d4:	6cdab03a 	or	r13,r13,r19
 800b6d8:	6822c03a 	cmpne	r17,r13,zero
 800b6dc:	88a2b03a 	or	r17,r17,r2
 800b6e0:	003f0606 	br	800b2fc <__subdf3+0x54c>
 800b6e4:	04c00434 	movhi	r19,16
 800b6e8:	9cffffc4 	addi	r19,r19,-1
 800b6ec:	0025883a 	mov	r18,zero
 800b6f0:	00bfffc4 	movi	r2,-1
 800b6f4:	003ebc06 	br	800b1e8 <__subdf3+0x438>
 800b6f8:	6ba3883a 	add	r17,r13,r14
 800b6fc:	62c9883a 	add	r4,r12,r11
 800b700:	8b9d803a 	cmpltu	r14,r17,r14
 800b704:	2389883a 	add	r4,r4,r14
 800b708:	003e7c06 	br	800b0fc <__subdf3+0x34c>
 800b70c:	0005883a 	mov	r2,zero
 800b710:	0201ffc4 	movi	r8,2047
 800b714:	0009883a 	mov	r4,zero
 800b718:	003e0f06 	br	800af58 <__subdf3+0x1a8>

0800b71c <__unorddf2>:
 800b71c:	2806d53a 	srli	r3,r5,20
 800b720:	3810d53a 	srli	r8,r7,20
 800b724:	00800434 	movhi	r2,16
 800b728:	18c1ffcc 	andi	r3,r3,2047
 800b72c:	10bfffc4 	addi	r2,r2,-1
 800b730:	18c1ffd8 	cmpnei	r3,r3,2047
 800b734:	288a703a 	and	r5,r5,r2
 800b738:	388e703a 	and	r7,r7,r2
 800b73c:	4201ffcc 	andi	r8,r8,2047
 800b740:	18000426 	beq	r3,zero,800b754 <__unorddf2+0x38>
 800b744:	4201ffd8 	cmpnei	r8,r8,2047
 800b748:	40000626 	beq	r8,zero,800b764 <__unorddf2+0x48>
 800b74c:	0005883a 	mov	r2,zero
 800b750:	f800283a 	ret
 800b754:	214ab03a 	or	r5,r4,r5
 800b758:	283ffa26 	beq	r5,zero,800b744 <__unorddf2+0x28>
 800b75c:	00800044 	movi	r2,1
 800b760:	f800283a 	ret
 800b764:	398eb03a 	or	r7,r7,r6
 800b768:	3804c03a 	cmpne	r2,r7,zero
 800b76c:	f800283a 	ret

0800b770 <__fixdfsi>:
 800b770:	280cd53a 	srli	r6,r5,20
 800b774:	00c00434 	movhi	r3,16
 800b778:	18ffffc4 	addi	r3,r3,-1
 800b77c:	3181ffcc 	andi	r6,r6,2047
 800b780:	31c0ffd0 	cmplti	r7,r6,1023
 800b784:	28c6703a 	and	r3,r5,r3
 800b788:	280ad7fa 	srli	r5,r5,31
 800b78c:	3800061e 	bne	r7,zero,800b7a8 <__fixdfsi+0x38>
 800b790:	30810790 	cmplti	r2,r6,1054
 800b794:	1000061e 	bne	r2,zero,800b7b0 <__fixdfsi+0x40>
 800b798:	00a00034 	movhi	r2,32768
 800b79c:	10bfffc4 	addi	r2,r2,-1
 800b7a0:	2885883a 	add	r2,r5,r2
 800b7a4:	f800283a 	ret
 800b7a8:	0005883a 	mov	r2,zero
 800b7ac:	f800283a 	ret
 800b7b0:	00810cc4 	movi	r2,1075
 800b7b4:	118fc83a 	sub	r7,r2,r6
 800b7b8:	38800808 	cmpgei	r2,r7,32
 800b7bc:	18c00434 	orhi	r3,r3,16
 800b7c0:	1000071e 	bne	r2,zero,800b7e0 <__fixdfsi+0x70>
 800b7c4:	30befb44 	addi	r2,r6,-1043
 800b7c8:	1886983a 	sll	r3,r3,r2
 800b7cc:	21c4d83a 	srl	r2,r4,r7
 800b7d0:	1884b03a 	or	r2,r3,r2
 800b7d4:	283ff526 	beq	r5,zero,800b7ac <__fixdfsi+0x3c>
 800b7d8:	0085c83a 	sub	r2,zero,r2
 800b7dc:	f800283a 	ret
 800b7e0:	008104c4 	movi	r2,1043
 800b7e4:	1185c83a 	sub	r2,r2,r6
 800b7e8:	1884d83a 	srl	r2,r3,r2
 800b7ec:	003ff906 	br	800b7d4 <__fixdfsi+0x64>

0800b7f0 <__floatsidf>:
 800b7f0:	defffd04 	addi	sp,sp,-12
 800b7f4:	dfc00215 	stw	ra,8(sp)
 800b7f8:	dc400115 	stw	r17,4(sp)
 800b7fc:	dc000015 	stw	r16,0(sp)
 800b800:	20001326 	beq	r4,zero,800b850 <__floatsidf+0x60>
 800b804:	2021883a 	mov	r16,r4
 800b808:	2022d7fa 	srli	r17,r4,31
 800b80c:	20002116 	blt	r4,zero,800b894 <__floatsidf+0xa4>
 800b810:	8009883a 	mov	r4,r16
 800b814:	800b9540 	call	800b954 <__clzsi2>
 800b818:	01010784 	movi	r4,1054
 800b81c:	2089c83a 	sub	r4,r4,r2
 800b820:	10c002c8 	cmpgei	r3,r2,11
 800b824:	2101ffcc 	andi	r4,r4,2047
 800b828:	18001c1e 	bne	r3,zero,800b89c <__floatsidf+0xac>
 800b82c:	018002c4 	movi	r6,11
 800b830:	308dc83a 	sub	r6,r6,r2
 800b834:	818ad83a 	srl	r5,r16,r6
 800b838:	00c00434 	movhi	r3,16
 800b83c:	10800544 	addi	r2,r2,21
 800b840:	18ffffc4 	addi	r3,r3,-1
 800b844:	8084983a 	sll	r2,r16,r2
 800b848:	28ca703a 	and	r5,r5,r3
 800b84c:	00000406 	br	800b860 <__floatsidf+0x70>
 800b850:	0023883a 	mov	r17,zero
 800b854:	0009883a 	mov	r4,zero
 800b858:	000b883a 	mov	r5,zero
 800b85c:	0005883a 	mov	r2,zero
 800b860:	2008953a 	slli	r4,r4,20
 800b864:	8c403fcc 	andi	r17,r17,255
 800b868:	01800434 	movhi	r6,16
 800b86c:	31bfffc4 	addi	r6,r6,-1
 800b870:	880697fa 	slli	r3,r17,31
 800b874:	298a703a 	and	r5,r5,r6
 800b878:	290ab03a 	or	r5,r5,r4
 800b87c:	28c6b03a 	or	r3,r5,r3
 800b880:	dfc00217 	ldw	ra,8(sp)
 800b884:	dc400117 	ldw	r17,4(sp)
 800b888:	dc000017 	ldw	r16,0(sp)
 800b88c:	dec00304 	addi	sp,sp,12
 800b890:	f800283a 	ret
 800b894:	0121c83a 	sub	r16,zero,r4
 800b898:	003fdd06 	br	800b810 <__floatsidf+0x20>
 800b89c:	10bffd44 	addi	r2,r2,-11
 800b8a0:	808a983a 	sll	r5,r16,r2
 800b8a4:	00800434 	movhi	r2,16
 800b8a8:	10bfffc4 	addi	r2,r2,-1
 800b8ac:	288a703a 	and	r5,r5,r2
 800b8b0:	0005883a 	mov	r2,zero
 800b8b4:	003fea06 	br	800b860 <__floatsidf+0x70>

0800b8b8 <__floatunsidf>:
 800b8b8:	defffe04 	addi	sp,sp,-8
 800b8bc:	dc000015 	stw	r16,0(sp)
 800b8c0:	dfc00115 	stw	ra,4(sp)
 800b8c4:	2021883a 	mov	r16,r4
 800b8c8:	20000f26 	beq	r4,zero,800b908 <__floatunsidf+0x50>
 800b8cc:	800b9540 	call	800b954 <__clzsi2>
 800b8d0:	01010784 	movi	r4,1054
 800b8d4:	2089c83a 	sub	r4,r4,r2
 800b8d8:	10c002c8 	cmpgei	r3,r2,11
 800b8dc:	2101ffcc 	andi	r4,r4,2047
 800b8e0:	1800151e 	bne	r3,zero,800b938 <__floatunsidf+0x80>
 800b8e4:	00c002c4 	movi	r3,11
 800b8e8:	1887c83a 	sub	r3,r3,r2
 800b8ec:	80c6d83a 	srl	r3,r16,r3
 800b8f0:	01400434 	movhi	r5,16
 800b8f4:	10800544 	addi	r2,r2,21
 800b8f8:	297fffc4 	addi	r5,r5,-1
 800b8fc:	80a0983a 	sll	r16,r16,r2
 800b900:	1944703a 	and	r2,r3,r5
 800b904:	00000206 	br	800b910 <__floatunsidf+0x58>
 800b908:	0009883a 	mov	r4,zero
 800b90c:	0005883a 	mov	r2,zero
 800b910:	2008953a 	slli	r4,r4,20
 800b914:	00c00434 	movhi	r3,16
 800b918:	18ffffc4 	addi	r3,r3,-1
 800b91c:	10c6703a 	and	r3,r2,r3
 800b920:	1906b03a 	or	r3,r3,r4
 800b924:	8005883a 	mov	r2,r16
 800b928:	dfc00117 	ldw	ra,4(sp)
 800b92c:	dc000017 	ldw	r16,0(sp)
 800b930:	dec00204 	addi	sp,sp,8
 800b934:	f800283a 	ret
 800b938:	10bffd44 	addi	r2,r2,-11
 800b93c:	8084983a 	sll	r2,r16,r2
 800b940:	00c00434 	movhi	r3,16
 800b944:	18ffffc4 	addi	r3,r3,-1
 800b948:	10c4703a 	and	r2,r2,r3
 800b94c:	0021883a 	mov	r16,zero
 800b950:	003fef06 	br	800b910 <__floatunsidf+0x58>

0800b954 <__clzsi2>:
 800b954:	00bfffd4 	movui	r2,65535
 800b958:	11000b36 	bltu	r2,r4,800b988 <__clzsi2+0x34>
 800b95c:	20804030 	cmpltui	r2,r4,256
 800b960:	1000071e 	bne	r2,zero,800b980 <__clzsi2+0x2c>
 800b964:	2008d23a 	srli	r4,r4,8
 800b968:	01400604 	movi	r5,24
 800b96c:	00c20074 	movhi	r3,2049
 800b970:	20c7883a 	add	r3,r4,r3
 800b974:	18b83443 	ldbu	r2,-7983(r3)
 800b978:	2885c83a 	sub	r2,r5,r2
 800b97c:	f800283a 	ret
 800b980:	01400804 	movi	r5,32
 800b984:	003ff906 	br	800b96c <__clzsi2+0x18>
 800b988:	00804034 	movhi	r2,256
 800b98c:	20800336 	bltu	r4,r2,800b99c <__clzsi2+0x48>
 800b990:	2008d63a 	srli	r4,r4,24
 800b994:	01400204 	movi	r5,8
 800b998:	003ff406 	br	800b96c <__clzsi2+0x18>
 800b99c:	2008d43a 	srli	r4,r4,16
 800b9a0:	01400404 	movi	r5,16
 800b9a4:	003ff106 	br	800b96c <__clzsi2+0x18>

0800b9a8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 800b9a8:	defffc04 	addi	sp,sp,-16
 800b9ac:	df000315 	stw	fp,12(sp)
 800b9b0:	df000304 	addi	fp,sp,12
 800b9b4:	e13fff15 	stw	r4,-4(fp)
 800b9b8:	e17ffe15 	stw	r5,-8(fp)
 800b9bc:	e1bffd15 	stw	r6,-12(fp)
  if (to != from)
 800b9c0:	e0fffe17 	ldw	r3,-8(fp)
 800b9c4:	e0bfff17 	ldw	r2,-4(fp)
 800b9c8:	18800c26 	beq	r3,r2,800b9fc <alt_load_section+0x54>
  {
    while( to != end )
 800b9cc:	00000806 	br	800b9f0 <alt_load_section+0x48>
    {
      *to++ = *from++;
 800b9d0:	e0ffff17 	ldw	r3,-4(fp)
 800b9d4:	18800104 	addi	r2,r3,4
 800b9d8:	e0bfff15 	stw	r2,-4(fp)
 800b9dc:	e0bffe17 	ldw	r2,-8(fp)
 800b9e0:	11000104 	addi	r4,r2,4
 800b9e4:	e13ffe15 	stw	r4,-8(fp)
 800b9e8:	18c00017 	ldw	r3,0(r3)
 800b9ec:	10c00015 	stw	r3,0(r2)
    while( to != end )
 800b9f0:	e0fffe17 	ldw	r3,-8(fp)
 800b9f4:	e0bffd17 	ldw	r2,-12(fp)
 800b9f8:	18bff51e 	bne	r3,r2,800b9d0 <alt_load_section+0x28>
    }
  }
}
 800b9fc:	0001883a 	nop
 800ba00:	e037883a 	mov	sp,fp
 800ba04:	df000017 	ldw	fp,0(sp)
 800ba08:	dec00104 	addi	sp,sp,4
 800ba0c:	f800283a 	ret

0800ba10 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 800ba10:	defffe04 	addi	sp,sp,-8
 800ba14:	dfc00115 	stw	ra,4(sp)
 800ba18:	df000015 	stw	fp,0(sp)
 800ba1c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 800ba20:	01820074 	movhi	r6,2049
 800ba24:	31808f04 	addi	r6,r6,572
 800ba28:	01420074 	movhi	r5,2049
 800ba2c:	29788204 	addi	r5,r5,-7672
 800ba30:	01020074 	movhi	r4,2049
 800ba34:	21008f04 	addi	r4,r4,572
 800ba38:	800b9a80 	call	800b9a8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 800ba3c:	01820034 	movhi	r6,2048
 800ba40:	31808904 	addi	r6,r6,548
 800ba44:	01420034 	movhi	r5,2048
 800ba48:	29400804 	addi	r5,r5,32
 800ba4c:	01020034 	movhi	r4,2048
 800ba50:	21000804 	addi	r4,r4,32
 800ba54:	800b9a80 	call	800b9a8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 800ba58:	01820074 	movhi	r6,2049
 800ba5c:	31b88204 	addi	r6,r6,-7672
 800ba60:	01420074 	movhi	r5,2049
 800ba64:	29770d04 	addi	r5,r5,-9164
 800ba68:	01020074 	movhi	r4,2049
 800ba6c:	21370d04 	addi	r4,r4,-9164
 800ba70:	800b9a80 	call	800b9a8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 800ba74:	800cbfc0 	call	800cbfc <alt_dcache_flush_all>
  alt_icache_flush_all();
 800ba78:	800cde80 	call	800cde8 <alt_icache_flush_all>
}
 800ba7c:	0001883a 	nop
 800ba80:	e037883a 	mov	sp,fp
 800ba84:	dfc00117 	ldw	ra,4(sp)
 800ba88:	df000017 	ldw	fp,0(sp)
 800ba8c:	dec00204 	addi	sp,sp,8
 800ba90:	f800283a 	ret

0800ba94 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 800ba94:	defffd04 	addi	sp,sp,-12
 800ba98:	dfc00215 	stw	ra,8(sp)
 800ba9c:	df000115 	stw	fp,4(sp)
 800baa0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 800baa4:	0009883a 	mov	r4,zero
 800baa8:	800bc6c0 	call	800bc6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 800baac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 800bab0:	800bca40 	call	800bca4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 800bab4:	01820074 	movhi	r6,2049
 800bab8:	31b87504 	addi	r6,r6,-7724
 800babc:	01420074 	movhi	r5,2049
 800bac0:	29787504 	addi	r5,r5,-7724
 800bac4:	01020074 	movhi	r4,2049
 800bac8:	21387504 	addi	r4,r4,-7724
 800bacc:	800d1700 	call	800d170 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 800bad0:	800cd280 	call	800cd28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 800bad4:	01020074 	movhi	r4,2049
 800bad8:	21336204 	addi	r4,r4,-12920
 800badc:	800d9840 	call	800d984 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 800bae0:	d0a82317 	ldw	r2,-24436(gp)
 800bae4:	d0e82417 	ldw	r3,-24432(gp)
 800bae8:	d1282517 	ldw	r4,-24428(gp)
 800baec:	200d883a 	mov	r6,r4
 800baf0:	180b883a 	mov	r5,r3
 800baf4:	1009883a 	mov	r4,r2
 800baf8:	80002600 	call	8000260 <main>
 800bafc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 800bb00:	01000044 	movi	r4,1
 800bb04:	800cb200 	call	800cb20 <close>
  exit (result);
 800bb08:	e13fff17 	ldw	r4,-4(fp)
 800bb0c:	800d9980 	call	800d998 <exit>

0800bb10 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 800bb10:	defffe04 	addi	sp,sp,-8
 800bb14:	df000115 	stw	fp,4(sp)
 800bb18:	df000104 	addi	fp,sp,4
 800bb1c:	e13fff15 	stw	r4,-4(fp)
}
 800bb20:	0001883a 	nop
 800bb24:	e037883a 	mov	sp,fp
 800bb28:	df000017 	ldw	fp,0(sp)
 800bb2c:	dec00104 	addi	sp,sp,4
 800bb30:	f800283a 	ret

0800bb34 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 800bb34:	defffe04 	addi	sp,sp,-8
 800bb38:	df000115 	stw	fp,4(sp)
 800bb3c:	df000104 	addi	fp,sp,4
 800bb40:	e13fff15 	stw	r4,-4(fp)
}
 800bb44:	0001883a 	nop
 800bb48:	e037883a 	mov	sp,fp
 800bb4c:	df000017 	ldw	fp,0(sp)
 800bb50:	dec00104 	addi	sp,sp,4
 800bb54:	f800283a 	ret

0800bb58 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 800bb58:	defff904 	addi	sp,sp,-28
 800bb5c:	df000615 	stw	fp,24(sp)
 800bb60:	df000604 	addi	fp,sp,24
 800bb64:	e13ffa15 	stw	r4,-24(fp)
  NIOS2_READ_STATUS (context);
 800bb68:	0005303a 	rdctl	r2,status
 800bb6c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800bb70:	e0fffd17 	ldw	r3,-12(fp)
 800bb74:	00bfff84 	movi	r2,-2
 800bb78:	1884703a 	and	r2,r3,r2
 800bb7c:	1001703a 	wrctl	status,r2
  return context;
 800bb80:	e0bffd17 	ldw	r2,-12(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 800bb84:	e0bfff15 	stw	r2,-4(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 800bb88:	d0a00717 	ldw	r2,-32740(gp)
 800bb8c:	10c000c4 	addi	r3,r2,3
 800bb90:	00bfff04 	movi	r2,-4
 800bb94:	1884703a 	and	r2,r3,r2
 800bb98:	d0a00715 	stw	r2,-32740(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 800bb9c:	d0e00717 	ldw	r3,-32740(gp)
 800bba0:	e0bffa17 	ldw	r2,-24(fp)
 800bba4:	1887883a 	add	r3,r3,r2
 800bba8:	00830034 	movhi	r2,3072
 800bbac:	10800004 	addi	r2,r2,0
 800bbb0:	10c0062e 	bgeu	r2,r3,800bbcc <sbrk+0x74>
 800bbb4:	e0bfff17 	ldw	r2,-4(fp)
 800bbb8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800bbbc:	e0bffc17 	ldw	r2,-16(fp)
 800bbc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 800bbc4:	00bfffc4 	movi	r2,-1
 800bbc8:	00000b06 	br	800bbf8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 800bbcc:	d0a00717 	ldw	r2,-32740(gp)
 800bbd0:	e0bffe15 	stw	r2,-8(fp)
  heap_end += incr; 
 800bbd4:	d0e00717 	ldw	r3,-32740(gp)
 800bbd8:	e0bffa17 	ldw	r2,-24(fp)
 800bbdc:	1885883a 	add	r2,r3,r2
 800bbe0:	d0a00715 	stw	r2,-32740(gp)
 800bbe4:	e0bfff17 	ldw	r2,-4(fp)
 800bbe8:	e0bffb15 	stw	r2,-20(fp)
 800bbec:	e0bffb17 	ldw	r2,-20(fp)
 800bbf0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 800bbf4:	e0bffe17 	ldw	r2,-8(fp)
} 
 800bbf8:	e037883a 	mov	sp,fp
 800bbfc:	df000017 	ldw	fp,0(sp)
 800bc00:	dec00104 	addi	sp,sp,4
 800bc04:	f800283a 	ret

0800bc08 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 800bc08:	defffd04 	addi	sp,sp,-12
 800bc0c:	dfc00215 	stw	ra,8(sp)
 800bc10:	df000115 	stw	fp,4(sp)
 800bc14:	df000104 	addi	fp,sp,4
 800bc18:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 800bc1c:	e13fff17 	ldw	r4,-4(fp)
 800bc20:	800c98c0 	call	800c98c <alt_busy_sleep>
}
 800bc24:	e037883a 	mov	sp,fp
 800bc28:	dfc00117 	ldw	ra,4(sp)
 800bc2c:	df000017 	ldw	fp,0(sp)
 800bc30:	dec00204 	addi	sp,sp,8
 800bc34:	f800283a 	ret

0800bc38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 800bc38:	defffd04 	addi	sp,sp,-12
 800bc3c:	dfc00215 	stw	ra,8(sp)
 800bc40:	df000115 	stw	fp,4(sp)
 800bc44:	df000104 	addi	fp,sp,4
 800bc48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 800bc4c:	d1600a04 	addi	r5,gp,-32728
 800bc50:	e13fff17 	ldw	r4,-4(fp)
 800bc54:	800cc840 	call	800cc84 <alt_dev_llist_insert>
}
 800bc58:	e037883a 	mov	sp,fp
 800bc5c:	dfc00117 	ldw	ra,4(sp)
 800bc60:	df000017 	ldw	fp,0(sp)
 800bc64:	dec00204 	addi	sp,sp,8
 800bc68:	f800283a 	ret

0800bc6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 800bc6c:	defffd04 	addi	sp,sp,-12
 800bc70:	dfc00215 	stw	ra,8(sp)
 800bc74:	df000115 	stw	fp,4(sp)
 800bc78:	df000104 	addi	fp,sp,4
 800bc7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 800bc80:	800d6780 	call	800d678 <altera_nios2_gen2_irq_init>
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 800bc84:	00800044 	movi	r2,1
 800bc88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 800bc8c:	0001883a 	nop
 800bc90:	e037883a 	mov	sp,fp
 800bc94:	dfc00117 	ldw	ra,4(sp)
 800bc98:	df000017 	ldw	fp,0(sp)
 800bc9c:	dec00204 	addi	sp,sp,8
 800bca0:	f800283a 	ret

0800bca4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 800bca4:	defffe04 	addi	sp,sp,-8
 800bca8:	dfc00115 	stw	ra,4(sp)
 800bcac:	df000015 	stw	fp,0(sp)
 800bcb0:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
 800bcb4:	01c0fa04 	movi	r7,1000
 800bcb8:	01800084 	movi	r6,2
 800bcbc:	000b883a 	mov	r5,zero
 800bcc0:	01003004 	movi	r4,192
 800bcc4:	800c7e40 	call	800c7e4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
 800bcc8:	01800044 	movi	r6,1
 800bccc:	000b883a 	mov	r5,zero
 800bcd0:	01020074 	movhi	r4,2049
 800bcd4:	213c0604 	addi	r4,r4,-4072
 800bcd8:	800be6c0 	call	800be6c <altera_avalon_jtag_uart_init>
 800bcdc:	01020074 	movhi	r4,2049
 800bce0:	213bfc04 	addi	r4,r4,-4112
 800bce4:	800bc380 	call	800bc38 <alt_dev_reg>
    ALTERA_AVALON_SPI_INIT ( SPI_0, spi_0);
 800bce8:	0001883a 	nop
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
 800bcec:	0001883a 	nop
}
 800bcf0:	0001883a 	nop
 800bcf4:	e037883a 	mov	sp,fp
 800bcf8:	dfc00117 	ldw	ra,4(sp)
 800bcfc:	df000017 	ldw	fp,0(sp)
 800bd00:	dec00204 	addi	sp,sp,8
 800bd04:	f800283a 	ret

0800bd08 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 800bd08:	defffa04 	addi	sp,sp,-24
 800bd0c:	dfc00515 	stw	ra,20(sp)
 800bd10:	df000415 	stw	fp,16(sp)
 800bd14:	df000404 	addi	fp,sp,16
 800bd18:	e13ffe15 	stw	r4,-8(fp)
 800bd1c:	e17ffd15 	stw	r5,-12(fp)
 800bd20:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bd24:	e0bffe17 	ldw	r2,-8(fp)
 800bd28:	10800017 	ldw	r2,0(r2)
 800bd2c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 800bd30:	e0bfff17 	ldw	r2,-4(fp)
 800bd34:	10c00a04 	addi	r3,r2,40
 800bd38:	e0bffe17 	ldw	r2,-8(fp)
 800bd3c:	10800217 	ldw	r2,8(r2)
 800bd40:	100f883a 	mov	r7,r2
 800bd44:	e1bffc17 	ldw	r6,-16(fp)
 800bd48:	e17ffd17 	ldw	r5,-12(fp)
 800bd4c:	1809883a 	mov	r4,r3
 800bd50:	800c32c0 	call	800c32c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 800bd54:	e037883a 	mov	sp,fp
 800bd58:	dfc00117 	ldw	ra,4(sp)
 800bd5c:	df000017 	ldw	fp,0(sp)
 800bd60:	dec00204 	addi	sp,sp,8
 800bd64:	f800283a 	ret

0800bd68 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 800bd68:	defffa04 	addi	sp,sp,-24
 800bd6c:	dfc00515 	stw	ra,20(sp)
 800bd70:	df000415 	stw	fp,16(sp)
 800bd74:	df000404 	addi	fp,sp,16
 800bd78:	e13ffe15 	stw	r4,-8(fp)
 800bd7c:	e17ffd15 	stw	r5,-12(fp)
 800bd80:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bd84:	e0bffe17 	ldw	r2,-8(fp)
 800bd88:	10800017 	ldw	r2,0(r2)
 800bd8c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 800bd90:	e0bfff17 	ldw	r2,-4(fp)
 800bd94:	10c00a04 	addi	r3,r2,40
 800bd98:	e0bffe17 	ldw	r2,-8(fp)
 800bd9c:	10800217 	ldw	r2,8(r2)
 800bda0:	100f883a 	mov	r7,r2
 800bda4:	e1bffc17 	ldw	r6,-16(fp)
 800bda8:	e17ffd17 	ldw	r5,-12(fp)
 800bdac:	1809883a 	mov	r4,r3
 800bdb0:	800c5480 	call	800c548 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 800bdb4:	e037883a 	mov	sp,fp
 800bdb8:	dfc00117 	ldw	ra,4(sp)
 800bdbc:	df000017 	ldw	fp,0(sp)
 800bdc0:	dec00204 	addi	sp,sp,8
 800bdc4:	f800283a 	ret

0800bdc8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 800bdc8:	defffc04 	addi	sp,sp,-16
 800bdcc:	dfc00315 	stw	ra,12(sp)
 800bdd0:	df000215 	stw	fp,8(sp)
 800bdd4:	df000204 	addi	fp,sp,8
 800bdd8:	e13ffe15 	stw	r4,-8(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 800bddc:	e0bffe17 	ldw	r2,-8(fp)
 800bde0:	10800017 	ldw	r2,0(r2)
 800bde4:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 800bde8:	e0bfff17 	ldw	r2,-4(fp)
 800bdec:	10c00a04 	addi	r3,r2,40
 800bdf0:	e0bffe17 	ldw	r2,-8(fp)
 800bdf4:	10800217 	ldw	r2,8(r2)
 800bdf8:	100b883a 	mov	r5,r2
 800bdfc:	1809883a 	mov	r4,r3
 800be00:	800c1d00 	call	800c1d0 <altera_avalon_jtag_uart_close>
}
 800be04:	e037883a 	mov	sp,fp
 800be08:	dfc00117 	ldw	ra,4(sp)
 800be0c:	df000017 	ldw	fp,0(sp)
 800be10:	dec00204 	addi	sp,sp,8
 800be14:	f800283a 	ret

0800be18 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 800be18:	defffa04 	addi	sp,sp,-24
 800be1c:	dfc00515 	stw	ra,20(sp)
 800be20:	df000415 	stw	fp,16(sp)
 800be24:	df000404 	addi	fp,sp,16
 800be28:	e13ffe15 	stw	r4,-8(fp)
 800be2c:	e17ffd15 	stw	r5,-12(fp)
 800be30:	e1bffc15 	stw	r6,-16(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 800be34:	e0bffe17 	ldw	r2,-8(fp)
 800be38:	10800017 	ldw	r2,0(r2)
 800be3c:	e0bfff15 	stw	r2,-4(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 800be40:	e0bfff17 	ldw	r2,-4(fp)
 800be44:	10800a04 	addi	r2,r2,40
 800be48:	e1bffc17 	ldw	r6,-16(fp)
 800be4c:	e17ffd17 	ldw	r5,-12(fp)
 800be50:	1009883a 	mov	r4,r2
 800be54:	800c2380 	call	800c238 <altera_avalon_jtag_uart_ioctl>
}
 800be58:	e037883a 	mov	sp,fp
 800be5c:	dfc00117 	ldw	ra,4(sp)
 800be60:	df000017 	ldw	fp,0(sp)
 800be64:	dec00204 	addi	sp,sp,8
 800be68:	f800283a 	ret

0800be6c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 800be6c:	defffa04 	addi	sp,sp,-24
 800be70:	dfc00515 	stw	ra,20(sp)
 800be74:	df000415 	stw	fp,16(sp)
 800be78:	df000404 	addi	fp,sp,16
 800be7c:	e13fff15 	stw	r4,-4(fp)
 800be80:	e17ffe15 	stw	r5,-8(fp)
 800be84:	e1bffd15 	stw	r6,-12(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800be88:	e0bfff17 	ldw	r2,-4(fp)
 800be8c:	00c00044 	movi	r3,1
 800be90:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 800be94:	e0bfff17 	ldw	r2,-4(fp)
 800be98:	10800017 	ldw	r2,0(r2)
 800be9c:	10800104 	addi	r2,r2,4
 800bea0:	1007883a 	mov	r3,r2
 800bea4:	e0bfff17 	ldw	r2,-4(fp)
 800bea8:	10800817 	ldw	r2,32(r2)
 800beac:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 800beb0:	e0bffe17 	ldw	r2,-8(fp)
 800beb4:	e0fffd17 	ldw	r3,-12(fp)
 800beb8:	d8000015 	stw	zero,0(sp)
 800bebc:	e1ffff17 	ldw	r7,-4(fp)
 800bec0:	01820074 	movhi	r6,2049
 800bec4:	31afcb04 	addi	r6,r6,-16596
 800bec8:	180b883a 	mov	r5,r3
 800becc:	1009883a 	mov	r4,r2
 800bed0:	800ce080 	call	800ce08 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 800bed4:	e0bfff17 	ldw	r2,-4(fp)
 800bed8:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 800bedc:	e0bfff17 	ldw	r2,-4(fp)
 800bee0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 800bee4:	d0e82717 	ldw	r3,-24420(gp)
 800bee8:	e1ffff17 	ldw	r7,-4(fp)
 800beec:	01820074 	movhi	r6,2049
 800bef0:	31b04c04 	addi	r6,r6,-16080
 800bef4:	180b883a 	mov	r5,r3
 800bef8:	1009883a 	mov	r4,r2
 800befc:	800c8600 	call	800c860 <alt_alarm_start>
 800bf00:	1000040e 	bge	r2,zero,800bf14 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 800bf04:	e0ffff17 	ldw	r3,-4(fp)
 800bf08:	00a00034 	movhi	r2,32768
 800bf0c:	10bfffc4 	addi	r2,r2,-1
 800bf10:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 800bf14:	0001883a 	nop
 800bf18:	e037883a 	mov	sp,fp
 800bf1c:	dfc00117 	ldw	ra,4(sp)
 800bf20:	df000017 	ldw	fp,0(sp)
 800bf24:	dec00204 	addi	sp,sp,8
 800bf28:	f800283a 	ret

0800bf2c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 800bf2c:	defff804 	addi	sp,sp,-32
 800bf30:	df000715 	stw	fp,28(sp)
 800bf34:	df000704 	addi	fp,sp,28
 800bf38:	e13ff915 	stw	r4,-28(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 800bf3c:	e0bff917 	ldw	r2,-28(fp)
 800bf40:	e0bffd15 	stw	r2,-12(fp)
  unsigned int base = sp->base;
 800bf44:	e0bffd17 	ldw	r2,-12(fp)
 800bf48:	10800017 	ldw	r2,0(r2)
 800bf4c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800bf50:	e0bffc17 	ldw	r2,-16(fp)
 800bf54:	10800104 	addi	r2,r2,4
 800bf58:	10800037 	ldwio	r2,0(r2)
 800bf5c:	e0bffb15 	stw	r2,-20(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 800bf60:	e0bffb17 	ldw	r2,-20(fp)
 800bf64:	1080c00c 	andi	r2,r2,768
 800bf68:	10006b26 	beq	r2,zero,800c118 <altera_avalon_jtag_uart_irq+0x1ec>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 800bf6c:	e0bffb17 	ldw	r2,-20(fp)
 800bf70:	1080400c 	andi	r2,r2,256
 800bf74:	10003426 	beq	r2,zero,800c048 <altera_avalon_jtag_uart_irq+0x11c>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 800bf78:	00800074 	movhi	r2,1
 800bf7c:	e0bfff15 	stw	r2,-4(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800bf80:	e0bffd17 	ldw	r2,-12(fp)
 800bf84:	10800a17 	ldw	r2,40(r2)
 800bf88:	10800044 	addi	r2,r2,1
 800bf8c:	1081ffcc 	andi	r2,r2,2047
 800bf90:	e0bffa15 	stw	r2,-24(fp)
        if (next == sp->rx_out)
 800bf94:	e0bffd17 	ldw	r2,-12(fp)
 800bf98:	10800b17 	ldw	r2,44(r2)
 800bf9c:	e0fffa17 	ldw	r3,-24(fp)
 800bfa0:	18801426 	beq	r3,r2,800bff4 <altera_avalon_jtag_uart_irq+0xc8>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 800bfa4:	e0bffc17 	ldw	r2,-16(fp)
 800bfa8:	10800037 	ldwio	r2,0(r2)
 800bfac:	e0bfff15 	stw	r2,-4(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 800bfb0:	e0bfff17 	ldw	r2,-4(fp)
 800bfb4:	10a0000c 	andi	r2,r2,32768
 800bfb8:	10001026 	beq	r2,zero,800bffc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 800bfbc:	e0bffd17 	ldw	r2,-12(fp)
 800bfc0:	10800a17 	ldw	r2,40(r2)
 800bfc4:	e0ffff17 	ldw	r3,-4(fp)
 800bfc8:	1809883a 	mov	r4,r3
 800bfcc:	e0fffd17 	ldw	r3,-12(fp)
 800bfd0:	1885883a 	add	r2,r3,r2
 800bfd4:	11000e05 	stb	r4,56(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800bfd8:	e0bffd17 	ldw	r2,-12(fp)
 800bfdc:	10800a17 	ldw	r2,40(r2)
 800bfe0:	10800044 	addi	r2,r2,1
 800bfe4:	10c1ffcc 	andi	r3,r2,2047
 800bfe8:	e0bffd17 	ldw	r2,-12(fp)
 800bfec:	10c00a15 	stw	r3,40(r2)
      {
 800bff0:	003fe306 	br	800bf80 <altera_avalon_jtag_uart_irq+0x54>
          break;
 800bff4:	0001883a 	nop
 800bff8:	00000106 	br	800c000 <altera_avalon_jtag_uart_irq+0xd4>
          break;
 800bffc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 800c000:	e0bfff17 	ldw	r2,-4(fp)
 800c004:	10bfffec 	andhi	r2,r2,65535
 800c008:	10000f26 	beq	r2,zero,800c048 <altera_avalon_jtag_uart_irq+0x11c>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c00c:	e0bffd17 	ldw	r2,-12(fp)
 800c010:	10c00817 	ldw	r3,32(r2)
 800c014:	00bfff84 	movi	r2,-2
 800c018:	1886703a 	and	r3,r3,r2
 800c01c:	e0bffd17 	ldw	r2,-12(fp)
 800c020:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 800c024:	e0bffc17 	ldw	r2,-16(fp)
 800c028:	10800104 	addi	r2,r2,4
 800c02c:	1007883a 	mov	r3,r2
 800c030:	e0bffd17 	ldw	r2,-12(fp)
 800c034:	10800817 	ldw	r2,32(r2)
 800c038:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c03c:	e0bffc17 	ldw	r2,-16(fp)
 800c040:	10800104 	addi	r2,r2,4
 800c044:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 800c048:	e0bffb17 	ldw	r2,-20(fp)
 800c04c:	1080800c 	andi	r2,r2,512
 800c050:	103fbf26 	beq	r2,zero,800bf50 <altera_avalon_jtag_uart_irq+0x24>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 800c054:	e0bffb17 	ldw	r2,-20(fp)
 800c058:	1004d43a 	srli	r2,r2,16
 800c05c:	e0bffe15 	stw	r2,-8(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 800c060:	00001306 	br	800c0b0 <altera_avalon_jtag_uart_irq+0x184>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 800c064:	e0bffc17 	ldw	r2,-16(fp)
 800c068:	e0fffd17 	ldw	r3,-12(fp)
 800c06c:	18c00d17 	ldw	r3,52(r3)
 800c070:	e13ffd17 	ldw	r4,-12(fp)
 800c074:	20c7883a 	add	r3,r4,r3
 800c078:	18c20e03 	ldbu	r3,2104(r3)
 800c07c:	18c03fcc 	andi	r3,r3,255
 800c080:	18c0201c 	xori	r3,r3,128
 800c084:	18ffe004 	addi	r3,r3,-128
 800c088:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c08c:	e0bffd17 	ldw	r2,-12(fp)
 800c090:	10800d17 	ldw	r2,52(r2)
 800c094:	10800044 	addi	r2,r2,1
 800c098:	10c1ffcc 	andi	r3,r2,2047
 800c09c:	e0bffd17 	ldw	r2,-12(fp)
 800c0a0:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 800c0a4:	e0bffe17 	ldw	r2,-8(fp)
 800c0a8:	10bfffc4 	addi	r2,r2,-1
 800c0ac:	e0bffe15 	stw	r2,-8(fp)
      while (space > 0 && sp->tx_out != sp->tx_in)
 800c0b0:	e0bffe17 	ldw	r2,-8(fp)
 800c0b4:	10000526 	beq	r2,zero,800c0cc <altera_avalon_jtag_uart_irq+0x1a0>
 800c0b8:	e0bffd17 	ldw	r2,-12(fp)
 800c0bc:	10c00d17 	ldw	r3,52(r2)
 800c0c0:	e0bffd17 	ldw	r2,-12(fp)
 800c0c4:	10800c17 	ldw	r2,48(r2)
 800c0c8:	18bfe61e 	bne	r3,r2,800c064 <altera_avalon_jtag_uart_irq+0x138>
      }

      if (space > 0)
 800c0cc:	e0bffe17 	ldw	r2,-8(fp)
 800c0d0:	103f9f26 	beq	r2,zero,800bf50 <altera_avalon_jtag_uart_irq+0x24>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c0d4:	e0bffd17 	ldw	r2,-12(fp)
 800c0d8:	10c00817 	ldw	r3,32(r2)
 800c0dc:	00bfff44 	movi	r2,-3
 800c0e0:	1886703a 	and	r3,r3,r2
 800c0e4:	e0bffd17 	ldw	r2,-12(fp)
 800c0e8:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c0ec:	e0bffd17 	ldw	r2,-12(fp)
 800c0f0:	10800017 	ldw	r2,0(r2)
 800c0f4:	10800104 	addi	r2,r2,4
 800c0f8:	1007883a 	mov	r3,r2
 800c0fc:	e0bffd17 	ldw	r2,-12(fp)
 800c100:	10800817 	ldw	r2,32(r2)
 800c104:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 800c108:	e0bffc17 	ldw	r2,-16(fp)
 800c10c:	10800104 	addi	r2,r2,4
 800c110:	10800037 	ldwio	r2,0(r2)
  {
 800c114:	003f8e06 	br	800bf50 <altera_avalon_jtag_uart_irq+0x24>
      break;
 800c118:	0001883a 	nop
      }
    }
  }
}
 800c11c:	0001883a 	nop
 800c120:	e037883a 	mov	sp,fp
 800c124:	df000017 	ldw	fp,0(sp)
 800c128:	dec00104 	addi	sp,sp,4
 800c12c:	f800283a 	ret

0800c130 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 800c130:	defffc04 	addi	sp,sp,-16
 800c134:	df000315 	stw	fp,12(sp)
 800c138:	df000304 	addi	fp,sp,12
 800c13c:	e13ffd15 	stw	r4,-12(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 800c140:	e0bffd17 	ldw	r2,-12(fp)
 800c144:	e0bfff15 	stw	r2,-4(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 800c148:	e0bfff17 	ldw	r2,-4(fp)
 800c14c:	10800017 	ldw	r2,0(r2)
 800c150:	10800104 	addi	r2,r2,4
 800c154:	10800037 	ldwio	r2,0(r2)
 800c158:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 800c15c:	e0bffe17 	ldw	r2,-8(fp)
 800c160:	1081000c 	andi	r2,r2,1024
 800c164:	10000b26 	beq	r2,zero,800c194 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 800c168:	e0bfff17 	ldw	r2,-4(fp)
 800c16c:	10800017 	ldw	r2,0(r2)
 800c170:	10800104 	addi	r2,r2,4
 800c174:	1007883a 	mov	r3,r2
 800c178:	e0bfff17 	ldw	r2,-4(fp)
 800c17c:	10800817 	ldw	r2,32(r2)
 800c180:	10810014 	ori	r2,r2,1024
 800c184:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 800c188:	e0bfff17 	ldw	r2,-4(fp)
 800c18c:	10000915 	stw	zero,36(r2)
 800c190:	00000a06 	br	800c1bc <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 800c194:	e0bfff17 	ldw	r2,-4(fp)
 800c198:	10c00917 	ldw	r3,36(r2)
 800c19c:	00a00034 	movhi	r2,32768
 800c1a0:	10bfff04 	addi	r2,r2,-4
 800c1a4:	10c00536 	bltu	r2,r3,800c1bc <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 800c1a8:	e0bfff17 	ldw	r2,-4(fp)
 800c1ac:	10800917 	ldw	r2,36(r2)
 800c1b0:	10c00044 	addi	r3,r2,1
 800c1b4:	e0bfff17 	ldw	r2,-4(fp)
 800c1b8:	10c00915 	stw	r3,36(r2)
 800c1bc:	d0a82717 	ldw	r2,-24420(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 800c1c0:	e037883a 	mov	sp,fp
 800c1c4:	df000017 	ldw	fp,0(sp)
 800c1c8:	dec00104 	addi	sp,sp,4
 800c1cc:	f800283a 	ret

0800c1d0 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 800c1d0:	defffd04 	addi	sp,sp,-12
 800c1d4:	df000215 	stw	fp,8(sp)
 800c1d8:	df000204 	addi	fp,sp,8
 800c1dc:	e13fff15 	stw	r4,-4(fp)
 800c1e0:	e17ffe15 	stw	r5,-8(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c1e4:	00000506 	br	800c1fc <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 800c1e8:	e0bffe17 	ldw	r2,-8(fp)
 800c1ec:	1090000c 	andi	r2,r2,16384
 800c1f0:	10000226 	beq	r2,zero,800c1fc <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 800c1f4:	00bffd44 	movi	r2,-11
 800c1f8:	00000b06 	br	800c228 <altera_avalon_jtag_uart_close+0x58>
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 800c1fc:	e0bfff17 	ldw	r2,-4(fp)
 800c200:	10c00d17 	ldw	r3,52(r2)
 800c204:	e0bfff17 	ldw	r2,-4(fp)
 800c208:	10800c17 	ldw	r2,48(r2)
 800c20c:	18800526 	beq	r3,r2,800c224 <altera_avalon_jtag_uart_close+0x54>
 800c210:	e0bfff17 	ldw	r2,-4(fp)
 800c214:	10c00917 	ldw	r3,36(r2)
 800c218:	e0bfff17 	ldw	r2,-4(fp)
 800c21c:	10800117 	ldw	r2,4(r2)
 800c220:	18bff136 	bltu	r3,r2,800c1e8 <altera_avalon_jtag_uart_close+0x18>
    }
  }

  return 0;
 800c224:	0005883a 	mov	r2,zero
}
 800c228:	e037883a 	mov	sp,fp
 800c22c:	df000017 	ldw	fp,0(sp)
 800c230:	dec00104 	addi	sp,sp,4
 800c234:	f800283a 	ret

0800c238 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 800c238:	defffa04 	addi	sp,sp,-24
 800c23c:	df000515 	stw	fp,20(sp)
 800c240:	df000504 	addi	fp,sp,20
 800c244:	e13ffd15 	stw	r4,-12(fp)
 800c248:	e17ffc15 	stw	r5,-16(fp)
 800c24c:	e1bffb15 	stw	r6,-20(fp)
  int rc = -ENOTTY;
 800c250:	00bff9c4 	movi	r2,-25
 800c254:	e0bfff15 	stw	r2,-4(fp)

  switch (req)
 800c258:	e0bffc17 	ldw	r2,-16(fp)
 800c25c:	109a8060 	cmpeqi	r2,r2,27137
 800c260:	1000041e 	bne	r2,zero,800c274 <altera_avalon_jtag_uart_ioctl+0x3c>
 800c264:	e0bffc17 	ldw	r2,-16(fp)
 800c268:	109a80a0 	cmpeqi	r2,r2,27138
 800c26c:	1000181e 	bne	r2,zero,800c2d0 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 800c270:	00002906 	br	800c318 <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
 800c274:	e0bffd17 	ldw	r2,-12(fp)
 800c278:	10c00117 	ldw	r3,4(r2)
 800c27c:	00a00034 	movhi	r2,32768
 800c280:	10bfffc4 	addi	r2,r2,-1
 800c284:	18802126 	beq	r3,r2,800c30c <altera_avalon_jtag_uart_ioctl+0xd4>
      int timeout = *((int *)arg);
 800c288:	e0bffb17 	ldw	r2,-20(fp)
 800c28c:	10800017 	ldw	r2,0(r2)
 800c290:	e0bffe15 	stw	r2,-8(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 800c294:	e0bffe17 	ldw	r2,-8(fp)
 800c298:	10800090 	cmplti	r2,r2,2
 800c29c:	1000061e 	bne	r2,zero,800c2b8 <altera_avalon_jtag_uart_ioctl+0x80>
 800c2a0:	e0fffe17 	ldw	r3,-8(fp)
 800c2a4:	00a00034 	movhi	r2,32768
 800c2a8:	10bfffc4 	addi	r2,r2,-1
 800c2ac:	18800226 	beq	r3,r2,800c2b8 <altera_avalon_jtag_uart_ioctl+0x80>
 800c2b0:	e0bffe17 	ldw	r2,-8(fp)
 800c2b4:	00000206 	br	800c2c0 <altera_avalon_jtag_uart_ioctl+0x88>
 800c2b8:	00a00034 	movhi	r2,32768
 800c2bc:	10bfff84 	addi	r2,r2,-2
 800c2c0:	e0fffd17 	ldw	r3,-12(fp)
 800c2c4:	18800115 	stw	r2,4(r3)
      rc = 0;
 800c2c8:	e03fff15 	stw	zero,-4(fp)
    break;
 800c2cc:	00000f06 	br	800c30c <altera_avalon_jtag_uart_ioctl+0xd4>
    if (sp->timeout != INT_MAX)
 800c2d0:	e0bffd17 	ldw	r2,-12(fp)
 800c2d4:	10c00117 	ldw	r3,4(r2)
 800c2d8:	00a00034 	movhi	r2,32768
 800c2dc:	10bfffc4 	addi	r2,r2,-1
 800c2e0:	18800c26 	beq	r3,r2,800c314 <altera_avalon_jtag_uart_ioctl+0xdc>
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 800c2e4:	e0bffd17 	ldw	r2,-12(fp)
 800c2e8:	10c00917 	ldw	r3,36(r2)
 800c2ec:	e0bffd17 	ldw	r2,-12(fp)
 800c2f0:	10800117 	ldw	r2,4(r2)
 800c2f4:	1885803a 	cmpltu	r2,r3,r2
 800c2f8:	10c03fcc 	andi	r3,r2,255
 800c2fc:	e0bffb17 	ldw	r2,-20(fp)
 800c300:	10c00015 	stw	r3,0(r2)
      rc = 0;
 800c304:	e03fff15 	stw	zero,-4(fp)
    break;
 800c308:	00000206 	br	800c314 <altera_avalon_jtag_uart_ioctl+0xdc>
    break;
 800c30c:	0001883a 	nop
 800c310:	00000106 	br	800c318 <altera_avalon_jtag_uart_ioctl+0xe0>
    break;
 800c314:	0001883a 	nop
  }

  return rc;
 800c318:	e0bfff17 	ldw	r2,-4(fp)
}
 800c31c:	e037883a 	mov	sp,fp
 800c320:	df000017 	ldw	fp,0(sp)
 800c324:	dec00104 	addi	sp,sp,4
 800c328:	f800283a 	ret

0800c32c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 800c32c:	defff304 	addi	sp,sp,-52
 800c330:	dfc00c15 	stw	ra,48(sp)
 800c334:	df000b15 	stw	fp,44(sp)
 800c338:	df000b04 	addi	fp,sp,44
 800c33c:	e13ff815 	stw	r4,-32(fp)
 800c340:	e17ff715 	stw	r5,-36(fp)
 800c344:	e1bff615 	stw	r6,-40(fp)
 800c348:	e1fff515 	stw	r7,-44(fp)
  char * ptr = buffer;
 800c34c:	e0bff717 	ldw	r2,-36(fp)
 800c350:	e0bfff15 	stw	r2,-4(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 800c354:	00004706 	br	800c474 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 800c358:	e0bff817 	ldw	r2,-32(fp)
 800c35c:	10800a17 	ldw	r2,40(r2)
 800c360:	e0bffd15 	stw	r2,-12(fp)
      out = sp->rx_out;
 800c364:	e0bff817 	ldw	r2,-32(fp)
 800c368:	10800b17 	ldw	r2,44(r2)
 800c36c:	e0bffc15 	stw	r2,-16(fp)

      if (in >= out)
 800c370:	e0fffd17 	ldw	r3,-12(fp)
 800c374:	e0bffc17 	ldw	r2,-16(fp)
 800c378:	18800536 	bltu	r3,r2,800c390 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 800c37c:	e0fffd17 	ldw	r3,-12(fp)
 800c380:	e0bffc17 	ldw	r2,-16(fp)
 800c384:	1885c83a 	sub	r2,r3,r2
 800c388:	e0bffe15 	stw	r2,-8(fp)
 800c38c:	00000406 	br	800c3a0 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 800c390:	00c20004 	movi	r3,2048
 800c394:	e0bffc17 	ldw	r2,-16(fp)
 800c398:	1885c83a 	sub	r2,r3,r2
 800c39c:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 800c3a0:	e0bffe17 	ldw	r2,-8(fp)
 800c3a4:	10001e26 	beq	r2,zero,800c420 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 800c3a8:	e0fff617 	ldw	r3,-40(fp)
 800c3ac:	e0bffe17 	ldw	r2,-8(fp)
 800c3b0:	1880022e 	bgeu	r3,r2,800c3bc <altera_avalon_jtag_uart_read+0x90>
        n = space;
 800c3b4:	e0bff617 	ldw	r2,-40(fp)
 800c3b8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 800c3bc:	e0bff817 	ldw	r2,-32(fp)
 800c3c0:	10c00e04 	addi	r3,r2,56
 800c3c4:	e0bffc17 	ldw	r2,-16(fp)
 800c3c8:	1885883a 	add	r2,r3,r2
 800c3cc:	e1bffe17 	ldw	r6,-8(fp)
 800c3d0:	100b883a 	mov	r5,r2
 800c3d4:	e13fff17 	ldw	r4,-4(fp)
 800c3d8:	80050580 	call	8005058 <memcpy>
      ptr   += n;
 800c3dc:	e0ffff17 	ldw	r3,-4(fp)
 800c3e0:	e0bffe17 	ldw	r2,-8(fp)
 800c3e4:	1885883a 	add	r2,r3,r2
 800c3e8:	e0bfff15 	stw	r2,-4(fp)
      space -= n;
 800c3ec:	e0fff617 	ldw	r3,-40(fp)
 800c3f0:	e0bffe17 	ldw	r2,-8(fp)
 800c3f4:	1885c83a 	sub	r2,r3,r2
 800c3f8:	e0bff615 	stw	r2,-40(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c3fc:	e0fffc17 	ldw	r3,-16(fp)
 800c400:	e0bffe17 	ldw	r2,-8(fp)
 800c404:	1885883a 	add	r2,r3,r2
 800c408:	10c1ffcc 	andi	r3,r2,2047
 800c40c:	e0bff817 	ldw	r2,-32(fp)
 800c410:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 800c414:	e0bff617 	ldw	r2,-40(fp)
 800c418:	00bfcf16 	blt	zero,r2,800c358 <altera_avalon_jtag_uart_read+0x2c>
 800c41c:	00000106 	br	800c424 <altera_avalon_jtag_uart_read+0xf8>
        break; /* No more data available */
 800c420:	0001883a 	nop

    /* If we read any data then return it */
    if (ptr != buffer)
 800c424:	e0ffff17 	ldw	r3,-4(fp)
 800c428:	e0bff717 	ldw	r2,-36(fp)
 800c42c:	1880141e 	bne	r3,r2,800c480 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 800c430:	e0bff517 	ldw	r2,-44(fp)
 800c434:	1090000c 	andi	r2,r2,16384
 800c438:	1000131e 	bne	r2,zero,800c488 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 800c43c:	0001883a 	nop
 800c440:	e0bff817 	ldw	r2,-32(fp)
 800c444:	10800a17 	ldw	r2,40(r2)
 800c448:	e0fffd17 	ldw	r3,-12(fp)
 800c44c:	1880051e 	bne	r3,r2,800c464 <altera_avalon_jtag_uart_read+0x138>
 800c450:	e0bff817 	ldw	r2,-32(fp)
 800c454:	10c00917 	ldw	r3,36(r2)
 800c458:	e0bff817 	ldw	r2,-32(fp)
 800c45c:	10800117 	ldw	r2,4(r2)
 800c460:	18bff736 	bltu	r3,r2,800c440 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 800c464:	e0bff817 	ldw	r2,-32(fp)
 800c468:	10800a17 	ldw	r2,40(r2)
 800c46c:	e0fffd17 	ldw	r3,-12(fp)
 800c470:	18800726 	beq	r3,r2,800c490 <altera_avalon_jtag_uart_read+0x164>
  while (space > 0)
 800c474:	e0bff617 	ldw	r2,-40(fp)
 800c478:	00bfb716 	blt	zero,r2,800c358 <altera_avalon_jtag_uart_read+0x2c>
 800c47c:	00000506 	br	800c494 <altera_avalon_jtag_uart_read+0x168>
      break;
 800c480:	0001883a 	nop
 800c484:	00000306 	br	800c494 <altera_avalon_jtag_uart_read+0x168>
      break;
 800c488:	0001883a 	nop
 800c48c:	00000106 	br	800c494 <altera_avalon_jtag_uart_read+0x168>
      break;
 800c490:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 800c494:	e0ffff17 	ldw	r3,-4(fp)
 800c498:	e0bff717 	ldw	r2,-36(fp)
 800c49c:	18801826 	beq	r3,r2,800c500 <altera_avalon_jtag_uart_read+0x1d4>
  NIOS2_READ_STATUS (context);
 800c4a0:	0005303a 	rdctl	r2,status
 800c4a4:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c4a8:	e0fff917 	ldw	r3,-28(fp)
 800c4ac:	00bfff84 	movi	r2,-2
 800c4b0:	1884703a 	and	r2,r3,r2
 800c4b4:	1001703a 	wrctl	status,r2
  return context;
 800c4b8:	e0bff917 	ldw	r2,-28(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 800c4bc:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 800c4c0:	e0bff817 	ldw	r2,-32(fp)
 800c4c4:	10800817 	ldw	r2,32(r2)
 800c4c8:	10c00054 	ori	r3,r2,1
 800c4cc:	e0bff817 	ldw	r2,-32(fp)
 800c4d0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c4d4:	e0bff817 	ldw	r2,-32(fp)
 800c4d8:	10800017 	ldw	r2,0(r2)
 800c4dc:	10800104 	addi	r2,r2,4
 800c4e0:	1007883a 	mov	r3,r2
 800c4e4:	e0bff817 	ldw	r2,-32(fp)
 800c4e8:	10800817 	ldw	r2,32(r2)
 800c4ec:	18800035 	stwio	r2,0(r3)
 800c4f0:	e0bffb17 	ldw	r2,-20(fp)
 800c4f4:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 800c4f8:	e0bffa17 	ldw	r2,-24(fp)
 800c4fc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 800c500:	e0ffff17 	ldw	r3,-4(fp)
 800c504:	e0bff717 	ldw	r2,-36(fp)
 800c508:	18800426 	beq	r3,r2,800c51c <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 800c50c:	e0ffff17 	ldw	r3,-4(fp)
 800c510:	e0bff717 	ldw	r2,-36(fp)
 800c514:	1885c83a 	sub	r2,r3,r2
 800c518:	00000606 	br	800c534 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 800c51c:	e0bff517 	ldw	r2,-44(fp)
 800c520:	1090000c 	andi	r2,r2,16384
 800c524:	10000226 	beq	r2,zero,800c530 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 800c528:	00bffd44 	movi	r2,-11
 800c52c:	00000106 	br	800c534 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 800c530:	00bffec4 	movi	r2,-5
}
 800c534:	e037883a 	mov	sp,fp
 800c538:	dfc00117 	ldw	ra,4(sp)
 800c53c:	df000017 	ldw	fp,0(sp)
 800c540:	dec00204 	addi	sp,sp,8
 800c544:	f800283a 	ret

0800c548 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 800c548:	defff304 	addi	sp,sp,-52
 800c54c:	dfc00c15 	stw	ra,48(sp)
 800c550:	df000b15 	stw	fp,44(sp)
 800c554:	df000b04 	addi	fp,sp,44
 800c558:	e13ff815 	stw	r4,-32(fp)
 800c55c:	e17ff715 	stw	r5,-36(fp)
 800c560:	e1bff615 	stw	r6,-40(fp)
 800c564:	e1fff515 	stw	r7,-44(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 800c568:	e03fff15 	stw	zero,-4(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 800c56c:	e0bff717 	ldw	r2,-36(fp)
 800c570:	e0bffd15 	stw	r2,-12(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 800c574:	00003706 	br	800c654 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 800c578:	e0bff817 	ldw	r2,-32(fp)
 800c57c:	10800c17 	ldw	r2,48(r2)
 800c580:	e0bffc15 	stw	r2,-16(fp)
      out = sp->tx_out;
 800c584:	e0bff817 	ldw	r2,-32(fp)
 800c588:	10800d17 	ldw	r2,52(r2)
 800c58c:	e0bfff15 	stw	r2,-4(fp)

      if (in < out)
 800c590:	e0fffc17 	ldw	r3,-16(fp)
 800c594:	e0bfff17 	ldw	r2,-4(fp)
 800c598:	1880062e 	bgeu	r3,r2,800c5b4 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 800c59c:	e0ffff17 	ldw	r3,-4(fp)
 800c5a0:	e0bffc17 	ldw	r2,-16(fp)
 800c5a4:	1885c83a 	sub	r2,r3,r2
 800c5a8:	10bfffc4 	addi	r2,r2,-1
 800c5ac:	e0bffe15 	stw	r2,-8(fp)
 800c5b0:	00000b06 	br	800c5e0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 800c5b4:	e0bfff17 	ldw	r2,-4(fp)
 800c5b8:	10000526 	beq	r2,zero,800c5d0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 800c5bc:	00c20004 	movi	r3,2048
 800c5c0:	e0bffc17 	ldw	r2,-16(fp)
 800c5c4:	1885c83a 	sub	r2,r3,r2
 800c5c8:	e0bffe15 	stw	r2,-8(fp)
 800c5cc:	00000406 	br	800c5e0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 800c5d0:	00c1ffc4 	movi	r3,2047
 800c5d4:	e0bffc17 	ldw	r2,-16(fp)
 800c5d8:	1885c83a 	sub	r2,r3,r2
 800c5dc:	e0bffe15 	stw	r2,-8(fp)

      if (n == 0)
 800c5e0:	e0bffe17 	ldw	r2,-8(fp)
 800c5e4:	10001e26 	beq	r2,zero,800c660 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 800c5e8:	e0fff617 	ldw	r3,-40(fp)
 800c5ec:	e0bffe17 	ldw	r2,-8(fp)
 800c5f0:	1880022e 	bgeu	r3,r2,800c5fc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 800c5f4:	e0bff617 	ldw	r2,-40(fp)
 800c5f8:	e0bffe15 	stw	r2,-8(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 800c5fc:	e0bff817 	ldw	r2,-32(fp)
 800c600:	10c20e04 	addi	r3,r2,2104
 800c604:	e0bffc17 	ldw	r2,-16(fp)
 800c608:	1885883a 	add	r2,r3,r2
 800c60c:	e1bffe17 	ldw	r6,-8(fp)
 800c610:	e17ff717 	ldw	r5,-36(fp)
 800c614:	1009883a 	mov	r4,r2
 800c618:	80050580 	call	8005058 <memcpy>
      ptr   += n;
 800c61c:	e0fff717 	ldw	r3,-36(fp)
 800c620:	e0bffe17 	ldw	r2,-8(fp)
 800c624:	1885883a 	add	r2,r3,r2
 800c628:	e0bff715 	stw	r2,-36(fp)
      count -= n;
 800c62c:	e0fff617 	ldw	r3,-40(fp)
 800c630:	e0bffe17 	ldw	r2,-8(fp)
 800c634:	1885c83a 	sub	r2,r3,r2
 800c638:	e0bff615 	stw	r2,-40(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 800c63c:	e0fffc17 	ldw	r3,-16(fp)
 800c640:	e0bffe17 	ldw	r2,-8(fp)
 800c644:	1885883a 	add	r2,r3,r2
 800c648:	10c1ffcc 	andi	r3,r2,2047
 800c64c:	e0bff817 	ldw	r2,-32(fp)
 800c650:	10c00c15 	stw	r3,48(r2)
    while (count > 0)
 800c654:	e0bff617 	ldw	r2,-40(fp)
 800c658:	00bfc716 	blt	zero,r2,800c578 <altera_avalon_jtag_uart_write+0x30>
 800c65c:	00000106 	br	800c664 <altera_avalon_jtag_uart_write+0x11c>
        break;
 800c660:	0001883a 	nop
  NIOS2_READ_STATUS (context);
 800c664:	0005303a 	rdctl	r2,status
 800c668:	e0bff915 	stw	r2,-28(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c66c:	e0fff917 	ldw	r3,-28(fp)
 800c670:	00bfff84 	movi	r2,-2
 800c674:	1884703a 	and	r2,r3,r2
 800c678:	1001703a 	wrctl	status,r2
  return context;
 800c67c:	e0bff917 	ldw	r2,-28(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 800c680:	e0bffb15 	stw	r2,-20(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 800c684:	e0bff817 	ldw	r2,-32(fp)
 800c688:	10800817 	ldw	r2,32(r2)
 800c68c:	10c00094 	ori	r3,r2,2
 800c690:	e0bff817 	ldw	r2,-32(fp)
 800c694:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 800c698:	e0bff817 	ldw	r2,-32(fp)
 800c69c:	10800017 	ldw	r2,0(r2)
 800c6a0:	10800104 	addi	r2,r2,4
 800c6a4:	1007883a 	mov	r3,r2
 800c6a8:	e0bff817 	ldw	r2,-32(fp)
 800c6ac:	10800817 	ldw	r2,32(r2)
 800c6b0:	18800035 	stwio	r2,0(r3)
 800c6b4:	e0bffb17 	ldw	r2,-20(fp)
 800c6b8:	e0bffa15 	stw	r2,-24(fp)
  NIOS2_WRITE_STATUS (context);
 800c6bc:	e0bffa17 	ldw	r2,-24(fp)
 800c6c0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 800c6c4:	e0bff617 	ldw	r2,-40(fp)
 800c6c8:	0080100e 	bge	zero,r2,800c70c <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 800c6cc:	e0bff517 	ldw	r2,-44(fp)
 800c6d0:	1090000c 	andi	r2,r2,16384
 800c6d4:	1000101e 	bne	r2,zero,800c718 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 800c6d8:	0001883a 	nop
 800c6dc:	e0bff817 	ldw	r2,-32(fp)
 800c6e0:	10800d17 	ldw	r2,52(r2)
 800c6e4:	e0ffff17 	ldw	r3,-4(fp)
 800c6e8:	1880051e 	bne	r3,r2,800c700 <altera_avalon_jtag_uart_write+0x1b8>
 800c6ec:	e0bff817 	ldw	r2,-32(fp)
 800c6f0:	10c00917 	ldw	r3,36(r2)
 800c6f4:	e0bff817 	ldw	r2,-32(fp)
 800c6f8:	10800117 	ldw	r2,4(r2)
 800c6fc:	18bff736 	bltu	r3,r2,800c6dc <altera_avalon_jtag_uart_write+0x194>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 800c700:	e0bff817 	ldw	r2,-32(fp)
 800c704:	10800917 	ldw	r2,36(r2)
 800c708:	1000051e 	bne	r2,zero,800c720 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 800c70c:	e0bff617 	ldw	r2,-40(fp)
 800c710:	00bfd016 	blt	zero,r2,800c654 <altera_avalon_jtag_uart_write+0x10c>
 800c714:	00000306 	br	800c724 <altera_avalon_jtag_uart_write+0x1dc>
        break;
 800c718:	0001883a 	nop
 800c71c:	00000106 	br	800c724 <altera_avalon_jtag_uart_write+0x1dc>
         break;
 800c720:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 800c724:	e0fff717 	ldw	r3,-36(fp)
 800c728:	e0bffd17 	ldw	r2,-12(fp)
 800c72c:	18800426 	beq	r3,r2,800c740 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 800c730:	e0fff717 	ldw	r3,-36(fp)
 800c734:	e0bffd17 	ldw	r2,-12(fp)
 800c738:	1885c83a 	sub	r2,r3,r2
 800c73c:	00000606 	br	800c758 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 800c740:	e0bff517 	ldw	r2,-44(fp)
 800c744:	1090000c 	andi	r2,r2,16384
 800c748:	10000226 	beq	r2,zero,800c754 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 800c74c:	00bffd44 	movi	r2,-11
 800c750:	00000106 	br	800c758 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 800c754:	00bffec4 	movi	r2,-5
}
 800c758:	e037883a 	mov	sp,fp
 800c75c:	dfc00117 	ldw	ra,4(sp)
 800c760:	df000017 	ldw	fp,0(sp)
 800c764:	dec00204 	addi	sp,sp,8
 800c768:	f800283a 	ret

0800c76c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 800c76c:	defffa04 	addi	sp,sp,-24
 800c770:	dfc00515 	stw	ra,20(sp)
 800c774:	df000415 	stw	fp,16(sp)
 800c778:	df000404 	addi	fp,sp,16
 800c77c:	e13ffc15 	stw	r4,-16(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 800c780:	0007883a 	mov	r3,zero
 800c784:	e0bffc17 	ldw	r2,-16(fp)
 800c788:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 800c78c:	e0bffc17 	ldw	r2,-16(fp)
 800c790:	10800104 	addi	r2,r2,4
 800c794:	10800037 	ldwio	r2,0(r2)
  NIOS2_READ_STATUS (context);
 800c798:	0005303a 	rdctl	r2,status
 800c79c:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c7a0:	e0fffd17 	ldw	r3,-12(fp)
 800c7a4:	00bfff84 	movi	r2,-2
 800c7a8:	1884703a 	and	r2,r3,r2
 800c7ac:	1001703a 	wrctl	status,r2
  return context;
 800c7b0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 800c7b4:	e0bfff15 	stw	r2,-4(fp)
  alt_tick ();
 800c7b8:	800d5700 	call	800d570 <alt_tick>
 800c7bc:	e0bfff17 	ldw	r2,-4(fp)
 800c7c0:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 800c7c4:	e0bffe17 	ldw	r2,-8(fp)
 800c7c8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 800c7cc:	0001883a 	nop
 800c7d0:	e037883a 	mov	sp,fp
 800c7d4:	dfc00117 	ldw	ra,4(sp)
 800c7d8:	df000017 	ldw	fp,0(sp)
 800c7dc:	dec00204 	addi	sp,sp,8
 800c7e0:	f800283a 	ret

0800c7e4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 800c7e4:	defff804 	addi	sp,sp,-32
 800c7e8:	dfc00715 	stw	ra,28(sp)
 800c7ec:	df000615 	stw	fp,24(sp)
 800c7f0:	df000604 	addi	fp,sp,24
 800c7f4:	e13ffe15 	stw	r4,-8(fp)
 800c7f8:	e17ffd15 	stw	r5,-12(fp)
 800c7fc:	e1bffc15 	stw	r6,-16(fp)
 800c800:	e1fffb15 	stw	r7,-20(fp)
 800c804:	e0bffb17 	ldw	r2,-20(fp)
 800c808:	e0bfff15 	stw	r2,-4(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 800c80c:	d0a82717 	ldw	r2,-24420(gp)
 800c810:	1000021e 	bne	r2,zero,800c81c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
 800c814:	e0bfff17 	ldw	r2,-4(fp)
 800c818:	d0a82715 	stw	r2,-24420(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 800c81c:	e0bffe17 	ldw	r2,-8(fp)
 800c820:	10800104 	addi	r2,r2,4
 800c824:	00c001c4 	movi	r3,7
 800c828:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 800c82c:	d8000015 	stw	zero,0(sp)
 800c830:	e1fffe17 	ldw	r7,-8(fp)
 800c834:	01820074 	movhi	r6,2049
 800c838:	31b1db04 	addi	r6,r6,-14484
 800c83c:	e17ffc17 	ldw	r5,-16(fp)
 800c840:	e13ffd17 	ldw	r4,-12(fp)
 800c844:	800ce080 	call	800ce08 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 800c848:	0001883a 	nop
 800c84c:	e037883a 	mov	sp,fp
 800c850:	dfc00117 	ldw	ra,4(sp)
 800c854:	df000017 	ldw	fp,0(sp)
 800c858:	dec00204 	addi	sp,sp,8
 800c85c:	f800283a 	ret

0800c860 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 800c860:	defff504 	addi	sp,sp,-44
 800c864:	df000a15 	stw	fp,40(sp)
 800c868:	df000a04 	addi	fp,sp,40
 800c86c:	e13ff915 	stw	r4,-28(fp)
 800c870:	e17ff815 	stw	r5,-32(fp)
 800c874:	e1bff715 	stw	r6,-36(fp)
 800c878:	e1fff615 	stw	r7,-40(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 800c87c:	e03fff15 	stw	zero,-4(fp)
  return _alt_tick_rate;
 800c880:	d0a82717 	ldw	r2,-24420(gp)
  
  if (alt_ticks_per_second ())
 800c884:	10003c26 	beq	r2,zero,800c978 <alt_alarm_start+0x118>
  {
    if (alarm)
 800c888:	e0bff917 	ldw	r2,-28(fp)
 800c88c:	10003826 	beq	r2,zero,800c970 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 800c890:	e0bff917 	ldw	r2,-28(fp)
 800c894:	e0fff717 	ldw	r3,-36(fp)
 800c898:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 800c89c:	e0bff917 	ldw	r2,-28(fp)
 800c8a0:	e0fff617 	ldw	r3,-40(fp)
 800c8a4:	10c00515 	stw	r3,20(r2)
  NIOS2_READ_STATUS (context);
 800c8a8:	0005303a 	rdctl	r2,status
 800c8ac:	e0bffd15 	stw	r2,-12(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800c8b0:	e0fffd17 	ldw	r3,-12(fp)
 800c8b4:	00bfff84 	movi	r2,-2
 800c8b8:	1884703a 	and	r2,r3,r2
 800c8bc:	1001703a 	wrctl	status,r2
  return context;
 800c8c0:	e0bffd17 	ldw	r2,-12(fp)
 
      irq_context = alt_irq_disable_all ();
 800c8c4:	e0bffe15 	stw	r2,-8(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 800c8c8:	d0a82817 	ldw	r2,-24416(gp)
      
      current_nticks = alt_nticks();
 800c8cc:	e0bfff15 	stw	r2,-4(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 800c8d0:	e0fff817 	ldw	r3,-32(fp)
 800c8d4:	e0bfff17 	ldw	r2,-4(fp)
 800c8d8:	1885883a 	add	r2,r3,r2
 800c8dc:	10c00044 	addi	r3,r2,1
 800c8e0:	e0bff917 	ldw	r2,-28(fp)
 800c8e4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 800c8e8:	e0bff917 	ldw	r2,-28(fp)
 800c8ec:	10c00217 	ldw	r3,8(r2)
 800c8f0:	e0bfff17 	ldw	r2,-4(fp)
 800c8f4:	1880042e 	bgeu	r3,r2,800c908 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 800c8f8:	e0bff917 	ldw	r2,-28(fp)
 800c8fc:	00c00044 	movi	r3,1
 800c900:	10c00405 	stb	r3,16(r2)
 800c904:	00000206 	br	800c910 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 800c908:	e0bff917 	ldw	r2,-28(fp)
 800c90c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 800c910:	e0bff917 	ldw	r2,-28(fp)
 800c914:	d0e00f04 	addi	r3,gp,-32708
 800c918:	e0fffb15 	stw	r3,-20(fp)
 800c91c:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 800c920:	e0bffa17 	ldw	r2,-24(fp)
 800c924:	e0fffb17 	ldw	r3,-20(fp)
 800c928:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800c92c:	e0bffb17 	ldw	r2,-20(fp)
 800c930:	10c00017 	ldw	r3,0(r2)
 800c934:	e0bffa17 	ldw	r2,-24(fp)
 800c938:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 800c93c:	e0bffb17 	ldw	r2,-20(fp)
 800c940:	10800017 	ldw	r2,0(r2)
 800c944:	e0fffa17 	ldw	r3,-24(fp)
 800c948:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800c94c:	e0bffb17 	ldw	r2,-20(fp)
 800c950:	e0fffa17 	ldw	r3,-24(fp)
 800c954:	10c00015 	stw	r3,0(r2)
 800c958:	e0bffe17 	ldw	r2,-8(fp)
 800c95c:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800c960:	e0bffc17 	ldw	r2,-16(fp)
 800c964:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 800c968:	0005883a 	mov	r2,zero
 800c96c:	00000306 	br	800c97c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 800c970:	00bffa84 	movi	r2,-22
 800c974:	00000106 	br	800c97c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 800c978:	00bfde84 	movi	r2,-134
  }
}
 800c97c:	e037883a 	mov	sp,fp
 800c980:	df000017 	ldw	fp,0(sp)
 800c984:	dec00104 	addi	sp,sp,4
 800c988:	f800283a 	ret

0800c98c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 800c98c:	defffa04 	addi	sp,sp,-24
 800c990:	dfc00515 	stw	ra,20(sp)
 800c994:	df000415 	stw	fp,16(sp)
 800c998:	df000404 	addi	fp,sp,16
 800c99c:	e13ffc15 	stw	r4,-16(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 800c9a0:	00800244 	movi	r2,9
 800c9a4:	e0bffe15 	stw	r2,-8(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 800c9a8:	014003f4 	movhi	r5,15
 800c9ac:	29509004 	addi	r5,r5,16960
 800c9b0:	e13ffe17 	ldw	r4,-8(fp)
 800c9b4:	8000b340 	call	8000b34 <__mulsi3>
 800c9b8:	100b883a 	mov	r5,r2
 800c9bc:	0100bef4 	movhi	r4,763
 800c9c0:	213c2004 	addi	r4,r4,-3968
 800c9c4:	8000a740 	call	8000a74 <__udivsi3>
  big_loops = us / (INT_MAX/
 800c9c8:	100b883a 	mov	r5,r2
 800c9cc:	01200034 	movhi	r4,32768
 800c9d0:	213fffc4 	addi	r4,r4,-1
 800c9d4:	8000a740 	call	8000a74 <__udivsi3>
 800c9d8:	100b883a 	mov	r5,r2
 800c9dc:	e13ffc17 	ldw	r4,-16(fp)
 800c9e0:	8000a740 	call	8000a74 <__udivsi3>
 800c9e4:	e0bffd15 	stw	r2,-12(fp)

  if (big_loops)
 800c9e8:	e0bffd17 	ldw	r2,-12(fp)
 800c9ec:	10002a26 	beq	r2,zero,800ca98 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 800c9f0:	e03fff15 	stw	zero,-4(fp)
 800c9f4:	00001706 	br	800ca54 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 800c9f8:	00a00034 	movhi	r2,32768
 800c9fc:	10bfffc4 	addi	r2,r2,-1
 800ca00:	10bfffc4 	addi	r2,r2,-1
 800ca04:	103ffe1e 	bne	r2,zero,800ca00 <alt_busy_sleep+0x74>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 800ca08:	014003f4 	movhi	r5,15
 800ca0c:	29509004 	addi	r5,r5,16960
 800ca10:	e13ffe17 	ldw	r4,-8(fp)
 800ca14:	8000b340 	call	8000b34 <__mulsi3>
      us -= (INT_MAX/(ALT_CPU_FREQ/
 800ca18:	100b883a 	mov	r5,r2
 800ca1c:	0100bef4 	movhi	r4,763
 800ca20:	213c2004 	addi	r4,r4,-3968
 800ca24:	8000a740 	call	8000a74 <__udivsi3>
 800ca28:	100b883a 	mov	r5,r2
 800ca2c:	01200034 	movhi	r4,32768
 800ca30:	213fffc4 	addi	r4,r4,-1
 800ca34:	8000a740 	call	8000a74 <__udivsi3>
 800ca38:	1007883a 	mov	r3,r2
 800ca3c:	e0bffc17 	ldw	r2,-16(fp)
 800ca40:	10c5c83a 	sub	r2,r2,r3
 800ca44:	e0bffc15 	stw	r2,-16(fp)
    for(i=0;i<big_loops;i++)
 800ca48:	e0bfff17 	ldw	r2,-4(fp)
 800ca4c:	10800044 	addi	r2,r2,1
 800ca50:	e0bfff15 	stw	r2,-4(fp)
 800ca54:	e0ffff17 	ldw	r3,-4(fp)
 800ca58:	e0bffd17 	ldw	r2,-12(fp)
 800ca5c:	18bfe616 	blt	r3,r2,800c9f8 <alt_busy_sleep+0x6c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800ca60:	014003f4 	movhi	r5,15
 800ca64:	29509004 	addi	r5,r5,16960
 800ca68:	e13ffe17 	ldw	r4,-8(fp)
 800ca6c:	8000b340 	call	8000b34 <__mulsi3>
 800ca70:	100b883a 	mov	r5,r2
 800ca74:	0100bef4 	movhi	r4,763
 800ca78:	213c2004 	addi	r4,r4,-3968
 800ca7c:	8000a740 	call	8000a74 <__udivsi3>
 800ca80:	e17ffc17 	ldw	r5,-16(fp)
 800ca84:	1009883a 	mov	r4,r2
 800ca88:	8000b340 	call	8000b34 <__mulsi3>
    __asm__ volatile (
 800ca8c:	10bfffc4 	addi	r2,r2,-1
 800ca90:	103ffe1e 	bne	r2,zero,800ca8c <alt_busy_sleep+0x100>
 800ca94:	00000d06 	br	800cacc <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 800ca98:	014003f4 	movhi	r5,15
 800ca9c:	29509004 	addi	r5,r5,16960
 800caa0:	e13ffe17 	ldw	r4,-8(fp)
 800caa4:	8000b340 	call	8000b34 <__mulsi3>
 800caa8:	100b883a 	mov	r5,r2
 800caac:	0100bef4 	movhi	r4,763
 800cab0:	213c2004 	addi	r4,r4,-3968
 800cab4:	8000a740 	call	8000a74 <__udivsi3>
 800cab8:	e17ffc17 	ldw	r5,-16(fp)
 800cabc:	1009883a 	mov	r4,r2
 800cac0:	8000b340 	call	8000b34 <__mulsi3>
    __asm__ volatile (
 800cac4:	10bfffc4 	addi	r2,r2,-1
 800cac8:	00bffe16 	blt	zero,r2,800cac4 <alt_busy_sleep+0x138>
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 800cacc:	0005883a 	mov	r2,zero
}
 800cad0:	e037883a 	mov	sp,fp
 800cad4:	dfc00117 	ldw	ra,4(sp)
 800cad8:	df000017 	ldw	fp,0(sp)
 800cadc:	dec00204 	addi	sp,sp,8
 800cae0:	f800283a 	ret

0800cae4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 800cae4:	defffe04 	addi	sp,sp,-8
 800cae8:	dfc00115 	stw	ra,4(sp)
 800caec:	df000015 	stw	fp,0(sp)
 800caf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800caf4:	d0a00d17 	ldw	r2,-32716(gp)
 800caf8:	10000326 	beq	r2,zero,800cb08 <alt_get_errno+0x24>
 800cafc:	d0a00d17 	ldw	r2,-32716(gp)
 800cb00:	103ee83a 	callr	r2
 800cb04:	00000106 	br	800cb0c <alt_get_errno+0x28>
 800cb08:	d0a82104 	addi	r2,gp,-24444
}
 800cb0c:	e037883a 	mov	sp,fp
 800cb10:	dfc00117 	ldw	ra,4(sp)
 800cb14:	df000017 	ldw	fp,0(sp)
 800cb18:	dec00204 	addi	sp,sp,8
 800cb1c:	f800283a 	ret

0800cb20 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 800cb20:	defffb04 	addi	sp,sp,-20
 800cb24:	dfc00415 	stw	ra,16(sp)
 800cb28:	df000315 	stw	fp,12(sp)
 800cb2c:	df000304 	addi	fp,sp,12
 800cb30:	e13ffd15 	stw	r4,-12(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 800cb34:	e0bffd17 	ldw	r2,-12(fp)
 800cb38:	10000916 	blt	r2,zero,800cb60 <close+0x40>
 800cb3c:	e0fffd17 	ldw	r3,-12(fp)
 800cb40:	1805883a 	mov	r2,r3
 800cb44:	1085883a 	add	r2,r2,r2
 800cb48:	10c5883a 	add	r2,r2,r3
 800cb4c:	100490ba 	slli	r2,r2,2
 800cb50:	00c20074 	movhi	r3,2049
 800cb54:	18c01e04 	addi	r3,r3,120
 800cb58:	10c5883a 	add	r2,r2,r3
 800cb5c:	00000106 	br	800cb64 <close+0x44>
 800cb60:	0005883a 	mov	r2,zero
 800cb64:	e0bfff15 	stw	r2,-4(fp)

  if (fd)
 800cb68:	e0bfff17 	ldw	r2,-4(fp)
 800cb6c:	10001926 	beq	r2,zero,800cbd4 <close+0xb4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 800cb70:	e0bfff17 	ldw	r2,-4(fp)
 800cb74:	10800017 	ldw	r2,0(r2)
 800cb78:	10800417 	ldw	r2,16(r2)
 800cb7c:	10000626 	beq	r2,zero,800cb98 <close+0x78>
 800cb80:	e0bfff17 	ldw	r2,-4(fp)
 800cb84:	10800017 	ldw	r2,0(r2)
 800cb88:	10800417 	ldw	r2,16(r2)
 800cb8c:	e13fff17 	ldw	r4,-4(fp)
 800cb90:	103ee83a 	callr	r2
 800cb94:	00000106 	br	800cb9c <close+0x7c>
 800cb98:	0005883a 	mov	r2,zero
 800cb9c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 800cba0:	e13ffd17 	ldw	r4,-12(fp)
 800cba4:	800d4640 	call	800d464 <alt_release_fd>
    if (rval < 0)
 800cba8:	e0bffe17 	ldw	r2,-8(fp)
 800cbac:	1000070e 	bge	r2,zero,800cbcc <close+0xac>
    {
      ALT_ERRNO = -rval;
 800cbb0:	800cae40 	call	800cae4 <alt_get_errno>
 800cbb4:	1007883a 	mov	r3,r2
 800cbb8:	e0bffe17 	ldw	r2,-8(fp)
 800cbbc:	0085c83a 	sub	r2,zero,r2
 800cbc0:	18800015 	stw	r2,0(r3)
      return -1;
 800cbc4:	00bfffc4 	movi	r2,-1
 800cbc8:	00000706 	br	800cbe8 <close+0xc8>
    }
    return 0;
 800cbcc:	0005883a 	mov	r2,zero
 800cbd0:	00000506 	br	800cbe8 <close+0xc8>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 800cbd4:	800cae40 	call	800cae4 <alt_get_errno>
 800cbd8:	1007883a 	mov	r3,r2
 800cbdc:	00801444 	movi	r2,81
 800cbe0:	18800015 	stw	r2,0(r3)
    return -1;
 800cbe4:	00bfffc4 	movi	r2,-1
  }
}
 800cbe8:	e037883a 	mov	sp,fp
 800cbec:	dfc00117 	ldw	ra,4(sp)
 800cbf0:	df000017 	ldw	fp,0(sp)
 800cbf4:	dec00204 	addi	sp,sp,8
 800cbf8:	f800283a 	ret

0800cbfc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 800cbfc:	deffff04 	addi	sp,sp,-4
 800cc00:	df000015 	stw	fp,0(sp)
 800cc04:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 800cc08:	0001883a 	nop
 800cc0c:	e037883a 	mov	sp,fp
 800cc10:	df000017 	ldw	fp,0(sp)
 800cc14:	dec00104 	addi	sp,sp,4
 800cc18:	f800283a 	ret

0800cc1c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 800cc1c:	defffc04 	addi	sp,sp,-16
 800cc20:	df000315 	stw	fp,12(sp)
 800cc24:	df000304 	addi	fp,sp,12
 800cc28:	e13fff15 	stw	r4,-4(fp)
 800cc2c:	e17ffe15 	stw	r5,-8(fp)
 800cc30:	e1bffd15 	stw	r6,-12(fp)
  return len;
 800cc34:	e0bffd17 	ldw	r2,-12(fp)
}
 800cc38:	e037883a 	mov	sp,fp
 800cc3c:	df000017 	ldw	fp,0(sp)
 800cc40:	dec00104 	addi	sp,sp,4
 800cc44:	f800283a 	ret

0800cc48 <alt_get_errno>:
{
 800cc48:	defffe04 	addi	sp,sp,-8
 800cc4c:	dfc00115 	stw	ra,4(sp)
 800cc50:	df000015 	stw	fp,0(sp)
 800cc54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800cc58:	d0a00d17 	ldw	r2,-32716(gp)
 800cc5c:	10000326 	beq	r2,zero,800cc6c <alt_get_errno+0x24>
 800cc60:	d0a00d17 	ldw	r2,-32716(gp)
 800cc64:	103ee83a 	callr	r2
 800cc68:	00000106 	br	800cc70 <alt_get_errno+0x28>
 800cc6c:	d0a82104 	addi	r2,gp,-24444
}
 800cc70:	e037883a 	mov	sp,fp
 800cc74:	dfc00117 	ldw	ra,4(sp)
 800cc78:	df000017 	ldw	fp,0(sp)
 800cc7c:	dec00204 	addi	sp,sp,8
 800cc80:	f800283a 	ret

0800cc84 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 800cc84:	defffa04 	addi	sp,sp,-24
 800cc88:	dfc00515 	stw	ra,20(sp)
 800cc8c:	df000415 	stw	fp,16(sp)
 800cc90:	df000404 	addi	fp,sp,16
 800cc94:	e13ffd15 	stw	r4,-12(fp)
 800cc98:	e17ffc15 	stw	r5,-16(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 800cc9c:	e0bffd17 	ldw	r2,-12(fp)
 800cca0:	10000326 	beq	r2,zero,800ccb0 <alt_dev_llist_insert+0x2c>
 800cca4:	e0bffd17 	ldw	r2,-12(fp)
 800cca8:	10800217 	ldw	r2,8(r2)
 800ccac:	1000061e 	bne	r2,zero,800ccc8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 800ccb0:	800cc480 	call	800cc48 <alt_get_errno>
 800ccb4:	1007883a 	mov	r3,r2
 800ccb8:	00800584 	movi	r2,22
 800ccbc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 800ccc0:	00bffa84 	movi	r2,-22
 800ccc4:	00001306 	br	800cd14 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 800ccc8:	e0bffd17 	ldw	r2,-12(fp)
 800cccc:	e0fffc17 	ldw	r3,-16(fp)
 800ccd0:	e0ffff15 	stw	r3,-4(fp)
 800ccd4:	e0bffe15 	stw	r2,-8(fp)
  entry->previous = list;
 800ccd8:	e0bffe17 	ldw	r2,-8(fp)
 800ccdc:	e0ffff17 	ldw	r3,-4(fp)
 800cce0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 800cce4:	e0bfff17 	ldw	r2,-4(fp)
 800cce8:	10c00017 	ldw	r3,0(r2)
 800ccec:	e0bffe17 	ldw	r2,-8(fp)
 800ccf0:	10c00015 	stw	r3,0(r2)
  list->next->previous = entry;
 800ccf4:	e0bfff17 	ldw	r2,-4(fp)
 800ccf8:	10800017 	ldw	r2,0(r2)
 800ccfc:	e0fffe17 	ldw	r3,-8(fp)
 800cd00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 800cd04:	e0bfff17 	ldw	r2,-4(fp)
 800cd08:	e0fffe17 	ldw	r3,-8(fp)
 800cd0c:	10c00015 	stw	r3,0(r2)

  return 0;  
 800cd10:	0005883a 	mov	r2,zero
}
 800cd14:	e037883a 	mov	sp,fp
 800cd18:	dfc00117 	ldw	ra,4(sp)
 800cd1c:	df000017 	ldw	fp,0(sp)
 800cd20:	dec00204 	addi	sp,sp,8
 800cd24:	f800283a 	ret

0800cd28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 800cd28:	defffd04 	addi	sp,sp,-12
 800cd2c:	dfc00215 	stw	ra,8(sp)
 800cd30:	df000115 	stw	fp,4(sp)
 800cd34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800cd38:	00820074 	movhi	r2,2049
 800cd3c:	10b70c04 	addi	r2,r2,-9168
 800cd40:	e0bfff15 	stw	r2,-4(fp)
 800cd44:	00000606 	br	800cd60 <_do_ctors+0x38>
        (*ctor) (); 
 800cd48:	e0bfff17 	ldw	r2,-4(fp)
 800cd4c:	10800017 	ldw	r2,0(r2)
 800cd50:	103ee83a 	callr	r2
  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 800cd54:	e0bfff17 	ldw	r2,-4(fp)
 800cd58:	10bfff04 	addi	r2,r2,-4
 800cd5c:	e0bfff15 	stw	r2,-4(fp)
 800cd60:	e0ffff17 	ldw	r3,-4(fp)
 800cd64:	00820074 	movhi	r2,2049
 800cd68:	10b70d04 	addi	r2,r2,-9164
 800cd6c:	18bff62e 	bgeu	r3,r2,800cd48 <_do_ctors+0x20>
}
 800cd70:	0001883a 	nop
 800cd74:	e037883a 	mov	sp,fp
 800cd78:	dfc00117 	ldw	ra,4(sp)
 800cd7c:	df000017 	ldw	fp,0(sp)
 800cd80:	dec00204 	addi	sp,sp,8
 800cd84:	f800283a 	ret

0800cd88 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 800cd88:	defffd04 	addi	sp,sp,-12
 800cd8c:	dfc00215 	stw	ra,8(sp)
 800cd90:	df000115 	stw	fp,4(sp)
 800cd94:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800cd98:	00820074 	movhi	r2,2049
 800cd9c:	10b70c04 	addi	r2,r2,-9168
 800cda0:	e0bfff15 	stw	r2,-4(fp)
 800cda4:	00000606 	br	800cdc0 <_do_dtors+0x38>
        (*dtor) (); 
 800cda8:	e0bfff17 	ldw	r2,-4(fp)
 800cdac:	10800017 	ldw	r2,0(r2)
 800cdb0:	103ee83a 	callr	r2
  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 800cdb4:	e0bfff17 	ldw	r2,-4(fp)
 800cdb8:	10bfff04 	addi	r2,r2,-4
 800cdbc:	e0bfff15 	stw	r2,-4(fp)
 800cdc0:	e0ffff17 	ldw	r3,-4(fp)
 800cdc4:	00820074 	movhi	r2,2049
 800cdc8:	10b70d04 	addi	r2,r2,-9164
 800cdcc:	18bff62e 	bgeu	r3,r2,800cda8 <_do_dtors+0x20>
}
 800cdd0:	0001883a 	nop
 800cdd4:	e037883a 	mov	sp,fp
 800cdd8:	dfc00117 	ldw	ra,4(sp)
 800cddc:	df000017 	ldw	fp,0(sp)
 800cde0:	dec00204 	addi	sp,sp,8
 800cde4:	f800283a 	ret

0800cde8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 800cde8:	deffff04 	addi	sp,sp,-4
 800cdec:	df000015 	stw	fp,0(sp)
 800cdf0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 800cdf4:	0001883a 	nop
 800cdf8:	e037883a 	mov	sp,fp
 800cdfc:	df000017 	ldw	fp,0(sp)
 800ce00:	dec00104 	addi	sp,sp,4
 800ce04:	f800283a 	ret

0800ce08 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800ce08:	defff904 	addi	sp,sp,-28
 800ce0c:	dfc00615 	stw	ra,24(sp)
 800ce10:	df000515 	stw	fp,20(sp)
 800ce14:	df000504 	addi	fp,sp,20
 800ce18:	e13fff15 	stw	r4,-4(fp)
 800ce1c:	e17ffe15 	stw	r5,-8(fp)
 800ce20:	e1bffd15 	stw	r6,-12(fp)
 800ce24:	e1fffc15 	stw	r7,-16(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 800ce28:	e0800217 	ldw	r2,8(fp)
 800ce2c:	d8800015 	stw	r2,0(sp)
 800ce30:	e1fffc17 	ldw	r7,-16(fp)
 800ce34:	e1bffd17 	ldw	r6,-12(fp)
 800ce38:	e17ffe17 	ldw	r5,-8(fp)
 800ce3c:	e13fff17 	ldw	r4,-4(fp)
 800ce40:	800cfb80 	call	800cfb8 <alt_iic_isr_register>
}  
 800ce44:	e037883a 	mov	sp,fp
 800ce48:	dfc00117 	ldw	ra,4(sp)
 800ce4c:	df000017 	ldw	fp,0(sp)
 800ce50:	dec00204 	addi	sp,sp,8
 800ce54:	f800283a 	ret

0800ce58 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 800ce58:	defff904 	addi	sp,sp,-28
 800ce5c:	df000615 	stw	fp,24(sp)
 800ce60:	df000604 	addi	fp,sp,24
 800ce64:	e13ffb15 	stw	r4,-20(fp)
 800ce68:	e17ffa15 	stw	r5,-24(fp)
 800ce6c:	e0bffa17 	ldw	r2,-24(fp)
 800ce70:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 800ce74:	0005303a 	rdctl	r2,status
 800ce78:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800ce7c:	e0fffe17 	ldw	r3,-8(fp)
 800ce80:	00bfff84 	movi	r2,-2
 800ce84:	1884703a 	and	r2,r3,r2
 800ce88:	1001703a 	wrctl	status,r2
  return context;
 800ce8c:	e0bffe17 	ldw	r2,-8(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 800ce90:	e0bffd15 	stw	r2,-12(fp)

  alt_irq_active |= (1 << id);
 800ce94:	00c00044 	movi	r3,1
 800ce98:	e0bfff17 	ldw	r2,-4(fp)
 800ce9c:	1884983a 	sll	r2,r3,r2
 800cea0:	1007883a 	mov	r3,r2
 800cea4:	d0a82617 	ldw	r2,-24424(gp)
 800cea8:	1884b03a 	or	r2,r3,r2
 800ceac:	d0a82615 	stw	r2,-24424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800ceb0:	d0a82617 	ldw	r2,-24424(gp)
 800ceb4:	100170fa 	wrctl	ienable,r2
 800ceb8:	e0bffd17 	ldw	r2,-12(fp)
 800cebc:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800cec0:	e0bffc17 	ldw	r2,-16(fp)
 800cec4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 800cec8:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 800cecc:	0001883a 	nop
}
 800ced0:	e037883a 	mov	sp,fp
 800ced4:	df000017 	ldw	fp,0(sp)
 800ced8:	dec00104 	addi	sp,sp,4
 800cedc:	f800283a 	ret

0800cee0 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 800cee0:	defff904 	addi	sp,sp,-28
 800cee4:	df000615 	stw	fp,24(sp)
 800cee8:	df000604 	addi	fp,sp,24
 800ceec:	e13ffb15 	stw	r4,-20(fp)
 800cef0:	e17ffa15 	stw	r5,-24(fp)
 800cef4:	e0bffa17 	ldw	r2,-24(fp)
 800cef8:	e0bfff15 	stw	r2,-4(fp)
  NIOS2_READ_STATUS (context);
 800cefc:	0005303a 	rdctl	r2,status
 800cf00:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cf04:	e0fffe17 	ldw	r3,-8(fp)
 800cf08:	00bfff84 	movi	r2,-2
 800cf0c:	1884703a 	and	r2,r3,r2
 800cf10:	1001703a 	wrctl	status,r2
  return context;
 800cf14:	e0bffe17 	ldw	r2,-8(fp)
  status = alt_irq_disable_all ();
 800cf18:	e0bffd15 	stw	r2,-12(fp)
  alt_irq_active &= ~(1 << id);
 800cf1c:	00c00044 	movi	r3,1
 800cf20:	e0bfff17 	ldw	r2,-4(fp)
 800cf24:	1884983a 	sll	r2,r3,r2
 800cf28:	0084303a 	nor	r2,zero,r2
 800cf2c:	1007883a 	mov	r3,r2
 800cf30:	d0a82617 	ldw	r2,-24424(gp)
 800cf34:	1884703a 	and	r2,r3,r2
 800cf38:	d0a82615 	stw	r2,-24424(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 800cf3c:	d0a82617 	ldw	r2,-24424(gp)
 800cf40:	100170fa 	wrctl	ienable,r2
 800cf44:	e0bffd17 	ldw	r2,-12(fp)
 800cf48:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context);
 800cf4c:	e0bffc17 	ldw	r2,-16(fp)
 800cf50:	1001703a 	wrctl	status,r2
  return 0;
 800cf54:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 800cf58:	0001883a 	nop
}
 800cf5c:	e037883a 	mov	sp,fp
 800cf60:	df000017 	ldw	fp,0(sp)
 800cf64:	dec00104 	addi	sp,sp,4
 800cf68:	f800283a 	ret

0800cf6c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 800cf6c:	defffc04 	addi	sp,sp,-16
 800cf70:	df000315 	stw	fp,12(sp)
 800cf74:	df000304 	addi	fp,sp,12
 800cf78:	e13ffe15 	stw	r4,-8(fp)
 800cf7c:	e17ffd15 	stw	r5,-12(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 800cf80:	000530fa 	rdctl	r2,ienable
 800cf84:	e0bfff15 	stw	r2,-4(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 800cf88:	00c00044 	movi	r3,1
 800cf8c:	e0bffd17 	ldw	r2,-12(fp)
 800cf90:	1884983a 	sll	r2,r3,r2
 800cf94:	1007883a 	mov	r3,r2
 800cf98:	e0bfff17 	ldw	r2,-4(fp)
 800cf9c:	1884703a 	and	r2,r3,r2
 800cfa0:	1004c03a 	cmpne	r2,r2,zero
 800cfa4:	10803fcc 	andi	r2,r2,255
}
 800cfa8:	e037883a 	mov	sp,fp
 800cfac:	df000017 	ldw	fp,0(sp)
 800cfb0:	dec00104 	addi	sp,sp,4
 800cfb4:	f800283a 	ret

0800cfb8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 800cfb8:	defff504 	addi	sp,sp,-44
 800cfbc:	dfc00a15 	stw	ra,40(sp)
 800cfc0:	df000915 	stw	fp,36(sp)
 800cfc4:	df000904 	addi	fp,sp,36
 800cfc8:	e13ffa15 	stw	r4,-24(fp)
 800cfcc:	e17ff915 	stw	r5,-28(fp)
 800cfd0:	e1bff815 	stw	r6,-32(fp)
 800cfd4:	e1fff715 	stw	r7,-36(fp)
  int rc = -EINVAL;  
 800cfd8:	00bffa84 	movi	r2,-22
 800cfdc:	e0bfff15 	stw	r2,-4(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 800cfe0:	e0bff917 	ldw	r2,-28(fp)
 800cfe4:	e0bffe15 	stw	r2,-8(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 800cfe8:	e0bffe17 	ldw	r2,-8(fp)
 800cfec:	10800808 	cmpgei	r2,r2,32
 800cff0:	1000241e 	bne	r2,zero,800d084 <alt_iic_isr_register+0xcc>
  NIOS2_READ_STATUS (context);
 800cff4:	0005303a 	rdctl	r2,status
 800cff8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800cffc:	e0fffc17 	ldw	r3,-16(fp)
 800d000:	00bfff84 	movi	r2,-2
 800d004:	1884703a 	and	r2,r3,r2
 800d008:	1001703a 	wrctl	status,r2
  return context;
 800d00c:	e0bffc17 	ldw	r2,-16(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 800d010:	e0bffd15 	stw	r2,-12(fp)

    alt_irq[id].handler = isr;
 800d014:	e0bffe17 	ldw	r2,-8(fp)
 800d018:	100890fa 	slli	r4,r2,3
 800d01c:	e0fff817 	ldw	r3,-32(fp)
 800d020:	00820074 	movhi	r2,2049
 800d024:	2085883a 	add	r2,r4,r2
 800d028:	10c8b215 	stw	r3,8904(r2)
    alt_irq[id].context = isr_context;
 800d02c:	e0bffe17 	ldw	r2,-8(fp)
 800d030:	100890fa 	slli	r4,r2,3
 800d034:	e0fff717 	ldw	r3,-36(fp)
 800d038:	00820074 	movhi	r2,2049
 800d03c:	2085883a 	add	r2,r4,r2
 800d040:	10c8b315 	stw	r3,8908(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 800d044:	e0bff817 	ldw	r2,-32(fp)
 800d048:	10000526 	beq	r2,zero,800d060 <alt_iic_isr_register+0xa8>
 800d04c:	e0bffe17 	ldw	r2,-8(fp)
 800d050:	100b883a 	mov	r5,r2
 800d054:	e13ffa17 	ldw	r4,-24(fp)
 800d058:	800ce580 	call	800ce58 <alt_ic_irq_enable>
 800d05c:	00000406 	br	800d070 <alt_iic_isr_register+0xb8>
 800d060:	e0bffe17 	ldw	r2,-8(fp)
 800d064:	100b883a 	mov	r5,r2
 800d068:	e13ffa17 	ldw	r4,-24(fp)
 800d06c:	800cee00 	call	800cee0 <alt_ic_irq_disable>
 800d070:	e0bfff15 	stw	r2,-4(fp)
 800d074:	e0bffd17 	ldw	r2,-12(fp)
 800d078:	e0bffb15 	stw	r2,-20(fp)
  NIOS2_WRITE_STATUS (context);
 800d07c:	e0bffb17 	ldw	r2,-20(fp)
 800d080:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 800d084:	e0bfff17 	ldw	r2,-4(fp)
}
 800d088:	e037883a 	mov	sp,fp
 800d08c:	dfc00117 	ldw	ra,4(sp)
 800d090:	df000017 	ldw	fp,0(sp)
 800d094:	dec00204 	addi	sp,sp,8
 800d098:	f800283a 	ret

0800d09c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 800d09c:	defff904 	addi	sp,sp,-28
 800d0a0:	dfc00615 	stw	ra,24(sp)
 800d0a4:	df000515 	stw	fp,20(sp)
 800d0a8:	df000504 	addi	fp,sp,20
 800d0ac:	e13ffe15 	stw	r4,-8(fp)
 800d0b0:	e17ffd15 	stw	r5,-12(fp)
 800d0b4:	e1bffc15 	stw	r6,-16(fp)
 800d0b8:	e1fffb15 	stw	r7,-20(fp)
  int old;

  old = open (name, flags, mode);
 800d0bc:	e1bffb17 	ldw	r6,-20(fp)
 800d0c0:	e17ffc17 	ldw	r5,-16(fp)
 800d0c4:	e13ffd17 	ldw	r4,-12(fp)
 800d0c8:	800d3040 	call	800d304 <open>
 800d0cc:	e0bfff15 	stw	r2,-4(fp)

  if (old >= 0)
 800d0d0:	e0bfff17 	ldw	r2,-4(fp)
 800d0d4:	10002016 	blt	r2,zero,800d158 <alt_open_fd+0xbc>
  {
    fd->dev      = alt_fd_list[old].dev;
 800d0d8:	e0ffff17 	ldw	r3,-4(fp)
 800d0dc:	1805883a 	mov	r2,r3
 800d0e0:	1085883a 	add	r2,r2,r2
 800d0e4:	10c5883a 	add	r2,r2,r3
 800d0e8:	100490ba 	slli	r2,r2,2
 800d0ec:	00c20074 	movhi	r3,2049
 800d0f0:	10c7883a 	add	r3,r2,r3
 800d0f4:	18c01e17 	ldw	r3,120(r3)
 800d0f8:	e0bffe17 	ldw	r2,-8(fp)
 800d0fc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 800d100:	e0ffff17 	ldw	r3,-4(fp)
 800d104:	1805883a 	mov	r2,r3
 800d108:	1085883a 	add	r2,r2,r2
 800d10c:	10c5883a 	add	r2,r2,r3
 800d110:	100490ba 	slli	r2,r2,2
 800d114:	00c20074 	movhi	r3,2049
 800d118:	10c7883a 	add	r3,r2,r3
 800d11c:	18c01f17 	ldw	r3,124(r3)
 800d120:	e0bffe17 	ldw	r2,-8(fp)
 800d124:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 800d128:	e0ffff17 	ldw	r3,-4(fp)
 800d12c:	1805883a 	mov	r2,r3
 800d130:	1085883a 	add	r2,r2,r2
 800d134:	10c5883a 	add	r2,r2,r3
 800d138:	100490ba 	slli	r2,r2,2
 800d13c:	00c20074 	movhi	r3,2049
 800d140:	10c7883a 	add	r3,r2,r3
 800d144:	18c02017 	ldw	r3,128(r3)
 800d148:	e0bffe17 	ldw	r2,-8(fp)
 800d14c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 800d150:	e13fff17 	ldw	r4,-4(fp)
 800d154:	800d4640 	call	800d464 <alt_release_fd>
  }
} 
 800d158:	0001883a 	nop
 800d15c:	e037883a 	mov	sp,fp
 800d160:	dfc00117 	ldw	ra,4(sp)
 800d164:	df000017 	ldw	fp,0(sp)
 800d168:	dec00204 	addi	sp,sp,8
 800d16c:	f800283a 	ret

0800d170 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 800d170:	defffb04 	addi	sp,sp,-20
 800d174:	dfc00415 	stw	ra,16(sp)
 800d178:	df000315 	stw	fp,12(sp)
 800d17c:	df000304 	addi	fp,sp,12
 800d180:	e13fff15 	stw	r4,-4(fp)
 800d184:	e17ffe15 	stw	r5,-8(fp)
 800d188:	e1bffd15 	stw	r6,-12(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 800d18c:	01c07fc4 	movi	r7,511
 800d190:	01800044 	movi	r6,1
 800d194:	e17fff17 	ldw	r5,-4(fp)
 800d198:	01020074 	movhi	r4,2049
 800d19c:	21002104 	addi	r4,r4,132
 800d1a0:	800d09c0 	call	800d09c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 800d1a4:	01c07fc4 	movi	r7,511
 800d1a8:	000d883a 	mov	r6,zero
 800d1ac:	e17ffe17 	ldw	r5,-8(fp)
 800d1b0:	01020074 	movhi	r4,2049
 800d1b4:	21001e04 	addi	r4,r4,120
 800d1b8:	800d09c0 	call	800d09c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 800d1bc:	01c07fc4 	movi	r7,511
 800d1c0:	01800044 	movi	r6,1
 800d1c4:	e17ffd17 	ldw	r5,-12(fp)
 800d1c8:	01020074 	movhi	r4,2049
 800d1cc:	21002404 	addi	r4,r4,144
 800d1d0:	800d09c0 	call	800d09c <alt_open_fd>
}  
 800d1d4:	0001883a 	nop
 800d1d8:	e037883a 	mov	sp,fp
 800d1dc:	dfc00117 	ldw	ra,4(sp)
 800d1e0:	df000017 	ldw	fp,0(sp)
 800d1e4:	dec00204 	addi	sp,sp,8
 800d1e8:	f800283a 	ret

0800d1ec <alt_get_errno>:
{
 800d1ec:	defffe04 	addi	sp,sp,-8
 800d1f0:	dfc00115 	stw	ra,4(sp)
 800d1f4:	df000015 	stw	fp,0(sp)
 800d1f8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 800d1fc:	d0a00d17 	ldw	r2,-32716(gp)
 800d200:	10000326 	beq	r2,zero,800d210 <alt_get_errno+0x24>
 800d204:	d0a00d17 	ldw	r2,-32716(gp)
 800d208:	103ee83a 	callr	r2
 800d20c:	00000106 	br	800d214 <alt_get_errno+0x28>
 800d210:	d0a82104 	addi	r2,gp,-24444
}
 800d214:	e037883a 	mov	sp,fp
 800d218:	dfc00117 	ldw	ra,4(sp)
 800d21c:	df000017 	ldw	fp,0(sp)
 800d220:	dec00204 	addi	sp,sp,8
 800d224:	f800283a 	ret

0800d228 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 800d228:	defffd04 	addi	sp,sp,-12
 800d22c:	df000215 	stw	fp,8(sp)
 800d230:	df000204 	addi	fp,sp,8
 800d234:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 800d238:	e0bffe17 	ldw	r2,-8(fp)
 800d23c:	10800217 	ldw	r2,8(r2)
 800d240:	10d00034 	orhi	r3,r2,16384
 800d244:	e0bffe17 	ldw	r2,-8(fp)
 800d248:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 800d24c:	e03fff15 	stw	zero,-4(fp)
 800d250:	00002306 	br	800d2e0 <alt_file_locked+0xb8>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d254:	e0ffff17 	ldw	r3,-4(fp)
 800d258:	1805883a 	mov	r2,r3
 800d25c:	1085883a 	add	r2,r2,r2
 800d260:	10c5883a 	add	r2,r2,r3
 800d264:	100490ba 	slli	r2,r2,2
 800d268:	00c20074 	movhi	r3,2049
 800d26c:	10c7883a 	add	r3,r2,r3
 800d270:	18c01e17 	ldw	r3,120(r3)
 800d274:	e0bffe17 	ldw	r2,-8(fp)
 800d278:	10800017 	ldw	r2,0(r2)
 800d27c:	1880151e 	bne	r3,r2,800d2d4 <alt_file_locked+0xac>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d280:	e0ffff17 	ldw	r3,-4(fp)
 800d284:	1805883a 	mov	r2,r3
 800d288:	1085883a 	add	r2,r2,r2
 800d28c:	10c5883a 	add	r2,r2,r3
 800d290:	100490ba 	slli	r2,r2,2
 800d294:	00c20074 	movhi	r3,2049
 800d298:	10c7883a 	add	r3,r2,r3
 800d29c:	18802017 	ldw	r2,128(r3)
    if ((alt_fd_list[i].dev == fd->dev) &&
 800d2a0:	10000c0e 	bge	r2,zero,800d2d4 <alt_file_locked+0xac>
        (&alt_fd_list[i] != fd))
 800d2a4:	e0ffff17 	ldw	r3,-4(fp)
 800d2a8:	1805883a 	mov	r2,r3
 800d2ac:	1085883a 	add	r2,r2,r2
 800d2b0:	10c5883a 	add	r2,r2,r3
 800d2b4:	100490ba 	slli	r2,r2,2
 800d2b8:	00c20074 	movhi	r3,2049
 800d2bc:	18c01e04 	addi	r3,r3,120
 800d2c0:	10c5883a 	add	r2,r2,r3
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 800d2c4:	e0fffe17 	ldw	r3,-8(fp)
 800d2c8:	18800226 	beq	r3,r2,800d2d4 <alt_file_locked+0xac>
    {
      return -EACCES;
 800d2cc:	00bffcc4 	movi	r2,-13
 800d2d0:	00000806 	br	800d2f4 <alt_file_locked+0xcc>
  for (i = 0; i <= alt_max_fd; i++)
 800d2d4:	e0bfff17 	ldw	r2,-4(fp)
 800d2d8:	10800044 	addi	r2,r2,1
 800d2dc:	e0bfff15 	stw	r2,-4(fp)
 800d2e0:	d0a00c17 	ldw	r2,-32720(gp)
 800d2e4:	1007883a 	mov	r3,r2
 800d2e8:	e0bfff17 	ldw	r2,-4(fp)
 800d2ec:	18bfd92e 	bgeu	r3,r2,800d254 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 800d2f0:	0005883a 	mov	r2,zero
}
 800d2f4:	e037883a 	mov	sp,fp
 800d2f8:	df000017 	ldw	fp,0(sp)
 800d2fc:	dec00104 	addi	sp,sp,4
 800d300:	f800283a 	ret

0800d304 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 800d304:	defff604 	addi	sp,sp,-40
 800d308:	dfc00915 	stw	ra,36(sp)
 800d30c:	df000815 	stw	fp,32(sp)
 800d310:	df000804 	addi	fp,sp,32
 800d314:	e13ffa15 	stw	r4,-24(fp)
 800d318:	e17ff915 	stw	r5,-28(fp)
 800d31c:	e1bff815 	stw	r6,-32(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 800d320:	00bfffc4 	movi	r2,-1
 800d324:	e0bffe15 	stw	r2,-8(fp)
  int status = -ENODEV;
 800d328:	00bffb44 	movi	r2,-19
 800d32c:	e0bffd15 	stw	r2,-12(fp)
  int isafs = 0;
 800d330:	e03ffc15 	stw	zero,-16(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 800d334:	d1600a04 	addi	r5,gp,-32728
 800d338:	e13ffa17 	ldw	r4,-24(fp)
 800d33c:	800d69c0 	call	800d69c <alt_find_dev>
 800d340:	e0bfff15 	stw	r2,-4(fp)
 800d344:	e0bfff17 	ldw	r2,-4(fp)
 800d348:	1000051e 	bne	r2,zero,800d360 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 800d34c:	e13ffa17 	ldw	r4,-24(fp)
 800d350:	800d72c0 	call	800d72c <alt_find_file>
 800d354:	e0bfff15 	stw	r2,-4(fp)
    isafs = 1;
 800d358:	00800044 	movi	r2,1
 800d35c:	e0bffc15 	stw	r2,-16(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 800d360:	e0bfff17 	ldw	r2,-4(fp)
 800d364:	10002c26 	beq	r2,zero,800d418 <open+0x114>
  {
    if ((index = alt_get_fd (dev)) < 0)
 800d368:	e13fff17 	ldw	r4,-4(fp)
 800d36c:	800d8340 	call	800d834 <alt_get_fd>
 800d370:	e0bffe15 	stw	r2,-8(fp)
 800d374:	e0bffe17 	ldw	r2,-8(fp)
 800d378:	1000030e 	bge	r2,zero,800d388 <open+0x84>
    {
      status = index;
 800d37c:	e0bffe17 	ldw	r2,-8(fp)
 800d380:	e0bffd15 	stw	r2,-12(fp)
 800d384:	00002606 	br	800d420 <open+0x11c>
    }
    else
    {
      fd = &alt_fd_list[index];
 800d388:	e0fffe17 	ldw	r3,-8(fp)
 800d38c:	1805883a 	mov	r2,r3
 800d390:	1085883a 	add	r2,r2,r2
 800d394:	10c5883a 	add	r2,r2,r3
 800d398:	100490ba 	slli	r2,r2,2
 800d39c:	00c20074 	movhi	r3,2049
 800d3a0:	18c01e04 	addi	r3,r3,120
 800d3a4:	10c5883a 	add	r2,r2,r3
 800d3a8:	e0bffb15 	stw	r2,-20(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 800d3ac:	e0fff917 	ldw	r3,-28(fp)
 800d3b0:	00900034 	movhi	r2,16384
 800d3b4:	10bfffc4 	addi	r2,r2,-1
 800d3b8:	1886703a 	and	r3,r3,r2
 800d3bc:	e0bffb17 	ldw	r2,-20(fp)
 800d3c0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 800d3c4:	e0bffc17 	ldw	r2,-16(fp)
 800d3c8:	1000051e 	bne	r2,zero,800d3e0 <open+0xdc>
 800d3cc:	e13ffb17 	ldw	r4,-20(fp)
 800d3d0:	800d2280 	call	800d228 <alt_file_locked>
 800d3d4:	e0bffd15 	stw	r2,-12(fp)
 800d3d8:	e0bffd17 	ldw	r2,-12(fp)
 800d3dc:	10001016 	blt	r2,zero,800d420 <open+0x11c>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 800d3e0:	e0bfff17 	ldw	r2,-4(fp)
 800d3e4:	10800317 	ldw	r2,12(r2)
 800d3e8:	10000826 	beq	r2,zero,800d40c <open+0x108>
 800d3ec:	e0bfff17 	ldw	r2,-4(fp)
 800d3f0:	10800317 	ldw	r2,12(r2)
 800d3f4:	e1fff817 	ldw	r7,-32(fp)
 800d3f8:	e1bff917 	ldw	r6,-28(fp)
 800d3fc:	e17ffa17 	ldw	r5,-24(fp)
 800d400:	e13ffb17 	ldw	r4,-20(fp)
 800d404:	103ee83a 	callr	r2
 800d408:	00000106 	br	800d410 <open+0x10c>
 800d40c:	0005883a 	mov	r2,zero
 800d410:	e0bffd15 	stw	r2,-12(fp)
 800d414:	00000206 	br	800d420 <open+0x11c>
      }
    }
  }
  else
  {
    status = -ENODEV;
 800d418:	00bffb44 	movi	r2,-19
 800d41c:	e0bffd15 	stw	r2,-12(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 800d420:	e0bffd17 	ldw	r2,-12(fp)
 800d424:	1000090e 	bge	r2,zero,800d44c <open+0x148>
  {
    alt_release_fd (index);  
 800d428:	e13ffe17 	ldw	r4,-8(fp)
 800d42c:	800d4640 	call	800d464 <alt_release_fd>
    ALT_ERRNO = -status;
 800d430:	800d1ec0 	call	800d1ec <alt_get_errno>
 800d434:	1007883a 	mov	r3,r2
 800d438:	e0bffd17 	ldw	r2,-12(fp)
 800d43c:	0085c83a 	sub	r2,zero,r2
 800d440:	18800015 	stw	r2,0(r3)
    return -1;
 800d444:	00bfffc4 	movi	r2,-1
 800d448:	00000106 	br	800d450 <open+0x14c>
  }
  
  /* return the reference upon success */

  return index;
 800d44c:	e0bffe17 	ldw	r2,-8(fp)
}
 800d450:	e037883a 	mov	sp,fp
 800d454:	dfc00117 	ldw	ra,4(sp)
 800d458:	df000017 	ldw	fp,0(sp)
 800d45c:	dec00204 	addi	sp,sp,8
 800d460:	f800283a 	ret

0800d464 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 800d464:	defffe04 	addi	sp,sp,-8
 800d468:	df000115 	stw	fp,4(sp)
 800d46c:	df000104 	addi	fp,sp,4
 800d470:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 800d474:	e0bfff17 	ldw	r2,-4(fp)
 800d478:	108000d0 	cmplti	r2,r2,3
 800d47c:	1000101e 	bne	r2,zero,800d4c0 <alt_release_fd+0x5c>
  {
    alt_fd_list[fd].fd_flags = 0;
 800d480:	e0ffff17 	ldw	r3,-4(fp)
 800d484:	1805883a 	mov	r2,r3
 800d488:	1085883a 	add	r2,r2,r2
 800d48c:	10c5883a 	add	r2,r2,r3
 800d490:	100490ba 	slli	r2,r2,2
 800d494:	00c20074 	movhi	r3,2049
 800d498:	10c7883a 	add	r3,r2,r3
 800d49c:	18002015 	stw	zero,128(r3)
    alt_fd_list[fd].dev      = 0;
 800d4a0:	e0ffff17 	ldw	r3,-4(fp)
 800d4a4:	1805883a 	mov	r2,r3
 800d4a8:	1085883a 	add	r2,r2,r2
 800d4ac:	10c5883a 	add	r2,r2,r3
 800d4b0:	100490ba 	slli	r2,r2,2
 800d4b4:	00c20074 	movhi	r3,2049
 800d4b8:	10c7883a 	add	r3,r2,r3
 800d4bc:	18001e15 	stw	zero,120(r3)
  }
}
 800d4c0:	0001883a 	nop
 800d4c4:	e037883a 	mov	sp,fp
 800d4c8:	df000017 	ldw	fp,0(sp)
 800d4cc:	dec00104 	addi	sp,sp,4
 800d4d0:	f800283a 	ret

0800d4d4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 800d4d4:	defffa04 	addi	sp,sp,-24
 800d4d8:	df000515 	stw	fp,20(sp)
 800d4dc:	df000504 	addi	fp,sp,20
 800d4e0:	e13ffb15 	stw	r4,-20(fp)
  NIOS2_READ_STATUS (context);
 800d4e4:	0005303a 	rdctl	r2,status
 800d4e8:	e0bffc15 	stw	r2,-16(fp)
  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 800d4ec:	e0fffc17 	ldw	r3,-16(fp)
 800d4f0:	00bfff84 	movi	r2,-2
 800d4f4:	1884703a 	and	r2,r3,r2
 800d4f8:	1001703a 	wrctl	status,r2
  return context;
 800d4fc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 800d500:	e0bfff15 	stw	r2,-4(fp)
  alt_llist_remove (&alarm->llist);
 800d504:	e0bffb17 	ldw	r2,-20(fp)
 800d508:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 800d50c:	e0bffd17 	ldw	r2,-12(fp)
 800d510:	10800017 	ldw	r2,0(r2)
 800d514:	e0fffd17 	ldw	r3,-12(fp)
 800d518:	18c00117 	ldw	r3,4(r3)
 800d51c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 800d520:	e0bffd17 	ldw	r2,-12(fp)
 800d524:	10800117 	ldw	r2,4(r2)
 800d528:	e0fffd17 	ldw	r3,-12(fp)
 800d52c:	18c00017 	ldw	r3,0(r3)
 800d530:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 800d534:	e0bffd17 	ldw	r2,-12(fp)
 800d538:	e0fffd17 	ldw	r3,-12(fp)
 800d53c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 800d540:	e0bffd17 	ldw	r2,-12(fp)
 800d544:	e0fffd17 	ldw	r3,-12(fp)
 800d548:	10c00015 	stw	r3,0(r2)
 800d54c:	e0bfff17 	ldw	r2,-4(fp)
 800d550:	e0bffe15 	stw	r2,-8(fp)
  NIOS2_WRITE_STATUS (context);
 800d554:	e0bffe17 	ldw	r2,-8(fp)
 800d558:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 800d55c:	0001883a 	nop
 800d560:	e037883a 	mov	sp,fp
 800d564:	df000017 	ldw	fp,0(sp)
 800d568:	dec00104 	addi	sp,sp,4
 800d56c:	f800283a 	ret

0800d570 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 800d570:	defffb04 	addi	sp,sp,-20
 800d574:	dfc00415 	stw	ra,16(sp)
 800d578:	df000315 	stw	fp,12(sp)
 800d57c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 800d580:	d0a00f17 	ldw	r2,-32708(gp)
 800d584:	e0bfff15 	stw	r2,-4(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 800d588:	d0a82817 	ldw	r2,-24416(gp)
 800d58c:	10800044 	addi	r2,r2,1
 800d590:	d0a82815 	stw	r2,-24416(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d594:	00002e06 	br	800d650 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 800d598:	e0bfff17 	ldw	r2,-4(fp)
 800d59c:	10800017 	ldw	r2,0(r2)
 800d5a0:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 800d5a4:	e0bfff17 	ldw	r2,-4(fp)
 800d5a8:	10800403 	ldbu	r2,16(r2)
 800d5ac:	10803fcc 	andi	r2,r2,255
 800d5b0:	10000426 	beq	r2,zero,800d5c4 <alt_tick+0x54>
 800d5b4:	d0a82817 	ldw	r2,-24416(gp)
 800d5b8:	1000021e 	bne	r2,zero,800d5c4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 800d5bc:	e0bfff17 	ldw	r2,-4(fp)
 800d5c0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 800d5c4:	e0bfff17 	ldw	r2,-4(fp)
 800d5c8:	10800217 	ldw	r2,8(r2)
 800d5cc:	d0e82817 	ldw	r3,-24416(gp)
 800d5d0:	18801d36 	bltu	r3,r2,800d648 <alt_tick+0xd8>
 800d5d4:	e0bfff17 	ldw	r2,-4(fp)
 800d5d8:	10800403 	ldbu	r2,16(r2)
 800d5dc:	10803fcc 	andi	r2,r2,255
 800d5e0:	1000191e 	bne	r2,zero,800d648 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 800d5e4:	e0bfff17 	ldw	r2,-4(fp)
 800d5e8:	10800317 	ldw	r2,12(r2)
 800d5ec:	e0ffff17 	ldw	r3,-4(fp)
 800d5f0:	18c00517 	ldw	r3,20(r3)
 800d5f4:	1809883a 	mov	r4,r3
 800d5f8:	103ee83a 	callr	r2
 800d5fc:	e0bffd15 	stw	r2,-12(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 800d600:	e0bffd17 	ldw	r2,-12(fp)
 800d604:	1000031e 	bne	r2,zero,800d614 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 800d608:	e13fff17 	ldw	r4,-4(fp)
 800d60c:	800d4d40 	call	800d4d4 <alt_alarm_stop>
 800d610:	00000d06 	br	800d648 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 800d614:	e0bfff17 	ldw	r2,-4(fp)
 800d618:	10c00217 	ldw	r3,8(r2)
 800d61c:	e0bffd17 	ldw	r2,-12(fp)
 800d620:	1887883a 	add	r3,r3,r2
 800d624:	e0bfff17 	ldw	r2,-4(fp)
 800d628:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 800d62c:	e0bfff17 	ldw	r2,-4(fp)
 800d630:	10c00217 	ldw	r3,8(r2)
 800d634:	d0a82817 	ldw	r2,-24416(gp)
 800d638:	1880032e 	bgeu	r3,r2,800d648 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 800d63c:	e0bfff17 	ldw	r2,-4(fp)
 800d640:	00c00044 	movi	r3,1
 800d644:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 800d648:	e0bffe17 	ldw	r2,-8(fp)
 800d64c:	e0bfff15 	stw	r2,-4(fp)
  while (alarm != (alt_alarm*) &alt_alarm_list)
 800d650:	e0ffff17 	ldw	r3,-4(fp)
 800d654:	d0a00f04 	addi	r2,gp,-32708
 800d658:	18bfcf1e 	bne	r3,r2,800d598 <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 800d65c:	0001883a 	nop
}
 800d660:	0001883a 	nop
 800d664:	e037883a 	mov	sp,fp
 800d668:	dfc00117 	ldw	ra,4(sp)
 800d66c:	df000017 	ldw	fp,0(sp)
 800d670:	dec00204 	addi	sp,sp,8
 800d674:	f800283a 	ret

0800d678 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 800d678:	deffff04 	addi	sp,sp,-4
 800d67c:	df000015 	stw	fp,0(sp)
 800d680:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 800d684:	000170fa 	wrctl	ienable,zero
}
 800d688:	0001883a 	nop
 800d68c:	e037883a 	mov	sp,fp
 800d690:	df000017 	ldw	fp,0(sp)
 800d694:	dec00104 	addi	sp,sp,4
 800d698:	f800283a 	ret

0800d69c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 800d69c:	defffa04 	addi	sp,sp,-24
 800d6a0:	dfc00515 	stw	ra,20(sp)
 800d6a4:	df000415 	stw	fp,16(sp)
 800d6a8:	df000404 	addi	fp,sp,16
 800d6ac:	e13ffd15 	stw	r4,-12(fp)
 800d6b0:	e17ffc15 	stw	r5,-16(fp)
  alt_dev* next = (alt_dev*) llist->next;
 800d6b4:	e0bffc17 	ldw	r2,-16(fp)
 800d6b8:	10800017 	ldw	r2,0(r2)
 800d6bc:	e0bfff15 	stw	r2,-4(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 800d6c0:	e13ffd17 	ldw	r4,-12(fp)
 800d6c4:	8000c880 	call	8000c88 <strlen>
 800d6c8:	10800044 	addi	r2,r2,1
 800d6cc:	e0bffe15 	stw	r2,-8(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 800d6d0:	00000d06 	br	800d708 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 800d6d4:	e0bfff17 	ldw	r2,-4(fp)
 800d6d8:	10800217 	ldw	r2,8(r2)
 800d6dc:	e0fffe17 	ldw	r3,-8(fp)
 800d6e0:	180d883a 	mov	r6,r3
 800d6e4:	e17ffd17 	ldw	r5,-12(fp)
 800d6e8:	1009883a 	mov	r4,r2
 800d6ec:	800d9cc0 	call	800d9cc <memcmp>
 800d6f0:	1000021e 	bne	r2,zero,800d6fc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 800d6f4:	e0bfff17 	ldw	r2,-4(fp)
 800d6f8:	00000706 	br	800d718 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 800d6fc:	e0bfff17 	ldw	r2,-4(fp)
 800d700:	10800017 	ldw	r2,0(r2)
 800d704:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) llist)
 800d708:	e0ffff17 	ldw	r3,-4(fp)
 800d70c:	e0bffc17 	ldw	r2,-16(fp)
 800d710:	18bff01e 	bne	r3,r2,800d6d4 <alt_find_dev+0x38>
  }
  
  /* No match found */
  
  return NULL;
 800d714:	0005883a 	mov	r2,zero
}
 800d718:	e037883a 	mov	sp,fp
 800d71c:	dfc00117 	ldw	ra,4(sp)
 800d720:	df000017 	ldw	fp,0(sp)
 800d724:	dec00204 	addi	sp,sp,8
 800d728:	f800283a 	ret

0800d72c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 800d72c:	defffb04 	addi	sp,sp,-20
 800d730:	dfc00415 	stw	ra,16(sp)
 800d734:	df000315 	stw	fp,12(sp)
 800d738:	df000304 	addi	fp,sp,12
 800d73c:	e13ffd15 	stw	r4,-12(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 800d740:	d0a00817 	ldw	r2,-32736(gp)
 800d744:	e0bfff15 	stw	r2,-4(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 800d748:	00003106 	br	800d810 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 800d74c:	e0bfff17 	ldw	r2,-4(fp)
 800d750:	10800217 	ldw	r2,8(r2)
 800d754:	1009883a 	mov	r4,r2
 800d758:	8000c880 	call	8000c88 <strlen>
 800d75c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 800d760:	e0bfff17 	ldw	r2,-4(fp)
 800d764:	10c00217 	ldw	r3,8(r2)
 800d768:	e0bffe17 	ldw	r2,-8(fp)
 800d76c:	10bfffc4 	addi	r2,r2,-1
 800d770:	1885883a 	add	r2,r3,r2
 800d774:	10800003 	ldbu	r2,0(r2)
 800d778:	10803fcc 	andi	r2,r2,255
 800d77c:	1080201c 	xori	r2,r2,128
 800d780:	10bfe004 	addi	r2,r2,-128
 800d784:	10800bd8 	cmpnei	r2,r2,47
 800d788:	1000031e 	bne	r2,zero,800d798 <alt_find_file+0x6c>
    {
      len -= 1;
 800d78c:	e0bffe17 	ldw	r2,-8(fp)
 800d790:	10bfffc4 	addi	r2,r2,-1
 800d794:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 800d798:	e0bffe17 	ldw	r2,-8(fp)
 800d79c:	e0fffd17 	ldw	r3,-12(fp)
 800d7a0:	1885883a 	add	r2,r3,r2
 800d7a4:	10800003 	ldbu	r2,0(r2)
 800d7a8:	10803fcc 	andi	r2,r2,255
 800d7ac:	1080201c 	xori	r2,r2,128
 800d7b0:	10bfe004 	addi	r2,r2,-128
 800d7b4:	10800be0 	cmpeqi	r2,r2,47
 800d7b8:	1000081e 	bne	r2,zero,800d7dc <alt_find_file+0xb0>
 800d7bc:	e0bffe17 	ldw	r2,-8(fp)
 800d7c0:	e0fffd17 	ldw	r3,-12(fp)
 800d7c4:	1885883a 	add	r2,r3,r2
 800d7c8:	10800003 	ldbu	r2,0(r2)
 800d7cc:	10803fcc 	andi	r2,r2,255
 800d7d0:	1080201c 	xori	r2,r2,128
 800d7d4:	10bfe004 	addi	r2,r2,-128
 800d7d8:	10000a1e 	bne	r2,zero,800d804 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 800d7dc:	e0bfff17 	ldw	r2,-4(fp)
 800d7e0:	10800217 	ldw	r2,8(r2)
 800d7e4:	e0fffe17 	ldw	r3,-8(fp)
 800d7e8:	180d883a 	mov	r6,r3
 800d7ec:	e17ffd17 	ldw	r5,-12(fp)
 800d7f0:	1009883a 	mov	r4,r2
 800d7f4:	800d9cc0 	call	800d9cc <memcmp>
    if (((name[len] == '/') || (name[len] == '\0')) && 
 800d7f8:	1000021e 	bne	r2,zero,800d804 <alt_find_file+0xd8>
    {
      /* match found */

      return next;
 800d7fc:	e0bfff17 	ldw	r2,-4(fp)
 800d800:	00000706 	br	800d820 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 800d804:	e0bfff17 	ldw	r2,-4(fp)
 800d808:	10800017 	ldw	r2,0(r2)
 800d80c:	e0bfff15 	stw	r2,-4(fp)
  while (next != (alt_dev*) &alt_fs_list)
 800d810:	e0ffff17 	ldw	r3,-4(fp)
 800d814:	d0a00804 	addi	r2,gp,-32736
 800d818:	18bfcc1e 	bne	r3,r2,800d74c <alt_find_file+0x20>
  }
  
  /* No match found */
  
  return NULL;     
 800d81c:	0005883a 	mov	r2,zero
}
 800d820:	e037883a 	mov	sp,fp
 800d824:	dfc00117 	ldw	ra,4(sp)
 800d828:	df000017 	ldw	fp,0(sp)
 800d82c:	dec00204 	addi	sp,sp,8
 800d830:	f800283a 	ret

0800d834 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 800d834:	defffc04 	addi	sp,sp,-16
 800d838:	df000315 	stw	fp,12(sp)
 800d83c:	df000304 	addi	fp,sp,12
 800d840:	e13ffd15 	stw	r4,-12(fp)
  alt_32 i;
  int rc = -EMFILE;
 800d844:	00bffa04 	movi	r2,-24
 800d848:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 800d84c:	e03fff15 	stw	zero,-4(fp)
 800d850:	00001d06 	br	800d8c8 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 800d854:	e0ffff17 	ldw	r3,-4(fp)
 800d858:	1805883a 	mov	r2,r3
 800d85c:	1085883a 	add	r2,r2,r2
 800d860:	10c5883a 	add	r2,r2,r3
 800d864:	100490ba 	slli	r2,r2,2
 800d868:	00c20074 	movhi	r3,2049
 800d86c:	10c7883a 	add	r3,r2,r3
 800d870:	18801e17 	ldw	r2,120(r3)
 800d874:	1000111e 	bne	r2,zero,800d8bc <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 800d878:	e0ffff17 	ldw	r3,-4(fp)
 800d87c:	1805883a 	mov	r2,r3
 800d880:	1085883a 	add	r2,r2,r2
 800d884:	10c5883a 	add	r2,r2,r3
 800d888:	100490ba 	slli	r2,r2,2
 800d88c:	e13ffd17 	ldw	r4,-12(fp)
 800d890:	00c20074 	movhi	r3,2049
 800d894:	10c7883a 	add	r3,r2,r3
 800d898:	19001e15 	stw	r4,120(r3)
      if (i > alt_max_fd)
 800d89c:	d0e00c17 	ldw	r3,-32720(gp)
 800d8a0:	e0bfff17 	ldw	r2,-4(fp)
 800d8a4:	1880020e 	bge	r3,r2,800d8b0 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 800d8a8:	e0bfff17 	ldw	r2,-4(fp)
 800d8ac:	d0a00c15 	stw	r2,-32720(gp)
      }
      rc = i;
 800d8b0:	e0bfff17 	ldw	r2,-4(fp)
 800d8b4:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 800d8b8:	00000706 	br	800d8d8 <alt_get_fd+0xa4>
  for (i = 0; i < ALT_MAX_FD; i++)
 800d8bc:	e0bfff17 	ldw	r2,-4(fp)
 800d8c0:	10800044 	addi	r2,r2,1
 800d8c4:	e0bfff15 	stw	r2,-4(fp)
 800d8c8:	e0bfff17 	ldw	r2,-4(fp)
 800d8cc:	10800810 	cmplti	r2,r2,32
 800d8d0:	103fe01e 	bne	r2,zero,800d854 <alt_get_fd+0x20>
    }
  }

 alt_get_fd_exit:
 800d8d4:	0001883a 	nop
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 800d8d8:	e0bffe17 	ldw	r2,-8(fp)
}
 800d8dc:	e037883a 	mov	sp,fp
 800d8e0:	df000017 	ldw	fp,0(sp)
 800d8e4:	dec00104 	addi	sp,sp,4
 800d8e8:	f800283a 	ret

0800d8ec <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 800d8ec:	defffe04 	addi	sp,sp,-8
 800d8f0:	df000115 	stw	fp,4(sp)
 800d8f4:	df000104 	addi	fp,sp,4
 800d8f8:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 800d8fc:	e0bfff17 	ldw	r2,-4(fp)
 800d900:	10bffe84 	addi	r2,r2,-6
 800d904:	10c00428 	cmpgeui	r3,r2,16
 800d908:	1800191e 	bne	r3,zero,800d970 <alt_exception_cause_generated_bad_addr+0x84>
 800d90c:	100690ba 	slli	r3,r2,2
 800d910:	00820074 	movhi	r2,2049
 800d914:	1885883a 	add	r2,r3,r2
 800d918:	10b64817 	ldw	r2,-9952(r2)
 800d91c:	1000683a 	jmp	r2
 800d920:	0800d960 	cmpeqi	zero,at,869
 800d924:	0800d960 	cmpeqi	zero,at,869
 800d928:	0800d970 	cmpltui	zero,at,869
 800d92c:	0800d970 	cmpltui	zero,at,869
 800d930:	0800d970 	cmpltui	zero,at,869
 800d934:	0800d960 	cmpeqi	zero,at,869
 800d938:	0800d968 	cmpgeui	zero,at,869
 800d93c:	0800d970 	cmpltui	zero,at,869
 800d940:	0800d960 	cmpeqi	zero,at,869
 800d944:	0800d960 	cmpeqi	zero,at,869
 800d948:	0800d970 	cmpltui	zero,at,869
 800d94c:	0800d960 	cmpeqi	zero,at,869
 800d950:	0800d968 	cmpgeui	zero,at,869
 800d954:	0800d970 	cmpltui	zero,at,869
 800d958:	0800d970 	cmpltui	zero,at,869
 800d95c:	0800d960 	cmpeqi	zero,at,869
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 800d960:	00800044 	movi	r2,1
 800d964:	00000306 	br	800d974 <alt_exception_cause_generated_bad_addr+0x88>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 800d968:	0005883a 	mov	r2,zero
 800d96c:	00000106 	br	800d974 <alt_exception_cause_generated_bad_addr+0x88>

  default:
    return 0;
 800d970:	0005883a 	mov	r2,zero
  }
}
 800d974:	e037883a 	mov	sp,fp
 800d978:	df000017 	ldw	fp,0(sp)
 800d97c:	dec00104 	addi	sp,sp,4
 800d980:	f800283a 	ret

0800d984 <atexit>:
 800d984:	200b883a 	mov	r5,r4
 800d988:	000f883a 	mov	r7,zero
 800d98c:	000d883a 	mov	r6,zero
 800d990:	0009883a 	mov	r4,zero
 800d994:	800da581 	jmpi	800da58 <__register_exitproc>

0800d998 <exit>:
 800d998:	defffe04 	addi	sp,sp,-8
 800d99c:	000b883a 	mov	r5,zero
 800d9a0:	dc000015 	stw	r16,0(sp)
 800d9a4:	dfc00115 	stw	ra,4(sp)
 800d9a8:	2021883a 	mov	r16,r4
 800d9ac:	800dae80 	call	800dae8 <__call_exitprocs>
 800d9b0:	00820074 	movhi	r2,2049
 800d9b4:	11008117 	ldw	r4,516(r2)
 800d9b8:	20800f17 	ldw	r2,60(r4)
 800d9bc:	10000126 	beq	r2,zero,800d9c4 <exit+0x2c>
 800d9c0:	103ee83a 	callr	r2
 800d9c4:	8009883a 	mov	r4,r16
 800d9c8:	800dc000 	call	800dc00 <_exit>

0800d9cc <memcmp>:
 800d9cc:	30800130 	cmpltui	r2,r6,4
 800d9d0:	10000b1e 	bne	r2,zero,800da00 <memcmp+0x34>
 800d9d4:	2144b03a 	or	r2,r4,r5
 800d9d8:	108000cc 	andi	r2,r2,3
 800d9dc:	10001a1e 	bne	r2,zero,800da48 <memcmp+0x7c>
 800d9e0:	20c00017 	ldw	r3,0(r4)
 800d9e4:	28800017 	ldw	r2,0(r5)
 800d9e8:	1880171e 	bne	r3,r2,800da48 <memcmp+0x7c>
 800d9ec:	31bfff04 	addi	r6,r6,-4
 800d9f0:	30800128 	cmpgeui	r2,r6,4
 800d9f4:	21000104 	addi	r4,r4,4
 800d9f8:	29400104 	addi	r5,r5,4
 800d9fc:	103ff81e 	bne	r2,zero,800d9e0 <memcmp+0x14>
 800da00:	30ffffc4 	addi	r3,r6,-1
 800da04:	30000e26 	beq	r6,zero,800da40 <memcmp+0x74>
 800da08:	29800003 	ldbu	r6,0(r5)
 800da0c:	20800003 	ldbu	r2,0(r4)
 800da10:	30800f1e 	bne	r6,r2,800da50 <memcmp+0x84>
 800da14:	18800044 	addi	r2,r3,1
 800da18:	20c00044 	addi	r3,r4,1
 800da1c:	2089883a 	add	r4,r4,r2
 800da20:	00000506 	br	800da38 <memcmp+0x6c>
 800da24:	18800003 	ldbu	r2,0(r3)
 800da28:	29800003 	ldbu	r6,0(r5)
 800da2c:	18c00044 	addi	r3,r3,1
 800da30:	10803fcc 	andi	r2,r2,255
 800da34:	1180061e 	bne	r2,r6,800da50 <memcmp+0x84>
 800da38:	29400044 	addi	r5,r5,1
 800da3c:	193ff91e 	bne	r3,r4,800da24 <memcmp+0x58>
 800da40:	0005883a 	mov	r2,zero
 800da44:	f800283a 	ret
 800da48:	30ffffc4 	addi	r3,r6,-1
 800da4c:	003fee06 	br	800da08 <memcmp+0x3c>
 800da50:	1185c83a 	sub	r2,r2,r6
 800da54:	f800283a 	ret

0800da58 <__register_exitproc>:
 800da58:	00820074 	movhi	r2,2049
 800da5c:	10c08117 	ldw	r3,516(r2)
 800da60:	18805217 	ldw	r2,328(r3)
 800da64:	10001726 	beq	r2,zero,800dac4 <__register_exitproc+0x6c>
 800da68:	10c00117 	ldw	r3,4(r2)
 800da6c:	1a000808 	cmpgei	r8,r3,32
 800da70:	40001b1e 	bne	r8,zero,800dae0 <__register_exitproc+0x88>
 800da74:	20000b26 	beq	r4,zero,800daa4 <__register_exitproc+0x4c>
 800da78:	181090ba 	slli	r8,r3,2
 800da7c:	02400044 	movi	r9,1
 800da80:	48d2983a 	sll	r9,r9,r3
 800da84:	1211883a 	add	r8,r2,r8
 800da88:	41802215 	stw	r6,136(r8)
 800da8c:	11806217 	ldw	r6,392(r2)
 800da90:	21000098 	cmpnei	r4,r4,2
 800da94:	324cb03a 	or	r6,r6,r9
 800da98:	11806215 	stw	r6,392(r2)
 800da9c:	41c04215 	stw	r7,264(r8)
 800daa0:	20000b26 	beq	r4,zero,800dad0 <__register_exitproc+0x78>
 800daa4:	19000084 	addi	r4,r3,2
 800daa8:	200890ba 	slli	r4,r4,2
 800daac:	18c00044 	addi	r3,r3,1
 800dab0:	10c00115 	stw	r3,4(r2)
 800dab4:	1105883a 	add	r2,r2,r4
 800dab8:	11400015 	stw	r5,0(r2)
 800dabc:	0005883a 	mov	r2,zero
 800dac0:	f800283a 	ret
 800dac4:	18805304 	addi	r2,r3,332
 800dac8:	18805215 	stw	r2,328(r3)
 800dacc:	003fe606 	br	800da68 <__register_exitproc+0x10>
 800dad0:	11006317 	ldw	r4,396(r2)
 800dad4:	2252b03a 	or	r9,r4,r9
 800dad8:	12406315 	stw	r9,396(r2)
 800dadc:	003ff106 	br	800daa4 <__register_exitproc+0x4c>
 800dae0:	00bfffc4 	movi	r2,-1
 800dae4:	f800283a 	ret

0800dae8 <__call_exitprocs>:
 800dae8:	defff704 	addi	sp,sp,-36
 800daec:	00820074 	movhi	r2,2049
 800daf0:	ddc00715 	stw	r23,28(sp)
 800daf4:	15c08117 	ldw	r23,516(r2)
 800daf8:	dd400515 	stw	r21,20(sp)
 800dafc:	dd000415 	stw	r20,16(sp)
 800db00:	dcc00315 	stw	r19,12(sp)
 800db04:	dfc00815 	stw	ra,32(sp)
 800db08:	dd800615 	stw	r22,24(sp)
 800db0c:	dc800215 	stw	r18,8(sp)
 800db10:	dc400115 	stw	r17,4(sp)
 800db14:	dc000015 	stw	r16,0(sp)
 800db18:	2029883a 	mov	r20,r4
 800db1c:	282b883a 	mov	r21,r5
 800db20:	04c00044 	movi	r19,1
 800db24:	bc805217 	ldw	r18,328(r23)
 800db28:	90000d26 	beq	r18,zero,800db60 <__call_exitprocs+0x78>
 800db2c:	94000117 	ldw	r16,4(r18)
 800db30:	847fffc4 	addi	r17,r16,-1
 800db34:	88000a16 	blt	r17,zero,800db60 <__call_exitprocs+0x78>
 800db38:	84000044 	addi	r16,r16,1
 800db3c:	802090ba 	slli	r16,r16,2
 800db40:	9421883a 	add	r16,r18,r16
 800db44:	a8001126 	beq	r21,zero,800db8c <__call_exitprocs+0xa4>
 800db48:	80804017 	ldw	r2,256(r16)
 800db4c:	15400f26 	beq	r2,r21,800db8c <__call_exitprocs+0xa4>
 800db50:	8c7fffc4 	addi	r17,r17,-1
 800db54:	88bfffd8 	cmpnei	r2,r17,-1
 800db58:	843fff04 	addi	r16,r16,-4
 800db5c:	103ff91e 	bne	r2,zero,800db44 <__call_exitprocs+0x5c>
 800db60:	dfc00817 	ldw	ra,32(sp)
 800db64:	ddc00717 	ldw	r23,28(sp)
 800db68:	dd800617 	ldw	r22,24(sp)
 800db6c:	dd400517 	ldw	r21,20(sp)
 800db70:	dd000417 	ldw	r20,16(sp)
 800db74:	dcc00317 	ldw	r19,12(sp)
 800db78:	dc800217 	ldw	r18,8(sp)
 800db7c:	dc400117 	ldw	r17,4(sp)
 800db80:	dc000017 	ldw	r16,0(sp)
 800db84:	dec00904 	addi	sp,sp,36
 800db88:	f800283a 	ret
 800db8c:	90800117 	ldw	r2,4(r18)
 800db90:	81800017 	ldw	r6,0(r16)
 800db94:	10bfffc4 	addi	r2,r2,-1
 800db98:	14401526 	beq	r2,r17,800dbf0 <__call_exitprocs+0x108>
 800db9c:	80000015 	stw	zero,0(r16)
 800dba0:	303feb26 	beq	r6,zero,800db50 <__call_exitprocs+0x68>
 800dba4:	9c46983a 	sll	r3,r19,r17
 800dba8:	90806217 	ldw	r2,392(r18)
 800dbac:	95800117 	ldw	r22,4(r18)
 800dbb0:	1884703a 	and	r2,r3,r2
 800dbb4:	1000061e 	bne	r2,zero,800dbd0 <__call_exitprocs+0xe8>
 800dbb8:	303ee83a 	callr	r6
 800dbbc:	90800117 	ldw	r2,4(r18)
 800dbc0:	15bfd81e 	bne	r2,r22,800db24 <__call_exitprocs+0x3c>
 800dbc4:	b8805217 	ldw	r2,328(r23)
 800dbc8:	14bfe126 	beq	r2,r18,800db50 <__call_exitprocs+0x68>
 800dbcc:	003fd506 	br	800db24 <__call_exitprocs+0x3c>
 800dbd0:	90806317 	ldw	r2,396(r18)
 800dbd4:	81002017 	ldw	r4,128(r16)
 800dbd8:	1886703a 	and	r3,r3,r2
 800dbdc:	1800061e 	bne	r3,zero,800dbf8 <__call_exitprocs+0x110>
 800dbe0:	200b883a 	mov	r5,r4
 800dbe4:	a009883a 	mov	r4,r20
 800dbe8:	303ee83a 	callr	r6
 800dbec:	003ff306 	br	800dbbc <__call_exitprocs+0xd4>
 800dbf0:	94400115 	stw	r17,4(r18)
 800dbf4:	003fea06 	br	800dba0 <__call_exitprocs+0xb8>
 800dbf8:	303ee83a 	callr	r6
 800dbfc:	003fef06 	br	800dbbc <__call_exitprocs+0xd4>

0800dc00 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 800dc00:	defffd04 	addi	sp,sp,-12
 800dc04:	df000215 	stw	fp,8(sp)
 800dc08:	df000204 	addi	fp,sp,8
 800dc0c:	e13ffe15 	stw	r4,-8(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 800dc10:	0001883a 	nop
 800dc14:	e0bffe17 	ldw	r2,-8(fp)
 800dc18:	e0bfff15 	stw	r2,-4(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 800dc1c:	e0bfff17 	ldw	r2,-4(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 800dc20:	10000226 	beq	r2,zero,800dc2c <_exit+0x2c>
    ALT_SIM_FAIL();
 800dc24:	002af070 	cmpltui	zero,zero,43969
 800dc28:	00000106 	br	800dc30 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 800dc2c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 800dc30:	003fff06 	br	800dc30 <_exit+0x30>
